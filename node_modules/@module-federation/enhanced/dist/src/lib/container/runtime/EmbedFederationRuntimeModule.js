"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const normalize_webpack_path_1 = require("@module-federation/sdk/normalize-webpack-path");
const utils_1 = require("./utils");
const { RuntimeModule, NormalModule, Template, RuntimeGlobals } = require((0, normalize_webpack_path_1.normalizeWebpackPath)('webpack'));
const ConcatenatedModule = require((0, normalize_webpack_path_1.normalizeWebpackPath)('webpack/lib/optimize/ConcatenatedModule'));
const federationGlobal = (0, utils_1.getFederationGlobalScope)(RuntimeGlobals);
class EmbedFederationRuntimeModule extends RuntimeModule {
    constructor(bundlerRuntimePath) {
        super('EmbedFederationRuntimeModule', RuntimeModule.STAGE_ATTACH);
        this.bundlerRuntimePath = bundlerRuntimePath;
    }
    identifier() {
        return 'webpack/runtime/embed/federation';
    }
    generate() {
        const { compilation, chunk, chunkGraph, bundlerRuntimePath } = this;
        if (!chunk || !chunkGraph || !compilation) {
            return null;
        }
        const found = this.findModule(chunk, bundlerRuntimePath);
        if (!found)
            return null;
        const initRuntimeModuleGetter = compilation.runtimeTemplate.moduleRaw({
            module: found,
            chunkGraph,
            request: this.bundlerRuntimePath,
            weak: false,
            runtimeRequirements: new Set(),
        });
        const exportExpr = compilation.runtimeTemplate.exportFromImport({
            moduleGraph: compilation.moduleGraph,
            module: found,
            request: this.bundlerRuntimePath,
            exportName: ['default'],
            originModule: found,
            asiSafe: true,
            isCall: false,
            callContext: false,
            defaultInterop: true,
            importVar: 'federation',
            initFragments: [],
            runtime: chunk.runtime,
            runtimeRequirements: new Set(),
        });
        return Template.asString([
            `var federation = ${initRuntimeModuleGetter};`,
            `federation = ${exportExpr}`,
            `var prevFederation = ${federationGlobal};`,
            `${federationGlobal} = {};`,
            `for (var key in federation) {`,
            Template.indent(`${federationGlobal}[key] = federation[key];`),
            `}`,
            `for (var key in prevFederation) {`,
            Template.indent(`${federationGlobal}[key] = prevFederation[key];`),
            `}`,
            'federation = undefined;',
        ]);
    }
    findModule(chunk, bundlerRuntimePath) {
        const { chunkGraph, compilation } = this;
        if (!chunk || !chunkGraph || !compilation) {
            return null;
        }
        for (const mod of chunkGraph.getChunkModulesIterable(chunk)) {
            if (mod instanceof NormalModule && mod.resource === bundlerRuntimePath) {
                return mod;
            }
            if (mod instanceof ConcatenatedModule) {
                for (const m of mod.modules) {
                    if (m instanceof NormalModule && m.resource === bundlerRuntimePath) {
                        return mod;
                    }
                }
            }
        }
        return null;
    }
}
exports.default = EmbedFederationRuntimeModule;
//# sourceMappingURL=EmbedFederationRuntimeModule.js.map