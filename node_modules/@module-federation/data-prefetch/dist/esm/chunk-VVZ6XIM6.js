import {
  logger_default
} from "./chunk-TTJJJ2WZ.js";
import {
  MFDataPrefetch
} from "./chunk-ISLXMAIA.js";
import {
  getSignalFromManifest
} from "./chunk-AJPO2B2T.js";

// src/plugin.ts
import { getResourceUrl } from "@module-federation/sdk";
var loadingArray = [];
var strategy = "loaded-first";
var sharedFlag = strategy;
var prefetchPlugin = () => ({
  name: "data-prefetch-runtime-plugin",
  initContainer(options) {
    const { remoteSnapshot, remoteInfo, id, origin } = options;
    const snapshot = remoteSnapshot;
    const { name } = remoteInfo;
    const prefetchOptions = {
      name,
      remote: remoteInfo,
      origin,
      remoteSnapshot: snapshot
    };
    const signal = getSignalFromManifest(snapshot);
    if (!signal) {
      return options;
    }
    if (sharedFlag !== strategy) {
      throw new Error(
        `[Module Federation Data Prefetch]: If you want to use data prefetch, the shared strategy must be 'loaded-first'`
      );
    }
    const instance = MFDataPrefetch.getInstance(name) || new MFDataPrefetch(prefetchOptions);
    let prefetchUrl;
    if (snapshot.prefetchEntry) {
      prefetchUrl = getResourceUrl(snapshot, snapshot.prefetchEntry);
    }
    const exist = loadingArray.find((loading) => loading.id === id);
    if (exist) {
      return options;
    }
    const promise = instance.loadEntry(prefetchUrl).then(async () => {
      const projectExports = instance.getProjectExports();
      if (projectExports instanceof Promise) {
        await projectExports;
      }
      return Promise.resolve().then(() => {
        const exports = instance.getExposeExports(id);
        logger_default.info(
          `1. Start Prefetch initContainer: ${id} - ${performance.now()}`
        );
        const result = Object.keys(exports).map((k) => {
          const value = instance.prefetch({
            id,
            functionId: k
          });
          const functionId = k;
          return {
            value,
            functionId
          };
        });
        return result;
      });
    });
    loadingArray.push({
      id,
      promise
    });
    return options;
  },
  afterResolve(options) {
    const { remoteSnapshot, remoteInfo, id, origin } = options;
    const snapshot = remoteSnapshot;
    const { name } = remoteInfo;
    const prefetchOptions = {
      name,
      remote: remoteInfo,
      origin,
      remoteSnapshot: snapshot
    };
    const signal = getSignalFromManifest(snapshot);
    if (!signal) {
      return options;
    }
    const inited = loadingArray.some((info) => info.id === id);
    if (!inited) {
      return options;
    }
    if (sharedFlag !== strategy) {
      throw new Error(
        `[Module Federation Data Prefetch]: If you want to use data prefetch, the shared strategy must be 'loaded-first'`
      );
    }
    const instance = MFDataPrefetch.getInstance(name) || new MFDataPrefetch(prefetchOptions);
    let prefetchUrl;
    if (snapshot.prefetchEntry) {
      prefetchUrl = getResourceUrl(snapshot, snapshot.prefetchEntry);
    }
    const index = loadingArray.findIndex((loading) => loading.id === id);
    if (index !== -1) {
      loadingArray.splice(index, 1);
    }
    const promise = instance.loadEntry(prefetchUrl).then(async () => {
      const projectExports = instance.getProjectExports();
      if (projectExports instanceof Promise) {
        await projectExports;
      }
      return Promise.resolve().then(() => {
        const exports = instance.getExposeExports(id);
        logger_default.info(
          `1. Start Prefetch afterResolve: ${id} - ${performance.now()}`
        );
        const result = Object.keys(exports).map((k) => {
          const value = instance.prefetch({
            id,
            functionId: k
          });
          const functionId = k;
          return {
            value,
            functionId
          };
        });
        return result;
      });
    });
    loadingArray.push({
      id,
      promise
    });
    return options;
  },
  async onLoad(options) {
    var _a;
    const { remote, id } = options;
    const { name } = remote;
    const promise = (_a = loadingArray.find((loading) => loading.id === id)) == null ? void 0 : _a.promise;
    if (promise) {
      const prefetch = await promise;
      const prefetchValue = prefetch.map((result) => result.value);
      await Promise.all(prefetchValue);
      const instance = MFDataPrefetch.getInstance(name);
      prefetch.forEach((result) => {
        const { value, functionId } = result;
        instance.memorize(id + functionId, value);
      });
    }
    return options;
  },
  beforeLoadShare(options) {
    const shareInfo = options.shareInfo;
    sharedFlag = (shareInfo == null ? void 0 : shareInfo.strategy) || sharedFlag;
    return options;
  }
});
var plugin_default = prefetchPlugin;

export {
  prefetchPlugin,
  plugin_default
};
