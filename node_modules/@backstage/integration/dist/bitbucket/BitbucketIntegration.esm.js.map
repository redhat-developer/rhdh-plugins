{"version":3,"file":"BitbucketIntegration.esm.js","sources":["../../src/bitbucket/BitbucketIntegration.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketIntegrationConfig,\n  readBitbucketIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket based integration.\n *\n * @public\n * @deprecated replaced by the integrations bitbucketCloud and bitbucketServer.\n */\nexport class BitbucketIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucket') ?? [\n        // if integrations.bitbucket was not used assume the use was migrated to the new configs\n        // and backport for the deprecated integration to be usable for other parts of the system\n        // until these got migrated\n        ...(config.getOptionalConfigArray('integrations.bitbucketCloud') ?? []),\n        ...(config.getOptionalConfigArray('integrations.bitbucketServer') ??\n          []),\n      ],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: BitbucketIntegrationConfig) {}\n\n  get type(): string {\n    return 'bitbucket';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    if (!options.lineNumber) {\n      return resolved;\n    }\n\n    const url = new URL(resolved);\n\n    if (this.integrationConfig.host === 'bitbucket.org') {\n      // Bitbucket Cloud uses the syntax #lines-{start}[:{end}][,...]\n      url.hash = `lines-${options.lineNumber}`;\n    } else {\n      // Bitbucket Server uses the syntax #{start}[-{end}][,...]\n      url.hash = `${options.lineNumber}`;\n    }\n\n    return url.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    // TODO: Not sure what spa=0 does, at least bitbucket.org doesn't support it\n    // but this is taken over from the initial implementation.\n    editUrl.searchParams.set('spa', '0');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n"],"names":[],"mappings":";;;;AA8BO,MAAM,oBAA+C,CAAA;AAAA,EAoB1D,YAA6B,iBAA+C,EAAA;AAA/C,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA;AAAA,GAAgD;AAAA,EAnB7E,OAAO,UAAwD,CAAC;AAAA,IAC9D,MAAA;AAAA,GACI,KAAA;AACJ,IAAA,MAAM,OAAU,GAAA,+BAAA;AAAA,MACd,MAAA,CAAO,sBAAuB,CAAA,wBAAwB,CAAK,IAAA;AAAA;AAAA;AAAA;AAAA,QAIzD,GAAI,MAAA,CAAO,sBAAuB,CAAA,6BAA6B,KAAK,EAAC;AAAA,QACrE,GAAI,MAAA,CAAO,sBAAuB,CAAA,8BAA8B,KAC9D,EAAC;AAAA,OACL;AAAA,KACF,CAAA;AACA,IAAO,OAAA,iBAAA;AAAA,MACL,QAAQ,GAAI,CAAA,CAAA,CAAA,KAAK,IAAI,oBAAA,CAAqB,CAAC,CAAC,CAAA;AAAA,MAC5C,CAAA,CAAA,KAAK,EAAE,MAAO,CAAA,IAAA;AAAA,KAChB,CAAA;AAAA,GACF,CAAA;AAAA,EAIA,IAAI,IAAe,GAAA;AACjB,IAAO,OAAA,WAAA,CAAA;AAAA,GACT;AAAA,EAEA,IAAI,KAAgB,GAAA;AAClB,IAAA,OAAO,KAAK,iBAAkB,CAAA,IAAA,CAAA;AAAA,GAChC;AAAA,EAEA,IAAI,MAAqC,GAAA;AACvC,IAAA,OAAO,IAAK,CAAA,iBAAA,CAAA;AAAA,GACd;AAAA,EAEA,WAAW,OAIA,EAAA;AACT,IAAM,MAAA,QAAA,GAAW,qBAAqB,OAAO,CAAA,CAAA;AAC7C,IAAI,IAAA,CAAC,QAAQ,UAAY,EAAA;AACvB,MAAO,OAAA,QAAA,CAAA;AAAA,KACT;AAEA,IAAM,MAAA,GAAA,GAAM,IAAI,GAAA,CAAI,QAAQ,CAAA,CAAA;AAE5B,IAAI,IAAA,IAAA,CAAK,iBAAkB,CAAA,IAAA,KAAS,eAAiB,EAAA;AAEnD,MAAI,GAAA,CAAA,IAAA,GAAO,CAAS,MAAA,EAAA,OAAA,CAAQ,UAAU,CAAA,CAAA,CAAA;AAAA,KACjC,MAAA;AAEL,MAAI,GAAA,CAAA,IAAA,GAAO,CAAG,EAAA,OAAA,CAAQ,UAAU,CAAA,CAAA,CAAA;AAAA,KAClC;AAEA,IAAA,OAAO,IAAI,QAAS,EAAA,CAAA;AAAA,GACtB;AAAA,EAEA,eAAe,GAAqB,EAAA;AAClC,IAAM,MAAA,OAAA,GAAU,YAAY,GAAG,CAAA,CAAA;AAC/B,IAAM,MAAA,OAAA,GAAU,IAAI,GAAA,CAAI,GAAG,CAAA,CAAA;AAE3B,IAAQ,OAAA,CAAA,YAAA,CAAa,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAGvC,IAAQ,OAAA,CAAA,YAAA,CAAa,GAAI,CAAA,KAAA,EAAO,GAAG,CAAA,CAAA;AACnC,IAAA,OAAA,CAAQ,YAAa,CAAA,GAAA,CAAI,IAAM,EAAA,OAAA,CAAQ,GAAG,CAAA,CAAA;AAC1C,IAAA,OAAO,QAAQ,QAAS,EAAA,CAAA;AAAA,GAC1B;AACF;;;;"}