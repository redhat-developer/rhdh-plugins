'use strict';

var role = require('./role-8b0z7P0n.cjs.js');
var fs = require('fs-extra');
var index = require('./index-DmUbBCFk.cjs.js');
var webpack = require('webpack');
var moduleFederation = require('./moduleFederation-8XXecxLD.cjs.js');
require('yn');
var path = require('path');
require('react-dev-utils/FileSizeReporter');
require('react-dev-utils/formatWebpackMessages');
var chalk = require('chalk');
require('eslint-webpack-plugin');
require('fork-ts-checker-webpack-plugin');
require('html-webpack-plugin');
require('@module-federation/enhanced/webpack');
require('@backstage/cli-common');
require('react-dev-utils/ModuleScopePlugin');
require('run-script-webpack-plugin');
require('@pmmmwh/react-refresh-webpack-plugin');
require('@manypkg/get-packages');
require('webpack-node-externals');
require('lodash/pickBy');
require('./run-CSt1n0F1.cjs.js');
require('mini-css-extract-plugin');
var openBrowser = require('react-dev-utils/openBrowser');
var WebpackDevServer = require('webpack-dev-server');
require('@backstage/config-loader');
require('@backstage/config');
require('@backstage/cli-node');
var chokidar = require('chokidar');
var ctrlcWindows = require('ctrlc-windows');
var errors = require('@backstage/errors');
var debounce = require('lodash/debounce');
var url = require('url');
var spawn = require('cross-spawn');
var config = require('./config-BMsjTUVf.cjs.js');
require('commander');
require('semver');
require('./entryPoints-CoHH4lBA.cjs.js');
require('./svgrTemplate-BTjBQ3by.cjs.js');
require('p-queue');
require('child_process');
require('util');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var webpack__default = /*#__PURE__*/_interopDefaultCompat(webpack);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var openBrowser__default = /*#__PURE__*/_interopDefaultCompat(openBrowser);
var WebpackDevServer__default = /*#__PURE__*/_interopDefaultCompat(WebpackDevServer);
var debounce__default = /*#__PURE__*/_interopDefaultCompat(debounce);
var spawn__default = /*#__PURE__*/_interopDefaultCompat(spawn);

async function serveBackend(options) {
  const paths = moduleFederation.resolveBundlingPaths(options);
  const config = await moduleFederation.createBackendConfig(paths, {
    ...options,
    isDev: true
  });
  process.env.NODE_ENV = "development";
  const compiler = webpack__default.default(config, (err) => {
    if (err) {
      console.error(err);
    } else console.log("Build succeeded");
  });
  const waitForExit = async () => {
    for (const signal of ["SIGINT", "SIGTERM"]) {
      process.on(signal, () => {
        compiler.close(() => process.exit());
      });
    }
    return new Promise(() => {
    });
  };
  return waitForExit;
}

async function serveBundle(options) {
  const paths = moduleFederation.resolveBundlingPaths(options);
  const targetPkg = await fs__default.default.readJson(paths.targetPackageJson);
  if (options.verifyVersions) {
    if (targetPkg.dependencies?.["react-router"]?.includes("beta") || targetPkg.dependencies?.["react-router-dom"]?.includes("beta")) {
      console.warn(
        chalk__default.default.yellow(`
DEPRECATION WARNING: React Router Beta is deprecated and support for it will be removed in a future release.
                     Please migrate to use React Router v6 stable.
                     See https://backstage.io/docs/tutorials/react-router-stable-migration
`)
      );
    }
  }
  checkReactVersion();
  const { name } = await fs__default.default.readJson(index.paths.resolveTarget("package.json"));
  let webpackServer = void 0;
  let viteServer = void 0;
  let latestFrontendAppConfigs = [];
  const cliConfig = await config.loadCliConfig({
    args: options.configPaths,
    fromPackage: name,
    withFilteredKeys: true,
    watch(appConfigs) {
      latestFrontendAppConfigs = appConfigs;
      webpackServer?.invalidate();
      viteServer?.restart();
    }
  });
  latestFrontendAppConfigs = cliConfig.frontendAppConfigs;
  const appBaseUrl = cliConfig.frontendConfig.getOptionalString("app.baseUrl");
  const backendBaseUrl = cliConfig.frontendConfig.getOptionalString("backend.baseUrl");
  if (appBaseUrl && appBaseUrl === backendBaseUrl) {
    console.log(
      chalk__default.default.yellow(
        `\u26A0\uFE0F   Conflict between app baseUrl and backend baseUrl:

    app.baseUrl:     ${appBaseUrl}
    backend.baseUrl: ${backendBaseUrl}

    Must have unique hostname and/or ports.

    This can be resolved by changing app.baseUrl and backend.baseUrl to point to their respective local development ports.
`
      )
    );
  }
  const { frontendConfig, fullConfig } = cliConfig;
  const url = moduleFederation.resolveBaseUrl(frontendConfig, options.moduleFederation);
  const { host, port } = moduleFederation.resolveEndpoint(
    frontendConfig,
    options.moduleFederation
  );
  const detectedModulesEntryPoint = await moduleFederation.createDetectedModulesEntryPoint({
    config: fullConfig,
    targetPath: paths.targetPath,
    watch() {
      webpackServer?.invalidate();
      viteServer?.restart();
    }
  });
  const commonConfigOptions = {
    ...options,
    checksEnabled: options.checksEnabled,
    isDev: true,
    baseUrl: url,
    frontendConfig,
    getFrontendAppConfigs: () => {
      return latestFrontendAppConfigs;
    }
  };
  const config$1 = await moduleFederation.createConfig(paths, {
    ...commonConfigOptions,
    additionalEntryPoints: detectedModulesEntryPoint,
    moduleFederation: options.moduleFederation
  });
  if (process.env.EXPERIMENTAL_VITE) {
    const vite = require("vite");
    const { default: viteReact } = require("@vitejs/plugin-react");
    const {
      nodePolyfills: viteNodePolyfills
    } = require("vite-plugin-node-polyfills");
    const { createHtmlPlugin: viteHtml } = require("vite-plugin-html");
    viteServer = await vite.createServer({
      define: {
        global: "window",
        "process.argv": JSON.stringify(process.argv),
        "process.env.APP_CONFIG": JSON.stringify(cliConfig.frontendAppConfigs),
        // This allows for conditional imports of react-dom/client, since there's no way
        // to check for presence of it in source code without module resolution errors.
        "process.env.HAS_REACT_DOM_CLIENT": JSON.stringify(moduleFederation.hasReactDomClient())
      },
      plugins: [
        viteReact(),
        viteNodePolyfills(),
        viteHtml({
          entry: paths.targetEntry,
          // todo(blam): we should look at contributing to thPe plugin here
          // to support absolute paths, but works in the interim at least.
          template: "public/index.html",
          inject: {
            data: {
              config: frontendConfig,
              publicPath: config$1.output?.publicPath
            }
          }
        })
      ],
      server: {
        host,
        port
      },
      publicDir: paths.targetPublic,
      root: paths.targetPath
    });
  } else {
    const publicPaths = await moduleFederation.resolveOptionalBundlingPaths({
      entry: "src/index-public-experimental",
      dist: "dist/public"
    });
    if (publicPaths) {
      console.log(
        chalk__default.default.yellow(
          `\u26A0\uFE0F  WARNING: The app /public entry point is an experimental feature that may receive immediate breaking changes.`
        )
      );
    }
    const compiler = publicPaths ? webpack__default.default([config$1, await moduleFederation.createConfig(publicPaths, commonConfigOptions)]) : webpack__default.default(config$1);
    webpackServer = new WebpackDevServer__default.default(
      {
        hot: !process.env.CI,
        devMiddleware: {
          publicPath: config$1.output?.publicPath,
          stats: "errors-warnings"
        },
        static: paths.targetPublic ? {
          publicPath: config$1.output?.publicPath,
          directory: paths.targetPublic
        } : void 0,
        historyApiFallback: options.moduleFederation?.mode === "remote" ? false : {
          // Paths with dots should still use the history fallback.
          // See https://github.com/facebookincubator/create-react-app/issues/387.
          disableDotRule: true,
          // The index needs to be rewritten relative to the new public path, including subroutes.
          index: `${config$1.output?.publicPath}index.html`
        },
        server: url.protocol === "https:" ? {
          type: "https",
          options: {
            cert: fullConfig.getString("app.https.certificate.cert"),
            key: fullConfig.getString("app.https.certificate.key")
          }
        } : {},
        host,
        port,
        proxy: targetPkg.proxy,
        // When the dev server is behind a proxy, the host and public hostname differ
        allowedHosts: [url.hostname],
        client: {
          webSocketURL: { hostname: host, port }
        },
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, OPTIONS",
          "Access-Control-Allow-Headers": "X-Requested-With, content-type, Authorization"
        }
      },
      compiler
    );
  }
  await viteServer?.listen();
  await new Promise(async (resolve, reject) => {
    if (webpackServer) {
      webpackServer.startCallback((err) => {
        if (err) {
          reject(err);
          return;
        }
        resolve();
      });
    } else {
      resolve();
    }
  });
  if (!options.skipOpenBrowser) {
    openBrowser__default.default(url.href);
  }
  const waitForExit = async () => {
    for (const signal of ["SIGINT", "SIGTERM"]) {
      process.on(signal, () => {
        webpackServer?.stop();
        viteServer?.close();
        process.exit();
      });
    }
    return new Promise(() => {
    });
  };
  return waitForExit;
}
function checkReactVersion() {
  try {
    const reactPkgPath = require.resolve("react/package.json", {
      paths: [index.paths.targetRoot]
    });
    const reactPkg = require(reactPkgPath);
    if (reactPkg.version.startsWith("16.")) {
      console.log(
        chalk__default.default.yellow(
          `
\u26A0\uFE0F                                                                           \u26A0\uFE0F
\u26A0\uFE0F You are using React version 16, which is deprecated for use in Backstage. \u26A0\uFE0F
\u26A0\uFE0F Please upgrade to React 17 by updating your packages/app dependencies.    \u26A0\uFE0F
\u26A0\uFE0F                                                                           \u26A0\uFE0F
`
        )
      );
    }
  } catch {
  }
}

const requestType = "@backstage/cli/channel/request";
const responseType = "@backstage/cli/channel/response";
class IpcServer {
  #generation = 1;
  #methods = /* @__PURE__ */ new Map();
  addChild(child) {
    const generation = this.#generation++;
    const sendMessage = child.send?.bind(child);
    if (!sendMessage) {
      return;
    }
    const messageListener = (request) => {
      if (request.type !== requestType) {
        return;
      }
      const handler = this.#methods.get(request.method);
      if (!handler) {
        sendMessage({
          type: responseType,
          id: request.id,
          error: {
            name: "NotFoundError",
            message: `No handler registered for method ${request.method}`
          }
        });
        return;
      }
      Promise.resolve().then(() => handler(request.body, { generation })).then(
        (response) => sendMessage({
          type: responseType,
          id: request.id,
          body: response
        })
      ).catch(
        (error) => sendMessage({
          type: responseType,
          id: request.id,
          error: errors.serializeError(error)
        })
      );
    };
    child.addListener("message", messageListener);
    child.addListener("exit", () => {
      child.removeListener("message", messageListener);
    });
  }
  registerMethod(method, handler) {
    if (this.#methods.has(method)) {
      throw new Error(`A handler is already registered for method ${method}`);
    }
    this.#methods.set(method, handler);
  }
}

class ServerDataStore {
  static bind(server) {
    const store = /* @__PURE__ */ new Map();
    server.registerMethod(
      "DevDataStore.save",
      async (request, { generation }) => {
        const { key, data } = request;
        if (!key) {
          throw new Error("Key is required in DevDataStore.save");
        }
        const item = store.get(key);
        if (!item) {
          store.set(key, { generation, data });
          return { saved: true };
        }
        if (item.generation > generation) {
          return { saved: false };
        }
        store.set(key, { generation, data });
        return { saved: true };
      }
    );
    server.registerMethod(
      "DevDataStore.load",
      async (request) => {
        const item = store.get(request.key);
        return { loaded: Boolean(item), data: item?.data };
      }
    );
  }
}

const loaderArgs = [
  "--enable-source-maps",
  "--require",
  require.resolve("@backstage/cli/config/nodeTransform.cjs")
  // TODO: Support modules, although there's currently no way to load them since import() is transpiled tp require()
];
async function startBackendExperimental(options) {
  const envEnv = process.env;
  if (!envEnv.NODE_ENV) {
    envEnv.NODE_ENV = "development";
  }
  const server = new IpcServer();
  ServerDataStore.bind(server);
  let exiting = false;
  let firstStart = true;
  let child;
  let watcher = void 0;
  let shutdownPromise = void 0;
  const watchedPaths = /* @__PURE__ */ new Set();
  const restart = debounce__default.default(async () => {
    if (firstStart) {
      firstStart = false;
    } else {
      console.log();
      console.log("Change detected, restarting the development server...");
      console.log();
    }
    if (shutdownPromise) {
      return;
    }
    if (child && !child.killed && child.exitCode === null) {
      shutdownPromise = new Promise((resolve) => child.once("exit", resolve));
      if (process.platform === "win32" && child.pid) {
        ctrlcWindows.ctrlc(child.pid);
      } else {
        child.kill();
      }
      await shutdownPromise;
      shutdownPromise = void 0;
    }
    if (exiting) {
      return;
    }
    const optionArgs = new Array();
    if (options.inspectEnabled) {
      const inspect = typeof options.inspectEnabled === "string" ? `--inspect=${options.inspectEnabled}` : "--inspect";
      optionArgs.push(inspect);
    } else if (options.inspectBrkEnabled) {
      const inspect = typeof options.inspectBrkEnabled === "string" ? `--inspect-brk=${options.inspectBrkEnabled}` : "--inspect-brk";
      optionArgs.push(inspect);
    }
    if (options.require) {
      optionArgs.push(`--require=${options.require}`);
    }
    const userArgs = process.argv.slice(["node", "backstage-cli", "package", "start"].length).filter((arg) => !optionArgs.includes(arg));
    child = spawn__default.default(
      process.execPath,
      [...loaderArgs, ...optionArgs, options.entry, ...userArgs],
      {
        stdio: ["ignore", "inherit", "inherit", "ipc"],
        env: {
          ...process.env,
          BACKSTAGE_CLI_CHANNEL: "1",
          ESBK_TSCONFIG_PATH: index.paths.resolveTargetRoot("tsconfig.json")
        },
        serialization: "advanced"
      }
    );
    server.addChild(child);
    child.on("message", (data) => {
      if (!watcher) {
        return;
      }
      if (typeof data === "object" && data?.type === "watch") {
        let path$1 = data.path;
        if (path$1.startsWith("file:")) {
          path$1 = url.fileURLToPath(path$1);
        }
        if (path.isAbsolute(path$1) && !watchedPaths.has(path$1)) {
          watchedPaths.add(path$1);
          watcher.add(path$1);
        }
      }
    });
  }, 100);
  restart();
  watcher = chokidar.watch(["./package.json"], {
    cwd: process.cwd(),
    ignoreInitial: true,
    ignorePermissionErrors: true
  }).on("all", restart);
  process.stdin.on("data", restart);
  const exitPromise = new Promise((resolveExitPromise) => {
    async function handleSignal(signal) {
      exiting = true;
      if (child && child.exitCode === null) {
        await new Promise((resolve) => {
          child.on("close", resolve);
          child.kill(signal);
        });
      }
      resolveExitPromise();
    }
    process.once("SIGINT", handleSignal);
    process.once("SIGTERM", handleSignal);
  });
  return () => exitPromise;
}

async function startBackend(options) {
  if (!process.env.LEGACY_BACKEND_START) {
    const waitForExit = await startBackendExperimental({
      entry: "src/index",
      checksEnabled: false,
      // not supported
      inspectEnabled: options.inspectEnabled,
      inspectBrkEnabled: options.inspectBrkEnabled,
      require: options.require
    });
    await waitForExit();
  } else {
    const waitForExit = await cleanDistAndServeBackend({
      entry: "src/index",
      checksEnabled: options.checksEnabled,
      inspectEnabled: options.inspectEnabled,
      inspectBrkEnabled: options.inspectBrkEnabled,
      require: options.require
    });
    await waitForExit();
  }
}
async function startBackendPlugin(options) {
  if (!process.env.LEGACY_BACKEND_START) {
    const hasDevIndexEntry = await fs__default.default.pathExists(
      index.paths.resolveTarget("dev", "index.ts")
    );
    const hasSrcIndexEntry = await fs__default.default.pathExists(
      index.paths.resolveTarget("src", "run.ts")
    );
    if (!hasDevIndexEntry && !hasSrcIndexEntry) {
      console.warn(
        hasSrcIndexEntry ? `The 'dev' directory is missing. The plugin might not be updated for the new backend system. To run, use "LEGACY_BACKEND_START=1 yarn start".` : `The 'dev' directory is missing. Please create a proper dev/index.ts in order to start the plugin.`
      );
      return;
    }
    const waitForExit = await startBackendExperimental({
      entry: "dev/index",
      checksEnabled: false,
      // not supported
      inspectEnabled: options.inspectEnabled,
      inspectBrkEnabled: options.inspectBrkEnabled,
      require: options.require
    });
    await waitForExit();
  } else {
    const hasEntry = await fs__default.default.pathExists(index.paths.resolveTarget("src", "run.ts"));
    if (!hasEntry) {
      console.warn(
        `src/run.ts is missing. Please create the file or run the command without LEGACY_BACKEND_START`
      );
      return;
    }
    const waitForExit = await cleanDistAndServeBackend({
      entry: "src/run",
      checksEnabled: options.checksEnabled,
      inspectEnabled: options.inspectEnabled,
      inspectBrkEnabled: options.inspectBrkEnabled,
      require: options.require
    });
    await waitForExit();
  }
}
async function cleanDistAndServeBackend(options) {
  await fs__default.default.remove(index.paths.resolveTarget("dist"));
  return serveBackend(options);
}

async function startFrontend(options) {
  const { name } = await fs.readJson(index.paths.resolveTarget("package.json"));
  const waitForExit = await serveBundle({
    entry: options.entry,
    checksEnabled: options.checksEnabled,
    configPaths: options.configPaths,
    verifyVersions: options.verifyVersions,
    skipOpenBrowser: options.skipOpenBrowser,
    moduleFederation: moduleFederation.getModuleFederationOptions(
      name,
      options.isModuleFederationRemote
    )
  });
  await waitForExit();
}

async function command(opts) {
  const role$1 = await role.findRoleFromCommand(opts);
  const options = {
    configPaths: opts.config,
    checksEnabled: Boolean(opts.check),
    inspectEnabled: opts.inspect,
    inspectBrkEnabled: opts.inspectBrk,
    require: opts.require
  };
  switch (role$1) {
    case "backend":
      return startBackend(options);
    case "backend-plugin":
    case "backend-plugin-module":
    case "node-library":
      return startBackendPlugin(options);
    case "frontend":
      return startFrontend({
        ...options,
        entry: "src/index",
        verifyVersions: true
      });
    case "web-library":
    case "frontend-plugin":
    case "frontend-plugin-module":
      return startFrontend({ entry: "dev/index", ...options });
    case "frontend-dynamic-container":
      return startFrontend({
        entry: "src/index",
        ...options,
        skipOpenBrowser: true,
        isModuleFederationRemote: true
      });
    default:
      throw new Error(
        `Start command is not supported for package role '${role$1}'`
      );
  }
}

exports.command = command;
//# sourceMappingURL=index-CXG8-26G.cjs.js.map
