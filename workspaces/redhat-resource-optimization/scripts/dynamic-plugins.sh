#!/usr/bin/env bash

set -eu

script_name="${BASH_SOURCE:-$0}"
script_path=$(realpath "$script_name")
script_dir_path=$(dirname "$script_path")
workspace_dir=$(dirname "$script_dir_path")
dynamic_plugins_root_dir="$workspace_dir/dynamic-plugins-root"

REGISTRY_URL="${REGISTRY_URL:-quay.io}"
ORG_ID="${ORG_ID:-redhat-resource-optimization}"
REPO="${REPO:-dynamic-plugins}"
VERSION="${VERSION:-}"

function _usage {
  cat <<EOF
Usage: 
  $script_name clean
  VERSION=<semver> $script_name [oci|tgz]

Environment variables:
  VERSION         Required. The new plugin version. This values is also used to tag the container image.
  REGISTRY_URL    Optional. Overrides the registry URL. Default: quay.io
  ORG_ID          Optional. Overrides the organization ID. Default: redhat-resource-optimization
  REPO            Optional. Overrides the repository name. Default: dynamic-plugins

Sub-commands:
  clean    Removes directories generated by this script.
  oci      Generates an OCI artifact containing the dynamic plugins. This is the prefered distribution method.
  tgz      Generates a tarball containing the dynamic plugins in $dynamic_plugins_root_dir/artifacts.
EOF
}

_pocker="$(command -v podman || command -v docker)"

function _januscli_dynamic_plugins {
  local args=( )
  if [[ "$_pocker" =~ docker$ ]]; then
    args+=( --container-tool docker )
  fi
  npx @janus-idp/cli@latest package package-dynamic-plugins "${args[@]}" "$@"
}

function clean {
  rm -rf "$dynamic_plugins_root_dir"
  rm -rf "$workspace_dir/dist-types"
  rm -rf "$workspace_dir"/plugins/*/dist-dynamic
  rm -rf "$workspace_dir"/plugins/*/dist
  rm -rf "$workspace_dir"/packages/*/dist
}

function _update_version {
  for dir in $(ls -1d plugins/* | tail -n +2); do
    cd "$(realpath $dir)"
    yarn version $VERSION --immediate
    cd -
  done
}

function _assert_version_is_set {
  if [[ -z "$VERSION" ]]; then
    echo "Error: The VERSION environment variable must be provided" 
    exit 1
  fi

  if [[ ! ($VERSION =~ ^[0-9]\.[0-9]\.[0-9]) ]]; then
    echo "Error: The VERSION environment variable value doesn't match: /^[0-9]\.[0-9]\.[0-9]/" 
    exit 2
  fi
}


function tgz {
  local artifact_name="red-hat-developer-hub-plugin-redhat-resource-optimization"

  oci
  skopeo --override-os linux --override-arch amd64 copy "docker://$REGISTRY_URL/$ORG_ID/$REPO:$VERSION" "dir:$dynamic_plugins_root_dir"
  
  cd "$dynamic_plugins_root_dir"
  local gzip_file="$(jq -r '.layers[] | select(.mediaType | endswith("+gzip")) | .digest | split(":")[1]' manifest.json)"
  for file in $(ls -1 | grep -v "$gzip_file"); do 
    rm -rf "$file"
  done
  tar -vxf "$gzip_file"
  rm index.json "$gzip_file"

  mv $artifact_name package
  tar -vczf $artifact_name.tgz package
  rm -rf package 
  mv $artifact_name-backend package
  tar -vczf $artifact_name-backend.tgz package
  rm -rf package 

  local fe_checksum="sha512-$(openssl dgst -sha512 -binary < $dynamic_plugins_root_dir/$artifact_name.tgz | base64)"
  local be_checksum="sha512-$(openssl dgst -sha512 -binary < $dynamic_plugins_root_dir/$artifact_name-backend.tgz | base64)"
  cat <<EOF > checksums.txt
$artifact_name.tgz $fe_checksum
$artifact_name-backend.tgz $be_checksum
EOF

  cd "$workspace_dir"
}

function oci {
  _assert_version_is_set
  _update_version
  yarn tsc
  yarn build:all
  _januscli_dynamic_plugins --tag $REGISTRY_URL/$ORG_ID/$REPO:$VERSION
  git restore plugins/*/package.json
}

if [[ $# -eq 0 || $1 =~ -h|--help ]]; then
  _usage
else
  command="$1"
  if [[ ! "$command" =~ ^_ ]]; then
    "$command"
  else
    _usage
  fi
fi
