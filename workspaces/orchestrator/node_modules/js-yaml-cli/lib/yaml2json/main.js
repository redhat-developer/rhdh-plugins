(function() {
  var console, doTheWork, exitCodes, fs, path, processYamlFile, processYamlString, readdirp, util, yaml, _, _s;

  fs = require('fs');

  util = require('util');

  path = require('path');

  readdirp = require('readdirp');

  yaml = require('js-yaml');

  _ = require('lodash');

  _s = require('underscore.string');

  exitCodes = require('../exit-codes');

  console = (require('../utils/console'))('yaml2json');

  processYamlFile = function(srcFile, destFile, options, cb) {
    return fs.readFile(srcFile, {
      encoding: 'utf8'
    }, function(error, input) {
      var fileName;
      if (error) {
        console.error(options.trace && error.stack || error.message || String(error));
        if (cb) {
          cb(exitCodes.FILE_ACCESS_ERROR);
        }
        return;
      }
      fileName = path.basename(srcFile);
      return processYamlString(input, fileName, options, function(rc, jsonString) {
        if (rc === exitCodes.OK) {
          fs.writeFileSync(destFile, jsonString);
        }
        return cb(rc);
      });
    });
  };

  processYamlString = function(yamlString, fn, options, cb) {
    var error, jsObjects, resultString, yamlParserOptions;
    jsObjects = [];
    yamlParserOptions = {
      strict: true
    };
    if (fn) {
      yamlParserOptions.filename = fn;
    }
    try {
      yaml.loadAll(yamlString, (function(jsObject) {
        return jsObjects.push(jsObject);
      }), yamlParserOptions);
      if (0 === jsObjects.length) {
        jsObjects = null;
      } else if (1 === jsObjects.length) {
        jsObjects = jsObjects[0];
      }
    } catch (_error) {
      error = _error;
      if (options.trace && error.stack) {
        console.error(error.stack);
      } else {
        console.error(error.toString(options.compact));
      }
      cb(exitCodes.YAML_PARSING_ERROR);
      return;
    }
    resultString = JSON.stringify(jsObjects, null, '  ');
    return cb(exitCodes.OK, resultString);
  };

  doTheWork = function(modArgs, cb) {
    var callCb, destFile, error, fileStream, fstat, srcDir, srcFile, yamlInputString;
    srcFile = modArgs.sourceFile;
    callCb = function(rc) {
      if (cb) {
        return _.defer(cb, rc);
      }
    };
    if (_s.trim(srcFile) === '-') {
      process.stdin.resume();
      process.stdin.setEncoding('utf8');
      yamlInputString = '';
      process.stdin.on('data', function(chunk) {
        return yamlInputString += chunk;
      });
      return process.stdin.on('end', function() {
        return processYamlString(yamlInputString, null, modArgs, function(rc, jsonString) {
          if (rc === exitCodes.OK) {
            process.stdout.write(jsonString);
          }
          return cb(rc);
        });
      });
    } else {
      try {
        fstat = fs.statSync(srcFile);
      } catch (_error) {
        error = _error;
        if ('ENOENT' === error.code) {
          console.error("File not found: '" + srcFile + "'");
          callCb(exitCodes.FILE_NOT_FOUND);
          return;
        }
        console.error(modArgs.trace && error.stack || error.message || String(error));
        callCb(exitCodes.FILE_ACCESS_ERROR);
        return;
      }
      if (fstat.isFile()) {
        destFile = path.join(path.dirname(srcFile), path.basename(srcFile, path.extname(srcFile)) + '.json');
        return processYamlFile(srcFile, destFile, modArgs, callCb);
      } else if (fstat.isDirectory()) {
        srcDir = srcFile;
        fileStream = readdirp({
          root: srcDir,
          fileFilter: ['*.yaml', '*.yml']
        });
        fileStream.on('data', function(entry) {
          srcFile = path.join(srcDir, entry.path);
          destFile = path.join(srcDir, entry.parentDir, path.basename(entry.name, path.extname(entry.name)) + '.json');
          return processYamlFile(srcFile, destFile, modArgs, function(exitCode) {});
        });
        return fileStream.on('close', function() {
          return callCb(exitCodes.OK);
        });
      } else {
        console.error(("Invalid file type of YAML source file! Given file '" + srcFile + "'") + " neither denotes a file nor a directory.");
        callCb(exitCodes.FILE_ACCESS_ERROR);
      }
    }
  };

  module.exports = doTheWork;

}).call(this);
