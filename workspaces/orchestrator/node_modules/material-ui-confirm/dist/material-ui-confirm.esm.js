import React, { createContext, useState, useCallback, Fragment, useContext, useEffect, useMemo } from 'react';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import TextField from '@mui/material/TextField';
import Checkbox from '@mui/material/Checkbox';
import FormControlLabel from '@mui/material/FormControlLabel';

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

var ConfirmContext = /*#__PURE__*/createContext({
  confirmBase: function confirmBase() {
    throw new Error("Missing ConfirmProvider");
  },
  closeOnParentUnmount: function closeOnParentUnmount() {}
});

var ConfirmationDialog = function ConfirmationDialog(_ref) {
  var open = _ref.open,
    options = _ref.options,
    onCancel = _ref.onCancel,
    onConfirm = _ref.onConfirm,
    onClose = _ref.onClose;
  var title = options.title,
    description = options.description,
    content = options.content,
    confirmationText = options.confirmationText,
    cancellationText = options.cancellationText,
    dialogProps = options.dialogProps,
    dialogActionsProps = options.dialogActionsProps,
    confirmationButtonProps = options.confirmationButtonProps,
    cancellationButtonProps = options.cancellationButtonProps,
    titleProps = options.titleProps,
    contentProps = options.contentProps,
    allowClose = options.allowClose,
    confirmationKeyword = options.confirmationKeyword,
    confirmationKeywordTextFieldProps = options.confirmationKeywordTextFieldProps,
    hideCancelButton = options.hideCancelButton,
    buttonOrder = options.buttonOrder,
    acknowledgement = options.acknowledgement,
    acknowledgementFormControlLabelProps = options.acknowledgementFormControlLabelProps,
    acknowledgementCheckboxProps = options.acknowledgementCheckboxProps;
  var _React$useState = React.useState(""),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    confirmationKeywordValue = _React$useState2[0],
    setConfirmationKeywordValue = _React$useState2[1];
  var _React$useState3 = React.useState(false),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    isAcknowledged = _React$useState4[0],
    setIsAcknowledged = _React$useState4[1];
  var confirmationButtonDisabled = Boolean(confirmationKeyword && confirmationKeywordValue !== confirmationKeyword || acknowledgement && !isAcknowledged);
  var acknowledgeCheckbox = /*#__PURE__*/React.createElement(React.Fragment, null, acknowledgement && /*#__PURE__*/React.createElement(FormControlLabel, _extends({}, acknowledgementFormControlLabelProps, {
    control: /*#__PURE__*/React.createElement(Checkbox, _extends({}, acknowledgementCheckboxProps, {
      value: isAcknowledged,
      onChange: function onChange(_, value) {
        return setIsAcknowledged(value);
      }
    })),
    label: acknowledgement
  })));
  var confirmationContent = /*#__PURE__*/React.createElement(React.Fragment, null, confirmationKeyword && /*#__PURE__*/React.createElement(TextField, _extends({
    onChange: function onChange(e) {
      return setConfirmationKeywordValue(e.target.value);
    },
    value: confirmationKeywordValue,
    fullWidth: true
  }, confirmationKeywordTextFieldProps)));
  var dialogActions = buttonOrder.map(function (buttonType) {
    if (buttonType === "cancel") {
      return !hideCancelButton && /*#__PURE__*/React.createElement(Button, _extends({
        key: "cancel"
      }, cancellationButtonProps, {
        onClick: onCancel
      }), cancellationText);
    }
    if (buttonType === "confirm") {
      return /*#__PURE__*/React.createElement(Button, _extends({
        key: "confirm",
        color: "primary",
        disabled: confirmationButtonDisabled
      }, confirmationButtonProps, {
        onClick: onConfirm
      }), confirmationText);
    }
    throw new Error("Supported button types are only \"confirm\" and \"cancel\", got: ".concat(buttonType));
  });
  return /*#__PURE__*/React.createElement(Dialog, _extends({
    fullWidth: true
  }, dialogProps, {
    open: open,
    onClose: allowClose ? onClose : null
  }), title && /*#__PURE__*/React.createElement(DialogTitle, titleProps, title), content ? /*#__PURE__*/React.createElement(DialogContent, contentProps, content, confirmationContent, acknowledgeCheckbox) : description ? /*#__PURE__*/React.createElement(DialogContent, contentProps, /*#__PURE__*/React.createElement(DialogContentText, null, description), confirmationContent, acknowledgeCheckbox) : (confirmationKeyword || acknowledgeCheckbox) && /*#__PURE__*/React.createElement(DialogContent, contentProps, confirmationContent, acknowledgeCheckbox), /*#__PURE__*/React.createElement(DialogActions, dialogActionsProps, dialogActions));
};

var DEFAULT_OPTIONS = {
  title: "Are you sure?",
  description: "",
  content: null,
  confirmationText: "Ok",
  cancellationText: "Cancel",
  dialogProps: {},
  dialogActionsProps: {},
  confirmationButtonProps: {},
  cancellationButtonProps: {},
  titleProps: {},
  contentProps: {},
  allowClose: true,
  confirmationKeywordTextFieldProps: {},
  hideCancelButton: false,
  buttonOrder: ["cancel", "confirm"],
  acknowledgement: false,
  acknowledgementFormControlLabelProps: {},
  acknowledgementCheckboxProps: {}
};
var buildOptions = function buildOptions(defaultOptions, options) {
  var dialogProps = _objectSpread2(_objectSpread2({}, defaultOptions.dialogProps || DEFAULT_OPTIONS.dialogProps), options.dialogProps || {});
  var dialogActionsProps = _objectSpread2(_objectSpread2({}, defaultOptions.dialogActionsProps || DEFAULT_OPTIONS.dialogActionsProps), options.dialogActionsProps || {});
  var confirmationButtonProps = _objectSpread2(_objectSpread2({}, defaultOptions.confirmationButtonProps || DEFAULT_OPTIONS.confirmationButtonProps), options.confirmationButtonProps || {});
  var cancellationButtonProps = _objectSpread2(_objectSpread2({}, defaultOptions.cancellationButtonProps || DEFAULT_OPTIONS.cancellationButtonProps), options.cancellationButtonProps || {});
  var titleProps = _objectSpread2(_objectSpread2({}, defaultOptions.titleProps || DEFAULT_OPTIONS.titleProps), options.titleProps || {});
  var contentProps = _objectSpread2(_objectSpread2({}, defaultOptions.contentProps || DEFAULT_OPTIONS.contentProps), options.contentProps || {});
  var confirmationKeywordTextFieldProps = _objectSpread2(_objectSpread2({}, defaultOptions.confirmationKeywordTextFieldProps || DEFAULT_OPTIONS.confirmationKeywordTextFieldProps), options.confirmationKeywordTextFieldProps || {});
  var acknowledgementFormControlLabelProps = _objectSpread2(_objectSpread2({}, defaultOptions.acknowledgementFormControlLabelProps || DEFAULT_OPTIONS.acknowledgementFormControlLabelProps), options.acknowledgementFormControlLabelProps || {});
  var acknowledgementCheckboxProps = _objectSpread2(_objectSpread2({}, defaultOptions.acknowledgementCheckboxProps || DEFAULT_OPTIONS.acknowledgementCheckboxProps), options.acknowledgementCheckboxProps || {});
  return _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, DEFAULT_OPTIONS), defaultOptions), options), {}, {
    dialogProps: dialogProps,
    dialogActionsProps: dialogActionsProps,
    confirmationButtonProps: confirmationButtonProps,
    cancellationButtonProps: cancellationButtonProps,
    titleProps: titleProps,
    contentProps: contentProps,
    confirmationKeywordTextFieldProps: confirmationKeywordTextFieldProps,
    acknowledgementFormControlLabelProps: acknowledgementFormControlLabelProps,
    acknowledgementCheckboxProps: acknowledgementCheckboxProps
  });
};
var confirmGlobal;
var ConfirmProvider = function ConfirmProvider(_ref) {
  var children = _ref.children,
    _ref$defaultOptions = _ref.defaultOptions,
    defaultOptions = _ref$defaultOptions === void 0 ? {} : _ref$defaultOptions;
  // State that we clear on close (to avoid dangling references to resolve and
  // reject). If this is null, the dialog is closed.
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  // Options for rendering the dialog, which aren't reset on close so that we
  // keep rendering the same modal during close animation
  var _useState3 = useState({}),
    _useState4 = _slicedToArray(_useState3, 2),
    options = _useState4[0],
    setOptions = _useState4[1];
  var _useState5 = useState(0),
    _useState6 = _slicedToArray(_useState5, 2),
    key = _useState6[0],
    setKey = _useState6[1];
  var confirmBase = useCallback(function (parentId) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return new Promise(function (resolve, reject) {
      setKey(function (key) {
        return key + 1;
      });
      setOptions(options);
      setState({
        resolve: resolve,
        reject: reject,
        parentId: parentId
      });
    });
  }, []);
  var closeOnParentUnmount = useCallback(function (parentId) {
    setState(function (state) {
      if (state && state.parentId === parentId) {
        return null;
      } else {
        return state;
      }
    });
  }, []);
  var handleClose = useCallback(function () {
    setState(null);
  }, []);
  var handleCancel = useCallback(function () {
    setState(function (state) {
      state && state.reject();
      return null;
    });
  }, []);
  var handleConfirm = useCallback(function () {
    setState(function (state) {
      state && state.resolve();
      return null;
    });
  }, []);
  confirmGlobal = useCallback(function (options) {
    return confirmBase("global", options);
  });
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(ConfirmContext.Provider, {
    value: {
      confirmBase: confirmBase,
      closeOnParentUnmount: closeOnParentUnmount
    }
  }, children), /*#__PURE__*/React.createElement(ConfirmationDialog, {
    key: key,
    open: state !== null,
    options: buildOptions(defaultOptions, options !== null && options !== void 0 ? options : {}),
    onClose: handleClose,
    onCancel: handleCancel,
    onConfirm: handleConfirm
  }));
};

var idCounter = 0;
var useConfirmId = function useConfirmId() {
  var id = useMemo(function () {
    return idCounter++;
  }, []);
  return "confirm-".concat(id);
};
var useConfirm = function useConfirm() {
  var parentId = useConfirmId();
  var _useContext = useContext(ConfirmContext),
    confirmBase = _useContext.confirmBase,
    closeOnParentUnmount = _useContext.closeOnParentUnmount;
  var confirm = useCallback(function (options) {
    return confirmBase(parentId, options);
  }, [parentId]);

  // When the component calling useConfirm is unmounted, we automatically
  // close the associated confirmation dialog. Note that we use a
  // unique id per each useConfirm usage, so that we don't close the
  // dialog when an unrelated component unmounts
  useEffect(function () {
    return function () {
      closeOnParentUnmount(parentId);
    };
  }, [parentId]);
  return confirm;
};

export { ConfirmProvider, confirmGlobal as confirm, useConfirm };
