// @ts-ignore
import * as z from "zod/v4";
import type * as t from "../config/types";
export declare const getExternalsTypeSchema: () => z.ZodEnum<{
    module: "module";
    import: "import";
    commonjs: "commonjs";
    jsonp: "jsonp";
    var: "var";
    assign: "assign";
    this: "this";
    window: "window";
    self: "self";
    global: "global";
    commonjs2: "commonjs2";
    "commonjs-module": "commonjs-module";
    "commonjs-static": "commonjs-static";
    amd: "amd";
    "amd-require": "amd-require";
    umd: "umd";
    umd2: "umd2";
    system: "system";
    promise: "promise";
    "module-import": "module-import";
    script: "script";
    "node-commonjs": "node-commonjs";
    "commonjs-import": "commonjs-import";
}>;
export declare const getRspackOptionsSchema: () => z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    dependencies: z.ZodOptional<z.ZodArray<z.ZodString>>;
    extends: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodArray<z.ZodString>]>>;
    entry: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>, z.ZodObject<{
        import: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>;
        runtime: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
        publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>]>>;
        baseUri: z.ZodOptional<z.ZodString>;
        chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<{
            import: "import";
            jsonp: "jsonp";
            "import-scripts": "import-scripts";
            require: "require";
            "async-node": "async-node";
        }>, z.ZodString]>]>>;
        asyncChunks: z.ZodOptional<z.ZodBoolean>;
        wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<{
            "async-node": "async-node";
            "fetch-streaming": "fetch-streaming";
            fetch: "fetch";
        }>, z.ZodString]>]>>;
        filename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        library: z.ZodOptional<z.ZodObject<{
            amdContainer: z.ZodOptional<z.ZodString>;
            auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
                amd: z.ZodOptional<z.ZodString>;
                commonjs: z.ZodOptional<z.ZodString>;
                commonjs2: z.ZodOptional<z.ZodString>;
                root: z.ZodOptional<z.ZodString>;
            }, z.core.$strict>]>>;
            export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>;
            name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>, z.ZodObject<{
                amd: z.ZodOptional<z.ZodString>;
                commonjs: z.ZodOptional<z.ZodString>;
                root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>;
            }, z.core.$strict>]>>;
            type: z.ZodUnion<[z.ZodEnum<{
                module: "module";
                commonjs: "commonjs";
                jsonp: "jsonp";
                var: "var";
                assign: "assign";
                "assign-properties": "assign-properties";
                this: "this";
                window: "window";
                self: "self";
                global: "global";
                commonjs2: "commonjs2";
                "commonjs-module": "commonjs-module";
                "commonjs-static": "commonjs-static";
                amd: "amd";
                "amd-require": "amd-require";
                umd: "umd";
                umd2: "umd2";
                system: "system";
            }>, z.ZodString]>;
            umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strict>>;
        dependOn: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>;
        layer: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    }, z.core.$strict>]>>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
    output: z.ZodOptional<z.ZodObject<{
        path: z.ZodOptional<z.ZodString>;
        pathinfo: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodLiteral<"verbose">]>>;
        clean: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodObject<{
            keep: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodCustom<RegExp, RegExp>, z.ZodString]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        }, z.core.$strict>]>>;
        publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>]>>;
        filename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        chunkFilename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        crossOriginLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodEnum<{
            anonymous: "anonymous";
            "use-credentials": "use-credentials";
        }>]>>;
        cssFilename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        cssHeadDataCompression: z.ZodOptional<z.ZodBoolean>;
        cssChunkFilename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        hotUpdateMainFilename: z.ZodOptional<z.ZodString>;
        hotUpdateChunkFilename: z.ZodOptional<z.ZodString>;
        hotUpdateGlobal: z.ZodOptional<z.ZodString>;
        assetModuleFilename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        uniqueName: z.ZodOptional<z.ZodString>;
        chunkLoadingGlobal: z.ZodOptional<z.ZodString>;
        enabledLibraryTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<{
            module: "module";
            commonjs: "commonjs";
            jsonp: "jsonp";
            var: "var";
            assign: "assign";
            "assign-properties": "assign-properties";
            this: "this";
            window: "window";
            self: "self";
            global: "global";
            commonjs2: "commonjs2";
            "commonjs-module": "commonjs-module";
            "commonjs-static": "commonjs-static";
            amd: "amd";
            "amd-require": "amd-require";
            umd: "umd";
            umd2: "umd2";
            system: "system";
        }>, z.ZodString]>>>;
        library: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>;
        }, z.core.$strict>]>, z.ZodObject<{
            amdContainer: z.ZodOptional<z.ZodString>;
            auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
                amd: z.ZodOptional<z.ZodString>;
                commonjs: z.ZodOptional<z.ZodString>;
                commonjs2: z.ZodOptional<z.ZodString>;
                root: z.ZodOptional<z.ZodString>;
            }, z.core.$strict>]>>;
            export: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>;
            name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>, z.ZodObject<{
                amd: z.ZodOptional<z.ZodString>;
                commonjs: z.ZodOptional<z.ZodString>;
                root: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>;
            }, z.core.$strict>]>>;
            type: z.ZodUnion<[z.ZodEnum<{
                module: "module";
                commonjs: "commonjs";
                jsonp: "jsonp";
                var: "var";
                assign: "assign";
                "assign-properties": "assign-properties";
                this: "this";
                window: "window";
                self: "self";
                global: "global";
                commonjs2: "commonjs2";
                "commonjs-module": "commonjs-module";
                "commonjs-static": "commonjs-static";
                amd: "amd";
                "amd-require": "amd-require";
                umd: "umd";
                umd2: "umd2";
                system: "system";
            }>, z.ZodString]>;
            umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strict>]>>>;
        libraryExport: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>;
        libraryTarget: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
            module: "module";
            commonjs: "commonjs";
            jsonp: "jsonp";
            var: "var";
            assign: "assign";
            "assign-properties": "assign-properties";
            this: "this";
            window: "window";
            self: "self";
            global: "global";
            commonjs2: "commonjs2";
            "commonjs-module": "commonjs-module";
            "commonjs-static": "commonjs-static";
            amd: "amd";
            "amd-require": "amd-require";
            umd: "umd";
            umd2: "umd2";
            system: "system";
        }>, z.ZodString]>>;
        umdNamedDefine: z.ZodOptional<z.ZodBoolean>;
        auxiliaryComment: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            amd: z.ZodOptional<z.ZodString>;
            commonjs: z.ZodOptional<z.ZodString>;
            commonjs2: z.ZodOptional<z.ZodString>;
            root: z.ZodOptional<z.ZodString>;
        }, z.core.$strict>]>>;
        module: z.ZodOptional<z.ZodBoolean>;
        strictModuleExceptionHandling: z.ZodOptional<z.ZodBoolean>;
        strictModuleErrorHandling: z.ZodOptional<z.ZodBoolean>;
        globalObject: z.ZodOptional<z.ZodString>;
        importFunctionName: z.ZodOptional<z.ZodString>;
        importMetaName: z.ZodOptional<z.ZodString>;
        iife: z.ZodOptional<z.ZodBoolean>;
        wasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<{
            "async-node": "async-node";
            "fetch-streaming": "fetch-streaming";
            fetch: "fetch";
        }>, z.ZodString]>]>>;
        enabledWasmLoadingTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<{
            "async-node": "async-node";
            "fetch-streaming": "fetch-streaming";
            fetch: "fetch";
        }>, z.ZodString]>>>;
        webassemblyModuleFilename: z.ZodOptional<z.ZodString>;
        chunkFormat: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodString]>>;
        chunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<{
            import: "import";
            jsonp: "jsonp";
            "import-scripts": "import-scripts";
            require: "require";
            "async-node": "async-node";
        }>, z.ZodString]>]>>;
        enabledChunkLoadingTypes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodEnum<{
            import: "import";
            jsonp: "jsonp";
            "import-scripts": "import-scripts";
            require: "require";
            "async-node": "async-node";
        }>, z.ZodString]>>>;
        trustedTypes: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<true>, z.ZodString]>, z.ZodObject<{
            policyName: z.ZodOptional<z.ZodString>;
            onPolicyCreationFailure: z.ZodOptional<z.ZodEnum<{
                continue: "continue";
                stop: "stop";
            }>>;
        }, z.core.$strict>]>>;
        sourceMapFilename: z.ZodOptional<z.ZodString>;
        hashDigest: z.ZodOptional<z.ZodString>;
        hashDigestLength: z.ZodOptional<z.ZodInt>;
        hashFunction: z.ZodOptional<z.ZodEnum<{
            xxhash64: "xxhash64";
            md4: "md4";
            sha256: "sha256";
        }>>;
        hashSalt: z.ZodOptional<z.ZodString>;
        asyncChunks: z.ZodOptional<z.ZodBoolean>;
        workerChunkLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<{
            import: "import";
            jsonp: "jsonp";
            "import-scripts": "import-scripts";
            require: "require";
            "async-node": "async-node";
        }>, z.ZodString]>]>>;
        workerWasmLoading: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodUnion<[z.ZodEnum<{
            "async-node": "async-node";
            "fetch-streaming": "fetch-streaming";
            fetch: "fetch";
        }>, z.ZodString]>]>>;
        workerPublicPath: z.ZodOptional<z.ZodString>;
        scriptType: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
            module: "module";
            "text/javascript": "text/javascript";
        }>, z.ZodLiteral<false>]>>;
        devtoolNamespace: z.ZodOptional<z.ZodString>;
        devtoolModuleFilenameTemplate: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        devtoolFallbackModuleFilenameTemplate: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        chunkLoadTimeout: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
        charset: z.ZodOptional<z.ZodBoolean>;
        environment: z.ZodOptional<z.ZodObject<{
            arrowFunction: z.ZodOptional<z.ZodBoolean>;
            asyncFunction: z.ZodOptional<z.ZodBoolean>;
            bigIntLiteral: z.ZodOptional<z.ZodBoolean>;
            const: z.ZodOptional<z.ZodBoolean>;
            destructuring: z.ZodOptional<z.ZodBoolean>;
            document: z.ZodOptional<z.ZodBoolean>;
            dynamicImport: z.ZodOptional<z.ZodBoolean>;
            dynamicImportInWorker: z.ZodOptional<z.ZodBoolean>;
            forOf: z.ZodOptional<z.ZodBoolean>;
            globalThis: z.ZodOptional<z.ZodBoolean>;
            module: z.ZodOptional<z.ZodBoolean>;
            nodePrefixForCoreModules: z.ZodOptional<z.ZodBoolean>;
            optionalChaining: z.ZodOptional<z.ZodBoolean>;
            templateLiteral: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strict>>;
        compareBeforeEmit: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strict>>;
    target: z.ZodOptional<z.ZodUnion<readonly [z.ZodLiteral<false>, z.ZodUnion<readonly [z.ZodEnum<{
        web: "web";
        webworker: "webworker";
        es3: "es3";
        es5: "es5";
        es2015: "es2015";
        es2016: "es2016";
        es2017: "es2017";
        es2018: "es2018";
        es2019: "es2019";
        es2020: "es2020";
        es2021: "es2021";
        es2022: "es2022";
        es2023: "es2023";
        es2024: "es2024";
        es2025: "es2025";
    }>, z.ZodLiteral<"node">, z.ZodLiteral<"async-node">, z.ZodCustom<`node${number}`, `node${number}`>, z.ZodCustom<`async-node${number}`, `async-node${number}`>, z.ZodCustom<`node${number}.${number}`, `node${number}.${number}`>, z.ZodCustom<`async-node${number}.${number}`, `async-node${number}.${number}`>, z.ZodLiteral<"electron-main">, z.ZodCustom<`electron${number}-main`, `electron${number}-main`>, z.ZodCustom<`electron${number}.${number}-main`, `electron${number}.${number}-main`>, z.ZodLiteral<"electron-renderer">, z.ZodCustom<`electron${number}-renderer`, `electron${number}-renderer`>, z.ZodCustom<`electron${number}.${number}-renderer`, `electron${number}.${number}-renderer`>, z.ZodLiteral<"electron-preload">, z.ZodCustom<`electron${number}-preload`, `electron${number}-preload`>, z.ZodCustom<`electron${number}.${number}-preload`, `electron${number}.${number}-preload`>, z.ZodLiteral<"nwjs">, z.ZodCustom<`nwjs${number}`, `nwjs${number}`>, z.ZodCustom<`nwjs${number}.${number}`, `nwjs${number}.${number}`>, z.ZodLiteral<"node-webkit">, z.ZodCustom<`node-webkit${number}`, `node-webkit${number}`>, z.ZodCustom<`node-webkit${number}.${number}`, `node-webkit${number}.${number}`>, z.ZodLiteral<"browserslist">, z.ZodCustom<`browserslist:${string}`, `browserslist:${string}`>]>, z.ZodArray<z.ZodUnion<readonly [z.ZodEnum<{
        web: "web";
        webworker: "webworker";
        es3: "es3";
        es5: "es5";
        es2015: "es2015";
        es2016: "es2016";
        es2017: "es2017";
        es2018: "es2018";
        es2019: "es2019";
        es2020: "es2020";
        es2021: "es2021";
        es2022: "es2022";
        es2023: "es2023";
        es2024: "es2024";
        es2025: "es2025";
    }>, z.ZodLiteral<"node">, z.ZodLiteral<"async-node">, z.ZodCustom<`node${number}`, `node${number}`>, z.ZodCustom<`async-node${number}`, `async-node${number}`>, z.ZodCustom<`node${number}.${number}`, `node${number}.${number}`>, z.ZodCustom<`async-node${number}.${number}`, `async-node${number}.${number}`>, z.ZodLiteral<"electron-main">, z.ZodCustom<`electron${number}-main`, `electron${number}-main`>, z.ZodCustom<`electron${number}.${number}-main`, `electron${number}.${number}-main`>, z.ZodLiteral<"electron-renderer">, z.ZodCustom<`electron${number}-renderer`, `electron${number}-renderer`>, z.ZodCustom<`electron${number}.${number}-renderer`, `electron${number}.${number}-renderer`>, z.ZodLiteral<"electron-preload">, z.ZodCustom<`electron${number}-preload`, `electron${number}-preload`>, z.ZodCustom<`electron${number}.${number}-preload`, `electron${number}.${number}-preload`>, z.ZodLiteral<"nwjs">, z.ZodCustom<`nwjs${number}`, `nwjs${number}`>, z.ZodCustom<`nwjs${number}.${number}`, `nwjs${number}.${number}`>, z.ZodLiteral<"node-webkit">, z.ZodCustom<`node-webkit${number}`, `node-webkit${number}`>, z.ZodCustom<`node-webkit${number}.${number}`, `node-webkit${number}.${number}`>, z.ZodLiteral<"browserslist">, z.ZodCustom<`browserslist:${string}`, `browserslist:${string}`>]>>]>>;
    mode: z.ZodOptional<z.ZodEnum<{
        none: "none";
        development: "development";
        production: "production";
    }>>;
    experiments: z.ZodOptional<z.ZodObject<{
        cache: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodUnion<[z.ZodObject<{
            type: z.ZodEnum<{
                memory: "memory";
            }>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodEnum<{
                persistent: "persistent";
            }>;
            buildDependencies: z.ZodOptional<z.ZodArray<z.ZodString>>;
            version: z.ZodOptional<z.ZodString>;
            snapshot: z.ZodOptional<z.ZodObject<{
                immutablePaths: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>>>;
                unmanagedPaths: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>>>;
                managedPaths: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>>>;
            }, z.core.$strip>>;
            storage: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<{
                    filesystem: "filesystem";
                }>;
                directory: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>>;
        }, z.core.$strip>]>]>>;
        lazyCompilation: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
            imports: z.ZodOptional<z.ZodBoolean>;
            entries: z.ZodOptional<z.ZodBoolean>;
            test: z.ZodOptional<z.ZodUnion<[z.ZodCustom<RegExp, RegExp>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
            client: z.ZodOptional<z.ZodString>;
            serverUrl: z.ZodOptional<z.ZodString>;
            prefix: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>]>>;
        asyncWebAssembly: z.ZodOptional<z.ZodBoolean>;
        outputModule: z.ZodOptional<z.ZodBoolean>;
        topLevelAwait: z.ZodOptional<z.ZodBoolean>;
        css: z.ZodOptional<z.ZodBoolean>;
        layers: z.ZodOptional<z.ZodBoolean>;
        incremental: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodBoolean, z.ZodLiteral<"safe">]>, z.ZodLiteral<"advance">]>, z.ZodLiteral<"advance-silent">]>, z.ZodObject<{
            silent: z.ZodOptional<z.ZodBoolean>;
            make: z.ZodOptional<z.ZodBoolean>;
            inferAsyncModules: z.ZodOptional<z.ZodBoolean>;
            providedExports: z.ZodOptional<z.ZodBoolean>;
            dependenciesDiagnostics: z.ZodOptional<z.ZodBoolean>;
            sideEffects: z.ZodOptional<z.ZodBoolean>;
            buildChunkGraph: z.ZodOptional<z.ZodBoolean>;
            moduleIds: z.ZodOptional<z.ZodBoolean>;
            chunkIds: z.ZodOptional<z.ZodBoolean>;
            modulesHashes: z.ZodOptional<z.ZodBoolean>;
            modulesCodegen: z.ZodOptional<z.ZodBoolean>;
            modulesRuntimeRequirements: z.ZodOptional<z.ZodBoolean>;
            chunksRuntimeRequirements: z.ZodOptional<z.ZodBoolean>;
            chunksHashes: z.ZodOptional<z.ZodBoolean>;
            chunksRender: z.ZodOptional<z.ZodBoolean>;
            emitAssets: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strict>]>>;
        parallelCodeSplitting: z.ZodOptional<z.ZodBoolean>;
        futureDefaults: z.ZodOptional<z.ZodBoolean>;
        rspackFuture: z.ZodOptional<z.ZodObject<{
            bundlerInfo: z.ZodOptional<z.ZodObject<{
                version: z.ZodOptional<z.ZodString>;
                bundler: z.ZodOptional<z.ZodString>;
                force: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodArray<z.ZodEnum<{
                    version: "version";
                    uniqueId: "uniqueId";
                }>>]>>;
            }, z.core.$strict>>;
        }, z.core.$strict>>;
        buildHttp: z.ZodOptional<z.ZodObject<{
            allowedUris: z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodCustom<RegExp, RegExp>]>>;
            lockfileLocation: z.ZodOptional<z.ZodString>;
            cacheLocation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodLiteral<false>]>>;
            upgrade: z.ZodOptional<z.ZodBoolean>;
            httpClient: z.ZodOptional<z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>>;
        }, z.core.$strip>>;
        parallelLoader: z.ZodOptional<z.ZodBoolean>;
        useInputFileSystem: z.ZodOptional<z.ZodUnion<readonly [z.ZodLiteral<false>, z.ZodArray<z.ZodCustom<RegExp, RegExp>>]>>;
        inlineConst: z.ZodOptional<z.ZodBoolean>;
        inlineEnum: z.ZodOptional<z.ZodBoolean>;
        typeReexportsPresence: z.ZodOptional<z.ZodBoolean>;
        lazyBarrel: z.ZodOptional<z.ZodBoolean>;
        nativeWatcher: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strict>>;
    externals: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>]>>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodBoolean]>, z.ZodArray<z.ZodString>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString>]>>]>>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>]>>;
    externalsType: z.ZodOptional<z.ZodEnum<{
        module: "module";
        import: "import";
        commonjs: "commonjs";
        jsonp: "jsonp";
        var: "var";
        assign: "assign";
        this: "this";
        window: "window";
        self: "self";
        global: "global";
        commonjs2: "commonjs2";
        "commonjs-module": "commonjs-module";
        "commonjs-static": "commonjs-static";
        amd: "amd";
        "amd-require": "amd-require";
        umd: "umd";
        umd2: "umd2";
        system: "system";
        promise: "promise";
        "module-import": "module-import";
        script: "script";
        "node-commonjs": "node-commonjs";
        "commonjs-import": "commonjs-import";
    }>>;
    externalsPresets: z.ZodOptional<z.ZodObject<{
        node: z.ZodOptional<z.ZodBoolean>;
        web: z.ZodOptional<z.ZodBoolean>;
        webAsync: z.ZodOptional<z.ZodBoolean>;
        electron: z.ZodOptional<z.ZodBoolean>;
        electronMain: z.ZodOptional<z.ZodBoolean>;
        electronPreload: z.ZodOptional<z.ZodBoolean>;
        electronRenderer: z.ZodOptional<z.ZodBoolean>;
        nwjs: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strict>>;
    infrastructureLogging: z.ZodOptional<z.ZodObject<{
        appendOnly: z.ZodOptional<z.ZodBoolean>;
        colors: z.ZodOptional<z.ZodBoolean>;
        console: z.ZodOptional<z.ZodCustom<Console, Console>>;
        debug: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodCustom<RegExp, RegExp>, z.ZodString]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>, z.ZodUnion<[z.ZodUnion<[z.ZodCustom<RegExp, RegExp>, z.ZodString]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>]>]>>;
        level: z.ZodOptional<z.ZodEnum<{
            none: "none";
            verbose: "verbose";
            error: "error";
            warn: "warn";
            info: "info";
            log: "log";
        }>>;
        stream: z.ZodOptional<z.ZodCustom<NodeJS.WritableStream, NodeJS.WritableStream>>;
    }, z.core.$strict>>;
    cache: z.ZodOptional<z.ZodBoolean>;
    context: z.ZodOptional<z.ZodString>;
    devtool: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"eval">]>, z.ZodType<t.DevTool, unknown, z.core.$ZodTypeInternals<t.DevTool, unknown>>]>>;
    node: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
        __dirname: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<{
            "warn-mock": "warn-mock";
            mock: "mock";
            "eval-only": "eval-only";
            "node-module": "node-module";
        }>]>>;
        __filename: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<{
            "warn-mock": "warn-mock";
            mock: "mock";
            "eval-only": "eval-only";
            "node-module": "node-module";
        }>]>>;
        global: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodLiteral<"warn">]>>;
    }, z.core.$strict>]>>;
    loader: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    ignoreWarnings: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodCustom<RegExp, RegExp>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>, z.ZodObject<{
        file: z.ZodOptional<z.ZodCustom<RegExp, RegExp>>;
        message: z.ZodOptional<z.ZodCustom<RegExp, RegExp>>;
        module: z.ZodOptional<z.ZodCustom<RegExp, RegExp>>;
    }, z.core.$strip>]>>>;
    watchOptions: z.ZodOptional<z.ZodObject<{
        aggregateTimeout: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
        followSymlinks: z.ZodOptional<z.ZodBoolean>;
        ignored: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodArray<z.ZodString>, z.ZodCustom<RegExp, RegExp>]>, z.ZodString]>>;
        poll: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodBoolean]>>;
        stdin: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strict>>;
    watch: z.ZodOptional<z.ZodBoolean>;
    stats: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodBoolean, z.ZodEnum<{
        none: "none";
        normal: "normal";
        verbose: "verbose";
        "errors-only": "errors-only";
        "errors-warnings": "errors-warnings";
        minimal: "minimal";
        detailed: "detailed";
        summary: "summary";
    }>]>, z.ZodObject<{
        all: z.ZodOptional<z.ZodBoolean>;
        preset: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodEnum<{
            none: "none";
            normal: "normal";
            verbose: "verbose";
            "errors-only": "errors-only";
            "errors-warnings": "errors-warnings";
            minimal: "minimal";
            detailed: "detailed";
            summary: "summary";
        }>]>>;
        assets: z.ZodOptional<z.ZodBoolean>;
        chunks: z.ZodOptional<z.ZodBoolean>;
        modules: z.ZodOptional<z.ZodBoolean>;
        entrypoints: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodLiteral<"auto">]>>;
        chunkGroups: z.ZodOptional<z.ZodBoolean>;
        warnings: z.ZodOptional<z.ZodBoolean>;
        warningsCount: z.ZodOptional<z.ZodBoolean>;
        errors: z.ZodOptional<z.ZodBoolean>;
        errorsCount: z.ZodOptional<z.ZodBoolean>;
        colors: z.ZodOptional<z.ZodBoolean>;
        hash: z.ZodOptional<z.ZodBoolean>;
        version: z.ZodOptional<z.ZodBoolean>;
        reasons: z.ZodOptional<z.ZodBoolean>;
        publicPath: z.ZodOptional<z.ZodBoolean>;
        outputPath: z.ZodOptional<z.ZodBoolean>;
        chunkModules: z.ZodOptional<z.ZodBoolean>;
        chunkRelations: z.ZodOptional<z.ZodBoolean>;
        ids: z.ZodOptional<z.ZodBoolean>;
        timings: z.ZodOptional<z.ZodBoolean>;
        builtAt: z.ZodOptional<z.ZodBoolean>;
        moduleAssets: z.ZodOptional<z.ZodBoolean>;
        nestedModules: z.ZodOptional<z.ZodBoolean>;
        source: z.ZodOptional<z.ZodBoolean>;
        logging: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
            none: "none";
            verbose: "verbose";
            error: "error";
            warn: "warn";
            info: "info";
            log: "log";
        }>, z.ZodBoolean]>>;
        loggingDebug: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodCustom<RegExp, RegExp>, z.ZodString]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>, z.ZodUnion<[z.ZodUnion<[z.ZodCustom<RegExp, RegExp>, z.ZodString]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>]>]>>;
        loggingTrace: z.ZodOptional<z.ZodBoolean>;
        runtimeModules: z.ZodOptional<z.ZodBoolean>;
        children: z.ZodOptional<z.ZodBoolean>;
        usedExports: z.ZodOptional<z.ZodBoolean>;
        providedExports: z.ZodOptional<z.ZodBoolean>;
        optimizationBailout: z.ZodOptional<z.ZodBoolean>;
        groupModulesByType: z.ZodOptional<z.ZodBoolean>;
        groupModulesByCacheStatus: z.ZodOptional<z.ZodBoolean>;
        groupModulesByLayer: z.ZodOptional<z.ZodBoolean>;
        groupModulesByAttributes: z.ZodOptional<z.ZodBoolean>;
        groupModulesByPath: z.ZodOptional<z.ZodBoolean>;
        groupModulesByExtension: z.ZodOptional<z.ZodBoolean>;
        modulesSpace: z.ZodOptional<z.ZodUnion<[z.ZodInt, z.ZodLiteral<number>]>>;
        chunkModulesSpace: z.ZodOptional<z.ZodUnion<[z.ZodInt, z.ZodLiteral<number>]>>;
        nestedModulesSpace: z.ZodOptional<z.ZodUnion<[z.ZodInt, z.ZodLiteral<number>]>>;
        relatedAssets: z.ZodOptional<z.ZodBoolean>;
        groupAssetsByEmitStatus: z.ZodOptional<z.ZodBoolean>;
        groupAssetsByInfo: z.ZodOptional<z.ZodBoolean>;
        groupAssetsByPath: z.ZodOptional<z.ZodBoolean>;
        groupAssetsByExtension: z.ZodOptional<z.ZodBoolean>;
        groupAssetsByChunk: z.ZodOptional<z.ZodBoolean>;
        assetsSpace: z.ZodOptional<z.ZodUnion<[z.ZodInt, z.ZodLiteral<number>]>>;
        orphanModules: z.ZodOptional<z.ZodBoolean>;
        excludeModules: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>, z.ZodString]>, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>, z.ZodBoolean]>>;
        excludeAssets: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>, z.ZodString]>, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        modulesSort: z.ZodOptional<z.ZodString>;
        chunkModulesSort: z.ZodOptional<z.ZodString>;
        nestedModulesSort: z.ZodOptional<z.ZodString>;
        chunksSort: z.ZodOptional<z.ZodString>;
        assetsSort: z.ZodOptional<z.ZodString>;
        performance: z.ZodOptional<z.ZodBoolean>;
        env: z.ZodOptional<z.ZodBoolean>;
        chunkGroupAuxiliary: z.ZodOptional<z.ZodBoolean>;
        chunkGroupChildren: z.ZodOptional<z.ZodBoolean>;
        chunkGroupMaxAssets: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
        dependentModules: z.ZodOptional<z.ZodBoolean>;
        chunkOrigins: z.ZodOptional<z.ZodBoolean>;
        runtime: z.ZodOptional<z.ZodBoolean>;
        depth: z.ZodOptional<z.ZodBoolean>;
        reasonsSpace: z.ZodOptional<z.ZodUnion<[z.ZodInt, z.ZodLiteral<number>]>>;
        groupReasonsByOrigin: z.ZodOptional<z.ZodBoolean>;
        errorDetails: z.ZodOptional<z.ZodBoolean>;
        errorStack: z.ZodOptional<z.ZodBoolean>;
        moduleTrace: z.ZodOptional<z.ZodBoolean>;
        cachedModules: z.ZodOptional<z.ZodBoolean>;
        cachedAssets: z.ZodOptional<z.ZodBoolean>;
        cached: z.ZodOptional<z.ZodBoolean>;
        errorsSpace: z.ZodOptional<z.ZodUnion<[z.ZodInt, z.ZodLiteral<number>]>>;
        warningsSpace: z.ZodOptional<z.ZodUnion<[z.ZodInt, z.ZodLiteral<number>]>>;
    }, z.core.$strict>]>>;
    snapshot: z.ZodOptional<z.ZodObject<{}, z.core.$strict>>;
    optimization: z.ZodOptional<z.ZodObject<{
        moduleIds: z.ZodOptional<z.ZodEnum<{
            named: "named";
            natural: "natural";
            deterministic: "deterministic";
        }>>;
        chunkIds: z.ZodOptional<z.ZodEnum<{
            named: "named";
            natural: "natural";
            deterministic: "deterministic";
            size: "size";
            "total-size": "total-size";
        }>>;
        minimize: z.ZodOptional<z.ZodBoolean>;
        minimizer: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"...">, z.ZodUnion<readonly [z.ZodCustom<t.RspackPluginInstance | t.WebpackPluginInstance | t.RspackPluginFunction | t.WebpackPluginFunction, t.RspackPluginInstance | t.WebpackPluginInstance | t.RspackPluginFunction | t.WebpackPluginFunction>, z.ZodUnion<readonly [z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>]>>>;
        mergeDuplicateChunks: z.ZodOptional<z.ZodBoolean>;
        splitChunks: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
            chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<{
                all: "all";
                initial: "initial";
                async: "async";
            }>, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
            defaultSizeTypes: z.ZodOptional<z.ZodArray<z.ZodString>>;
            minChunks: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
            usedExports: z.ZodOptional<z.ZodBoolean>;
            name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
            filename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
            minSize: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
            minSizeReduction: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
            maxSize: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
            maxAsyncSize: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
            maxInitialSize: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
            maxAsyncRequests: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
            maxInitialRequests: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
            automaticNameDelimiter: z.ZodOptional<z.ZodString>;
            cacheGroups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodLiteral<false>, z.ZodObject<{
                chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<{
                    all: "all";
                    initial: "initial";
                    async: "async";
                }>, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
                defaultSizeTypes: z.ZodOptional<z.ZodArray<z.ZodString>>;
                minChunks: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                usedExports: z.ZodOptional<z.ZodBoolean>;
                name: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodLiteral<false>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
                filename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
                minSize: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
                minSizeReduction: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
                maxSize: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
                maxAsyncSize: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
                maxInitialSize: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>]>>;
                maxAsyncRequests: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                maxInitialRequests: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                automaticNameDelimiter: z.ZodOptional<z.ZodString>;
                test: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
                priority: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                enforce: z.ZodOptional<z.ZodBoolean>;
                reuseExistingChunk: z.ZodOptional<z.ZodBoolean>;
                type: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>>;
                idHint: z.ZodOptional<z.ZodString>;
                layer: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
            }, z.core.$strict>]>>>;
            fallbackCacheGroup: z.ZodOptional<z.ZodObject<{
                chunks: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<{
                    all: "all";
                    initial: "initial";
                    async: "async";
                }>, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
                minSize: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                maxSize: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                maxAsyncSize: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                maxInitialSize: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                automaticNameDelimiter: z.ZodOptional<z.ZodString>;
            }, z.core.$strict>>;
            hidePathInfo: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strict>]>>;
        runtimeChunk: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodEnum<{
            single: "single";
            multiple: "multiple";
        }>, z.ZodBoolean]>, z.ZodObject<{
            name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        }, z.core.$strict>]>>;
        removeAvailableModules: z.ZodOptional<z.ZodBoolean>;
        removeEmptyChunks: z.ZodOptional<z.ZodBoolean>;
        realContentHash: z.ZodOptional<z.ZodBoolean>;
        sideEffects: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
            flag: "flag";
        }>, z.ZodBoolean]>>;
        providedExports: z.ZodOptional<z.ZodBoolean>;
        concatenateModules: z.ZodOptional<z.ZodBoolean>;
        innerGraph: z.ZodOptional<z.ZodBoolean>;
        usedExports: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
            global: "global";
        }>, z.ZodBoolean]>>;
        mangleExports: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
            deterministic: "deterministic";
            size: "size";
        }>, z.ZodBoolean]>>;
        nodeEnv: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodLiteral<false>]>>;
        emitOnErrors: z.ZodOptional<z.ZodBoolean>;
        avoidEntryIife: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strict>>;
    resolve: z.ZodOptional<z.ZodType<t.ResolveOptions, unknown, z.core.$ZodTypeInternals<t.ResolveOptions, unknown>>>;
    resolveLoader: z.ZodOptional<z.ZodType<t.ResolveOptions, unknown, z.core.$ZodTypeInternals<t.ResolveOptions, unknown>>>;
    plugins: z.ZodOptional<z.ZodArray<z.ZodUnion<readonly [z.ZodCustom<t.RspackPluginInstance | t.WebpackPluginInstance | t.RspackPluginFunction | t.WebpackPluginFunction, t.RspackPluginInstance | t.WebpackPluginInstance | t.RspackPluginFunction | t.WebpackPluginFunction>, z.ZodUnion<readonly [z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>>>;
    devServer: z.ZodOptional<z.ZodCustom<t.DevServer, t.DevServer>>;
    module: z.ZodOptional<z.ZodObject<{
        defaultRules: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"...">, z.ZodType<t.RuleSetRule, unknown, z.core.$ZodTypeInternals<t.RuleSetRule, unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>>>;
        rules: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"...">, z.ZodType<t.RuleSetRule, unknown, z.core.$ZodTypeInternals<t.RuleSetRule, unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<false>, z.ZodLiteral<0>, z.ZodLiteral<"">, z.ZodNull, z.ZodUndefined]>]>>>;
        parser: z.ZodOptional<z.ZodObject<{
            asset: z.ZodOptional<z.ZodObject<{
                dataUrlCondition: z.ZodOptional<z.ZodObject<{
                    maxSize: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
                }, z.core.$strict>>;
            }, z.core.$strict>>;
            css: z.ZodOptional<z.ZodObject<{
                namedExports: z.ZodOptional<z.ZodBoolean>;
                url: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            "css/auto": z.ZodOptional<z.ZodObject<{
                namedExports: z.ZodOptional<z.ZodBoolean>;
                url: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            "css/module": z.ZodOptional<z.ZodObject<{
                namedExports: z.ZodOptional<z.ZodBoolean>;
                url: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            javascript: z.ZodOptional<z.ZodObject<{
                dynamicImportMode: z.ZodOptional<z.ZodEnum<{
                    weak: "weak";
                    eager: "eager";
                    lazy: "lazy";
                    "lazy-once": "lazy-once";
                }>>;
                dynamicImportPreload: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>]>>;
                dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>]>>;
                dynamicImportFetchPriority: z.ZodOptional<z.ZodEnum<{
                    auto: "auto";
                    low: "low";
                    high: "high";
                }>>;
                importMeta: z.ZodOptional<z.ZodBoolean>;
                url: z.ZodOptional<z.ZodUnion<readonly [z.ZodLiteral<"relative">, z.ZodLiteral<"new-url-relative">, z.ZodBoolean]>>;
                exprContextCritical: z.ZodOptional<z.ZodBoolean>;
                wrappedContextCritical: z.ZodOptional<z.ZodBoolean>;
                unknownContextCritical: z.ZodOptional<z.ZodBoolean>;
                wrappedContextRegExp: z.ZodOptional<z.ZodCustom<RegExp, RegExp>>;
                exportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                importExportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                reexportExportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                strictExportPresence: z.ZodOptional<z.ZodBoolean>;
                worker: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString>, z.ZodBoolean]>>;
                overrideStrict: z.ZodOptional<z.ZodEnum<{
                    strict: "strict";
                    "non-strict": "non-strict";
                }>>;
                commonjsMagicComments: z.ZodOptional<z.ZodBoolean>;
                requireAsExpression: z.ZodOptional<z.ZodBoolean>;
                requireDynamic: z.ZodOptional<z.ZodBoolean>;
                requireResolve: z.ZodOptional<z.ZodBoolean>;
                commonjs: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
                    exports: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodLiteral<"skipInEsm">]>>;
                }, z.core.$strict>]>>;
                importDynamic: z.ZodOptional<z.ZodBoolean>;
                inlineConst: z.ZodOptional<z.ZodBoolean>;
                typeReexportsPresence: z.ZodOptional<z.ZodEnum<{
                    "no-tolerant": "no-tolerant";
                    tolerant: "tolerant";
                    "tolerant-no-check": "tolerant-no-check";
                }>>;
                jsx: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            "javascript/auto": z.ZodOptional<z.ZodObject<{
                dynamicImportMode: z.ZodOptional<z.ZodEnum<{
                    weak: "weak";
                    eager: "eager";
                    lazy: "lazy";
                    "lazy-once": "lazy-once";
                }>>;
                dynamicImportPreload: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>]>>;
                dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>]>>;
                dynamicImportFetchPriority: z.ZodOptional<z.ZodEnum<{
                    auto: "auto";
                    low: "low";
                    high: "high";
                }>>;
                importMeta: z.ZodOptional<z.ZodBoolean>;
                url: z.ZodOptional<z.ZodUnion<readonly [z.ZodLiteral<"relative">, z.ZodLiteral<"new-url-relative">, z.ZodBoolean]>>;
                exprContextCritical: z.ZodOptional<z.ZodBoolean>;
                wrappedContextCritical: z.ZodOptional<z.ZodBoolean>;
                unknownContextCritical: z.ZodOptional<z.ZodBoolean>;
                wrappedContextRegExp: z.ZodOptional<z.ZodCustom<RegExp, RegExp>>;
                exportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                importExportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                reexportExportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                strictExportPresence: z.ZodOptional<z.ZodBoolean>;
                worker: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString>, z.ZodBoolean]>>;
                overrideStrict: z.ZodOptional<z.ZodEnum<{
                    strict: "strict";
                    "non-strict": "non-strict";
                }>>;
                commonjsMagicComments: z.ZodOptional<z.ZodBoolean>;
                requireAsExpression: z.ZodOptional<z.ZodBoolean>;
                requireDynamic: z.ZodOptional<z.ZodBoolean>;
                requireResolve: z.ZodOptional<z.ZodBoolean>;
                commonjs: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
                    exports: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodLiteral<"skipInEsm">]>>;
                }, z.core.$strict>]>>;
                importDynamic: z.ZodOptional<z.ZodBoolean>;
                inlineConst: z.ZodOptional<z.ZodBoolean>;
                typeReexportsPresence: z.ZodOptional<z.ZodEnum<{
                    "no-tolerant": "no-tolerant";
                    tolerant: "tolerant";
                    "tolerant-no-check": "tolerant-no-check";
                }>>;
                jsx: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            "javascript/dynamic": z.ZodOptional<z.ZodObject<{
                dynamicImportMode: z.ZodOptional<z.ZodEnum<{
                    weak: "weak";
                    eager: "eager";
                    lazy: "lazy";
                    "lazy-once": "lazy-once";
                }>>;
                dynamicImportPreload: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>]>>;
                dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>]>>;
                dynamicImportFetchPriority: z.ZodOptional<z.ZodEnum<{
                    auto: "auto";
                    low: "low";
                    high: "high";
                }>>;
                importMeta: z.ZodOptional<z.ZodBoolean>;
                url: z.ZodOptional<z.ZodUnion<readonly [z.ZodLiteral<"relative">, z.ZodLiteral<"new-url-relative">, z.ZodBoolean]>>;
                exprContextCritical: z.ZodOptional<z.ZodBoolean>;
                wrappedContextCritical: z.ZodOptional<z.ZodBoolean>;
                unknownContextCritical: z.ZodOptional<z.ZodBoolean>;
                wrappedContextRegExp: z.ZodOptional<z.ZodCustom<RegExp, RegExp>>;
                exportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                importExportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                reexportExportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                strictExportPresence: z.ZodOptional<z.ZodBoolean>;
                worker: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString>, z.ZodBoolean]>>;
                overrideStrict: z.ZodOptional<z.ZodEnum<{
                    strict: "strict";
                    "non-strict": "non-strict";
                }>>;
                commonjsMagicComments: z.ZodOptional<z.ZodBoolean>;
                requireAsExpression: z.ZodOptional<z.ZodBoolean>;
                requireDynamic: z.ZodOptional<z.ZodBoolean>;
                requireResolve: z.ZodOptional<z.ZodBoolean>;
                commonjs: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
                    exports: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodLiteral<"skipInEsm">]>>;
                }, z.core.$strict>]>>;
                importDynamic: z.ZodOptional<z.ZodBoolean>;
                inlineConst: z.ZodOptional<z.ZodBoolean>;
                typeReexportsPresence: z.ZodOptional<z.ZodEnum<{
                    "no-tolerant": "no-tolerant";
                    tolerant: "tolerant";
                    "tolerant-no-check": "tolerant-no-check";
                }>>;
                jsx: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            "javascript/esm": z.ZodOptional<z.ZodObject<{
                dynamicImportMode: z.ZodOptional<z.ZodEnum<{
                    weak: "weak";
                    eager: "eager";
                    lazy: "lazy";
                    "lazy-once": "lazy-once";
                }>>;
                dynamicImportPreload: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>]>>;
                dynamicImportPrefetch: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>]>>;
                dynamicImportFetchPriority: z.ZodOptional<z.ZodEnum<{
                    auto: "auto";
                    low: "low";
                    high: "high";
                }>>;
                importMeta: z.ZodOptional<z.ZodBoolean>;
                url: z.ZodOptional<z.ZodUnion<readonly [z.ZodLiteral<"relative">, z.ZodLiteral<"new-url-relative">, z.ZodBoolean]>>;
                exprContextCritical: z.ZodOptional<z.ZodBoolean>;
                wrappedContextCritical: z.ZodOptional<z.ZodBoolean>;
                unknownContextCritical: z.ZodOptional<z.ZodBoolean>;
                wrappedContextRegExp: z.ZodOptional<z.ZodCustom<RegExp, RegExp>>;
                exportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                importExportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                reexportExportsPresence: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
                    auto: "auto";
                    error: "error";
                    warn: "warn";
                }>, z.ZodLiteral<false>]>>;
                strictExportPresence: z.ZodOptional<z.ZodBoolean>;
                worker: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString>, z.ZodBoolean]>>;
                overrideStrict: z.ZodOptional<z.ZodEnum<{
                    strict: "strict";
                    "non-strict": "non-strict";
                }>>;
                commonjsMagicComments: z.ZodOptional<z.ZodBoolean>;
                requireAsExpression: z.ZodOptional<z.ZodBoolean>;
                requireDynamic: z.ZodOptional<z.ZodBoolean>;
                requireResolve: z.ZodOptional<z.ZodBoolean>;
                commonjs: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
                    exports: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodLiteral<"skipInEsm">]>>;
                }, z.core.$strict>]>>;
                importDynamic: z.ZodOptional<z.ZodBoolean>;
                inlineConst: z.ZodOptional<z.ZodBoolean>;
                typeReexportsPresence: z.ZodOptional<z.ZodEnum<{
                    "no-tolerant": "no-tolerant";
                    tolerant: "tolerant";
                    "tolerant-no-check": "tolerant-no-check";
                }>>;
                jsx: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
        }, z.core.$strict>>;
        generator: z.ZodOptional<z.ZodObject<{
            asset: z.ZodOptional<z.ZodObject<{
                dataUrl: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
                    mimetype: z.ZodOptional<z.ZodString>;
                }, z.core.$strict>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
                emit: z.ZodOptional<z.ZodBoolean>;
                filename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
                publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>]>>;
                outputPath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
            }, z.core.$strict>>;
            "asset/inline": z.ZodOptional<z.ZodObject<{
                dataUrl: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    encoding: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<"base64">]>>;
                    mimetype: z.ZodOptional<z.ZodString>;
                }, z.core.$strict>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
            }, z.core.$strict>>;
            "asset/resource": z.ZodOptional<z.ZodObject<{
                emit: z.ZodOptional<z.ZodBoolean>;
                filename: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
                publicPath: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>]>>;
                outputPath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
            }, z.core.$strict>>;
            css: z.ZodOptional<z.ZodObject<{
                exportsOnly: z.ZodOptional<z.ZodBoolean>;
                esModule: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            "css/auto": z.ZodOptional<z.ZodObject<{
                exportsConvention: z.ZodOptional<z.ZodEnum<{
                    "as-is": "as-is";
                    "camel-case": "camel-case";
                    "camel-case-only": "camel-case-only";
                    dashes: "dashes";
                    "dashes-only": "dashes-only";
                }>>;
                exportsOnly: z.ZodOptional<z.ZodBoolean>;
                localIdentName: z.ZodOptional<z.ZodString>;
                esModule: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            "css/module": z.ZodOptional<z.ZodObject<{
                exportsConvention: z.ZodOptional<z.ZodEnum<{
                    "as-is": "as-is";
                    "camel-case": "camel-case";
                    "camel-case-only": "camel-case-only";
                    dashes: "dashes";
                    "dashes-only": "dashes-only";
                }>>;
                exportsOnly: z.ZodOptional<z.ZodBoolean>;
                localIdentName: z.ZodOptional<z.ZodString>;
                esModule: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
            json: z.ZodOptional<z.ZodObject<{
                JSONParse: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strict>>;
        }, z.core.$strict>>;
        noParse: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>, z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodCustom<RegExp, RegExp>]>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>]>>;
    }, z.core.$strict>>;
    profile: z.ZodOptional<z.ZodBoolean>;
    amd: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<false>, z.ZodRecord<z.ZodString, z.ZodAny>]>>;
    bail: z.ZodOptional<z.ZodBoolean>;
    performance: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        assetFilter: z.ZodOptional<z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>>;
        hints: z.ZodOptional<z.ZodUnion<[z.ZodEnum<{
            error: "error";
            warning: "warning";
        }>, z.ZodLiteral<false>]>>;
        maxAssetSize: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
        maxEntrypointSize: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodLiteral<number>]>>;
    }, z.core.$strict>, z.ZodLiteral<false>]>>;
    lazyCompilation: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        imports: z.ZodOptional<z.ZodBoolean>;
        entries: z.ZodOptional<z.ZodBoolean>;
        test: z.ZodOptional<z.ZodUnion<[z.ZodCustom<RegExp, RegExp>, z.ZodCustom<(...args: unknown[]) => any, (...args: unknown[]) => any>]>>;
        client: z.ZodOptional<z.ZodString>;
        serverUrl: z.ZodOptional<z.ZodString>;
        prefix: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>]>>>;
}, z.core.$strict>;
