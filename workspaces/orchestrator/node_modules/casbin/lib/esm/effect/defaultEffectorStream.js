// Copyright 2020 The Casbin Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { Effect } from './effector';
/**
 * DefaultEffectorStream is the default implementation of EffectorStream.
 */
export class DefaultEffectorStream {
    constructor(expr) {
        this.done = false;
        this.res = false;
        this.rec = false;
        this.expr = expr;
    }
    current() {
        return this.res;
    }
    pushEffect(eft) {
        switch (this.expr) {
            case "some(where (p_eft == allow))" /* ALLOW */:
                if (eft === Effect.Allow) {
                    this.res = true;
                    this.done = true;
                    this.rec = true;
                }
                break;
            case "!some(where (p_eft == deny))" /* DENY */:
                this.res = true;
                if (eft === Effect.Deny) {
                    this.res = false;
                    this.done = true;
                    this.rec = true;
                }
                break;
            case "some(where (p_eft == allow)) && !some(where (p_eft == deny))" /* ALLOW_AND_DENY */:
                if (eft === Effect.Allow) {
                    this.res = true;
                    this.rec = true;
                }
                else if (eft === Effect.Deny) {
                    this.res = false;
                    this.done = true;
                    this.rec = true;
                }
                else {
                    this.rec = false;
                }
                break;
            case "priority(p_eft) || deny" /* PRIORITY */:
            case "subjectPriority(p_eft) || deny" /* SUBJECT_PRIORITY */:
                if (eft !== Effect.Indeterminate) {
                    this.res = eft === Effect.Allow;
                    this.done = true;
                    this.rec = true;
                }
                break;
            default:
                throw new Error('unsupported effect');
        }
        return [this.res, this.rec, this.done];
    }
}
