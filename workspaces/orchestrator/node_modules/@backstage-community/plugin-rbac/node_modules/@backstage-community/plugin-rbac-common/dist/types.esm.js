import { NotAllowedError } from '@backstage/errors';

function isResourcedPolicy(policy) {
  return "resourceType" in policy;
}
const PermissionActionValues = [
  "create",
  "read",
  "update",
  "delete",
  "use"
];
const toPermissionAction = (attr) => attr.action ?? "use";
function isValidPermissionAction(action) {
  return PermissionActionValues.includes(action);
}
const ConditionalAliases = {
  CURRENT_USER: "currentUser",
  OWNER_REFS: "ownerRefs"
};
const CONDITION_ALIAS_SIGN = "$";
class UnauthorizedError extends NotAllowedError {
  constructor() {
    super("Unauthorized");
  }
}

export { CONDITION_ALIAS_SIGN, ConditionalAliases, PermissionActionValues, UnauthorizedError, isResourcedPolicy, isValidPermissionAction, toPermissionAction };
//# sourceMappingURL=types.esm.js.map
