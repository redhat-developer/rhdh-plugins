import { createPlugin, createApiFactory, configApiRef, identityApiRef, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import { licensedUsersApiRef, LicensedUsersAPIClient } from './api/LicensedUsersClient.esm.js';
import { rbacApiRef, RBACBackendClient } from './api/RBACBackendClient.esm.js';
import { rootRouteRef, roleRouteRef, createRoleRouteRef } from './routes.esm.js';

const rbacPlugin = createPlugin({
  id: "rbac",
  routes: {
    root: rootRouteRef,
    role: roleRouteRef,
    createRole: createRoleRouteRef
  },
  apis: [
    createApiFactory({
      api: rbacApiRef,
      deps: {
        configApi: configApiRef,
        identityApi: identityApiRef
      },
      factory: ({ configApi, identityApi }) => new RBACBackendClient({ configApi, identityApi })
    }),
    createApiFactory({
      api: licensedUsersApiRef,
      deps: {
        configApi: configApiRef,
        identityApi: identityApiRef
      },
      factory: ({ configApi, identityApi }) => new LicensedUsersAPIClient({ configApi, identityApi })
    })
  ]
});
const RbacPage = rbacPlugin.provide(
  createRoutableExtension({
    name: "RbacPage",
    component: () => import('./components/index.esm.js').then((m) => m.Router),
    mountPoint: rootRouteRef
  })
);
const Administration = rbacPlugin.provide(
  createComponentExtension({
    name: "Administration",
    component: {
      lazy: () => import('./components/index.esm.js').then((m) => m.Administration)
    }
  })
);

export { Administration, RbacPage, rbacPlugin };
//# sourceMappingURL=plugin.esm.js.map
