import React from 'react';
import { useNavigate } from 'react-router-dom';
import { parseEntityRef } from '@backstage/catalog-model';
import { SimpleStepper, SimpleStepperStep } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import Alert from '@mui/material/Alert';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardHeader from '@mui/material/CardHeader';
import Divider from '@mui/material/Divider';
import Paper from '@mui/material/Paper';
import { useFormik } from 'formik';
import { rbacApiRef } from '../../api/RBACBackendClient.esm.js';
import { validationSchema, getRoleData, getPermissionPoliciesData, getNewConditionalPolicies, getRemovedConditionalPoliciesIds, getUpdatedConditionalPolicies, getConditionalPermissionPoliciesData } from '../../utils/create-role-utils.esm.js';
import { onlyInLeft, isSamePermissionPolicy } from '../../utils/rbac-utils.esm.js';
import { removePermissions, createPermissions, removeConditions, modifyConditions, createConditions } from '../../utils/role-form-utils.esm.js';
import { AddedMembersTable } from './AddedMembersTable.esm.js';
import { AddMembersForm } from './AddMembersForm.esm.js';
import { PermissionPoliciesForm } from './PermissionPoliciesForm.esm.js';
import { ReviewStep } from './ReviewStep.esm.js';
import { RoleDetailsForm } from './RoleDetailsForm.esm.js';

const RoleForm = ({
  roleName,
  step,
  titles,
  membersData,
  submitLabel,
  initialValues
}) => {
  const [activeStep, setActiveStep] = React.useState(step || 0);
  const navigate = useNavigate();
  const rbacApi = useApi(rbacApiRef);
  const navigateTo = (rName, action) => {
    const currentRoleName = rName || roleName;
    const stateProp = currentRoleName && action ? {
      state: {
        toastMessage: `Role ${currentRoleName} ${action} successfully`
      }
    } : void 0;
    if (step && currentRoleName) {
      const { kind, namespace, name } = parseEntityRef(currentRoleName);
      navigate(`../roles/${kind}/${namespace}/${name}`, stateProp);
    } else {
      navigate("..", stateProp);
    }
  };
  const updateRole = async (name, values, formikHelpers) => {
    try {
      const newData = getRoleData(values);
      const newName = newData.name;
      const newPermissionsData = getPermissionPoliciesData(values);
      const newConditions = getNewConditionalPolicies(values);
      const deleteConditions = getRemovedConditionalPoliciesIds(
        values,
        initialValues
      );
      const updateConditions = getUpdatedConditionalPolicies(
        values,
        initialValues
      );
      const oldData = getRoleData(initialValues);
      const res = await rbacApi.updateRole(oldData, newData);
      if (res.error) {
        throw new Error(
          `${"Unable to edit the role. "}${res.error.message}`
        );
      } else {
        const oldPermissionsData = getPermissionPoliciesData(initialValues);
        const newPermissions = onlyInLeft(
          newPermissionsData,
          oldPermissionsData,
          isSamePermissionPolicy
        );
        const deletePermissions = onlyInLeft(
          oldPermissionsData,
          newPermissionsData,
          isSamePermissionPolicy
        );
        await removePermissions(name, deletePermissions, rbacApi);
        await createPermissions(newPermissions, rbacApi);
        await removeConditions(deleteConditions, rbacApi);
        await modifyConditions(updateConditions, rbacApi);
        await createConditions(newConditions, rbacApi);
        navigateTo(newName, "updated");
      }
    } catch (e) {
      formikHelpers.setStatus({ submitError: e });
    }
  };
  const newRole = async (values, formikHelpers) => {
    try {
      const newData = getRoleData(values);
      const newPermissionsData = getPermissionPoliciesData(values);
      const newConditionalPermissionPoliciesData = getConditionalPermissionPoliciesData(values);
      const res = await rbacApi.createRole(newData);
      if (res.error) {
        throw new Error(
          `${"Unable to create role. "}${res.error.message}`
        );
      }
      await createPermissions(
        newPermissionsData,
        rbacApi,
        "Role was created successfully but unable to add permission policies to the role."
      );
      await createConditions(
        newConditionalPermissionPoliciesData,
        rbacApi,
        "Role created successfully but unable to add conditions to the role."
      );
      navigateTo(newData.name, "created");
    } catch (e) {
      formikHelpers.setStatus({ submitError: e });
    }
  };
  const formik = useFormik({
    enableReinitialize: true,
    initialValues,
    validationSchema,
    onSubmit: async (values, formikHelpers) => {
      if (roleName) {
        updateRole(roleName, values, formikHelpers);
      } else {
        newRole(values, formikHelpers);
      }
    }
  });
  const validateStepField = (fieldName) => {
    switch (fieldName) {
      case "name": {
        formik.validateField(fieldName);
        return formik.errors.name;
      }
      case "selectedMembers": {
        formik.validateField(fieldName);
        return formik.errors.selectedMembers;
      }
      case "permissionPoliciesRows": {
        formik.values.permissionPoliciesRows.forEach((_pp, index) => {
          formik.validateField(`permissionPoliciesRows[${index}].plugin`);
          formik.validateField(`permissionPoliciesRows[${index}].permission`);
        });
        return formik.errors.permissionPoliciesRows;
      }
      default:
        return void 0;
    }
  };
  const handleNext = (fieldName) => {
    const error = fieldName && validateStepField(fieldName);
    if (!fieldName || !error) {
      formik.setErrors({});
      const stepNum = Math.min(activeStep + 1, 3);
      setActiveStep(stepNum);
    }
  };
  const canNextPermissionPoliciesStep = () => {
    return formik.values.permissionPoliciesRows.filter((pp) => !!pp.plugin).length === formik.values.permissionPoliciesRows.length && (!formik.errors.permissionPoliciesRows || formik.errors.permissionPoliciesRows?.filter((err) => !!err)?.length === 0);
  };
  const handleBack = () => setActiveStep(Math.max(activeStep - 1, 0));
  const handleCancel = () => {
    navigateTo();
  };
  const handleReset = (e) => {
    setActiveStep(0);
    formik.handleReset(e);
  };
  return /* @__PURE__ */ React.createElement(Card, { style: { overflow: "auto" } }, /* @__PURE__ */ React.createElement(CardHeader, { title: titles.formTitle }), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(
    CardContent,
    {
      component: "form",
      onSubmit: formik.handleSubmit,
      style: { position: "relative" }
    },
    /* @__PURE__ */ React.createElement(SimpleStepper, { activeStep }, /* @__PURE__ */ React.createElement(
      SimpleStepperStep,
      {
        title: titles.nameAndDescriptionTitle,
        actions: {
          showBack: false,
          showNext: true,
          nextText: "Next",
          canNext: () => !!formik.values.name && !formik.errors.name,
          onNext: () => handleNext("name")
        }
      },
      /* @__PURE__ */ React.createElement(
        RoleDetailsForm,
        {
          name: formik.values.name,
          description: formik.values.description,
          handleBlur: formik.handleBlur,
          handleChange: formik.handleChange,
          nameError: formik.errors.name
        }
      )
    ), /* @__PURE__ */ React.createElement(
      SimpleStepperStep,
      {
        title: titles.usersAndGroupsTitle,
        actions: {
          showNext: true,
          nextText: "Next",
          canNext: () => formik.values.selectedMembers?.length > 0 && !formik.errors.selectedMembers,
          onNext: () => handleNext("selectedMembers"),
          showBack: true,
          backText: "Back",
          onBack: handleBack
        }
      },
      /* @__PURE__ */ React.createElement(Box, null, /* @__PURE__ */ React.createElement(
        AddMembersForm,
        {
          selectedMembers: formik.values.selectedMembers,
          selectedMembersError: formik.errors.selectedMembers,
          setFieldValue: formik.setFieldValue,
          membersData
        }
      ), /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement(
        AddedMembersTable,
        {
          selectedMembers: formik.values.selectedMembers,
          setFieldValue: formik.setFieldValue
        }
      ))
    ), /* @__PURE__ */ React.createElement(
      SimpleStepperStep,
      {
        title: titles.permissionPoliciesTitle,
        actions: {
          showNext: true,
          nextText: "Next",
          canNext: () => canNextPermissionPoliciesStep(),
          onNext: () => handleNext("permissionPoliciesRows"),
          showBack: true,
          backText: "Back",
          onBack: handleBack
        }
      },
      /* @__PURE__ */ React.createElement(
        PermissionPoliciesForm,
        {
          permissionPoliciesRows: formik.values.permissionPoliciesRows,
          permissionPoliciesRowsError: formik.errors.permissionPoliciesRows,
          setFieldValue: formik.setFieldValue,
          setFieldError: formik.setFieldError,
          handleBlur: formik.handleBlur
        }
      )
    ), /* @__PURE__ */ React.createElement(SimpleStepperStep, { title: "", end: true }, /* @__PURE__ */ React.createElement(Paper, { square: true, elevation: 0 }, /* @__PURE__ */ React.createElement(ReviewStep, { values: formik.values, isEditing: !!roleName }), /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement(Button, { onClick: handleBack }, "Back"), /* @__PURE__ */ React.createElement(Button, { onClick: (e) => handleReset(e) }, "Reset"), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "primary",
        type: "submit",
        disabled: !!formik.errors.name || !!formik.errors.selectedMembers || !formik.dirty
      },
      submitLabel || "Create"
    )))),
    formik.status?.submitError && /* @__PURE__ */ React.createElement(Box, { style: { paddingBottom: "16px" } }, /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, `${formik.status.submitError}`)),
    /* @__PURE__ */ React.createElement(
      Button,
      {
        style: { position: "absolute", right: "2.75rem", bottom: "2.75rem" },
        onClick: handleCancel,
        color: "primary"
      },
      "Cancel"
    )
  ));
};

export { RoleForm };
//# sourceMappingURL=RoleForm.esm.js.map
