import React from 'react';
import { useAsync } from 'react-use';
import { Progress } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import AddIcon from '@mui/icons-material/Add';
import Button from '@mui/material/Button';
import FormHelperText from '@mui/material/FormHelperText';
import { styled } from '@mui/material/styles';
import { rbacApiRef } from '../../api/RBACBackendClient.esm.js';
import { useConditionRules } from '../../hooks/useConditionRules.esm.js';
import { getPluginsPermissionPoliciesData } from '../../utils/create-role-utils.esm.js';
import { initialPermissionPolicyRowValue } from './const.esm.js';
import { PermissionPoliciesFormRow } from './PermissionPoliciesFormRow.esm.js';

const classes = {
  permissionPoliciesForm: "permission-policies-form"
};
const PermissionPoliciesFormContainer = styled("div")(
  ({ theme }) => ({
    [`&.${classes.permissionPoliciesForm}`]: {
      padding: "20px",
      border: `2px solid ${theme.palette.border}`,
      borderRadius: "5px"
    }
  })
);
const PermissionPoliciesForm = ({
  permissionPoliciesRows,
  permissionPoliciesRowsError,
  setFieldValue,
  setFieldError,
  handleBlur
}) => {
  const rbacApi = useApi(rbacApiRef);
  const conditionRules = useConditionRules();
  const {
    value: permissionPolicies,
    loading: permissionPoliciesLoading,
    error: permissionPoliciesErr
  } = useAsync(async () => {
    return await rbacApi.listPermissions();
  });
  const permissionPoliciesData = !permissionPoliciesLoading && Array.isArray(permissionPolicies) ? getPluginsPermissionPoliciesData(permissionPolicies) : void 0;
  const onChangePlugin = (plugin, index) => {
    setFieldValue(`permissionPoliciesRows[${index}].plugin`, plugin, true);
    setFieldValue(`permissionPoliciesRows[${index}].permission`, "", false);
    setFieldValue(`permissionPoliciesRows[${index}].isResourced`, false, false);
    setFieldValue(
      `permissionPoliciesRows[${index}].conditions`,
      void 0,
      false
    );
    setFieldValue(
      `permissionPoliciesRows[${index}].policies`,
      initialPermissionPolicyRowValue.policies,
      false
    );
  };
  const onChangePermission = (permission, index, isResourced, policies) => {
    setFieldValue(
      `permissionPoliciesRows[${index}].permission`,
      permission,
      true
    );
    setFieldValue(
      `permissionPoliciesRows[${index}].isResourced`,
      isResourced,
      false
    );
    setFieldValue(
      `permissionPoliciesRows[${index}].conditions`,
      void 0,
      false
    );
    setFieldValue(
      `permissionPoliciesRows[${index}].policies`,
      policies ? policies.map((p) => ({ policy: p, effect: "allow" })) : initialPermissionPolicyRowValue.policies,
      false
    );
  };
  const onChangePolicy = (isChecked, policyIndex, index) => {
    setFieldValue(
      `permissionPoliciesRows[${index}].policies[${policyIndex}].effect`,
      isChecked ? "allow" : "deny",
      true
    );
  };
  const onAddConditions = (index, conditions) => {
    setFieldValue(`permissionPoliciesRows[${index}].conditions`, conditions);
    if (!conditions)
      setFieldValue(`permissionPoliciesRows[${index}].id`, void 0);
  };
  const onRowRemove = (index) => {
    const finalPps = permissionPoliciesRows.filter(
      (_pp, ppIndex) => index !== ppIndex
    );
    setFieldError(`permissionPoliciesRows[${index}]`, void 0);
    setFieldValue("permissionPoliciesRows", finalPps, false);
  };
  const onRowAdd = () => setFieldValue(
    "permissionPoliciesRows",
    [...permissionPoliciesRows, initialPermissionPolicyRowValue],
    false
  );
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(FormHelperText, null, "Permission policies can be selected for each plugin. You can add multiple permission policies using +Add option."), /* @__PURE__ */ React.createElement("br", null), permissionPoliciesLoading ? /* @__PURE__ */ React.createElement(Progress, null) : /* @__PURE__ */ React.createElement(
    PermissionPoliciesFormContainer,
    {
      className: classes.permissionPoliciesForm
    },
    permissionPoliciesRows.map((pp, index) => /* @__PURE__ */ React.createElement(
      PermissionPoliciesFormRow,
      {
        key: index,
        permissionPoliciesRowError: permissionPoliciesRowsError?.[index] ?? {},
        rowName: `permissionPoliciesRows[${index}]`,
        permissionPoliciesRowData: pp,
        permissionPoliciesData,
        rowCount: permissionPoliciesRows.length,
        conditionRules,
        onChangePlugin: (plugin) => onChangePlugin(plugin, index),
        onChangePermission: (permission, isResourced, policies) => onChangePermission(permission, index, isResourced, policies),
        onChangePolicy: (isChecked, policyIndex) => onChangePolicy(isChecked, policyIndex, index),
        onAddConditions: (conditions) => onAddConditions(index, conditions),
        onRemove: () => onRowRemove(index),
        handleBlur,
        getPermissionDisabled: (permission) => {
          const pluginPermissionPolicies = permissionPoliciesRows.filter(
            (ppr) => ppr.plugin === pp.plugin
          );
          const previouslySelectedPermission = !!pluginPermissionPolicies.find(
            (ppp) => ppp.permission === permission
          );
          return previouslySelectedPermission && !permissionPoliciesData?.pluginsPermissions[pp.plugin]?.policies[permission ?? ""]?.isResourced;
        }
      }
    )),
    /* @__PURE__ */ React.createElement(
      Button,
      {
        sx: {
          color: (theme) => theme.palette.primary.light
        },
        size: "small",
        onClick: onRowAdd,
        name: "add-permission-policy"
      },
      /* @__PURE__ */ React.createElement(AddIcon, null),
      "Add"
    )
  ), !permissionPoliciesLoading && (permissionPoliciesErr?.message || !Array.isArray(permissionPolicies)) && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement(FormHelperText, { error: true }, `Error fetching the permission policies: ${permissionPoliciesErr?.message || permissionPolicies?.statusText}`)));
};

export { PermissionPoliciesForm };
//# sourceMappingURL=PermissionPoliciesForm.esm.js.map
