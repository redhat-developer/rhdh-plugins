import React from 'react';
import ChecklistRtlIcon from '@mui/icons-material/ChecklistRtl';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import RemoveIcon from '@mui/icons-material/Remove';
import Autocomplete from '@mui/material/Autocomplete';
import FormLabel from '@mui/material/FormLabel';
import IconButton from '@mui/material/IconButton';
import TextField from '@mui/material/TextField';
import Tooltip from '@mui/material/Tooltip';
import Typography from '@mui/material/Typography';
import { getRulesNumber } from '../../utils/create-role-utils.esm.js';
import { ConditionalAccessSidebar } from '../ConditionalAccess/ConditionalAccessSidebar.esm.js';
import { PoliciesCheckboxGroup } from './PoliciesCheckboxGroup.esm.js';

const PermissionPoliciesFormRow = ({
  permissionPoliciesRowData,
  permissionPoliciesData,
  permissionPoliciesRowError,
  rowCount,
  rowName,
  conditionRules,
  onRemove,
  onChangePermission,
  onChangePolicy,
  onChangePlugin,
  handleBlur,
  getPermissionDisabled,
  onAddConditions
}) => {
  const { plugin: pluginError, permission: permissionError } = permissionPoliciesRowError;
  const { data: conditionRulesData, error: conditionRulesError } = conditionRules;
  const totalRules = getRulesNumber(permissionPoliciesRowData.conditions);
  const [sidebarOpen, setSidebarOpen] = React.useState(false);
  const tooltipTitle = () => /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Typography, { component: "p", align: "center" }, "Define access conditions for the selected resource type using Rules. Rules vary by resource type.", " ", /* @__PURE__ */ React.createElement("b", null, "Users have access to the resource type content by default"), " unless configured otherwise."));
  const getTotalRules = () => {
    let accessMessage = "Configure access";
    if (totalRules > 0) {
      accessMessage += ` (${totalRules} ${totalRules > 1 ? "rules" : "rule"})`;
    }
    return accessMessage;
  };
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { style: { display: "flex", flexFlow: "column", gap: "15px" } }, /* @__PURE__ */ React.createElement(
    FormLabel,
    {
      style: {
        fontWeight: 800,
        fontSize: "0.8rem"
      }
    },
    "What can users/groups access?"
  ), /* @__PURE__ */ React.createElement(
    "div",
    {
      style: {
        display: "flex",
        gap: "20px",
        marginBottom: "15px"
      }
    },
    /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        options: permissionPoliciesData?.plugins ?? [],
        style: { width: "35%", flexGrow: "1" },
        value: permissionPoliciesRowData.plugin || null,
        onChange: (_e, value) => {
          onChangePlugin(value ?? "");
        },
        renderInput: (params) => /* @__PURE__ */ React.createElement(
          TextField,
          {
            ...params,
            label: "Plugin",
            name: `${rowName}.plugin`,
            variant: "outlined",
            placeholder: "Select a plugin",
            error: !!pluginError,
            helperText: pluginError ?? "",
            onBlur: handleBlur,
            required: true
          }
        )
      }
    ),
    /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        disabled: !permissionPoliciesRowData.plugin,
        options: permissionPoliciesData?.pluginsPermissions?.[permissionPoliciesRowData.plugin]?.permissions ?? [],
        style: { width: "35%", flexGrow: "1" },
        value: permissionPoliciesRowData.permission || null,
        onChange: (_e, value) => onChangePermission(
          value ?? "",
          permissionPoliciesData?.pluginsPermissions?.[permissionPoliciesRowData.plugin]?.policies[value ?? ""]?.isResourced ?? false,
          value ? permissionPoliciesData?.pluginsPermissions?.[permissionPoliciesRowData.plugin]?.policies?.[value].policies : void 0
        ),
        getOptionDisabled: getPermissionDisabled,
        getOptionLabel: (option) => option || "",
        renderInput: (params) => /* @__PURE__ */ React.createElement(
          TextField,
          {
            ...params,
            label: "Resource type",
            name: `${rowName}.permission`,
            variant: "outlined",
            placeholder: "Select a resource type",
            error: !!permissionError,
            helperText: permissionError ?? "",
            onBlur: handleBlur,
            required: true
          }
        )
      }
    ),
    /* @__PURE__ */ React.createElement("div", { style: { width: "23%", alignSelf: "center", flexGrow: 1 } }, permissionPoliciesRowData.isResourced && !!conditionRulesData?.[`${permissionPoliciesRowData.plugin}`]?.[`${permissionPoliciesRowData.permission}`]?.rules.length && /* @__PURE__ */ React.createElement(
      IconButton,
      {
        title: "",
        color: "primary",
        hidden: !permissionPoliciesData?.pluginsPermissions[permissionPoliciesRowData.plugin]?.policies[permissionPoliciesRowData.permission]?.isResourced,
        "aria-label": "configure-access",
        sx: {
          fontSize: (theme) => theme.typography.fontSize
        },
        onClick: () => setSidebarOpen(true),
        disabled: !!conditionRulesError
      },
      /* @__PURE__ */ React.createElement(ChecklistRtlIcon, { fontSize: "small" }),
      getTotalRules(),
      "\xA0",
      /* @__PURE__ */ React.createElement(Tooltip, { title: tooltipTitle(), placement: "top" }, /* @__PURE__ */ React.createElement(HelpOutlineIcon, { fontSize: "inherit" }))
    )),
    /* @__PURE__ */ React.createElement(
      IconButton,
      {
        title: "Remove",
        sx: {
          color: (theme) => theme.palette.grey[500],
          flexGrow: 0,
          alignSelf: "center"
        },
        onClick: () => onRemove(),
        disabled: rowCount === 1,
        "data-testid": `${rowName}-remove`
      },
      /* @__PURE__ */ React.createElement(RemoveIcon, { id: `${rowName}-remove` })
    )
  )), /* @__PURE__ */ React.createElement(
    PoliciesCheckboxGroup,
    {
      permissionPoliciesRowData,
      onChangePolicy,
      rowName
    }
  ), /* @__PURE__ */ React.createElement(
    ConditionalAccessSidebar,
    {
      open: sidebarOpen,
      onClose: () => {
        setSidebarOpen(false);
      },
      onSave: (conditions) => {
        onAddConditions(conditions);
        setSidebarOpen(false);
      },
      conditionsFormVal: permissionPoliciesRowData.conditions,
      selPluginResourceType: permissionPoliciesRowData.permission,
      conditionRulesData: conditionRulesData?.[`${permissionPoliciesRowData.plugin}`]?.[`${permissionPoliciesRowData.permission}`]
    }
  ));
};

export { PermissionPoliciesFormRow };
//# sourceMappingURL=PermissionPoliciesFormRow.esm.js.map
