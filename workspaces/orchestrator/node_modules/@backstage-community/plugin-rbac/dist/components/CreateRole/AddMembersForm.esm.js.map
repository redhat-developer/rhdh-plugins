{"version":3,"file":"AddMembersForm.esm.js","sources":["../../../src/components/CreateRole/AddMembersForm.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\n\nimport { stringifyEntityRef } from '@backstage/catalog-model';\n\nimport Autocomplete from '@mui/material/Autocomplete';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport TextField from '@mui/material/TextField';\nimport { FormikErrors } from 'formik';\n\nimport { MemberEntity } from '../../types';\nimport {\n  getChildGroupsCount,\n  getMembersCount,\n  getParentGroupsCount,\n} from '../../utils/create-role-utils';\nimport { MembersDropdownOption } from './MembersDropdownOption';\nimport { RoleFormValues, SelectedMember } from './types';\n\ntype AddMembersFormProps = {\n  selectedMembers: SelectedMember[];\n  selectedMembersError?: string;\n  membersData: { members: MemberEntity[]; loading: boolean; error: Error };\n  setFieldValue: (\n    field: string,\n    value: any,\n    shouldValidate?: boolean,\n  ) => Promise<FormikErrors<RoleFormValues>> | Promise<void>;\n};\n\nexport const AddMembersForm = ({\n  selectedMembers,\n  selectedMembersError,\n  setFieldValue,\n  membersData,\n}: AddMembersFormProps) => {\n  const [search, setSearch] = React.useState<string>('');\n  const [selectedMember, setSelectedMember] = React.useState<SelectedMember>({\n    label: '',\n    etag: '',\n    type: '',\n    ref: '',\n  } as SelectedMember);\n\n  const getDescription = (member: MemberEntity) => {\n    const memberCount = getMembersCount(member);\n    const parentCount = getParentGroupsCount(member);\n    const childCount = getChildGroupsCount(member);\n\n    return member.kind === 'Group'\n      ? `${memberCount} members, ${parentCount} parent group, ${childCount} child groups`\n      : undefined;\n  };\n\n  const membersOptions: SelectedMember[] = React.useMemo(() => {\n    return membersData.members\n      ? membersData.members.map((member: MemberEntity, index: number) => {\n          const tag =\n            member.metadata.etag ??\n            `${member.metadata.name}-${member.kind}-${index}`;\n          return {\n            id: tag,\n            label: member.spec?.profile?.displayName ?? member.metadata.name,\n            description: getDescription(member),\n            etag: tag,\n            type: member.kind,\n            namespace: member.metadata.namespace,\n            members: getMembersCount(member),\n            ref: stringifyEntityRef(member),\n          };\n        })\n      : ([] as SelectedMember[]);\n  }, [membersData.members]);\n\n  const filteredMembers = React.useMemo(() => {\n    if (search) {\n      return membersOptions\n        .filter(m =>\n          m.label\n            .toLocaleLowerCase('en-US')\n            .includes(search.toLocaleLowerCase('en-US')),\n        )\n        .slice(0, 99);\n    }\n\n    return membersOptions.slice(0, 99);\n  }, [membersOptions, search]);\n\n  const handleIsOptionEqualToValue = (\n    option: SelectedMember,\n    value: SelectedMember,\n  ) =>\n    value.etag\n      ? option.etag === value.etag\n      : selectedMember.etag === value.etag;\n\n  return (\n    <>\n      <FormHelperText>\n        Search and select users and groups to be added. Selected users and\n        groups will appear in the members table.\n      </FormHelperText>\n      <br />\n      <Autocomplete\n        options={filteredMembers || []}\n        getOptionLabel={(option: SelectedMember) => option.label ?? ''}\n        isOptionEqualToValue={handleIsOptionEqualToValue}\n        loading={membersData.loading}\n        loadingText={<LinearProgress />}\n        disableClearable\n        value={selectedMember}\n        onChange={(_e, value: SelectedMember) => {\n          setSelectedMember(value);\n          if (value) {\n            setSearch(value.label);\n            setFieldValue('selectedMembers', [...selectedMembers, value]);\n          }\n        }}\n        inputValue={search}\n        onInputChange={(_e, newSearch: string, reason) =>\n          reason === 'input' && setSearch(newSearch)\n        }\n        getOptionDisabled={(option: SelectedMember) =>\n          !!selectedMembers.find(\n            (sm: SelectedMember) => sm.etag === option.etag,\n          )\n        }\n        renderOption={(props, option: SelectedMember, state) => (\n          <MembersDropdownOption props={props} option={option} state={state} />\n        )}\n        noOptionsText=\"No users and groups found.\"\n        clearOnEscape\n        renderInput={params => (\n          <TextField\n            {...params}\n            name=\"add-users-and-groups\"\n            variant=\"outlined\"\n            label=\"Users and groups\"\n            placeholder=\"Search by user name or group name\"\n            error={!!selectedMembersError}\n            helperText={selectedMembersError ?? ''}\n            required\n          />\n        )}\n      />\n      <br />\n      {membersData.error?.message && (\n        <FormHelperText error={!!membersData.error}>\n          {`Error fetching user and groups: ${membersData.error.message}`}\n        </FormHelperText>\n      )}\n    </>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;AA6CO,MAAM,iBAAiB,CAAC;AAAA,EAC7B,eAAA;AAAA,EACA,oBAAA;AAAA,EACA,aAAA;AAAA,EACA;AACF,CAA2B,KAAA;AACzB,EAAA,MAAM,CAAC,MAAQ,EAAA,SAAS,CAAI,GAAA,KAAA,CAAM,SAAiB,EAAE,CAAA;AACrD,EAAA,MAAM,CAAC,cAAA,EAAgB,iBAAiB,CAAA,GAAI,MAAM,QAAyB,CAAA;AAAA,IACzE,KAAO,EAAA,EAAA;AAAA,IACP,IAAM,EAAA,EAAA;AAAA,IACN,IAAM,EAAA,EAAA;AAAA,IACN,GAAK,EAAA;AAAA,GACY,CAAA;AAEnB,EAAM,MAAA,cAAA,GAAiB,CAAC,MAAyB,KAAA;AAC/C,IAAM,MAAA,WAAA,GAAc,gBAAgB,MAAM,CAAA;AAC1C,IAAM,MAAA,WAAA,GAAc,qBAAqB,MAAM,CAAA;AAC/C,IAAM,MAAA,UAAA,GAAa,oBAAoB,MAAM,CAAA;AAE7C,IAAO,OAAA,MAAA,CAAO,SAAS,OACnB,GAAA,CAAA,EAAG,WAAW,CAAa,UAAA,EAAA,WAAW,CAAkB,eAAA,EAAA,UAAU,CAClE,aAAA,CAAA,GAAA,KAAA,CAAA;AAAA,GACN;AAEA,EAAM,MAAA,cAAA,GAAmC,KAAM,CAAA,OAAA,CAAQ,MAAM;AAC3D,IAAA,OAAO,YAAY,OACf,GAAA,WAAA,CAAY,QAAQ,GAAI,CAAA,CAAC,QAAsB,KAAkB,KAAA;AAC/D,MAAA,MAAM,GACJ,GAAA,MAAA,CAAO,QAAS,CAAA,IAAA,IAChB,CAAG,EAAA,MAAA,CAAO,QAAS,CAAA,IAAI,CAAI,CAAA,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA,EAAI,KAAK,CAAA,CAAA;AACjD,MAAO,OAAA;AAAA,QACL,EAAI,EAAA,GAAA;AAAA,QACJ,OAAO,MAAO,CAAA,IAAA,EAAM,OAAS,EAAA,WAAA,IAAe,OAAO,QAAS,CAAA,IAAA;AAAA,QAC5D,WAAA,EAAa,eAAe,MAAM,CAAA;AAAA,QAClC,IAAM,EAAA,GAAA;AAAA,QACN,MAAM,MAAO,CAAA,IAAA;AAAA,QACb,SAAA,EAAW,OAAO,QAAS,CAAA,SAAA;AAAA,QAC3B,OAAA,EAAS,gBAAgB,MAAM,CAAA;AAAA,QAC/B,GAAA,EAAK,mBAAmB,MAAM;AAAA,OAChC;AAAA,KACD,IACA,EAAC;AAAA,GACL,EAAA,CAAC,WAAY,CAAA,OAAO,CAAC,CAAA;AAExB,EAAM,MAAA,eAAA,GAAkB,KAAM,CAAA,OAAA,CAAQ,MAAM;AAC1C,IAAA,IAAI,MAAQ,EAAA;AACV,MAAA,OAAO,cACJ,CAAA,MAAA;AAAA,QAAO,CAAA,CAAA,KACN,CAAE,CAAA,KAAA,CACC,iBAAkB,CAAA,OAAO,EACzB,QAAS,CAAA,MAAA,CAAO,iBAAkB,CAAA,OAAO,CAAC;AAAA,OAC/C,CACC,KAAM,CAAA,CAAA,EAAG,EAAE,CAAA;AAAA;AAGhB,IAAO,OAAA,cAAA,CAAe,KAAM,CAAA,CAAA,EAAG,EAAE,CAAA;AAAA,GAChC,EAAA,CAAC,cAAgB,EAAA,MAAM,CAAC,CAAA;AAE3B,EAAA,MAAM,0BAA6B,GAAA,CACjC,MACA,EAAA,KAAA,KAEA,KAAM,CAAA,IAAA,GACF,MAAO,CAAA,IAAA,KAAS,KAAM,CAAA,IAAA,GACtB,cAAe,CAAA,IAAA,KAAS,KAAM,CAAA,IAAA;AAEpC,EAAA,iFAEK,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,IAAA,EAAe,6GAGhB,CACA,kBAAA,KAAA,CAAA,aAAA,CAAC,UAAG,CACJ,kBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,YAAA;AAAA,IAAA;AAAA,MACC,OAAA,EAAS,mBAAmB,EAAC;AAAA,MAC7B,cAAgB,EAAA,CAAC,MAA2B,KAAA,MAAA,CAAO,KAAS,IAAA,EAAA;AAAA,MAC5D,oBAAsB,EAAA,0BAAA;AAAA,MACtB,SAAS,WAAY,CAAA,OAAA;AAAA,MACrB,WAAA,sCAAc,cAAe,EAAA,IAAA,CAAA;AAAA,MAC7B,gBAAgB,EAAA,IAAA;AAAA,MAChB,KAAO,EAAA,cAAA;AAAA,MACP,QAAA,EAAU,CAAC,EAAA,EAAI,KAA0B,KAAA;AACvC,QAAA,iBAAA,CAAkB,KAAK,CAAA;AACvB,QAAA,IAAI,KAAO,EAAA;AACT,UAAA,SAAA,CAAU,MAAM,KAAK,CAAA;AACrB,UAAA,aAAA,CAAc,iBAAmB,EAAA,CAAC,GAAG,eAAA,EAAiB,KAAK,CAAC,CAAA;AAAA;AAC9D,OACF;AAAA,MACA,UAAY,EAAA,MAAA;AAAA,MACZ,aAAA,EAAe,CAAC,EAAI,EAAA,SAAA,EAAmB,WACrC,MAAW,KAAA,OAAA,IAAW,UAAU,SAAS,CAAA;AAAA,MAE3C,iBAAmB,EAAA,CAAC,MAClB,KAAA,CAAC,CAAC,eAAgB,CAAA,IAAA;AAAA,QAChB,CAAC,EAAA,KAAuB,EAAG,CAAA,IAAA,KAAS,MAAO,CAAA;AAAA,OAC7C;AAAA,MAEF,YAAA,EAAc,CAAC,KAAO,EAAA,MAAA,EAAwB,0BAC3C,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA,EAAsB,KAAc,EAAA,MAAA,EAAgB,KAAc,EAAA,CAAA;AAAA,MAErE,aAAc,EAAA,4BAAA;AAAA,MACd,aAAa,EAAA,IAAA;AAAA,MACb,aAAa,CACX,MAAA,qBAAA,KAAA,CAAA,aAAA;AAAA,QAAC,SAAA;AAAA,QAAA;AAAA,UACE,GAAG,MAAA;AAAA,UACJ,IAAK,EAAA,sBAAA;AAAA,UACL,OAAQ,EAAA,UAAA;AAAA,UACR,KAAM,EAAA,kBAAA;AAAA,UACN,WAAY,EAAA,mCAAA;AAAA,UACZ,KAAA,EAAO,CAAC,CAAC,oBAAA;AAAA,UACT,YAAY,oBAAwB,IAAA,EAAA;AAAA,UACpC,QAAQ,EAAA;AAAA;AAAA;AACV;AAAA,qBAGH,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAG,GACH,WAAY,CAAA,KAAA,EAAO,2BACjB,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,EAAe,OAAO,CAAC,CAAC,YAAY,KAClC,EAAA,EAAA,CAAA,gCAAA,EAAmC,YAAY,KAAM,CAAA,OAAO,EAC/D,CAEJ,CAAA;AAEJ;;;;"}