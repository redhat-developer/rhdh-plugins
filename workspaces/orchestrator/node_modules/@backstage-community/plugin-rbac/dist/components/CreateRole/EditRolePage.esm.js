import React from 'react';
import { useParams } from 'react-router-dom';
import { useQueryParamState, Progress, ErrorPage, Page, Header, Content } from '@backstage/core-components';
import { usePermissionPolicies } from '../../hooks/usePermissionPolicies.esm.js';
import { useSelectedMembers } from '../../hooks/useSelectedMembers.esm.js';
import { RoleForm } from './RoleForm.esm.js';

const EditRolePage = () => {
  const { roleName, roleNamespace, roleKind } = useParams();
  const [queryParamState] = useQueryParamState("activeStep");
  const {
    selectedMembers,
    members,
    role,
    loading: loadingMembers,
    roleError,
    membersError,
    canReadUsersAndGroups
  } = useSelectedMembers(
    roleName ? `${roleKind}:${roleNamespace}/${roleName}` : ""
  );
  const { data, loading: loadingPolicies } = usePermissionPolicies(
    `${roleKind}:${roleNamespace}/${roleName}`
  );
  const initialValues = {
    name: roleName || "",
    namespace: roleNamespace || "default",
    kind: roleKind || "role",
    description: role?.metadata?.description ?? "",
    selectedMembers,
    permissionPoliciesRows: data
  };
  if (loadingMembers || loadingPolicies) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (roleError.name) {
    return /* @__PURE__ */ React.createElement(ErrorPage, { status: roleError.name, statusMessage: roleError.message });
  }
  if (!canReadUsersAndGroups) {
    return /* @__PURE__ */ React.createElement(ErrorPage, { statusMessage: "Unauthorized to edit role" });
  }
  return /* @__PURE__ */ React.createElement(Page, { themeId: "tool" }, /* @__PURE__ */ React.createElement(Header, { title: "Edit role", type: "RBAC", typeLink: ".." }), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(
    RoleForm,
    {
      initialValues,
      titles: {
        formTitle: "Edit Role",
        nameAndDescriptionTitle: "Edit name and description of role ",
        usersAndGroupsTitle: "Edit users and groups",
        permissionPoliciesTitle: "Edit permission policies"
      },
      roleName: roleName ? `${roleKind}:${roleNamespace}/${roleName}` : "",
      step: Number(queryParamState),
      membersData: {
        members,
        loading: loadingMembers,
        error: membersError
      },
      submitLabel: "Save"
    }
  )));
};

export { EditRolePage };
//# sourceMappingURL=EditRolePage.esm.js.map
