import React from 'react';
import { stringifyEntityRef } from '@backstage/catalog-model';
import Autocomplete from '@mui/material/Autocomplete';
import FormHelperText from '@mui/material/FormHelperText';
import LinearProgress from '@mui/material/LinearProgress';
import TextField from '@mui/material/TextField';
import { getMembersCount, getParentGroupsCount, getChildGroupsCount } from '../../utils/create-role-utils.esm.js';
import { MembersDropdownOption } from './MembersDropdownOption.esm.js';

const AddMembersForm = ({
  selectedMembers,
  selectedMembersError,
  setFieldValue,
  membersData
}) => {
  const [search, setSearch] = React.useState("");
  const [selectedMember, setSelectedMember] = React.useState({
    label: "",
    etag: "",
    type: "",
    ref: ""
  });
  const getDescription = (member) => {
    const memberCount = getMembersCount(member);
    const parentCount = getParentGroupsCount(member);
    const childCount = getChildGroupsCount(member);
    return member.kind === "Group" ? `${memberCount} members, ${parentCount} parent group, ${childCount} child groups` : void 0;
  };
  const membersOptions = React.useMemo(() => {
    return membersData.members ? membersData.members.map((member, index) => {
      const tag = member.metadata.etag ?? `${member.metadata.name}-${member.kind}-${index}`;
      return {
        id: tag,
        label: member.spec?.profile?.displayName ?? member.metadata.name,
        description: getDescription(member),
        etag: tag,
        type: member.kind,
        namespace: member.metadata.namespace,
        members: getMembersCount(member),
        ref: stringifyEntityRef(member)
      };
    }) : [];
  }, [membersData.members]);
  const filteredMembers = React.useMemo(() => {
    if (search) {
      return membersOptions.filter(
        (m) => m.label.toLocaleLowerCase("en-US").includes(search.toLocaleLowerCase("en-US"))
      ).slice(0, 99);
    }
    return membersOptions.slice(0, 99);
  }, [membersOptions, search]);
  const handleIsOptionEqualToValue = (option, value) => value.etag ? option.etag === value.etag : selectedMember.etag === value.etag;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(FormHelperText, null, "Search and select users and groups to be added. Selected users and groups will appear in the members table."), /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement(
    Autocomplete,
    {
      options: filteredMembers || [],
      getOptionLabel: (option) => option.label ?? "",
      isOptionEqualToValue: handleIsOptionEqualToValue,
      loading: membersData.loading,
      loadingText: /* @__PURE__ */ React.createElement(LinearProgress, null),
      disableClearable: true,
      value: selectedMember,
      onChange: (_e, value) => {
        setSelectedMember(value);
        if (value) {
          setSearch(value.label);
          setFieldValue("selectedMembers", [...selectedMembers, value]);
        }
      },
      inputValue: search,
      onInputChange: (_e, newSearch, reason) => reason === "input" && setSearch(newSearch),
      getOptionDisabled: (option) => !!selectedMembers.find(
        (sm) => sm.etag === option.etag
      ),
      renderOption: (props, option, state) => /* @__PURE__ */ React.createElement(MembersDropdownOption, { props, option, state }),
      noOptionsText: "No users and groups found.",
      clearOnEscape: true,
      renderInput: (params) => /* @__PURE__ */ React.createElement(
        TextField,
        {
          ...params,
          name: "add-users-and-groups",
          variant: "outlined",
          label: "Users and groups",
          placeholder: "Search by user name or group name",
          error: !!selectedMembersError,
          helperText: selectedMembersError ?? "",
          required: true
        }
      )
    }
  ), /* @__PURE__ */ React.createElement("br", null), membersData.error?.message && /* @__PURE__ */ React.createElement(FormHelperText, { error: !!membersData.error }, `Error fetching user and groups: ${membersData.error.message}`));
};

export { AddMembersForm };
//# sourceMappingURL=AddMembersForm.esm.js.map
