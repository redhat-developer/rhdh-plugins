import React from 'react';
import { useAsync } from 'react-use';
import { Progress, Page, Header, Content, ErrorPage } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import { rbacApiRef } from '../../api/RBACBackendClient.esm.js';
import { initialPermissionPolicyRowValue } from './const.esm.js';
import { RoleForm } from './RoleForm.esm.js';

const CreateRolePage = () => {
  const rbacApi = useApi(rbacApiRef);
  const {
    loading: membersLoading,
    value: members,
    error: membersError
  } = useAsync(async () => {
    return await rbacApi.getMembers();
  });
  const canReadUsersAndGroups = !membersLoading && !membersError && Array.isArray(members) && members.length > 0;
  const initialValues = {
    name: "",
    namespace: "default",
    kind: "role",
    description: "",
    selectedMembers: [],
    permissionPoliciesRows: [initialPermissionPolicyRowValue]
  };
  if (membersLoading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  return canReadUsersAndGroups ? /* @__PURE__ */ React.createElement(Page, { themeId: "tool" }, /* @__PURE__ */ React.createElement(Header, { title: "Create role", type: "RBAC", typeLink: ".." }), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(
    RoleForm,
    {
      initialValues,
      titles: {
        formTitle: "Create Role",
        nameAndDescriptionTitle: "Enter name and description of role ",
        usersAndGroupsTitle: "Add users and groups",
        permissionPoliciesTitle: "Add permission policies"
      },
      membersData: {
        members: Array.isArray(members) ? members : [],
        loading: membersLoading,
        error: membersError || {
          name: members?.status,
          message: members?.statusText
        }
      }
    }
  ))) : /* @__PURE__ */ React.createElement(ErrorPage, { statusMessage: "Unauthorized to create role" });
};

export { CreateRolePage };
//# sourceMappingURL=CreateRolePage.esm.js.map
