import React from 'react';
import { useApi } from '@backstage/core-plugin-api';
import CloseIcon from '@mui/icons-material/Close';
import ErrorIcon from '@mui/icons-material/Error';
import Alert from '@mui/material/Alert';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import IconButton from '@mui/material/IconButton';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';
import { rbacApiRef } from '../../api/RBACBackendClient.esm.js';
import { getMembers } from '../../utils/rbac-utils.esm.js';
import { removePermissions, removeConditions } from '../../utils/role-form-utils.esm.js';
import { useToast } from '../ToastContext.esm.js';

const DeleteRoleDialog = ({
  open,
  closeDialog,
  roleName,
  propOptions
}) => {
  const { setToastMessage } = useToast();
  const [deleteRoleValue, setDeleteRoleValue] = React.useState();
  const [disableDelete, setDisableDelete] = React.useState(false);
  const [error, setError] = React.useState("");
  const rbacApi = useApi(rbacApiRef);
  const dialogBackgroundColor = (theme) => theme.palette.mode === "dark" ? "#1b1d21" : "#fff";
  const deleteRole = async () => {
    try {
      const policies = await rbacApi.getAssociatedPolicies(roleName);
      const conditionalPolicies = await rbacApi.getRoleConditions(roleName);
      if (Array.isArray(policies)) {
        const allowedPolicies = policies.filter(
          (policy) => policy.effect !== "deny"
        );
        await removePermissions(roleName, allowedPolicies, rbacApi);
      }
      if (Array.isArray(conditionalPolicies)) {
        const conditionalPoliciesIds = conditionalPolicies.map((cp) => cp.id);
        await removeConditions(conditionalPoliciesIds, rbacApi);
      }
      const response = await rbacApi.deleteRole(roleName);
      if (response.status === 200 || response.status === 204) {
        setToastMessage(`Role ${roleName} deleted successfully`);
        closeDialog();
      } else {
        setError(`Unable to delete the role. ${response.statusText}`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : `${err}`);
    }
  };
  const onTextInput = (value) => {
    setDeleteRoleValue(value);
    if (value === "") {
      setDisableDelete(true);
    } else if (value === roleName) {
      setDisableDelete(false);
    } else {
      setDisableDelete(true);
    }
  };
  return /* @__PURE__ */ React.createElement(Dialog, { maxWidth: "md", open, onClose: closeDialog }, /* @__PURE__ */ React.createElement(
    DialogTitle,
    {
      id: "delete-role",
      title: "Delete Role",
      sx: {
        marginBottom: "0 !important",
        backgroundColor: dialogBackgroundColor
      }
    },
    /* @__PURE__ */ React.createElement(
      Box,
      {
        sx: {
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          gap: (theme) => theme.spacing(1)
        }
      },
      /* @__PURE__ */ React.createElement(Typography, { component: "span", sx: { fontWeight: "bold" } }, /* @__PURE__ */ React.createElement(
        ErrorIcon,
        {
          style: {
            color: "red",
            alignContent: "center",
            marginTop: "7px",
            marginRight: "5px",
            marginBottom: "-3px"
          },
          fontSize: "small"
        }
      ), " ", "Delete this role?"),
      /* @__PURE__ */ React.createElement(
        IconButton,
        {
          "aria-label": "close",
          sx: {
            padding: "8px !important",
            color: (theme) => theme.palette.grey[500],
            borderRadius: "50%",
            "&:hover": { borderRadius: "50%" }
          },
          onClick: closeDialog
        },
        /* @__PURE__ */ React.createElement(CloseIcon, null)
      )
    )
  ), /* @__PURE__ */ React.createElement(DialogContent, { sx: { backgroundColor: dialogBackgroundColor } }, "Are you sure you want to delete the role", " ", /* @__PURE__ */ React.createElement(Typography, { component: "span", sx: { fontWeight: "bold" } }, roleName), " ", "?", /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement("br", null), "Deleting this role is irreversible and will remove its functionality from the system. Proceed with caution.", /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement("br", null), "The", " ", /* @__PURE__ */ React.createElement(Typography, { component: "span", sx: { fontWeight: "bold" } }, `${getMembers(
    propOptions.memberRefs
  ).toLocaleLowerCase("en-US")}`), " ", "associated with this role will lose access to all the", " ", /* @__PURE__ */ React.createElement(
    Typography,
    {
      component: "span",
      sx: { fontWeight: "bold" }
    },
    `${propOptions.permissions} permission policies`
  ), " ", "specified in this role.", /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement(
    TextField,
    {
      name: "delete-role",
      "data-testid": "delete-role",
      sx: {
        marginTop: "24px",
        backgroundColor: `${dialogBackgroundColor} !important`
      },
      required: true,
      variant: "outlined",
      label: "Role name",
      defaultValue: deleteRoleValue,
      helperText: "Type the name of the role to confirm",
      onChange: ({ target: { value } }) => onTextInput(value),
      onBlur: ({ target: { value } }) => onTextInput(value)
    }
  )), error && /* @__PURE__ */ React.createElement(Box, { maxWidth: "650px", marginLeft: "20px" }, /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error)), /* @__PURE__ */ React.createElement(
    DialogActions,
    {
      sx: {
        paddingLeft: "25px",
        paddingBottom: "30px",
        justifyContent: "left",
        paddingTop: "16px",
        backgroundColor: dialogBackgroundColor
      }
    },
    /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        style: disableDelete || !deleteRoleValue ? {} : { background: "red", color: "white" },
        onClick: deleteRole,
        disabled: disableDelete || !deleteRoleValue
      },
      "Delete"
    ),
    /* @__PURE__ */ React.createElement(Button, { variant: "outlined", onClick: closeDialog }, "Cancel")
  ));
};

export { DeleteRoleDialog as default };
//# sourceMappingURL=DeleteRoleDialog.esm.js.map
