import React from 'react';
import { parseEntityRef } from '@backstage/catalog-model';
import { Link } from '@backstage/core-components';
import Tooltip from '@mui/material/Tooltip';
import Typography from '@mui/material/Typography';
import { getMembers } from '../../utils/rbac-utils.esm.js';
import EditRole from '../EditRole.esm.js';
import DeleteRole from './DeleteRole.esm.js';

const columns = [
  {
    title: "Name",
    field: "name",
    type: "string",
    render: (props) => {
      const { kind, namespace, name } = parseEntityRef(props.name);
      return /* @__PURE__ */ React.createElement(Link, { to: `roles/${kind}/${namespace}/${name}` }, props.name);
    }
  },
  {
    title: "Users and groups",
    field: "members",
    type: "string",
    align: "left",
    render: (props) => getMembers(props.members),
    customSort: (a, b) => {
      if (a.members.length === 0) {
        return -1;
      }
      if (b.members.length === 0) {
        return 1;
      }
      if (a.members.length === b.members.length) {
        return 0;
      }
      return a.members.length < b.members.length ? -1 : 1;
    }
  },
  {
    title: "Accessible plugins",
    field: "accessiblePlugins",
    type: "string",
    align: "left",
    render: (props) => {
      const pls = props.accessiblePlugins.map(
        (p) => p[0].toLocaleUpperCase("en-US") + p.slice(1)
      );
      const plsTooltip = pls.join(", ");
      const plsOverflowCount = pls.length > 2 ? `+ ${pls.length - 2}` : "";
      return pls.length > 0 ? /* @__PURE__ */ React.createElement(Tooltip, { title: plsTooltip || "", placement: "top-start" }, /* @__PURE__ */ React.createElement(Typography, null, pls.length === 1 ? `${pls[0]}` : `${pls[0]}, ${pls[1]} ${plsOverflowCount}`)) : "-";
    }
  },
  {
    title: "Actions",
    sorting: false,
    render: (props) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      EditRole,
      {
        dataTestId: !props.actionsPermissionResults.edit.allowed ? `disable-update-role-${props.name}` : `update-role-${props.name}`,
        roleName: props.name,
        disable: !props.actionsPermissionResults.edit.allowed,
        tooltip: !props.actionsPermissionResults.edit.allowed ? "Unauthorized to edit" : ""
      }
    ), /* @__PURE__ */ React.createElement(
      DeleteRole,
      {
        dataTestId: !props.actionsPermissionResults.delete.allowed ? `disable-delete-role-${props.name}` : `delete-role-${props.name}`,
        roleName: props.name,
        disable: !props.actionsPermissionResults.delete.allowed,
        tooltip: !props.actionsPermissionResults.delete.allowed ? "Role cannot be deleted" : ""
      }
    ))
  }
];

export { columns };
//# sourceMappingURL=RolesListColumns.esm.js.map
