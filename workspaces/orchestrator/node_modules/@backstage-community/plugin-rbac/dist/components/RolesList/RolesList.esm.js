import React from 'react';
import { Progress, WarningPanel, Table } from '@backstage/core-components';
import { useDeleteDialog } from '@janus-idp/shared-react';
import Box from '@mui/material/Box';
import { useCheckIfLicensePluginEnabled } from '../../hooks/useCheckIfLicensePluginEnabled.esm.js';
import { useLocationToast } from '../../hooks/useLocationToast.esm.js';
import { useRoles } from '../../hooks/useRoles.esm.js';
import { filterTableData } from '../../utils/filter-table-data.esm.js';
import DownloadCSVLink from '../DownloadUserStatistics.esm.js';
import { SnackbarAlert } from '../SnackbarAlert.esm.js';
import { useToast } from '../ToastContext.esm.js';
import DeleteRoleDialog from './DeleteRoleDialog.esm.js';
import { columns } from './RolesListColumns.esm.js';
import { RolesListToolbar } from './RolesListToolbar.esm.js';

const RolesList = () => {
  const { toastMessage, setToastMessage } = useToast();
  const { openDialog, setOpenDialog, deleteComponent } = useDeleteDialog();
  useLocationToast(setToastMessage);
  const [searchText, setSearchText] = React.useState();
  const { loading, data, retry, createRoleAllowed, createRoleLoading, error } = useRoles();
  const closeDialog = () => {
    setOpenDialog(false);
    retry.roleRetry();
    retry.policiesRetry();
  };
  const onAlertClose = () => {
    setToastMessage("");
  };
  const filteredRoles = React.useMemo(
    () => filterTableData({ data, columns, searchText }),
    [data, searchText]
  );
  const getErrorWarning = () => {
    const errorTitleBase = "Something went wrong while fetching the";
    const errorWarningArr = [
      { message: error?.rolesError, title: `${errorTitleBase} roles` },
      {
        message: error?.policiesError,
        title: `${errorTitleBase} permission policies`
      },
      {
        message: error?.roleConditionError,
        title: `${errorTitleBase} role conditions`
      }
    ];
    return errorWarningArr.find(({ message }) => message) || {
      message: "",
      title: ""
    };
  };
  const errorWarning = getErrorWarning();
  const isLicensePluginEnabled = useCheckIfLicensePluginEnabled();
  if (isLicensePluginEnabled.loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(SnackbarAlert, { toastMessage, onAlertClose }), /* @__PURE__ */ React.createElement(
    RolesListToolbar,
    {
      createRoleAllowed,
      createRoleLoading
    }
  ), errorWarning.message && /* @__PURE__ */ React.createElement("div", { style: { paddingBottom: "16px" } }, /* @__PURE__ */ React.createElement(
    WarningPanel,
    {
      message: errorWarning.message,
      title: errorWarning.title,
      severity: "error"
    }
  )), /* @__PURE__ */ React.createElement(
    Table,
    {
      title: !loading && data?.length ? `All roles (${filteredRoles.length})` : `All roles`,
      options: { padding: "default", search: true, paging: true },
      data,
      isLoading: loading,
      columns,
      emptyContent: /* @__PURE__ */ React.createElement(
        Box,
        {
          "data-testid": "roles-table-empty",
          sx: { display: "flex", justifyContent: "center", p: 2 }
        },
        "No records found"
      ),
      onSearchChange: setSearchText
    }
  ), isLicensePluginEnabled.isEnabled && /* @__PURE__ */ React.createElement(DownloadCSVLink, null), openDialog && /* @__PURE__ */ React.createElement(
    DeleteRoleDialog,
    {
      open: openDialog,
      closeDialog,
      roleName: deleteComponent.roleName,
      propOptions: {
        memberRefs: data.find((d) => d.name === deleteComponent.roleName)?.members || [],
        permissions: data.find((d) => d.name === deleteComponent.roleName)?.permissions || 0
      }
    }
  ));
};

export { RolesList };
//# sourceMappingURL=RolesList.esm.js.map
