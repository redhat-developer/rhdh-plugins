import React from 'react';
import { parseEntityRef } from '@backstage/catalog-model';
import { WarningPanel, Table } from '@backstage/core-components';
import { usePermission } from '@backstage/plugin-permission-react';
import CachedIcon from '@mui/icons-material/Cached';
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import { policyEntityUpdatePermission } from '@backstage-community/plugin-rbac-common';
import { filterTableData } from '../../utils/filter-table-data.esm.js';
import { getMembers } from '../../utils/rbac-utils.esm.js';
import EditRole from '../EditRole.esm.js';
import { columns } from './MembersListColumns.esm.js';

const getRefreshIcon = () => /* @__PURE__ */ React.createElement(CachedIcon, null);
const getEditIcon = (isAllowed, roleName) => {
  const { kind, name, namespace } = parseEntityRef(roleName);
  return /* @__PURE__ */ React.createElement(
    EditRole,
    {
      dataTestId: isAllowed ? "update-members" : "disable-update-members",
      roleName,
      disable: !isAllowed,
      to: `../../role/${kind}/${namespace}/${name}?activeStep=${1}`
    }
  );
};
const MembersCard = ({ roleName, membersInfo }) => {
  const { data, loading, retry, error, canReadUsersAndGroups } = membersInfo;
  const [searchText, setSearchText] = React.useState();
  const policyEntityPermissionResult = usePermission({
    permission: policyEntityUpdatePermission,
    resourceRef: policyEntityUpdatePermission.resourceType
  });
  const actions = [
    {
      icon: getRefreshIcon,
      tooltip: "Refresh",
      isFreeAction: true,
      onClick: () => {
        retry.roleRetry();
        retry.membersRetry();
      }
    },
    {
      icon: () => getEditIcon(
        policyEntityPermissionResult.allowed && canReadUsersAndGroups,
        roleName
      ),
      tooltip: policyEntityPermissionResult.allowed && canReadUsersAndGroups ? "Edit" : "Unauthorized to edit",
      isFreeAction: true,
      onClick: () => {
      }
    }
  ];
  const filteredData = React.useMemo(
    () => filterTableData({ data, columns, searchText }),
    [data, searchText]
  );
  return /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, null, !loading && error && /* @__PURE__ */ React.createElement("div", { style: { paddingBottom: "16px" } }, /* @__PURE__ */ React.createElement(
    WarningPanel,
    {
      message: error?.message || error?.name,
      title: "Something went wrong while fetching the users and groups",
      severity: "error"
    }
  )), /* @__PURE__ */ React.createElement(
    Table,
    {
      title: !loading && data?.length ? `Users and groups (${getMembers(filteredData)})` : "Users and groups",
      actions,
      options: { padding: "default", search: true, paging: true },
      data: data ?? [],
      isLoading: loading,
      columns,
      emptyContent: /* @__PURE__ */ React.createElement(
        Box,
        {
          "data-testid": "members-table-empty",
          sx: { display: "flex", justifyContent: "center", p: 2 }
        },
        "No records found"
      ),
      onSearchChange: setSearchText
    }
  )));
};

export { MembersCard };
//# sourceMappingURL=MembersCard.esm.js.map
