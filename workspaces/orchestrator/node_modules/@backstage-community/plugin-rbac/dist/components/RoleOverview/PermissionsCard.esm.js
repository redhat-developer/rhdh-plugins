import React from 'react';
import { parseEntityRef } from '@backstage/catalog-model';
import { WarningPanel, Table } from '@backstage/core-components';
import { usePermission } from '@backstage/plugin-permission-react';
import CachedIcon from '@mui/icons-material/Cached';
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import { policyEntityUpdatePermission } from '@backstage-community/plugin-rbac-common';
import { usePermissionPolicies } from '../../hooks/usePermissionPolicies.esm.js';
import { filterTableData } from '../../utils/filter-table-data.esm.js';
import EditRole from '../EditRole.esm.js';
import { columns } from './PermissionsListColumns.esm.js';

const getRefreshIcon = () => /* @__PURE__ */ React.createElement(CachedIcon, null);
const getEditIcon = (isAllowed, roleName) => {
  const { kind, name, namespace } = parseEntityRef(roleName);
  return /* @__PURE__ */ React.createElement(
    EditRole,
    {
      dataTestId: isAllowed ? "update-policies" : "disable-update-policies",
      roleName,
      disable: !isAllowed,
      to: `../../role/${kind}/${namespace}/${name}?activeStep=${2}`
    }
  );
};
const PermissionsCard = ({
  entityReference,
  canReadUsersAndGroups
}) => {
  const { data, loading, retry, error } = usePermissionPolicies(entityReference);
  const [searchText, setSearchText] = React.useState();
  const permissionResult = usePermission({
    permission: policyEntityUpdatePermission,
    resourceRef: policyEntityUpdatePermission.resourceType
  });
  const numberOfPolicies = React.useMemo(() => {
    const filteredPermissions = filterTableData({ data, columns, searchText });
    let policies = 0;
    filteredPermissions.forEach((p) => {
      if (p.conditions) {
        policies++;
        return;
      }
      policies += p.policies.filter((pol) => pol.effect === "allow").length;
    });
    return policies;
  }, [data, searchText]);
  const actions = [
    {
      icon: getRefreshIcon,
      tooltip: "Refresh",
      isFreeAction: true,
      onClick: () => {
        retry.permissionPoliciesRetry();
        retry.policiesRetry();
        retry.conditionalPoliciesRetry();
      }
    },
    {
      icon: () => getEditIcon(
        permissionResult.allowed && canReadUsersAndGroups,
        entityReference
      ),
      tooltip: permissionResult.allowed && canReadUsersAndGroups ? "Edit" : "Unauthorized to edit",
      isFreeAction: true,
      onClick: () => {
      }
    }
  ];
  return /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, null, error?.name && error.name !== 404 && /* @__PURE__ */ React.createElement("div", { style: { paddingBottom: "16px" } }, /* @__PURE__ */ React.createElement(
    WarningPanel,
    {
      message: error?.message,
      title: "Something went wrong while fetching the permission policies",
      severity: "error"
    }
  )), /* @__PURE__ */ React.createElement(
    Table,
    {
      title: !loading && data.length > 0 ? `Permission Policies (${numberOfPolicies})` : "Permission Policies",
      actions,
      options: { padding: "default", search: true, paging: true },
      data,
      columns,
      isLoading: loading,
      emptyContent: /* @__PURE__ */ React.createElement(
        Box,
        {
          "data-testid": "permission-table-empty",
          sx: { display: "flex", justifyContent: "center", p: 2 }
        },
        "No records found"
      ),
      onSearchChange: setSearchText
    }
  )));
};

export { PermissionsCard };
//# sourceMappingURL=PermissionsCard.esm.js.map
