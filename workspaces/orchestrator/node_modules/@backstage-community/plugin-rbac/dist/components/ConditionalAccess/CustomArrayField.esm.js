import React from 'react';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';
import { getDefaultRegistry } from '@rjsf/core';
import { getInnerSchemaForArrayItem } from '@rjsf/utils/lib/schema/getDefaultFormState';

const CustomArrayField = (props) => {
  const { name, required, schema: sch, formData, onChange } = props;
  const [fieldVal, setFieldVal] = React.useState(
    formData?.toString() ?? ""
  );
  const arrayItemsType = getInnerSchemaForArrayItem(sch).type;
  const DefaultArrayField = getDefaultRegistry().fields.ArrayField;
  return arrayItemsType === "string" ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    TextField,
    {
      name,
      variant: "outlined",
      label: name,
      value: fieldVal,
      onChange: (e) => {
        const value = e.target.value;
        setFieldVal(value);
        onChange(value ? value.split(",").map((val) => val.trim()) : []);
      },
      required,
      placeholder: "string, string"
    }
  ), /* @__PURE__ */ React.createElement(Typography, { variant: "caption" }, /* @__PURE__ */ React.createElement(
    Typography,
    {
      variant: "subtitle2",
      sx: {
        mt: 0.5,
        fontWeight: 500,
        color: (theme) => `${theme.palette.grey[500]}`
      }
    },
    sch.description ?? ""
  ))) : /* @__PURE__ */ React.createElement(DefaultArrayField, { ...props });
};

export { CustomArrayField };
//# sourceMappingURL=CustomArrayField.esm.js.map
