import React from 'react';
import WarningIcon from '@mui/icons-material/Warning';
import Alert from '@mui/material/Alert';
import AlertTitle from '@mui/material/AlertTitle';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import { initializeErrors, resetErrors, isSimpleRule, hasSimpleConditionOrNotErrors, hasNestedNotErrors, hasAllOfOrAnyOfErrors } from '../../utils/conditional-access-utils.esm.js';
import { ConditionsFormRow } from './ConditionsFormRow.esm.js';
import { criterias } from './const.esm.js';

const ConditionsForm = ({
  conditionRulesData,
  selPluginResourceType,
  conditionsFormVal,
  onClose,
  onSave
}) => {
  const [conditions, setConditions] = React.useState(
    conditionsFormVal ?? {
      condition: {
        rule: "",
        resourceType: selPluginResourceType,
        params: {}
      }
    }
  );
  const [criteria, setCriteria] = React.useState(
    Object.keys(conditions)[0] ?? criterias.condition
  );
  const [errors, setErrors] = React.useState(initializeErrors(criteria, conditions));
  const [removeAllClicked, setRemoveAllClicked] = React.useState(false);
  const flattenConditions = (conditionData) => {
    const flatConditions = [];
    const processCondition = (condition) => {
      if ("rule" in condition) {
        flatConditions.push(condition);
      } else {
        if (condition.allOf) {
          condition.allOf.forEach(processCondition);
        }
        if (condition.anyOf) {
          condition.anyOf.forEach(processCondition);
        }
        if (condition.not) {
          if ("rule" in condition.not) {
            flatConditions.push(condition.not);
          } else {
            processCondition(condition.not);
          }
        }
      }
    };
    conditionData.forEach(processCondition);
    return flatConditions;
  };
  const isNoRuleSelected = () => {
    switch (criteria) {
      case criterias.condition:
        return !conditions.condition?.rule;
      case criterias.not: {
        const flatConditions = flattenConditions([
          conditions.not
        ]);
        return flatConditions.some((c) => !c.rule);
      }
      case criterias.allOf: {
        const flatConditions = flattenConditions(conditions.allOf || []);
        return flatConditions.some((c) => !c.rule);
      }
      case criterias.anyOf: {
        const flatConditions = flattenConditions(conditions.anyOf || []);
        return flatConditions.some((c) => !c.rule);
      }
      default:
        return true;
    }
  };
  const hasAnyErrors = () => {
    if (!errors) return false;
    if (criteria === criterias.condition || criteria === criterias.not && isSimpleRule(conditions[criteria])) {
      return hasSimpleConditionOrNotErrors(errors, criteria);
    }
    if (criteria === criterias.not && !isSimpleRule(conditions[criteria])) {
      return hasNestedNotErrors(errors, conditions, criteria);
    }
    if (criteria === criterias.allOf || criteria === criterias.anyOf) {
      return hasAllOfOrAnyOfErrors(errors, criteria);
    }
    return false;
  };
  const isSaveDisabled = () => {
    if (removeAllClicked) return false;
    return hasAnyErrors() || isNoRuleSelected() || Object.is(conditionsFormVal, conditions);
  };
  const hasMultiLevelNestedConditions = () => {
    if (!Array.isArray(conditions[criteria])) {
      return false;
    }
    return conditions[criteria].filter((condition) => !("rule" in condition)).some((firstLevelNestedCondition) => {
      const nestedConditionCriteria = Object.keys(
        firstLevelNestedCondition
      )[0];
      if (Array.isArray(
        firstLevelNestedCondition[nestedConditionCriteria]
      )) {
        return firstLevelNestedCondition[nestedConditionCriteria].some((con) => !("rule" in con));
      }
      return !Object.keys(
        firstLevelNestedCondition[nestedConditionCriteria]
      ).includes("rule");
    });
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Box,
    {
      sx: {
        padding: (theme) => theme.spacing(2.5),
        paddingTop: 0,
        flexGrow: 1,
        overflow: "auto"
      }
    },
    /* @__PURE__ */ React.createElement(
      ConditionsFormRow,
      {
        conditionRulesData,
        conditionRow: conditions,
        criteria,
        selPluginResourceType,
        onRuleChange: (newCondition) => setConditions(newCondition),
        setCriteria,
        setErrors,
        setRemoveAllClicked
      }
    ),
    hasMultiLevelNestedConditions() && /* @__PURE__ */ React.createElement(
      Alert,
      {
        icon: /* @__PURE__ */ React.createElement(WarningIcon, null),
        style: { margin: "1.5rem 0 1rem 0" },
        severity: "warning",
        "data-testid": "multi-level-nested-conditions-warning"
      },
      /* @__PURE__ */ React.createElement(AlertTitle, { "data-testid": "multi-level-nested-conditions-warning-title" }, "Multiple levels of nested conditions are not supported"),
      "Only one level is displayed. Please use the CLI to view all nested conditions."
    )
  ), /* @__PURE__ */ React.createElement(
    Box,
    {
      sx: {
        display: "flex",
        flexDirection: "row",
        gap: "15px",
        alignItems: "baseline",
        borderTop: (theme) => `2px solid ${theme.palette.border}`,
        padding: (theme) => theme.spacing(2.5),
        "& button": {
          textTransform: "none"
        }
      }
    },
    /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "primary",
        "data-testid": "save-conditions",
        disabled: isSaveDisabled(),
        onClick: () => {
          if (removeAllClicked) {
            onSave(void 0);
          } else onSave(conditions);
        }
      },
      "Save"
    ),
    /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outlined",
        color: "primary",
        onClick: onClose,
        "data-testid": "cancel-conditions"
      },
      "Cancel"
    ),
    /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "text",
        color: "primary",
        disabled: removeAllClicked || isNoRuleSelected(),
        onClick: () => {
          setRemoveAllClicked(true);
          setCriteria(criterias.condition);
          setConditions({
            condition: {
              rule: "",
              resourceType: selPluginResourceType,
              params: {}
            }
          });
          setErrors(resetErrors(criterias.condition));
        },
        "data-testid": "remove-conditions"
      },
      "Remove all"
    )
  ));
};

export { ConditionsForm };
//# sourceMappingURL=ConditionsForm.esm.js.map
