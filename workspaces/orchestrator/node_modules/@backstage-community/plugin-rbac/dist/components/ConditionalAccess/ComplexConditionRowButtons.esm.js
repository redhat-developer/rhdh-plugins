import React from 'react';
import AddIcon from '@mui/icons-material/Add';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Tooltip from '@mui/material/Tooltip';
import { getDefaultRule } from '../../utils/conditional-access-utils.esm.js';
import { tooltipTitle } from './AddNestedConditionButton.esm.js';
import { criterias } from './const.esm.js';

const ComplexConditionRowButtons = ({
  conditionRow,
  onRuleChange,
  criteria,
  selPluginResourceType,
  updateErrors,
  isNestedConditionRule,
  handleAddNestedCondition
}) => {
  const findFirstNestedConditionIndex = (rules) => {
    return rules.findIndex((e) => isNestedConditionRule(e)) || 0;
  };
  const handleAddRule = () => {
    const updatedRules = [
      ...conditionRow.allOf ?? [],
      ...conditionRow.anyOf ?? []
    ];
    const firstNestedConditionIndex = findFirstNestedConditionIndex(updatedRules);
    if (firstNestedConditionIndex !== -1) {
      updatedRules.splice(
        firstNestedConditionIndex,
        0,
        getDefaultRule(selPluginResourceType)
      );
    } else {
      updatedRules.push(getDefaultRule(selPluginResourceType));
    }
    onRuleChange({ [criteria]: [...updatedRules] });
    updateErrors(firstNestedConditionIndex);
  };
  return (criteria === criterias.allOf || criteria === criterias.anyOf) && /* @__PURE__ */ React.createElement(
    Box,
    {
      mt: 1,
      mb: 1,
      sx: {
        display: "flex",
        flexDirection: "column",
        alignItems: "flex-start"
      }
    },
    /* @__PURE__ */ React.createElement(
      Button,
      {
        sx: {
          color: (theme) => theme.palette.primary.light
        },
        size: "small",
        onClick: handleAddRule,
        startIcon: /* @__PURE__ */ React.createElement(AddIcon, { fontSize: "small" })
      },
      "Add rule"
    ),
    /* @__PURE__ */ React.createElement(
      Button,
      {
        sx: {
          color: (theme) => theme.palette.primary.light
        },
        size: "small",
        onClick: () => handleAddNestedCondition(criteria),
        startIcon: /* @__PURE__ */ React.createElement(AddIcon, { fontSize: "small" }),
        endIcon: /* @__PURE__ */ React.createElement(Tooltip, { title: tooltipTitle(), placement: "top" }, /* @__PURE__ */ React.createElement(
          HelpOutlineIcon,
          {
            fontSize: "small",
            style: { marginLeft: "0.25rem" }
          }
        ))
      },
      "Add Nested Condition"
    )
  );
};

export { ComplexConditionRowButtons };
//# sourceMappingURL=ComplexConditionRowButtons.esm.js.map
