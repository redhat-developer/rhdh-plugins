{"version":3,"file":"ConditionRule.esm.js","sources":["../../../src/components/ConditionalAccess/ConditionRule.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\n\nimport {\n  getDefaultRule,\n  ruleOptionDisabled,\n} from '../../utils/conditional-access-utils';\nimport { ConditionsFormRowFields } from './ConditionsFormRowFields';\nimport { criterias } from './const';\nimport { AccessConditionsErrors, ConditionsData, RulesData } from './types';\n\ntype ConditionRuleProps = {\n  conditionRow: ConditionsData;\n  selPluginResourceType: string;\n  onRuleChange: (newCondition: ConditionsData) => void;\n  criteria: string;\n  conditionRulesData?: RulesData;\n  setErrors: React.Dispatch<\n    React.SetStateAction<AccessConditionsErrors | undefined>\n  >;\n  setRemoveAllClicked: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const ConditionRule = ({\n  conditionRow,\n  selPluginResourceType,\n  onRuleChange,\n  criteria,\n  conditionRulesData,\n  setErrors,\n  setRemoveAllClicked,\n}: ConditionRuleProps) => {\n  return (\n    criteria === criterias.condition && (\n      <ConditionsFormRowFields\n        oldCondition={\n          conditionRow.condition ?? getDefaultRule(selPluginResourceType)\n        }\n        onRuleChange={onRuleChange}\n        conditionRow={conditionRow}\n        criteria={criteria}\n        conditionRulesData={conditionRulesData}\n        setErrors={setErrors}\n        optionDisabled={ruleOption =>\n          ruleOptionDisabled(\n            ruleOption,\n            conditionRow.condition ? [conditionRow.condition] : undefined,\n          )\n        }\n        setRemoveAllClicked={setRemoveAllClicked}\n      />\n    )\n  );\n};\n"],"names":[],"mappings":";;;;;AAqCO,MAAM,gBAAgB,CAAC;AAAA,EAC5B,YAAA;AAAA,EACA,qBAAA;AAAA,EACA,YAAA;AAAA,EACA,QAAA;AAAA,EACA,kBAAA;AAAA,EACA,SAAA;AAAA,EACA;AACF,CAA0B,KAAA;AACxB,EACE,OAAA,QAAA,KAAa,UAAU,SACrB,oBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,uBAAA;AAAA,IAAA;AAAA,MACC,YACE,EAAA,YAAA,CAAa,SAAa,IAAA,cAAA,CAAe,qBAAqB,CAAA;AAAA,MAEhE,YAAA;AAAA,MACA,YAAA;AAAA,MACA,QAAA;AAAA,MACA,kBAAA;AAAA,MACA,SAAA;AAAA,MACA,gBAAgB,CACd,UAAA,KAAA,kBAAA;AAAA,QACE,UAAA;AAAA,QACA,YAAa,CAAA,SAAA,GAAY,CAAC,YAAA,CAAa,SAAS,CAAI,GAAA,KAAA;AAAA,OACtD;AAAA,MAEF;AAAA;AAAA,GACF;AAGN;;;;"}