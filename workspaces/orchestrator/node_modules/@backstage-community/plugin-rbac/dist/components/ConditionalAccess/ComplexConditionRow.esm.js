import React from 'react';
import RemoveIcon from '@mui/icons-material/Remove';
import IconButton from '@mui/material/IconButton';
import { isSimpleRule, getRowStyle, getRowKey, getSimpleRuleErrors, getNestedRuleErrors } from '../../utils/conditional-access-utils.esm.js';
import { ConditionsFormRowFields } from './ConditionsFormRowFields.esm.js';
import { criterias } from './const.esm.js';

const ComplexConditionRow = ({
  conditionRow,
  nestedConditionRow,
  criteria,
  onRuleChange,
  updateRules,
  setErrors,
  setRemoveAllClicked,
  conditionRulesData,
  notConditionType,
  currentCondition,
  ruleIndex,
  activeCriteria,
  isNestedCondition = false,
  nestedConditionIndex,
  activeNestedCriteria
}) => {
  const handleRemoveSimpleConditionRule = (index, ruleList2) => {
    if (!activeCriteria) {
      return;
    }
    const updatedSimpleRules = ruleList2.filter(
      (_r, rindex) => index !== rindex
    );
    const nestedConditions = conditionRow[criteria]?.filter(
      (con) => criterias.allOf in con || criterias.anyOf in con || criterias.not in con
    ) || [];
    onRuleChange({
      [activeCriteria]: [
        ...updatedSimpleRules,
        ...nestedConditions
      ]
    });
    setErrors((prevErrors) => {
      const updatedErrors = { ...prevErrors };
      if (updatedErrors[activeCriteria]) {
        const criteriaErrors = updatedErrors[activeCriteria];
        const simpleRuleErrors = getSimpleRuleErrors(criteriaErrors);
        if (Array.isArray(simpleRuleErrors) && simpleRuleErrors.length > 0) {
          const updatedCriteriaErrors = [
            ...simpleRuleErrors.filter((_, rindex) => rindex !== index),
            ...getNestedRuleErrors(criteriaErrors)
          ];
          updatedErrors[activeCriteria] = updatedCriteriaErrors.length > 0 ? updatedCriteriaErrors : [];
        } else {
          delete updatedErrors[activeCriteria];
        }
      }
      return updatedErrors;
    });
  };
  const handleRemoveNestedConditionRule = (nestedConditionCriteria) => {
    const updatedNestedConditionRow = [];
    nestedConditionRow.forEach((c, index) => {
      if (index === nestedConditionIndex) {
        const updatedRules = (c[nestedConditionCriteria] || []).filter((_r, rindex) => rindex !== ruleIndex);
        updatedNestedConditionRow.push({
          [nestedConditionCriteria]: updatedRules
        });
      } else {
        updatedNestedConditionRow.push(c);
      }
    });
    updateRules(
      criteria === criterias.not ? updatedNestedConditionRow[0] : updatedNestedConditionRow
    );
    setErrors((prevErrors) => {
      const updatedErrors = { ...prevErrors };
      if (updatedErrors[criteria] !== void 0) {
        const criteriaErrors = updatedErrors[criteria];
        if (criteria === criterias.not && notConditionType === "nested-condition") {
          updatedErrors[criteria][nestedConditionCriteria].splice(ruleIndex, 1);
          return updatedErrors;
        }
        const nestedConditionErrors = getNestedRuleErrors(criteriaErrors);
        if (Array.isArray(nestedConditionErrors) && nestedConditionIndex !== void 0) {
          const nestedErrors = nestedConditionErrors[nestedConditionIndex];
          if (nestedErrors[nestedConditionCriteria]) {
            const updatedNestedErrors = nestedErrors[nestedConditionCriteria].filter((_error, index) => index !== ruleIndex);
            if (updatedNestedErrors.length > 0) {
              nestedErrors[nestedConditionCriteria] = updatedNestedErrors;
            } else {
              delete nestedErrors[nestedConditionCriteria];
            }
            nestedConditionErrors[nestedConditionIndex] = nestedErrors;
          }
          updatedErrors[criteria] = [
            ...getSimpleRuleErrors(criteriaErrors),
            ...nestedConditionErrors
          ];
        }
      }
      return updatedErrors;
    });
  };
  const ruleList = isNestedCondition ? currentCondition[activeCriteria] : conditionRow[activeCriteria].filter(
    (r) => isSimpleRule(r)
  );
  const disabled = !isNestedCondition && conditionRow[criteria].length === 1 && nestedConditionRow.length === 0 && ruleIndex === 0;
  const nestedDisabled = isNestedCondition && nestedConditionRow[nestedConditionIndex ?? 0][activeNestedCriteria].length === 1 && ruleIndex === 0;
  return currentCondition.resourceType && /* @__PURE__ */ React.createElement(
    "div",
    {
      style: getRowStyle(currentCondition, isNestedCondition),
      key: getRowKey(isNestedCondition, ruleIndex)
    },
    /* @__PURE__ */ React.createElement(
      ConditionsFormRowFields,
      {
        oldCondition: currentCondition,
        index: isNestedCondition ? void 0 : ruleIndex,
        onRuleChange,
        conditionRow,
        criteria,
        conditionRulesData,
        setErrors,
        setRemoveAllClicked,
        nestedConditionRow: isNestedCondition ? nestedConditionRow : void 0,
        nestedConditionCriteria: isNestedCondition ? activeNestedCriteria : void 0,
        nestedConditionIndex: isNestedCondition ? nestedConditionIndex : void 0,
        nestedConditionRuleIndex: isNestedCondition ? ruleIndex : void 0,
        updateRules: isNestedCondition ? updateRules : void 0
      }
    ),
    /* @__PURE__ */ React.createElement(
      IconButton,
      {
        title: "Remove",
        sx: {
          color: (theme) => theme.palette.grey[500],
          flexGrow: 0,
          alignSelf: "baseline",
          marginTop: (theme) => theme.spacing(3.3)
        },
        disabled: isNestedCondition ? nestedDisabled : disabled,
        onClick: isNestedCondition && activeNestedCriteria && nestedConditionIndex !== void 0 ? () => handleRemoveNestedConditionRule(activeNestedCriteria) : () => {
          handleRemoveSimpleConditionRule(ruleIndex, ruleList);
        }
      },
      /* @__PURE__ */ React.createElement(RemoveIcon, null)
    )
  );
};

export { ComplexConditionRow };
//# sourceMappingURL=ComplexConditionRow.esm.js.map
