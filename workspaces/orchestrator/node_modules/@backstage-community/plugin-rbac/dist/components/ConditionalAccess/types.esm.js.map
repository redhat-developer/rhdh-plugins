{"version":3,"file":"types.esm.js","sources":["../../../src/components/ConditionalAccess/types.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PermissionCondition } from '@backstage/plugin-permission-common';\n\nexport type RulesData = {\n  rules: string[];\n  [rule: string]: {\n    [key: string]: any;\n  };\n};\n\nexport type ResourceTypeRuleData = {\n  [resourceType: string]: RulesData;\n};\n\nexport type ConditionRulesData = {\n  [plugin: string]: ResourceTypeRuleData;\n};\n\nexport type ConditionRules = {\n  data?: ConditionRulesData;\n  error?: Error;\n};\n\nexport type ConditionsData = {\n  allOf?: Condition[];\n  anyOf?: Condition[];\n  not?: Condition;\n  condition?: PermissionCondition;\n};\n\nexport type Condition = PermissionCondition | ConditionsData;\n\nexport type ComplexErrors = string | NestedCriteriaErrors;\n\nexport type NestedCriteriaErrors = {\n  [nestedCriteria: string]: string[] | string;\n};\n\nexport type AccessConditionsErrors = {\n  [criteria: string]: ComplexErrors[] | NestedCriteriaErrors | string;\n};\n\nexport type ConditionFormRowProps = {\n  conditionRulesData?: RulesData;\n  conditionRow: ConditionsData;\n  onRuleChange: (newCondition: ConditionsData) => void;\n  selPluginResourceType: string;\n  criteria: keyof ConditionsData;\n  setCriteria: React.Dispatch<React.SetStateAction<keyof ConditionsData>>;\n  setErrors: React.Dispatch<\n    React.SetStateAction<AccessConditionsErrors | undefined>\n  >;\n  setRemoveAllClicked: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport enum NotConditionType {\n  SimpleCondition = 'simple-condition',\n  NestedCondition = 'nested-condition',\n}\n"],"names":["NotConditionType"],"mappings":"AAqEY,IAAA,gBAAA,qBAAAA,iBAAL,KAAA;AACL,EAAAA,kBAAA,iBAAkB,CAAA,GAAA,kBAAA;AAClB,EAAAA,kBAAA,iBAAkB,CAAA,GAAA,kBAAA;AAFR,EAAAA,OAAAA,iBAAAA;AAAA,CAAA,EAAA,gBAAA,IAAA,EAAA;;;;"}