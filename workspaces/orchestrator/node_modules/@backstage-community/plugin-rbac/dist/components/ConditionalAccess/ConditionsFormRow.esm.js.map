{"version":3,"file":"ConditionsFormRow.esm.js","sources":["../../../src/components/ConditionalAccess/ConditionsFormRow.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\n\nimport { PermissionCondition } from '@backstage/plugin-permission-common';\n\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport IconButton from '@mui/material/IconButton';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport { useTheme } from '@mui/material/styles';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nimport {\n  extractNestedConditions,\n  getDefaultRule,\n  getNestedConditionSimpleRulesCount,\n  getSimpleRulesCount,\n  isNestedConditionRule,\n  isSimpleRule,\n  nestedConditionButtons,\n  resetErrors,\n  ruleOptionDisabled,\n} from '../../utils/conditional-access-utils';\nimport { AddNestedConditionButton } from './AddNestedConditionButton';\nimport { ComplexConditionRow } from './ComplexConditionRow';\nimport { ComplexConditionRowButtons } from './ComplexConditionRowButtons';\nimport { ConditionRule } from './ConditionRule';\nimport { ConditionsFormRowFields } from './ConditionsFormRowFields';\nimport { conditionButtons, criterias } from './const';\nimport { CriteriaToggleButton } from './CriteriaToggleButton';\nimport {\n  ComplexErrors,\n  Condition,\n  ConditionFormRowProps,\n  ConditionsData,\n  NestedCriteriaErrors,\n  NotConditionType,\n} from './types';\n\nexport const ConditionsFormRow = ({\n  conditionRulesData,\n  conditionRow,\n  selPluginResourceType,\n  criteria,\n  onRuleChange,\n  setCriteria,\n  setErrors,\n  setRemoveAllClicked,\n}: ConditionFormRowProps) => {\n  const theme = useTheme();\n  const [nestedConditionRow, setNestedConditionRow] = React.useState<\n    Condition[]\n  >([]);\n  const [notConditionType, setNotConditionType] =\n    React.useState<NotConditionType>(NotConditionType.SimpleCondition);\n\n  React.useEffect(() => {\n    const nestedConditions: Condition[] = [];\n    const criteriaTypes = [criterias.allOf, criterias.anyOf, criterias.not];\n    switch (criteria) {\n      case criterias.allOf:\n        extractNestedConditions(\n          conditionRow.allOf || [],\n          criteriaTypes,\n          nestedConditions,\n        );\n        break;\n      case criterias.anyOf:\n        extractNestedConditions(\n          conditionRow.anyOf || [],\n          criteriaTypes,\n          nestedConditions,\n        );\n        break;\n      case criterias.not:\n        if (\n          conditionRow.not &&\n          criteriaTypes.includes(\n            Object.keys(conditionRow.not)[0] as keyof ConditionsData,\n          )\n        ) {\n          nestedConditions.push(conditionRow.not);\n          setNotConditionType(NotConditionType.NestedCondition);\n        }\n        break;\n      default:\n        break;\n    }\n\n    setNestedConditionRow(nestedConditions);\n  }, [conditionRow, criteria]);\n\n  const handleCriteriaChange = (val: keyof ConditionsData) => {\n    setCriteria(val);\n    setErrors(resetErrors(val));\n\n    const defaultRule = getDefaultRule(selPluginResourceType);\n\n    const ruleMap = {\n      [criterias.condition]: { condition: defaultRule },\n      [criterias.allOf]: { allOf: [defaultRule] },\n      [criterias.anyOf]: { anyOf: [defaultRule] },\n      [criterias.not]: { not: defaultRule },\n    };\n\n    if (val === criterias.not) {\n      setNotConditionType(NotConditionType.SimpleCondition);\n    }\n\n    const ruleChange = ruleMap[val];\n    if (ruleChange) {\n      onRuleChange(ruleChange);\n    }\n  };\n\n  const updateRules = (updatedNestedConditionRow: Condition[] | Condition) => {\n    const existingSimpleCondition =\n      criteria !== criterias.not\n        ? (conditionRow[criteria as keyof Condition] as Condition[])?.filter(\n            con => isSimpleRule(con),\n          ) || []\n        : [];\n\n    const newCondition: Condition[] = Array.isArray(updatedNestedConditionRow)\n      ? [...existingSimpleCondition, ...updatedNestedConditionRow]\n      : [...existingSimpleCondition, updatedNestedConditionRow];\n\n    if (criteria === criterias.anyOf || criteria === criterias.allOf) {\n      onRuleChange({\n        [criteria]: newCondition,\n      });\n    } else if (\n      criteria === criterias.not &&\n      !Array.isArray(updatedNestedConditionRow)\n    ) {\n      onRuleChange({\n        not: updatedNestedConditionRow,\n      });\n    }\n  };\n\n  const handleNestedConditionCriteriaChange = (\n    val: string,\n    nestedConditionIndex: number,\n  ) => {\n    const defaultRule = getDefaultRule(selPluginResourceType);\n\n    const nestedConditionMap = {\n      [criterias.not]: { [val]: defaultRule },\n      [criterias.allOf]: { [val]: [defaultRule] },\n      [criterias.anyOf]: { [val]: [defaultRule] },\n      [criterias.condition]: { [val]: [defaultRule] },\n    };\n\n    const newCondition = nestedConditionMap[val] || { [val]: [defaultRule] };\n\n    setErrors(prevErrors => {\n      const updatedErrors = { ...prevErrors };\n\n      if (updatedErrors[criteria] !== undefined) {\n        if (criteria === criterias.not) {\n          (updatedErrors[criteria] as ComplexErrors) =\n            val !== criterias.not ? { [val]: [''] } : { [val]: '' };\n          return updatedErrors;\n        }\n        const criteriaErrors = updatedErrors[criteria];\n        const simpleRuleErrors = (criteriaErrors as ComplexErrors[]).filter(\n          (err: ComplexErrors) => typeof err === 'string',\n        );\n        const nestedConditionErrors = (\n          criteriaErrors as ComplexErrors[]\n        ).filter((err: ComplexErrors) => typeof err !== 'string');\n        nestedConditionErrors[nestedConditionIndex] =\n          val !== criterias.not ? { [val]: [''] } : { [val]: '' };\n        updatedErrors[criteria] = [\n          ...simpleRuleErrors,\n          ...nestedConditionErrors,\n        ];\n      }\n\n      return updatedErrors;\n    });\n\n    if (criteria === criterias.not) {\n      updateRules(newCondition);\n    } else {\n      const updatedNestedConditionRow = nestedConditionRow.map((c, index) => {\n        if (index === nestedConditionIndex) {\n          return newCondition;\n        }\n        return c;\n      });\n      updateRules(updatedNestedConditionRow);\n    }\n  };\n\n  const handleAddNestedCondition = (currentCriteria: string) => {\n    const newNestedCondition = {\n      [criterias.allOf]: [getDefaultRule(selPluginResourceType)],\n    };\n    const updatedNestedConditionRow = [\n      ...nestedConditionRow,\n      newNestedCondition,\n    ];\n    updateRules(\n      currentCriteria === criterias.not\n        ? newNestedCondition\n        : updatedNestedConditionRow,\n    );\n\n    setErrors(prevErrors => {\n      const updatedErrors = { ...prevErrors };\n      if (updatedErrors[currentCriteria]) {\n        const criteriaErrors = updatedErrors[\n          currentCriteria\n        ] as ComplexErrors[];\n        if (Array.isArray(criteriaErrors)) {\n          criteriaErrors.push({ [criterias.allOf]: [''] });\n        } else {\n          (updatedErrors[currentCriteria] as ComplexErrors) = {\n            [criterias.allOf]: [''],\n          };\n        }\n      }\n      return updatedErrors;\n    });\n  };\n\n  const handleNotConditionTypeChange = (val: NotConditionType) => {\n    setNotConditionType(val);\n    setErrors(resetErrors(criteria, val));\n    if (val === 'nested-condition') {\n      handleAddNestedCondition(criterias.not);\n    } else {\n      onRuleChange({\n        not: getDefaultRule(selPluginResourceType),\n      });\n    }\n  };\n\n  const handleAddRuleInNestedCondition = (\n    nestedConditionCriteria: string,\n    nestedConditionIndex: number,\n  ) => {\n    const updatedNestedConditionRow: Condition[] = [];\n\n    nestedConditionRow.forEach((c, index) => {\n      if (index === nestedConditionIndex) {\n        updatedNestedConditionRow.push({\n          [nestedConditionCriteria as keyof Condition]: [\n            ...((c[\n              nestedConditionCriteria as keyof Condition\n            ] as PermissionCondition[]) || []),\n            getDefaultRule(selPluginResourceType),\n          ],\n        });\n      } else {\n        updatedNestedConditionRow.push(c);\n      }\n    });\n    updateRules(\n      criteria === criterias.not\n        ? updatedNestedConditionRow[0]\n        : updatedNestedConditionRow,\n    );\n\n    setErrors(prevErrors => {\n      const updatedErrors = { ...prevErrors };\n      if (updatedErrors[criteria] !== undefined) {\n        const criteriaErrors = updatedErrors[criteria];\n        if (\n          criteria === criterias.not &&\n          notConditionType === 'nested-condition'\n        ) {\n          (\n            (criteriaErrors as NestedCriteriaErrors)[\n              nestedConditionCriteria\n            ] as string[]\n          ).push('');\n          return updatedErrors;\n        }\n        const simpleRuleErrors = (criteriaErrors as ComplexErrors[]).filter(\n          (err: ComplexErrors) => typeof err === 'string',\n        );\n        const nestedConditionErrors = (\n          criteriaErrors as ComplexErrors[]\n        ).filter((err: ComplexErrors) => typeof err !== 'string');\n\n        (\n          ((\n            nestedConditionErrors[nestedConditionIndex] as NestedCriteriaErrors\n          )[nestedConditionCriteria] as string[]) || []\n        ).push('');\n        updatedErrors[criteria] = [\n          ...simpleRuleErrors,\n          ...nestedConditionErrors,\n        ];\n      }\n      return updatedErrors;\n    });\n  };\n\n  const handleRemoveNestedCondition = (nestedConditionIndex: number) => {\n    const updatedNestedConditionRow = nestedConditionRow.filter(\n      (_, index) => index !== nestedConditionIndex,\n    );\n\n    updateRules(updatedNestedConditionRow);\n    setErrors(prevErrors => {\n      const updatedErrors = { ...prevErrors };\n\n      if (updatedErrors[criteria] !== undefined) {\n        const criteriaErrors = updatedErrors[criteria] as ComplexErrors[];\n        const simpleRuleErrors = criteriaErrors.filter(\n          (err: ComplexErrors) => typeof err === 'string',\n        );\n        const nestedConditionErrors = criteriaErrors.filter(\n          (err: ComplexErrors) => typeof err !== 'string',\n        );\n        nestedConditionErrors.splice(nestedConditionIndex, 1);\n\n        updatedErrors[criteria] = [\n          ...simpleRuleErrors,\n          ...nestedConditionErrors,\n        ];\n      }\n\n      return updatedErrors;\n    });\n  };\n\n  const updateErrors = (_index: number) => {\n    setErrors(prevErrors => {\n      const updatedErrors = { ...prevErrors };\n\n      if (!Array.isArray(updatedErrors[criteria])) {\n        updatedErrors[criteria] = [];\n      }\n\n      const firstNestedConditionErrorIndex =\n        (updatedErrors[criteria] as ComplexErrors[]).findIndex(\n          e => typeof e !== 'string',\n        ) || 0;\n\n      (updatedErrors[criteria] as ComplexErrors[]).splice(\n        firstNestedConditionErrorIndex,\n        0,\n        '',\n      );\n\n      return updatedErrors;\n    });\n  };\n\n  const renderNestedConditionRow = (\n    nc: Condition,\n    nestedConditionIndex: number,\n  ) => {\n    const selectedNestedConditionCriteria = Object.keys(nc)[0];\n    const simpleRulesCount = getSimpleRulesCount(conditionRow, criteria);\n    const nestedConditionsCount = nestedConditionRow.length;\n    const nestedConditionSimpleRulesCount = getNestedConditionSimpleRulesCount(\n      nc,\n      selectedNestedConditionCriteria,\n    );\n    return (\n      nestedConditionSimpleRulesCount > 0 && (\n        <Box\n          mt={2}\n          key={`nestedCondition-${nestedConditionIndex}`}\n          sx={{\n            padding: '20px',\n            marginLeft: theme.spacing(3),\n            border: `1px solid ${theme.palette.border}`,\n            borderRadius: '4px',\n            backgroundColor: theme.palette.background.default,\n            '& input': {\n              backgroundColor: `${theme.palette.background.paper}!important`,\n            },\n          }}\n        >\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <ToggleButtonGroup\n              exclusive\n              value={selectedNestedConditionCriteria}\n              onChange={(_event, newNestedCriteria) =>\n                handleNestedConditionCriteriaChange(\n                  newNestedCriteria,\n                  nestedConditionIndex,\n                )\n              }\n              sx={{\n                backgroundColor: theme.palette.background.paper,\n                width: '60%',\n                height: '100%',\n              }}\n            >\n              {nestedConditionButtons.map(({ val, label }) => (\n                <CriteriaToggleButton\n                  key={`nested-criteria-${val}`}\n                  val={val}\n                  label={label}\n                  selectedCriteria={selectedNestedConditionCriteria}\n                  theme={theme}\n                />\n              ))}\n            </ToggleButtonGroup>\n            {criteria !== criterias.not && (\n              <IconButton\n                title=\"Remove nested condition\"\n                sx={{\n                  color: theme.palette.grey[500],\n                  flexGrow: 0,\n                  alignSelf: 'baseline',\n                }}\n                disabled={simpleRulesCount === 0 && nestedConditionsCount === 1} // 0 simple rules and this is the only 1 nested condition\n                onClick={() =>\n                  handleRemoveNestedCondition(nestedConditionIndex)\n                }\n              >\n                <RemoveIcon data-testid=\"remove-nested-condition\" />\n              </IconButton>\n            )}\n          </div>\n          <Box>\n            {selectedNestedConditionCriteria !== criterias.not &&\n              (\n                nc[\n                  selectedNestedConditionCriteria as keyof Condition\n                ] as PermissionCondition[]\n              ).map((c, ncrIndex) => (\n                <ComplexConditionRow\n                  key={`nested-condition-${nestedConditionIndex}-${ncrIndex}`}\n                  conditionRow={conditionRow}\n                  nestedConditionRow={nestedConditionRow}\n                  criteria={criteria}\n                  onRuleChange={onRuleChange}\n                  updateRules={updateRules}\n                  setErrors={setErrors}\n                  setRemoveAllClicked={setRemoveAllClicked}\n                  conditionRulesData={conditionRulesData}\n                  notConditionType={notConditionType}\n                  currentCondition={c}\n                  ruleIndex={ncrIndex}\n                  isNestedCondition\n                  nestedConditionIndex={nestedConditionIndex}\n                  activeNestedCriteria={\n                    selectedNestedConditionCriteria as 'allOf' | 'anyOf'\n                  }\n                />\n              ))}\n            {selectedNestedConditionCriteria === criterias.not &&\n              ((nc as ConditionsData).not as PermissionCondition)\n                .resourceType && (\n                <ConditionsFormRowFields\n                  oldCondition={\n                    (nc as ConditionsData).not ??\n                    getDefaultRule(selPluginResourceType)\n                  }\n                  onRuleChange={onRuleChange}\n                  conditionRow={conditionRow}\n                  criteria={criteria}\n                  conditionRulesData={conditionRulesData}\n                  setErrors={setErrors}\n                  optionDisabled={ruleOption =>\n                    ruleOptionDisabled(\n                      ruleOption,\n                      (nc as ConditionsData).not\n                        ? [(nc as ConditionsData).not as PermissionCondition]\n                        : undefined,\n                    )\n                  }\n                  setRemoveAllClicked={setRemoveAllClicked}\n                  nestedConditionRow={nestedConditionRow}\n                  nestedConditionCriteria={selectedNestedConditionCriteria}\n                  nestedConditionIndex={nestedConditionIndex}\n                  updateRules={updateRules}\n                />\n              )}\n            {selectedNestedConditionCriteria !== criterias.not && (\n              <Button\n                sx={{\n                  mt: 1,\n                  color: theme.palette.primary.light,\n                }}\n                size=\"small\"\n                onClick={() =>\n                  handleAddRuleInNestedCondition(\n                    selectedNestedConditionCriteria,\n                    nestedConditionIndex,\n                  )\n                }\n                startIcon={<AddIcon fontSize=\"small\" />}\n              >\n                Add rule\n              </Button>\n            )}\n          </Box>\n        </Box>\n      )\n    );\n  };\n\n  return (\n    <Box\n      sx={{\n        padding: '20px',\n        border: `1px solid ${theme.palette.border}`,\n        borderRadius: '4px',\n        backgroundColor: theme.palette.background.default,\n        '& input': {\n          color: `${theme.palette.textContrast}!important`,\n          '&:-internal-autofill-selected, &:-webkit-autofill, &:-webkit-autofill:hover, &:-webkit-autofill:focus, &:-webkit-autofill:active':\n            {\n              WebkitBoxShadow: `0 0 0px 1000px ${theme.palette.background.paper} inset`,\n              WebkitTextFillColor: `${theme.palette.textContrast}!important`,\n              caretColor: `${theme.palette.textContrast}!important`,\n            },\n        },\n        '& button': {\n          textTransform: 'none',\n        },\n      }}\n      data-testid=\"conditions-row\"\n    >\n      <ToggleButtonGroup\n        exclusive\n        value={criteria}\n        onChange={(_event, newCriteria) => handleCriteriaChange(newCriteria)}\n        sx={{\n          backgroundColor: theme.palette.background.paper,\n          width: '80%',\n        }}\n      >\n        {conditionButtons.map(({ val, label }) => (\n          <CriteriaToggleButton\n            key={`criteria-${val}`}\n            val={val}\n            label={label}\n            selectedCriteria={criteria}\n            theme={theme}\n          />\n        ))}\n      </ToggleButtonGroup>\n      <ConditionRule\n        conditionRow={conditionRow}\n        selPluginResourceType={selPluginResourceType}\n        onRuleChange={onRuleChange}\n        criteria={criteria}\n        conditionRulesData={conditionRulesData}\n        setErrors={setErrors}\n        setRemoveAllClicked={setRemoveAllClicked}\n      />\n      {criteria !== criterias.condition && (\n        <Box>\n          {criteria !== criterias.not &&\n            (conditionRow[criteria] as PermissionCondition[])?.map(\n              (c, srIndex) => (\n                <ComplexConditionRow\n                  key={`${criteria}-simple-condition-${srIndex}`}\n                  conditionRow={conditionRow}\n                  nestedConditionRow={nestedConditionRow}\n                  criteria={criteria}\n                  onRuleChange={onRuleChange}\n                  updateRules={updateRules}\n                  setErrors={setErrors}\n                  setRemoveAllClicked={setRemoveAllClicked}\n                  conditionRulesData={conditionRulesData}\n                  notConditionType={notConditionType}\n                  currentCondition={c}\n                  ruleIndex={srIndex}\n                  activeCriteria={criteria as 'allOf' | 'anyOf'}\n                />\n              ),\n            )}\n          {criteria === criterias.not && (\n            <RadioGroup\n              sx={{\n                margin: theme.spacing(1),\n              }}\n              value={notConditionType}\n              onChange={(_event, value) =>\n                handleNotConditionTypeChange(value as NotConditionType)\n              }\n            >\n              <FormControlLabel\n                value={NotConditionType.SimpleCondition}\n                control={<Radio color=\"primary\" />}\n                label=\"Add rule\"\n                sx={{\n                  marginTop: theme.spacing(1),\n                }}\n              />\n              {notConditionType === NotConditionType.SimpleCondition && (\n                <ConditionsFormRowFields\n                  oldCondition={\n                    conditionRow.not ?? getDefaultRule(selPluginResourceType)\n                  }\n                  onRuleChange={onRuleChange}\n                  conditionRow={conditionRow}\n                  criteria={criteria}\n                  conditionRulesData={conditionRulesData}\n                  setErrors={setErrors}\n                  optionDisabled={ruleOption =>\n                    ruleOptionDisabled(\n                      ruleOption,\n                      conditionRow.not\n                        ? [conditionRow.not as PermissionCondition]\n                        : undefined,\n                    )\n                  }\n                  setRemoveAllClicked={setRemoveAllClicked}\n                />\n              )}\n              <FormControlLabel\n                value={NotConditionType.NestedCondition}\n                control={<Radio color=\"primary\" />}\n                label={<AddNestedConditionButton />}\n                sx={{\n                  marginTop: theme.spacing(1),\n                }}\n              />\n            </RadioGroup>\n          )}\n          <ComplexConditionRowButtons\n            conditionRow={conditionRow}\n            onRuleChange={onRuleChange}\n            criteria={criteria}\n            selPluginResourceType={selPluginResourceType}\n            updateErrors={updateErrors}\n            isNestedConditionRule={isNestedConditionRule}\n            handleAddNestedCondition={handleAddNestedCondition}\n          />\n          {nestedConditionRow?.length > 0 &&\n            nestedConditionRow.map((nc, nestedConditionIndex) =>\n              renderNestedConditionRow(nc, nestedConditionIndex),\n            )}\n        </Box>\n      )}\n    </Box>\n  );\n};\n"],"names":[],"mappings":"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"}