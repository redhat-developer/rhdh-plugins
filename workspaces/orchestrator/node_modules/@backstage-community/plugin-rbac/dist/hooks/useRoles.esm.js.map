{"version":3,"file":"useRoles.esm.js","sources":["../../src/hooks/useRoles.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport { useAsync, useAsyncRetry, useInterval } from 'react-use';\n\nimport { useApi } from '@backstage/core-plugin-api';\nimport { usePermission } from '@backstage/plugin-permission-react';\n\nimport {\n  isResourcedPolicy,\n  PluginPermissionMetaData,\n  policyEntityCreatePermission,\n  policyEntityDeletePermission,\n  policyEntityUpdatePermission,\n  Role,\n  RoleBasedPolicy,\n} from '@backstage-community/plugin-rbac-common';\n\nimport { rbacApiRef } from '../api/RBACBackendClient';\nimport { RolesData } from '../types';\nimport { getPermissions, getPermissionsArray } from '../utils/rbac-utils';\n\ntype RoleWithConditionalPoliciesCount = Role & {\n  conditionalPoliciesCount: number;\n  accessiblePlugins: string[];\n};\n\nexport const useRoles = (\n  pollInterval?: number,\n): {\n  loading: boolean;\n  data: RolesData[];\n  createRoleLoading: boolean;\n  createRoleAllowed: boolean;\n  error: {\n    rolesError: string;\n    policiesError: string;\n    roleConditionError: string;\n  };\n  retry: { roleRetry: () => void; policiesRetry: () => void };\n} => {\n  const rbacApi = useApi(rbacApiRef);\n  const [newRoles, setNewRoles] = React.useState<\n    RoleWithConditionalPoliciesCount[]\n  >([]);\n  const [roleConditionError, setRoleConditionError] =\n    React.useState<string>('');\n  const {\n    value: roles,\n    retry: roleRetry,\n    error: rolesError,\n  } = useAsyncRetry(async () => await rbacApi.getRoles());\n\n  const {\n    value: policies,\n    retry: policiesRetry,\n    error: policiesError,\n  } = useAsyncRetry(async () => await rbacApi.getPolicies(), []);\n\n  const {\n    loading: membersLoading,\n    value: members,\n    error: membersError,\n  } = useAsync(async () => {\n    return await rbacApi.getMembers();\n  });\n\n  const {\n    value: permissionPolicies,\n    loading: loadingPermissionPolicies,\n    error: permissionPoliciesError,\n  } = useAsync(async () => {\n    return await rbacApi.listPermissions();\n  });\n\n  const canReadUsersAndGroups =\n    !membersLoading &&\n    !membersError &&\n    Array.isArray(members) &&\n    members.length > 0;\n\n  const deletePermissionResult = usePermission({\n    permission: policyEntityDeletePermission,\n    resourceRef: policyEntityDeletePermission.resourceType,\n  });\n\n  const policyEntityCreatePermissionResult = usePermission({\n    permission: policyEntityCreatePermission,\n    resourceRef: policyEntityCreatePermission.resourceType,\n  });\n\n  const createRoleLoading =\n    policyEntityCreatePermissionResult.loading || membersLoading;\n\n  const createRoleAllowed =\n    policyEntityCreatePermissionResult.allowed && canReadUsersAndGroups;\n\n  const editPermissionResult = usePermission({\n    permission: policyEntityUpdatePermission,\n    resourceRef: policyEntityUpdatePermission.resourceType,\n  });\n\n  React.useEffect(() => {\n    const fetchAllPermissionPolicies = async () => {\n      if (!Array.isArray(roles)) return;\n      const failedFetchConditionRoles: string[] = [];\n      const conditionPromises = roles.map(async role => {\n        try {\n          const conditionalPolicies = await rbacApi.getRoleConditions(\n            role.name,\n          );\n\n          if ((conditionalPolicies as any as Response)?.statusText) {\n            failedFetchConditionRoles.push(role.name);\n            throw new Error(\n              (conditionalPolicies as any as Response).statusText,\n            );\n          }\n          const accessiblePlugins =\n            Array.isArray(conditionalPolicies) && conditionalPolicies.length > 0\n              ? conditionalPolicies.map(c => c.pluginId)\n              : [];\n          return {\n            ...role,\n            conditionalPoliciesCount: Array.isArray(conditionalPolicies)\n              ? conditionalPolicies.length\n              : 0,\n            accessiblePlugins,\n          };\n        } catch (error) {\n          setRoleConditionError(\n            `Error fetching role conditions for ${\n              failedFetchConditionRoles.length > 1 ? 'roles' : 'role'\n            } ${failedFetchConditionRoles.join(', ')}, please try again later.`,\n          );\n          return {\n            ...role,\n            conditionalPoliciesCount: 0,\n            accessiblePlugins: [],\n          };\n        }\n      });\n\n      const updatedRoles = await Promise.all(conditionPromises);\n      setNewRoles(updatedRoles);\n    };\n\n    fetchAllPermissionPolicies();\n  }, [roles, rbacApi]);\n\n  const data: RolesData[] = React.useMemo(\n    () =>\n      Array.isArray(newRoles) && newRoles?.length > 0\n        ? newRoles.reduce(\n            (acc: RolesData[], role: RoleWithConditionalPoliciesCount) => {\n              const permissions = getPermissions(\n                role.name,\n                policies as RoleBasedPolicy[],\n              );\n\n              let accPls = role.accessiblePlugins;\n              if (\n                !loadingPermissionPolicies &&\n                !permissionPoliciesError &&\n                (permissionPolicies as PluginPermissionMetaData[])?.length > 0\n              ) {\n                const pls = getPermissionsArray(\n                  role.name,\n                  policies as RoleBasedPolicy[],\n                ).map(\n                  po =>\n                    (permissionPolicies as PluginPermissionMetaData[]).find(\n                      pp =>\n                        pp.policies?.find(pol =>\n                          isResourcedPolicy(pol)\n                            ? po.permission === pol.resourceType\n                            : po.permission === pol.name,\n                        ),\n                    )?.pluginId,\n                );\n                accPls = [...accPls, ...pls].filter(val => !!val) as string[];\n              }\n              const accessiblePlugins = accPls\n                .filter((val, index, plugins) => plugins.indexOf(val) === index)\n                .sort();\n\n              return [\n                ...acc,\n                {\n                  id: role.name,\n                  name: role.name,\n                  description: role.metadata?.description ?? '-',\n                  members: role.memberReferences,\n                  permissions: role.conditionalPoliciesCount + permissions,\n                  modifiedBy: '-',\n                  lastModified: '-',\n                  actionsPermissionResults: {\n                    delete: deletePermissionResult,\n                    edit: {\n                      allowed:\n                        editPermissionResult.allowed && canReadUsersAndGroups,\n                      loading: editPermissionResult.loading,\n                    },\n                  },\n                  accessiblePlugins,\n                },\n              ];\n            },\n            [],\n          )\n        : [],\n    [\n      newRoles,\n      policies,\n      loadingPermissionPolicies,\n      permissionPoliciesError,\n      permissionPolicies,\n      deletePermissionResult,\n      editPermissionResult.allowed,\n      editPermissionResult.loading,\n      canReadUsersAndGroups,\n    ],\n  );\n  const loading = !rolesError && !policiesError && !roles && !policies;\n\n  useInterval(\n    () => {\n      roleRetry();\n      policiesRetry();\n    },\n    loading ? null : pollInterval || 10000,\n  );\n\n  return {\n    loading,\n    data,\n    error: {\n      rolesError: (rolesError?.message ||\n        (typeof roles === 'object'\n          ? (roles as any as Response)?.statusText\n          : '')) as string,\n      policiesError: (policiesError?.message ||\n        (typeof policies === 'object'\n          ? (policies as any as Response)?.statusText\n          : '')) as string,\n      roleConditionError,\n    },\n    createRoleLoading,\n    createRoleAllowed,\n    retry: { roleRetry, policiesRetry },\n  };\n};\n"],"names":[],"mappings":"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"}