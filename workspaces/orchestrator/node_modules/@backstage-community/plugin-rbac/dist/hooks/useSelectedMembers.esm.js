import { useAsync } from 'react-use';
import { stringifyEntityRef } from '@backstage/catalog-model';
import { useApi } from '@backstage/core-plugin-api';
import { rbacApiRef } from '../api/RBACBackendClient.esm.js';
import { getSelectedMember } from '../utils/rbac-utils.esm.js';
import { useRole } from './useRole.esm.js';

const useSelectedMembers = (roleName) => {
  const rbacApi = useApi(rbacApiRef);
  const { role, loading: roleLoading, roleError } = useRole(roleName);
  const {
    loading: membersLoading,
    value: members,
    error: membersError
  } = useAsync(async () => {
    return await rbacApi.getMembers();
  });
  const canReadUsersAndGroups = !membersLoading && !membersError && Array.isArray(members) && members.length > 0;
  const data = role ? role.memberReferences.reduce((acc, ref) => {
    const memberResource = Array.isArray(members) && members.find((member) => stringifyEntityRef(member) === ref) || void 0;
    acc.push(getSelectedMember(memberResource, ref));
    return acc;
  }, []) : [];
  return {
    selectedMembers: data,
    members: Array.isArray(members) ? members : [],
    role,
    membersError: membersError || {
      name: members?.status,
      message: members?.statusText
    },
    roleError,
    loading: roleLoading || membersLoading,
    canReadUsersAndGroups
  };
};

export { useSelectedMembers };
//# sourceMappingURL=useSelectedMembers.esm.js.map
