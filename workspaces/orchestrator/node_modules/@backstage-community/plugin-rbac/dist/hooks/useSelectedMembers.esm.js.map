{"version":3,"file":"useSelectedMembers.esm.js","sources":["../../src/hooks/useSelectedMembers.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useAsync } from 'react-use';\n\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core-plugin-api';\n\nimport { Role } from '@backstage-community/plugin-rbac-common';\n\nimport { rbacApiRef } from '../api/RBACBackendClient';\nimport { SelectedMember } from '../components/CreateRole/types';\nimport { MemberEntity } from '../types';\nimport { getSelectedMember } from '../utils/rbac-utils';\nimport { useRole } from './useRole';\n\nexport const useSelectedMembers = (\n  roleName: string,\n): {\n  members: MemberEntity[];\n  selectedMembers: SelectedMember[];\n  role: Role | undefined;\n  membersError: Error;\n  roleError: Error;\n  loading: boolean;\n  canReadUsersAndGroups: boolean;\n} => {\n  const rbacApi = useApi(rbacApiRef);\n  const { role, loading: roleLoading, roleError } = useRole(roleName);\n\n  const {\n    loading: membersLoading,\n    value: members,\n    error: membersError,\n  } = useAsync(async () => {\n    return await rbacApi.getMembers();\n  });\n\n  const canReadUsersAndGroups =\n    !membersLoading &&\n    !membersError &&\n    Array.isArray(members) &&\n    members.length > 0;\n\n  const data: SelectedMember[] = role\n    ? (role as Role).memberReferences.reduce((acc: SelectedMember[], ref) => {\n        const memberResource =\n          (Array.isArray(members) &&\n            members.find(member => stringifyEntityRef(member) === ref)) ||\n          undefined;\n        acc.push(getSelectedMember(memberResource, ref));\n\n        return acc;\n      }, [])\n    : [];\n\n  return {\n    selectedMembers: data,\n    members: Array.isArray(members) ? members : ([] as MemberEntity[]),\n    role,\n    membersError: (membersError as Error) || {\n      name: (members as Response)?.status,\n      message: (members as Response)?.statusText,\n    },\n    roleError: roleError,\n    loading: roleLoading || membersLoading,\n    canReadUsersAndGroups,\n  };\n};\n"],"names":[],"mappings":";;;;;;;AA4Ba,MAAA,kBAAA,GAAqB,CAChC,QASG,KAAA;AACH,EAAM,MAAA,OAAA,GAAU,OAAO,UAAU,CAAA;AACjC,EAAA,MAAM,EAAE,IAAM,EAAA,OAAA,EAAS,aAAa,SAAU,EAAA,GAAI,QAAQ,QAAQ,CAAA;AAElE,EAAM,MAAA;AAAA,IACJ,OAAS,EAAA,cAAA;AAAA,IACT,KAAO,EAAA,OAAA;AAAA,IACP,KAAO,EAAA;AAAA,GACT,GAAI,SAAS,YAAY;AACvB,IAAO,OAAA,MAAM,QAAQ,UAAW,EAAA;AAAA,GACjC,CAAA;AAED,EAAM,MAAA,qBAAA,GACJ,CAAC,cAAA,IACD,CAAC,YAAA,IACD,MAAM,OAAQ,CAAA,OAAO,CACrB,IAAA,OAAA,CAAQ,MAAS,GAAA,CAAA;AAEnB,EAAA,MAAM,OAAyB,IAC1B,GAAA,IAAA,CAAc,iBAAiB,MAAO,CAAA,CAAC,KAAuB,GAAQ,KAAA;AACrE,IAAA,MAAM,cACH,GAAA,KAAA,CAAM,OAAQ,CAAA,OAAO,CACpB,IAAA,OAAA,CAAQ,IAAK,CAAA,CAAA,MAAA,KAAU,kBAAmB,CAAA,MAAM,CAAM,KAAA,GAAG,CAC3D,IAAA,KAAA,CAAA;AACF,IAAA,GAAA,CAAI,IAAK,CAAA,iBAAA,CAAkB,cAAgB,EAAA,GAAG,CAAC,CAAA;AAE/C,IAAO,OAAA,GAAA;AAAA,GACN,EAAA,EAAE,CAAA,GACL,EAAC;AAEL,EAAO,OAAA;AAAA,IACL,eAAiB,EAAA,IAAA;AAAA,IACjB,SAAS,KAAM,CAAA,OAAA,CAAQ,OAAO,CAAA,GAAI,UAAW,EAAC;AAAA,IAC9C,IAAA;AAAA,IACA,cAAe,YAA0B,IAAA;AAAA,MACvC,MAAO,OAAsB,EAAA,MAAA;AAAA,MAC7B,SAAU,OAAsB,EAAA;AAAA,KAClC;AAAA,IACA,SAAA;AAAA,IACA,SAAS,WAAe,IAAA,cAAA;AAAA,IACxB;AAAA,GACF;AACF;;;;"}