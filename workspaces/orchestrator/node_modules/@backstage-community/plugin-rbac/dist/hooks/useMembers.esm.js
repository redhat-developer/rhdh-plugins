import React from 'react';
import { useAsyncRetry, useInterval } from 'react-use';
import { stringifyEntityRef, parseEntityRef } from '@backstage/catalog-model';
import { useApi } from '@backstage/core-plugin-api';
import { rbacApiRef } from '../api/RBACBackendClient.esm.js';
import { getMembersFromGroup } from '../utils/rbac-utils.esm.js';

const getErrorText = (role, members) => {
  if (!Array.isArray(role) && role?.statusText) {
    return {
      message: `Unable to fetch role: ${role.statusText}`
    };
  } else if (!Array.isArray(members) && members?.statusText) {
    return {
      message: `Unable to fetch members: ${members.statusText}`
    };
  }
  return void 0;
};
const getMemberData = (memberResource, ref) => {
  if (memberResource) {
    return {
      name: memberResource.spec.profile?.displayName ?? memberResource.metadata.name,
      type: memberResource.kind,
      ref: {
        namespace: memberResource.metadata.namespace,
        kind: memberResource.kind.toLocaleLowerCase("en-US"),
        name: memberResource.metadata.name
      },
      members: memberResource.kind === "Group" ? getMembersFromGroup(memberResource) : 0
    };
  }
  const { kind, namespace, name } = parseEntityRef(ref);
  return {
    name,
    type: kind === "user" ? "User" : "Group",
    ref: {
      namespace,
      kind,
      name
    },
    members: 0
  };
};
const useMembers = (roleName, pollInterval) => {
  const rbacApi = useApi(rbacApiRef);
  let data = [];
  const {
    value: role,
    retry: roleRetry,
    error: roleError
  } = useAsyncRetry(async () => {
    return await rbacApi.getRole(roleName);
  });
  const {
    value: members,
    retry: membersRetry,
    error: membersError
  } = useAsyncRetry(async () => {
    return await rbacApi.getMembers();
  });
  const canReadUsersAndGroups = !membersError && Array.isArray(members) && members.length > 0;
  const loading = !roleError && !membersError && !role && !members;
  data = React.useMemo(
    () => Array.isArray(role) ? role[0].memberReferences.reduce((acc, ref) => {
      const memberResource = Array.isArray(
        members
      ) ? members.find((member) => stringifyEntityRef(member) === ref) : void 0;
      const memberData = getMemberData(memberResource, ref);
      acc.push(memberData);
      return acc;
    }, []) : [],
    [role, members]
  );
  useInterval(
    () => {
      roleRetry();
      membersRetry();
    },
    loading ? null : 1e4
  );
  return {
    loading,
    data,
    retry: { roleRetry, membersRetry },
    error: getErrorText(role, members) || roleError || membersError,
    canReadUsersAndGroups
  };
};

export { useMembers };
//# sourceMappingURL=useMembers.esm.js.map
