import React from 'react';
import { useAsyncRetry, useInterval } from 'react-use';
import { useApi } from '@backstage/core-plugin-api';
import { rbacApiRef } from '../api/RBACBackendClient.esm.js';
import { getPluginsPermissionPoliciesData } from '../utils/create-role-utils.esm.js';
import { getPermissionsData, getConditionalPermissionsData } from '../utils/rbac-utils.esm.js';

const getErrorText = (policies, permissionPolicies, conditionalPolicies) => {
  if (!Array.isArray(policies) && policies?.statusText) {
    return {
      name: policies.status,
      message: `Error fetching policies. ${policies.statusText}`
    };
  } else if (!Array.isArray(permissionPolicies) && permissionPolicies?.statusText) {
    return {
      name: permissionPolicies.status,
      message: `Error fetching the plugins. ${permissionPolicies.statusText}`
    };
  } else if (!Array.isArray(conditionalPolicies) && conditionalPolicies?.statusText) {
    return {
      name: conditionalPolicies.status,
      message: `Error fetching the conditional permission policies. ${conditionalPolicies.statusText}`
    };
  }
  return void 0;
};
const usePermissionPolicies = (entityReference, pollInterval) => {
  const rbacApi = useApi(rbacApiRef);
  const {
    value: policies,
    retry: policiesRetry,
    error: policiesError
  } = useAsyncRetry(async () => {
    return await rbacApi.getAssociatedPolicies(entityReference);
  });
  const {
    value: conditionalPolicies,
    retry: conditionalPoliciesRetry,
    error: conditionalPoliciesError
  } = useAsyncRetry(async () => {
    return await rbacApi.getRoleConditions(entityReference);
  });
  const {
    value: permissionPolicies,
    error: permissionPoliciesError,
    retry: permissionPoliciesRetry
  } = useAsyncRetry(async () => {
    return await rbacApi.listPermissions();
  });
  const loading = !permissionPoliciesError && !policiesError && !conditionalPoliciesError && (!permissionPolicies || !policies || !conditionalPolicies);
  const allPermissionPolicies = React.useMemo(
    () => Array.isArray(permissionPolicies) ? permissionPolicies : [],
    [permissionPolicies]
  );
  const data = React.useMemo(() => {
    return Array.isArray(policies) ? getPermissionsData(policies, allPermissionPolicies) : [];
  }, [allPermissionPolicies, policies]);
  const conditionsData = React.useMemo(() => {
    const cpp = Array.isArray(conditionalPolicies) ? conditionalPolicies : [];
    const pluginsPermissionsPoliciesData = allPermissionPolicies.length > 0 ? getPluginsPermissionPoliciesData(allPermissionPolicies) : void 0;
    return pluginsPermissionsPoliciesData ? getConditionalPermissionsData(cpp, pluginsPermissionsPoliciesData) : [];
  }, [allPermissionPolicies, conditionalPolicies]);
  useInterval(
    () => {
      policiesRetry();
      permissionPoliciesRetry();
      conditionalPoliciesRetry();
    },
    loading ? null : null
  );
  return {
    loading,
    data: [...conditionsData, ...data],
    retry: { policiesRetry, permissionPoliciesRetry, conditionalPoliciesRetry },
    error: policiesError || permissionPoliciesError || conditionalPoliciesError || getErrorText(policies, permissionPolicies, conditionalPolicies)
  };
};

export { usePermissionPolicies };
//# sourceMappingURL=usePermissionPolicies.esm.js.map
