{"version":3,"file":"useMembers.esm.js","sources":["../../src/hooks/useMembers.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport { useAsyncRetry, useInterval } from 'react-use';\n\nimport { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core-plugin-api';\n\nimport { rbacApiRef } from '../api/RBACBackendClient';\nimport { MemberEntity, MembersData } from '../types';\nimport { getMembersFromGroup } from '../utils/rbac-utils';\n\nexport type MembersInfo = {\n  loading: boolean;\n  data: MembersData[];\n  retry: { roleRetry: () => void; membersRetry: () => void };\n  error?: { message: string };\n  canReadUsersAndGroups: boolean;\n};\n\nconst getErrorText = (\n  role: any,\n  members: any,\n): { message: string } | undefined => {\n  if (!Array.isArray(role) && (role as Response)?.statusText) {\n    return {\n      message: `Unable to fetch role: ${(role as Response).statusText}`,\n    };\n  } else if (!Array.isArray(members) && (members as Response)?.statusText) {\n    return {\n      message: `Unable to fetch members: ${(members as Response).statusText}`,\n    };\n  }\n  return undefined;\n};\n\nconst getMemberData = (\n  memberResource: MemberEntity | undefined,\n  ref: string,\n) => {\n  if (memberResource) {\n    return {\n      name:\n        memberResource.spec.profile?.displayName ??\n        memberResource.metadata.name,\n      type: memberResource.kind,\n      ref: {\n        namespace: memberResource.metadata.namespace as string,\n        kind: memberResource.kind.toLocaleLowerCase('en-US'),\n        name: memberResource.metadata.name,\n      },\n      members:\n        memberResource.kind === 'Group'\n          ? getMembersFromGroup(memberResource)\n          : 0,\n    };\n  }\n  const { kind, namespace, name } = parseEntityRef(ref);\n  return {\n    name,\n    type: kind === 'user' ? 'User' : ('Group' as 'User' | 'Group'),\n    ref: {\n      namespace,\n      kind,\n      name,\n    },\n    members: 0,\n  };\n};\n\nexport const useMembers = (\n  roleName: string,\n  pollInterval?: number,\n): MembersInfo => {\n  const rbacApi = useApi(rbacApiRef);\n  let data: MembersData[] = [];\n  const {\n    value: role,\n    retry: roleRetry,\n    error: roleError,\n  } = useAsyncRetry(async () => {\n    return await rbacApi.getRole(roleName);\n  });\n\n  const {\n    value: members,\n    retry: membersRetry,\n    error: membersError,\n  } = useAsyncRetry(async () => {\n    return await rbacApi.getMembers();\n  });\n\n  const canReadUsersAndGroups =\n    !membersError && Array.isArray(members) && members.length > 0;\n\n  const loading = !roleError && !membersError && !role && !members;\n\n  data = React.useMemo(\n    () =>\n      Array.isArray(role)\n        ? role[0].memberReferences.reduce((acc: MembersData[], ref: string) => {\n            const memberResource: MemberEntity | undefined = Array.isArray(\n              members,\n            )\n              ? members.find(member => stringifyEntityRef(member) === ref)\n              : undefined;\n            const memberData = getMemberData(memberResource, ref);\n            acc.push(memberData);\n            return acc;\n          }, [])\n        : [],\n    [role, members],\n  );\n\n  useInterval(\n    () => {\n      roleRetry();\n      membersRetry();\n    },\n    loading ? null : pollInterval || 10000,\n  );\n\n  return {\n    loading,\n    data,\n    retry: { roleRetry, membersRetry },\n    error: getErrorText(role, members) || roleError || membersError,\n    canReadUsersAndGroups,\n  };\n};\n"],"names":[],"mappings":"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"}