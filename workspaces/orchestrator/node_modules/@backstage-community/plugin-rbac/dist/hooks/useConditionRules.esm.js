import { useAsync } from 'react-use';
import { useApi } from '@backstage/core-plugin-api';
import { rbacApiRef } from '../api/RBACBackendClient.esm.js';
import { uniqBy } from '../utils/create-role-utils.esm.js';

const getPluginsResourceTypes = (conditionRules) => {
  return conditionRules.reduce((acc, pluginRules) => {
    return {
      ...acc,
      [`${pluginRules.pluginId}`]: uniqBy(
        pluginRules.rules.map((rule) => rule.resourceType),
        (val) => val
      )
    };
  }, {});
};
const getRuleData = (pluginRules, resType) => {
  return pluginRules.rules.reduce(
    (ruleAcc, rule) => {
      return rule.resourceType === resType ? {
        ...ruleAcc,
        [`${rule.name}`]: {
          schema: rule.paramsSchema,
          description: rule.description
        },
        rules: [...ruleAcc.rules, rule.name]
      } : ruleAcc;
    },
    { rules: [] }
  );
};
const getConditionRulesData = (conditionRules) => {
  const pluginsResourceTypes = getPluginsResourceTypes(conditionRules);
  return conditionRules.reduce((acc, pluginRules) => {
    return {
      ...acc,
      [`${pluginRules.pluginId}`]: pluginsResourceTypes[pluginRules.pluginId].reduce((resAcc, resType) => {
        return {
          ...resAcc,
          [`${resType}`]: getRuleData(pluginRules, resType)
        };
      }, {})
    };
  }, {});
};
const useConditionRules = () => {
  const rbacApi = useApi(rbacApiRef);
  const {
    value: conditionRules,
    loading: conditionRulesLoading,
    error: conditionRulesErr
  } = useAsync(async () => {
    return await rbacApi.getPluginsConditionRules();
  });
  const isConditionRulesAvailable = !conditionRulesLoading && Array.isArray(conditionRules);
  const conditionRulesData = isConditionRulesAvailable ? getConditionRulesData(conditionRules) : void 0;
  return {
    data: conditionRulesData,
    error: conditionRulesErr
  };
};

export { useConditionRules };
//# sourceMappingURL=useConditionRules.esm.js.map
