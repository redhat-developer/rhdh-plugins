import { parseEntityRef } from '@backstage/catalog-model';
import { createApiRef } from '@backstage/core-plugin-api';

const rbacApiRef = createApiRef({
  id: "plugin.rbac.service"
});
class RBACBackendClient {
  // @ts-ignore
  configApi;
  identityApi;
  constructor(options) {
    this.configApi = options.configApi;
    this.identityApi = options.identityApi;
  }
  async getUserAuthorization() {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(`${backendUrl}/api/permission/`, {
      headers: {
        ...idToken && { Authorization: `Bearer ${idToken}` }
      }
    });
    return jsonResponse.json();
  }
  async getRoles() {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(`${backendUrl}/api/permission/roles`, {
      headers: {
        ...idToken && { Authorization: `Bearer ${idToken}` }
      }
    });
    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {
      return jsonResponse;
    }
    return jsonResponse.json();
  }
  async getPolicies() {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(`${backendUrl}/api/permission/policies`, {
      headers: {
        ...idToken && { Authorization: `Bearer ${idToken}` }
      }
    });
    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {
      return jsonResponse;
    }
    return jsonResponse.json();
  }
  async getAssociatedPolicies(entityReference) {
    const { kind, namespace, name } = parseEntityRef(entityReference);
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/policies/${kind}/${namespace}/${name}`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` }
        }
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {
      return jsonResponse;
    }
    return jsonResponse.json();
  }
  async deleteRole(role) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const { kind, namespace, name } = parseEntityRef(role);
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/roles/${kind}/${namespace}/${name}`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` },
          "Content-Type": "application/json"
        },
        method: "DELETE"
      }
    );
    return jsonResponse;
  }
  async getRole(role) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const { kind, namespace, name } = parseEntityRef(role);
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/roles/${kind}/${namespace}/${name}`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` },
          "Content-Type": "application/json"
        }
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {
      return jsonResponse;
    }
    return jsonResponse.json();
  }
  async getMembers() {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(
      `${backendUrl}/api/catalog/entities?filter=kind=user&filter=kind=group`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` },
          "Content-Type": "application/json"
        }
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {
      return jsonResponse;
    }
    return jsonResponse.json();
  }
  async listPermissions() {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/plugins/policies`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` },
          "Content-Type": "application/json"
        }
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {
      return jsonResponse;
    }
    return jsonResponse.json();
  }
  async createRole(role) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(`${backendUrl}/api/permission/roles`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        ...idToken && { Authorization: `Bearer ${idToken}` }
      },
      body: JSON.stringify(role)
    });
    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {
      return jsonResponse.json();
    }
    return jsonResponse;
  }
  async updateRole(oldRole, newRole) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const { kind, namespace, name } = parseEntityRef(oldRole.name);
    const body = {
      oldRole,
      newRole
    };
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/roles/${kind}/${namespace}/${name}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          ...idToken && { Authorization: `Bearer ${idToken}` }
        },
        body: JSON.stringify(body)
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 201 && jsonResponse.status !== 204) {
      return jsonResponse.json();
    }
    return jsonResponse;
  }
  async updatePolicies(entityReference, oldPolicies, newPolicies) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const { kind, namespace, name } = parseEntityRef(entityReference);
    const body = {
      oldPolicy: oldPolicies,
      newPolicy: newPolicies
    };
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/policies/${kind}/${namespace}/${name}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          ...idToken && { Authorization: `Bearer ${idToken}` }
        },
        body: JSON.stringify(body)
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {
      return jsonResponse.json();
    }
    return jsonResponse;
  }
  async deletePolicies(entityReference, policies) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const { kind, namespace, name } = parseEntityRef(entityReference);
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/policies/${kind}/${namespace}/${name}`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` },
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        body: JSON.stringify(policies),
        method: "DELETE"
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 201 && jsonResponse.status !== 204) {
      return jsonResponse.json();
    }
    return jsonResponse;
  }
  async createPolicies(policies) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(`${backendUrl}/api/permission/policies`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        ...idToken && { Authorization: `Bearer ${idToken}` }
      },
      body: JSON.stringify(policies)
    });
    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {
      return jsonResponse.json();
    }
    return jsonResponse;
  }
  async getPluginsConditionRules() {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/plugins/condition-rules`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` },
          "Content-Type": "application/json"
        }
      }
    );
    if (jsonResponse.status !== 200) {
      return jsonResponse;
    }
    return jsonResponse.json();
  }
  async createConditionalPermission(conditionalPermission) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/roles/conditions`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          ...idToken && { Authorization: `Bearer ${idToken}` }
        },
        body: JSON.stringify(conditionalPermission)
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {
      return jsonResponse.json();
    }
    return jsonResponse;
  }
  async getRoleConditions(roleRef) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/roles/conditions?roleEntityRef=${roleRef}`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` },
          "Content-Type": "application/json"
        }
      }
    );
    if (jsonResponse.status !== 200) {
      return jsonResponse;
    }
    return jsonResponse.json();
  }
  async updateConditionalPolicies(conditionId, data) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/roles/conditions/${conditionId}}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          ...idToken && { Authorization: `Bearer ${idToken}` }
        },
        body: JSON.stringify(data)
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {
      return jsonResponse.json();
    }
    return jsonResponse;
  }
  async deleteConditionalPolicies(conditionId) {
    const { token: idToken } = await this.identityApi.getCredentials();
    const backendUrl = this.configApi.getString("backend.baseUrl");
    const jsonResponse = await fetch(
      `${backendUrl}/api/permission/roles/conditions/${conditionId}`,
      {
        headers: {
          ...idToken && { Authorization: `Bearer ${idToken}` },
          "Content-Type": "application/json",
          Accept: "application/json"
        },
        method: "DELETE"
      }
    );
    if (jsonResponse.status !== 200 && jsonResponse.status !== 201 && jsonResponse.status !== 204) {
      return jsonResponse.json();
    }
    return jsonResponse;
  }
}

export { RBACBackendClient, rbacApiRef };
//# sourceMappingURL=RBACBackendClient.esm.js.map
