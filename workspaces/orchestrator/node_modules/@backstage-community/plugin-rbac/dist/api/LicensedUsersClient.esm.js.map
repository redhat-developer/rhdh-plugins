{"version":3,"file":"LicensedUsersClient.esm.js","sources":["../../src/api/LicensedUsersClient.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  ConfigApi,\n  createApiRef,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\n\nexport type LicensedUsersAPI = {\n  isLicensePluginEnabled(): Promise<boolean>;\n  downloadStatistics: () => Promise<Response>;\n};\n\n// @public\nexport const licensedUsersApiRef = createApiRef<LicensedUsersAPI>({\n  id: 'plugin.licensed-users-info.service',\n});\n\nexport type Options = {\n  configApi: ConfigApi;\n  identityApi: IdentityApi;\n};\n\nexport class LicensedUsersAPIClient implements LicensedUsersAPI {\n  // @ts-ignore\n  private readonly configApi: ConfigApi;\n  private readonly identityApi: IdentityApi;\n\n  constructor(options: Options) {\n    this.configApi = options.configApi;\n    this.identityApi = options.identityApi;\n  }\n  async isLicensePluginEnabled(): Promise<boolean> {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/licensed-users-info/health`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n        },\n      },\n    );\n\n    return jsonResponse.ok;\n  }\n\n  async downloadStatistics(): Promise<Response> {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const response = await fetch(\n      `${backendUrl}/api/licensed-users-info/users`,\n      {\n        method: 'GET',\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'text/csv',\n        },\n      },\n    );\n    return response;\n  }\n}\n"],"names":[],"mappings":";;AA2BO,MAAM,sBAAsB,YAA+B,CAAA;AAAA,EAChE,EAAI,EAAA;AACN,CAAC;AAOM,MAAM,sBAAmD,CAAA;AAAA;AAAA,EAE7C,SAAA;AAAA,EACA,WAAA;AAAA,EAEjB,YAAY,OAAkB,EAAA;AAC5B,IAAA,IAAA,CAAK,YAAY,OAAQ,CAAA,SAAA;AACzB,IAAA,IAAA,CAAK,cAAc,OAAQ,CAAA,WAAA;AAAA;AAC7B,EACA,MAAM,sBAA2C,GAAA;AAC/C,IAAA,MAAM,EAAE,KAAO,EAAA,OAAA,KAAY,MAAM,IAAA,CAAK,YAAY,cAAe,EAAA;AACjE,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,SAAU,CAAA,SAAA,CAAU,iBAAiB,CAAA;AAC7D,IAAA,MAAM,eAAe,MAAM,KAAA;AAAA,MACzB,GAAG,UAAU,CAAA,+BAAA,CAAA;AAAA,MACb;AAAA,QACE,OAAS,EAAA;AAAA,UACP,GAAI,OAAW,IAAA,EAAE,aAAe,EAAA,CAAA,OAAA,EAAU,OAAO,CAAG,CAAA;AAAA;AACtD;AACF,KACF;AAEA,IAAA,OAAO,YAAa,CAAA,EAAA;AAAA;AACtB,EAEA,MAAM,kBAAwC,GAAA;AAC5C,IAAA,MAAM,EAAE,KAAO,EAAA,OAAA,KAAY,MAAM,IAAA,CAAK,YAAY,cAAe,EAAA;AACjE,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,SAAU,CAAA,SAAA,CAAU,iBAAiB,CAAA;AAC7D,IAAA,MAAM,WAAW,MAAM,KAAA;AAAA,MACrB,GAAG,UAAU,CAAA,8BAAA,CAAA;AAAA,MACb;AAAA,QACE,MAAQ,EAAA,KAAA;AAAA,QACR,OAAS,EAAA;AAAA,UACP,GAAI,OAAW,IAAA,EAAE,aAAe,EAAA,CAAA,OAAA,EAAU,OAAO,CAAG,CAAA,EAAA;AAAA,UACpD,cAAgB,EAAA;AAAA;AAClB;AACF,KACF;AACA,IAAO,OAAA,QAAA;AAAA;AAEX;;;;"}