{"version":3,"file":"RBACBackendClient.esm.js","sources":["../../src/api/RBACBackendClient.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { parseEntityRef } from '@backstage/catalog-model';\nimport {\n  ConfigApi,\n  createApiRef,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\n\nimport {\n  PermissionAction,\n  PluginPermissionMetaData,\n  Role,\n  RoleBasedPolicy,\n  RoleConditionalPolicyDecision,\n} from '@backstage-community/plugin-rbac-common';\n\nimport {\n  MemberEntity,\n  PluginConditionRules,\n  RoleBasedConditions,\n  RoleError,\n} from '../types';\n\n// @public\nexport type RBACAPI = {\n  getUserAuthorization: () => Promise<{ status: string }>;\n  getRoles: () => Promise<Role[] | Response>;\n  getPolicies: () => Promise<RoleBasedPolicy[] | Response>;\n  getAssociatedPolicies: (\n    entityReference: string,\n  ) => Promise<RoleBasedPolicy[] | Response>;\n  deleteRole: (role: string) => Promise<Response>;\n  getRole: (role: string) => Promise<Role[] | Response>;\n  getMembers: () => Promise<MemberEntity[] | Response>;\n  listPermissions: () => Promise<PluginPermissionMetaData[] | Response>;\n  createRole: (role: Role) => Promise<RoleError | Response>;\n  updateRole: (oldRole: Role, newRole: Role) => Promise<RoleError | Response>;\n  updatePolicies: (\n    entityReference: string,\n    oldPolicy: RoleBasedPolicy[],\n    newPolicy: RoleBasedPolicy[],\n  ) => Promise<RoleError | Response>;\n  createPolicies: (polices: RoleBasedPolicy[]) => Promise<RoleError | Response>;\n  deletePolicies: (\n    entityReference: string,\n    polices: RoleBasedPolicy[],\n  ) => Promise<RoleError | Response>;\n  getPluginsConditionRules: () => Promise<PluginConditionRules[] | Response>;\n  createConditionalPermission: (\n    conditionalPermission: RoleBasedConditions,\n  ) => Promise<RoleError | Response>;\n  getRoleConditions: (\n    roleRef: string,\n  ) => Promise<RoleConditionalPolicyDecision<PermissionAction>[] | Response>;\n  updateConditionalPolicies: (\n    conditionId: number,\n    data: RoleBasedConditions,\n  ) => Promise<RoleError | Response>;\n  deleteConditionalPolicies: (\n    conditionId: number,\n  ) => Promise<RoleError | Response>;\n};\n\nexport type Options = {\n  configApi: ConfigApi;\n  identityApi: IdentityApi;\n};\n\n// @public\nexport const rbacApiRef = createApiRef<RBACAPI>({\n  id: 'plugin.rbac.service',\n});\n\nexport class RBACBackendClient implements RBACAPI {\n  // @ts-ignore\n  private readonly configApi: ConfigApi;\n  private readonly identityApi: IdentityApi;\n\n  constructor(options: Options) {\n    this.configApi = options.configApi;\n    this.identityApi = options.identityApi;\n  }\n\n  async getUserAuthorization() {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(`${backendUrl}/api/permission/`, {\n      headers: {\n        ...(idToken && { Authorization: `Bearer ${idToken}` }),\n      },\n    });\n    return jsonResponse.json();\n  }\n\n  async getRoles() {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(`${backendUrl}/api/permission/roles`, {\n      headers: {\n        ...(idToken && { Authorization: `Bearer ${idToken}` }),\n      },\n    });\n\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {\n      return jsonResponse;\n    }\n\n    return jsonResponse.json();\n  }\n\n  async getPolicies() {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(`${backendUrl}/api/permission/policies`, {\n      headers: {\n        ...(idToken && { Authorization: `Bearer ${idToken}` }),\n      },\n    });\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {\n      return jsonResponse;\n    }\n    return jsonResponse.json();\n  }\n\n  async getAssociatedPolicies(entityReference: string) {\n    const { kind, namespace, name } = parseEntityRef(entityReference);\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/policies/${kind}/${namespace}/${name}`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n        },\n      },\n    );\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {\n      return jsonResponse;\n    }\n    return jsonResponse.json();\n  }\n\n  async deleteRole(role: string) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const { kind, namespace, name } = parseEntityRef(role);\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/roles/${kind}/${namespace}/${name}`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'application/json',\n        },\n        method: 'DELETE',\n      },\n    );\n    return jsonResponse;\n  }\n\n  async getRole(role: string) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const { kind, namespace, name } = parseEntityRef(role);\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/roles/${kind}/${namespace}/${name}`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {\n      return jsonResponse;\n    }\n    return jsonResponse.json();\n  }\n\n  async getMembers() {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/catalog/entities?filter=kind=user&filter=kind=group`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {\n      return jsonResponse;\n    }\n    return jsonResponse.json();\n  }\n\n  async listPermissions() {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/plugins/policies`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 204) {\n      return jsonResponse;\n    }\n    return jsonResponse.json();\n  }\n\n  async createRole(role: Role) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(`${backendUrl}/api/permission/roles`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        ...(idToken && { Authorization: `Bearer ${idToken}` }),\n      },\n      body: JSON.stringify(role),\n    });\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {\n      return jsonResponse.json();\n    }\n    return jsonResponse;\n  }\n\n  async updateRole(oldRole: Role, newRole: Role) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const { kind, namespace, name } = parseEntityRef(oldRole.name);\n    const body = {\n      oldRole,\n      newRole,\n    };\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/roles/${kind}/${namespace}/${name}`,\n      {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n        },\n        body: JSON.stringify(body),\n      },\n    );\n    if (\n      jsonResponse.status !== 200 &&\n      jsonResponse.status !== 201 &&\n      jsonResponse.status !== 204\n    ) {\n      return jsonResponse.json();\n    }\n    return jsonResponse;\n  }\n\n  async updatePolicies(\n    entityReference: string,\n    oldPolicies: RoleBasedPolicy[],\n    newPolicies: RoleBasedPolicy[],\n  ) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const { kind, namespace, name } = parseEntityRef(entityReference);\n    const body = {\n      oldPolicy: oldPolicies,\n      newPolicy: newPolicies,\n    };\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/policies/${kind}/${namespace}/${name}`,\n      {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n        },\n        body: JSON.stringify(body),\n      },\n    );\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {\n      return jsonResponse.json();\n    }\n    return jsonResponse;\n  }\n\n  async deletePolicies(entityReference: string, policies: RoleBasedPolicy[]) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const { kind, namespace, name } = parseEntityRef(entityReference);\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/policies/${kind}/${namespace}/${name}`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify(policies),\n        method: 'DELETE',\n      },\n    );\n\n    if (\n      jsonResponse.status !== 200 &&\n      jsonResponse.status !== 201 &&\n      jsonResponse.status !== 204\n    ) {\n      return jsonResponse.json();\n    }\n    return jsonResponse;\n  }\n\n  async createPolicies(policies: RoleBasedPolicy[]) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(`${backendUrl}/api/permission/policies`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        ...(idToken && { Authorization: `Bearer ${idToken}` }),\n      },\n      body: JSON.stringify(policies),\n    });\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {\n      return jsonResponse.json();\n    }\n    return jsonResponse;\n  }\n\n  async getPluginsConditionRules() {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/plugins/condition-rules`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n    if (jsonResponse.status !== 200) {\n      return jsonResponse;\n    }\n    return jsonResponse.json();\n  }\n\n  async createConditionalPermission(\n    conditionalPermission: RoleBasedConditions,\n  ) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/roles/conditions`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n        },\n        body: JSON.stringify(conditionalPermission),\n      },\n    );\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {\n      return jsonResponse.json();\n    }\n    return jsonResponse;\n  }\n\n  async getRoleConditions(roleRef: string) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/roles/conditions?roleEntityRef=${roleRef}`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n    if (jsonResponse.status !== 200) {\n      return jsonResponse;\n    }\n    return jsonResponse.json();\n  }\n\n  async updateConditionalPolicies(\n    conditionId: number,\n    data: RoleBasedConditions,\n  ) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/roles/conditions/${conditionId}}`,\n      {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n        },\n        body: JSON.stringify(data),\n      },\n    );\n    if (jsonResponse.status !== 200 && jsonResponse.status !== 201) {\n      return jsonResponse.json();\n    }\n    return jsonResponse;\n  }\n\n  async deleteConditionalPolicies(conditionId: number) {\n    const { token: idToken } = await this.identityApi.getCredentials();\n    const backendUrl = this.configApi.getString('backend.baseUrl');\n    const jsonResponse = await fetch(\n      `${backendUrl}/api/permission/roles/conditions/${conditionId}`,\n      {\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        method: 'DELETE',\n      },\n    );\n\n    if (\n      jsonResponse.status !== 200 &&\n      jsonResponse.status !== 201 &&\n      jsonResponse.status !== 204\n    ) {\n      return jsonResponse.json();\n    }\n    return jsonResponse;\n  }\n}\n"],"names":[],"mappings":"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"}