import { getTitleCase } from '@janus-idp/shared-react';
import * as yup from 'yup';
import { isResourcedPolicy } from '@backstage-community/plugin-rbac-common';
import { criterias } from '../components/ConditionalAccess/const.esm.js';

const uniqBy = (arr, iteratee) => {
  return arr.filter(
    (x, i, self) => i === self.findIndex((y) => iteratee(x) === iteratee(y))
  );
};
const getRoleData = (values) => {
  return {
    memberReferences: values.selectedMembers.map(
      (mem) => mem.ref
    ),
    name: `${values.kind}:${values.namespace}/${values.name}`,
    metadata: {
      description: values.description
    }
  };
};
const validationSchema = yup.object({
  name: yup.string().required("Name is required"),
  selectedMembers: yup.array().min(1, "No member selected"),
  permissionPoliciesRows: yup.array().of(
    yup.object().shape({
      plugin: yup.string().required("Plugin is required"),
      permission: yup.string().required("Permission is required")
    })
  )
});
const getMembersCount = (member) => {
  return member.kind === "Group" ? member.relations?.reduce((acc, relation) => {
    let temp = acc;
    if (relation.type === "hasMember") {
      temp++;
    }
    return temp;
  }, 0) : void 0;
};
const getParentGroupsCount = (member) => {
  return member.kind === "Group" ? member.relations?.reduce((acc, relation) => {
    let temp = acc;
    if (relation.type === "childOf") {
      temp++;
    }
    return temp;
  }, 0) : void 0;
};
const getChildGroupsCount = (member) => {
  return member.kind === "Group" ? member.relations?.reduce((acc, relation) => {
    let temp = acc;
    if (relation.type === "parentOf") {
      temp++;
    }
    return temp;
  }, 0) : void 0;
};
const getPermissionPolicies = (policies) => {
  return policies.reduce(
    (ppsAcc, policy) => {
      const permission = isResourcedPolicy(policy) ? policy.resourceType : policy.name;
      return {
        ...ppsAcc,
        [permission]: policies.reduce(
          (policiesAcc, pol) => {
            const perm = isResourcedPolicy(pol) ? pol.resourceType : pol.name;
            if (permission === perm)
              return {
                policies: uniqBy(
                  [...policiesAcc.policies, getTitleCase(pol.policy)],
                  (val) => val
                ),
                isResourced: isResourcedPolicy(pol)
              };
            return policiesAcc;
          },
          { policies: [], isResourced: false }
        )
      };
    },
    {}
  );
};
const getPluginsPermissionPoliciesData = (pluginsPermissionPolicies) => {
  const plugins = pluginsPermissionPolicies.map(
    (pluginPp) => pluginPp.pluginId
  );
  const pluginsPermissions = pluginsPermissionPolicies.reduce(
    (acc, pp, index) => {
      const permissions = pp.policies.reduce((plcAcc, plc) => {
        const permission = isResourcedPolicy(plc) ? plc.resourceType : plc.name;
        return [...plcAcc, permission];
      }, []);
      return {
        ...acc,
        [plugins[index]]: {
          permissions: uniqBy(permissions ?? [], (val) => val),
          policies: {
            ...pp.policies ? getPermissionPolicies(pp.policies) : {}
          }
        }
      };
    },
    {}
  );
  return { plugins, pluginsPermissions };
};
const getPermissionPoliciesData = (values) => {
  const { kind, name, namespace, permissionPoliciesRows } = values;
  return permissionPoliciesRows.reduce(
    (acc, permissionPolicyRow) => {
      const { permission, policies, conditions } = permissionPolicyRow;
      const permissionPoliciesData = policies.reduce(
        (pAcc, policy) => {
          if (policy.effect === "allow" && !conditions) {
            return [
              ...pAcc,
              {
                entityReference: `${kind}:${namespace}/${name}`,
                permission: `${permission}`,
                policy: policy.policy.toLocaleLowerCase("en-US"),
                effect: "allow"
              }
            ];
          }
          return pAcc;
        },
        []
      );
      return [...acc, ...permissionPoliciesData];
    },
    []
  );
};
const getConditionalPermissionPoliciesData = (values) => {
  const { kind, name, namespace, permissionPoliciesRows } = values;
  return permissionPoliciesRows.reduce(
    (acc, permissionPolicyRow) => {
      const { permission, policies, isResourced, plugin, conditions } = permissionPolicyRow;
      const permissionMapping = policies.reduce((pAcc, policy) => {
        if (policy.effect === "allow") {
          return [...pAcc, policy.policy.toLocaleLowerCase("en-US")];
        }
        return pAcc;
      }, []);
      return isResourced && conditions ? [
        ...acc,
        {
          result: "CONDITIONAL",
          roleEntityRef: `${kind}:${namespace}/${name}`,
          pluginId: `${plugin}`,
          resourceType: `${permission}`,
          permissionMapping,
          conditions: Object.keys(conditions)[0] === criterias.condition ? { ...conditions.condition } : conditions
        }
      ] : acc;
    },
    []
  );
};
const getUpdatedConditionalPolicies = (values, initialValues) => {
  const initialConditionsWithId = initialValues.permissionPoliciesRows.filter(
    (ppr) => ppr.id
  );
  const conditionsWithId = values.permissionPoliciesRows.filter((ppr) => ppr.id);
  return conditionsWithId.length > 0 ? conditionsWithId.reduce(
    (acc, condition) => {
      const conditionExists = initialConditionsWithId.find(
        (c) => c.id === condition.id
      );
      if (conditionExists && condition.id)
        return [
          ...acc,
          {
            id: condition.id,
            updateCondition: getConditionalPermissionPoliciesData({
              ...values,
              permissionPoliciesRows: [condition]
            })[0]
          }
        ];
      return acc;
    },
    []
  ) : [];
};
const getNewConditionalPolicies = (values) => {
  const newValues = { ...values };
  const newPermissionPolicies = values.permissionPoliciesRows.filter(
    (ppr) => !ppr.id
  );
  newValues.permissionPoliciesRows = newPermissionPolicies;
  return getConditionalPermissionPoliciesData(newValues);
};
const getRemovedConditionalPoliciesIds = (values, initialValues) => {
  const initialConditionsIds = initialValues.permissionPoliciesRows.map((ppr) => ppr.id).filter((id) => id);
  const newConditionsIds = values.permissionPoliciesRows.map((ppr) => ppr.id).filter((id) => id);
  return initialConditionsIds.length > 0 ? initialConditionsIds.reduce((acc, oldId) => {
    const conditionExists = newConditionsIds.includes(oldId);
    if (conditionExists) return acc;
    return oldId ? [...acc, oldId] : acc;
  }, []) : [];
};
const getPermissionsNumber = (values) => {
  return getPermissionPoliciesData(values).length + getConditionalPermissionPoliciesData(values).length;
};
const getRulesNumber = (conditions) => {
  if (!conditions) return 0;
  let rulesNumber = 0;
  if (conditions.allOf) {
    rulesNumber += conditions.allOf.reduce((acc, condition) => {
      return acc + getRulesNumber(condition);
    }, 0);
  }
  if (conditions.anyOf) {
    rulesNumber += conditions.anyOf.reduce((acc, condition) => {
      return acc + getRulesNumber(condition);
    }, 0);
  }
  if (conditions.not) {
    rulesNumber += getRulesNumber(conditions.not);
  }
  if (conditions.condition || Object.keys(conditions).includes("rule")) {
    rulesNumber += 1;
  }
  return rulesNumber;
};

export { getChildGroupsCount, getConditionalPermissionPoliciesData, getMembersCount, getNewConditionalPolicies, getParentGroupsCount, getPermissionPolicies, getPermissionPoliciesData, getPermissionsNumber, getPluginsPermissionPoliciesData, getRemovedConditionalPoliciesIds, getRoleData, getRulesNumber, getUpdatedConditionalPolicies, uniqBy, validationSchema };
//# sourceMappingURL=create-role-utils.esm.js.map
