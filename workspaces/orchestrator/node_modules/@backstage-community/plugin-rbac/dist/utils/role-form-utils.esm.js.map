{"version":3,"file":"role-form-utils.esm.js","sources":["../../src/utils/role-form-utils.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { RoleBasedPolicy } from '@backstage-community/plugin-rbac-common';\n\nimport { RBACAPI } from '../api/RBACBackendClient';\nimport {\n  RoleBasedConditions,\n  RoleError,\n  UpdatedConditionsData,\n} from '../types';\n\nexport const createPermissions = async (\n  newPermissions: RoleBasedPolicy[],\n  rbacApi: RBACAPI,\n  errorMsgPrefix?: string,\n) => {\n  if (newPermissions.length > 0) {\n    const permissionsRes = await rbacApi.createPolicies(newPermissions);\n    if ((permissionsRes as unknown as RoleError).error) {\n      throw new Error(\n        `${errorMsgPrefix || 'Unable to create the permission policies.'} ${\n          (permissionsRes as unknown as RoleError).error.message\n        }`,\n      );\n    }\n  }\n};\n\nexport const removePermissions = async (\n  name: string,\n  deletePermissions: RoleBasedPolicy[],\n  rbacApi: RBACAPI,\n) => {\n  if (deletePermissions.length > 0) {\n    const permissionsRes = await rbacApi.deletePolicies(\n      name,\n      deletePermissions,\n    );\n    if ((permissionsRes as unknown as RoleError).error) {\n      throw new Error(\n        `Unable to delete the permission policies. ${\n          (permissionsRes as unknown as RoleError).error.message\n        }`,\n      );\n    }\n  }\n};\n\nexport const removeConditions = async (\n  deleteConditions: number[],\n  rbacApi: RBACAPI,\n) => {\n  if (deleteConditions.length > 0) {\n    const promises = deleteConditions.map(cid =>\n      rbacApi.deleteConditionalPolicies(cid),\n    );\n\n    const cppRes: (Response | RoleError)[] = await Promise.all(promises);\n    const cpErr = cppRes\n      .map(r => (r as unknown as RoleError).error?.message)\n      .filter(m => m);\n\n    if (cpErr.length > 0) {\n      throw new Error(\n        `Unable to remove conditions from the role. ${cpErr.join('\\n')}`,\n      );\n    }\n  }\n};\n\nexport const modifyConditions = async (\n  updateConditions: UpdatedConditionsData,\n  rbacApi: RBACAPI,\n) => {\n  if (updateConditions.length > 0) {\n    const promises = updateConditions.map(({ id, updateCondition }) =>\n      rbacApi.updateConditionalPolicies(id, updateCondition),\n    );\n\n    const cppRes: (Response | RoleError)[] = await Promise.all(promises);\n    const cpErr = cppRes\n      .map(r => (r as unknown as RoleError).error?.message)\n      .filter(m => m);\n\n    if (cpErr.length > 0) {\n      throw new Error(`Unable to update conditions. ${cpErr.join('\\n')}`);\n    }\n  }\n};\n\nexport const createConditions = async (\n  newConditions: RoleBasedConditions[],\n  rbacApi: RBACAPI,\n  errorMsgPrefix?: string,\n) => {\n  if (newConditions.length > 0) {\n    const promises = newConditions.map(cpp =>\n      rbacApi.createConditionalPermission(cpp),\n    );\n\n    const cppRes: (Response | RoleError)[] = await Promise.all(promises);\n    const cpErr = cppRes\n      .map(r => (r as unknown as RoleError).error?.message)\n      .filter(m => m);\n\n    if (cpErr.length > 0) {\n      throw new Error(\n        `${\n          errorMsgPrefix || 'Unable to add conditions to the role.'\n        } ${cpErr.join('\\n')}`,\n      );\n    }\n  }\n};\n"],"names":[],"mappings":"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"}