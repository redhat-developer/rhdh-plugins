import { parseEntityRef, isUserEntity, stringifyEntityRef } from '@backstage/catalog-model';
import { getTitleCase } from '@janus-idp/shared-react';
import { isResourcedPolicy } from '@backstage-community/plugin-rbac-common';
import { criterias } from '../components/ConditionalAccess/const.esm.js';
import { getMembersCount } from './create-role-utils.esm.js';

const getPermissionsArray = (role, policies) => {
  if (!policies || policies?.length === 0 || !Array.isArray(policies)) {
    return [];
  }
  return policies.filter(
    (policy) => policy.entityReference === role && policy.effect !== "deny"
  );
};
const getPermissions = (role, policies) => {
  return getPermissionsArray(role, policies).length;
};
const getMembersString = (res) => {
  let membersString = "";
  if (res.users > 0) {
    membersString = `${res.users} ${res.users > 1 ? "users" : "user"}`;
  }
  if (res.groups > 0) {
    membersString = membersString.concat(
      membersString.length > 0 ? ", " : "",
      `${res.groups} ${res.groups > 1 ? "groups" : "group"}`
    );
  }
  return membersString;
};
const getMembers = (members) => {
  if (!members || members.length === 0) {
    return "No members";
  }
  const res = members.reduce(
    (acc, member) => {
      if (typeof member === "object") {
        if (member.type === "User" || member.type === "user") {
          acc.users++;
        } else {
          acc.groups++;
        }
      } else {
        const entity = parseEntityRef(member);
        if (isUserEntity(entity)) {
          acc.users++;
        } else {
          acc.groups++;
        }
      }
      return acc;
    },
    { users: 0, groups: 0 }
  );
  return getMembersString(res);
};
const getMembersFromGroup = (group) => {
  const membersList = group.relations?.reduce((acc, relation) => {
    let temp = acc;
    if (relation.type === "hasMember") {
      temp++;
    }
    return temp;
  }, 0);
  return membersList ?? 0;
};
const getPluginInfo = (permissions, permissionName) => permissions.reduce(
  (acc, p) => {
    const policy = p.policies.find((pol) => {
      if (pol.name === permissionName) {
        return true;
      }
      if (isResourcedPolicy(pol)) {
        return pol.resourceType === permissionName;
      }
      return false;
    });
    if (policy) {
      return {
        pluginId: p.pluginId || "-",
        isResourced: isResourcedPolicy(policy) || false
      };
    }
    return acc;
  },
  { pluginId: "-", isResourced: false }
);
const getPolicy = (str) => {
  const arr = str.split(".");
  return arr[arr.length - 1];
};
const getAllPolicies = (permission, allowedPolicies, policies) => {
  const deniedPolicies = policies?.reduce((acc, p) => {
    const perm = isResourcedPolicy(p) ? p.resourceType : p.name;
    if (permission === perm && !allowedPolicies.find(
      (allowedPolicy) => allowedPolicy.policy.toLocaleLowerCase("en-US") === p.policy?.toLocaleLowerCase("en-US")
    )) {
      acc.push({
        policy: getTitleCase(p.policy) || "Use",
        effect: "deny"
      });
    }
    return acc;
  }, []);
  return [...allowedPolicies || [], ...deniedPolicies || []];
};
const getPermissionsData = (policies, permissionPolicies) => {
  const data = policies.reduce(
    (acc, policy) => {
      if (policy?.effect === "allow") {
        const policyStr = policy?.policy ?? getPolicy(policy.permission);
        const policyTitleCase = getTitleCase(policyStr);
        const permission = acc.find(
          (plugin) => plugin.permission === policy.permission && !plugin.policies.has({
            policy: policyTitleCase || "Use",
            effect: "allow"
          })
        );
        if (permission) {
          permission.policyString?.add(
            policyTitleCase ? `, ${policyTitleCase}` : ", Use"
          );
          permission.policies.add({
            policy: policyTitleCase || "Use",
            effect: policy.effect
          });
        } else {
          const policyString = /* @__PURE__ */ new Set();
          const policiesSet = /* @__PURE__ */ new Set();
          acc.push({
            permission: policy.permission ?? "-",
            plugin: getPluginInfo(permissionPolicies, policy?.permission).pluginId,
            policyString: policyString.add(policyTitleCase || "Use"),
            policies: policiesSet.add({
              policy: policyTitleCase || "Use",
              effect: policy.effect
            }),
            isResourced: getPluginInfo(permissionPolicies, policy?.permission).isResourced
          });
        }
      }
      return acc;
    },
    []
  );
  return data.map((p) => ({
    ...p,
    ...p.policyString ? { policyString: Array.from(p.policyString) } : {},
    policies: getAllPolicies(
      p.permission,
      Array.from(p.policies),
      permissionPolicies.find((pp) => pp.pluginId === p.plugin)?.policies
    )
  }));
};
const getConditionUpperCriteria = (conditions) => {
  return Object.keys(conditions).find(
    (key) => [criterias.allOf, criterias.anyOf, criterias.not].includes(
      key
    )
  );
};
const getConditionsData = (conditions) => {
  const upperCriteria = getConditionUpperCriteria(conditions) ?? criterias.condition;
  switch (upperCriteria) {
    case criterias.allOf: {
      const allOfConditions = conditions.allOf;
      allOfConditions.map((aoc) => {
        if (getConditionUpperCriteria(aoc)) {
          return getConditionsData(aoc);
        }
        return aoc;
      });
      return { allOf: allOfConditions };
    }
    case criterias.anyOf: {
      const anyOfConditions = conditions.anyOf;
      anyOfConditions.map((aoc) => {
        if (getConditionUpperCriteria(aoc)) {
          return getConditionsData(aoc);
        }
        return aoc;
      });
      return { anyOf: anyOfConditions };
    }
    case criterias.not: {
      const notCondition = conditions.not;
      const nestedCondition = getConditionUpperCriteria(notCondition) ? getConditionsData(notCondition) : notCondition;
      return { not: nestedCondition };
    }
    default:
      return { condition: conditions };
  }
};
const getPoliciesData = (allowedPermissions, policies) => {
  return policies.map((p) => ({
    policy: p,
    ...allowedPermissions.includes(p.toLocaleLowerCase("en-US")) ? { effect: "allow" } : { effect: "deny" }
  }));
};
const getConditionalPermissionsData = (conditionalPermissions, permissionPolicies) => {
  return conditionalPermissions.reduce((acc, cp) => {
    const conditions = getConditionsData(cp.conditions);
    const allPolicies = permissionPolicies.pluginsPermissions?.[cp.pluginId]?.policies?.[cp.resourceType]?.policies ?? [];
    const allowedPermissions = cp.permissionMapping.map(
      (action) => action.toLocaleLowerCase("en-US")
    );
    const policyString = allowedPermissions.map((p) => p[0].toLocaleUpperCase("en-US") + p.slice(1)).join(", ");
    return [
      ...acc,
      ...conditions ? [
        {
          plugin: cp.pluginId,
          permission: cp.resourceType,
          isResourced: true,
          policies: getPoliciesData(allowedPermissions, allPolicies),
          policyString,
          conditions,
          id: cp.id
        }
      ] : []
    ];
  }, []);
};
const getSelectedMember = (memberResource, ref) => {
  if (memberResource) {
    return {
      id: memberResource.metadata.etag,
      ref: stringifyEntityRef(memberResource),
      label: memberResource.spec.profile?.displayName ?? memberResource.metadata.name,
      etag: memberResource.metadata.etag,
      type: memberResource.kind,
      namespace: memberResource.metadata.namespace,
      members: getMembersCount(memberResource)
    };
  } else if (ref) {
    const { kind, namespace, name } = parseEntityRef(ref);
    return {
      id: `${kind}-${namespace}-${name}`,
      ref,
      label: name,
      etag: `${kind}-${namespace}-${name}`,
      type: kind,
      namespace,
      members: kind === "group" ? 0 : void 0
    };
  }
  return {};
};
const isSamePermissionPolicy = (a, b) => a.entityReference === b.entityReference && a.permission === b.permission && a.policy === b.policy && a.effect === b.effect;
const onlyInLeft = (left, right, compareFunction) => left.filter(
  (leftValue) => !right.some((rightValue) => compareFunction(leftValue, rightValue))
);

export { getConditionUpperCriteria, getConditionalPermissionsData, getConditionsData, getMembers, getMembersFromGroup, getMembersString, getPermissions, getPermissionsArray, getPermissionsData, getPluginInfo, getPoliciesData, getSelectedMember, isSamePermissionPolicy, onlyInLeft };
//# sourceMappingURL=rbac-utils.esm.js.map
