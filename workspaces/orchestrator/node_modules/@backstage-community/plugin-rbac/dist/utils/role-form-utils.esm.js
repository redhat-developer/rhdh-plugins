const createPermissions = async (newPermissions, rbacApi, errorMsgPrefix) => {
  if (newPermissions.length > 0) {
    const permissionsRes = await rbacApi.createPolicies(newPermissions);
    if (permissionsRes.error) {
      throw new Error(
        `${errorMsgPrefix || "Unable to create the permission policies."} ${permissionsRes.error.message}`
      );
    }
  }
};
const removePermissions = async (name, deletePermissions, rbacApi) => {
  if (deletePermissions.length > 0) {
    const permissionsRes = await rbacApi.deletePolicies(
      name,
      deletePermissions
    );
    if (permissionsRes.error) {
      throw new Error(
        `Unable to delete the permission policies. ${permissionsRes.error.message}`
      );
    }
  }
};
const removeConditions = async (deleteConditions, rbacApi) => {
  if (deleteConditions.length > 0) {
    const promises = deleteConditions.map(
      (cid) => rbacApi.deleteConditionalPolicies(cid)
    );
    const cppRes = await Promise.all(promises);
    const cpErr = cppRes.map((r) => r.error?.message).filter((m) => m);
    if (cpErr.length > 0) {
      throw new Error(
        `Unable to remove conditions from the role. ${cpErr.join("\n")}`
      );
    }
  }
};
const modifyConditions = async (updateConditions, rbacApi) => {
  if (updateConditions.length > 0) {
    const promises = updateConditions.map(
      ({ id, updateCondition }) => rbacApi.updateConditionalPolicies(id, updateCondition)
    );
    const cppRes = await Promise.all(promises);
    const cpErr = cppRes.map((r) => r.error?.message).filter((m) => m);
    if (cpErr.length > 0) {
      throw new Error(`Unable to update conditions. ${cpErr.join("\n")}`);
    }
  }
};
const createConditions = async (newConditions, rbacApi, errorMsgPrefix) => {
  if (newConditions.length > 0) {
    const promises = newConditions.map(
      (cpp) => rbacApi.createConditionalPermission(cpp)
    );
    const cppRes = await Promise.all(promises);
    const cpErr = cppRes.map((r) => r.error?.message).filter((m) => m);
    if (cpErr.length > 0) {
      throw new Error(
        `${errorMsgPrefix || "Unable to add conditions to the role."} ${cpErr.join("\n")}`
      );
    }
  }
};

export { createConditions, createPermissions, modifyConditions, removeConditions, removePermissions };
//# sourceMappingURL=role-form-utils.esm.js.map
