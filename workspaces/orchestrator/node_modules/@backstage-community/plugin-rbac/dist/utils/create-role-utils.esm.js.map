{"version":3,"file":"create-role-utils.esm.js","sources":["../../src/utils/create-role-utils.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getTitleCase } from '@janus-idp/shared-react';\nimport * as yup from 'yup';\n\nimport {\n  isResourcedPolicy,\n  PluginPermissionMetaData,\n  PolicyDetails,\n  ResourcedPolicy,\n  Role,\n  RoleBasedPolicy,\n} from '@backstage-community/plugin-rbac-common';\n\nimport { criterias } from '../components/ConditionalAccess/const';\nimport { ConditionsData } from '../components/ConditionalAccess/types';\nimport {\n  PermissionPolicies,\n  PluginsPermissionPoliciesData,\n  PluginsPermissions,\n  RoleFormValues,\n  SelectedMember,\n} from '../components/CreateRole/types';\nimport {\n  MemberEntity,\n  PermissionsData,\n  RoleBasedConditions,\n  UpdatedConditionsData,\n} from '../types';\n\nexport const uniqBy = (arr: string[], iteratee: (arg: string) => any) => {\n  return arr.filter(\n    (x, i, self) => i === self.findIndex(y => iteratee(x) === iteratee(y)),\n  );\n};\n\nexport const getRoleData = (values: RoleFormValues): Role => {\n  return {\n    memberReferences: values.selectedMembers.map(\n      (mem: SelectedMember) => mem.ref,\n    ),\n    name: `${values.kind}:${values.namespace}/${values.name}`,\n    metadata: {\n      description: values.description,\n    },\n  };\n};\n\nexport const validationSchema = yup.object({\n  name: yup.string().required('Name is required'),\n  selectedMembers: yup.array().min(1, 'No member selected'),\n  permissionPoliciesRows: yup.array().of(\n    yup.object().shape({\n      plugin: yup.string().required('Plugin is required'),\n      permission: yup.string().required('Permission is required'),\n    }),\n  ),\n});\n\nexport const getMembersCount = (member: MemberEntity) => {\n  return member.kind === 'Group'\n    ? member.relations?.reduce((acc: any, relation: { type: string }) => {\n        let temp = acc;\n        if (relation.type === 'hasMember') {\n          temp++;\n        }\n        return temp;\n      }, 0)\n    : undefined;\n};\n\nexport const getParentGroupsCount = (member: MemberEntity) => {\n  return member.kind === 'Group'\n    ? member.relations?.reduce((acc: any, relation: { type: string }) => {\n        let temp = acc;\n        if (relation.type === 'childOf') {\n          temp++;\n        }\n        return temp;\n      }, 0)\n    : undefined;\n};\n\nexport const getChildGroupsCount = (member: MemberEntity) => {\n  return member.kind === 'Group'\n    ? member.relations?.reduce((acc: any, relation: { type: string }) => {\n        let temp = acc;\n        if (relation.type === 'parentOf') {\n          temp++;\n        }\n        return temp;\n      }, 0)\n    : undefined;\n};\n\nexport const getPermissionPolicies = (\n  policies: PolicyDetails[],\n): PermissionPolicies => {\n  return policies.reduce(\n    (ppsAcc: PermissionPolicies, policy: PolicyDetails) => {\n      const permission = isResourcedPolicy(policy)\n        ? (policy as ResourcedPolicy).resourceType\n        : policy.name;\n      return {\n        ...ppsAcc,\n        [permission]: policies.reduce(\n          (policiesAcc: { policies: string[]; isResourced: boolean }, pol) => {\n            const perm = isResourcedPolicy(pol)\n              ? (pol as ResourcedPolicy).resourceType\n              : pol.name;\n            if (permission === perm)\n              return {\n                policies: uniqBy(\n                  [...policiesAcc.policies, getTitleCase(pol.policy as string)],\n                  val => val,\n                ),\n                isResourced: isResourcedPolicy(pol),\n              };\n            return policiesAcc;\n          },\n          { policies: [], isResourced: false },\n        ),\n      };\n    },\n    {},\n  );\n};\n\nexport const getPluginsPermissionPoliciesData = (\n  pluginsPermissionPolicies: PluginPermissionMetaData[],\n): PluginsPermissionPoliciesData => {\n  const plugins: string[] = pluginsPermissionPolicies.map(\n    pluginPp => pluginPp.pluginId,\n  );\n  const pluginsPermissions = pluginsPermissionPolicies.reduce(\n    (acc: PluginsPermissions, pp, index) => {\n      const permissions = pp.policies.reduce((plcAcc: string[], plc) => {\n        const permission = isResourcedPolicy(plc)\n          ? (plc as ResourcedPolicy).resourceType\n          : plc.name;\n        return [...plcAcc, permission];\n      }, []);\n      return {\n        ...acc,\n        [plugins[index]]: {\n          permissions: uniqBy(permissions ?? [], val => val),\n          policies: {\n            ...(pp.policies ? getPermissionPolicies(pp.policies) : {}),\n          },\n        },\n      };\n    },\n    {},\n  );\n  return { plugins, pluginsPermissions };\n};\n\nexport const getPermissionPoliciesData = (\n  values: RoleFormValues,\n): RoleBasedPolicy[] => {\n  const { kind, name, namespace, permissionPoliciesRows } = values;\n\n  return permissionPoliciesRows.reduce(\n    (acc: RoleBasedPolicy[], permissionPolicyRow) => {\n      const { permission, policies, conditions } = permissionPolicyRow;\n      const permissionPoliciesData = policies.reduce(\n        (pAcc: RoleBasedPolicy[], policy) => {\n          if (policy.effect === 'allow' && !conditions) {\n            return [\n              ...pAcc,\n              {\n                entityReference: `${kind}:${namespace}/${name}`,\n                permission: `${permission}`,\n                policy: policy.policy.toLocaleLowerCase('en-US'),\n                effect: 'allow',\n              },\n            ];\n          }\n          return pAcc;\n        },\n        [],\n      );\n      return [...acc, ...permissionPoliciesData];\n    },\n    [],\n  );\n};\n\nexport const getConditionalPermissionPoliciesData = (\n  values: RoleFormValues,\n) => {\n  const { kind, name, namespace, permissionPoliciesRows } = values;\n\n  return permissionPoliciesRows.reduce(\n    (acc: RoleBasedConditions[], permissionPolicyRow: PermissionsData) => {\n      const { permission, policies, isResourced, plugin, conditions } =\n        permissionPolicyRow;\n      const permissionMapping = policies.reduce((pAcc: string[], policy) => {\n        if (policy.effect === 'allow') {\n          return [...pAcc, policy.policy.toLocaleLowerCase('en-US')];\n        }\n        return pAcc;\n      }, []);\n      return isResourced && conditions\n        ? [\n            ...acc,\n            {\n              result: 'CONDITIONAL',\n              roleEntityRef: `${kind}:${namespace}/${name}`,\n              pluginId: `${plugin}`,\n              resourceType: `${permission}`,\n              permissionMapping,\n              conditions:\n                Object.keys(conditions)[0] === criterias.condition\n                  ? { ...conditions.condition }\n                  : conditions,\n            } as RoleBasedConditions,\n          ]\n        : acc;\n    },\n    [] as RoleBasedConditions[],\n  );\n};\n\nexport const getUpdatedConditionalPolicies = (\n  values: RoleFormValues,\n  initialValues: RoleFormValues,\n): UpdatedConditionsData => {\n  const initialConditionsWithId = initialValues.permissionPoliciesRows.filter(\n    ppr => ppr.id,\n  );\n\n  const conditionsWithId = values.permissionPoliciesRows.filter(ppr => ppr.id);\n\n  return conditionsWithId.length > 0\n    ? conditionsWithId.reduce(\n        (\n          acc: { id: number; updateCondition: RoleBasedConditions }[],\n          condition: PermissionsData,\n        ) => {\n          const conditionExists = initialConditionsWithId.find(\n            c => c.id === condition.id,\n          );\n\n          if (conditionExists && condition.id)\n            return [\n              ...acc,\n              {\n                id: condition.id,\n                updateCondition: getConditionalPermissionPoliciesData({\n                  ...values,\n                  permissionPoliciesRows: [condition],\n                })[0],\n              },\n            ];\n          return acc;\n        },\n        [],\n      )\n    : [];\n};\n\nexport const getNewConditionalPolicies = (values: RoleFormValues) => {\n  const newValues = { ...values };\n  const newPermissionPolicies = values.permissionPoliciesRows.filter(\n    ppr => !ppr.id,\n  );\n  newValues.permissionPoliciesRows = newPermissionPolicies;\n  return getConditionalPermissionPoliciesData(newValues);\n};\n\nexport const getRemovedConditionalPoliciesIds = (\n  values: RoleFormValues,\n  initialValues: RoleFormValues,\n) => {\n  const initialConditionsIds = initialValues.permissionPoliciesRows\n    .map(ppr => ppr.id)\n    .filter(id => id);\n\n  const newConditionsIds = values.permissionPoliciesRows\n    .map(ppr => ppr.id)\n    .filter(id => id);\n\n  return initialConditionsIds.length > 0\n    ? initialConditionsIds.reduce((acc: number[], oldId) => {\n        const conditionExists = newConditionsIds.includes(oldId);\n        if (conditionExists) return acc;\n        return oldId ? [...acc, oldId] : acc;\n      }, [])\n    : [];\n};\n\nexport const getPermissionsNumber = (values: RoleFormValues) => {\n  return (\n    getPermissionPoliciesData(values).length +\n    getConditionalPermissionPoliciesData(values).length\n  );\n};\n\nexport const getConditionsNumber = (values: RoleFormValues) => {\n  return getConditionalPermissionPoliciesData(values)?.length ?? 0;\n};\n\nexport const getRulesNumber = (conditions?: ConditionsData) => {\n  if (!conditions) return 0;\n  let rulesNumber = 0;\n\n  if (conditions.allOf) {\n    rulesNumber += conditions.allOf.reduce((acc, condition) => {\n      return acc + getRulesNumber(condition as ConditionsData);\n    }, 0);\n  }\n\n  if (conditions.anyOf) {\n    rulesNumber += conditions.anyOf.reduce((acc, condition) => {\n      return acc + getRulesNumber(condition as ConditionsData);\n    }, 0);\n  }\n\n  if (conditions.not) {\n    rulesNumber += getRulesNumber(conditions.not as ConditionsData);\n  }\n\n  if (conditions.condition || Object.keys(conditions).includes('rule')) {\n    rulesNumber += 1;\n  }\n\n  return rulesNumber;\n};\n"],"names":[],"mappings":"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"}