{"version":3,"file":"rbac-utils.esm.js","sources":["../../src/utils/rbac-utils.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  GroupEntity,\n  isUserEntity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport {\n  AllOfCriteria,\n  AnyOfCriteria,\n  NotCriteria,\n  PermissionCondition,\n  PermissionCriteria,\n} from '@backstage/plugin-permission-common';\n\nimport { getTitleCase } from '@janus-idp/shared-react';\n\nimport {\n  isResourcedPolicy,\n  PermissionAction,\n  PluginPermissionMetaData,\n  PolicyDetails,\n  RoleBasedPolicy,\n  RoleConditionalPolicyDecision,\n} from '@backstage-community/plugin-rbac-common';\n\nimport { criterias } from '../components/ConditionalAccess/const';\nimport { ConditionsData } from '../components/ConditionalAccess/types';\nimport {\n  PluginsPermissionPoliciesData,\n  RowPolicy,\n  SelectedMember,\n} from '../components/CreateRole/types';\nimport {\n  MemberEntity,\n  MembersData,\n  PermissionsData,\n  PermissionsDataSet,\n} from '../types';\nimport { getMembersCount } from './create-role-utils';\n\nexport const getPermissionsArray = (\n  role: string,\n  policies: RoleBasedPolicy[],\n): RoleBasedPolicy[] => {\n  if (!policies || policies?.length === 0 || !Array.isArray(policies)) {\n    return [];\n  }\n  return policies.filter(\n    (policy: RoleBasedPolicy) =>\n      policy.entityReference === role && policy.effect !== 'deny',\n  );\n};\n\nexport const getPermissions = (\n  role: string,\n  policies: RoleBasedPolicy[],\n): number => {\n  return getPermissionsArray(role, policies).length;\n};\n\nexport const getMembersString = (res: {\n  users: number;\n  groups: number;\n}): string => {\n  let membersString = '';\n  if (res.users > 0) {\n    membersString = `${res.users} ${res.users > 1 ? 'users' : 'user'}`;\n  }\n  if (res.groups > 0) {\n    membersString = membersString.concat(\n      membersString.length > 0 ? ', ' : '',\n      `${res.groups} ${res.groups > 1 ? 'groups' : 'group'}`,\n    );\n  }\n  return membersString;\n};\n\nexport const getMembers = (\n  members: (string | MembersData | SelectedMember)[],\n): string => {\n  if (!members || members.length === 0) {\n    return 'No members';\n  }\n\n  const res = members.reduce(\n    (acc, member) => {\n      if (typeof member === 'object') {\n        if (member.type === 'User' || member.type === 'user') {\n          acc.users++;\n        } else {\n          acc.groups++;\n        }\n      } else {\n        const entity = parseEntityRef(member) as any;\n        if (isUserEntity(entity)) {\n          acc.users++;\n        } else {\n          acc.groups++;\n        }\n      }\n      return acc;\n    },\n    { users: 0, groups: 0 },\n  );\n\n  return getMembersString(res);\n};\n\nexport const getMembersFromGroup = (group: GroupEntity): number => {\n  const membersList = group.relations?.reduce((acc, relation) => {\n    let temp = acc;\n    if (relation.type === 'hasMember') {\n      temp++;\n    }\n    return temp;\n  }, 0);\n  return membersList ?? 0;\n};\n\nexport const getPluginInfo = (\n  permissions: PluginPermissionMetaData[],\n  permissionName?: string,\n): { pluginId: string; isResourced: boolean } =>\n  permissions.reduce(\n    (\n      acc: { pluginId: string; isResourced: boolean },\n      p: PluginPermissionMetaData,\n    ) => {\n      const policy = p.policies.find(pol => {\n        if (pol.name === permissionName) {\n          return true;\n        }\n        if (isResourcedPolicy(pol)) {\n          return pol.resourceType === permissionName;\n        }\n        return false;\n      });\n      if (policy) {\n        return {\n          pluginId: p.pluginId || '-',\n          isResourced: isResourcedPolicy(policy) || false,\n        };\n      }\n      return acc;\n    },\n    { pluginId: '-', isResourced: false },\n  );\n\nconst getPolicy = (str: string) => {\n  const arr = str.split('.');\n  return arr[arr.length - 1];\n};\n\nconst getAllPolicies = (\n  permission: string,\n  allowedPolicies: RowPolicy[],\n  policies: PolicyDetails[],\n) => {\n  const deniedPolicies = policies?.reduce((acc, p) => {\n    const perm = isResourcedPolicy(p) ? p.resourceType : p.name;\n    if (\n      permission === perm &&\n      !allowedPolicies.find(\n        allowedPolicy =>\n          allowedPolicy.policy.toLocaleLowerCase('en-US') ===\n          p.policy?.toLocaleLowerCase('en-US'),\n      )\n    ) {\n      acc.push({\n        policy: getTitleCase(p.policy) || 'Use',\n        effect: 'deny',\n      });\n    }\n    return acc;\n  }, [] as RowPolicy[]);\n  return [...(allowedPolicies || []), ...(deniedPolicies || [])];\n};\n\nexport const getPermissionsData = (\n  policies: RoleBasedPolicy[],\n  permissionPolicies: PluginPermissionMetaData[],\n): PermissionsData[] => {\n  const data = policies.reduce(\n    (acc: PermissionsDataSet[], policy: RoleBasedPolicy) => {\n      if (policy?.effect === 'allow') {\n        const policyStr =\n          policy?.policy ?? getPolicy(policy.permission as string);\n        const policyTitleCase = getTitleCase(policyStr);\n        const permission = acc.find(\n          plugin =>\n            plugin.permission === policy.permission &&\n            !plugin.policies.has({\n              policy: policyTitleCase || 'Use',\n              effect: 'allow',\n            }),\n        );\n        if (permission) {\n          permission.policyString?.add(\n            policyTitleCase ? `, ${policyTitleCase}` : ', Use',\n          );\n          permission.policies.add({\n            policy: policyTitleCase || 'Use',\n            effect: policy.effect,\n          });\n        } else {\n          const policyString = new Set<string>();\n          const policiesSet = new Set<{ policy: string; effect: string }>();\n          acc.push({\n            permission: policy.permission ?? '-',\n            plugin: getPluginInfo(permissionPolicies, policy?.permission)\n              .pluginId,\n            policyString: policyString.add(policyTitleCase || 'Use'),\n            policies: policiesSet.add({\n              policy: policyTitleCase || 'Use',\n              effect: policy.effect,\n            }),\n            isResourced: getPluginInfo(permissionPolicies, policy?.permission)\n              .isResourced,\n          });\n        }\n      }\n      return acc;\n    },\n    [],\n  );\n  return data.map((p: PermissionsDataSet) => ({\n    ...p,\n    ...(p.policyString ? { policyString: Array.from(p.policyString) } : {}),\n    policies: getAllPolicies(\n      p.permission,\n      Array.from(p.policies),\n      permissionPolicies.find(pp => pp.pluginId === p.plugin)\n        ?.policies as PolicyDetails[],\n    ),\n  })) as PermissionsData[];\n};\n\nexport const getConditionUpperCriteria = (\n  conditions: PermissionCriteria<PermissionCondition> | string,\n): string | undefined => {\n  return Object.keys(conditions).find(key =>\n    [criterias.allOf, criterias.anyOf, criterias.not].includes(\n      key as keyof ConditionsData,\n    ),\n  );\n};\n\nexport const getConditionsData = (\n  conditions: PermissionCriteria<PermissionCondition>,\n): ConditionsData | undefined => {\n  const upperCriteria =\n    getConditionUpperCriteria(conditions) ?? criterias.condition;\n\n  switch (upperCriteria) {\n    case criterias.allOf: {\n      const allOfConditions = (conditions as AllOfCriteria<PermissionCondition>)\n        .allOf;\n      allOfConditions.map(aoc => {\n        if (getConditionUpperCriteria(aoc)) {\n          return getConditionsData(aoc);\n        }\n        return aoc;\n      });\n      return { allOf: allOfConditions as PermissionCondition[] };\n    }\n    case criterias.anyOf: {\n      const anyOfConditions = (conditions as AnyOfCriteria<PermissionCondition>)\n        .anyOf;\n      anyOfConditions.map(aoc => {\n        if (getConditionUpperCriteria(aoc)) {\n          return getConditionsData(aoc);\n        }\n        return aoc;\n      });\n      return { anyOf: anyOfConditions as PermissionCondition[] };\n    }\n    case criterias.not: {\n      const notCondition = (conditions as NotCriteria<PermissionCondition>).not;\n      const nestedCondition = getConditionUpperCriteria(notCondition)\n        ? getConditionsData(notCondition)\n        : notCondition;\n      return { not: nestedCondition as PermissionCondition };\n    }\n    default:\n      return { condition: conditions as PermissionCondition };\n  }\n};\n\nexport const getPoliciesData = (\n  allowedPermissions: string[],\n  policies: string[],\n): RowPolicy[] => {\n  return policies.map(p => ({\n    policy: p,\n    ...(allowedPermissions.includes(p.toLocaleLowerCase('en-US'))\n      ? { effect: 'allow' }\n      : { effect: 'deny' }),\n  }));\n};\n\nexport const getConditionalPermissionsData = (\n  conditionalPermissions: RoleConditionalPolicyDecision<PermissionAction>[],\n  permissionPolicies: PluginsPermissionPoliciesData,\n): PermissionsData[] => {\n  return conditionalPermissions.reduce((acc: any, cp) => {\n    const conditions = getConditionsData(cp.conditions);\n    const allPolicies =\n      permissionPolicies.pluginsPermissions?.[cp.pluginId]?.policies?.[\n        cp.resourceType\n      ]?.policies ?? [];\n    const allowedPermissions = cp.permissionMapping.map(action =>\n      action.toLocaleLowerCase('en-US'),\n    );\n    const policyString = allowedPermissions\n      .map(p => p[0].toLocaleUpperCase('en-US') + p.slice(1))\n      .join(', ');\n\n    return [\n      ...acc,\n      ...(conditions\n        ? [\n            {\n              plugin: cp.pluginId,\n              permission: cp.resourceType,\n              isResourced: true,\n              policies: getPoliciesData(allowedPermissions, allPolicies),\n              policyString,\n              conditions,\n              id: cp.id,\n            },\n          ]\n        : []),\n    ];\n  }, []);\n};\n\nexport const getSelectedMember = (\n  memberResource: MemberEntity | undefined,\n  ref: string,\n): SelectedMember => {\n  if (memberResource) {\n    return {\n      id: memberResource.metadata.etag as string,\n      ref: stringifyEntityRef(memberResource),\n      label:\n        memberResource.spec.profile?.displayName ??\n        memberResource.metadata.name,\n      etag: memberResource.metadata.etag as string,\n      type: memberResource.kind,\n      namespace: memberResource.metadata.namespace as string,\n      members: getMembersCount(memberResource),\n    };\n  } else if (ref) {\n    const { kind, namespace, name } = parseEntityRef(ref);\n    return {\n      id: `${kind}-${namespace}-${name}`,\n      ref,\n      label: name,\n      etag: `${kind}-${namespace}-${name}`,\n      type: kind,\n      namespace: namespace,\n      members: kind === 'group' ? 0 : undefined,\n    };\n  }\n  return {} as SelectedMember;\n};\n\nexport const isSamePermissionPolicy = (\n  a: RoleBasedPolicy,\n  b: RoleBasedPolicy,\n) =>\n  a.entityReference === b.entityReference &&\n  a.permission === b.permission &&\n  a.policy === b.policy &&\n  a.effect === b.effect;\n\nexport const onlyInLeft = (\n  left: RoleBasedPolicy[],\n  right: RoleBasedPolicy[],\n  compareFunction: (a: RoleBasedPolicy, b: RoleBasedPolicy) => boolean,\n) =>\n  left.filter(\n    leftValue =>\n      !right.some(rightValue => compareFunction(leftValue, rightValue)),\n  );\n"],"names":[],"mappings":"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"}