'use strict';

var pluginPermissionCommon = require('@backstage/plugin-permission-common');
var pluginRbacCommon = require('@backstage-community/plugin-rbac-common');

const RoleEvents = {
  CREATE_ROLE: "CreateRole",
  UPDATE_ROLE: "UpdateRole",
  DELETE_ROLE: "DeleteRole",
  CREATE_OR_UPDATE_ROLE: "CreateOrUpdateRole",
  GET_ROLE: "GetRole",
  CREATE_ROLE_ERROR: "CreateRoleError",
  UPDATE_ROLE_ERROR: "UpdateRoleError",
  DELETE_ROLE_ERROR: "DeleteRoleError",
  GET_ROLE_ERROR: "GetRoleError"
};
const PermissionEvents = {
  CREATE_POLICY: "CreatePolicy",
  UPDATE_POLICY: "UpdatePolicy",
  DELETE_POLICY: "DeletePolicy",
  GET_POLICY: "GetPolicy",
  CREATE_POLICY_ERROR: "CreatePolicyError",
  UPDATE_POLICY_ERROR: "UpdatePolicyError",
  DELETE_POLICY_ERROR: "DeletePolicyError",
  GET_POLICY_ERROR: "GetPolicyError"
};
const EvaluationEvents = {
  PERMISSION_EVALUATION_STARTED: "PermissionEvaluationStarted",
  PERMISSION_EVALUATION_COMPLETED: "PermissionEvaluationCompleted",
  CONDITION_EVALUATION_COMPLETED: "ConditionEvaluationCompleted",
  PERMISSION_EVALUATION_FAILED: "PermissionEvaluationFailed"
};
const ListPluginPoliciesEvents = {
  GET_PLUGINS_POLICIES: "GetPluginsPolicies",
  GET_PLUGINS_POLICIES_ERROR: "GetPluginsPoliciesError"
};
const ListConditionEvents = {
  GET_CONDITION_RULES: "GetConditionRules",
  GET_CONDITION_RULES_ERROR: "GetConditionRulesError"
};
const ConditionEvents = {
  CREATE_CONDITION: "CreateCondition",
  UPDATE_CONDITION: "UpdateCondition",
  DELETE_CONDITION: "DeleteCondition",
  GET_CONDITION: "GetCondition",
  CREATE_CONDITION_ERROR: "CreateConditionError",
  UPDATE_CONDITION_ERROR: "UpdateConditionError",
  DELETE_CONDITION_ERROR: "DeleteConditionError",
  GET_CONDITION_ERROR: "GetConditionError",
  PARSE_CONDITION_ERROR: "ParseConditionError",
  CHANGE_CONDITIONAL_POLICIES_FILE_ERROR: "ChangeConditionalPoliciesError",
  CONDITIONAL_POLICIES_FILE_NOT_FOUND: "ConditionalPoliciesFileNotFound"
};
const RBAC_BACKEND = "rbac-backend";
const HANDLE_RBAC_DATA_STAGE = "handleRBACData";
const EVALUATE_PERMISSION_ACCESS_STAGE = "evaluatePermissionAccess";
const SEND_RESPONSE_STAGE = "sendResponse";
const RESPONSE_ERROR = "responseError";
function createPermissionEvaluationOptions(message, userEntityRef, request, policyDecision) {
  const auditInfo = {
    userEntityRef,
    permissionName: request.permission.name,
    action: pluginRbacCommon.toPermissionAction(request.permission.attributes)
  };
  const resourceType = request.permission.resourceType;
  if (resourceType) {
    auditInfo.resourceType = resourceType;
  }
  let eventName;
  if (!policyDecision) {
    eventName = EvaluationEvents.PERMISSION_EVALUATION_STARTED;
  } else {
    auditInfo.decision = policyDecision;
    switch (policyDecision.result) {
      case pluginPermissionCommon.AuthorizeResult.DENY:
      case pluginPermissionCommon.AuthorizeResult.ALLOW:
        eventName = EvaluationEvents.PERMISSION_EVALUATION_COMPLETED;
        break;
      case pluginPermissionCommon.AuthorizeResult.CONDITIONAL:
        eventName = EvaluationEvents.CONDITION_EVALUATION_COMPLETED;
        break;
      default:
        throw new Error("Unknown policy decision result");
    }
  }
  return {
    actorId: userEntityRef,
    message,
    eventName,
    metadata: auditInfo,
    stage: EVALUATE_PERMISSION_ACCESS_STAGE,
    status: "succeeded"
  };
}

exports.ConditionEvents = ConditionEvents;
exports.EVALUATE_PERMISSION_ACCESS_STAGE = EVALUATE_PERMISSION_ACCESS_STAGE;
exports.EvaluationEvents = EvaluationEvents;
exports.HANDLE_RBAC_DATA_STAGE = HANDLE_RBAC_DATA_STAGE;
exports.ListConditionEvents = ListConditionEvents;
exports.ListPluginPoliciesEvents = ListPluginPoliciesEvents;
exports.PermissionEvents = PermissionEvents;
exports.RBAC_BACKEND = RBAC_BACKEND;
exports.RESPONSE_ERROR = RESPONSE_ERROR;
exports.RoleEvents = RoleEvents;
exports.SEND_RESPONSE_STAGE = SEND_RESPONSE_STAGE;
exports.createPermissionEvaluationOptions = createPermissionEvaluationOptions;
//# sourceMappingURL=audit-logger.cjs.js.map
