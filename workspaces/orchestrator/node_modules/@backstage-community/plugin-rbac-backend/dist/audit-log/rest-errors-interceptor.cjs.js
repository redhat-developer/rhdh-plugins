'use strict';

var auditLogger = require('./audit-logger.cjs.js');

const eventMap = {
  "/policies": {
    POST: {
      event: auditLogger.PermissionEvents.CREATE_POLICY_ERROR,
      message: "Failed to create permission policies"
    },
    PUT: {
      event: auditLogger.PermissionEvents.UPDATE_POLICY_ERROR,
      message: "Failed to update permission policies"
    },
    DELETE: {
      event: auditLogger.PermissionEvents.DELETE_POLICY_ERROR,
      message: "Failed to delete permission policies"
    },
    GET: {
      event: auditLogger.PermissionEvents.GET_POLICY_ERROR,
      message: "Failed to get permission policies"
    }
  },
  "/roles": {
    POST: {
      event: auditLogger.RoleEvents.CREATE_ROLE_ERROR,
      message: "Failed to create role"
    },
    PUT: {
      event: auditLogger.RoleEvents.UPDATE_ROLE_ERROR,
      message: "Failed to update role"
    },
    DELETE: {
      event: auditLogger.RoleEvents.DELETE_ROLE_ERROR,
      message: "Failed to delete role"
    },
    GET: { event: auditLogger.RoleEvents.GET_ROLE_ERROR, message: "Failed to get role" }
  },
  "/roles/conditions": {
    POST: {
      event: auditLogger.ConditionEvents.CREATE_CONDITION_ERROR,
      message: "Failed to create condition"
    },
    PUT: {
      event: auditLogger.ConditionEvents.UPDATE_CONDITION_ERROR,
      message: "Failed to update condition"
    },
    DELETE: {
      event: auditLogger.ConditionEvents.DELETE_CONDITION_ERROR,
      message: "Failed to delete condition"
    },
    GET: {
      event: auditLogger.ConditionEvents.GET_CONDITION_ERROR,
      message: "Failed to get condition"
    }
  },
  "/plugins/policies": {
    GET: {
      event: auditLogger.ListPluginPoliciesEvents.GET_PLUGINS_POLICIES_ERROR,
      message: "Failed to get list permission policies"
    }
  },
  "/plugins/condition-rules": {
    GET: {
      event: auditLogger.ListConditionEvents.GET_CONDITION_RULES_ERROR,
      message: "Failed to get list condition rules and schemas"
    }
  }
};
function auditError(auditLogger$1) {
  return async (err, req, _resp, next) => {
    const matchedPath = Object.keys(eventMap).find(
      (path) => req.path.startsWith(path)
    );
    if (matchedPath) {
      const methodEvents = eventMap[matchedPath][req.method];
      if (methodEvents) {
        const { event, message } = methodEvents;
        try {
          await auditLogger$1.auditLog({
            message,
            eventName: event,
            stage: auditLogger.RESPONSE_ERROR,
            status: "failed",
            request: req,
            errors: [err]
          });
          next(err);
        } catch (auditLogError) {
          next(auditLogError);
        }
        return;
      }
    }
    next(err);
  };
}

exports.auditError = auditError;
//# sourceMappingURL=rest-errors-interceptor.cjs.js.map
