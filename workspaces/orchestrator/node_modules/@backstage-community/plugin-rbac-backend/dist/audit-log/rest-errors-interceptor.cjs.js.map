{"version":3,"file":"rest-errors-interceptor.cjs.js","sources":["../../src/audit-log/rest-errors-interceptor.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { AuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';\nimport type {\n  ErrorRequestHandler,\n  NextFunction,\n  Request,\n  Response,\n} from 'express';\n\nimport {\n  ConditionEvents,\n  ListConditionEvents,\n  ListPluginPoliciesEvents,\n  PermissionEvents,\n  RESPONSE_ERROR,\n  RoleEvents,\n} from './audit-logger';\n\n// Mapping paths and methods to corresponding events and messages\nconst eventMap: {\n  [key: string]: { [key: string]: { event: string; message: string } };\n} = {\n  '/policies': {\n    POST: {\n      event: PermissionEvents.CREATE_POLICY_ERROR,\n      message: 'Failed to create permission policies',\n    },\n    PUT: {\n      event: PermissionEvents.UPDATE_POLICY_ERROR,\n      message: 'Failed to update permission policies',\n    },\n    DELETE: {\n      event: PermissionEvents.DELETE_POLICY_ERROR,\n      message: 'Failed to delete permission policies',\n    },\n    GET: {\n      event: PermissionEvents.GET_POLICY_ERROR,\n      message: 'Failed to get permission policies',\n    },\n  },\n  '/roles': {\n    POST: {\n      event: RoleEvents.CREATE_ROLE_ERROR,\n      message: 'Failed to create role',\n    },\n    PUT: {\n      event: RoleEvents.UPDATE_ROLE_ERROR,\n      message: 'Failed to update role',\n    },\n    DELETE: {\n      event: RoleEvents.DELETE_ROLE_ERROR,\n      message: 'Failed to delete role',\n    },\n    GET: { event: RoleEvents.GET_ROLE_ERROR, message: 'Failed to get role' },\n  },\n  '/roles/conditions': {\n    POST: {\n      event: ConditionEvents.CREATE_CONDITION_ERROR,\n      message: 'Failed to create condition',\n    },\n    PUT: {\n      event: ConditionEvents.UPDATE_CONDITION_ERROR,\n      message: 'Failed to update condition',\n    },\n    DELETE: {\n      event: ConditionEvents.DELETE_CONDITION_ERROR,\n      message: 'Failed to delete condition',\n    },\n    GET: {\n      event: ConditionEvents.GET_CONDITION_ERROR,\n      message: 'Failed to get condition',\n    },\n  },\n  '/plugins/policies': {\n    GET: {\n      event: ListPluginPoliciesEvents.GET_PLUGINS_POLICIES_ERROR,\n      message: 'Failed to get list permission policies',\n    },\n  },\n  '/plugins/condition-rules': {\n    GET: {\n      event: ListConditionEvents.GET_CONDITION_RULES_ERROR,\n      message: 'Failed to get list condition rules and schemas',\n    },\n  },\n};\n\n// Audit log REST api errors interceptor.\nexport function auditError(auditLogger: AuditLogger): ErrorRequestHandler {\n  return async (\n    err: Error,\n    req: Request,\n    _resp: Response,\n    next: NextFunction,\n  ) => {\n    const matchedPath = Object.keys(eventMap).find(path =>\n      req.path.startsWith(path),\n    );\n    if (matchedPath) {\n      const methodEvents = eventMap[matchedPath][req.method];\n      if (methodEvents) {\n        const { event, message } = methodEvents;\n        try {\n          await auditLogger.auditLog({\n            message,\n            eventName: event,\n            stage: RESPONSE_ERROR,\n            status: 'failed',\n            request: req,\n            errors: [err],\n          });\n          next(err);\n        } catch (auditLogError) {\n          next(auditLogError);\n        }\n        return;\n      }\n    }\n    next(err);\n  };\n}\n"],"names":["PermissionEvents","RoleEvents","ConditionEvents","ListPluginPoliciesEvents","ListConditionEvents","auditLogger","RESPONSE_ERROR"],"mappings":"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"}