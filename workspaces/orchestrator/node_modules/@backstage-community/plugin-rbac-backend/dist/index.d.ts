import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { LoggerService, DiscoveryService, AuthService, HttpAuthService, UserInfoService, LifecycleService } from '@backstage/backend-plugin-api';
import { Config } from '@backstage/config';
import express, { Router } from 'express';
import { PermissionEvaluator } from '@backstage/plugin-permission-common';
import { PermissionPolicy } from '@backstage/plugin-permission-node';
import { PluginIdProvider, RBACProvider } from '@backstage-community/plugin-rbac-node';
export { PluginIdProvider } from '@backstage-community/plugin-rbac-node';

interface RouterOptions {
    logger: LoggerService;
    config: Config;
}
declare function createRouter(options: RouterOptions): Promise<express.Router>;

type EnvOptions = {
    config: Config;
    logger: LoggerService;
    discovery: DiscoveryService;
    permissions: PermissionEvaluator;
    auth: AuthService;
    httpAuth: HttpAuthService;
    userInfo: UserInfoService;
    lifecycle: LifecycleService;
};
type RBACRouterOptions = {
    config: Config;
    logger: LoggerService;
    discovery: DiscoveryService;
    policy: PermissionPolicy;
    auth: AuthService;
    httpAuth: HttpAuthService;
    userInfo: UserInfoService;
};
declare class PolicyBuilder {
    static build(env: EnvOptions, pluginIdProvider?: PluginIdProvider, rbacProviders?: Array<RBACProvider>): Promise<Router>;
}

/**
 * RBAC plugin
 *
 */
declare const rbacPlugin: _backstage_backend_plugin_api.BackendFeature;

export { type EnvOptions, PolicyBuilder, type RBACRouterOptions, type RouterOptions, createRouter, rbacPlugin as default };
