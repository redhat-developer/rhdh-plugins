{"version":3,"file":"file-watcher.cjs.js","sources":["../../src/file-permissions/file-watcher.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { LoggerService } from '@backstage/backend-plugin-api';\n\nimport chokidar from 'chokidar';\n\nimport fs from 'fs';\n\n/**\n * Represents a file watcher that can be used to monitor changes in a file.\n */\nexport abstract class AbstractFileWatcher<T> {\n  constructor(\n    protected readonly filePath: string | undefined,\n    protected readonly allowReload: boolean,\n    protected readonly logger: LoggerService,\n  ) {}\n\n  /**\n   * Initializes the file watcher and starts watching the specified file.\n   */\n  abstract initialize(): Promise<void>;\n\n  /**\n   * watchFile initializes the file watcher and sets it to begin watching for changes.\n   */\n  watchFile(): void {\n    if (!this.filePath) {\n      throw new Error('File path is not specified');\n    }\n    const watcher = chokidar.watch(this.filePath);\n    watcher.on('change', async path => {\n      this.logger.info(`file ${path} has changed`);\n      await this.onChange();\n    });\n    watcher.on('error', error => {\n      this.logger.error(`error watching file ${this.filePath}: ${error}`);\n    });\n  }\n\n  /**\n   * Handles the change event when the watched file is modified.\n   * @returns A promise that resolves when the change event is handled.\n   */\n  abstract onChange(): Promise<void>;\n\n  /**\n   * getCurrentContents reads the current contents of the CSV file.\n   * @returns The current contents of the file.\n   */\n  getCurrentContents(): string {\n    if (!this.filePath) {\n      throw new Error('File path is not specified');\n    }\n    return fs.readFileSync(this.filePath, 'utf-8');\n  }\n\n  /**\n   * parse is used to parse the current contents of the file.\n   * @returns The file parsed into a type <T>.\n   */\n  abstract parse(): T;\n}\n"],"names":["chokidar","fs"],"mappings":";;;;;;;;;;AAwBO,MAAe,mBAAuB,CAAA;AAAA,EAC3C,WAAA,CACqB,QACA,EAAA,WAAA,EACA,MACnB,EAAA;AAHmB,IAAA,IAAA,CAAA,QAAA,GAAA,QAAA;AACA,IAAA,IAAA,CAAA,WAAA,GAAA,WAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAAA;AAClB;AAAA;AAAA;AAAA,EAUH,SAAkB,GAAA;AAChB,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAM,MAAA,IAAI,MAAM,4BAA4B,CAAA;AAAA;AAE9C,IAAA,MAAM,OAAU,GAAAA,yBAAA,CAAS,KAAM,CAAA,IAAA,CAAK,QAAQ,CAAA;AAC5C,IAAQ,OAAA,CAAA,EAAA,CAAG,QAAU,EAAA,OAAM,IAAQ,KAAA;AACjC,MAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,CAAQ,KAAA,EAAA,IAAI,CAAc,YAAA,CAAA,CAAA;AAC3C,MAAA,MAAM,KAAK,QAAS,EAAA;AAAA,KACrB,CAAA;AACD,IAAQ,OAAA,CAAA,EAAA,CAAG,SAAS,CAAS,KAAA,KAAA;AAC3B,MAAA,IAAA,CAAK,OAAO,KAAM,CAAA,CAAA,oBAAA,EAAuB,KAAK,QAAQ,CAAA,EAAA,EAAK,KAAK,CAAE,CAAA,CAAA;AAAA,KACnE,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA,EAYA,kBAA6B,GAAA;AAC3B,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAM,MAAA,IAAI,MAAM,4BAA4B,CAAA;AAAA;AAE9C,IAAA,OAAOC,mBAAG,CAAA,YAAA,CAAa,IAAK,CAAA,QAAA,EAAU,OAAO,CAAA;AAAA;AAQjD;;;;"}