{"version":3,"file":"member-list.cjs.js","sources":["../../src/role-manager/member-list.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Knex } from 'knex';\n\nexport class RoleMemberList {\n  public name: string;\n\n  private members: string[];\n  private roles: string[];\n\n  public constructor(name: string) {\n    this.name = name;\n    this.members = [];\n    this.roles = [];\n  }\n\n  /**\n   * addMembers will add members to the RoleMemberList\n   * @param members The members to be added.\n   */\n  public addMembers(members: string[]): void {\n    this.members = members;\n  }\n\n  /**\n   * addMember will add a single member to the RoleMemberList, skips adding the user in the\n   * event that they already exist in the members array.\n   * @param member The member to be added.\n   */\n  public addMember(member: string): void {\n    if (this.members.some(n => n === member)) {\n      return;\n    }\n    this.members.push(member);\n  }\n\n  /**\n   * hasMember will check if a particular member exists in the members array.\n   * @param name The member to be checked for.\n   */\n  public hasMember(name: string): boolean {\n    return this.members.includes(name);\n  }\n\n  /**\n   * deleteMember will remove a user from the members array.\n   * @param member The member to be removed.\n   */\n  public deleteMember(member: string): void {\n    this.members = this.members.filter(n => n !== member);\n  }\n\n  /**\n   * buildMembers will query the `casbin_rule` database table to ensure that the role\n   * that we have cached is up to date.\n   * This is important in multi node scenarios where the cached roles in role manager can become\n   * out of sync with the database.\n   * @param roleMemberList The RoleMemberList to be updated.\n   * @param client The database client.\n   */\n  public async buildMembers(\n    roleMemberList: RoleMemberList,\n    client: Knex,\n  ): Promise<void> {\n    try {\n      const members: string[] = await client\n        .table('casbin_rule')\n        .where('v1', this.name)\n        .pluck('v0')\n        .distinct();\n\n      roleMemberList.addMembers(members);\n    } catch (error) {\n      throw new Error(\n        `Unable to find members for the role ${this.name}. Cause: ${error}`,\n      );\n    }\n  }\n\n  /**\n   * getMembers will return the members of the RoleMemberList\n   * @returns The members.\n   */\n  getMembers(): string[] {\n    return this.members;\n  }\n\n  /**\n   * addRoles will add roles to the RoleMemberList\n   * @param roles The roles to be added.\n   */\n  public addRoles(roles: string[]): void {\n    this.roles = roles;\n  }\n\n  /**\n   * buildRoles will query the `casbin_rule` database table to quickly grab all of the\n   * roles that a particular user is attached to.\n   * @param roleMemberList The RoleMemberList to be updated.\n   * @param userAndGroups The user and groups to query with.\n   * @param client The database client.\n   */\n  public async buildRoles(\n    roleMemberList: RoleMemberList,\n    userAndGroups: string[],\n    client: Knex,\n  ): Promise<void> {\n    try {\n      const roles: string[] = await client\n        .table('casbin_rule')\n        .whereIn('v0', userAndGroups)\n        .pluck('v1')\n        .distinct();\n\n      roleMemberList.addRoles(roles);\n    } catch (error) {\n      throw new Error(`Unable to find all roles. Cause: ${error}`);\n    }\n  }\n\n  /**\n   * getRoles will return the roles of the RoleMemberList.\n   * @returns The roles.\n   */\n  getRoles(): string[] {\n    return this.roles;\n  }\n}\n"],"names":[],"mappings":";;AAiBO,MAAM,cAAe,CAAA;AAAA,EACnB,IAAA;AAAA,EAEC,OAAA;AAAA,EACA,KAAA;AAAA,EAED,YAAY,IAAc,EAAA;AAC/B,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,IAAA,IAAA,CAAK,UAAU,EAAC;AAChB,IAAA,IAAA,CAAK,QAAQ,EAAC;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA,EAMO,WAAW,OAAyB,EAAA;AACzC,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAU,MAAsB,EAAA;AACrC,IAAA,IAAI,KAAK,OAAQ,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,KAAM,MAAM,CAAG,EAAA;AACxC,MAAA;AAAA;AAEF,IAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,MAAM,CAAA;AAAA;AAC1B;AAAA;AAAA;AAAA;AAAA,EAMO,UAAU,IAAuB,EAAA;AACtC,IAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAS,IAAI,CAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,MAAsB,EAAA;AACxC,IAAA,IAAA,CAAK,UAAU,IAAK,CAAA,OAAA,CAAQ,MAAO,CAAA,CAAA,CAAA,KAAK,MAAM,MAAM,CAAA;AAAA;AACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,YACX,CAAA,cAAA,EACA,MACe,EAAA;AACf,IAAI,IAAA;AACF,MAAA,MAAM,OAAoB,GAAA,MAAM,MAC7B,CAAA,KAAA,CAAM,aAAa,CACnB,CAAA,KAAA,CAAM,IAAM,EAAA,IAAA,CAAK,IAAI,CAAA,CACrB,KAAM,CAAA,IAAI,EACV,QAAS,EAAA;AAEZ,MAAA,cAAA,CAAe,WAAW,OAAO,CAAA;AAAA,aAC1B,KAAO,EAAA;AACd,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAuC,oCAAA,EAAA,IAAA,CAAK,IAAI,CAAA,SAAA,EAAY,KAAK,CAAA;AAAA,OACnE;AAAA;AACF;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,UAAuB,GAAA;AACrB,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA,EAMO,SAAS,KAAuB,EAAA;AACrC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAAA;AACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,UAAA,CACX,cACA,EAAA,aAAA,EACA,MACe,EAAA;AACf,IAAI,IAAA;AACF,MAAA,MAAM,KAAkB,GAAA,MAAM,MAC3B,CAAA,KAAA,CAAM,aAAa,CAAA,CACnB,OAAQ,CAAA,IAAA,EAAM,aAAa,CAAA,CAC3B,KAAM,CAAA,IAAI,EACV,QAAS,EAAA;AAEZ,MAAA,cAAA,CAAe,SAAS,KAAK,CAAA;AAAA,aACtB,KAAO,EAAA;AACd,MAAA,MAAM,IAAI,KAAA,CAAM,CAAoC,iCAAA,EAAA,KAAK,CAAE,CAAA,CAAA;AAAA;AAC7D;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,QAAqB,GAAA;AACnB,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AAEhB;;;;"}