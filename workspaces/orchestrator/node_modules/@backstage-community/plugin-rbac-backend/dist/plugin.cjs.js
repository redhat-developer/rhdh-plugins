'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginRbacBackend = require('@backstage-community/plugin-rbac-backend');
var pluginRbacNode = require('@backstage-community/plugin-rbac-node');

const rbacPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "permission",
  register(env) {
    const pluginIdProviderExtensionPointImpl = new class PluginIdProviderImpl {
      pluginIdProviders = [];
      addPluginIdProvider(pluginIdProvider) {
        this.pluginIdProviders.push(pluginIdProvider);
      }
    }();
    env.registerExtensionPoint(
      pluginRbacNode.pluginIdProviderExtensionPoint,
      pluginIdProviderExtensionPointImpl
    );
    const rbacProviders = new Array();
    env.registerExtensionPoint(pluginRbacNode.rbacProviderExtensionPoint, {
      addRBACProvider(...providers) {
        rbacProviders.push(...providers.flat());
      }
    });
    env.registerInit({
      deps: {
        http: backendPluginApi.coreServices.httpRouter,
        config: backendPluginApi.coreServices.rootConfig,
        logger: backendPluginApi.coreServices.logger,
        discovery: backendPluginApi.coreServices.discovery,
        permissions: backendPluginApi.coreServices.permissions,
        auth: backendPluginApi.coreServices.auth,
        httpAuth: backendPluginApi.coreServices.httpAuth,
        userInfo: backendPluginApi.coreServices.userInfo,
        lifecycle: backendPluginApi.coreServices.lifecycle
      },
      async init({
        http,
        config,
        logger,
        discovery,
        permissions,
        auth,
        httpAuth,
        userInfo,
        lifecycle
      }) {
        http.use(
          await pluginRbacBackend.PolicyBuilder.build(
            {
              config,
              logger,
              discovery,
              permissions,
              auth,
              httpAuth,
              userInfo,
              lifecycle
            },
            {
              getPluginIds: () => Array.from(
                new Set(
                  pluginIdProviderExtensionPointImpl.pluginIdProviders.flatMap(
                    (p) => p.getPluginIds()
                  )
                )
              )
            },
            rbacProviders
          )
        );
      }
    });
  }
});

exports.rbacPlugin = rbacPlugin;
//# sourceMappingURL=plugin.cjs.js.map
