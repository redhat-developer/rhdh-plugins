'use strict';

var database = require('@backstage/backend-defaults/database');
var catalogClient = require('@backstage/catalog-client');
var backstagePluginAuditLogNode = require('@janus-idp/backstage-plugin-audit-log-node');
var casbin = require('casbin');
var casbinAdapterFactory = require('../database/casbin-adapter-factory.cjs.js');
var conditionalStorage = require('../database/conditional-storage.cjs.js');
var migration = require('../database/migration.cjs.js');
var roleMetadata = require('../database/role-metadata.cjs.js');
var allowAllPolicy = require('../policies/allow-all-policy.cjs.js');
var permissionPolicy = require('../policies/permission-policy.cjs.js');
var connectProviders = require('../providers/connect-providers.cjs.js');
var roleManager = require('../role-manager/role-manager.cjs.js');
var enforcerDelegate = require('./enforcer-delegate.cjs.js');
var permissionModel = require('./permission-model.cjs.js');
var pluginEndpoints = require('./plugin-endpoints.cjs.js');
var policiesRestApi = require('./policies-rest-api.cjs.js');

class PolicyBuilder {
  static async build(env, pluginIdProvider = { getPluginIds: () => [] }, rbacProviders) {
    let policy;
    const databaseManager = database.DatabaseManager.fromConfig(env.config).forPlugin(
      "permission",
      { logger: env.logger, lifecycle: env.lifecycle }
    );
    const databaseClient = await databaseManager.getClient();
    const adapter = await new casbinAdapterFactory.CasbinDBAdapterFactory(
      env.config,
      databaseClient
    ).createAdapter();
    const enf = await casbin.newEnforcer(casbin.newModelFromString(permissionModel.MODEL), adapter);
    await enf.loadPolicy();
    enf.enableAutoSave(true);
    const catalogClient$1 = new catalogClient.CatalogClient({ discoveryApi: env.discovery });
    const catalogDBClient = await database.DatabaseManager.fromConfig(env.config).forPlugin("catalog", { logger: env.logger, lifecycle: env.lifecycle }).getClient();
    const rm = new roleManager.BackstageRoleManager(
      catalogClient$1,
      env.logger,
      catalogDBClient,
      databaseClient,
      env.config,
      env.auth
    );
    enf.setRoleManager(rm);
    enf.enableAutoBuildRoleLinks(false);
    await enf.buildRoleLinks();
    await migration.migrate(databaseManager);
    const conditionStorage = new conditionalStorage.DataBaseConditionalStorage(databaseClient);
    const roleMetadataStorage = new roleMetadata.DataBaseRoleMetadataStorage(databaseClient);
    const enforcerDelegate$1 = new enforcerDelegate.EnforcerDelegate(
      enf,
      roleMetadataStorage,
      databaseClient
    );
    const defAuditLog = new backstagePluginAuditLogNode.DefaultAuditLogger({
      logger: env.logger,
      authService: env.auth,
      httpAuthService: env.httpAuth
    });
    if (rbacProviders) {
      await connectProviders.connectRBACProviders(
        rbacProviders,
        enforcerDelegate$1,
        roleMetadataStorage,
        env.logger,
        defAuditLog
      );
    }
    const pluginIdsConfig = env.config.getOptionalStringArray(
      "permission.rbac.pluginsWithPermission"
    );
    if (pluginIdsConfig) {
      const pluginIds = /* @__PURE__ */ new Set([
        ...pluginIdsConfig,
        ...pluginIdProvider.getPluginIds()
      ]);
      pluginIdProvider.getPluginIds = () => {
        return [...pluginIds];
      };
    }
    const pluginPermMetaData = new pluginEndpoints.PluginPermissionMetadataCollector({
      deps: {
        discovery: env.discovery,
        pluginIdProvider,
        logger: env.logger,
        config: env.config
      }
    });
    const isPluginEnabled = env.config.getOptionalBoolean("permission.enabled");
    if (isPluginEnabled) {
      env.logger.info("RBAC backend plugin was enabled");
      policy = await permissionPolicy.RBACPermissionPolicy.build(
        env.logger,
        defAuditLog,
        env.config,
        conditionStorage,
        enforcerDelegate$1,
        roleMetadataStorage,
        databaseClient,
        pluginPermMetaData,
        env.auth
      );
    } else {
      env.logger.warn(
        "RBAC backend plugin was disabled by application config permission.enabled: false"
      );
      policy = new allowAllPolicy.AllowAllPolicy();
    }
    const options = {
      config: env.config,
      logger: env.logger,
      discovery: env.discovery,
      policy,
      auth: env.auth,
      httpAuth: env.httpAuth,
      userInfo: env.userInfo
    };
    const server = new policiesRestApi.PoliciesServer(
      env.permissions,
      options,
      enforcerDelegate$1,
      conditionStorage,
      pluginPermMetaData,
      roleMetadataStorage,
      defAuditLog,
      rbacProviders
    );
    return server.serve();
  }
}

exports.PolicyBuilder = PolicyBuilder;
//# sourceMappingURL=policy-builder.cjs.js.map
