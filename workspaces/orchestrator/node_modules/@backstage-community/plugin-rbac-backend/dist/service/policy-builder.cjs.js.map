{"version":3,"file":"policy-builder.cjs.js","sources":["../../src/service/policy-builder.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DatabaseManager } from '@backstage/backend-defaults/database';\nimport type {\n  AuthService,\n  DiscoveryService,\n  HttpAuthService,\n  LifecycleService,\n  LoggerService,\n  UserInfoService,\n} from '@backstage/backend-plugin-api';\nimport { CatalogClient } from '@backstage/catalog-client';\nimport type { Config } from '@backstage/config';\nimport type { PermissionEvaluator } from '@backstage/plugin-permission-common';\nimport { PermissionPolicy } from '@backstage/plugin-permission-node';\n\nimport { DefaultAuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';\nimport { newEnforcer, newModelFromString } from 'casbin';\nimport type { Router } from 'express';\n\nimport type {\n  PluginIdProvider,\n  RBACProvider,\n} from '@backstage-community/plugin-rbac-node';\n\nimport { CasbinDBAdapterFactory } from '../database/casbin-adapter-factory';\nimport { DataBaseConditionalStorage } from '../database/conditional-storage';\nimport { migrate } from '../database/migration';\nimport { DataBaseRoleMetadataStorage } from '../database/role-metadata';\nimport { AllowAllPolicy } from '../policies/allow-all-policy';\nimport { RBACPermissionPolicy } from '../policies/permission-policy';\nimport { connectRBACProviders } from '../providers/connect-providers';\nimport { BackstageRoleManager } from '../role-manager/role-manager';\nimport { EnforcerDelegate } from './enforcer-delegate';\nimport { MODEL } from './permission-model';\nimport { PluginPermissionMetadataCollector } from './plugin-endpoints';\nimport { PoliciesServer } from './policies-rest-api';\n\nexport type EnvOptions = {\n  config: Config;\n  logger: LoggerService;\n  discovery: DiscoveryService;\n  permissions: PermissionEvaluator;\n  auth: AuthService;\n  httpAuth: HttpAuthService;\n  userInfo: UserInfoService;\n  lifecycle: LifecycleService;\n};\n\nexport type RBACRouterOptions = {\n  config: Config;\n  logger: LoggerService;\n  discovery: DiscoveryService;\n  policy: PermissionPolicy;\n  auth: AuthService;\n  httpAuth: HttpAuthService;\n  userInfo: UserInfoService;\n};\n\nexport class PolicyBuilder {\n  public static async build(\n    env: EnvOptions,\n    pluginIdProvider: PluginIdProvider = { getPluginIds: () => [] },\n    rbacProviders?: Array<RBACProvider>,\n  ): Promise<Router> {\n    let policy: PermissionPolicy;\n\n    const databaseManager = DatabaseManager.fromConfig(env.config).forPlugin(\n      'permission',\n      { logger: env.logger, lifecycle: env.lifecycle },\n    );\n\n    const databaseClient = await databaseManager.getClient();\n\n    const adapter = await new CasbinDBAdapterFactory(\n      env.config,\n      databaseClient,\n    ).createAdapter();\n\n    const enf = await newEnforcer(newModelFromString(MODEL), adapter);\n    await enf.loadPolicy();\n    enf.enableAutoSave(true);\n\n    const catalogClient = new CatalogClient({ discoveryApi: env.discovery });\n    const catalogDBClient = await DatabaseManager.fromConfig(env.config)\n      .forPlugin('catalog', { logger: env.logger, lifecycle: env.lifecycle })\n      .getClient();\n\n    const rm = new BackstageRoleManager(\n      catalogClient,\n      env.logger,\n      catalogDBClient,\n      databaseClient,\n      env.config,\n      env.auth,\n    );\n    enf.setRoleManager(rm);\n    enf.enableAutoBuildRoleLinks(false);\n    await enf.buildRoleLinks();\n\n    await migrate(databaseManager);\n\n    const conditionStorage = new DataBaseConditionalStorage(databaseClient);\n\n    const roleMetadataStorage = new DataBaseRoleMetadataStorage(databaseClient);\n    const enforcerDelegate = new EnforcerDelegate(\n      enf,\n      roleMetadataStorage,\n      databaseClient,\n    );\n\n    const defAuditLog = new DefaultAuditLogger({\n      logger: env.logger,\n      authService: env.auth,\n      httpAuthService: env.httpAuth,\n    });\n\n    if (rbacProviders) {\n      await connectRBACProviders(\n        rbacProviders,\n        enforcerDelegate,\n        roleMetadataStorage,\n        env.logger,\n        defAuditLog,\n      );\n    }\n\n    const pluginIdsConfig = env.config.getOptionalStringArray(\n      'permission.rbac.pluginsWithPermission',\n    );\n    if (pluginIdsConfig) {\n      const pluginIds = new Set([\n        ...pluginIdsConfig,\n        ...pluginIdProvider.getPluginIds(),\n      ]);\n      pluginIdProvider.getPluginIds = () => {\n        return [...pluginIds];\n      };\n    }\n\n    const pluginPermMetaData = new PluginPermissionMetadataCollector({\n      deps: {\n        discovery: env.discovery,\n        pluginIdProvider: pluginIdProvider,\n        logger: env.logger,\n        config: env.config,\n      },\n    });\n\n    const isPluginEnabled = env.config.getOptionalBoolean('permission.enabled');\n    if (isPluginEnabled) {\n      env.logger.info('RBAC backend plugin was enabled');\n\n      policy = await RBACPermissionPolicy.build(\n        env.logger,\n        defAuditLog,\n        env.config,\n        conditionStorage,\n        enforcerDelegate,\n        roleMetadataStorage,\n        databaseClient,\n        pluginPermMetaData,\n        env.auth,\n      );\n    } else {\n      env.logger.warn(\n        'RBAC backend plugin was disabled by application config permission.enabled: false',\n      );\n\n      policy = new AllowAllPolicy();\n    }\n\n    const options: RBACRouterOptions = {\n      config: env.config,\n      logger: env.logger,\n      discovery: env.discovery,\n      policy,\n      auth: env.auth,\n      httpAuth: env.httpAuth,\n      userInfo: env.userInfo,\n    };\n\n    const server = new PoliciesServer(\n      env.permissions,\n      options,\n      enforcerDelegate,\n      conditionStorage,\n      pluginPermMetaData,\n      roleMetadataStorage,\n      defAuditLog,\n      rbacProviders,\n    );\n    return server.serve();\n  }\n}\n"],"names":["DatabaseManager","CasbinDBAdapterFactory","newEnforcer","newModelFromString","MODEL","catalogClient","CatalogClient","BackstageRoleManager","migrate","DataBaseConditionalStorage","DataBaseRoleMetadataStorage","enforcerDelegate","EnforcerDelegate","DefaultAuditLogger","connectRBACProviders","PluginPermissionMetadataCollector","RBACPermissionPolicy","AllowAllPolicy","PoliciesServer"],"mappings":"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"}