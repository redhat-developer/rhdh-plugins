{"version":3,"file":"createPermissionRule.cjs.js","sources":["../../src/integration/createPermissionRule.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PermissionCriteria,\n  PermissionRuleParams,\n} from '@backstage/plugin-permission-common';\nimport { PermissionRule } from '../types';\nimport { z } from 'zod';\nimport { PermissionResourceRef } from './createPermissionResourceRef';\nimport { NoInfer } from './util';\n\n/**\n * @public\n */\nexport type CreatePermissionRuleOptions<\n  TResource,\n  TQuery,\n  TQueryOutput extends TQuery,\n  TResourceType extends string,\n  TParams extends PermissionRuleParams,\n> = {\n  name: string;\n  description: string;\n\n  resourceRef: PermissionResourceRef<TResource, TQuery, TResourceType>;\n\n  /**\n   * A ZodSchema that reflects the structure of the parameters that are passed to\n   */\n  paramsSchema?: z.ZodSchema<TParams>;\n\n  /**\n   * Apply this rule to a resource already loaded from a backing data source. The params are\n   * arguments supplied for the rule; for example, a rule could be `isOwner` with entityRefs as the\n   * params.\n   */\n  apply(resource: TResource, params: NoInfer<TParams>): boolean;\n\n  /**\n   * Translate this rule to criteria suitable for use in querying a backing data store. The criteria\n   * can be used for loading a collection of resources efficiently with conditional criteria already\n   * applied.\n   */\n  toQuery(params: NoInfer<TParams>): PermissionCriteria<TQueryOutput>;\n};\n\n/**\n * Helper function to create a {@link PermissionRule} for a specific resource type using a {@link PermissionResourceRef}.\n *\n * @public\n */\nexport function createPermissionRule<\n  TResource,\n  TQuery,\n  TQueryOutput extends TQuery,\n  TResourceType extends string,\n  TParams extends PermissionRuleParams = undefined,\n>(\n  rule: CreatePermissionRuleOptions<\n    TResource,\n    TQuery,\n    TQueryOutput,\n    TResourceType,\n    TParams\n  >,\n): PermissionRule<TResource, TQuery, TResourceType, TParams>;\n/**\n * Helper function to ensure that {@link PermissionRule} definitions are typed correctly.\n *\n * @deprecated Use the version of `createPermissionRule` that accepts a `resourceRef` option instead.\n * @public\n */\nexport function createPermissionRule<\n  TResource,\n  TQuery,\n  TResourceType extends string,\n  TParams extends PermissionRuleParams = undefined,\n>(\n  rule: PermissionRule<TResource, TQuery, TResourceType, TParams>,\n): PermissionRule<TResource, TQuery, TResourceType, TParams>;\nexport function createPermissionRule<\n  TResource,\n  TQuery,\n  TQueryOutput extends TQuery,\n  TResourceType extends string,\n  TParams extends PermissionRuleParams = undefined,\n>(\n  rule:\n    | PermissionRule<TResource, TQuery, TResourceType, TParams>\n    | CreatePermissionRuleOptions<\n        TResource,\n        TQuery,\n        TQueryOutput,\n        TResourceType,\n        TParams\n      >,\n): PermissionRule<TResource, TQuery, TResourceType, TParams> {\n  if ('resourceRef' in rule) {\n    return { ...rule, resourceType: rule.resourceRef.resourceType };\n  }\n  return rule;\n}\n\n/**\n * Helper for making plugin-specific createPermissionRule functions, that have\n * the TResource and TQuery type parameters populated but infer the params from\n * the supplied rule. This helps ensure that rules created for this plugin use\n * consistent types for the resource and query.\n *\n * @public\n * @deprecated Use {@link (createPermissionRule:1)} directly instead with the resourceRef option.\n */\nexport const makeCreatePermissionRule =\n  <TResource, TQuery, TResourceType extends string>() =>\n  <TParams extends PermissionRuleParams = undefined>(\n    rule: PermissionRule<TResource, TQuery, TResourceType, TParams>,\n  ) =>\n    createPermissionRule(rule);\n"],"names":[],"mappings":";;AA8FO,SAAS,qBAOd,IAS2D,EAAA;AAC3D,EAAA,IAAI,iBAAiB,IAAM,EAAA;AACzB,IAAA,OAAO,EAAE,GAAG,IAAA,EAAM,YAAc,EAAA,IAAA,CAAK,YAAY,YAAa,EAAA;AAAA;AAEhE,EAAO,OAAA,IAAA;AACT;AAWO,MAAM,wBACX,GAAA,MACA,CACE,IAAA,KAEA,qBAAqB,IAAI;;;;;"}