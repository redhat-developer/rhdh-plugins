'use strict';

var errors = require('@backstage/errors');

function isResourcedPolicy(policy) {
  return "resourceType" in policy;
}
const PermissionActionValues = [
  "create",
  "read",
  "update",
  "delete",
  "use"
];
const toPermissionAction = (attr) => attr.action ?? "use";
function isValidPermissionAction(action) {
  return PermissionActionValues.includes(action);
}
const ConditionalAliases = {
  CURRENT_USER: "currentUser",
  OWNER_REFS: "ownerRefs"
};
const CONDITION_ALIAS_SIGN = "$";
class UnauthorizedError extends errors.NotAllowedError {
  constructor() {
    super("Unauthorized");
  }
}

exports.CONDITION_ALIAS_SIGN = CONDITION_ALIAS_SIGN;
exports.ConditionalAliases = ConditionalAliases;
exports.PermissionActionValues = PermissionActionValues;
exports.UnauthorizedError = UnauthorizedError;
exports.isResourcedPolicy = isResourcedPolicy;
exports.isValidPermissionAction = isValidPermissionAction;
exports.toPermissionAction = toPermissionAction;
//# sourceMappingURL=types.cjs.js.map
