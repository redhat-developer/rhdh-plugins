'use strict';

function sortedEntries(obj) {
  return Object.entries(obj).sort(([a], [b]) => a.localeCompare(b));
}
function code(str) {
  if (str === "-") {
    return str;
  }
  return `\`${str}\``;
}
function generateSqlReport(options) {
  const { reportName, failedDownMigration, schemaInfo } = options;
  const output = [
    `## SQL Report file for "${reportName}"`,
    "",
    "> Do not edit this file. It is a report generated by `yarn build:api-reports`",
    ""
  ];
  if (failedDownMigration) {
    output.push("> [!WARNING]");
    output.push(`> Failed to migrate down from '${failedDownMigration}'`);
    output.push("");
  }
  if (Object.keys(schemaInfo.sequences).length > 0) {
    output.push("## Sequences");
    output.push("");
    for (const [sequenceName, sequenceInfo] of sortedEntries(
      schemaInfo.sequences
    )) {
      output.push(`- ${code(sequenceName)} (${sequenceInfo.type})`);
    }
    output.push("");
  }
  for (const [tableName, tableInfo] of sortedEntries(schemaInfo.tables)) {
    output.push(`## Table ${code(tableName)}`);
    output.push("");
    output.push("  | Column | Type | Nullable | Max Length | Default |");
    output.push("  |--------|------|----------|------------|---------|");
    for (const [columnName, columnInfo] of sortedEntries(tableInfo.columns)) {
      output.push(
        `  | ${code(columnName)} | ${code(columnInfo.type)} | ${columnInfo.nullable} | ${columnInfo.maxLength ?? "-"} | ${code(
          columnInfo.defaultValue ?? "-"
        )} |`
      );
    }
    output.push("");
    if (Object.keys(tableInfo.indices).length > 0) {
      output.push("### Indices");
      output.push("");
      for (const [indexName, indexInfo] of sortedEntries(tableInfo.indices)) {
        const indexType = [
          indexInfo.unique && "unique",
          indexInfo.primary && "primary"
        ].filter(Boolean).join(" ");
        output.push(
          `- ${code(indexName)} (${indexInfo.columns.map(code).join(", ")})${indexType ? ` ${indexType}` : ""}`
        );
      }
      output.push("");
    }
  }
  return output.join("\n");
}

exports.generateSqlReport = generateSqlReport;
//# sourceMappingURL=generateSqlReport.cjs.js.map
