'use strict';

var path = require('path');
var fs = require('fs-extra');
var util = require('../../util.cjs.js');
var paths = require('../../../lib/paths.cjs.js');
var generateCliReport = require('./generateCliReport.cjs.js');
var logApiReportInstructions = require('../common/logApiReportInstructions.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

function parseHelpPage(helpPageContent) {
  const [, usage] = helpPageContent.match(/^\s*Usage: (.*)$/im) ?? [];
  const lines = helpPageContent.split(/\r?\n/);
  let options = new Array();
  let commands = new Array();
  let commandArguments = new Array();
  while (lines.length > 0) {
    while (lines.length > 0 && !lines[0].endsWith(":")) {
      lines.shift();
    }
    if (lines.length > 0) {
      const sectionName = lines.shift();
      const sectionEndIndex = lines.findIndex(
        (line) => line && !line.match(/^\s/)
      );
      const sectionLines = lines.slice(0, sectionEndIndex);
      lines.splice(0, sectionLines.length);
      const sectionItems = sectionLines.map((line) => line.match(/^\s{1,8}(.*?)\s\s+/)?.[1]).filter(Boolean);
      if (sectionName?.toLocaleLowerCase("en-US") === "options:") {
        options = sectionItems;
      } else if (sectionName?.toLocaleLowerCase("en-US") === "commands:") {
        commands = sectionItems;
      } else if (sectionName?.toLocaleLowerCase("en-US") === "arguments:") {
        commandArguments = sectionItems;
      } else {
        throw new Error(`Unknown CLI section: ${sectionName}`);
      }
    }
  }
  options.sort();
  commands.sort();
  commandArguments.sort();
  return {
    usage,
    options,
    commands,
    commandArguments
  };
}
async function exploreCliHelpPages(run) {
  const helpPages = new Array();
  async function exploreHelpPage(...path) {
    const content = await run(...path, "--help");
    const parsed = parseHelpPage(content);
    helpPages.push({ path, ...parsed });
    await Promise.all(
      parsed.commands.map(async (fullCommand) => {
        const command = fullCommand.split(/[|\s]/)[0];
        if (command !== "help") {
          await exploreHelpPage(...path, command);
        }
      })
    );
  }
  await exploreHelpPage();
  helpPages.sort((a, b) => a.path.join(" ").localeCompare(b.path.join(" ")));
  return helpPages;
}
async function runCliExtraction({
  packageDirs,
  isLocalBuild
}) {
  for (const packageDir of packageDirs) {
    console.log(`## Processing ${packageDir}`);
    const fullDir = paths.paths.resolveTargetRoot(packageDir);
    const pkgJson = await fs__default.default.readJson(path.resolve(fullDir, "package.json"));
    if (!pkgJson.bin) {
      throw new Error(`CLI Package in ${packageDir} has no bin field`);
    }
    const models = new Array();
    if (typeof pkgJson.bin === "string") {
      const run = util.createBinRunner(fullDir, pkgJson.bin);
      const helpPages = await exploreCliHelpPages(run);
      models.push({ name: path.basename(pkgJson.bin), helpPages });
    } else {
      for (const [name, path] of Object.entries(pkgJson.bin)) {
        const run = util.createBinRunner(fullDir, path);
        const helpPages = await exploreCliHelpPages(run);
        models.push({ name, helpPages });
      }
    }
    for (const model of models) {
      const report = generateCliReport.generateCliReport({ packageName: pkgJson.name, model });
      const reportPath = path.resolve(
        fullDir,
        `cli-report.${models.length === 1 ? "" : `${model.name}.`}md`
      );
      const existingReport = await fs__default.default.readFile(reportPath, "utf8").catch((error) => {
        if (error.code === "ENOENT") {
          return void 0;
        }
        throw error;
      });
      if (existingReport !== report) {
        if (isLocalBuild) {
          console.warn(`CLI report changed for ${packageDir}`);
          await fs__default.default.writeFile(reportPath, report);
        } else {
          logApiReportInstructions.logApiReportInstructions();
          if (existingReport) {
            console.log("");
            console.log(
              `The conflicting file is ${path.relative(
                paths.paths.targetRoot,
                reportPath
              )}, expecting the following content:`
            );
            console.log("");
            console.log(report);
            logApiReportInstructions.logApiReportInstructions();
          }
          throw new Error(`CLI report changed for ${packageDir}, `);
        }
      }
    }
  }
}

exports.runCliExtraction = runCliExtraction;
//# sourceMappingURL=runCliExtraction.cjs.js.map
