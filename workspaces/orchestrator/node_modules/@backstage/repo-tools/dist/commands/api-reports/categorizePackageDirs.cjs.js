'use strict';

var fs = require('fs-extra');
var paths = require('../../lib/paths.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

async function categorizePackageDirs(packageDirs) {
  const dirs = packageDirs.slice();
  const tsPackageDirs = new Array();
  const cliPackageDirs = new Array();
  const sqlPackageDirs = new Array();
  await Promise.all(
    Array(10).fill(0).map(async () => {
      for (; ; ) {
        const dir = dirs.pop();
        if (!dir) {
          return;
        }
        const pkgJson = await fs__default.default.readJson(paths.paths.resolveTargetRoot(dir, "package.json")).catch((error) => {
          if (error.code === "ENOENT") {
            return void 0;
          }
          throw error;
        });
        const role = pkgJson?.backstage?.role;
        if (!role) {
          return;
        }
        if (await fs__default.default.pathExists(paths.paths.resolveTargetRoot(dir, "migrations"))) {
          sqlPackageDirs.push(dir);
        }
        if (pkgJson?.backstage?.inline) {
          return;
        }
        if (role === "cli") {
          cliPackageDirs.push(dir);
        } else if (role !== "frontend" && role !== "backend") {
          tsPackageDirs.push(dir);
        }
      }
    })
  );
  return { tsPackageDirs, cliPackageDirs, sqlPackageDirs };
}

exports.categorizePackageDirs = categorizePackageDirs;
//# sourceMappingURL=categorizePackageDirs.cjs.js.map
