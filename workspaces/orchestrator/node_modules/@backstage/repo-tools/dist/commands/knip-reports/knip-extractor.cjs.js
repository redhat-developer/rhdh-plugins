'use strict';

var paths = require('../../lib/paths.cjs.js');
var pLimit = require('p-limit');
var os = require('os');
var path = require('path');
var fs = require('fs-extra');
var util = require('../util.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var pLimit__default = /*#__PURE__*/_interopDefaultCompat(pLimit);
var os__default = /*#__PURE__*/_interopDefaultCompat(os);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

function logKnipReportInstructions() {
  console.log("");
  console.log(
    "*************************************************************************************"
  );
  console.log(
    "* You have uncommitted changes to the knip reports of a package.                    *"
  );
  console.log(
    "* To solve this, run `yarn build:knip-reports` and commit all md file changes.      *"
  );
  console.log(
    "*************************************************************************************"
  );
  console.log("");
}
async function generateKnipConfig({ knipConfigPath }) {
  const knipConfig = {
    workspaces: {
      ".": {},
      "{packages,plugins}/*": {
        entry: ["dev/index.{ts,tsx}", "src/index.{ts,tsx}"],
        ignore: [
          ".eslintrc.js",
          "config.d.ts",
          "knexfile.js",
          "node_modules/**",
          "dist/**",
          "{fixtures,migrations,templates}/**",
          "src/tests/transforms/__fixtures__/**"
          // cli packaging tests
        ]
      }
    },
    jest: {
      entry: ["src/setupTests.ts", "src/**/*.test.{ts,tsx}"]
    },
    storybook: { entry: "src/components/**/*.stories.tsx" },
    ignoreDependencies: [
      // these is reported as a referenced optional peerDependencies
      // TBD: investigate what triggers these
      "@types/react",
      "@types/jest",
      "@internal/.*",
      // internal packages are not published and inlined
      "@backstage/cli",
      // everything depends on this for its package.json commands
      "@backstage/theme"
      // this uses `declare module` in .d.ts so is implicitly used whenever extensions are needed
    ]
  };
  await fs__default.default.writeFile(knipConfigPath, JSON.stringify(knipConfig, null, 2));
}
function cleanKnipConfig({ knipConfigPath }) {
  if (fs__default.default.existsSync(knipConfigPath)) {
    fs__default.default.rmSync(knipConfigPath);
  }
}
async function handlePackage({
  packageDir,
  knipDir,
  isLocalBuild
}) {
  console.log(`## Processing ${packageDir}`);
  const fullDir = paths.paths.resolveTargetRoot(packageDir);
  const reportPath = path.resolve(fullDir, "knip-report.md");
  const run = util.createBinRunner(paths.paths.targetRoot, "");
  let report = await run(
    `${knipDir}/knip.js`,
    "-W",
    // Run the desired workspace
    packageDir,
    "--config",
    "knip.json",
    "--no-exit-code",
    // Removing this will end the process in case there are findings by knip
    "--no-progress",
    // Remove unnecessary debugging from output
    // TODO: Add more checks when dependencies start to look ok, see https://knip.dev/reference/cli#--include
    "--include",
    "dependencies,unlisted",
    "--reporter",
    "markdown"
  );
  report = report.replaceAll(`| ${packageDir}/`, "| ");
  report = report.replaceAll(
    new RegExp(`(\\| :-+ \\| :)-{${packageDir.length + 1}}`, "g"),
    (_, p1) => p1
  );
  report = report.replaceAll(
    new RegExp(` \\| Location {1,${packageDir.length + 2}}`, "g"),
    " | Location "
  );
  const existingReport = await fs__default.default.readFile(reportPath, "utf8").catch((error) => {
    if (error.code === "ENOENT") {
      return void 0;
    }
    throw error;
  });
  if (existingReport !== report) {
    if (isLocalBuild) {
      console.warn(`Knip report changed for ${packageDir}`);
      await fs__default.default.writeFile(reportPath, report);
    } else {
      logKnipReportInstructions();
      if (existingReport) {
        console.log("");
        console.log(
          `The conflicting file is ${path.relative(
            paths.paths.targetRoot,
            reportPath
          )}, expecting the following content:`
        );
        console.log("");
        console.log(report);
        logKnipReportInstructions();
      }
      throw new Error(`Knip report changed for ${packageDir}, `);
    }
  }
}
async function runKnipReports({
  packageDirs,
  isLocalBuild
}) {
  const knipDir = paths.paths.resolveTargetRoot("./node_modules/knip/bin/");
  const knipConfigPath = paths.paths.resolveTargetRoot("./knip.json");
  const limiter = pLimit__default.default(os__default.default.cpus().length);
  await generateKnipConfig({ knipConfigPath });
  try {
    await Promise.all(
      packageDirs.map(
        (packageDir) => limiter(
          async () => handlePackage({ packageDir, knipDir, isLocalBuild })
        )
      )
    );
    await cleanKnipConfig({ knipConfigPath });
  } catch (e) {
    console.log(`Error occurred during knip reporting: ${e}`);
    throw e;
  }
}

exports.runKnipReports = runKnipReports;
//# sourceMappingURL=knip-extractor.cjs.js.map
