'use strict';

var codeownersUtils = require('codeowners-utils');
var path = require('path');
var utils = require('./utils.cjs.js');

async function loadCodeowners() {
  const maybeFiles = await Promise.allSettled(
    codeownersUtils.CODEOWNERS_PATHS.map(
      async (path$1) => utils.readFile(path.resolve(".", path$1), { encoding: "utf-8" })
    )
  );
  const file = maybeFiles.find(
    (maybeFile) => maybeFile.status === "fulfilled"
  );
  if (!file) {
    throw new Error(
      "This utility expects a CODEOWNERS file, but no such file was found."
    );
  }
  return codeownersUtils.parse(file.value);
}
function getPossibleCodeowners(codeowners, relPath) {
  const codeownerMaybe = codeownersUtils.matchFile(relPath, codeowners);
  return codeownerMaybe ? codeownerMaybe.owners.map(
    (owner) => (owner.match(/(?:\@[^\/]+\/)?([^\@\/]*)$/) || [])[1]
  ) : [];
}
function getOwnerFromCodeowners(codeowners, absPath) {
  const relPath = path.relative(".", absPath);
  const possibleOwners = getPossibleCodeowners(codeowners, relPath);
  const owner = possibleOwners[0];
  if (!owner) {
    throw new Error(`${relPath} isn't owned by anyone in CODEOWNERS`);
  }
  return owner;
}

exports.getOwnerFromCodeowners = getOwnerFromCodeowners;
exports.getPossibleCodeowners = getPossibleCodeowners;
exports.loadCodeowners = loadCodeowners;
//# sourceMappingURL=codeowners.cjs.js.map
