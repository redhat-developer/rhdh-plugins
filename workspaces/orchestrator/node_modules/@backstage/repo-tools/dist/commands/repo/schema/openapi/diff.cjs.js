'use strict';

var cliNode = require('@backstage/cli-node');
var exec = require('../../../../lib/exec.cjs.js');
var helpers = require('../../../../lib/openapi/optic/helpers.cjs.js');
var paths = require('../../../../lib/paths.cjs.js');
var constants = require('../../../../lib/openapi/constants.cjs.js');

function cleanUpApiName(e) {
  e.apiName = e.apiName.replace(paths.paths.targetDir, "").replace(constants.YAML_SCHEMA_PATH, "");
}
async function command(opts) {
  let packages = await cliNode.PackageGraph.listTargetPackages();
  let since = "";
  if (opts.since) {
    const { stdout: sinceRaw } = await exec.exec("git", ["rev-parse", opts.since]);
    since = sinceRaw.toString().trim();
    const { stdout: changedFilesRaw } = await exec.exec("git", [
      "diff",
      "--name-only",
      since
    ]);
    const changedFiles = changedFilesRaw.toString().trim();
    const changedOpenApiSpecs = changedFiles.split("\n").filter((e) => e.endsWith(constants.YAML_SCHEMA_PATH)).map((e) => paths.paths.resolveTarget(e));
    packages = packages.filter(
      (pkg) => changedOpenApiSpecs.some((e) => e.startsWith(`${pkg.dir}/`))
    );
  }
  const checkablePackages = packages.filter((e) => e.packageJson.scripts?.diff);
  try {
    const outputs = {
      completed: [],
      failed: [],
      noop: [],
      warning: [],
      severity: 0
    };
    for (const pkg of checkablePackages) {
      const sinceCommands = since ? ["--since", since] : [];
      const { stdout } = await exec.exec(
        "yarn",
        ["diff", "--ignore", "--json", ...sinceCommands],
        {
          cwd: pkg.dir
        }
      );
      const result = JSON.parse(stdout.toString());
      outputs.completed.push(...result.completed ?? []);
      outputs.failed.push(...result.failed ?? []);
      outputs.noop.push(...result.noop ?? []);
    }
    for (const pkg of packages.filter((e) => !e.packageJson.scripts?.diff)) {
      outputs.warning?.push({
        apiName: `${pkg.dir}/`,
        warning: "No diff script found in package.json"
      });
    }
    outputs.completed.forEach(cleanUpApiName);
    outputs.failed.forEach(cleanUpApiName);
    outputs.noop.forEach(cleanUpApiName);
    outputs.warning?.forEach(cleanUpApiName);
    const { stdout: currentSha } = await exec.exec("git", ["rev-parse", "HEAD"]);
    console.log(
      helpers.generateCompareSummaryMarkdown(
        { sha: currentSha.toString().trim() },
        outputs,
        { verbose: true }
      )
    );
    const failed = outputs.failed.length > 0;
    if (failed) {
      throw new Error("Some checks failed");
    }
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}

exports.command = command;
//# sourceMappingURL=diff.cjs.js.map
