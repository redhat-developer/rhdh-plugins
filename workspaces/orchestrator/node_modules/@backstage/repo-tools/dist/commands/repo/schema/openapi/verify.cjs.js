'use strict';

var fs = require('fs-extra');
var lodash = require('lodash');
var path = require('path');
var chalk = require('chalk');
var runner = require('../../../../lib/runner.cjs.js');
var paths = require('../../../../lib/paths.cjs.js');
var constants = require('../../../../lib/openapi/constants.cjs.js');
var helpers = require('../../../../lib/openapi/helpers.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

async function verify(directoryPath) {
  let openapiPath = "";
  try {
    openapiPath = await helpers.getPathToOpenApiSpec(directoryPath);
  } catch {
    return;
  }
  const yaml = await helpers.loadAndValidateOpenApiYaml(openapiPath);
  let schemaPath = path.join(directoryPath, constants.TS_SCHEMA_PATH);
  if (!await fs__default.default.pathExists(schemaPath) && !await fs__default.default.pathExists(path.join(directoryPath, constants.OLD_SCHEMA_PATH))) {
    throw new Error(`No \`${constants.TS_SCHEMA_PATH}\` file found.`);
  } else if (await fs__default.default.pathExists(path.join(directoryPath, constants.OLD_SCHEMA_PATH))) {
    console.warn(
      `\`${constants.OLD_SCHEMA_PATH}\` is deprecated. Please re-run \`yarn backstage-repo-tools package schema openapi generate\` to update it.`
    );
    schemaPath = path.join(directoryPath, constants.OLD_SCHEMA_PATH);
  }
  const { default: schema } = await import(path.resolve(schemaPath));
  if (!schema.spec) {
    throw new Error(`\`${constants.TS_SCHEMA_PATH}\` needs to have a 'spec' export.`);
  }
  if (!lodash.isEqual(schema.spec, yaml)) {
    const path$1 = path.relative(paths.paths.targetRoot, directoryPath);
    throw new Error(
      `\`${constants.YAML_SCHEMA_PATH}\` and \`${constants.TS_SCHEMA_PATH}\` do not match. Please run \`yarn backstage-repo-tools package schema openapi generate\` from '${path$1}' to regenerate \`${constants.TS_SCHEMA_PATH}\`.`
    );
  }
}
async function bulkCommand(paths = []) {
  const resultsList = await runner.runner(paths, (dir) => verify(dir));
  let failed = false;
  for (const { relativeDir, resultText } of resultsList) {
    if (resultText) {
      console.log();
      console.log(chalk__default.default.red(`OpenAPI validation failed in ${relativeDir}:`));
      console.log(resultText.trimStart());
      failed = true;
    }
  }
  if (failed) {
    process.exit(1);
  } else {
    console.log(chalk__default.default.green("Verified all files."));
  }
}

exports.bulkCommand = bulkCommand;
//# sourceMappingURL=verify.cjs.js.map
