'use strict';

var cliNode = require('@backstage/cli-node');
var exec = require('../../../../lib/exec.cjs.js');
var chalk = require('chalk');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

async function command(opts) {
  let packages = await cliNode.PackageGraph.listTargetPackages();
  if (opts.since) {
    const graph = cliNode.PackageGraph.fromPackages(packages);
    const changedPackages = await graph.listChangedPackages({
      ref: opts.since,
      analyzeLockfile: true
    });
    const withDevDependents = graph.collectPackageNames(
      changedPackages.map((pkg) => pkg.name),
      (pkg) => pkg.localDevDependents.keys()
    );
    packages = Array.from(withDevDependents).map((name) => graph.get(name));
  }
  const fuzzablePackages = packages.filter((e) => e.packageJson.scripts?.fuzz);
  try {
    for (const pkg of fuzzablePackages) {
      await exec.exec("yarn", ["fuzz"], {
        cwd: pkg.dir
      });
    }
    console.log(chalk__default.default.green(`Successfully fuzzed.`));
  } catch (err) {
    console.error(err.stdout);
    process.exit(1);
  }
}

exports.command = command;
//# sourceMappingURL=fuzz.cjs.js.map
