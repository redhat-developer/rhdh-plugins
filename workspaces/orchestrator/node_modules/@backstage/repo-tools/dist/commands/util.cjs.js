'use strict';

var child_process = require('child_process');
var os = require('os');
var pLimit = require('p-limit');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var os__default = /*#__PURE__*/_interopDefaultCompat(os);
var pLimit__default = /*#__PURE__*/_interopDefaultCompat(pLimit);

const limiter = pLimit__default.default(os__default.default.cpus().length);
function createBinRunner(cwd, path) {
  return async (...command) => limiter(
    () => new Promise((resolve, reject) => {
      const args = path ? [path, ...command] : command;
      const child = child_process.spawn("node", args, {
        cwd,
        stdio: ["ignore", "pipe", "pipe"]
      });
      let stdout = "";
      let stderr = "";
      child.stdout?.on("data", (data) => {
        stdout += data.toString();
      });
      child.stderr?.on("data", (data) => {
        stderr += data.toString();
      });
      child.on("error", (err) => {
        reject(new Error(`Process error: ${err.message}`));
      });
      child.on("close", (code, signal) => {
        if (signal) {
          reject(
            new Error(
              `Process was killed with signal ${signal}
${stderr}`
            )
          );
        } else if (code !== 0) {
          reject(new Error(`Process exited with code ${code}
${stderr}`));
        } else if (stderr.trim()) {
          reject(new Error(`Command printed error output: ${stderr}`));
        } else {
          resolve(stdout);
        }
      });
    })
  );
}

exports.createBinRunner = createBinRunner;
//# sourceMappingURL=util.cjs.js.map
