'use strict';

var chalk = require('chalk');
var client = require('./client.cjs.js');
var server = require('./server.cjs.js');
var chokidar = require('chokidar');
var helpers = require('../../../../../lib/openapi/helpers.cjs.js');
var lodash = require('lodash');
var runner = require('../../../../../lib/runner.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var chokidar__default = /*#__PURE__*/_interopDefaultCompat(chokidar);

async function command(opts) {
  if (!opts.clientPackage && !opts.server) {
    console.log(
      chalk__default.default.red("Either --client-package or --server must be defined.")
    );
    process.exit(1);
  }
  const sharedCommand = async (abortSignal) => {
    const resolvedOpenapiPath = await helpers.getPathToCurrentOpenApiSpec();
    await helpers.loadAndValidateOpenApiYaml(resolvedOpenapiPath);
    const promises = [];
    const options = {
      isWatch: opts.watch,
      abortSignal
    };
    if (opts.clientPackage) {
      promises.push(
        client.command(
          opts.clientPackage,
          opts.clientAdditionalProperties,
          options
        )
      );
    }
    if (opts.server) {
      promises.push(server.command(options, opts.serverAdditionalProperties));
    }
    await Promise.all(promises);
  };
  if (opts.watch) {
    try {
      const resolvedOpenapiPath = await helpers.getPathToCurrentOpenApiSpec();
      let abortController = new AbortController();
      const watcher = chokidar__default.default.watch(resolvedOpenapiPath);
      const debouncedCommand = lodash.debounce(() => {
        console.log("Detected changes! Regenerating...");
        abortController.abort();
        abortController = new AbortController();
        sharedCommand(abortController).catch((err) => {
          console.error(chalk__default.default.red("Error: ", err));
        });
      }, 500);
      watcher.on("change", () => {
        debouncedCommand();
      });
      watcher.on("error", (error) => {
        console.error("Error happened", error);
      });
      watcher.on("ready", async () => {
        console.log(
          "Watching for changes in OpenAPI spec. Press Ctrl+C to stop."
        );
      });
      debouncedCommand();
      await runner.block();
    } catch (err) {
      console.error(chalk__default.default.red("Error: ", err));
      process.exit(1);
    }
  } else {
    try {
      await sharedCommand();
    } catch (err) {
      console.error(chalk__default.default.red("Error: ", err));
      process.exit(1);
    }
  }
}

exports.command = command;
//# sourceMappingURL=index.cjs.js.map
