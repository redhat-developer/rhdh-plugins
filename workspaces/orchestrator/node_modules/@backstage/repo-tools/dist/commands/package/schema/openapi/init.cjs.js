'use strict';

var fs = require('fs-extra');
var constants = require('../../../../lib/openapi/constants.cjs.js');
var paths = require('../../../../lib/paths.cjs.js');
var chalk = require('chalk');
var exec = require('../../../../lib/exec.cjs.js');
var helpers = require('../../../../lib/openapi/helpers.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

const ROUTER_TEST_PATHS = [
  "src/service/router.test.ts",
  "src/service/createRouter.test.ts"
];
async function init() {
  try {
    await helpers.getPathToCurrentOpenApiSpec();
  } catch (err) {
    throw new Error(
      `OpenAPI.yaml not found in ${constants.YAML_SCHEMA_PATH}. Please create one and retry this command.`
    );
  }
  const opticConfigFilePath = await helpers.getRelativePathToFile("optic.yml");
  if (await fs__default.default.pathExists(opticConfigFilePath)) {
    throw new Error(`This directory already has an optic.yml file. Exiting.`);
  }
  await fs__default.default.writeFile(
    opticConfigFilePath,
    `ruleset:
    - breaking-changes
capture:
    ${constants.YAML_SCHEMA_PATH}:
        # \u{1F527} Runnable example with simple get requests.
        # Run with "PORT=3000 optic capture ${constants.YAML_SCHEMA_PATH} --update interactive" in '${paths.paths.targetDir}'
        # You can change the server and the 'requests' section to experiment
        server:
            # This will not be used by 'backstage-repo-tools schema openapi test', but may be useful for interactive updates.
            url: http://localhost:3000
        requests:
            # \u2139\uFE0F Requests should be sent to the Optic proxy, the address of which is injected into 'run.command's env as OPTIC_PROXY (or the value of 'run.proxy_variable').
            run:
                # \u{1F527} Specify a command that will generate traffic
                command: yarn backstage-cli package test --no-watch ${ROUTER_TEST_PATHS.map(
      (e) => `"${e}"`
    ).join(" ")} 
  `
  );
  if (await paths.paths.resolveTargetRoot("node_modules/.bin/prettier")) {
    await exec.exec(`yarn prettier`, ["--write", opticConfigFilePath]);
  }
}
async function singleCommand() {
  try {
    await init();
    console.log(chalk__default.default.green(`Successfully configured.`));
  } catch (err) {
    console.log(chalk__default.default.red(`OpenAPI tooling initialization failed.`));
    console.log(err.message);
    process.exit(1);
  }
}

exports.singleCommand = singleCommand;
//# sourceMappingURL=init.cjs.js.map
