'use strict';

var fs = require('fs-extra');
var paths = require('../../../../lib/paths.cjs.js');
var chalk = require('chalk');
var exec = require('../../../../lib/exec.cjs.js');
var helpers = require('../../../../lib/openapi/helpers.cjs.js');
var configLoader = require('@backstage/config-loader');
var YAML = require('js-yaml');
var path = require('path');
var commandExists = require('command-exists');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var YAML__default = /*#__PURE__*/_interopDefaultCompat(YAML);

async function fuzz(opts) {
  const resolvedOpenapiPath = await helpers.getPathToCurrentOpenApiSpec();
  if (!commandExists.sync("st")) {
    console.log(
      chalk__default.default.red(
        `Please install schemathesis globally with 'python -m pip install schemathesis'. Then run this command again.`
      )
    );
    process.exit(1);
  }
  const openapiSpec = YAML__default.default.load(
    await fs__default.default.readFile(resolvedOpenapiPath, "utf8")
  );
  const configSource = configLoader.ConfigSources.default({
    rootDir: paths.paths.targetRoot
  });
  const config = await configLoader.ConfigSources.toConfig(configSource);
  const pluginId = openapiSpec.info.title;
  const args = [];
  if (opts.debug) {
    args.push(
      "--cassette-path",
      paths.paths.resolveTargetRoot(path.join(".cassettes", `${pluginId}.yml`))
    );
  }
  if (opts.limit) {
    args.push("--hypothesis-max-examples", opts.limit);
  }
  args.push("--workers", opts.workers);
  if (opts.useGuest) {
    args.push("--header", `Authorization: Basic guest`);
  } else {
    args.push("--header", `Authorization: Basic test`);
  }
  if (opts.excludeChecks) {
    args.push("--exclude-checks", opts.excludeChecks);
  }
  await exec.spawn(
    "st",
    [
      "run",
      "--checks",
      "all",
      ...args,
      `${config.getString("backend.baseUrl")}/api/${pluginId}/openapi.json`
    ],
    {
      stdio: ["ignore", "inherit", "ignore"]
    }
  );
}
async function command(opts) {
  try {
    await fuzz(opts);
    console.log(chalk__default.default.green(`Successfully fuzzed.`));
  } catch (err) {
    console.log(chalk__default.default.red(`OpenAPI fuzzing failed.`));
    console.error(err);
    process.exit(1);
  }
}

exports.command = command;
//# sourceMappingURL=fuzz.cjs.js.map
