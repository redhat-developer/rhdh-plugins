'use strict';

var chalk = require('chalk');
var exec = require('../../../../lib/exec.cjs.js');
var helpers = require('../../../../lib/openapi/helpers.cjs.js');
var paths = require('../../../../lib/paths.cjs.js');
var process$1 = require('process');
var promises = require('fs/promises');
var path = require('path');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

const reduceOpticOutput = (output) => {
  return output.split("\n").filter((e) => !e.startsWith("Rerun") && e.trim()).join("\n");
};
async function check(opts) {
  const resolvedOpenapiPath = await helpers.getPathToCurrentOpenApiSpec();
  let baseRef = opts.since;
  if (!baseRef) {
    const { stdout: branch } = await exec.exec(
      "git merge-base --fork-point origin/master"
    );
    baseRef = branch.toString().trim();
  }
  let failed = false;
  let output = "";
  try {
    const { stdout } = await exec.exec(
      "yarn optic diff",
      [
        resolvedOpenapiPath,
        "--check",
        opts.json ? "--json" : "",
        "--base",
        baseRef
      ],
      {
        cwd: paths.paths.targetRoot,
        env: { CI: opts.json ? "1" : void 0, ...process$1.env }
      }
    );
    output = stdout.toString();
  } catch (err) {
    output = err.stdout;
    failed = true;
  }
  if (opts.json) {
    const file = (await promises.readFile(path.resolve(paths.paths.targetRoot, "ci-run-details.json"))).toString();
    const results = JSON.parse(file);
    console.log(file);
    if (!opts.ignore && results.failed) {
      throw new Error("Some checks failed");
    }
    await promises.rm(path.resolve(paths.paths.targetRoot, "ci-run-details.json"));
  } else {
    console.log(reduceOpticOutput(output));
    if (!opts.ignore && failed) {
      throw new Error("Some checks failed");
    }
  }
}
async function command(opts) {
  try {
    await check(opts);
    if (!opts.json) console.log(chalk__default.default.green(`All checks passed.`));
  } catch (err) {
    if (!opts.json) console.log(chalk__default.default.red(err.message));
    process.exit(1);
  }
}

exports.command = command;
//# sourceMappingURL=diff.cjs.js.map
