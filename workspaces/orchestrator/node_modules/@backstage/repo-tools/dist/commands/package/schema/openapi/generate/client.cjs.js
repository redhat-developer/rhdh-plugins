'use strict';

var chalk = require('chalk');
var path = require('path');
var constants = require('../../../../../lib/openapi/constants.cjs.js');
var paths = require('../../../../../lib/paths.cjs.js');
var fs = require('fs-extra');
var exec = require('../../../../../lib/exec.cjs.js');
var backendPluginApi = require('@backstage/backend-plugin-api');
var helpers = require('../../../../../lib/openapi/helpers.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

async function generate(outputDirectory, clientAdditionalProperties, abortSignal) {
  const resolvedOpenapiPath = await helpers.getPathToCurrentOpenApiSpec();
  const resolvedOutputDirectory = paths.paths.resolveTargetRoot(
    outputDirectory,
    constants.OUTPUT_PATH
  );
  const additionalProperties = helpers.toGeneratorAdditionalProperties({
    initialValue: clientAdditionalProperties
  });
  await fs__default.default.emptyDir(resolvedOutputDirectory);
  await fs__default.default.writeFile(
    path.resolve(resolvedOutputDirectory, ".openapi-generator-ignore"),
    constants.OPENAPI_IGNORE_FILES.join("\n")
  );
  await exec.exec(
    "node",
    [
      backendPluginApi.resolvePackagePath("@openapitools/openapi-generator-cli", "main.js"),
      "generate",
      "-i",
      resolvedOpenapiPath,
      "-o",
      resolvedOutputDirectory,
      "-g",
      "typescript",
      "-c",
      backendPluginApi.resolvePackagePath(
        "@backstage/repo-tools",
        "templates/typescript-backstage-client.yaml"
      ),
      "--generator-key",
      "v3.0",
      additionalProperties ? `--additional-properties=${additionalProperties}` : ""
    ],
    {
      signal: abortSignal?.signal,
      maxBuffer: Number.MAX_VALUE,
      cwd: backendPluginApi.resolvePackagePath("@backstage/repo-tools"),
      env: {
        ...process.env
      }
    }
  );
  const parentDirectory = path.resolve(resolvedOutputDirectory, "..");
  await fs__default.default.writeFile(
    path.resolve(parentDirectory, "index.ts"),
    `// 
    export * from './generated';`
  );
  await exec.exec(`yarn backstage-cli package lint --fix ${parentDirectory}`, [], {
    signal: abortSignal?.signal
  });
  const prettier = paths.paths.resolveTargetRoot("node_modules/.bin/prettier");
  if (prettier) {
    await exec.exec(`${prettier} --write ${parentDirectory}`, [], {
      signal: abortSignal?.signal
    });
  }
  fs__default.default.removeSync(path.resolve(resolvedOutputDirectory, ".openapi-generator-ignore"));
  fs__default.default.rmSync(path.resolve(resolvedOutputDirectory, ".openapi-generator"), {
    recursive: true,
    force: true
  });
}
async function command(outputPackage, clientAdditionalProperties, {
  abortSignal,
  isWatch = false
} = {}) {
  try {
    await generate(outputPackage, clientAdditionalProperties, abortSignal);
    console.log(
      chalk__default.default.green(`Generated client in ${outputPackage}/${constants.OUTPUT_PATH}`)
    );
  } catch (err) {
    if (err.name === "AbortError") {
      console.debug("Server generation aborted.");
      return;
    }
    if (isWatch) {
      console.log(chalk__default.default.red(`Client generation failed:`));
      console.group();
      console.log(chalk__default.default.red(err.message));
      console.groupEnd();
    } else {
      console.log(chalk__default.default.red(`Client generation failed.`));
      console.log(chalk__default.default.red(err.message));
    }
  }
}

exports.command = command;
//# sourceMappingURL=client.cjs.js.map
