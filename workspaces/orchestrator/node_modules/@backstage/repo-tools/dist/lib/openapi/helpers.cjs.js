'use strict';

var fs = require('fs-extra');
var paths = require('../paths.cjs.js');
var constants = require('./constants.cjs.js');
var path = require('path');
var YAML = require('js-yaml');
var lodash = require('lodash');
var Parser = require('@apidevtools/swagger-parser');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var YAML__default = /*#__PURE__*/_interopDefaultCompat(YAML);
var Parser__default = /*#__PURE__*/_interopDefaultCompat(Parser);

const getPathToFile = async (directory, filename) => {
  return path.resolve(directory, filename);
};
const getRelativePathToFile = async (filename) => {
  return await getPathToFile(paths.paths.targetDir, filename);
};
const assertExists = async (path) => {
  if (!await fs.pathExists(path)) {
    throw new Error(`Could not find ${path}.`);
  }
  return path;
};
const getPathToOpenApiSpec = async (directory) => {
  return await assertExists(await getPathToFile(directory, constants.YAML_SCHEMA_PATH));
};
const getPathToCurrentOpenApiSpec = async () => {
  return await assertExists(await getRelativePathToFile(constants.YAML_SCHEMA_PATH));
};
async function loadAndValidateOpenApiYaml(path) {
  const yaml = YAML__default.default.load(await fs__default.default.readFile(path, "utf8"));
  await Parser__default.default.validate(lodash.cloneDeep(yaml));
  return yaml;
}
function toGeneratorAdditionalProperties({
  initialValue,
  defaultValue
}) {
  const items = initialValue?.split(",") ?? [];
  const parsed = items.reduce(
    (acc, item) => {
      const [key, value] = item.split("=");
      return { ...acc, [key]: value };
    },
    { ...defaultValue }
  );
  return Object.entries(parsed).map(([key, value]) => `${key}=${value}`).join(",");
}

exports.assertExists = assertExists;
exports.getPathToCurrentOpenApiSpec = getPathToCurrentOpenApiSpec;
exports.getPathToFile = getPathToFile;
exports.getPathToOpenApiSpec = getPathToOpenApiSpec;
exports.getRelativePathToFile = getRelativePathToFile;
exports.loadAndValidateOpenApiYaml = loadAndValidateOpenApiYaml;
exports.toGeneratorAdditionalProperties = toGeneratorAdditionalProperties;
//# sourceMappingURL=helpers.cjs.js.map
