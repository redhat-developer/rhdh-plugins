{"version":3,"file":"BackendInitializer.cjs.js","sources":["../../src/wiring/BackendInitializer.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackendFeature,\n  ExtensionPoint,\n  coreServices,\n  ServiceRef,\n  ServiceFactory,\n  LifecycleService,\n  RootLifecycleService,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport { ServiceOrExtensionPoint } from './types';\n// Direct internal import to avoid duplication\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type {\n  InternalBackendFeature,\n  InternalBackendFeatureLoader,\n  InternalBackendRegistrations,\n} from '../../../backend-plugin-api/src/wiring/types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport type { InternalServiceFactory } from '../../../backend-plugin-api/src/services/system/types';\nimport { ForwardedError, ConflictError, assertError } from '@backstage/errors';\nimport {\n  instanceMetadataServiceRef,\n  BackendFeatureMeta,\n} from '@backstage/backend-plugin-api/alpha';\nimport { DependencyGraph } from '../lib/DependencyGraph';\nimport { ServiceRegistry } from './ServiceRegistry';\nimport { createInitializationLogger } from './createInitializationLogger';\nimport { unwrapFeature } from './helpers';\n\nexport interface BackendRegisterInit {\n  consumes: Set<ServiceOrExtensionPoint>;\n  provides: Set<ServiceOrExtensionPoint>;\n  init: {\n    deps: { [name: string]: ServiceOrExtensionPoint };\n    func: (deps: { [name: string]: unknown }) => Promise<void>;\n  };\n}\n\n/**\n * A registry of backend instances, used to manage process shutdown hooks across all instances.\n */\nconst instanceRegistry = new (class InstanceRegistry {\n  #registered = false;\n  #instances = new Set<BackendInitializer>();\n\n  register(instance: BackendInitializer) {\n    if (!this.#registered) {\n      this.#registered = true;\n\n      process.addListener('SIGTERM', this.#exitHandler);\n      process.addListener('SIGINT', this.#exitHandler);\n      process.addListener('beforeExit', this.#exitHandler);\n    }\n\n    this.#instances.add(instance);\n  }\n\n  unregister(instance: BackendInitializer) {\n    this.#instances.delete(instance);\n  }\n\n  #exitHandler = async () => {\n    try {\n      const results = await Promise.allSettled(\n        Array.from(this.#instances).map(b => b.stop()),\n      );\n      const errors = results.flatMap(r =>\n        r.status === 'rejected' ? [r.reason] : [],\n      );\n\n      if (errors.length > 0) {\n        for (const error of errors) {\n          console.error(error);\n        }\n        process.exit(1);\n      } else {\n        process.exit(0);\n      }\n    } catch (error) {\n      console.error(error);\n      process.exit(1);\n    }\n  };\n})();\n\nfunction createInstanceMetadataServiceFactory(\n  registrations: InternalBackendRegistrations[],\n) {\n  const installedFeatures = registrations\n    .map(registration => {\n      if (registration.featureType === 'registrations') {\n        return registration\n          .getRegistrations()\n          .map(feature => {\n            if (feature.type === 'plugin') {\n              return Object.defineProperty(\n                {\n                  type: 'plugin',\n                  pluginId: feature.pluginId,\n                },\n                'toString',\n                {\n                  enumerable: false,\n                  configurable: true,\n                  value: () => `plugin{pluginId=${feature.pluginId}}`,\n                },\n              );\n            } else if (feature.type === 'module') {\n              return Object.defineProperty(\n                {\n                  type: 'module',\n                  pluginId: feature.pluginId,\n                  moduleId: feature.moduleId,\n                },\n                'toString',\n                {\n                  enumerable: false,\n                  configurable: true,\n                  value: () =>\n                    `module{moduleId=${feature.moduleId},pluginId=${feature.pluginId}}`,\n                },\n              );\n            }\n            // Ignore unknown feature types.\n            return undefined;\n          })\n          .filter(Boolean) as BackendFeatureMeta[];\n      }\n      return [];\n    })\n    .flat();\n  return createServiceFactory({\n    service: instanceMetadataServiceRef,\n    deps: {},\n    factory: async () => ({ getInstalledFeatures: () => installedFeatures }),\n  });\n}\n\nexport class BackendInitializer {\n  #startPromise?: Promise<void>;\n  #stopPromise?: Promise<void>;\n  #registrations = new Array<InternalBackendRegistrations>();\n  #extensionPoints = new Map<string, { impl: unknown; pluginId: string }>();\n  #serviceRegistry: ServiceRegistry;\n  #registeredFeatures = new Array<Promise<BackendFeature>>();\n  #registeredFeatureLoaders = new Array<InternalBackendFeatureLoader>();\n\n  constructor(defaultApiFactories: ServiceFactory[]) {\n    this.#serviceRegistry = ServiceRegistry.create([...defaultApiFactories]);\n  }\n\n  async #getInitDeps(\n    deps: { [name: string]: ServiceOrExtensionPoint },\n    pluginId: string,\n    moduleId?: string,\n  ) {\n    const result = new Map<string, unknown>();\n    const missingRefs = new Set<ServiceOrExtensionPoint>();\n\n    for (const [name, ref] of Object.entries(deps)) {\n      const ep = this.#extensionPoints.get(ref.id);\n      if (ep) {\n        if (ep.pluginId !== pluginId) {\n          throw new Error(\n            `Illegal dependency: Module '${moduleId}' for plugin '${pluginId}' attempted to depend on extension point '${ref.id}' for plugin '${ep.pluginId}'. Extension points can only be used within their plugin's scope.`,\n          );\n        }\n        result.set(name, ep.impl);\n      } else {\n        const impl = await this.#serviceRegistry.get(\n          ref as ServiceRef<unknown>,\n          pluginId,\n        );\n        if (impl) {\n          result.set(name, impl);\n        } else {\n          missingRefs.add(ref);\n        }\n      }\n    }\n\n    if (missingRefs.size > 0) {\n      const missing = Array.from(missingRefs).join(', ');\n      const target = moduleId\n        ? `module '${moduleId}' for plugin '${pluginId}'`\n        : `plugin '${pluginId}'`;\n      throw new Error(\n        `Service or extension point dependencies of ${target} are missing for the following ref(s): ${missing}`,\n      );\n    }\n\n    return Object.fromEntries(result);\n  }\n\n  add(feature: BackendFeature | Promise<BackendFeature>) {\n    if (this.#startPromise) {\n      throw new Error('feature can not be added after the backend has started');\n    }\n    this.#registeredFeatures.push(Promise.resolve(feature));\n  }\n\n  #addFeature(feature: BackendFeature) {\n    if (isServiceFactory(feature)) {\n      this.#serviceRegistry.add(feature);\n    } else if (isBackendFeatureLoader(feature)) {\n      this.#registeredFeatureLoaders.push(feature);\n    } else if (isBackendRegistrations(feature)) {\n      this.#registrations.push(feature);\n    } else {\n      throw new Error(\n        `Failed to add feature, invalid feature ${JSON.stringify(feature)}`,\n      );\n    }\n  }\n\n  async start(): Promise<void> {\n    if (this.#startPromise) {\n      throw new Error('Backend has already started');\n    }\n    if (this.#stopPromise) {\n      throw new Error('Backend has already stopped');\n    }\n\n    instanceRegistry.register(this);\n\n    this.#startPromise = this.#doStart();\n    await this.#startPromise;\n  }\n\n  async #doStart(): Promise<void> {\n    this.#serviceRegistry.checkForCircularDeps();\n\n    for (const feature of this.#registeredFeatures) {\n      this.#addFeature(await feature);\n    }\n\n    await this.#applyBackendFeatureLoaders(this.#registeredFeatureLoaders);\n\n    this.#serviceRegistry.add(\n      createInstanceMetadataServiceFactory(this.#registrations),\n    );\n\n    // Initialize all root scoped services\n    await this.#serviceRegistry.initializeEagerServicesWithScope('root');\n\n    const pluginInits = new Map<string, BackendRegisterInit>();\n    const moduleInits = new Map<string, Map<string, BackendRegisterInit>>();\n\n    // Enumerate all registrations\n    for (const feature of this.#registrations) {\n      for (const r of feature.getRegistrations()) {\n        const provides = new Set<ExtensionPoint<unknown>>();\n\n        if (r.type === 'plugin' || r.type === 'module') {\n          for (const [extRef, extImpl] of r.extensionPoints) {\n            if (this.#extensionPoints.has(extRef.id)) {\n              throw new Error(\n                `ExtensionPoint with ID '${extRef.id}' is already registered`,\n              );\n            }\n            this.#extensionPoints.set(extRef.id, {\n              impl: extImpl,\n              pluginId: r.pluginId,\n            });\n            provides.add(extRef);\n          }\n        }\n\n        if (r.type === 'plugin') {\n          if (pluginInits.has(r.pluginId)) {\n            throw new Error(`Plugin '${r.pluginId}' is already registered`);\n          }\n          pluginInits.set(r.pluginId, {\n            provides,\n            consumes: new Set(Object.values(r.init.deps)),\n            init: r.init,\n          });\n        } else if (r.type === 'module') {\n          let modules = moduleInits.get(r.pluginId);\n          if (!modules) {\n            modules = new Map();\n            moduleInits.set(r.pluginId, modules);\n          }\n          if (modules.has(r.moduleId)) {\n            throw new Error(\n              `Module '${r.moduleId}' for plugin '${r.pluginId}' is already registered`,\n            );\n          }\n          modules.set(r.moduleId, {\n            provides,\n            consumes: new Set(Object.values(r.init.deps)),\n            init: r.init,\n          });\n        } else {\n          throw new Error(`Invalid registration type '${(r as any).type}'`);\n        }\n      }\n    }\n\n    const allPluginIds = [...pluginInits.keys()];\n\n    const initLogger = createInitializationLogger(\n      allPluginIds,\n      await this.#serviceRegistry.get(coreServices.rootLogger, 'root'),\n    );\n\n    const rootConfig = await this.#serviceRegistry.get(\n      coreServices.rootConfig,\n      'root',\n    );\n\n    // All plugins are initialized in parallel\n    const results = await Promise.allSettled(\n      allPluginIds.map(async pluginId => {\n        const isBootFailurePermitted = this.#getPluginBootFailurePredicate(\n          pluginId,\n          rootConfig,\n        );\n\n        try {\n          // Initialize all eager services\n          await this.#serviceRegistry.initializeEagerServicesWithScope(\n            'plugin',\n            pluginId,\n          );\n\n          // Modules are initialized before plugins, so that they can provide extension to the plugin\n          const modules = moduleInits.get(pluginId);\n          if (modules) {\n            const tree = DependencyGraph.fromIterable(\n              Array.from(modules).map(([moduleId, moduleInit]) => ({\n                value: { moduleId, moduleInit },\n                // Relationships are reversed at this point since we're only interested in the extension points.\n                // If a modules provides extension point A we want it to be initialized AFTER all modules\n                // that depend on extension point A, so that they can provide their extensions.\n                consumes: Array.from(moduleInit.provides).map(p => p.id),\n                provides: Array.from(moduleInit.consumes).map(c => c.id),\n              })),\n            );\n            const circular = tree.detectCircularDependency();\n            if (circular) {\n              throw new ConflictError(\n                `Circular dependency detected for modules of plugin '${pluginId}', ${circular\n                  .map(({ moduleId }) => `'${moduleId}'`)\n                  .join(' -> ')}`,\n              );\n            }\n            await tree.parallelTopologicalTraversal(\n              async ({ moduleId, moduleInit }) => {\n                const isModuleBootFailurePermitted =\n                  this.#getPluginModuleBootFailurePredicate(\n                    pluginId,\n                    moduleId,\n                    rootConfig,\n                  );\n\n                try {\n                  const moduleDeps = await this.#getInitDeps(\n                    moduleInit.init.deps,\n                    pluginId,\n                    moduleId,\n                  );\n                  await moduleInit.init.func(moduleDeps).catch(error => {\n                    throw new ForwardedError(\n                      `Module '${moduleId}' for plugin '${pluginId}' startup failed`,\n                      error,\n                    );\n                  });\n                } catch (error: unknown) {\n                  assertError(error);\n                  if (isModuleBootFailurePermitted) {\n                    initLogger.onPermittedPluginModuleFailure(\n                      pluginId,\n                      moduleId,\n                      error,\n                    );\n                  } else {\n                    initLogger.onPluginModuleFailed(pluginId, moduleId, error);\n                    throw error;\n                  }\n                }\n              },\n            );\n          }\n\n          // Once all modules have been initialized, we can initialize the plugin itself\n          const pluginInit = pluginInits.get(pluginId);\n          // We allow modules to be installed without the accompanying plugin, so the plugin may not exist\n          if (pluginInit) {\n            const pluginDeps = await this.#getInitDeps(\n              pluginInit.init.deps,\n              pluginId,\n            );\n            await pluginInit.init.func(pluginDeps).catch(error => {\n              throw new ForwardedError(\n                `Plugin '${pluginId}' startup failed`,\n                error,\n              );\n            });\n          }\n\n          initLogger.onPluginStarted(pluginId);\n\n          // Once the plugin and all modules have been initialized, we can signal that the plugin has stared up successfully\n          const lifecycleService = await this.#getPluginLifecycleImpl(pluginId);\n          await lifecycleService.startup();\n        } catch (error: unknown) {\n          assertError(error);\n          if (isBootFailurePermitted) {\n            initLogger.onPermittedPluginFailure(pluginId, error);\n          } else {\n            initLogger.onPluginFailed(pluginId, error);\n            throw error;\n          }\n        }\n      }),\n    );\n\n    const initErrors = results.flatMap(r =>\n      r.status === 'rejected' ? [r.reason] : [],\n    );\n    if (initErrors.length === 1) {\n      throw initErrors[0];\n    } else if (initErrors.length > 1) {\n      // TODO(Rugvip): Seems like there aren't proper types for AggregateError yet\n      throw new (AggregateError as any)(initErrors, 'Backend startup failed');\n    }\n\n    // Once all plugins and modules have been initialized, we can signal that the backend has started up successfully\n    const lifecycleService = await this.#getRootLifecycleImpl();\n    await lifecycleService.startup();\n\n    initLogger.onAllStarted();\n\n    // Once the backend is started, any uncaught errors or unhandled rejections are caught\n    // and logged, in order to avoid crashing the entire backend on local failures.\n    if (process.env.NODE_ENV !== 'test') {\n      const rootLogger = await this.#serviceRegistry.get(\n        coreServices.rootLogger,\n        'root',\n      );\n      process.on('unhandledRejection', (reason: Error) => {\n        rootLogger\n          ?.child({ type: 'unhandledRejection' })\n          ?.error('Unhandled rejection', reason);\n      });\n      process.on('uncaughtException', error => {\n        rootLogger\n          ?.child({ type: 'uncaughtException' })\n          ?.error('Uncaught exception', error);\n      });\n    }\n  }\n\n  // It's fine to call .stop() multiple times, which for example can happen with manual stop + process exit\n  async stop(): Promise<void> {\n    instanceRegistry.unregister(this);\n\n    if (!this.#stopPromise) {\n      this.#stopPromise = this.#doStop();\n    }\n    await this.#stopPromise;\n  }\n\n  async #doStop(): Promise<void> {\n    if (!this.#startPromise) {\n      return;\n    }\n\n    try {\n      await this.#startPromise;\n    } catch (error) {\n      // The startup failed, but we may still want to do cleanup so we continue silently\n    }\n\n    const rootLifecycleService = await this.#getRootLifecycleImpl();\n\n    // Root services like the health one need to immediately be notified of the shutdown\n    await rootLifecycleService.beforeShutdown();\n\n    // Get all plugins.\n    const allPlugins = new Set<string>();\n    for (const feature of this.#registrations) {\n      for (const r of feature.getRegistrations()) {\n        if (r.type === 'plugin') {\n          allPlugins.add(r.pluginId);\n        }\n      }\n    }\n\n    // Iterate through all plugins and run their shutdown hooks.\n    await Promise.allSettled(\n      [...allPlugins].map(async pluginId => {\n        const lifecycleService = await this.#getPluginLifecycleImpl(pluginId);\n        await lifecycleService.shutdown();\n      }),\n    );\n\n    // Once all plugin shutdown hooks are done, run root shutdown hooks.\n    await rootLifecycleService.shutdown();\n  }\n\n  // Bit of a hacky way to grab the lifecycle services, potentially find a nicer way to do this\n  async #getRootLifecycleImpl(): Promise<\n    RootLifecycleService & {\n      startup(): Promise<void>;\n      beforeShutdown(): Promise<void>;\n      shutdown(): Promise<void>;\n    }\n  > {\n    const lifecycleService = await this.#serviceRegistry.get(\n      coreServices.rootLifecycle,\n      'root',\n    );\n\n    const service = lifecycleService as any;\n    if (\n      service &&\n      typeof service.startup === 'function' &&\n      typeof service.shutdown === 'function'\n    ) {\n      return service;\n    }\n\n    throw new Error('Unexpected root lifecycle service implementation');\n  }\n\n  async #getPluginLifecycleImpl(\n    pluginId: string,\n  ): Promise<\n    LifecycleService & { startup(): Promise<void>; shutdown(): Promise<void> }\n  > {\n    const lifecycleService = await this.#serviceRegistry.get(\n      coreServices.lifecycle,\n      pluginId,\n    );\n\n    const service = lifecycleService as any;\n    if (\n      service &&\n      typeof service.startup === 'function' &&\n      typeof service.shutdown === 'function'\n    ) {\n      return service;\n    }\n\n    throw new Error('Unexpected plugin lifecycle service implementation');\n  }\n\n  async #applyBackendFeatureLoaders(loaders: InternalBackendFeatureLoader[]) {\n    const servicesAddedByLoaders = new Map<\n      string,\n      InternalBackendFeatureLoader\n    >();\n\n    for (const loader of loaders) {\n      const deps = new Map<string, unknown>();\n      const missingRefs = new Set<ServiceOrExtensionPoint>();\n\n      for (const [name, ref] of Object.entries(loader.deps ?? {})) {\n        if (ref.scope !== 'root') {\n          throw new Error(\n            `Feature loaders can only depend on root scoped services, but '${name}' is scoped to '${ref.scope}'. Offending loader is ${loader.description}`,\n          );\n        }\n        const impl = await this.#serviceRegistry.get(\n          ref as ServiceRef<unknown>,\n          'root',\n        );\n        if (impl) {\n          deps.set(name, impl);\n        } else {\n          missingRefs.add(ref);\n        }\n      }\n\n      if (missingRefs.size > 0) {\n        const missing = Array.from(missingRefs).join(', ');\n        throw new Error(\n          `No service available for the following ref(s): ${missing}, depended on by feature loader ${loader.description}`,\n        );\n      }\n\n      const result = await loader\n        .loader(Object.fromEntries(deps))\n        .then(features => features.map(unwrapFeature))\n        .catch(error => {\n          throw new ForwardedError(\n            `Feature loader ${loader.description} failed`,\n            error,\n          );\n        });\n\n      let didAddServiceFactory = false;\n      const newLoaders = new Array<InternalBackendFeatureLoader>();\n\n      for await (const feature of result) {\n        if (isBackendFeatureLoader(feature)) {\n          newLoaders.push(feature);\n        } else {\n          // This block makes sure that feature loaders do not provide duplicate\n          // implementations for the same service, but at the same time allows\n          // service factories provided by feature loaders to be overridden by\n          // ones that are explicitly installed with backend.add(serviceFactory).\n          //\n          // If a factory has already been explicitly installed, the service\n          // factory provided by the loader will simply be ignored.\n          if (isServiceFactory(feature) && !feature.service.multiton) {\n            const conflictingLoader = servicesAddedByLoaders.get(\n              feature.service.id,\n            );\n            if (conflictingLoader) {\n              throw new Error(\n                `Duplicate service implementations provided for ${feature.service.id} by both feature loader ${loader.description} and feature loader ${conflictingLoader.description}`,\n              );\n            }\n\n            // Check that this service wasn't already explicitly added by backend.add(serviceFactory)\n            if (!this.#serviceRegistry.hasBeenAdded(feature.service)) {\n              didAddServiceFactory = true;\n              servicesAddedByLoaders.set(feature.service.id, loader);\n              this.#addFeature(feature);\n            }\n          } else {\n            this.#addFeature(feature);\n          }\n        }\n      }\n\n      // Every time we add a new service factory we need to make sure that we don't have circular dependencies\n      if (didAddServiceFactory) {\n        this.#serviceRegistry.checkForCircularDeps();\n      }\n\n      // Apply loaders recursively, depth-first\n      if (newLoaders.length > 0) {\n        await this.#applyBackendFeatureLoaders(newLoaders);\n      }\n    }\n  }\n\n  #getPluginBootFailurePredicate(pluginId: string, config?: Config): boolean {\n    const defaultStartupBootFailureValue =\n      config?.getOptionalString(\n        'backend.startup.default.onPluginBootFailure',\n      ) ?? 'abort';\n\n    const pluginStartupBootFailureValue =\n      config?.getOptionalString(\n        `backend.startup.plugins.${pluginId}.onPluginBootFailure`,\n      ) ?? defaultStartupBootFailureValue;\n\n    return pluginStartupBootFailureValue === 'continue';\n  }\n\n  #getPluginModuleBootFailurePredicate(\n    pluginId: string,\n    moduleId: string,\n    config?: Config,\n  ): boolean {\n    const defaultStartupBootFailureValue =\n      config?.getOptionalString(\n        'backend.startup.default.onPluginModuleBootFailure',\n      ) ?? 'abort';\n\n    const pluginModuleStartupBootFailureValue =\n      config?.getOptionalString(\n        `backend.startup.plugins.${pluginId}.modules.${moduleId}.onPluginModuleBootFailure`,\n      ) ?? defaultStartupBootFailureValue;\n\n    return pluginModuleStartupBootFailureValue === 'continue';\n  }\n}\n\nfunction toInternalBackendFeature(\n  feature: BackendFeature,\n): InternalBackendFeature {\n  if (feature.$$type !== '@backstage/BackendFeature') {\n    throw new Error(`Invalid BackendFeature, bad type '${feature.$$type}'`);\n  }\n  const internal = feature as InternalBackendFeature;\n  if (internal.version !== 'v1') {\n    throw new Error(\n      `Invalid BackendFeature, bad version '${internal.version}'`,\n    );\n  }\n  return internal;\n}\n\nfunction isServiceFactory(\n  feature: BackendFeature,\n): feature is InternalServiceFactory {\n  const internal = toInternalBackendFeature(feature);\n  if (internal.featureType === 'service') {\n    return true;\n  }\n  // Backwards compatibility for v1 registrations that use duck typing\n  return 'service' in internal;\n}\n\nfunction isBackendRegistrations(\n  feature: BackendFeature,\n): feature is InternalBackendRegistrations {\n  const internal = toInternalBackendFeature(feature);\n  if (internal.featureType === 'registrations') {\n    return true;\n  }\n  // Backwards compatibility for v1 registrations that use duck typing\n  return 'getRegistrations' in internal;\n}\n\nfunction isBackendFeatureLoader(\n  feature: BackendFeature,\n): feature is InternalBackendFeatureLoader {\n  return toInternalBackendFeature(feature).featureType === 'loader';\n}\n"],"names":["createServiceFactory","instanceMetadataServiceRef","ServiceRegistry","createInitializationLogger","coreServices","DependencyGraph","ConflictError","ForwardedError","assertError","lifecycleService","unwrapFeature"],"mappings":"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"}