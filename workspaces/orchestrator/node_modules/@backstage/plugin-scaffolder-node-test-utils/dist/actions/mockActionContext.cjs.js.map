{"version":3,"file":"mockActionContext.cjs.js","sources":["../../src/actions/mockActionContext.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PassThrough } from 'stream';\nimport {\n  createMockDirectory,\n  mockCredentials,\n  mockServices,\n} from '@backstage/backend-test-utils';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { ActionContext } from '@backstage/plugin-scaffolder-node';\nimport { CheckpointContext } from '@backstage/plugin-scaffolder-node/alpha';\nimport { loggerToWinstonLogger } from './loggerToWinstonLogger';\n\n/**\n * A utility method to create a mock action context for scaffolder actions.\n *\n * @public\n * @param options - optional parameters to override default mock context\n */\nexport function createMockActionContext<\n  TActionInput extends JsonObject = JsonObject,\n  TActionOutput extends JsonObject = any,\n>(\n  options?: Partial<ActionContext<TActionInput, TActionOutput>>,\n): ActionContext<TActionInput, TActionOutput> {\n  const credentials = mockCredentials.user();\n\n  const defaultContext = {\n    logger: loggerToWinstonLogger(mockServices.logger.mock()),\n    logStream: new PassThrough(),\n    output: jest.fn(),\n    createTemporaryDirectory: jest.fn(),\n    input: {} as TActionInput,\n    async checkpoint<T extends JsonValue | void>(\n      opts: CheckpointContext<T>,\n    ): Promise<T> {\n      return opts.fn();\n    },\n    getInitiatorCredentials: () => Promise.resolve(credentials),\n    task: {\n      id: 'mock-task-id',\n    },\n    step: {\n      id: 'mock-step-id',\n      name: 'mock step name',\n    },\n  };\n\n  const createDefaultWorkspace = () => ({\n    workspacePath: createMockDirectory().resolve('workspace'),\n  });\n\n  if (!options) {\n    return {\n      ...defaultContext,\n      ...createDefaultWorkspace(),\n    };\n  }\n\n  const { input, logger, secrets, templateInfo, workspacePath, task, user } =\n    options;\n\n  return {\n    ...defaultContext,\n    ...(workspacePath ? { workspacePath } : createDefaultWorkspace()),\n    ...(workspacePath && {\n      createTemporaryDirectory: jest.fn().mockResolvedValue(workspacePath),\n    }),\n    ...(logger && { logger }),\n    ...(input && { input }),\n    ...(secrets && { secrets }),\n    ...(task && { task }),\n    ...(user && { user }),\n    templateInfo,\n  };\n}\n"],"names":["mockCredentials","loggerToWinstonLogger","mockServices","PassThrough","createMockDirectory"],"mappings":";;;;;;AAiCO,SAAS,wBAId,OAAA,EAC4C;AAC5C,EAAA,MAAM,WAAA,GAAcA,iCAAgB,IAAA,EAAK;AAEzC,EAAA,MAAM,cAAA,GAAiB;AAAA,IACrB,MAAA,EAAQC,2CAAA,CAAsBC,6BAAA,CAAa,MAAA,CAAO,MAAM,CAAA;AAAA,IACxD,SAAA,EAAW,IAAIC,kBAAA,EAAY;AAAA,IAC3B,MAAA,EAAQ,KAAK,EAAA,EAAG;AAAA,IAChB,wBAAA,EAA0B,KAAK,EAAA,EAAG;AAAA,IAClC,OAAO,EAAC;AAAA,IACR,MAAM,WACJ,IAAA,EACY;AACZ,MAAA,OAAO,KAAK,EAAA,EAAG;AAAA,IACjB,CAAA;AAAA,IACA,uBAAA,EAAyB,MAAM,OAAA,CAAQ,OAAA,CAAQ,WAAW,CAAA;AAAA,IAC1D,IAAA,EAAM;AAAA,MACJ,EAAA,EAAI;AAAA,KACN;AAAA,IACA,IAAA,EAAM;AAAA,MACJ,EAAA,EAAI,cAAA;AAAA,MACJ,IAAA,EAAM;AAAA;AACR,GACF;AAEA,EAAA,MAAM,yBAAyB,OAAO;AAAA,IACpC,aAAA,EAAeC,oCAAA,EAAoB,CAAE,OAAA,CAAQ,WAAW;AAAA,GAC1D,CAAA;AAEA,EAAA,IAAI,CAAC,OAAA,EAAS;AACZ,IAAA,OAAO;AAAA,MACL,GAAG,cAAA;AAAA,MACH,GAAG,sBAAA;AAAuB,KAC5B;AAAA,EACF;AAEA,EAAA,MAAM,EAAE,OAAO,MAAA,EAAQ,OAAA,EAAS,cAAc,aAAA,EAAe,IAAA,EAAM,MAAK,GACtE,OAAA;AAEF,EAAA,OAAO;AAAA,IACL,GAAG,cAAA;AAAA,IACH,GAAI,aAAA,GAAgB,EAAE,aAAA,KAAkB,sBAAA,EAAuB;AAAA,IAC/D,GAAI,aAAA,IAAiB;AAAA,MACnB,wBAAA,EAA0B,IAAA,CAAK,EAAA,EAAG,CAAE,kBAAkB,aAAa;AAAA,KACrE;AAAA,IACA,GAAI,MAAA,IAAU,EAAE,MAAA,EAAO;AAAA,IACvB,GAAI,KAAA,IAAS,EAAE,KAAA,EAAM;AAAA,IACrB,GAAI,OAAA,IAAW,EAAE,OAAA,EAAQ;AAAA,IACzB,GAAI,IAAA,IAAQ,EAAE,IAAA,EAAK;AAAA,IACnB,GAAI,IAAA,IAAQ,EAAE,IAAA,EAAK;AAAA,IACnB;AAAA,GACF;AACF;;;;"}