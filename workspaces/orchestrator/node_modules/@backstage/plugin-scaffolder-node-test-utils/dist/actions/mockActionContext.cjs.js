'use strict';

var stream = require('stream');
var backendTestUtils = require('@backstage/backend-test-utils');
var loggerToWinstonLogger = require('./loggerToWinstonLogger.cjs.js');

function createMockActionContext(options) {
  const credentials = backendTestUtils.mockCredentials.user();
  const defaultContext = {
    logger: loggerToWinstonLogger.loggerToWinstonLogger(backendTestUtils.mockServices.logger.mock()),
    logStream: new stream.PassThrough(),
    output: jest.fn(),
    createTemporaryDirectory: jest.fn(),
    input: {},
    async checkpoint(opts) {
      return opts.fn();
    },
    getInitiatorCredentials: () => Promise.resolve(credentials),
    task: {
      id: "mock-task-id"
    },
    step: {
      id: "mock-step-id",
      name: "mock step name"
    }
  };
  const createDefaultWorkspace = () => ({
    workspacePath: backendTestUtils.createMockDirectory().resolve("workspace")
  });
  if (!options) {
    return {
      ...defaultContext,
      ...createDefaultWorkspace()
    };
  }
  const { input, logger, secrets, templateInfo, workspacePath, task, user } = options;
  return {
    ...defaultContext,
    ...workspacePath ? { workspacePath } : createDefaultWorkspace(),
    ...workspacePath && {
      createTemporaryDirectory: jest.fn().mockResolvedValue(workspacePath)
    },
    ...logger && { logger },
    ...input && { input },
    ...secrets && { secrets },
    ...task && { task },
    ...user && { user },
    templateInfo
  };
}

exports.createMockActionContext = createMockActionContext;
//# sourceMappingURL=mockActionContext.cjs.js.map
