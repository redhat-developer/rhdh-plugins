import { jsx } from 'react/jsx-runtime';
import { Fragment, useState, useEffect } from 'react';
import { AppRootElementBlueprint, dialogApiRef } from '@backstage/frontend-plugin-api';
import { createDeferred } from '@backstage/types';
import Dialog from '@material-ui/core/Dialog';

let dialogId = 0;
function getDialogId() {
  dialogId += 1;
  return dialogId.toString(36);
}
function DialogDisplay({
  dialogApi
}) {
  const [dialogs, setDialogs] = useState([]);
  useEffect(() => {
    dialogApi.connect((options) => {
      const id = getDialogId();
      const deferred = createDeferred();
      const dialog = {
        id,
        modal: options.modal,
        close(result) {
          deferred.resolve(result);
          setDialogs((ds) => ds.filter((d) => d.dialog.id !== id));
        },
        update(ElementOrComponent) {
          const element2 = typeof ElementOrComponent === "function" ? /* @__PURE__ */ jsx(ElementOrComponent, { dialog }) : ElementOrComponent;
          setDialogs(
            (ds) => ds.map((d) => d.dialog.id === id ? { dialog, element: element2 } : d)
          );
        },
        async result() {
          return deferred;
        }
      };
      const element = /* @__PURE__ */ jsx(options.component, { dialog });
      setDialogs((ds) => [...ds, { dialog, element }]);
      return dialog;
    });
  }, [dialogApi]);
  if (dialogs.length > 0) {
    const lastDialog = dialogs[dialogs.length - 1];
    return /* @__PURE__ */ jsx(
      Dialog,
      {
        open: true,
        onClose: () => {
          if (!lastDialog.dialog.modal) {
            lastDialog.dialog.close();
          }
        },
        children: lastDialog.element
      }
    );
  }
  return null;
}
const dialogDisplayAppRootElement = AppRootElementBlueprint.makeWithOverrides({
  name: "dialog-display",
  factory(originalFactory, { apis }) {
    const dialogApi = apis.get(dialogApiRef);
    if (!isInternalDialogApi(dialogApi)) {
      return originalFactory({
        element: /* @__PURE__ */ jsx(Fragment, {})
      });
    }
    return originalFactory({
      element: /* @__PURE__ */ jsx(DialogDisplay, { dialogApi })
    });
  }
});
function isInternalDialogApi(dialogApi) {
  if (!dialogApi) {
    return false;
  }
  return "connect" in dialogApi;
}

export { dialogDisplayAppRootElement };
//# sourceMappingURL=DialogDisplay.esm.js.map
