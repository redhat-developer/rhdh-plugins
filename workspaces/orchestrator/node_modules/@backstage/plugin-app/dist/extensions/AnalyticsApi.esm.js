import { ApiBlueprint, createExtensionInput, AnalyticsImplementationBlueprint, analyticsApiRef } from '@backstage/frontend-plugin-api';

const analyticsApi = ApiBlueprint.makeWithOverrides({
  name: "analytics",
  inputs: {
    implementations: createExtensionInput([
      AnalyticsImplementationBlueprint.dataRefs.factory
    ])
  },
  factory(originalFactory, { inputs }) {
    const aggregatedDeps = inputs.implementations.flatMap(
      (impls) => Object.values(
        impls.get(AnalyticsImplementationBlueprint.dataRefs.factory).deps
      )
    ).reduce((accum, ref) => {
      accum[ref.id] = ref;
      return accum;
    }, {});
    return originalFactory(
      (defineParams) => defineParams({
        api: analyticsApiRef,
        deps: aggregatedDeps,
        factory: (analyticsApiDeps) => {
          const actualApis = inputs.implementations.map(
            (impl) => impl.get(AnalyticsImplementationBlueprint.dataRefs.factory)
          ).map(
            ({ factory, deps }) => factory(
              // Reconstruct a deps argument to pass to this analytics
              // implementation factory from those passed into ours.
              Object.keys(deps).reduce(
                (accum, dep) => {
                  accum[dep] = analyticsApiDeps[deps[dep].id];
                  return accum;
                },
                {}
              )
            )
          );
          return {
            captureEvent: (event) => {
              actualApis.forEach((api) => {
                try {
                  api.captureEvent(event);
                } catch {
                }
              });
            }
          };
        }
      })
    );
  }
});

export { analyticsApi };
//# sourceMappingURL=AnalyticsApi.esm.js.map
