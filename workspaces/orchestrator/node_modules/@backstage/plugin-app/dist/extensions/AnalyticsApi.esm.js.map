{"version":3,"file":"AnalyticsApi.esm.js","sources":["../../src/extensions/AnalyticsApi.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  analyticsApiRef,\n  AnalyticsImplementationBlueprint,\n  ApiBlueprint,\n  ApiRef,\n  createExtensionInput,\n} from '@backstage/frontend-plugin-api';\n\nexport const analyticsApi = ApiBlueprint.makeWithOverrides({\n  name: 'analytics',\n  inputs: {\n    implementations: createExtensionInput([\n      AnalyticsImplementationBlueprint.dataRefs.factory,\n    ]),\n  },\n  factory(originalFactory, { inputs }) {\n    // Pull out and aggregate deps from every implementation input into an\n    // object keyed by the apiRef ID to be passed to this API implementation as\n    // if they were its own deps.\n    const aggregatedDeps = inputs.implementations\n      .flatMap<ApiRef<unknown>>(impls =>\n        Object.values(\n          impls.get(AnalyticsImplementationBlueprint.dataRefs.factory).deps,\n        ),\n      )\n      .reduce<{ [x: string]: ApiRef<unknown> }>((accum, ref) => {\n        accum[ref.id] = ref;\n        return accum;\n      }, {});\n\n    return originalFactory(defineParams =>\n      defineParams({\n        api: analyticsApiRef,\n        deps: aggregatedDeps,\n        factory: analyticsApiDeps => {\n          const actualApis = inputs.implementations\n            .map(impl =>\n              impl.get(AnalyticsImplementationBlueprint.dataRefs.factory),\n            )\n            .map(({ factory, deps }) =>\n              factory(\n                // Reconstruct a deps argument to pass to this analytics\n                // implementation factory from those passed into ours.\n                Object.keys(deps).reduce<{ [x: string]: ApiRef<unknown> }>(\n                  (accum, dep) => {\n                    accum[dep] = analyticsApiDeps[\n                      (deps as { [x: string]: ApiRef<unknown> })[dep].id\n                    ] as ApiRef<unknown>;\n                    return accum;\n                  },\n                  {},\n                ),\n              ),\n            );\n          return {\n            captureEvent: event => {\n              actualApis.forEach(api => {\n                try {\n                  api.captureEvent(event);\n                } catch {\n                  /* ignored */\n                }\n              });\n            },\n          };\n        },\n      }),\n    );\n  },\n});\n"],"names":[],"mappings":";;AAwBO,MAAM,YAAA,GAAe,aAAa,iBAAA,CAAkB;AAAA,EACzD,IAAA,EAAM,WAAA;AAAA,EACN,MAAA,EAAQ;AAAA,IACN,iBAAiB,oBAAA,CAAqB;AAAA,MACpC,iCAAiC,QAAA,CAAS;AAAA,KAC3C;AAAA,GACH;AAAA,EACA,OAAA,CAAQ,eAAA,EAAiB,EAAE,MAAA,EAAO,EAAG;AAInC,IAAA,MAAM,cAAA,GAAiB,OAAO,eAAA,CAC3B,OAAA;AAAA,MAAyB,WACxB,MAAA,CAAO,MAAA;AAAA,QACL,KAAA,CAAM,GAAA,CAAI,gCAAA,CAAiC,QAAA,CAAS,OAAO,CAAA,CAAE;AAAA;AAC/D,KACF,CACC,MAAA,CAAyC,CAAC,KAAA,EAAO,GAAA,KAAQ;AACxD,MAAA,KAAA,CAAM,GAAA,CAAI,EAAE,CAAA,GAAI,GAAA;AAChB,MAAA,OAAO,KAAA;AAAA,IACT,CAAA,EAAG,EAAE,CAAA;AAEP,IAAA,OAAO,eAAA;AAAA,MAAgB,kBACrB,YAAA,CAAa;AAAA,QACX,GAAA,EAAK,eAAA;AAAA,QACL,IAAA,EAAM,cAAA;AAAA,QACN,SAAS,CAAA,gBAAA,KAAoB;AAC3B,UAAA,MAAM,UAAA,GAAa,OAAO,eAAA,CACvB,GAAA;AAAA,YAAI,CAAA,IAAA,KACH,IAAA,CAAK,GAAA,CAAI,gCAAA,CAAiC,SAAS,OAAO;AAAA,WAC5D,CACC,GAAA;AAAA,YAAI,CAAC,EAAE,OAAA,EAAS,IAAA,EAAK,KACpB,OAAA;AAAA;AAAA;AAAA,cAGE,MAAA,CAAO,IAAA,CAAK,IAAI,CAAA,CAAE,MAAA;AAAA,gBAChB,CAAC,OAAO,GAAA,KAAQ;AACd,kBAAA,KAAA,CAAM,GAAG,CAAA,GAAI,gBAAA,CACV,IAAA,CAA0C,GAAG,EAAE,EAClD,CAAA;AACA,kBAAA,OAAO,KAAA;AAAA,gBACT,CAAA;AAAA,gBACA;AAAC;AACH;AACF,WACF;AACF,UAAA,OAAO;AAAA,YACL,cAAc,CAAA,KAAA,KAAS;AACrB,cAAA,UAAA,CAAW,QAAQ,CAAA,GAAA,KAAO;AACxB,gBAAA,IAAI;AACF,kBAAA,GAAA,CAAI,aAAa,KAAK,CAAA;AAAA,gBACxB,CAAA,CAAA,MAAQ;AAAA,gBAER;AAAA,cACF,CAAC,CAAA;AAAA,YACH;AAAA,WACF;AAAA,QACF;AAAA,OACD;AAAA,KACH;AAAA,EACF;AACF,CAAC;;;;"}