{"version":3,"file":"DialogDisplay.esm.js","sources":["../../src/extensions/DialogDisplay.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Fragment, useEffect, useState } from 'react';\nimport {\n  AppRootElementBlueprint,\n  DialogApi,\n  DialogApiDialog,\n  dialogApiRef,\n} from '@backstage/frontend-plugin-api';\nimport { createDeferred } from '@backstage/types';\nimport { OnShowDialog } from '../apis/DefaultDialogApi';\nimport Dialog from '@material-ui/core/Dialog';\n\nlet dialogId = 0;\nfunction getDialogId() {\n  dialogId += 1;\n  return dialogId.toString(36);\n}\n\ntype DialogState = DialogApiDialog<unknown> & {\n  id: string;\n  modal: boolean;\n};\n\n/**\n * The other half of the default implementation of the {@link DialogApi}.\n *\n * This component is responsible for rendering the dialogs in the React tree and managing a stack of dialogs.\n * It expects the implementation of the {@link DialogApi} to be the `DefaultDialogApi`. If one is replaced the other must be too.\n * @internal\n */\nfunction DialogDisplay({\n  dialogApi,\n}: {\n  dialogApi: DialogApi & { connect(onShow: OnShowDialog): void };\n}) {\n  const [dialogs, setDialogs] = useState<\n    { dialog: DialogState; element: React.JSX.Element }[]\n  >([]);\n\n  useEffect(() => {\n    dialogApi.connect(options => {\n      const id = getDialogId();\n      const deferred = createDeferred<unknown>();\n      const dialog: DialogState = {\n        id,\n        modal: options.modal,\n        close(result) {\n          deferred.resolve(result);\n          setDialogs(ds => ds.filter(d => d.dialog.id !== id));\n        },\n        update(ElementOrComponent) {\n          const element =\n            typeof ElementOrComponent === 'function' ? (\n              <ElementOrComponent dialog={dialog} />\n            ) : (\n              ElementOrComponent\n            );\n          setDialogs(ds =>\n            ds.map(d => (d.dialog.id === id ? { dialog, element } : d)),\n          );\n        },\n        async result() {\n          return deferred;\n        },\n      };\n      const element = <options.component dialog={dialog} />;\n      setDialogs(ds => [...ds, { dialog, element }]);\n      return dialog;\n    });\n  }, [dialogApi]);\n\n  if (dialogs.length > 0) {\n    const lastDialog = dialogs[dialogs.length - 1];\n    return (\n      <Dialog\n        open\n        onClose={() => {\n          if (!lastDialog.dialog.modal) {\n            lastDialog.dialog.close();\n          }\n        }}\n      >\n        {lastDialog.element}\n      </Dialog>\n    );\n  }\n\n  return null;\n}\n\nexport const dialogDisplayAppRootElement =\n  AppRootElementBlueprint.makeWithOverrides({\n    name: 'dialog-display',\n    factory(originalFactory, { apis }) {\n      const dialogApi = apis.get(dialogApiRef);\n      if (!isInternalDialogApi(dialogApi)) {\n        return originalFactory({\n          element: <Fragment />,\n        });\n      }\n      return originalFactory({\n        element: <DialogDisplay dialogApi={dialogApi} />,\n      });\n    },\n  });\n\nfunction isInternalDialogApi(\n  dialogApi?: DialogApi,\n): dialogApi is DialogApi & { connect(onShow: OnShowDialog): void } {\n  if (!dialogApi) {\n    return false;\n  }\n  return 'connect' in dialogApi;\n}\n"],"names":["element"],"mappings":"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"}