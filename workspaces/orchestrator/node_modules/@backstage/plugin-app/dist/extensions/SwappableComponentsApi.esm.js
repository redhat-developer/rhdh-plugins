import { ApiBlueprint, createExtensionInput, swappableComponentsApiRef, SwappableComponentBlueprint } from '@backstage/frontend-plugin-api';
import { DefaultSwappableComponentsApi } from '../apis/SwappableComponentsApi/DefaultSwappableComponentsApi.esm.js';

const SwappableComponentsApi = ApiBlueprint.makeWithOverrides({
  name: "swappable-components",
  inputs: {
    components: createExtensionInput([
      SwappableComponentBlueprint.dataRefs.component
    ])
  },
  factory: (originalFactory, { inputs }) => {
    return originalFactory(
      (defineParams) => defineParams({
        api: swappableComponentsApiRef,
        deps: {},
        factory: () => {
          const nonAppExtensions = inputs.components.filter(
            (i) => i.node.spec.plugin?.id !== "app"
          );
          if (nonAppExtensions.length > 0) {
            console.warn(
              `SwappableComponents should only be installed as an extension in the app plugin. You can either use appPlugin.override(), or provide a module for the app-plugin with the extension there instead. Invalid extensions: ${nonAppExtensions.map((i) => i.node.spec.id).join(", ")}`
            );
          }
          const appExtensions = inputs.components.filter(
            (i) => i.node.spec.plugin?.id === "app"
          );
          return DefaultSwappableComponentsApi.fromComponents(
            appExtensions.map(
              (i) => i.get(SwappableComponentBlueprint.dataRefs.component)
            )
          );
        }
      })
    );
  }
});

export { SwappableComponentsApi };
//# sourceMappingURL=SwappableComponentsApi.esm.js.map
