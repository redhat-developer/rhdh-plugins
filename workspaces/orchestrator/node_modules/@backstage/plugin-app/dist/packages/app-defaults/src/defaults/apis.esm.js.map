{"version":3,"file":"apis.esm.js","sources":["../../../../../../../packages/app-defaults/src/defaults/apis.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AlertApiForwarder,\n  NoOpAnalyticsApi,\n  ErrorApiForwarder,\n  ErrorAlerter,\n  GoogleAuth,\n  GithubAuth,\n  OktaAuth,\n  GitlabAuth,\n  MicrosoftAuth,\n  BitbucketAuth,\n  BitbucketServerAuth,\n  OAuthRequestManager,\n  WebStorage,\n  OneLoginAuth,\n  UnhandledErrorForwarder,\n  AtlassianAuth,\n  createFetchApi,\n  FetchMiddlewares,\n  VMwareCloudAuth,\n  FrontendHostDiscovery,\n  OpenShiftAuth,\n} from '@backstage/core-app-api';\n\nimport {\n  createApiFactory,\n  alertApiRef,\n  analyticsApiRef,\n  errorApiRef,\n  discoveryApiRef,\n  fetchApiRef,\n  identityApiRef,\n  oauthRequestApiRef,\n  googleAuthApiRef,\n  githubAuthApiRef,\n  oktaAuthApiRef,\n  gitlabAuthApiRef,\n  microsoftAuthApiRef,\n  storageApiRef,\n  configApiRef,\n  oneloginAuthApiRef,\n  bitbucketAuthApiRef,\n  bitbucketServerAuthApiRef,\n  atlassianAuthApiRef,\n  vmwareCloudAuthApiRef,\n  openshiftAuthApiRef,\n} from '@backstage/core-plugin-api';\nimport {\n  permissionApiRef,\n  IdentityPermissionApi,\n} from '@backstage/plugin-permission-react';\n\nexport const apis = [\n  createApiFactory({\n    api: discoveryApiRef,\n    deps: { configApi: configApiRef },\n    factory: ({ configApi }) => FrontendHostDiscovery.fromConfig(configApi),\n  }),\n  createApiFactory({\n    api: alertApiRef,\n    deps: {},\n    factory: () => new AlertApiForwarder(),\n  }),\n  createApiFactory({\n    api: analyticsApiRef,\n    deps: {},\n    factory: () => new NoOpAnalyticsApi(),\n  }),\n  createApiFactory({\n    api: errorApiRef,\n    deps: { alertApi: alertApiRef },\n    factory: ({ alertApi }) => {\n      const errorApi = new ErrorAlerter(alertApi, new ErrorApiForwarder());\n      UnhandledErrorForwarder.forward(errorApi, { hidden: false });\n      return errorApi;\n    },\n  }),\n  createApiFactory({\n    api: storageApiRef,\n    deps: { errorApi: errorApiRef },\n    factory: ({ errorApi }) => WebStorage.create({ errorApi }),\n  }),\n  createApiFactory({\n    api: fetchApiRef,\n    deps: {\n      configApi: configApiRef,\n      identityApi: identityApiRef,\n      discoveryApi: discoveryApiRef,\n    },\n    factory: ({ configApi, identityApi, discoveryApi }) => {\n      return createFetchApi({\n        middleware: [\n          FetchMiddlewares.resolvePluginProtocol({\n            discoveryApi,\n          }),\n          FetchMiddlewares.injectIdentityAuth({\n            identityApi,\n            config: configApi,\n          }),\n        ],\n      });\n    },\n  }),\n  createApiFactory({\n    api: oauthRequestApiRef,\n    deps: {},\n    factory: () => new OAuthRequestManager(),\n  }),\n  createApiFactory({\n    api: googleAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n      GoogleAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        environment: configApi.getOptionalString('auth.environment'),\n      }),\n  }),\n  createApiFactory({\n    api: microsoftAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n      MicrosoftAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        environment: configApi.getOptionalString('auth.environment'),\n      }),\n  }),\n  createApiFactory({\n    api: githubAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n      GithubAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        defaultScopes: ['read:user'],\n        environment: configApi.getOptionalString('auth.environment'),\n      }),\n  }),\n  createApiFactory({\n    api: oktaAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n      OktaAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        environment: configApi.getOptionalString('auth.environment'),\n      }),\n  }),\n  createApiFactory({\n    api: gitlabAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n      GitlabAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        environment: configApi.getOptionalString('auth.environment'),\n      }),\n  }),\n  createApiFactory({\n    api: oneloginAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n      OneLoginAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        environment: configApi.getOptionalString('auth.environment'),\n      }),\n  }),\n  createApiFactory({\n    api: bitbucketAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n      BitbucketAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        defaultScopes: ['account'],\n        environment: configApi.getOptionalString('auth.environment'),\n      }),\n  }),\n  createApiFactory({\n    api: bitbucketServerAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n      BitbucketServerAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        defaultScopes: ['REPO_READ'],\n        environment: configApi.getOptionalString('auth.environment'),\n      }),\n  }),\n  createApiFactory({\n    api: atlassianAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) => {\n      return AtlassianAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        environment: configApi.getOptionalString('auth.environment'),\n      });\n    },\n  }),\n  createApiFactory({\n    api: vmwareCloudAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) => {\n      return VMwareCloudAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        environment: configApi.getOptionalString('auth.environment'),\n      });\n    },\n  }),\n  createApiFactory({\n    api: openshiftAuthApiRef,\n    deps: {\n      discoveryApi: discoveryApiRef,\n      oauthRequestApi: oauthRequestApiRef,\n      configApi: configApiRef,\n    },\n    factory: ({ discoveryApi, oauthRequestApi, configApi }) => {\n      return OpenShiftAuth.create({\n        configApi,\n        discoveryApi,\n        oauthRequestApi,\n        environment: configApi.getOptionalString('auth.environment'),\n      });\n    },\n  }),\n  createApiFactory({\n    api: permissionApiRef,\n    deps: {\n      discovery: discoveryApiRef,\n      identity: identityApiRef,\n      config: configApiRef,\n    },\n    factory: ({ config, discovery, identity }) =>\n      IdentityPermissionApi.create({ config, discovery, identity }),\n  }),\n];\n"],"names":[],"mappings":"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"}