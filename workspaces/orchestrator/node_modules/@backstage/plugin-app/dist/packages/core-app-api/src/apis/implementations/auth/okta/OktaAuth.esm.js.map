{"version":3,"file":"OktaAuth.esm.js","sources":["../../../../../../../../../../packages/core-app-api/src/apis/implementations/auth/okta/OktaAuth.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { oktaAuthApiRef } from '@backstage/core-plugin-api';\nimport { OAuth2 } from '../oauth2';\nimport { OAuthApiCreateOptions } from '../types';\n\nconst DEFAULT_PROVIDER = {\n  id: 'okta',\n  title: 'Okta',\n  icon: () => null,\n};\n\nconst OKTA_OIDC_SCOPES: Set<String> = new Set([\n  'openid',\n  'profile',\n  'email',\n  'phone',\n  'address',\n  'groups',\n  'offline_access',\n]);\n\nconst OKTA_SCOPE_PREFIX: string = 'okta.';\n\n/**\n * Implements the OAuth flow to Okta products.\n *\n * @public\n */\nexport default class OktaAuth {\n  static create(options: OAuthApiCreateOptions): typeof oktaAuthApiRef.T {\n    const {\n      configApi,\n      discoveryApi,\n      environment = 'development',\n      provider = DEFAULT_PROVIDER,\n      oauthRequestApi,\n      defaultScopes = ['openid', 'email', 'profile', 'offline_access'],\n    } = options;\n\n    return OAuth2.create({\n      configApi,\n      discoveryApi,\n      oauthRequestApi,\n      provider,\n      environment,\n      defaultScopes,\n      scopeTransform(scopes) {\n        return scopes.map(scope => {\n          if (OKTA_OIDC_SCOPES.has(scope)) {\n            return scope;\n          }\n\n          if (scope.startsWith(OKTA_SCOPE_PREFIX)) {\n            return scope;\n          }\n\n          return `${OKTA_SCOPE_PREFIX}${scope}`;\n        });\n      },\n    });\n  }\n}\n"],"names":[],"mappings":";;AAoBA,MAAM,gBAAA,GAAmB;AAAA,EACvB,EAAA,EAAI,MAAA;AAAA,EACJ,KAAA,EAAO,MAAA;AAAA,EACP,MAAM,MAAM;AACd,CAAA;AAEA,MAAM,gBAAA,uBAAoC,GAAA,CAAI;AAAA,EAC5C,QAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,SAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAAC,CAAA;AAED,MAAM,iBAAA,GAA4B,OAAA;AAOlC,MAAqB,QAAA,CAAS;AAAA,EAC5B,OAAO,OAAO,OAAA,EAAyD;AACrE,IAAA,MAAM;AAAA,MACJ,SAAA;AAAA,MACA,YAAA;AAAA,MACA,WAAA,GAAc,aAAA;AAAA,MACd,QAAA,GAAW,gBAAA;AAAA,MACX,eAAA;AAAA,MACA,aAAA,GAAgB,CAAC,QAAA,EAAU,OAAA,EAAS,WAAW,gBAAgB;AAAA,KACjE,GAAI,OAAA;AAEJ,IAAA,OAAO,OAAO,MAAA,CAAO;AAAA,MACnB,SAAA;AAAA,MACA,YAAA;AAAA,MACA,eAAA;AAAA,MACA,QAAA;AAAA,MACA,WAAA;AAAA,MACA,aAAA;AAAA,MACA,eAAe,MAAA,EAAQ;AACrB,QAAA,OAAO,MAAA,CAAO,IAAI,CAAA,KAAA,KAAS;AACzB,UAAA,IAAI,gBAAA,CAAiB,GAAA,CAAI,KAAK,CAAA,EAAG;AAC/B,YAAA,OAAO,KAAA;AAAA,UACT;AAEA,UAAA,IAAI,KAAA,CAAM,UAAA,CAAW,iBAAiB,CAAA,EAAG;AACvC,YAAA,OAAO,KAAA;AAAA,UACT;AAEA,UAAA,OAAO,CAAA,EAAG,iBAAiB,CAAA,EAAG,KAAK,CAAA,CAAA;AAAA,QACrC,CAAC,CAAA;AAAA,MACH;AAAA,KACD,CAAA;AAAA,EACH;AACF;;;;"}