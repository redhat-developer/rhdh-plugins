import { jsx } from 'react/jsx-runtime';
import { lazy } from 'react';
import { OpaqueSwappableComponentRef } from '../../packages/frontend-internal/src/wiring/InternalSwappableComponentRef.esm.js';
import '../../packages/frontend-internal/src/wiring/InternalExtensionDefinition.esm.js';
import '../../packages/frontend-internal/src/wiring/InternalFrontendPlugin.esm.js';

class DefaultSwappableComponentsApi {
  #components;
  static fromComponents(components) {
    return new DefaultSwappableComponentsApi(
      new Map(
        components.map((entry) => {
          return [
            entry.ref.id,
            entry.loader ? lazy(async () => ({
              default: await entry.loader()
            })) : void 0
          ];
        })
      )
    );
  }
  constructor(components) {
    this.#components = components;
  }
  getComponent(ref) {
    const OverrideComponent = this.#components.get(ref.id);
    const { defaultComponent: DefaultComponent, transformProps } = OpaqueSwappableComponentRef.toInternal(ref);
    return (props) => {
      const innerProps = transformProps?.(props) ?? props;
      if (OverrideComponent) {
        return /* @__PURE__ */ jsx(OverrideComponent, { ...innerProps });
      }
      return /* @__PURE__ */ jsx(DefaultComponent, { ...innerProps });
    };
  }
}

export { DefaultSwappableComponentsApi };
//# sourceMappingURL=DefaultSwappableComponentsApi.esm.js.map
