import GithubAuth from './packages/core-app-api/src/apis/implementations/auth/github/GithubAuth.esm.js';
import GitlabAuth from './packages/core-app-api/src/apis/implementations/auth/gitlab/GitlabAuth.esm.js';
import GoogleAuth from './packages/core-app-api/src/apis/implementations/auth/google/GoogleAuth.esm.js';
import 'zen-observable';
import { configApiRef, discoveryApiRef, alertApiRef, errorApiRef, storageApiRef, identityApiRef, fetchApiRef, oauthRequestApiRef, googleAuthApiRef, microsoftAuthApiRef, githubAuthApiRef, oktaAuthApiRef, gitlabAuthApiRef, oneloginAuthApiRef, bitbucketAuthApiRef, bitbucketServerAuthApiRef, atlassianAuthApiRef, vmwareCloudAuthApiRef, openshiftAuthApiRef } from '@backstage/core-plugin-api';
import OktaAuth from './packages/core-app-api/src/apis/implementations/auth/okta/OktaAuth.esm.js';
import './packages/core-app-api/src/apis/implementations/auth/saml/types.esm.js';
import MicrosoftAuth from './packages/core-app-api/src/apis/implementations/auth/microsoft/MicrosoftAuth.esm.js';
import OneLoginAuth from './packages/core-app-api/src/apis/implementations/auth/onelogin/OneLoginAuth.esm.js';
import BitbucketAuth from './packages/core-app-api/src/apis/implementations/auth/bitbucket/BitbucketAuth.esm.js';
import BitbucketServerAuth from './packages/core-app-api/src/apis/implementations/auth/bitbucketServer/BitbucketServerAuth.esm.js';
import AtlassianAuth from './packages/core-app-api/src/apis/implementations/auth/atlassian/AtlassianAuth.esm.js';
import VMwareCloudAuth from './packages/core-app-api/src/apis/implementations/auth/vmwareCloud/VMwareCloudAuth.esm.js';
import OpenShiftAuth from './packages/core-app-api/src/apis/implementations/auth/openshift/OpenShiftAuth.esm.js';
import { AlertApiForwarder } from './packages/core-app-api/src/apis/implementations/AlertApi/AlertApiForwarder.esm.js';
import '@backstage/config';
import { UrlPatternDiscovery } from './packages/core-app-api/src/apis/implementations/DiscoveryApi/UrlPatternDiscovery.esm.js';
import { ErrorAlerter } from './packages/core-app-api/src/apis/implementations/ErrorApi/ErrorAlerter.esm.js';
import { ErrorApiForwarder } from './packages/core-app-api/src/apis/implementations/ErrorApi/ErrorApiForwarder.esm.js';
import { UnhandledErrorForwarder } from './packages/core-app-api/src/apis/implementations/ErrorApi/UnhandledErrorForwarder.esm.js';
import { createFetchApi } from './packages/core-app-api/src/apis/implementations/FetchApi/createFetchApi.esm.js';
import { FetchMiddlewares } from './packages/core-app-api/src/apis/implementations/FetchApi/FetchMiddlewares.esm.js';
import { OAuthRequestManager } from './packages/core-app-api/src/apis/implementations/OAuthRequestApi/OAuthRequestManager.esm.js';
import { WebStorage } from './packages/core-app-api/src/apis/implementations/StorageApi/WebStorage.esm.js';
import { ApiBlueprint, dialogApiRef } from '@backstage/frontend-plugin-api';
import { ScmAuth, ScmIntegrationsApi, scmIntegrationsApiRef } from '@backstage/integration-react';
import { IdentityPermissionApi, permissionApiRef } from '@backstage/plugin-permission-react';
import { DefaultDialogApi } from './apis/DefaultDialogApi.esm.js';
import { analyticsApi } from './extensions/AnalyticsApi.esm.js';

const apis = [
  ApiBlueprint.make({
    name: "dialog",
    params: (defineParams) => defineParams({
      api: dialogApiRef,
      deps: {},
      factory: () => new DefaultDialogApi()
    })
  }),
  ApiBlueprint.make({
    name: "discovery",
    params: (defineParams) => defineParams({
      api: discoveryApiRef,
      deps: { configApi: configApiRef },
      factory: ({ configApi }) => UrlPatternDiscovery.compile(
        `${configApi.getString("backend.baseUrl")}/api/{{ pluginId }}`
      )
    })
  }),
  ApiBlueprint.make({
    name: "alert",
    params: (defineParams) => defineParams({
      api: alertApiRef,
      deps: {},
      factory: () => new AlertApiForwarder()
    })
  }),
  analyticsApi,
  ApiBlueprint.make({
    name: "error",
    params: (defineParams) => defineParams({
      api: errorApiRef,
      deps: { alertApi: alertApiRef },
      factory: ({ alertApi }) => {
        const errorApi = new ErrorAlerter(alertApi, new ErrorApiForwarder());
        UnhandledErrorForwarder.forward(errorApi, { hidden: false });
        return errorApi;
      }
    })
  }),
  ApiBlueprint.make({
    name: "storage",
    params: (defineParams) => defineParams({
      api: storageApiRef,
      deps: { errorApi: errorApiRef },
      factory: ({ errorApi }) => WebStorage.create({ errorApi })
    })
  }),
  ApiBlueprint.make({
    name: "fetch",
    params: (defineParams) => defineParams({
      api: fetchApiRef,
      deps: {
        configApi: configApiRef,
        identityApi: identityApiRef,
        discoveryApi: discoveryApiRef
      },
      factory: ({ configApi, identityApi, discoveryApi }) => {
        return createFetchApi({
          middleware: [
            FetchMiddlewares.resolvePluginProtocol({
              discoveryApi
            }),
            FetchMiddlewares.injectIdentityAuth({
              identityApi,
              config: configApi
            })
          ]
        });
      }
    })
  }),
  ApiBlueprint.make({
    name: "oauth-request",
    params: (defineParams) => defineParams({
      api: oauthRequestApiRef,
      deps: {},
      factory: () => new OAuthRequestManager()
    })
  }),
  ApiBlueprint.make({
    name: "google-auth",
    params: (defineParams) => defineParams({
      api: googleAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => GoogleAuth.create({
        configApi,
        discoveryApi,
        oauthRequestApi,
        environment: configApi.getOptionalString("auth.environment")
      })
    })
  }),
  ApiBlueprint.make({
    name: "microsoft-auth",
    params: (defineParams) => defineParams({
      api: microsoftAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => MicrosoftAuth.create({
        configApi,
        discoveryApi,
        oauthRequestApi,
        environment: configApi.getOptionalString("auth.environment")
      })
    })
  }),
  ApiBlueprint.make({
    name: "github-auth",
    params: (defineParams) => defineParams({
      api: githubAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => GithubAuth.create({
        configApi,
        discoveryApi,
        oauthRequestApi,
        defaultScopes: ["read:user"],
        environment: configApi.getOptionalString("auth.environment")
      })
    })
  }),
  ApiBlueprint.make({
    name: "okta-auth",
    params: (defineParams) => defineParams({
      api: oktaAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => OktaAuth.create({
        configApi,
        discoveryApi,
        oauthRequestApi,
        environment: configApi.getOptionalString("auth.environment")
      })
    })
  }),
  ApiBlueprint.make({
    name: "gitlab-auth",
    params: (defineParams) => defineParams({
      api: gitlabAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => GitlabAuth.create({
        configApi,
        discoveryApi,
        oauthRequestApi,
        environment: configApi.getOptionalString("auth.environment")
      })
    })
  }),
  ApiBlueprint.make({
    name: "onelogin-auth",
    params: (defineParams) => defineParams({
      api: oneloginAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => OneLoginAuth.create({
        configApi,
        discoveryApi,
        oauthRequestApi,
        environment: configApi.getOptionalString("auth.environment")
      })
    })
  }),
  ApiBlueprint.make({
    name: "bitbucket-auth",
    params: (defineParams) => defineParams({
      api: bitbucketAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => BitbucketAuth.create({
        configApi,
        discoveryApi,
        oauthRequestApi,
        defaultScopes: ["account"],
        environment: configApi.getOptionalString("auth.environment")
      })
    })
  }),
  ApiBlueprint.make({
    name: "bitbucket-server-auth",
    params: (defineParams) => defineParams({
      api: bitbucketServerAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => BitbucketServerAuth.create({
        configApi,
        discoveryApi,
        oauthRequestApi,
        defaultScopes: ["REPO_READ"],
        environment: configApi.getOptionalString("auth.environment")
      })
    })
  }),
  ApiBlueprint.make({
    name: "atlassian-auth",
    params: (defineParams) => defineParams({
      api: atlassianAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => {
        return AtlassianAuth.create({
          configApi,
          discoveryApi,
          oauthRequestApi,
          environment: configApi.getOptionalString("auth.environment")
        });
      }
    })
  }),
  ApiBlueprint.make({
    name: "vmware-cloud-auth",
    params: (defineParams) => defineParams({
      api: vmwareCloudAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => {
        return VMwareCloudAuth.create({
          configApi,
          discoveryApi,
          oauthRequestApi,
          environment: configApi.getOptionalString("auth.environment")
        });
      }
    })
  }),
  ApiBlueprint.make({
    name: "openshift-auth",
    params: (defineParams) => defineParams({
      api: openshiftAuthApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        oauthRequestApi: oauthRequestApiRef,
        configApi: configApiRef
      },
      factory: ({ discoveryApi, oauthRequestApi, configApi }) => {
        return OpenShiftAuth.create({
          configApi,
          discoveryApi,
          oauthRequestApi,
          environment: configApi.getOptionalString("auth.environment")
        });
      }
    })
  }),
  ApiBlueprint.make({
    name: "permission",
    params: (defineParams) => defineParams({
      api: permissionApiRef,
      deps: {
        discovery: discoveryApiRef,
        identity: identityApiRef,
        config: configApiRef
      },
      factory: ({ config, discovery, identity }) => IdentityPermissionApi.create({ config, discovery, identity })
    })
  }),
  ApiBlueprint.make({
    name: "scm-auth",
    params: (defineParams) => defineParams(ScmAuth.createDefaultApiFactory())
  }),
  ApiBlueprint.make({
    name: "scm-integrations",
    params: (defineParams) => defineParams({
      api: scmIntegrationsApiRef,
      deps: { configApi: configApiRef },
      factory: ({ configApi }) => ScmIntegrationsApi.fromConfig(configApi)
    })
  })
];

export { apis };
//# sourceMappingURL=defaultApis.esm.js.map
