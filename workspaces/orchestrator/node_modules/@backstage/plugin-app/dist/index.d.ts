import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import * as react from 'react';

/** @public */
declare const appPlugin: _backstage_frontend_plugin_api.OverridableFrontendPlugin<{}, {}, {
    app: _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            root: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}>, {
                singleton: true;
                optional: false;
            }>;
        };
        params: never;
        kind: undefined;
        name: undefined;
    }>;
    "app/layout": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            nav: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}>, {
                singleton: true;
                optional: false;
            }>;
            content: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}>, {
                singleton: true;
                optional: false;
            }>;
        };
        params: never;
        kind: undefined;
        name: "layout";
    }>;
    "app/nav": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            items: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
                title: string;
                icon: _backstage_core_plugin_api.IconComponent;
                routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
            }, "core.nav-item.target", {}>, {
                singleton: false;
                optional: false;
            }>;
            content: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.NavContentComponent, "core.nav-content.component", {}>, {
                singleton: true;
                optional: true;
            }>;
        };
        params: never;
        kind: undefined;
        name: "nav";
    }>;
    "app/root": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            router: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(props: {
                children: react.ReactNode;
            }) => JSX.Element | null, "app.router.wrapper", {}>, {
                singleton: true;
                optional: true;
            }>;
            signInPage: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.ComponentType<_backstage_core_plugin_api.SignInPageProps>, "core.sign-in-page.component", {}>, {
                singleton: true;
                optional: true;
            }>;
            children: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}>, {
                singleton: true;
                optional: false;
            }>;
            elements: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}>, {
                singleton: false;
                optional: false;
            }>;
            wrappers: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(props: {
                children: react.ReactNode;
            }) => JSX.Element | null, "app.root.wrapper", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        params: never;
        kind: undefined;
        name: "root";
    }>;
    "app/routes": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            routes: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
                optional: true;
            }>, {
                singleton: false;
                optional: false;
            }>;
        };
        params: never;
        kind: undefined;
        name: "routes";
    }>;
    "api:app/alert": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "alert";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/analytics": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {
            implementations: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.AnalyticsImplementationFactory<{}>, "core.analytics.factory", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "api";
        name: "analytics";
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/app-language": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "app-language";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/app-theme": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {
            themes: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.AppTheme, "core.theme.theme", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "api";
        name: "app-theme";
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/atlassian-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "atlassian-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/bitbucket-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "bitbucket-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/bitbucket-server-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "bitbucket-server-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/components": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "components";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/dialog": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "dialog";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/discovery": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "discovery";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/error": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "error";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/feature-flags": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "feature-flags";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/fetch": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "fetch";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/github-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "github-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/gitlab-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "gitlab-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/google-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "google-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/icons": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {
            icons: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
                [x: string]: _backstage_frontend_plugin_api.IconComponent;
            }, "core.icons", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "api";
        name: "icons";
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/microsoft-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "microsoft-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/oauth-request": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "oauth-request";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/okta-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "okta-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/onelogin-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "onelogin-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/openshift-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "openshift-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/permission": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "permission";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/scm-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "scm-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/scm-integrations": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "scm-integrations";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/storage": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "storage";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/swappable-components": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {
            components: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
                ref: _backstage_frontend_plugin_api.SwappableComponentRef;
                loader: (() => (props: {}) => JSX.Element | null) | (() => Promise<(props: {}) => JSX.Element | null>);
            }, "core.swappableComponent", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "api";
        name: "swappable-components";
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/translations": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {
            translations: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.TranslationResource<string> | _backstage_frontend_plugin_api.TranslationMessages<string, {
                [x: string]: string;
            }, boolean>, "core.translation.translation", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "api";
        name: "translations";
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:app/vmware-cloud-auth": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "vmware-cloud-auth";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "app-root-element:app/alert-display": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            transientTimeoutMs: number;
            anchorOrigin: {
                horizontal: "center" | "left" | "right";
                vertical: "top" | "bottom";
            };
        };
        configInput: {
            anchorOrigin?: {
                horizontal?: "center" | "left" | "right" | undefined;
                vertical?: "top" | "bottom" | undefined;
            } | undefined;
            transientTimeoutMs?: number | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "app-root-element";
        name: "alert-display";
        params: {
            element: JSX.Element;
        };
    }>;
    "app-root-element:app/dialog-display": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "app-root-element";
        name: "dialog-display";
        params: {
            element: JSX.Element;
        };
    }>;
    "app-root-element:app/oauth-request-dialog": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "app-root-element";
        name: "oauth-request-dialog";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {};
        params: {
            element: JSX.Element;
        };
    }>;
    "component:app/core-error-display": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "component";
        name: "core-error-display";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<{
            ref: _backstage_frontend_plugin_api.SwappableComponentRef;
            loader: (() => (props: {}) => JSX.Element | null) | (() => Promise<(props: {}) => JSX.Element | null>);
        }, "core.swappableComponent", {}>;
        inputs: {};
        params: <Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any>>(params: {
            component: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any, infer IExternalComponentProps> ? {
                ref: Ref;
            } & ((props: IExternalComponentProps) => JSX.Element | null) : never;
            loader: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<infer IInnerComponentProps, any> ? (() => (props: IInnerComponentProps) => JSX.Element | null) | (() => Promise<(props: IInnerComponentProps) => JSX.Element | null>) : never;
        }) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<{
            component: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any, infer IExternalComponentProps> ? {
                ref: Ref;
            } & ((props: IExternalComponentProps) => JSX.Element | null) : never;
            loader: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<infer IInnerComponentProps, any> ? (() => (props: IInnerComponentProps) => JSX.Element | null) | (() => Promise<(props: IInnerComponentProps) => JSX.Element | null>) : never;
        }>;
    }>;
    "component:app/core-not-found-error-page": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "component";
        name: "core-not-found-error-page";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<{
            ref: _backstage_frontend_plugin_api.SwappableComponentRef;
            loader: (() => (props: {}) => JSX.Element | null) | (() => Promise<(props: {}) => JSX.Element | null>);
        }, "core.swappableComponent", {}>;
        inputs: {};
        params: <Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any>>(params: {
            component: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any, infer IExternalComponentProps> ? {
                ref: Ref;
            } & ((props: IExternalComponentProps) => JSX.Element | null) : never;
            loader: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<infer IInnerComponentProps, any> ? (() => (props: IInnerComponentProps) => JSX.Element | null) | (() => Promise<(props: IInnerComponentProps) => JSX.Element | null>) : never;
        }) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<{
            component: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any, infer IExternalComponentProps> ? {
                ref: Ref;
            } & ((props: IExternalComponentProps) => JSX.Element | null) : never;
            loader: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<infer IInnerComponentProps, any> ? (() => (props: IInnerComponentProps) => JSX.Element | null) | (() => Promise<(props: IInnerComponentProps) => JSX.Element | null>) : never;
        }>;
    }>;
    "component:app/core-progress": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "component";
        name: "core-progress";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<{
            ref: _backstage_frontend_plugin_api.SwappableComponentRef;
            loader: (() => (props: {}) => JSX.Element | null) | (() => Promise<(props: {}) => JSX.Element | null>);
        }, "core.swappableComponent", {}>;
        inputs: {};
        params: <Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any>>(params: {
            component: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any, infer IExternalComponentProps> ? {
                ref: Ref;
            } & ((props: IExternalComponentProps) => JSX.Element | null) : never;
            loader: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<infer IInnerComponentProps, any> ? (() => (props: IInnerComponentProps) => JSX.Element | null) | (() => Promise<(props: IInnerComponentProps) => JSX.Element | null>) : never;
        }) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<{
            component: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<any, infer IExternalComponentProps> ? {
                ref: Ref;
            } & ((props: IExternalComponentProps) => JSX.Element | null) : never;
            loader: Ref extends _backstage_frontend_plugin_api.SwappableComponentRef<infer IInnerComponentProps, any> ? (() => (props: IInnerComponentProps) => JSX.Element | null) | (() => Promise<(props: IInnerComponentProps) => JSX.Element | null>) : never;
        }>;
    }>;
    "sign-in-page:app": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "sign-in-page";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.ComponentType<_backstage_core_plugin_api.SignInPageProps>, "core.sign-in-page.component", {}>;
        inputs: {};
        params: {
            loader: () => Promise<react.ComponentType<_backstage_core_plugin_api.SignInPageProps>>;
        };
    }>;
    "theme:app/dark": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "theme";
        name: "dark";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AppTheme, "core.theme.theme", {}>;
        inputs: {};
        params: {
            theme: _backstage_frontend_plugin_api.AppTheme;
        };
    }>;
    "theme:app/light": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "theme";
        name: "light";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AppTheme, "core.theme.theme", {}>;
        inputs: {};
        params: {
            theme: _backstage_frontend_plugin_api.AppTheme;
        };
    }>;
}>;

export { appPlugin as default };
