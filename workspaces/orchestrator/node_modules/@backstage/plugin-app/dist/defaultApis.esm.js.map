{"version":3,"file":"defaultApis.esm.js","sources":["../src/defaultApis.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  AlertApiForwarder,\n  ErrorApiForwarder,\n  ErrorAlerter,\n  GoogleAuth,\n  GithubAuth,\n  OktaAuth,\n  GitlabAuth,\n  MicrosoftAuth,\n  BitbucketAuth,\n  BitbucketServerAuth,\n  OAuthRequestManager,\n  WebStorage,\n  UrlPatternDiscovery,\n  OneLoginAuth,\n  UnhandledErrorForwarder,\n  AtlassianAuth,\n  createFetchApi,\n  FetchMiddlewares,\n  VMwareCloudAuth,\n  OpenShiftAuth,\n} from '../../../packages/core-app-api/src/apis/implementations';\n\nimport {\n  alertApiRef,\n  errorApiRef,\n  discoveryApiRef,\n  fetchApiRef,\n  identityApiRef,\n  oauthRequestApiRef,\n  googleAuthApiRef,\n  githubAuthApiRef,\n  oktaAuthApiRef,\n  gitlabAuthApiRef,\n  microsoftAuthApiRef,\n  storageApiRef,\n  configApiRef,\n  oneloginAuthApiRef,\n  bitbucketAuthApiRef,\n  bitbucketServerAuthApiRef,\n  atlassianAuthApiRef,\n  vmwareCloudAuthApiRef,\n  openshiftAuthApiRef,\n} from '@backstage/core-plugin-api';\nimport { ApiBlueprint, dialogApiRef } from '@backstage/frontend-plugin-api';\nimport {\n  ScmAuth,\n  ScmIntegrationsApi,\n  scmIntegrationsApiRef,\n} from '@backstage/integration-react';\nimport {\n  permissionApiRef,\n  IdentityPermissionApi,\n} from '@backstage/plugin-permission-react';\nimport { DefaultDialogApi } from './apis/DefaultDialogApi';\nimport { analyticsApi } from './extensions/AnalyticsApi';\n\nexport const apis = [\n  ApiBlueprint.make({\n    name: 'dialog',\n    params: defineParams =>\n      defineParams({\n        api: dialogApiRef,\n        deps: {},\n        factory: () => new DefaultDialogApi(),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'discovery',\n    params: defineParams =>\n      defineParams({\n        api: discoveryApiRef,\n        deps: { configApi: configApiRef },\n        factory: ({ configApi }) =>\n          UrlPatternDiscovery.compile(\n            `${configApi.getString('backend.baseUrl')}/api/{{ pluginId }}`,\n          ),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'alert',\n    params: defineParams =>\n      defineParams({\n        api: alertApiRef,\n        deps: {},\n        factory: () => new AlertApiForwarder(),\n      }),\n  }),\n  analyticsApi,\n  ApiBlueprint.make({\n    name: 'error',\n    params: defineParams =>\n      defineParams({\n        api: errorApiRef,\n        deps: { alertApi: alertApiRef },\n        factory: ({ alertApi }) => {\n          const errorApi = new ErrorAlerter(alertApi, new ErrorApiForwarder());\n          UnhandledErrorForwarder.forward(errorApi, { hidden: false });\n          return errorApi;\n        },\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'storage',\n    params: defineParams =>\n      defineParams({\n        api: storageApiRef,\n        deps: { errorApi: errorApiRef },\n        factory: ({ errorApi }) => WebStorage.create({ errorApi }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'fetch',\n    params: defineParams =>\n      defineParams({\n        api: fetchApiRef,\n        deps: {\n          configApi: configApiRef,\n          identityApi: identityApiRef,\n          discoveryApi: discoveryApiRef,\n        },\n        factory: ({ configApi, identityApi, discoveryApi }) => {\n          return createFetchApi({\n            middleware: [\n              FetchMiddlewares.resolvePluginProtocol({\n                discoveryApi,\n              }),\n              FetchMiddlewares.injectIdentityAuth({\n                identityApi,\n                config: configApi,\n              }),\n            ],\n          });\n        },\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'oauth-request',\n    params: defineParams =>\n      defineParams({\n        api: oauthRequestApiRef,\n        deps: {},\n        factory: () => new OAuthRequestManager(),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'google-auth',\n    params: defineParams =>\n      defineParams({\n        api: googleAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n          GoogleAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            environment: configApi.getOptionalString('auth.environment'),\n          }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'microsoft-auth',\n    params: defineParams =>\n      defineParams({\n        api: microsoftAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n          MicrosoftAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            environment: configApi.getOptionalString('auth.environment'),\n          }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'github-auth',\n    params: defineParams =>\n      defineParams({\n        api: githubAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n          GithubAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            defaultScopes: ['read:user'],\n            environment: configApi.getOptionalString('auth.environment'),\n          }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'okta-auth',\n    params: defineParams =>\n      defineParams({\n        api: oktaAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n          OktaAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            environment: configApi.getOptionalString('auth.environment'),\n          }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'gitlab-auth',\n    params: defineParams =>\n      defineParams({\n        api: gitlabAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n          GitlabAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            environment: configApi.getOptionalString('auth.environment'),\n          }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'onelogin-auth',\n    params: defineParams =>\n      defineParams({\n        api: oneloginAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n          OneLoginAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            environment: configApi.getOptionalString('auth.environment'),\n          }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'bitbucket-auth',\n    params: defineParams =>\n      defineParams({\n        api: bitbucketAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n          BitbucketAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            defaultScopes: ['account'],\n            environment: configApi.getOptionalString('auth.environment'),\n          }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'bitbucket-server-auth',\n    params: defineParams =>\n      defineParams({\n        api: bitbucketServerAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) =>\n          BitbucketServerAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            defaultScopes: ['REPO_READ'],\n            environment: configApi.getOptionalString('auth.environment'),\n          }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'atlassian-auth',\n    params: defineParams =>\n      defineParams({\n        api: atlassianAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) => {\n          return AtlassianAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            environment: configApi.getOptionalString('auth.environment'),\n          });\n        },\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'vmware-cloud-auth',\n    params: defineParams =>\n      defineParams({\n        api: vmwareCloudAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) => {\n          return VMwareCloudAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            environment: configApi.getOptionalString('auth.environment'),\n          });\n        },\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'openshift-auth',\n    params: defineParams =>\n      defineParams({\n        api: openshiftAuthApiRef,\n        deps: {\n          discoveryApi: discoveryApiRef,\n          oauthRequestApi: oauthRequestApiRef,\n          configApi: configApiRef,\n        },\n        factory: ({ discoveryApi, oauthRequestApi, configApi }) => {\n          return OpenShiftAuth.create({\n            configApi,\n            discoveryApi,\n            oauthRequestApi,\n            environment: configApi.getOptionalString('auth.environment'),\n          });\n        },\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'permission',\n    params: defineParams =>\n      defineParams({\n        api: permissionApiRef,\n        deps: {\n          discovery: discoveryApiRef,\n          identity: identityApiRef,\n          config: configApiRef,\n        },\n        factory: ({ config, discovery, identity }) =>\n          IdentityPermissionApi.create({ config, discovery, identity }),\n      }),\n  }),\n  ApiBlueprint.make({\n    name: 'scm-auth',\n    params: defineParams => defineParams(ScmAuth.createDefaultApiFactory()),\n  }),\n  ApiBlueprint.make({\n    name: 'scm-integrations',\n    params: defineParams =>\n      defineParams({\n        api: scmIntegrationsApiRef,\n        deps: { configApi: configApiRef },\n        factory: ({ configApi }) => ScmIntegrationsApi.fromConfig(configApi),\n      }),\n  }),\n] as const;\n"],"names":[],"mappings":"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"}