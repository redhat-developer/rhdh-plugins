{"version":3,"file":"gerrit.cjs.js","sources":["../../src/actions/gerrit.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport crypto from 'crypto';\nimport { InputError } from '@backstage/errors';\nimport { Config } from '@backstage/config';\nimport {\n  GerritIntegrationConfig,\n  getGerritRequestOptions,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  initRepoAndPush,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { examples } from './gerrit.examples';\n\nconst createGerritProject = async (\n  config: GerritIntegrationConfig,\n  options: {\n    projectName: string;\n    parent: string;\n    owner?: string;\n    description: string;\n    defaultBranch: string;\n  },\n): Promise<void> => {\n  const { projectName, parent, owner, description, defaultBranch } = options;\n\n  const fetchOptions: RequestInit = {\n    method: 'PUT',\n    body: JSON.stringify({\n      parent,\n      description,\n      branches: [defaultBranch],\n      owners: owner ? [owner] : [],\n      create_empty_commit: false,\n    }),\n    headers: {\n      ...getGerritRequestOptions(config).headers,\n      'Content-Type': 'application/json',\n    },\n  };\n  const response: Response = await fetch(\n    `${config.baseUrl}/a/projects/${encodeURIComponent(projectName)}`,\n    fetchOptions,\n  );\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n};\n\nconst generateCommitMessage = (\n  config: Config,\n  commitSubject?: string,\n): string => {\n  const changeId = crypto.randomBytes(20).toString('hex');\n  const msg = `${\n    config.getOptionalString('scaffolder.defaultCommitMessage') || commitSubject\n  }\\n\\nChange-Id: I${changeId}`;\n  return msg;\n};\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to a Gerrit instance.\n * @public\n */\nexport function createPublishGerritAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:gerrit',\n    supportsDryRun: true,\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Gerrit.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        description: z =>\n          z.string({\n            description: 'Repository Description',\n          }),\n        defaultBranch: z =>\n          z\n            .string({\n              description: `Sets the default branch on the repository. The default value is 'master'`,\n            })\n            .optional(),\n        gitCommitMessage: z =>\n          z\n            .string({\n              description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the default author email for the commit.`,\n            })\n            .optional(),\n        sourcePath: z =>\n          z\n            .string({\n              description: `Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.`,\n            })\n            .optional(),\n        signCommit: z =>\n          z\n            .boolean({\n              description: 'Sign commit with configured PGP private key',\n            })\n            .optional(),\n      },\n      output: {\n        remoteUrl: z =>\n          z\n            .string({\n              description: 'A URL to the repository with the provider',\n            })\n            .optional(),\n        repoContentsUrl: z =>\n          z\n            .string({\n              description: 'A URL to the root of the repository',\n            })\n            .optional(),\n        commitHash: z =>\n          z\n            .string({\n              description: 'The git commit hash of the initial commit',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'master',\n        gitAuthorName,\n        gitAuthorEmail,\n        gitCommitMessage = 'initial commit',\n        sourcePath,\n        signCommit,\n      } = ctx.input;\n      const { repo, host, owner, workspace } = parseRepoUrl(\n        repoUrl,\n        integrations,\n      );\n\n      const integrationConfig = integrations.gerrit.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      if (!workspace) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`,\n        );\n      }\n\n      const repoContentsUrl = `${integrationConfig.config.gitilesBaseUrl}/${repo}/+/refs/heads/${defaultBranch}`;\n      const remoteUrl = `${integrationConfig.config.cloneUrl}/a/${repo}`;\n      const gitName = gitAuthorName\n        ? gitAuthorName\n        : config.getOptionalString('scaffolder.defaultAuthor.name');\n      const gitEmail = gitAuthorEmail\n        ? gitAuthorEmail\n        : config.getOptionalString('scaffolder.defaultAuthor.email');\n      const commitMessage = generateCommitMessage(config, gitCommitMessage);\n\n      if (ctx.isDryRun) {\n        ctx.logger.info(\n          `Dry run arguments: ${{\n            gitName,\n            gitEmail,\n            commitMessage,\n            ...ctx.input,\n          }}`,\n        );\n        ctx.output('remoteUrl', remoteUrl);\n        ctx.output('commitHash', 'abcd-dry-run-1234');\n        ctx.output('repoContentsUrl', repoContentsUrl);\n        return;\n      }\n\n      await createGerritProject(integrationConfig.config, {\n        description,\n        owner: owner,\n        projectName: repo,\n        parent: workspace,\n        defaultBranch,\n      });\n      const auth = {\n        username: integrationConfig.config.username!,\n        password: integrationConfig.config.password!,\n      };\n      const gitAuthorInfo = {\n        name: gitName,\n        email: gitEmail,\n      };\n\n      const signingKey =\n        integrationConfig.config.commitSigningKey ??\n        config.getOptionalString('scaffolder.defaultCommitSigningKey');\n      if (signCommit && !signingKey) {\n        throw new Error(\n          'Signing commits is enabled but no signing key is provided in the configuration',\n        );\n      }\n\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, sourcePath),\n        remoteUrl,\n        auth,\n        defaultBranch,\n        logger: ctx.logger,\n        commitMessage: generateCommitMessage(config, gitCommitMessage),\n        gitAuthorInfo,\n        signingKey: signCommit ? signingKey : undefined,\n      });\n\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n"],"names":["getGerritRequestOptions","crypto","createTemplateAction","examples","parseRepoUrl","InputError","initRepoAndPush","getRepoSourceDirectory"],"mappings":"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"}