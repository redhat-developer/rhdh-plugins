{"version":3,"file":"gerritReview.cjs.js","sources":["../../src/actions/gerritReview.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport crypto from 'crypto';\nimport { InputError } from '@backstage/errors';\nimport { Config } from '@backstage/config';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport {\n  commitAndPushRepo,\n  createTemplateAction,\n  getRepoSourceDirectory,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { examples } from './gerritReview.examples';\n\nconst generateGerritChangeId = (): string => {\n  const changeId = crypto.randomBytes(20).toString('hex');\n  return `I${changeId}`;\n};\n\n/**\n * Creates a new action that creates a Gerrit review\n * @public\n */\nexport function createPublishGerritReviewAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:gerrit:review',\n    description: 'Creates a new Gerrit review.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        branch: z =>\n          z\n            .string({\n              description:\n                'Branch of the repository the review will be created on',\n            })\n            .optional(),\n        sourcePath: z =>\n          z\n            .string({\n              description:\n                'Subdirectory of working directory containing the repository',\n            })\n            .optional(),\n        gitCommitMessage: z =>\n          z\n            .string({\n              description: `Sets the commit message on the repository.`,\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the default author email for the commit.`,\n            })\n            .optional(),\n        signCommit: z =>\n          z\n            .boolean({\n              description: 'Sign commit with configured PGP private key',\n            })\n            .optional(),\n      },\n      output: {\n        reviewUrl: z =>\n          z\n            .string({\n              description: 'A URL to the review',\n            })\n            .optional(),\n        repoContentsUrl: z =>\n          z\n            .string({\n              description: 'A URL to the root of the repository',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        branch = 'master',\n        sourcePath,\n        gitAuthorName,\n        gitAuthorEmail,\n        gitCommitMessage,\n        signCommit,\n      } = ctx.input;\n      const { host, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!gitCommitMessage) {\n        throw new InputError(`Missing gitCommitMessage input`);\n      }\n\n      const integrationConfig = integrations.gerrit.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const auth = {\n        username: integrationConfig.config.username!,\n        password: integrationConfig.config.password!,\n      };\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n      const signingKey =\n        integrationConfig.config.commitSigningKey ??\n        config.getOptionalString('scaffolder.defaultCommitSigningKey');\n      if (signCommit && !signingKey) {\n        throw new Error(\n          'Signing commits is enabled but no signing key is provided in the configuration',\n        );\n      }\n      const changeId = generateGerritChangeId();\n      const commitMessage = `${gitCommitMessage}\\n\\nChange-Id: ${changeId}`;\n\n      await commitAndPushRepo({\n        dir: getRepoSourceDirectory(ctx.workspacePath, sourcePath),\n        auth,\n        logger: ctx.logger,\n        commitMessage,\n        gitAuthorInfo,\n        branch,\n        remoteRef: `refs/for/${branch}`,\n        signingKey: signCommit ? signingKey : undefined,\n      });\n\n      const repoContentsUrl = `${integrationConfig.config.gitilesBaseUrl}/${repo}/+/refs/heads/${branch}`;\n      const reviewUrl = `${integrationConfig.config.baseUrl}/#/q/${changeId}`;\n      ctx.logger?.info(`Review available on ${reviewUrl}`);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('reviewUrl', reviewUrl);\n    },\n  });\n}\n"],"names":["crypto","createTemplateAction","examples","parseRepoUrl","InputError","commitAndPushRepo","getRepoSourceDirectory"],"mappings":"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"}