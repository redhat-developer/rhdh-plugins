{"version":3,"file":"setup.cjs.js","sources":["../../src/proxy/setup.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as mockttp from 'mockttp';\nimport { OpenApiProxyValidator } from '../schema/validation';\nimport getPort from 'get-port';\nimport { Server } from 'http';\n\nexport class Proxy {\n  server: mockttp.Mockttp;\n  #openRequests: Record<string, mockttp.CompletedRequest> = {};\n  requestResponsePairs = new Map<\n    mockttp.CompletedRequest,\n    mockttp.CompletedResponse\n  >();\n  validator: OpenApiProxyValidator;\n  public forwardTo: { port: number } = { port: 0 };\n  express: { server: Server | undefined } = { server: undefined };\n  constructor() {\n    this.server = mockttp.getLocal();\n    this.validator = new OpenApiProxyValidator();\n  }\n\n  async setup() {\n    await this.server.start();\n    this.forwardTo.port = await getPort();\n    this.server\n      .forAnyRequest()\n      .thenForwardTo(`http://localhost:${this.forwardTo.port}`);\n    await this.server.on('request', request => {\n      this.#openRequests[request.id] = request;\n    });\n    await this.server.on('response', response => {\n      const request = this.#openRequests[response.id];\n      if (request) {\n        this.requestResponsePairs.set(request, response);\n      }\n      delete this.#openRequests[response.id];\n      this.validator.validate(request, response);\n    });\n  }\n\n  async initialize(url: string, server: Server) {\n    await this.validator.initialize(`${url}/openapi.json`);\n    this.express.server = server;\n  }\n\n  stop() {\n    if (Object.keys(this.#openRequests).length > 0) {\n      throw new Error('There are still open requests');\n    }\n    this.server.stop();\n\n    // If this isn't expressly closed, it will cause a jest memory leak warning.\n    this.express.server?.close();\n  }\n\n  get url() {\n    return this.server.proxyEnv.HTTP_PROXY;\n  }\n}\n"],"names":["mockttp","OpenApiProxyValidator","getPort"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBO,MAAM,KAAA,CAAM;AAAA,EACjB,MAAA;AAAA,EACA,gBAA0D,EAAC;AAAA,EAC3D,oBAAA,uBAA2B,GAAA,EAGzB;AAAA,EACF,SAAA;AAAA,EACO,SAAA,GAA8B,EAAE,IAAA,EAAM,CAAA,EAAE;AAAA,EAC/C,OAAA,GAA0C,EAAE,MAAA,EAAQ,MAAA,EAAU;AAAA,EAC9D,WAAA,GAAc;AACZ,IAAA,IAAA,CAAK,MAAA,GAASA,mBAAQ,QAAA,EAAS;AAC/B,IAAA,IAAA,CAAK,SAAA,GAAY,IAAIC,gCAAA,EAAsB;AAAA,EAC7C;AAAA,EAEA,MAAM,KAAA,GAAQ;AACZ,IAAA,MAAM,IAAA,CAAK,OAAO,KAAA,EAAM;AACxB,IAAA,IAAA,CAAK,SAAA,CAAU,IAAA,GAAO,MAAMC,wBAAA,EAAQ;AACpC,IAAA,IAAA,CAAK,MAAA,CACF,eAAc,CACd,aAAA,CAAc,oBAAoB,IAAA,CAAK,SAAA,CAAU,IAAI,CAAA,CAAE,CAAA;AAC1D,IAAA,MAAM,IAAA,CAAK,MAAA,CAAO,EAAA,CAAG,SAAA,EAAW,CAAA,OAAA,KAAW;AACzC,MAAA,IAAA,CAAK,aAAA,CAAc,OAAA,CAAQ,EAAE,CAAA,GAAI,OAAA;AAAA,IACnC,CAAC,CAAA;AACD,IAAA,MAAM,IAAA,CAAK,MAAA,CAAO,EAAA,CAAG,UAAA,EAAY,CAAA,QAAA,KAAY;AAC3C,MAAA,MAAM,OAAA,GAAU,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,EAAE,CAAA;AAC9C,MAAA,IAAI,OAAA,EAAS;AACX,QAAA,IAAA,CAAK,oBAAA,CAAqB,GAAA,CAAI,OAAA,EAAS,QAAQ,CAAA;AAAA,MACjD;AACA,MAAA,OAAO,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,EAAE,CAAA;AACrC,MAAA,IAAA,CAAK,SAAA,CAAU,QAAA,CAAS,OAAA,EAAS,QAAQ,CAAA;AAAA,IAC3C,CAAC,CAAA;AAAA,EACH;AAAA,EAEA,MAAM,UAAA,CAAW,GAAA,EAAa,MAAA,EAAgB;AAC5C,IAAA,MAAM,IAAA,CAAK,SAAA,CAAU,UAAA,CAAW,CAAA,EAAG,GAAG,CAAA,aAAA,CAAe,CAAA;AACrD,IAAA,IAAA,CAAK,QAAQ,MAAA,GAAS,MAAA;AAAA,EACxB;AAAA,EAEA,IAAA,GAAO;AACL,IAAA,IAAI,OAAO,IAAA,CAAK,IAAA,CAAK,aAAa,CAAA,CAAE,SAAS,CAAA,EAAG;AAC9C,MAAA,MAAM,IAAI,MAAM,+BAA+B,CAAA;AAAA,IACjD;AACA,IAAA,IAAA,CAAK,OAAO,IAAA,EAAK;AAGjB,IAAA,IAAA,CAAK,OAAA,CAAQ,QAAQ,KAAA,EAAM;AAAA,EAC7B;AAAA,EAEA,IAAI,GAAA,GAAM;AACR,IAAA,OAAO,IAAA,CAAK,OAAO,QAAA,CAAS,UAAA;AAAA,EAC9B;AACF;;;;"}