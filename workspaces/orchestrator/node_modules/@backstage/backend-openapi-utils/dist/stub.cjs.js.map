{"version":3,"file":"stub.cjs.js","sources":["../src/stub.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport PromiseRouter from 'express-promise-router';\nimport { ApiRouter, TypedRouter } from './router';\nimport { EndpointMap, RequiredDoc } from './types';\nimport {\n  ErrorRequestHandler,\n  RequestHandler,\n  NextFunction,\n  Request,\n  Response,\n  json,\n  Router,\n} from 'express';\nimport { InputError } from '@backstage/errors';\nimport { middleware as OpenApiValidator } from 'express-openapi-validator';\nimport { OPENAPI_SPEC_ROUTE } from './constants';\nimport { isErrorResult, merge } from 'openapi-merge';\n\ntype PropertyOverrideRequest = Request & {\n  [key: symbol]: string;\n};\n\nconst baseUrlSymbol = Symbol();\nconst originalUrlSymbol = Symbol();\n\nfunction validatorErrorTransformer(): ErrorRequestHandler {\n  return (error: Error, _: Request, _2: Response, next: NextFunction) => {\n    next(new InputError(error.message));\n  };\n}\n\nexport function getDefaultRouterMiddleware() {\n  return [json()];\n}\n\n/**\n * Given a base url for a plugin, find the given OpenAPI spec for that plugin.\n * @param baseUrl - Plugin base url.\n * @returns OpenAPI spec route for the base url.\n * @public\n */\nexport function getOpenApiSpecRoute(baseUrl: string) {\n  return `${baseUrl}${OPENAPI_SPEC_ROUTE}`;\n}\n\n/**\n * Create a router with validation middleware. This is used by typing methods to create an\n *  \"OpenAPI router\" with all of the expected validation + metadata.\n * @param spec - Your OpenAPI spec imported as a JSON object.\n * @param validatorOptions - `openapi-express-validator` options to override the defaults.\n * @returns A new express router with validation middleware.\n */\nfunction createRouterWithValidation(\n  spec: RequiredDoc,\n  options?: {\n    validatorOptions?: Partial<Parameters<typeof OpenApiValidator>['0']>;\n    middleware?: RequestHandler[];\n  },\n): Router {\n  const router = PromiseRouter();\n  router.use(options?.middleware || getDefaultRouterMiddleware());\n\n  /**\n   * Middleware to setup the routing for OpenApiValidator. OpenApiValidator expects `req.originalUrl`\n   *    and `req.baseUrl` to be the full path. We adjust them here to basically be nothing and then\n   *    revive the old values in the last function in this method. We could instead update `req.path`\n   *    but that might affect the routing and I'd rather not.\n   *\n   * TODO: I opened https://github.com/cdimascio/express-openapi-validator/issues/843\n   *    to track this on the middleware side, but there was a similar ticket, https://github.com/cdimascio/express-openapi-validator/issues/113\n   *    that has had minimal activity. If that changes, update this to use a new option on their side.\n   */\n  router.use((req: Request, _, next) => {\n    /**\n     * Express typings are weird. They don't recognize PropertyOverrideRequest as a valid\n     *  Request child and try to overload as PathParams. Just cast it here, since we know\n     *  what we're doing.\n     */\n    const customRequest = req as PropertyOverrideRequest;\n    customRequest[baseUrlSymbol] = customRequest.baseUrl;\n    customRequest.baseUrl = '';\n    customRequest[originalUrlSymbol] = customRequest.originalUrl;\n    customRequest.originalUrl = customRequest.url;\n    next();\n  });\n\n  // TODO: Handle errors by converting from OpenApiValidator errors to known @backstage/errors errors.\n  router.use(\n    OpenApiValidator({\n      validateRequests: {\n        coerceTypes: false,\n        allowUnknownQueryParameters: false,\n      },\n      ignoreUndocumented: true,\n      validateResponses: false,\n      ...options?.validatorOptions,\n      apiSpec: spec as any,\n    }),\n  );\n\n  /**\n   * Revert `req.baseUrl` and `req.originalUrl` changes. This ensures that any further usage\n   *    of these variables will be unchanged.\n   */\n  router.use((req: Request, _, next) => {\n    const customRequest = req as PropertyOverrideRequest;\n    customRequest.baseUrl = customRequest[baseUrlSymbol];\n    customRequest.originalUrl = customRequest[originalUrlSymbol];\n    delete customRequest[baseUrlSymbol];\n    delete customRequest[originalUrlSymbol];\n    next();\n  });\n\n  // Any errors from the middleware get through here.\n  router.use(validatorErrorTransformer());\n\n  router.get(OPENAPI_SPEC_ROUTE, async (req, res) => {\n    const mergeOutput = merge([\n      {\n        oas: spec as any,\n        pathModification: {\n          /**\n           * Get the route that this OpenAPI spec is hosted on. The other\n           *  approach of using the discovery API increases the router constructor\n           *  significantly and since we're just looking for path and not full URL,\n           *  this works.\n           *\n           * If we wanted to add a list of servers, there may be a case for adding\n           *  discovery API to get an exhaustive list of upstream servers, but that's\n           *  also not currently supported.\n           */\n          prepend: req.originalUrl.replace(OPENAPI_SPEC_ROUTE, ''),\n        },\n      },\n    ]);\n    if (isErrorResult(mergeOutput)) {\n      throw new InputError('Invalid spec defined');\n    }\n    res.json(mergeOutput.output);\n  });\n  return router;\n}\n\n/**\n * Create a new OpenAPI router with some default middleware.\n * @param spec - Your OpenAPI spec imported as a JSON object.\n * @param validatorOptions - `openapi-express-validator` options to override the defaults.\n * @returns A new express router with validation middleware.\n * @public\n */\nexport function createValidatedOpenApiRouter<T extends RequiredDoc>(\n  spec: T,\n  options?: {\n    validatorOptions?: Partial<Parameters<typeof OpenApiValidator>['0']>;\n    middleware?: RequestHandler[];\n  },\n) {\n  return createRouterWithValidation(spec, options) as ApiRouter<typeof spec>;\n}\n\n/**\n * Create a new OpenAPI router with some default middleware.\n * @param spec - Your OpenAPI spec imported as a JSON object.\n * @param validatorOptions - `openapi-express-validator` options to override the defaults.\n * @returns A new express router with validation middleware.\n * @public\n */\nexport function createValidatedOpenApiRouterFromGeneratedEndpointMap<\n  T extends EndpointMap,\n>(\n  spec: RequiredDoc,\n  options?: {\n    validatorOptions?: Partial<Parameters<typeof OpenApiValidator>['0']>;\n    middleware?: RequestHandler[];\n  },\n) {\n  return createRouterWithValidation(spec, options) as TypedRouter<T>;\n}\n"],"names":["InputError","json","OPENAPI_SPEC_ROUTE","PromiseRouter","OpenApiValidator","merge","isErrorResult"],"mappings":"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"}