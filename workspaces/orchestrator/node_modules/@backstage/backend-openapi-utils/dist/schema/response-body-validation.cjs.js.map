{"version":3,"file":"response-body-validation.cjs.js","sources":["../../src/schema/response-body-validation.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport { Operation, ParserOptions, ResponseParser } from './types';\nimport {\n  OperationError,\n  OperationParsingResponseError,\n  OperationResponseError,\n} from './errors';\nimport Ajv from 'ajv';\nimport { OperationObject, ResponseObject } from 'openapi3-ts';\n\nclass DisabledResponseBodyParser\n  implements ResponseParser<JsonObject | undefined>\n{\n  operation: Operation;\n  constructor(operation: Operation) {\n    this.operation = operation;\n  }\n  async parse(response: Response): Promise<JsonObject | undefined> {\n    const body = await response.text();\n    if (body?.length) {\n      throw new OperationError(\n        this.operation,\n        'Received a body but no schema was found',\n      );\n    }\n    return undefined;\n  }\n}\n\nexport class ResponseBodyParser\n  implements ResponseParser<JsonObject | undefined>\n{\n  operation: Operation;\n  ajv: Ajv;\n\n  static fromOperation(operation: Operation, options: ParserOptions) {\n    return operation.schema.responses &&\n      Object.keys(operation.schema.responses).length\n      ? new ResponseBodyParser(operation, options)\n      : new DisabledResponseBodyParser(operation);\n  }\n\n  constructor(operation: Operation, options: ParserOptions) {\n    this.operation = operation;\n    this.ajv = options.ajv;\n    const responseSchemas = operation.schema.responses;\n    for (const [statusCode, schema] of Object.entries(responseSchemas)) {\n      const contentTypes = schema.content;\n      if (!contentTypes) {\n        // Skip responses without content, eg 204 No Content.\n        continue;\n      }\n      const jsonContentType = Object.keys(contentTypes).find(contentType =>\n        contentType.split(';').includes('application/json'),\n      );\n      if (!jsonContentType) {\n        throw new OperationError(\n          this.operation,\n          `No application/json content type found in response for status code ${statusCode}`,\n        );\n      } else if ('$ref' in contentTypes[jsonContentType].schema) {\n        throw new OperationError(\n          this.operation,\n          'Reference objects are not supported',\n        );\n      }\n    }\n  }\n\n  async parse(response: Response): Promise<JsonObject | undefined> {\n    const body = await response.text();\n    const responseSchema = this.findResponseSchema(\n      this.operation.schema,\n      response,\n    );\n    if (!responseSchema?.content && !body?.length) {\n      // If there is no content in the response schema and no body in the response, then the response is valid.\n      // eg 204 No Content\n      return undefined;\n    }\n    if (!responseSchema) {\n      throw new OperationResponseError(\n        this.operation,\n        response,\n        `No schema found.`,\n      );\n    }\n\n    const contentTypes = responseSchema.content;\n    if (!contentTypes && body?.length) {\n      throw new OperationResponseError(\n        this.operation,\n        response,\n        'Received a body but no schema was found',\n      );\n    }\n    const jsonContentType = Object.keys(contentTypes ?? {}).find(contentType =>\n      contentType.split(';').includes('application/json'),\n    );\n    if (!jsonContentType) {\n      throw new OperationResponseError(\n        this.operation,\n        response,\n        'No application/json content type found in response',\n      );\n    }\n    const schema = responseSchema.content![jsonContentType].schema;\n    // This is a bit of type laziness. Ideally, this would be a type-narrowing function, but I wasn't able to get the types to work.\n    if (!schema) {\n      throw new OperationError(this.operation, 'No schema found in response');\n    }\n    if ('$ref' in schema) {\n      throw new OperationResponseError(\n        this.operation,\n        response,\n        'Reference objects are not supported',\n      );\n    }\n\n    if (!schema.required && !body?.length) {\n      throw new OperationResponseError(\n        this.operation,\n        response,\n        'Response body is required but missing',\n      );\n    } else if (!schema.required && !body?.length) {\n      // If there is no content in the response schema and no body in the response, then the response is valid\n      return undefined;\n    }\n\n    const validate = this.ajv.compile(schema);\n    const jsonBody = (await response.json()) as JsonObject;\n    const valid = validate(jsonBody);\n    if (!valid) {\n      throw new OperationParsingResponseError(\n        this.operation,\n        response,\n        'Response body',\n        validate.errors!,\n      );\n    }\n    return jsonBody;\n  }\n\n  private findResponseSchema(\n    operationSchema: OperationObject,\n    { status }: Response,\n  ): ResponseObject | undefined {\n    return (\n      operationSchema.responses?.[status] ?? operationSchema.responses?.default\n    );\n  }\n}\n"],"names":["OperationError","OperationResponseError","OperationParsingResponseError"],"mappings":"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"}