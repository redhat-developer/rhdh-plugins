{"version":3,"file":"request-body-validation.cjs.js","sources":["../../src/schema/request-body-validation.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport { Operation, ParserOptions, RequestParser } from './types';\nimport { ValidateFunction } from 'ajv';\nimport { OperationError, OperationParsingError } from './errors';\nimport { RequestBodyObject, SchemaObject } from 'openapi3-ts';\n\nclass DisabledRequestBodyParser\n  implements RequestParser<JsonObject | undefined>\n{\n  operation: Operation;\n  constructor(operation: Operation) {\n    this.operation = operation;\n  }\n  async parse(request: Request): Promise<JsonObject | undefined> {\n    const bodyText = await request.text();\n    if (bodyText?.length) {\n      throw new OperationError(\n        this.operation,\n        'Received a body but no schema was found',\n      );\n    }\n    return undefined;\n  }\n}\nexport class RequestBodyParser\n  implements RequestParser<JsonObject | undefined>\n{\n  operation: Operation;\n  disabled: boolean = false;\n  validate!: ValidateFunction;\n  schema!: SchemaObject;\n  requestBodySchema!: RequestBodyObject;\n\n  static fromOperation(operation: Operation, options: ParserOptions) {\n    return operation.schema.requestBody\n      ? new RequestBodyParser(operation, options)\n      : new DisabledRequestBodyParser(operation);\n  }\n\n  constructor(operation: Operation, options: ParserOptions) {\n    this.operation = operation;\n    const { schema: operationSchema } = this.operation;\n    const requestBody = operationSchema.requestBody;\n\n    if (!requestBody) {\n      throw new OperationError(\n        this.operation,\n        'No request body found in operation',\n      );\n    }\n\n    if ('$ref' in requestBody!) {\n      throw new OperationError(\n        this.operation,\n        'Reference objects are not supported',\n      );\n    }\n    if (!requestBody!.content) {\n      throw new OperationError(\n        this.operation,\n        'No content found in request body',\n      );\n    }\n    const contentTypes = requestBody!.content;\n    const jsonContentType = Object.keys(contentTypes).find(contentType =>\n      contentType.split(';').includes('application/json'),\n    );\n    if (!jsonContentType) {\n      throw new OperationError(\n        this.operation,\n        'No application/json content type found in request body',\n      );\n    }\n    const schema = requestBody!.content[jsonContentType].schema;\n    if (!schema) {\n      throw new OperationError(\n        this.operation,\n        'No JSON schema found in request body',\n      );\n    }\n    if ('$ref' in schema) {\n      throw new OperationError(\n        this.operation,\n        'Reference objects are not supported',\n      );\n    }\n    this.validate = options.ajv.compile(schema);\n    this.schema = schema;\n    this.requestBodySchema = requestBody;\n  }\n  async parse(request: Request): Promise<JsonObject | undefined> {\n    const bodyText = await request.text();\n    if (this.requestBodySchema.required && !bodyText?.length) {\n      throw new OperationError(\n        this.operation,\n        `No request body found for ${request.url}`,\n      );\n    }\n\n    const contentType =\n      request.headers.get('content-type') || 'application/json';\n    if (!contentType.split(';').includes('application/json')) {\n      throw new OperationError(\n        this.operation,\n        'Content type is not application/json',\n      );\n    }\n    const body = (await request.json()) as JsonObject;\n    const valid = this.validate(body);\n    if (!valid) {\n      throw new OperationParsingError(\n        this.operation,\n        `Request body`,\n        this.validate.errors!,\n      );\n    }\n    return body;\n  }\n}\n"],"names":["OperationError","OperationParsingError"],"mappings":"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"}