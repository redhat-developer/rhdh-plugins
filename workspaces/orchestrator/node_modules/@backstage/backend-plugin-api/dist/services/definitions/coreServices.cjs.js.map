{"version":3,"file":"coreServices.cjs.js","sources":["../../../src/services/definitions/coreServices.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createServiceRef } from '../system';\n\n/**\n * All core services references\n *\n * @public\n */\nexport namespace coreServices {\n  /**\n   * Handles token authentication and credentials management.\n   *\n   * See {@link AuthService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/auth | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const auth = createServiceRef<import('./AuthService').AuthService>({\n    id: 'core.auth',\n  });\n\n  /**\n   * Authenticated user information retrieval.\n   *\n   * See {@link UserInfoService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/user-info | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const userInfo = createServiceRef<\n    import('./UserInfoService').UserInfoService\n  >({\n    id: 'core.userInfo',\n  });\n\n  /**\n   * Key-value store for caching data.\n   *\n   * See {@link CacheService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/cache | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const cache = createServiceRef<import('./CacheService').CacheService>({\n    id: 'core.cache',\n  });\n\n  /**\n   * Access to static configuration.\n   *\n   * See {@link RootConfigService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/root-config | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const rootConfig = createServiceRef<\n    import('./RootConfigService').RootConfigService\n  >({ id: 'core.rootConfig', scope: 'root' });\n\n  /**\n   * Database access and management via `knex`.\n   *\n   * See {@link DatabaseService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/database | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const database = createServiceRef<\n    import('./DatabaseService').DatabaseService\n  >({ id: 'core.database' });\n\n  /**\n   * Service discovery for inter-plugin communication.\n   *\n   * See {@link DiscoveryService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/discovery | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const discovery = createServiceRef<\n    import('./DiscoveryService').DiscoveryService\n  >({ id: 'core.discovery' });\n\n  /**\n   * The service reference for the plugin scoped {@link RootHealthService}.\n   */\n  export const rootHealth = createServiceRef<\n    import('./RootHealthService').RootHealthService\n  >({ id: 'core.rootHealth', scope: 'root' });\n\n  /**\n   * Authentication of HTTP requests.\n   *\n   * See {@link HttpAuthService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/http-auth | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const httpAuth = createServiceRef<\n    import('./HttpAuthService').HttpAuthService\n  >({ id: 'core.httpAuth' });\n\n  /**\n   * HTTP route registration for plugins.\n   *\n   * See {@link HttpRouterService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/http-router | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const httpRouter = createServiceRef<\n    import('./HttpRouterService').HttpRouterService\n  >({ id: 'core.httpRouter' });\n\n  /**\n   * Registration of plugin startup and shutdown lifecycle hooks.\n   *\n   * See {@link LifecycleService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/lifecycle | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const lifecycle = createServiceRef<\n    import('./LifecycleService').LifecycleService\n  >({ id: 'core.lifecycle' });\n\n  /**\n   * Plugin-level logging.\n   *\n   * See {@link LoggerService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/logger | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const logger = createServiceRef<\n    import('./LoggerService').LoggerService\n  >({ id: 'core.logger' });\n\n  /**\n   * Plugin-level auditing.\n   *\n   * See {@link AuditorService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/auditor | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const auditor = createServiceRef<\n    import('./AuditorService').AuditorService\n  >({ id: 'core.auditor' });\n\n  /**\n   * Permission system integration for authorization of user actions.\n   *\n   * See {@link PermissionsService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/permissions | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const permissions = createServiceRef<\n    import('./PermissionsService').PermissionsService\n  >({ id: 'core.permissions' });\n\n  /**\n   * Permission system integration for registering resources and permissions.\n   *\n   * See {@link PermissionsRegistryService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/permission-integrations | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const permissionsRegistry = createServiceRef<\n    import('./PermissionsRegistryService').PermissionsRegistryService\n  >({ id: 'core.permissionsRegistry' });\n\n  /**\n   * Built-in service for accessing metadata about the current plugin.\n   *\n   * See {@link PluginMetadataService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/plugin-metadata | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const pluginMetadata = createServiceRef<\n    import('./PluginMetadataService').PluginMetadataService\n  >({ id: 'core.pluginMetadata' });\n\n  /**\n   * HTTP route registration for root services.\n   *\n   * See {@link RootHttpRouterService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/root-http-router | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const rootHttpRouter = createServiceRef<\n    import('./RootHttpRouterService').RootHttpRouterService\n  >({ id: 'core.rootHttpRouter', scope: 'root' });\n\n  /**\n   * Registration of backend startup and shutdown lifecycle hooks.\n   *\n   * See {@link RootLifecycleService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/root-lifecycle | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const rootLifecycle = createServiceRef<\n    import('./RootLifecycleService').RootLifecycleService\n  >({ id: 'core.rootLifecycle', scope: 'root' });\n\n  /**\n   * Root-level logging.\n   *\n   * See {@link RootLoggerService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/root-logger | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const rootLogger = createServiceRef<\n    import('./RootLoggerService').RootLoggerService\n  >({ id: 'core.rootLogger', scope: 'root' });\n\n  /**\n   * Scheduling of distributed background tasks.\n   *\n   * See {@link SchedulerService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/scheduler | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const scheduler = createServiceRef<\n    import('./SchedulerService').SchedulerService\n  >({ id: 'core.scheduler' });\n\n  /**\n   * Reading content from external systems.\n   *\n   * See {@link UrlReaderService}\n   * and {@link https://backstage.io/docs/backend-system/core-services/url-reader | the service docs}\n   * for more information.\n   *\n   * @public\n   */\n  export const urlReader = createServiceRef<\n    import('./UrlReaderService').UrlReaderService\n  >({ id: 'core.urlReader' });\n}\n"],"names":["coreServices","createServiceRef"],"mappings":";;;;AAuBiBA;AAAA,CAAV,CAAUA,aAAAA,KAAV;AAUE,EAAMA,aAAAA,CAAA,OAAOC,sBAAA,CAAsD;AAAA,IACxE,EAAA,EAAI;AAAA,GACL,CAAA;AAWM,EAAMD,aAAAA,CAAA,WAAWC,sBAAA,CAEtB;AAAA,IACA,EAAA,EAAI;AAAA,GACL,CAAA;AAWM,EAAMD,aAAAA,CAAA,QAAQC,sBAAA,CAAwD;AAAA,IAC3E,EAAA,EAAI;AAAA,GACL,CAAA;AAWM,EAAMD,aAAAA,CAAA,aAAaC,sBAAA,CAExB,EAAE,IAAI,iBAAA,EAAmB,KAAA,EAAO,QAAQ,CAAA;AAWnC,EAAMD,cAAA,QAAA,GAAWC,sBAAA,CAEtB,EAAE,EAAA,EAAI,iBAAiB,CAAA;AAWlB,EAAMD,cAAA,SAAA,GAAYC,sBAAA,CAEvB,EAAE,EAAA,EAAI,kBAAkB,CAAA;AAKnB,EAAMD,aAAAA,CAAA,aAAaC,sBAAA,CAExB,EAAE,IAAI,iBAAA,EAAmB,KAAA,EAAO,QAAQ,CAAA;AAWnC,EAAMD,cAAA,QAAA,GAAWC,sBAAA,CAEtB,EAAE,EAAA,EAAI,iBAAiB,CAAA;AAWlB,EAAMD,cAAA,UAAA,GAAaC,sBAAA,CAExB,EAAE,EAAA,EAAI,mBAAmB,CAAA;AAWpB,EAAMD,cAAA,SAAA,GAAYC,sBAAA,CAEvB,EAAE,EAAA,EAAI,kBAAkB,CAAA;AAWnB,EAAMD,cAAA,MAAA,GAASC,sBAAA,CAEpB,EAAE,EAAA,EAAI,eAAe,CAAA;AAWhB,EAAMD,cAAA,OAAA,GAAUC,sBAAA,CAErB,EAAE,EAAA,EAAI,gBAAgB,CAAA;AAWjB,EAAMD,cAAA,WAAA,GAAcC,sBAAA,CAEzB,EAAE,EAAA,EAAI,oBAAoB,CAAA;AAWrB,EAAMD,cAAA,mBAAA,GAAsBC,sBAAA,CAEjC,EAAE,EAAA,EAAI,4BAA4B,CAAA;AAW7B,EAAMD,cAAA,cAAA,GAAiBC,sBAAA,CAE5B,EAAE,EAAA,EAAI,uBAAuB,CAAA;AAWxB,EAAMD,aAAAA,CAAA,iBAAiBC,sBAAA,CAE5B,EAAE,IAAI,qBAAA,EAAuB,KAAA,EAAO,QAAQ,CAAA;AAWvC,EAAMD,aAAAA,CAAA,gBAAgBC,sBAAA,CAE3B,EAAE,IAAI,oBAAA,EAAsB,KAAA,EAAO,QAAQ,CAAA;AAWtC,EAAMD,aAAAA,CAAA,aAAaC,sBAAA,CAExB,EAAE,IAAI,iBAAA,EAAmB,KAAA,EAAO,QAAQ,CAAA;AAWnC,EAAMD,cAAA,SAAA,GAAYC,sBAAA,CAEvB,EAAE,EAAA,EAAI,kBAAkB,CAAA;AAWnB,EAAMD,cAAA,SAAA,GAAYC,sBAAA,CAEvB,EAAE,EAAA,EAAI,kBAAkB,CAAA;AAAA,CAAA,EA/PXD,oBAAA,KAAAA,oBAAA,GAAA,EAAA,CAAA,CAAA;;"}