import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import { appLanguageApiRef } from '@backstage/core-plugin-api/alpha';
import TranslateIcon from '@material-ui/icons/Translate';
import ListItemText from '@material-ui/core/ListItemText';
import { useApi } from '@backstage/core-plugin-api';
import useObservable from 'react-use/esm/useObservable';
import { SidebarItem } from '@backstage/core-components';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';

const SidebarLanguageSwitcher = () => {
  const languageApi = useApi(appLanguageApiRef);
  const [languageObservable] = useState(() => languageApi.language$());
  const { language: currentLanguage } = useObservable(
    languageObservable,
    languageApi.getLanguage()
  );
  const [anchorEl, setAnchorEl] = useState();
  const { languages } = languageApi.getAvailableLanguages();
  if (languages.length <= 1) {
    return null;
  }
  const open = Boolean(anchorEl);
  const handleClose = () => {
    setAnchorEl(void 0);
  };
  const handleOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleSetLanguage = (newLanguage) => {
    languageApi.setLanguage(newLanguage);
    setAnchorEl(void 0);
  };
  const getLanguageDisplayName = (language) => {
    try {
      const names = new Intl.DisplayNames([language], {
        type: "language"
      });
      return names.of(language) || language;
    } catch (err) {
      return language;
    }
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      SidebarItem,
      {
        icon: TranslateIcon,
        text: "Language",
        id: "language-button",
        "aria-haspopup": "listbox",
        "aria-controls": "language-menu",
        "aria-label": "switch language",
        "aria-expanded": open ? "true" : void 0,
        onClick: handleOpen
      }
    ),
    /* @__PURE__ */ jsxs(
      Menu,
      {
        id: "language-menu",
        anchorEl,
        open,
        onClose: handleClose,
        MenuListProps: {
          "aria-labelledby": "language-button",
          role: "listbox"
        },
        children: [
          /* @__PURE__ */ jsx(MenuItem, { disabled: true, children: "Choose language" }),
          languages.map((lang) => {
            const active = currentLanguage === lang;
            return /* @__PURE__ */ jsx(
              MenuItem,
              {
                selected: active,
                "aria-selected": active,
                onClick: () => handleSetLanguage(lang),
                children: /* @__PURE__ */ jsx(ListItemText, { children: getLanguageDisplayName(lang) })
              },
              lang
            );
          })
        ]
      }
    )
  ] });
};

export { SidebarLanguageSwitcher };
//# sourceMappingURL=SidebarLanguageSwitcher.esm.js.map
