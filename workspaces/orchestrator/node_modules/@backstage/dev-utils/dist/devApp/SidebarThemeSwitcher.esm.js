import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { SidebarItem } from '@backstage/core-components';
import { useApi, appThemeApiRef } from '@backstage/core-plugin-api';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import AutoIcon from '@material-ui/icons/BrightnessAuto';
import { useState, useCallback, cloneElement } from 'react';
import useObservable from 'react-use/esm/useObservable';

const ThemeIcon = ({ active, icon }) => icon ? cloneElement(icon, {
  color: active ? "primary" : void 0
}) : /* @__PURE__ */ jsx(AutoIcon, { color: active ? "primary" : void 0 });
const SidebarThemeSwitcher = () => {
  const appThemeApi = useApi(appThemeApiRef);
  const themeId = useObservable(
    appThemeApi.activeThemeId$(),
    appThemeApi.getActiveThemeId()
  );
  const themeIds = appThemeApi.getInstalledThemes();
  const activeTheme = themeIds.find((t) => t.id === themeId);
  const [anchorEl, setAnchorEl] = useState();
  const open = Boolean(anchorEl);
  const handleOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleSelectTheme = (newThemeId) => {
    if (themeIds.some((t) => t.id === newThemeId)) {
      appThemeApi.setActiveThemeId(newThemeId);
    } else {
      appThemeApi.setActiveThemeId(void 0);
    }
    setAnchorEl(void 0);
  };
  const handleClose = () => {
    setAnchorEl(void 0);
  };
  const ActiveIcon = useCallback(
    () => /* @__PURE__ */ jsx(ThemeIcon, { icon: activeTheme?.icon }),
    [activeTheme]
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      SidebarItem,
      {
        icon: ActiveIcon,
        text: "Switch Theme",
        id: "theme-button",
        "aria-haspopup": "listbox",
        "aria-controls": "theme-menu",
        "aria-label": "switch theme",
        "aria-expanded": open ? "true" : void 0,
        onClick: handleOpen
      }
    ),
    /* @__PURE__ */ jsxs(
      Menu,
      {
        id: "theme-menu",
        anchorEl,
        open,
        onClose: handleClose,
        MenuListProps: {
          "aria-labelledby": "theme-button",
          role: "listbox"
        },
        children: [
          /* @__PURE__ */ jsx(MenuItem, { disabled: true, children: "Choose a theme" }),
          /* @__PURE__ */ jsxs(
            MenuItem,
            {
              selected: themeId === void 0,
              onClick: () => handleSelectTheme(void 0),
              children: [
                /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(ThemeIcon, { icon: void 0, active: themeId === void 0 }) }),
                /* @__PURE__ */ jsx(ListItemText, { children: "Auto" })
              ]
            }
          ),
          themeIds.map((theme) => {
            const active = theme.id === themeId;
            return /* @__PURE__ */ jsxs(
              MenuItem,
              {
                selected: active,
                "aria-selected": active,
                onClick: () => handleSelectTheme(theme.id),
                children: [
                  /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(ThemeIcon, { icon: theme.icon, active }) }),
                  /* @__PURE__ */ jsx(ListItemText, { children: theme.title })
                ]
              },
              theme.id
            );
          })
        ]
      }
    )
  ] });
};

export { SidebarThemeSwitcher };
//# sourceMappingURL=SidebarThemeSwitcher.esm.js.map
