import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { createContext, useState, useEffect, Children, isValidElement } from 'react';
import MuiStepper from '@material-ui/core/Stepper';

const noop = () => {
};
const VerticalStepperContext = createContext({
  stepperLength: 0,
  stepIndex: 0,
  setStepIndex: noop,
  stepHistory: [],
  setStepHistory: noop,
  onStepChange: noop
});
function SimpleStepper(props) {
  const { children, elevated, onStepChange, activeStep = 0 } = props;
  const [stepIndex, setStepIndex] = useState(activeStep);
  const inOrderRecreatedStepHistory = Array.from(
    { length: activeStep + 1 },
    (_, i) => i
  );
  const [stepHistory, setStepHistory] = useState(
    inOrderRecreatedStepHistory
  );
  useEffect(() => {
    setStepIndex(activeStep);
  }, [activeStep]);
  const steps = [];
  let endStep;
  Children.forEach(children, (child) => {
    if (isValidElement(child)) {
      if (child.props.end) {
        endStep = child;
      } else {
        steps.push(child);
      }
    }
  });
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      VerticalStepperContext.Provider,
      {
        value: {
          stepIndex,
          setStepIndex,
          stepHistory,
          setStepHistory,
          onStepChange,
          stepperLength: Children.count(children)
        },
        children: /* @__PURE__ */ jsx(
          MuiStepper,
          {
            activeStep: stepIndex,
            orientation: "vertical",
            elevation: elevated ? 2 : 0,
            children: steps
          }
        )
      }
    ),
    stepIndex >= Children.count(children) - 1 && endStep
  ] });
}

export { SimpleStepper, VerticalStepperContext };
//# sourceMappingURL=SimpleStepper.esm.js.map
