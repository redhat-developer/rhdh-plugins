import { jsx } from 'react/jsx-runtime';
import { useMemo } from 'react';
import { useApi, storageApiRef } from '@backstage/core-plugin-api';
import useObservable from 'react-use/esm/useObservable';
import classNames from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Snackbar from '@material-ui/core/Snackbar';
import SnackbarContent from '@material-ui/core/SnackbarContent';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      padding: theme.spacing(0),
      marginBottom: theme.spacing(0),
      marginTop: theme.spacing(0),
      display: "flex",
      flexFlow: "row nowrap"
    },
    // showing on top
    topPosition: {
      position: "relative",
      marginBottom: theme.spacing(6),
      marginTop: -theme.spacing(3),
      zIndex: "unset"
    },
    icon: {
      fontSize: theme.typography.h6.fontSize
    },
    content: {
      width: "100%",
      maxWidth: "inherit",
      flexWrap: "nowrap",
      color: theme.palette.banner.text
    },
    message: {
      display: "flex",
      alignItems: "center",
      "& a": {
        color: theme.palette.banner.link
      }
    },
    button: {
      color: theme.palette.banner.closeButtonColor ?? "inherit"
    },
    info: {
      backgroundColor: theme.palette.banner.info
    },
    error: {
      backgroundColor: theme.palette.banner.error
    },
    warning: {
      backgroundColor: theme.palette.banner.warning ?? theme.palette.banner.error
    }
  }),
  { name: "BackstageDismissableBanner" }
);
const DismissableBanner = (props) => {
  const { variant, message, id, fixed = false } = props;
  const classes = useStyles();
  const storageApi = useApi(storageApiRef);
  const notificationsStore = storageApi.forBucket("notifications");
  const observedItems = useObservable(
    notificationsStore.observe$("dismissedBanners"),
    notificationsStore.snapshot("dismissedBanners")
  );
  const dismissedBanners = useMemo(
    () => new Set(observedItems.value ?? []),
    [observedItems.value]
  );
  const loadingSettings = observedItems.presence === "unknown";
  const handleClick = () => {
    notificationsStore.set("dismissedBanners", [...dismissedBanners, id]);
  };
  return /* @__PURE__ */ jsx(
    Snackbar,
    {
      anchorOrigin: fixed ? { vertical: "bottom", horizontal: "center" } : { vertical: "top", horizontal: "center" },
      open: !loadingSettings && !dismissedBanners.has(id),
      classes: {
        root: classNames(classes.root, !fixed && classes.topPosition)
      },
      children: /* @__PURE__ */ jsx(
        SnackbarContent,
        {
          classes: {
            root: classNames(classes.content, classes[variant]),
            message: classes.message
          },
          message,
          action: [
            /* @__PURE__ */ jsx(
              IconButton,
              {
                title: "Permanently dismiss this message",
                className: classes.button,
                onClick: handleClick,
                children: /* @__PURE__ */ jsx(CloseIcon, { className: classes.icon })
              },
              "dismiss"
            )
          ]
        }
      )
    }
  );
};

export { DismissableBanner };
//# sourceMappingURL=DismissableBanner.esm.js.map
