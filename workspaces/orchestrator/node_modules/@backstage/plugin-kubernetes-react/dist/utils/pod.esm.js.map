{"version":3,"file":"pod.esm.js","sources":["../../src/utils/pod.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  V1Pod,\n  V1PodCondition,\n  V1DeploymentCondition,\n} from '@kubernetes/client-node';\nimport React, { Fragment, ReactNode } from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport {\n  StatusAborted,\n  StatusError,\n  StatusOK,\n  SubvalueCell,\n} from '@backstage/core-components';\nimport { ClientPodStatus } from '@backstage/plugin-kubernetes-common';\nimport { Pod } from 'kubernetes-models/v1/Pod';\nimport { bytesToMiB, formatMillicores } from './resources';\n\nexport const imageChips = (pod: V1Pod): ReactNode => {\n  const containerStatuses = pod.status?.containerStatuses ?? [];\n  const images = containerStatuses.map((cs, i) => {\n    return <Chip key={i} label={`${cs.name}=${cs.image}`} size=\"small\" />;\n  });\n\n  return <div>{images}</div>;\n};\n\nexport const containersReady = (pod: Pod): string => {\n  const containerStatuses = pod.status?.containerStatuses ?? [];\n  const containersReadyItem = containerStatuses.filter(cs => cs.ready).length;\n\n  return `${containersReadyItem}/${containerStatuses.length}`;\n};\n\nexport const totalRestarts = (pod: Pod): number => {\n  const containerStatuses = pod.status?.containerStatuses ?? [];\n  return containerStatuses?.reduce((a, b) => a + b.restartCount, 0);\n};\n\nexport const containerStatuses = (pod: Pod): ReactNode => {\n  const containerStatusesItem = pod.status?.containerStatuses ?? [];\n  const errors = containerStatusesItem.reduce((accum, next) => {\n    if (next.state === undefined) {\n      return accum;\n    }\n\n    const waiting = next.state.waiting;\n    const terminated = next.state.terminated;\n\n    const renderCell = (reason: string | undefined) => (\n      <Fragment key={`${pod.metadata?.name}-${next.name}`}>\n        <SubvalueCell\n          value={\n            reason === 'Completed' ? (\n              <StatusOK>Container: {next.name}</StatusOK>\n            ) : (\n              <StatusError>Container: {next.name}</StatusError>\n            )\n          }\n          subvalue={reason}\n        />\n        <br />\n      </Fragment>\n    );\n\n    if (waiting) {\n      accum.push(renderCell(waiting.reason));\n    }\n\n    if (terminated) {\n      accum.push(renderCell(terminated.reason));\n    }\n\n    return accum;\n  }, [] as React.ReactNode[]);\n\n  if (errors.length === 0) {\n    return <StatusOK>OK</StatusOK>;\n  }\n\n  return errors;\n};\n\nexport const renderCondition = (\n  condition: V1PodCondition | V1DeploymentCondition,\n): [string, ReactNode] => {\n  const status = condition.status;\n\n  if (status === 'True') {\n    return [condition.type, <StatusOK>True</StatusOK>];\n  } else if (status === 'False') {\n    return [\n      condition.type,\n      <SubvalueCell\n        value={<StatusError>False</StatusError>}\n        subvalue={condition.message ?? ''}\n      />,\n    ];\n  }\n  return [condition.type, <StatusAborted />];\n};\n\n// visible for testing\nexport const currentToDeclaredResourceToPerc = (\n  current: number | string,\n  resource: number | string,\n): string => {\n  if (Number(resource) === 0) return `0%`;\n\n  if (typeof current === 'number' && typeof resource === 'number') {\n    return `${Math.round((current / resource) * 100)}%`;\n  }\n\n  const numerator: bigint = BigInt(\n    typeof current === 'number' ? Math.round(current) : current,\n  );\n  const denominator: bigint = BigInt(\n    typeof resource === 'number' ? Math.round(resource) : resource,\n  );\n\n  return `${(numerator * BigInt(100)) / denominator}%`;\n};\n\nexport const podStatusToCpuUtil = (podStatus: ClientPodStatus): ReactNode => {\n  const cpuUtil = podStatus.cpu;\n\n  let currentUsage: number | string = cpuUtil.currentUsage;\n\n  // current usage number for CPU is a different unit than request/limit total\n  // this might be a bug in the k8s library\n  if (typeof cpuUtil.currentUsage === 'number') {\n    currentUsage = cpuUtil.currentUsage / 10;\n  }\n\n  return (\n    <SubvalueCell\n      value={`requests: ${currentToDeclaredResourceToPerc(\n        currentUsage,\n        cpuUtil.requestTotal,\n      )} of ${formatMillicores(cpuUtil.requestTotal)}`}\n      subvalue={`limits: ${currentToDeclaredResourceToPerc(\n        currentUsage,\n        cpuUtil.limitTotal,\n      )} of ${formatMillicores(cpuUtil.limitTotal)}`}\n    />\n  );\n};\n\nexport const podStatusToMemoryUtil = (\n  podStatus: ClientPodStatus,\n): ReactNode => {\n  const memUtil = podStatus.memory;\n\n  return (\n    <SubvalueCell\n      value={`requests: ${currentToDeclaredResourceToPerc(\n        memUtil.currentUsage,\n        memUtil.requestTotal,\n      )} of ${bytesToMiB(memUtil.requestTotal)}`}\n      subvalue={`limits: ${currentToDeclaredResourceToPerc(\n        memUtil.currentUsage,\n        memUtil.limitTotal,\n      )} of ${bytesToMiB(memUtil.limitTotal)}`}\n    />\n  );\n};\n"],"names":["containerStatuses","React"],"mappings":"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"}