{"version":3,"file":"useCookieAuthRefresh.esm.js","sources":["../../../src/hooks/useCookieAuthRefresh/useCookieAuthRefresh.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect, useCallback, useMemo } from 'react';\nimport {\n  discoveryApiRef,\n  fetchApiRef,\n  useApi,\n} from '@backstage/core-plugin-api';\nimport { useAsync, useMountEffect } from '@react-hookz/web';\nimport { ResponseError } from '@backstage/errors';\n\nconst COOKIE_PATH = '/.backstage/auth/v1/cookie';\nconst ONE_YEAR_MS = 365 * 24 * 3600_000;\n\n/**\n * @public\n * A hook that will refresh the cookie when it is about to expire.\n * @param options - Options for configuring the refresh cookie endpoint\n */\nexport function useCookieAuthRefresh(options: {\n  // The plugin id used for discovering the API origin\n  pluginId: string;\n}):\n  | { status: 'loading' }\n  | { status: 'error'; error: Error; retry: () => void }\n  | { status: 'success'; data: { expiresAt: string } } {\n  const { pluginId } = options ?? {};\n  const fetchApi = useApi(fetchApiRef);\n  const discoveryApi = useApi(discoveryApiRef);\n\n  const channel = useMemo(() => {\n    return 'BroadcastChannel' in window\n      ? new BroadcastChannel(`${pluginId}-auth-cookie-expires-at`)\n      : null;\n  }, [pluginId]);\n\n  const [state, actions] = useAsync<{ expiresAt: string }>(async () => {\n    const apiOrigin = await discoveryApi.getBaseUrl(pluginId);\n    const requestUrl = `${apiOrigin}${COOKIE_PATH}`;\n    const response = await fetchApi.fetch(`${requestUrl}`, {\n      credentials: 'include',\n    });\n    if (!response.ok) {\n      // If we get a 404 from the cookie endpoint we assume that it does not\n      // exist and cookie auth is not needed. For all active tabs we don't\n      // schedule another refresh for the foreseeable future, but new tabs will\n      // still check if cookie auth has been added to the deployment.\n      // TODO(Rugvip): Once the legacy backend system is no longer supported we should remove this check\n      if (response.status === 404) {\n        return { expiresAt: new Date(Date.now() + ONE_YEAR_MS) };\n      }\n      throw await ResponseError.fromResponse(response);\n    }\n    const data = await response.json();\n    if (!data.expiresAt) {\n      throw new Error('No expiration date found in response');\n    }\n    return data;\n  });\n\n  useMountEffect(actions.execute);\n\n  const retry = useCallback(() => {\n    actions.execute();\n  }, [actions]);\n\n  const refresh = useCallback(\n    (params: { expiresAt: string }) => {\n      // Randomize the refreshing margin with a margin of 1-4 minutes to avoid all tabs refreshing at the same time\n      // It cannot be less than 5 minutes otherwise the backend will return the same expiration date\n      const margin = (1 + 3 * Math.random()) * 60000;\n      const delay = Date.parse(params.expiresAt) - Date.now() - margin;\n      const timeout = setTimeout(retry, delay);\n      return () => clearTimeout(timeout);\n    },\n    [retry],\n  );\n\n  useEffect(() => {\n    // Only schedule a refresh if we have a successful response\n    if (state.status !== 'success' || !state.result) {\n      return () => {};\n    }\n    channel?.postMessage({\n      action: 'COOKIE_REFRESH_SUCCESS',\n      payload: state.result,\n    });\n    let cancel = refresh(state.result);\n    const listener = (\n      event: MessageEvent<{ action: string; payload: { expiresAt: string } }>,\n    ) => {\n      const { action, payload } = event.data;\n      if (action === 'COOKIE_REFRESH_SUCCESS') {\n        cancel();\n        cancel = refresh(payload);\n      }\n    };\n    channel?.addEventListener('message', listener);\n    return () => {\n      cancel();\n      channel?.removeEventListener('message', listener);\n    };\n  }, [state, refresh, channel]);\n\n  // Initialising\n  if (state.status === 'not-executed') {\n    return { status: 'loading' };\n  }\n\n  // First refresh or retrying without any success before\n  // Possible state transitions:\n  // e.g. not-executed -> loading (first-refresh)\n  // e.g. not-executed -> loading (first-refresh) -> error -> loading (manual-retry)\n  if (state.status === 'loading' && !state.result) {\n    return { status: 'loading' };\n  }\n\n  // Retrying after having succeeding at least once\n  // Current state is: { status: 'loading', result: {...}, error: undefined | Error }\n  // e.g. not-executed -> loading (first-refresh) -> success -> loading (scheduled-refresh) -> error -> loading (manual-retry)\n  if (state.status === 'loading' && state.error) {\n    return { status: 'loading' };\n  }\n\n  // Something went wrong during any situation of a refresh\n  if (state.status === 'error' && state.error) {\n    return { status: 'error', error: state.error, retry };\n  }\n\n  // At this point it should be safe to assume that we have a successful refresh\n  return { status: 'success', data: state.result! };\n}\n"],"names":[],"mappings":"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"}