{"version":3,"file":"Avatar.esm.js","sources":["../../../src/components/Avatar/Avatar.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport MaterialAvatar from '@material-ui/core/Avatar';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { CSSProperties } from 'react';\n\nimport { extractInitials, stringToColor } from './utils';\nimport classNames from 'classnames';\n\n/** @public */\nexport type AvatarClassKey = 'avatar';\n\nconst useStyles = makeStyles(\n  (theme: Theme) => ({\n    avatar: {\n      width: '4rem',\n      height: '4rem',\n      color: theme.palette.common.white,\n      backgroundColor: (props: { backgroundColor?: string }) =>\n        props.backgroundColor,\n    },\n    avatarText: {\n      fontWeight: theme.typography.fontWeightBold,\n      letterSpacing: '1px',\n      textTransform: 'uppercase',\n    },\n  }),\n  { name: 'BackstageAvatar' },\n);\n\n/**\n * Properties for {@link Avatar}.\n *\n * @public\n */\nexport interface AvatarProps {\n  /**\n   * A display name, which will be used to generate initials as a fallback in case a picture is not provided.\n   */\n  displayName?: string;\n  /**\n   * URL to avatar image source\n   */\n  picture?: string;\n  /**\n   * Custom styles applied to avatar\n   * @deprecated - use the classes property instead\n   */\n  customStyles?: CSSProperties;\n\n  /**\n   * Custom styles applied to avatar\n   */\n  classes?: { [key in 'avatar' | 'avatarText']?: string };\n}\n\n/**\n *  Component rendering an Avatar\n *\n * @public\n * @remarks\n *\n * Based on https://v4.mui.com/components/avatars/#avatar with some styling adjustment and two-letter initials\n */\nexport function Avatar(props: AvatarProps) {\n  const { displayName, picture, customStyles } = props;\n  const styles = { ...customStyles };\n\n  // TODO: Remove this with the customStyles deprecation\n  const fontStyles = {\n    fontFamily: styles.fontFamily,\n    fontSize: styles.fontSize,\n    fontWeight: styles.fontWeight,\n  };\n\n  // We only calculate the background color if there's not an avatar\n  // picture. If there is a picture, it might have a transparent\n  // background and we don't know whether the calculated background\n  // color will clash.\n  const classes = useStyles(\n    !picture ? { backgroundColor: stringToColor(displayName || '') } : {},\n  );\n\n  const avatarClassNames = classNames(props.classes?.avatar, classes.avatar);\n  const avatarTextClassNames = classNames(\n    props.classes?.avatarText,\n    classes.avatarText,\n  );\n\n  return (\n    <MaterialAvatar\n      alt={displayName}\n      src={picture}\n      className={avatarClassNames}\n      style={styles}\n    >\n      {displayName && (\n        <Typography\n          variant=\"h6\"\n          component=\"span\"\n          className={avatarTextClassNames}\n          style={fontStyles}\n        >\n          {extractInitials(displayName)}\n        </Typography>\n      )}\n    </MaterialAvatar>\n  );\n}\n"],"names":[],"mappings":";;;;;;;AA0BA,MAAM,SAAA,GAAY,UAAA;AAAA,EAChB,CAAC,KAAA,MAAkB;AAAA,IACjB,MAAA,EAAQ;AAAA,MACN,KAAA,EAAO,MAAA;AAAA,MACP,MAAA,EAAQ,MAAA;AAAA,MACR,KAAA,EAAO,KAAA,CAAM,OAAA,CAAQ,MAAA,CAAO,KAAA;AAAA,MAC5B,eAAA,EAAiB,CAAC,KAAA,KAChB,KAAA,CAAM;AAAA,KACV;AAAA,IACA,UAAA,EAAY;AAAA,MACV,UAAA,EAAY,MAAM,UAAA,CAAW,cAAA;AAAA,MAC7B,aAAA,EAAe,KAAA;AAAA,MACf,aAAA,EAAe;AAAA;AACjB,GACF,CAAA;AAAA,EACA,EAAE,MAAM,iBAAA;AACV,CAAA;AAoCO,SAAS,OAAO,KAAA,EAAoB;AACzC,EAAA,MAAM,EAAE,WAAA,EAAa,OAAA,EAAS,YAAA,EAAa,GAAI,KAAA;AAC/C,EAAA,MAAM,MAAA,GAAS,EAAE,GAAG,YAAA,EAAa;AAGjC,EAAA,MAAM,UAAA,GAAa;AAAA,IACjB,YAAY,MAAA,CAAO,UAAA;AAAA,IACnB,UAAU,MAAA,CAAO,QAAA;AAAA,IACjB,YAAY,MAAA,CAAO;AAAA,GACrB;AAMA,EAAA,MAAM,OAAA,GAAU,SAAA;AAAA,IACd,CAAC,UAAU,EAAE,eAAA,EAAiB,cAAc,WAAA,IAAe,EAAE,CAAA,EAAE,GAAI;AAAC,GACtE;AAEA,EAAA,MAAM,mBAAmB,UAAA,CAAW,KAAA,CAAM,OAAA,EAAS,MAAA,EAAQ,QAAQ,MAAM,CAAA;AACzE,EAAA,MAAM,oBAAA,GAAuB,UAAA;AAAA,IAC3B,MAAM,OAAA,EAAS,UAAA;AAAA,IACf,OAAA,CAAQ;AAAA,GACV;AAEA,EAAA,uBACE,GAAA;AAAA,IAAC,cAAA;AAAA,IAAA;AAAA,MACC,GAAA,EAAK,WAAA;AAAA,MACL,GAAA,EAAK,OAAA;AAAA,MACL,SAAA,EAAW,gBAAA;AAAA,MACX,KAAA,EAAO,MAAA;AAAA,MAEN,QAAA,EAAA,WAAA,oBACC,GAAA;AAAA,QAAC,UAAA;AAAA,QAAA;AAAA,UACC,OAAA,EAAQ,IAAA;AAAA,UACR,SAAA,EAAU,MAAA;AAAA,UACV,SAAA,EAAW,oBAAA;AAAA,UACX,KAAA,EAAO,UAAA;AAAA,UAEN,0BAAgB,WAAW;AAAA;AAAA;AAC9B;AAAA,GAEJ;AAEJ;;;;"}