{"version":3,"file":"StaticAssetsStore.cjs.js","sources":["../../../src/lib/assets/StaticAssetsStore.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport partition from 'lodash/partition';\nimport { StaticAsset, StaticAssetInput, StaticAssetProvider } from './types';\nimport {\n  DatabaseService,\n  LoggerService,\n  resolvePackagePath,\n} from '@backstage/backend-plugin-api';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/plugin-app-backend',\n  'migrations',\n);\n\ninterface StaticAssetRow {\n  path: string;\n  content: Buffer;\n  namespace: string | null;\n  last_modified_at: Date;\n}\n\n/** @internal */\nexport interface StaticAssetsStoreOptions {\n  database: DatabaseService;\n  logger: LoggerService;\n}\n\n/**\n * A storage for static assets that are assumed to be immutable.\n *\n * @internal\n */\nexport class StaticAssetsStore implements StaticAssetProvider {\n  #db: Knex;\n  #logger: LoggerService;\n  #namespace: string;\n\n  static async create(options: StaticAssetsStoreOptions) {\n    const { database } = options;\n    const client = await database.getClient();\n\n    if (!database.migrations?.skip) {\n      await client.migrate.latest({\n        directory: migrationsDir,\n      });\n    }\n\n    return new StaticAssetsStore(client, options.logger);\n  }\n\n  private constructor(client: Knex, logger: LoggerService, namespace?: string) {\n    this.#db = client;\n    this.#logger = logger;\n    this.#namespace = namespace ?? 'default';\n  }\n\n  /**\n   * Creates a new store with the provided namespace, using the same underlying storage.\n   */\n  withNamespace(namespace: string): StaticAssetsStore {\n    return new StaticAssetsStore(this.#db, this.#logger, namespace);\n  }\n\n  /**\n   * Store the provided assets.\n   *\n   * If an asset for a given path already exists the modification time will be\n   * updated, but the contents will not.\n   */\n  async storeAssets(assets: StaticAssetInput[]) {\n    const existingRows = await this.#db<StaticAssetRow>('static_assets_cache')\n      .where('namespace', this.#namespace)\n      .whereIn(\n        'path',\n        assets.map(a => a.path),\n      );\n    const existingAssetPaths = new Set(existingRows.map(r => r.path));\n\n    const [modified, added] = partition(assets, asset =>\n      existingAssetPaths.has(asset.path),\n    );\n\n    this.#logger.info(\n      `Storing ${modified.length} updated assets and ${added.length} new assets`,\n    );\n\n    await this.#db('static_assets_cache')\n      .update({\n        last_modified_at: this.#db.fn.now(),\n      })\n      .where('namespace', this.#namespace)\n      .whereIn(\n        'path',\n        modified.map(a => a.path),\n      );\n\n    for (const asset of added) {\n      // We ignore conflicts with other nodes, it doesn't matter if someone else\n      // added the same asset just before us.\n      await this.#db('static_assets_cache')\n        .insert({\n          path: asset.path,\n          content: await asset.content(),\n          namespace: this.#namespace,\n        })\n        .onConflict(['namespace', 'path'])\n        .ignore();\n    }\n  }\n\n  /**\n   * Retrieve an asset from the store with the given path.\n   */\n  async getAsset(path: string): Promise<StaticAsset | undefined> {\n    const [row] = await this.#db<StaticAssetRow>('static_assets_cache').where({\n      path,\n      namespace: this.#namespace,\n    });\n    if (!row) {\n      return undefined;\n    }\n    return {\n      path: row.path,\n      content: row.content,\n      lastModifiedAt:\n        typeof row.last_modified_at === 'string'\n          ? DateTime.fromSQL(row.last_modified_at, { zone: 'UTC' }).toJSDate()\n          : row.last_modified_at,\n    };\n  }\n\n  /**\n   * Delete any assets from the store whose modification time is older than the max age.\n   */\n  async trimAssets(options: { maxAgeSeconds: number }) {\n    const { maxAgeSeconds } = options;\n    let lastModifiedInterval = this.#db.raw(\n      `now() + interval '${-maxAgeSeconds} seconds'`,\n    );\n    if (this.#db.client.config.client.includes('mysql')) {\n      lastModifiedInterval = this.#db.raw(\n        `date_sub(now(), interval ${maxAgeSeconds} second)`,\n      );\n    } else if (this.#db.client.config.client.includes('sqlite3')) {\n      lastModifiedInterval = this.#db.raw(`datetime('now', ?)`, [\n        `-${maxAgeSeconds} seconds`,\n      ]);\n    }\n    await this.#db<StaticAssetRow>('static_assets_cache')\n      .where('namespace', this.#namespace)\n      .where('last_modified_at', '<=', lastModifiedInterval)\n      .delete();\n  }\n}\n"],"names":["resolvePackagePath","partition","DateTime"],"mappings":"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"}