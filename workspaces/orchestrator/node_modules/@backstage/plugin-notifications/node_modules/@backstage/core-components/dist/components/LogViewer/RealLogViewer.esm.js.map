{"version":3,"file":"RealLogViewer.esm.js","sources":["../../../src/components/LogViewer/RealLogViewer.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport CopyIcon from '@material-ui/icons/FileCopy';\nimport classnames from 'classnames';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { VariableSizeList, FixedSizeList } from 'react-window';\n\nimport { AnsiLine, AnsiProcessor } from './AnsiProcessor';\nimport { LogLine } from './LogLine';\nimport { LogViewerControls } from './LogViewerControls';\nimport { HEADER_SIZE, useStyles } from './styles';\nimport { useLogViewerSearch } from './useLogViewerSearch';\nimport { useLogViewerSelection } from './useLogViewerSelection';\n\nexport interface RealLogViewerProps {\n  text: string;\n  textWrap?: boolean;\n  classes?: { root?: string };\n}\n\nexport function RealLogViewer(props: RealLogViewerProps) {\n  const classes = useStyles({ classes: props.classes });\n  const [listInstance, setListInstance] = useState<\n    VariableSizeList<AnsiLine[]> | FixedSizeList<AnsiLine[]> | null\n  >(null);\n  const shouldTextWrap = props.textWrap ?? false;\n  const heights = useRef<{ [key: number]: number }>({});\n\n  // The processor keeps state that optimizes appending to the text\n  const processor = useMemo(() => new AnsiProcessor(), []);\n  const lines = processor.process(props.text);\n\n  const search = useLogViewerSearch(lines);\n  const selection = useLogViewerSelection(lines);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (listInstance) {\n      listInstance.scrollToItem(lines.length - 1, 'end');\n    }\n  }, [listInstance, lines]);\n\n  useEffect(() => {\n    if (!listInstance) {\n      return;\n    }\n    if (search.resultLine) {\n      listInstance.scrollToItem(search.resultLine - 1, 'center');\n    } else {\n      listInstance.scrollToItem(lines.length - 1, 'end');\n    }\n  }, [listInstance, search.resultLine, lines]);\n\n  useEffect(() => {\n    if (location.hash) {\n      // #line-6 -> 6\n      const line = parseInt(location.hash.replace(/\\D/g, ''), 10);\n      selection.setSelection(line, false);\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleSelectLine = (\n    line: number,\n    event: { shiftKey: boolean; preventDefault: () => void },\n  ) => {\n    selection.setSelection(line, event.shiftKey);\n  };\n\n  function setRowHeight(index: number, size: number) {\n    if (shouldTextWrap && listInstance) {\n      (listInstance as VariableSizeList<AnsiLine[]>).resetAfterIndex(0);\n      // lineNumber is 1-based but index is 0-based\n      heights.current[index - 1] = size;\n    }\n  }\n\n  function getRowHeight(index: number) {\n    return heights.current[index] || 20;\n  }\n\n  return (\n    <AutoSizer>\n      {({ height, width }: { height?: number; width?: number }) => {\n        const commonProps = {\n          ref: setListInstance,\n          className: classes.log,\n          height: (height || 480) - HEADER_SIZE,\n          width: width || 640,\n          itemData: search.lines,\n          itemCount: search.lines.length,\n        };\n\n        const renderItem = ({\n          index,\n          style,\n          data,\n        }: {\n          index: number;\n          style: React.CSSProperties;\n          data: AnsiLine[];\n        }) => {\n          const line = data[index];\n          const { lineNumber } = line;\n          return (\n            <Box\n              style={{ ...style }}\n              className={classnames(classes.line, {\n                [classes.lineSelected]: selection.isSelected(lineNumber),\n              })}\n            >\n              {selection.shouldShowButton(lineNumber) && (\n                <IconButton\n                  data-testid=\"copy-button\"\n                  size=\"small\"\n                  className={classes.lineCopyButton}\n                  onClick={() => selection.copySelection()}\n                >\n                  <CopyIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n              <a\n                role=\"row\"\n                target=\"_self\"\n                href={`#line-${lineNumber}`}\n                className={classes.lineNumber}\n                onClick={event => handleSelectLine(lineNumber, event)}\n                onKeyPress={event => handleSelectLine(lineNumber, event)}\n              >\n                {lineNumber}\n              </a>\n              <LogLine\n                setRowHeight={shouldTextWrap ? setRowHeight : undefined}\n                line={line}\n                classes={classes}\n                searchText={search.searchText}\n                highlightResultIndex={\n                  search.resultLine === lineNumber\n                    ? search.resultLineIndex\n                    : undefined\n                }\n              />\n            </Box>\n          );\n        };\n\n        return (\n          <Box style={{ width, height }} className={classes.root}>\n            <Box className={classes.header}>\n              <LogViewerControls {...search} />\n            </Box>\n            {shouldTextWrap ? (\n              <VariableSizeList<AnsiLine[]>\n                {...commonProps}\n                itemSize={getRowHeight}\n              >\n                {renderItem}\n              </VariableSizeList>\n            ) : (\n              <FixedSizeList<AnsiLine[]> {...commonProps} itemSize={20}>\n                {renderItem}\n              </FixedSizeList>\n            )}\n          </Box>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n"],"names":["classnames"],"mappings":"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"}