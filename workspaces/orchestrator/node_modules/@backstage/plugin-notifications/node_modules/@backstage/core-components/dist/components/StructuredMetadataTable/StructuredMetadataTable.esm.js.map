{"version":3,"file":"StructuredMetadataTable.esm.js","sources":["../../../src/components/StructuredMetadataTable/StructuredMetadataTable.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReactNode, isValidElement, Fragment, ReactElement } from 'react';\nimport startCase from 'lodash/startCase';\nimport Typography from '@material-ui/core/Typography';\n\nimport {\n  MetadataList,\n  MetadataListItem,\n  MetadataTable,\n  MetadataTableItem,\n} from './MetadataTable';\nimport { CodeSnippet } from '../CodeSnippet';\nimport jsyaml from 'js-yaml';\nimport {\n  Theme,\n  createStyles,\n  WithStyles,\n  withStyles,\n} from '@material-ui/core/styles';\n\nexport type StructuredMetadataTableListClassKey = 'root';\n\nconst listStyle = createStyles({\n  root: {\n    margin: '0 0',\n    listStyleType: 'none',\n  },\n});\n\nexport type StructuredMetadataTableNestedListClassKey = 'root';\nconst nestedListStyle = (theme: Theme) =>\n  createStyles({\n    root: {\n      ...listStyle.root,\n      paddingLeft: theme.spacing(1),\n    },\n  });\n\ninterface StyleProps extends WithStyles {\n  children?: ReactNode;\n}\n// Sub Components\nconst StyledList = withStyles(listStyle, {\n  name: 'BackstageStructuredMetadataTableList',\n})(({ classes, children }: StyleProps) => (\n  <MetadataList classes={classes}>{children}</MetadataList>\n));\nconst StyledNestedList = withStyles(nestedListStyle, {\n  name: 'BackstageStructuredMetadataTableNestedList',\n})(({ classes, children }: StyleProps) => (\n  <MetadataList classes={classes}>{children}</MetadataList>\n));\n\nfunction renderList(list: Array<any>, options: Options, nested: boolean) {\n  const values = list.map((item: any, index: number) => (\n    <MetadataListItem key={index}>\n      {toValue(item, options, nested)}\n    </MetadataListItem>\n  ));\n  return nested ? (\n    <StyledNestedList>{values}</StyledNestedList>\n  ) : (\n    <StyledList>{values}</StyledList>\n  );\n}\n\nfunction renderMap(\n  map: { [key: string]: any },\n  options: Options,\n  nested: boolean,\n) {\n  const values = Object.keys(map).map(key => {\n    const value = toValue(map[key], options, true);\n    return (\n      <MetadataListItem key={key}>\n        <Typography variant=\"body2\" component=\"span\">\n          {`${options.titleFormat(key)}: `}\n        </Typography>\n        {value}\n      </MetadataListItem>\n    );\n  });\n\n  return nested ? (\n    <StyledNestedList>{values}</StyledNestedList>\n  ) : (\n    <StyledList>{values}</StyledList>\n  );\n}\n\nfunction toValue(\n  value: ReactElement | object | Array<any> | boolean,\n  options: Options,\n  nested: boolean,\n) {\n  if (isValidElement(value)) {\n    return <Fragment>{value}</Fragment>;\n  }\n  if (value !== null && typeof value === 'object') {\n    if (options.nestedValuesAsYaml) {\n      return (\n        <CodeSnippet\n          language=\"yaml\"\n          text={jsyaml.dump(value)}\n          customStyle={{\n            background: 'transparent',\n            lineHeight: '1.4',\n            padding: '0',\n            margin: 0,\n          }}\n        />\n      );\n    }\n    if (!Array.isArray(value)) {\n      return renderMap(value, options, nested);\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return renderList(value, options, nested);\n  }\n\n  if (typeof value === 'boolean') {\n    return <Fragment>{value ? '✅' : '❌'}</Fragment>;\n  }\n  return (\n    <Typography variant=\"body2\" component=\"span\">\n      {value}\n    </Typography>\n  );\n}\nconst ItemValue = ({ value, options }: { value: any; options: Options }) => (\n  <Fragment>{toValue(value, options, false)}</Fragment>\n);\n\nconst TableItem = ({\n  title,\n  value,\n  options,\n}: {\n  title: string;\n  value: any;\n  options: Options;\n}) => {\n  return (\n    <MetadataTableItem title={options.titleFormat(title)}>\n      <ItemValue value={value} options={options} />\n    </MetadataTableItem>\n  );\n};\n\nfunction mapToItems(info: { [key: string]: string }, options: Options) {\n  return Object.keys(info).map(key => (\n    <TableItem key={key} title={key} value={info[key]} options={options} />\n  ));\n}\n\n/** @public */\nexport interface StructuredMetadataTableProps {\n  metadata: { [key: string]: any };\n  dense?: boolean;\n  options?: {\n    /**\n     * Function to format the keys from the `metadata` object. Defaults to\n     * startCase from the lodash library.\n     * @param key - A key within the `metadata`\n     * @returns Formatted key\n     */\n    titleFormat?: (key: string) => string;\n    nestedValuesAsYaml?: boolean;\n  };\n}\n\ntype Options = Required<NonNullable<StructuredMetadataTableProps['options']>>;\n\n/** @public */\nexport function StructuredMetadataTable(props: StructuredMetadataTableProps) {\n  const { metadata, dense = true, options } = props;\n  const metadataItems = mapToItems(metadata, {\n    titleFormat: startCase,\n    nestedValuesAsYaml: options?.nestedValuesAsYaml ?? false,\n    ...options,\n  });\n  return <MetadataTable dense={dense}>{metadataItems}</MetadataTable>;\n}\n"],"names":[],"mappings":"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"}