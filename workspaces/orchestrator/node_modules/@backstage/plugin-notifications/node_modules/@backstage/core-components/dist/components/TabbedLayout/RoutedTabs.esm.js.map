{"version":3,"file":"RoutedTabs.esm.js","sources":["../../../src/components/TabbedLayout/RoutedTabs.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useMemo } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { matchRoutes, useParams, useRoutes } from 'react-router-dom';\nimport { Content } from '../../layout/Content';\nimport { HeaderTabs } from '../../layout/HeaderTabs';\nimport { SubRoute } from './types';\nimport { Link } from '../Link';\n\nexport function useSelectedSubRoute(subRoutes: SubRoute[]): {\n  index: number;\n  route?: SubRoute;\n  element?: JSX.Element;\n} {\n  const params = useParams();\n\n  const routes = subRoutes.map(({ path, children }) => ({\n    caseSensitive: false,\n    path: `${path}/*`,\n    element: children,\n  }));\n\n  // TODO: remove once react-router updated\n  const sortedRoutes = routes.sort((a, b) =>\n    // remove \"/*\" symbols from path end before comparing\n    b.path.replace(/\\/\\*$/, '').localeCompare(a.path.replace(/\\/\\*$/, '')),\n  );\n\n  const element = useRoutes(sortedRoutes) ?? subRoutes[0]?.children;\n\n  // TODO(Rugvip): Once we only support v6 stable we can always prefix\n  // This avoids having a double / prefix for react-router v6 beta, which in turn breaks\n  // the tab highlighting when using relative paths for the tabs.\n  let currentRoute = params['*'] ?? '';\n  if (!currentRoute.startsWith('/')) {\n    currentRoute = `/${currentRoute}`;\n  }\n\n  const [matchedRoute] = matchRoutes(sortedRoutes, currentRoute) ?? [];\n  const foundIndex = matchedRoute\n    ? subRoutes.findIndex(t => `${t.path}/*` === matchedRoute.route.path)\n    : 0;\n\n  return {\n    index: foundIndex === -1 ? 0 : foundIndex,\n    element,\n    route: subRoutes[foundIndex] ?? subRoutes[0],\n  };\n}\n\nexport function RoutedTabs(props: { routes: SubRoute[] }) {\n  const { routes } = props;\n\n  const { index, route, element } = useSelectedSubRoute(routes);\n  const headerTabs = useMemo(\n    () =>\n      routes.map(t => {\n        const { path, title, tabProps } = t;\n        let to = path;\n        // Remove trailing /*\n        to = to.replace(/\\/\\*$/, '');\n        // And remove leading / for relative navigation\n        to = to.replace(/^\\//, '');\n        return {\n          id: path,\n          label: title,\n          tabProps: {\n            component: Link,\n            to,\n            ...tabProps,\n          },\n        };\n      }),\n    [routes],\n  );\n\n  return (\n    <>\n      <HeaderTabs tabs={headerTabs} selectedIndex={index} />\n      <Content>\n        <Helmet title={route?.title} />\n        {element}\n      </Content>\n    </>\n  );\n}\n"],"names":[],"mappings":"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"}