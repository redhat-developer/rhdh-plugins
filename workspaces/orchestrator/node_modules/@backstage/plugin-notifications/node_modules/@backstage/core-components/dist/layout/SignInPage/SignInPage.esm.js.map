{"version":3,"file":"SignInPage.esm.js","sources":["../../../src/layout/SignInPage/SignInPage.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackstageIdentityResponse,\n  configApiRef,\n  SignInPageProps,\n  useAnalytics,\n  useApi,\n} from '@backstage/core-plugin-api';\nimport { UserIdentity } from './UserIdentity';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { ComponentType, ReactNode, useState } from 'react';\nimport { useMountEffect } from '@react-hookz/web';\nimport { Progress } from '../../components/Progress';\nimport { Content } from '../Content/Content';\nimport { ContentHeader } from '../ContentHeader/ContentHeader';\nimport { Header } from '../Header';\nimport { InfoCard } from '../InfoCard';\nimport { Page } from '../Page';\nimport { getSignInProviders, useSignInProviders } from './providers';\nimport { GridItem, useStyles } from './styles';\nimport { IdentityProviders, SignInProviderConfig } from './types';\nimport { coreComponentsTranslationRef } from '../../translation';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\nimport { useSearchParams } from 'react-router-dom';\n\ntype CommonSignInPageProps = SignInPageProps & {\n  /**\n   * Error component to be rendered instead of the default error panel in case\n   * sign in fails.\n   */\n  ErrorComponent?: ComponentType<{ error?: Error }>;\n};\n\ntype MultiSignInPageProps = CommonSignInPageProps & {\n  providers: IdentityProviders;\n  title?: string;\n  titleComponent?: ReactNode;\n  align?: 'center' | 'left';\n};\n\ntype SingleSignInPageProps = CommonSignInPageProps & {\n  provider: SignInProviderConfig;\n  auto?: boolean;\n};\n\nexport type Props = MultiSignInPageProps | SingleSignInPageProps;\n\nexport const MultiSignInPage = ({\n  onSignInSuccess,\n  providers = [],\n  title,\n  titleComponent,\n  align = 'left',\n}: MultiSignInPageProps) => {\n  const configApi = useApi(configApiRef);\n  const classes = useStyles();\n\n  const signInProviders = getSignInProviders(providers);\n  const [loading, providerElements] = useSignInProviders(\n    signInProviders,\n    onSignInSuccess,\n  );\n\n  if (loading) {\n    return <Progress />;\n  }\n\n  return (\n    <Page themeId=\"home\">\n      <Header title={configApi.getString('app.title')} />\n      <Content>\n        {(title || titleComponent) && (\n          <ContentHeader\n            title={title}\n            titleComponent={titleComponent}\n            textAlign={align}\n          />\n        )}\n        <Grid\n          container\n          justifyContent={align === 'center' ? align : 'flex-start'}\n          spacing={2}\n          component=\"ul\"\n          classes={classes}\n        >\n          {providerElements}\n        </Grid>\n      </Content>\n    </Page>\n  );\n};\n\nexport const SingleSignInPage = ({\n  provider,\n  auto,\n  onSignInSuccess,\n  ErrorComponent,\n}: SingleSignInPageProps) => {\n  const classes = useStyles();\n  const authApi = useApi(provider.apiRef);\n  const configApi = useApi(configApiRef);\n  const { t } = useTranslationRef(coreComponentsTranslationRef);\n  const analytics = useAnalytics();\n\n  const [error, setError] = useState<Error>();\n\n  // The SignIn component takes some time to decide whether the user is logged-in or not.\n  // showLoginPage is used to prevent a glitch-like experience where the sign-in page is\n  // displayed for a split second when the user is already logged-in.\n  const [showLoginPage, setShowLoginPage] = useState<boolean>(false);\n\n  // User was redirected back to sign in page with error from auth redirect flow\n  const [searchParams, _setSearchParams] = useSearchParams();\n  const errorParam = searchParams.get('error');\n\n  type LoginOpts = { checkExisting?: boolean; showPopup?: boolean };\n  const login = async ({ checkExisting, showPopup }: LoginOpts) => {\n    try {\n      let identityResponse: BackstageIdentityResponse | undefined;\n      if (checkExisting) {\n        // Do an initial check if any logged-in session exists\n        identityResponse = await authApi.getBackstageIdentity({\n          optional: true,\n        });\n      }\n\n      // If no session exists, show the sign-in page\n      if (!identityResponse && (showPopup || auto) && !errorParam) {\n        // Unless auto is set to true, this step should not happen.\n        // When user intentionally clicks the Sign In button, autoShowPopup is set to true\n        setShowLoginPage(true);\n        identityResponse = await authApi.getBackstageIdentity({\n          instantPopup: true,\n        });\n        if (!identityResponse) {\n          throw new Error(\n            `The ${provider.title} provider is not configured to support sign-in`,\n          );\n        }\n      }\n\n      if (!identityResponse) {\n        setShowLoginPage(true);\n        return;\n      }\n\n      const profile = await authApi.getProfile();\n      onSignInSuccess(\n        UserIdentity.create({\n          identity: identityResponse.identity,\n          authApi,\n          profile,\n        }),\n      );\n      analytics.captureEvent('signIn', 'success');\n    } catch (err: any) {\n      // User closed the sign-in modal\n      setError(err);\n      setShowLoginPage(true);\n    }\n  };\n\n  useMountEffect(() => {\n    if (errorParam) {\n      setError(new Error(errorParam));\n    }\n    login({ checkExisting: true });\n  });\n\n  return showLoginPage ? (\n    <Page themeId=\"home\">\n      <Header title={configApi.getString('app.title')} />\n      <Content>\n        <Grid\n          container\n          justifyContent=\"center\"\n          spacing={2}\n          component=\"ul\"\n          classes={classes}\n        >\n          <GridItem>\n            <InfoCard\n              variant=\"fullHeight\"\n              title={provider.title}\n              actions={\n                <Button\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  onClick={() => {\n                    login({ showPopup: true });\n                  }}\n                >\n                  {t('signIn.title')}\n                </Button>\n              }\n            >\n              <Typography variant=\"body1\">{provider.message}</Typography>\n              {error &&\n                error.name !== 'PopupRejectedError' &&\n                (ErrorComponent ? (\n                  <ErrorComponent error={error} />\n                ) : (\n                  <Typography variant=\"body1\" color=\"error\">\n                    {error.message}\n                  </Typography>\n                ))}\n            </InfoCard>\n          </GridItem>\n        </Grid>\n      </Content>\n    </Page>\n  ) : (\n    <Progress />\n  );\n};\n\nexport function SignInPage(props: Props) {\n  if ('provider' in props) {\n    return <SingleSignInPage {...props} />;\n  }\n\n  return <MultiSignInPage {...props} />;\n}\n"],"names":[],"mappings":"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"}