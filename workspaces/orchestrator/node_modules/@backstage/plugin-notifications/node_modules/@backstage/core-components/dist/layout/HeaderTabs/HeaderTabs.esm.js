import { jsx } from 'react/jsx-runtime';
import Box from '@material-ui/core/Box';
import { makeStyles } from '@material-ui/core/styles';
import TabUI from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import { useState, useCallback, useEffect } from 'react';

const useStyles = makeStyles(
  (theme) => ({
    tabsWrapper: {
      gridArea: "pageSubheader",
      backgroundColor: theme.palette.background.paper,
      paddingLeft: theme.spacing(3),
      minWidth: 0
    },
    defaultTab: {
      ...theme.typography.caption,
      padding: theme.spacing(3, 3),
      textTransform: "uppercase",
      fontWeight: theme.typography.fontWeightBold,
      color: theme.palette.text.secondary
    },
    selected: {
      color: theme.palette.text.primary
    },
    tabRoot: {
      "&:hover": {
        backgroundColor: theme.palette.background.default,
        color: theme.palette.text.primary
      }
    }
  }),
  { name: "BackstageHeaderTabs" }
);
function HeaderTabs(props) {
  const { tabs, onChange, selectedIndex } = props;
  const [selectedTab, setSelectedTab] = useState(selectedIndex ?? 0);
  const styles = useStyles();
  const handleChange = useCallback(
    (_, index) => {
      if (selectedIndex === void 0) {
        setSelectedTab(index);
      }
      if (onChange) onChange(index);
    },
    [selectedIndex, onChange]
  );
  useEffect(() => {
    if (selectedIndex !== void 0) {
      setSelectedTab(selectedIndex);
    }
  }, [selectedIndex]);
  return /* @__PURE__ */ jsx(Box, { className: styles.tabsWrapper, children: /* @__PURE__ */ jsx(
    Tabs,
    {
      indicatorColor: "primary",
      textColor: "inherit",
      variant: "scrollable",
      scrollButtons: "auto",
      "aria-label": "tabs",
      onChange: handleChange,
      value: selectedTab,
      children: tabs.map((tab, index) => /* @__PURE__ */ jsx(
        TabUI,
        {
          "data-testid": `header-tab-${index}`,
          label: tab.label,
          value: index,
          className: styles.defaultTab,
          classes: { selected: styles.selected, root: styles.tabRoot },
          ...tab.tabProps
        },
        tab.id
      ))
    }
  ) });
}

export { HeaderTabs };
//# sourceMappingURL=HeaderTabs.esm.js.map
