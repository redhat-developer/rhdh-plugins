import * as React from 'react';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';

/** @alpha */
declare const _default: _backstage_frontend_plugin_api.OverridableFrontendPlugin<{
    root: _backstage_frontend_plugin_api.RouteRef<undefined>;
}, {}, {
    "api:notifications": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "page:notifications": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "page";
        name: undefined;
        config: {
            path: string | undefined;
        };
        configInput: {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<React.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {};
        params: {
            defaultPath?: [Error: `Use the 'path' param instead`];
            path: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef;
        };
    }>;
}>;

export { _default as default };
