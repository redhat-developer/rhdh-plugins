import { jsx } from 'react/jsx-runtime';
import { PageBlueprint, ApiBlueprint, fetchApiRef, discoveryApiRef, createFrontendPlugin } from '@backstage/frontend-plugin-api';
import { rootRouteRef } from './routes.esm.js';
import { convertLegacyRouteRef, compatWrapper, convertLegacyRouteRefs } from '@backstage/core-compat-api';
import { notificationsApiRef } from './api/NotificationsApi.esm.js';
import { NotificationsClient } from './api/NotificationsClient.esm.js';

const page = PageBlueprint.make({
  params: {
    path: "/notifications",
    routeRef: convertLegacyRouteRef(rootRouteRef),
    loader: () => import('./components/NotificationsPage/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.NotificationsPage, {}))
    )
  }
});
const api = ApiBlueprint.make({
  params: (defineParams) => defineParams({
    api: notificationsApiRef,
    deps: { discoveryApi: discoveryApiRef, fetchApi: fetchApiRef },
    factory: ({ discoveryApi, fetchApi }) => new NotificationsClient({ discoveryApi, fetchApi })
  })
});
var alpha = createFrontendPlugin({
  pluginId: "notifications",
  info: { packageJson: () => import('./package.json.esm.js') },
  routes: convertLegacyRouteRefs({
    root: rootRouteRef
  }),
  // TODO(Rugvip): Nav item (i.e. NotificationsSidebarItem) currently needs to be installed manually
  extensions: [page, api]
});

export { alpha as default };
//# sourceMappingURL=alpha.esm.js.map
