import { ResponseError } from '@backstage/errors';

class NotificationsClient {
  discoveryApi;
  fetchApi;
  constructor(options) {
    this.discoveryApi = options.discoveryApi;
    this.fetchApi = options.fetchApi;
  }
  async getNotifications(options) {
    const queryString = new URLSearchParams();
    if (options?.limit !== void 0) {
      queryString.append("limit", options.limit.toString(10));
    }
    if (options?.offset !== void 0) {
      queryString.append("offset", options.offset.toString(10));
    }
    if (options?.sort !== void 0) {
      queryString.append(
        "orderField",
        `${options.sort},${options?.sortOrder ?? "desc"}`
      );
    }
    this.appendCommonQueryStrings(queryString, options);
    if (options?.topic !== void 0) {
      queryString.append("topic", options.topic);
    }
    return await this.request(
      `/notifications?${queryString}`
    );
  }
  async getNotification(id) {
    return await this.request(
      `/notifications/${encodeURIComponent(id)}`
    );
  }
  async getStatus() {
    return await this.request("/status");
  }
  async updateNotifications(options) {
    return await this.request("/notifications/update", {
      method: "POST",
      body: JSON.stringify(options),
      headers: { "Content-Type": "application/json" }
    });
  }
  async getNotificationSettings() {
    return await this.request("/settings");
  }
  async updateNotificationSettings(settings) {
    return await this.request("/settings", {
      method: "POST",
      body: JSON.stringify(settings),
      headers: { "Content-Type": "application/json" }
    });
  }
  async getTopics(options) {
    const queryString = new URLSearchParams();
    this.appendCommonQueryStrings(queryString, options);
    return await this.request(`/topics?${queryString}`);
  }
  appendCommonQueryStrings(queryString, options) {
    if (options?.search) {
      queryString.append("search", options.search);
    }
    if (options?.read !== void 0) {
      queryString.append("read", options.read ? "true" : "false");
    }
    if (options?.saved !== void 0) {
      queryString.append("saved", options.saved ? "true" : "false");
    }
    if (options?.createdAfter !== void 0) {
      queryString.append("createdAfter", options.createdAfter.toISOString());
    }
    if (options?.minimumSeverity !== void 0) {
      queryString.append("minimumSeverity", options.minimumSeverity);
    }
  }
  async request(path, init) {
    const baseUrl = await this.discoveryApi.getBaseUrl("notifications");
    const res = await this.fetchApi.fetch(`${baseUrl}${path}`, init);
    if (!res.ok) {
      throw await ResponseError.fromResponse(res);
    }
    return res.json();
  }
}

export { NotificationsClient };
//# sourceMappingURL=NotificationsClient.esm.js.map
