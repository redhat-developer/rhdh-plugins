{"version":3,"file":"NotificationsClient.esm.js","sources":["../../src/api/NotificationsClient.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  GetNotificationsCommonOptions,\n  GetNotificationsOptions,\n  GetNotificationsResponse,\n  GetTopicsOptions,\n  GetTopicsResponse,\n  NotificationsApi,\n  UpdateNotificationsOptions,\n} from './NotificationsApi';\nimport { DiscoveryApi, FetchApi } from '@backstage/core-plugin-api';\nimport { ResponseError } from '@backstage/errors';\nimport {\n  Notification,\n  NotificationSettings,\n  NotificationStatus,\n} from '@backstage/plugin-notifications-common';\n\n/** @public */\nexport class NotificationsClient implements NotificationsApi {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly fetchApi: FetchApi;\n\n  public constructor(options: {\n    discoveryApi: DiscoveryApi;\n    fetchApi: FetchApi;\n  }) {\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi;\n  }\n\n  async getNotifications(\n    options?: GetNotificationsOptions,\n  ): Promise<GetNotificationsResponse> {\n    const queryString = new URLSearchParams();\n    if (options?.limit !== undefined) {\n      queryString.append('limit', options.limit.toString(10));\n    }\n    if (options?.offset !== undefined) {\n      queryString.append('offset', options.offset.toString(10));\n    }\n    if (options?.sort !== undefined) {\n      queryString.append(\n        'orderField',\n        `${options.sort},${options?.sortOrder ?? 'desc'}`,\n      );\n    }\n\n    this.appendCommonQueryStrings(queryString, options);\n\n    if (options?.topic !== undefined) {\n      queryString.append('topic', options.topic);\n    }\n\n    return await this.request<GetNotificationsResponse>(\n      `/notifications?${queryString}`,\n    );\n  }\n\n  async getNotification(id: string): Promise<Notification> {\n    return await this.request<Notification>(\n      `/notifications/${encodeURIComponent(id)}`,\n    );\n  }\n\n  async getStatus(): Promise<NotificationStatus> {\n    return await this.request<NotificationStatus>('/status');\n  }\n\n  async updateNotifications(\n    options: UpdateNotificationsOptions,\n  ): Promise<Notification[]> {\n    return await this.request<Notification[]>('/notifications/update', {\n      method: 'POST',\n      body: JSON.stringify(options),\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  async getNotificationSettings(): Promise<NotificationSettings> {\n    return await this.request<NotificationSettings>('/settings');\n  }\n\n  async updateNotificationSettings(\n    settings: NotificationSettings,\n  ): Promise<NotificationSettings> {\n    return await this.request<NotificationSettings>('/settings', {\n      method: 'POST',\n      body: JSON.stringify(settings),\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  async getTopics(options?: GetTopicsOptions): Promise<GetTopicsResponse> {\n    const queryString = new URLSearchParams();\n    this.appendCommonQueryStrings(queryString, options);\n\n    return await this.request<GetTopicsResponse>(`/topics?${queryString}`);\n  }\n\n  private appendCommonQueryStrings(\n    queryString: URLSearchParams,\n    options?: GetNotificationsCommonOptions,\n  ) {\n    if (options?.search) {\n      queryString.append('search', options.search);\n    }\n    if (options?.read !== undefined) {\n      queryString.append('read', options.read ? 'true' : 'false');\n    }\n    if (options?.saved !== undefined) {\n      queryString.append('saved', options.saved ? 'true' : 'false');\n    }\n    if (options?.createdAfter !== undefined) {\n      queryString.append('createdAfter', options.createdAfter.toISOString());\n    }\n    if (options?.minimumSeverity !== undefined) {\n      queryString.append('minimumSeverity', options.minimumSeverity);\n    }\n  }\n\n  private async request<T>(path: string, init?: RequestInit): Promise<T> {\n    const baseUrl = await this.discoveryApi.getBaseUrl('notifications');\n    const res = await this.fetchApi.fetch(`${baseUrl}${path}`, init);\n\n    if (!res.ok) {\n      throw await ResponseError.fromResponse(res);\n    }\n\n    return res.json() as Promise<T>;\n  }\n}\n"],"names":[],"mappings":"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"}