import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import Divider from '@material-ui/core/Divider';
import FormControl from '@material-ui/core/FormControl';
import Grid from '@material-ui/core/Grid';
import InputLabel from '@material-ui/core/InputLabel';
import MenuItem from '@material-ui/core/MenuItem';
import Select from '@material-ui/core/Select';
import Typography from '@material-ui/core/Typography';

const ALL = "___all___";
const CreatedAfterOptions = {
  last24h: {
    label: "Last 24h",
    getDate: () => new Date(Date.now() - 24 * 3600 * 1e3)
  },
  lastWeek: {
    label: "Last week",
    getDate: () => new Date(Date.now() - 7 * 24 * 3600 * 1e3)
  },
  all: {
    label: "Any time",
    getDate: () => /* @__PURE__ */ new Date(0)
  }
};
const SortByOptions = {
  newest: {
    label: "Newest on top",
    sortBy: {
      sort: "created",
      sortOrder: "desc"
    }
  },
  oldest: {
    label: "Oldest on top",
    sortBy: {
      sort: "created",
      sortOrder: "asc"
    }
  },
  topic: {
    label: "Topic",
    sortBy: {
      sort: "topic",
      sortOrder: "asc"
    }
  },
  origin: {
    label: "Origin",
    sortBy: {
      sort: "origin",
      sortOrder: "asc"
    }
  }
};
const getSortByText = (sortBy) => {
  if (sortBy?.sort === "created" && sortBy?.sortOrder === "asc") {
    return "oldest";
  }
  if (sortBy?.sort === "topic") {
    return "topic";
  }
  if (sortBy?.sort === "origin") {
    return "origin";
  }
  return "newest";
};
const AllSeverityOptions = {
  critical: "Critical",
  high: "High",
  normal: "Normal",
  low: "Low"
};
const NotificationsFilters = ({
  sorting,
  onSortingChanged,
  unreadOnly,
  onUnreadOnlyChanged,
  createdAfter,
  onCreatedAfterChanged,
  saved,
  onSavedChanged,
  severity,
  onSeverityChanged,
  topic,
  onTopicChanged,
  allTopics
}) => {
  const sortByText = getSortByText(sorting);
  const handleOnCreatedAfterChanged = (event) => {
    onCreatedAfterChanged(event.target.value);
  };
  const handleOnViewChanged = (event) => {
    if (event.target.value === "unread") {
      onUnreadOnlyChanged(true);
      onSavedChanged(void 0);
    } else if (event.target.value === "read") {
      onUnreadOnlyChanged(false);
      onSavedChanged(void 0);
    } else if (event.target.value === "saved") {
      onUnreadOnlyChanged(void 0);
      onSavedChanged(true);
    } else {
      onUnreadOnlyChanged(void 0);
      onSavedChanged(void 0);
    }
  };
  const handleOnSortByChanged = (event) => {
    const idx = event.target.value || "newest";
    const option = SortByOptions[idx];
    onSortingChanged({ ...option.sortBy });
  };
  let viewValue = "all";
  if (saved) {
    viewValue = "saved";
  } else if (unreadOnly) {
    viewValue = "unread";
  } else if (unreadOnly === false) {
    viewValue = "read";
  }
  const handleOnSeverityChanged = (event) => {
    const value = event.target.value || "normal";
    onSeverityChanged(value);
  };
  const handleOnTopicChanged = (event) => {
    const value = event.target.value;
    onTopicChanged(value === ALL ? void 0 : value);
  };
  const sortedAllTopics = (allTopics || []).sort((a, b) => a.localeCompare(b));
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs(Grid, { container: true, children: [
    /* @__PURE__ */ jsxs(Grid, { item: true, xs: 12, children: [
      /* @__PURE__ */ jsx(Typography, { variant: "h6", children: "Filters" }),
      /* @__PURE__ */ jsx(Divider, { variant: "fullWidth" })
    ] }),
    /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxs(FormControl, { fullWidth: true, variant: "outlined", size: "small", children: [
      /* @__PURE__ */ jsx(InputLabel, { id: "notifications-filter-view", children: "View" }),
      /* @__PURE__ */ jsxs(
        Select,
        {
          labelId: "notifications-filter-view",
          label: "View",
          value: viewValue,
          onChange: handleOnViewChanged,
          children: [
            /* @__PURE__ */ jsx(MenuItem, { value: "unread", children: "Unread notifications" }),
            /* @__PURE__ */ jsx(MenuItem, { value: "read", children: "Read notifications" }),
            /* @__PURE__ */ jsx(MenuItem, { value: "saved", children: "Saved" }),
            /* @__PURE__ */ jsx(MenuItem, { value: "all", children: "All" })
          ]
        }
      )
    ] }) }),
    /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxs(FormControl, { fullWidth: true, variant: "outlined", size: "small", children: [
      /* @__PURE__ */ jsx(InputLabel, { id: "notifications-filter-created", children: "Sent out" }),
      /* @__PURE__ */ jsx(
        Select,
        {
          label: "Sent out",
          labelId: "notifications-filter-created",
          placeholder: "Notifications since",
          value: createdAfter,
          onChange: handleOnCreatedAfterChanged,
          children: Object.keys(CreatedAfterOptions).map((key) => /* @__PURE__ */ jsx(MenuItem, { value: key, children: CreatedAfterOptions[key].label }, key))
        }
      )
    ] }) }),
    /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxs(FormControl, { fullWidth: true, variant: "outlined", size: "small", children: [
      /* @__PURE__ */ jsx(InputLabel, { id: "notifications-filter-sort", children: "Sort by" }),
      /* @__PURE__ */ jsx(
        Select,
        {
          label: "Sort by",
          labelId: "notifications-filter-sort",
          placeholder: "Field to sort by",
          value: sortByText,
          onChange: handleOnSortByChanged,
          children: Object.keys(SortByOptions).map((key) => /* @__PURE__ */ jsx(MenuItem, { value: key, children: SortByOptions[key].label }, key))
        }
      )
    ] }) }),
    /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxs(FormControl, { fullWidth: true, variant: "outlined", size: "small", children: [
      /* @__PURE__ */ jsx(InputLabel, { id: "notifications-filter-severity", children: "Min severity" }),
      /* @__PURE__ */ jsx(
        Select,
        {
          label: "Min severity",
          labelId: "notifications-filter-severity",
          value: severity,
          onChange: handleOnSeverityChanged,
          children: Object.keys(AllSeverityOptions).map((key) => /* @__PURE__ */ jsx(MenuItem, { value: key, children: AllSeverityOptions[key] }, key))
        }
      )
    ] }) }),
    /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsxs(FormControl, { fullWidth: true, variant: "outlined", size: "small", children: [
      /* @__PURE__ */ jsx(InputLabel, { id: "notifications-filter-topic", children: "Topic" }),
      /* @__PURE__ */ jsxs(
        Select,
        {
          label: "Topic",
          labelId: "notifications-filter-topic",
          value: topic ?? ALL,
          onChange: handleOnTopicChanged,
          children: [
            /* @__PURE__ */ jsx(MenuItem, { value: ALL, children: "Any topic" }, ALL),
            sortedAllTopics.map((item) => /* @__PURE__ */ jsx(MenuItem, { value: item, children: item }, item))
          ]
        }
      )
    ] }) })
  ] }) });
};

export { CreatedAfterOptions, NotificationsFilters, SortByOptions };
//# sourceMappingURL=NotificationsFilters.esm.js.map
