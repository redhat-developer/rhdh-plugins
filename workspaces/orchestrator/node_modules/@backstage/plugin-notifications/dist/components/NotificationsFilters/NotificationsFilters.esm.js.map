{"version":3,"file":"NotificationsFilters.esm.js","sources":["../../../src/components/NotificationsFilters/NotificationsFilters.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeEvent } from 'react';\n\nimport Divider from '@material-ui/core/Divider';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Typography from '@material-ui/core/Typography';\nimport { GetNotificationsOptions } from '../../api';\nimport { NotificationSeverity } from '@backstage/plugin-notifications-common';\n\nexport type SortBy = Required<\n  Pick<GetNotificationsOptions, 'sort' | 'sortOrder'>\n>;\n\nexport type NotificationsFiltersProps = {\n  unreadOnly?: boolean;\n  onUnreadOnlyChanged: (checked: boolean | undefined) => void;\n  createdAfter?: string;\n  onCreatedAfterChanged: (value: string) => void;\n  sorting: SortBy;\n  onSortingChanged: (sortBy: SortBy) => void;\n  saved?: boolean;\n  onSavedChanged: (checked: boolean | undefined) => void;\n  severity: NotificationSeverity;\n  onSeverityChanged: (severity: NotificationSeverity) => void;\n  topic?: string;\n  onTopicChanged: (value: string | undefined) => void;\n  allTopics?: string[];\n};\n\nconst ALL = '___all___';\n\nexport const CreatedAfterOptions: {\n  [key: string]: { label: string; getDate: () => Date };\n} = {\n  last24h: {\n    label: 'Last 24h',\n    getDate: () => new Date(Date.now() - 24 * 3600 * 1000),\n  },\n  lastWeek: {\n    label: 'Last week',\n    getDate: () => new Date(Date.now() - 7 * 24 * 3600 * 1000),\n  },\n  all: {\n    label: 'Any time',\n    getDate: () => new Date(0),\n  },\n};\n\nexport const SortByOptions: {\n  [key: string]: {\n    label: string;\n    sortBy: SortBy;\n  };\n} = {\n  newest: {\n    label: 'Newest on top',\n    sortBy: {\n      sort: 'created',\n      sortOrder: 'desc',\n    },\n  },\n  oldest: {\n    label: 'Oldest on top',\n    sortBy: {\n      sort: 'created',\n      sortOrder: 'asc',\n    },\n  },\n  topic: {\n    label: 'Topic',\n    sortBy: {\n      sort: 'topic',\n      sortOrder: 'asc',\n    },\n  },\n  origin: {\n    label: 'Origin',\n    sortBy: {\n      sort: 'origin',\n      sortOrder: 'asc',\n    },\n  },\n};\n\nconst getSortByText = (sortBy?: SortBy): string => {\n  if (sortBy?.sort === 'created' && sortBy?.sortOrder === 'asc') {\n    return 'oldest';\n  }\n  if (sortBy?.sort === 'topic') {\n    return 'topic';\n  }\n  if (sortBy?.sort === 'origin') {\n    return 'origin';\n  }\n\n  return 'newest';\n};\n\nconst AllSeverityOptions: { [key in NotificationSeverity]: string } = {\n  critical: 'Critical',\n  high: 'High',\n  normal: 'Normal',\n  low: 'Low',\n};\n\nexport const NotificationsFilters = ({\n  sorting,\n  onSortingChanged,\n  unreadOnly,\n  onUnreadOnlyChanged,\n  createdAfter,\n  onCreatedAfterChanged,\n  saved,\n  onSavedChanged,\n  severity,\n  onSeverityChanged,\n  topic,\n  onTopicChanged,\n  allTopics,\n}: NotificationsFiltersProps) => {\n  const sortByText = getSortByText(sorting);\n\n  const handleOnCreatedAfterChanged = (\n    event: ChangeEvent<{ name?: string; value: unknown }>,\n  ) => {\n    onCreatedAfterChanged(event.target.value as string);\n  };\n\n  const handleOnViewChanged = (\n    event: ChangeEvent<{ name?: string; value: unknown }>,\n  ) => {\n    if (event.target.value === 'unread') {\n      onUnreadOnlyChanged(true);\n      onSavedChanged(undefined);\n    } else if (event.target.value === 'read') {\n      onUnreadOnlyChanged(false);\n      onSavedChanged(undefined);\n    } else if (event.target.value === 'saved') {\n      onUnreadOnlyChanged(undefined);\n      onSavedChanged(true);\n    } else {\n      // All\n      onUnreadOnlyChanged(undefined);\n      onSavedChanged(undefined);\n    }\n  };\n\n  const handleOnSortByChanged = (\n    event: ChangeEvent<{ name?: string; value: unknown }>,\n  ) => {\n    const idx = (event.target.value as string) || 'newest';\n    const option = SortByOptions[idx];\n    onSortingChanged({ ...option.sortBy });\n  };\n\n  let viewValue = 'all';\n  if (saved) {\n    viewValue = 'saved';\n  } else if (unreadOnly) {\n    viewValue = 'unread';\n  } else if (unreadOnly === false) {\n    viewValue = 'read';\n  }\n\n  const handleOnSeverityChanged = (\n    event: ChangeEvent<{ name?: string; value: unknown }>,\n  ) => {\n    const value: NotificationSeverity =\n      (event.target.value as NotificationSeverity) || 'normal';\n    onSeverityChanged(value);\n  };\n\n  const handleOnTopicChanged = (\n    event: ChangeEvent<{ name?: string; value: unknown }>,\n  ) => {\n    const value = event.target.value as string;\n    onTopicChanged(value === ALL ? undefined : value);\n  };\n\n  const sortedAllTopics = (allTopics || []).sort((a, b) => a.localeCompare(b));\n\n  return (\n    <>\n      <Grid container>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">Filters</Typography>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControl fullWidth variant=\"outlined\" size=\"small\">\n            <InputLabel id=\"notifications-filter-view\">View</InputLabel>\n            <Select\n              labelId=\"notifications-filter-view\"\n              label=\"View\"\n              value={viewValue}\n              onChange={handleOnViewChanged}\n            >\n              <MenuItem value=\"unread\">Unread notifications</MenuItem>\n              <MenuItem value=\"read\">Read notifications</MenuItem>\n              <MenuItem value=\"saved\">Saved</MenuItem>\n              <MenuItem value=\"all\">All</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControl fullWidth variant=\"outlined\" size=\"small\">\n            <InputLabel id=\"notifications-filter-created\">Sent out</InputLabel>\n\n            <Select\n              label=\"Sent out\"\n              labelId=\"notifications-filter-created\"\n              placeholder=\"Notifications since\"\n              value={createdAfter}\n              onChange={handleOnCreatedAfterChanged}\n            >\n              {Object.keys(CreatedAfterOptions).map((key: string) => (\n                <MenuItem value={key} key={key}>\n                  {CreatedAfterOptions[key].label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControl fullWidth variant=\"outlined\" size=\"small\">\n            <InputLabel id=\"notifications-filter-sort\">Sort by</InputLabel>\n\n            <Select\n              label=\"Sort by\"\n              labelId=\"notifications-filter-sort\"\n              placeholder=\"Field to sort by\"\n              value={sortByText}\n              onChange={handleOnSortByChanged}\n            >\n              {Object.keys(SortByOptions).map((key: string) => (\n                <MenuItem value={key} key={key}>\n                  {SortByOptions[key].label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControl fullWidth variant=\"outlined\" size=\"small\">\n            <InputLabel id=\"notifications-filter-severity\">\n              Min severity\n            </InputLabel>\n\n            <Select\n              label=\"Min severity\"\n              labelId=\"notifications-filter-severity\"\n              value={severity}\n              onChange={handleOnSeverityChanged}\n            >\n              {Object.keys(AllSeverityOptions).map((key: string) => (\n                <MenuItem value={key} key={key}>\n                  {AllSeverityOptions[key as NotificationSeverity]}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControl fullWidth variant=\"outlined\" size=\"small\">\n            <InputLabel id=\"notifications-filter-topic\">Topic</InputLabel>\n\n            <Select\n              label=\"Topic\"\n              labelId=\"notifications-filter-topic\"\n              value={topic ?? ALL}\n              onChange={handleOnTopicChanged}\n            >\n              <MenuItem value={ALL} key={ALL}>\n                Any topic\n              </MenuItem>\n\n              {sortedAllTopics.map((item: string) => (\n                <MenuItem value={item} key={item}>\n                  {item}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;AA+CA,MAAM,GAAA,GAAM,WAAA;AAEL,MAAM,mBAAA,GAET;AAAA,EACF,OAAA,EAAS;AAAA,IACP,KAAA,EAAO,UAAA;AAAA,IACP,OAAA,EAAS,MAAM,IAAI,IAAA,CAAK,KAAK,GAAA,EAAI,GAAI,EAAA,GAAK,IAAA,GAAO,GAAI;AAAA,GACvD;AAAA,EACA,QAAA,EAAU;AAAA,IACR,KAAA,EAAO,WAAA;AAAA,IACP,OAAA,EAAS,MAAM,IAAI,IAAA,CAAK,IAAA,CAAK,KAAI,GAAI,CAAA,GAAI,EAAA,GAAK,IAAA,GAAO,GAAI;AAAA,GAC3D;AAAA,EACA,GAAA,EAAK;AAAA,IACH,KAAA,EAAO,UAAA;AAAA,IACP,OAAA,EAAS,sBAAM,IAAI,IAAA,CAAK,CAAC;AAAA;AAE7B;AAEO,MAAM,aAAA,GAKT;AAAA,EACF,MAAA,EAAQ;AAAA,IACN,KAAA,EAAO,eAAA;AAAA,IACP,MAAA,EAAQ;AAAA,MACN,IAAA,EAAM,SAAA;AAAA,MACN,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,KAAA,EAAO,eAAA;AAAA,IACP,MAAA,EAAQ;AAAA,MACN,IAAA,EAAM,SAAA;AAAA,MACN,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EACA,KAAA,EAAO;AAAA,IACL,KAAA,EAAO,OAAA;AAAA,IACP,MAAA,EAAQ;AAAA,MACN,IAAA,EAAM,OAAA;AAAA,MACN,SAAA,EAAW;AAAA;AACb,GACF;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,KAAA,EAAO,QAAA;AAAA,IACP,MAAA,EAAQ;AAAA,MACN,IAAA,EAAM,QAAA;AAAA,MACN,SAAA,EAAW;AAAA;AACb;AAEJ;AAEA,MAAM,aAAA,GAAgB,CAAC,MAAA,KAA4B;AACjD,EAAA,IAAI,MAAA,EAAQ,IAAA,KAAS,SAAA,IAAa,MAAA,EAAQ,cAAc,KAAA,EAAO;AAC7D,IAAA,OAAO,QAAA;AAAA,EACT;AACA,EAAA,IAAI,MAAA,EAAQ,SAAS,OAAA,EAAS;AAC5B,IAAA,OAAO,OAAA;AAAA,EACT;AACA,EAAA,IAAI,MAAA,EAAQ,SAAS,QAAA,EAAU;AAC7B,IAAA,OAAO,QAAA;AAAA,EACT;AAEA,EAAA,OAAO,QAAA;AACT,CAAA;AAEA,MAAM,kBAAA,GAAgE;AAAA,EACpE,QAAA,EAAU,UAAA;AAAA,EACV,IAAA,EAAM,MAAA;AAAA,EACN,MAAA,EAAQ,QAAA;AAAA,EACR,GAAA,EAAK;AACP,CAAA;AAEO,MAAM,uBAAuB,CAAC;AAAA,EACnC,OAAA;AAAA,EACA,gBAAA;AAAA,EACA,UAAA;AAAA,EACA,mBAAA;AAAA,EACA,YAAA;AAAA,EACA,qBAAA;AAAA,EACA,KAAA;AAAA,EACA,cAAA;AAAA,EACA,QAAA;AAAA,EACA,iBAAA;AAAA,EACA,KAAA;AAAA,EACA,cAAA;AAAA,EACA;AACF,CAAA,KAAiC;AAC/B,EAAA,MAAM,UAAA,GAAa,cAAc,OAAO,CAAA;AAExC,EAAA,MAAM,2BAAA,GAA8B,CAClC,KAAA,KACG;AACH,IAAA,qBAAA,CAAsB,KAAA,CAAM,OAAO,KAAe,CAAA;AAAA,EACpD,CAAA;AAEA,EAAA,MAAM,mBAAA,GAAsB,CAC1B,KAAA,KACG;AACH,IAAA,IAAI,KAAA,CAAM,MAAA,CAAO,KAAA,KAAU,QAAA,EAAU;AACnC,MAAA,mBAAA,CAAoB,IAAI,CAAA;AACxB,MAAA,cAAA,CAAe,MAAS,CAAA;AAAA,IAC1B,CAAA,MAAA,IAAW,KAAA,CAAM,MAAA,CAAO,KAAA,KAAU,MAAA,EAAQ;AACxC,MAAA,mBAAA,CAAoB,KAAK,CAAA;AACzB,MAAA,cAAA,CAAe,MAAS,CAAA;AAAA,IAC1B,CAAA,MAAA,IAAW,KAAA,CAAM,MAAA,CAAO,KAAA,KAAU,OAAA,EAAS;AACzC,MAAA,mBAAA,CAAoB,MAAS,CAAA;AAC7B,MAAA,cAAA,CAAe,IAAI,CAAA;AAAA,IACrB,CAAA,MAAO;AAEL,MAAA,mBAAA,CAAoB,MAAS,CAAA;AAC7B,MAAA,cAAA,CAAe,MAAS,CAAA;AAAA,IAC1B;AAAA,EACF,CAAA;AAEA,EAAA,MAAM,qBAAA,GAAwB,CAC5B,KAAA,KACG;AACH,IAAA,MAAM,GAAA,GAAO,KAAA,CAAM,MAAA,CAAO,KAAA,IAAoB,QAAA;AAC9C,IAAA,MAAM,MAAA,GAAS,cAAc,GAAG,CAAA;AAChC,IAAA,gBAAA,CAAiB,EAAE,GAAG,MAAA,CAAO,MAAA,EAAQ,CAAA;AAAA,EACvC,CAAA;AAEA,EAAA,IAAI,SAAA,GAAY,KAAA;AAChB,EAAA,IAAI,KAAA,EAAO;AACT,IAAA,SAAA,GAAY,OAAA;AAAA,EACd,WAAW,UAAA,EAAY;AACrB,IAAA,SAAA,GAAY,QAAA;AAAA,EACd,CAAA,MAAA,IAAW,eAAe,KAAA,EAAO;AAC/B,IAAA,SAAA,GAAY,MAAA;AAAA,EACd;AAEA,EAAA,MAAM,uBAAA,GAA0B,CAC9B,KAAA,KACG;AACH,IAAA,MAAM,KAAA,GACH,KAAA,CAAM,MAAA,CAAO,KAAA,IAAkC,QAAA;AAClD,IAAA,iBAAA,CAAkB,KAAK,CAAA;AAAA,EACzB,CAAA;AAEA,EAAA,MAAM,oBAAA,GAAuB,CAC3B,KAAA,KACG;AACH,IAAA,MAAM,KAAA,GAAQ,MAAM,MAAA,CAAO,KAAA;AAC3B,IAAA,cAAA,CAAe,KAAA,KAAU,GAAA,GAAM,MAAA,GAAY,KAAK,CAAA;AAAA,EAClD,CAAA;AAEA,EAAA,MAAM,eAAA,GAAA,CAAmB,SAAA,IAAa,EAAC,EAAG,IAAA,CAAK,CAAC,CAAA,EAAG,CAAA,KAAM,CAAA,CAAE,aAAA,CAAc,CAAC,CAAC,CAAA;AAE3E,EAAA,uBACE,GAAA,CAAA,QAAA,EAAA,EACE,QAAA,kBAAA,IAAA,CAAC,IAAA,EAAA,EAAK,SAAA,EAAS,IAAA,EACb,QAAA,EAAA;AAAA,oBAAA,IAAA,CAAC,IAAA,EAAA,EAAK,IAAA,EAAI,IAAA,EAAC,EAAA,EAAI,EAAA,EACb,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,UAAA,EAAA,EAAW,OAAA,EAAQ,IAAA,EAAK,QAAA,EAAA,SAAA,EAAO,CAAA;AAAA,sBAChC,GAAA,CAAC,OAAA,EAAA,EAAQ,OAAA,EAAQ,WAAA,EAAY;AAAA,KAAA,EAC/B,CAAA;AAAA,oBAEA,GAAA,CAAC,IAAA,EAAA,EAAK,IAAA,EAAI,IAAA,EAAC,EAAA,EAAI,EAAA,EACb,QAAA,kBAAA,IAAA,CAAC,WAAA,EAAA,EAAY,SAAA,EAAS,IAAA,EAAC,OAAA,EAAQ,UAAA,EAAW,MAAK,OAAA,EAC7C,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,UAAA,EAAA,EAAW,EAAA,EAAG,2BAAA,EAA4B,QAAA,EAAA,MAAA,EAAI,CAAA;AAAA,sBAC/C,IAAA;AAAA,QAAC,MAAA;AAAA,QAAA;AAAA,UACC,OAAA,EAAQ,2BAAA;AAAA,UACR,KAAA,EAAM,MAAA;AAAA,UACN,KAAA,EAAO,SAAA;AAAA,UACP,QAAA,EAAU,mBAAA;AAAA,UAEV,QAAA,EAAA;AAAA,4BAAA,GAAA,CAAC,QAAA,EAAA,EAAS,KAAA,EAAM,QAAA,EAAS,QAAA,EAAA,sBAAA,EAAoB,CAAA;AAAA,4BAC7C,GAAA,CAAC,QAAA,EAAA,EAAS,KAAA,EAAM,MAAA,EAAO,QAAA,EAAA,oBAAA,EAAkB,CAAA;AAAA,4BACzC,GAAA,CAAC,QAAA,EAAA,EAAS,KAAA,EAAM,OAAA,EAAQ,QAAA,EAAA,OAAA,EAAK,CAAA;AAAA,4BAC7B,GAAA,CAAC,QAAA,EAAA,EAAS,KAAA,EAAM,KAAA,EAAM,QAAA,EAAA,KAAA,EAAG;AAAA;AAAA;AAAA;AAC3B,KAAA,EACF,CAAA,EACF,CAAA;AAAA,oBAEA,GAAA,CAAC,IAAA,EAAA,EAAK,IAAA,EAAI,IAAA,EAAC,EAAA,EAAI,EAAA,EACb,QAAA,kBAAA,IAAA,CAAC,WAAA,EAAA,EAAY,SAAA,EAAS,IAAA,EAAC,OAAA,EAAQ,UAAA,EAAW,MAAK,OAAA,EAC7C,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,UAAA,EAAA,EAAW,EAAA,EAAG,8BAAA,EAA+B,QAAA,EAAA,UAAA,EAAQ,CAAA;AAAA,sBAEtD,GAAA;AAAA,QAAC,MAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAM,UAAA;AAAA,UACN,OAAA,EAAQ,8BAAA;AAAA,UACR,WAAA,EAAY,qBAAA;AAAA,UACZ,KAAA,EAAO,YAAA;AAAA,UACP,QAAA,EAAU,2BAAA;AAAA,UAET,iBAAO,IAAA,CAAK,mBAAmB,CAAA,CAAE,GAAA,CAAI,CAAC,GAAA,qBACrC,GAAA,CAAC,QAAA,EAAA,EAAS,KAAA,EAAO,KACd,QAAA,EAAA,mBAAA,CAAoB,GAAG,CAAA,CAAE,KAAA,EAAA,EADD,GAE3B,CACD;AAAA;AAAA;AACH,KAAA,EACF,CAAA,EACF,CAAA;AAAA,oBAEA,GAAA,CAAC,IAAA,EAAA,EAAK,IAAA,EAAI,IAAA,EAAC,EAAA,EAAI,EAAA,EACb,QAAA,kBAAA,IAAA,CAAC,WAAA,EAAA,EAAY,SAAA,EAAS,IAAA,EAAC,OAAA,EAAQ,UAAA,EAAW,MAAK,OAAA,EAC7C,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,UAAA,EAAA,EAAW,EAAA,EAAG,2BAAA,EAA4B,QAAA,EAAA,SAAA,EAAO,CAAA;AAAA,sBAElD,GAAA;AAAA,QAAC,MAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAM,SAAA;AAAA,UACN,OAAA,EAAQ,2BAAA;AAAA,UACR,WAAA,EAAY,kBAAA;AAAA,UACZ,KAAA,EAAO,UAAA;AAAA,UACP,QAAA,EAAU,qBAAA;AAAA,UAET,iBAAO,IAAA,CAAK,aAAa,CAAA,CAAE,GAAA,CAAI,CAAC,GAAA,qBAC/B,GAAA,CAAC,QAAA,EAAA,EAAS,KAAA,EAAO,KACd,QAAA,EAAA,aAAA,CAAc,GAAG,CAAA,CAAE,KAAA,EAAA,EADK,GAE3B,CACD;AAAA;AAAA;AACH,KAAA,EACF,CAAA,EACF,CAAA;AAAA,oBAEA,GAAA,CAAC,IAAA,EAAA,EAAK,IAAA,EAAI,IAAA,EAAC,EAAA,EAAI,EAAA,EACb,QAAA,kBAAA,IAAA,CAAC,WAAA,EAAA,EAAY,SAAA,EAAS,IAAA,EAAC,OAAA,EAAQ,UAAA,EAAW,MAAK,OAAA,EAC7C,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,UAAA,EAAA,EAAW,EAAA,EAAG,+BAAA,EAAgC,QAAA,EAAA,cAAA,EAE/C,CAAA;AAAA,sBAEA,GAAA;AAAA,QAAC,MAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAM,cAAA;AAAA,UACN,OAAA,EAAQ,+BAAA;AAAA,UACR,KAAA,EAAO,QAAA;AAAA,UACP,QAAA,EAAU,uBAAA;AAAA,UAET,QAAA,EAAA,MAAA,CAAO,IAAA,CAAK,kBAAkB,CAAA,CAAE,IAAI,CAAC,GAAA,qBACpC,GAAA,CAAC,QAAA,EAAA,EAAS,OAAO,GAAA,EACd,QAAA,EAAA,kBAAA,CAAmB,GAA2B,CAAA,EAAA,EADtB,GAE3B,CACD;AAAA;AAAA;AACH,KAAA,EACF,CAAA,EACF,CAAA;AAAA,oBAEA,GAAA,CAAC,IAAA,EAAA,EAAK,IAAA,EAAI,IAAA,EAAC,EAAA,EAAI,EAAA,EACb,QAAA,kBAAA,IAAA,CAAC,WAAA,EAAA,EAAY,SAAA,EAAS,IAAA,EAAC,OAAA,EAAQ,UAAA,EAAW,MAAK,OAAA,EAC7C,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,UAAA,EAAA,EAAW,EAAA,EAAG,4BAAA,EAA6B,QAAA,EAAA,OAAA,EAAK,CAAA;AAAA,sBAEjD,IAAA;AAAA,QAAC,MAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAM,OAAA;AAAA,UACN,OAAA,EAAQ,4BAAA;AAAA,UACR,OAAO,KAAA,IAAS,GAAA;AAAA,UAChB,QAAA,EAAU,oBAAA;AAAA,UAEV,QAAA,EAAA;AAAA,4BAAA,GAAA,CAAC,QAAA,EAAA,EAAS,KAAA,EAAO,GAAA,EAAe,QAAA,EAAA,WAAA,EAAA,EAAL,GAE3B,CAAA;AAAA,YAEC,eAAA,CAAgB,GAAA,CAAI,CAAC,IAAA,qBACpB,GAAA,CAAC,YAAS,KAAA,EAAO,IAAA,EACd,QAAA,EAAA,IAAA,EAAA,EADyB,IAE5B,CACD;AAAA;AAAA;AAAA;AACH,KAAA,EACF,CAAA,EACF;AAAA,GAAA,EACF,CAAA,EACF,CAAA;AAEJ;;;;"}