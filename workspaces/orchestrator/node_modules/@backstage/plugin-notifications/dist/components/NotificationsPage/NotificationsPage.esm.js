import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, useMemo, useEffect } from 'react';
import throttle from 'lodash/throttle';
import { ResponseErrorPanel, PageWithHeader, Content } from '@backstage/core-components';
import Grid from '@material-ui/core/Grid';
import { ConfirmProvider } from 'material-ui-confirm';
import { useSignal } from '@backstage/plugin-signals-react';
import { NotificationsTable } from '../NotificationsTable/NotificationsTable.esm.js';
import { useNotificationsApi } from '../../hooks/useNotificationsApi.esm.js';
import '@backstage/core-plugin-api';
import '../../api/NotificationsApi.esm.js';
import '@backstage/errors';
import '../../routes.esm.js';
import '../../hooks/useTitleCounter.esm.js';
import { SortByOptions, NotificationsFilters, CreatedAfterOptions } from '../NotificationsFilters/NotificationsFilters.esm.js';

const ThrottleDelayMs = 2e3;
const NotificationsPage = (props) => {
  const {
    title = "Notifications",
    themeId = "tool",
    subtitle,
    tooltip,
    type,
    typeLink,
    markAsReadOnLinkOpen
  } = props ?? {};
  const [refresh, setRefresh] = useState(false);
  const { lastSignal } = useSignal("notifications");
  const [unreadOnly, setUnreadOnly] = useState(true);
  const [saved, setSaved] = useState(void 0);
  const [pageNumber, setPageNumber] = useState(0);
  const [pageSize, setPageSize] = useState(5);
  const [containsText, setContainsText] = useState();
  const [createdAfter, setCreatedAfter] = useState("all");
  const [sorting, setSorting] = useState(SortByOptions.newest.sortBy);
  const [severity, setSeverity] = useState("low");
  const [topic, setTopic] = useState();
  const { error, value, retry, loading } = useNotificationsApi(
    (api) => {
      const options = {
        search: containsText,
        limit: pageSize,
        offset: pageNumber * pageSize,
        minimumSeverity: severity,
        ...sorting || {}
      };
      if (unreadOnly !== void 0) {
        options.read = !unreadOnly;
      }
      if (saved !== void 0) {
        options.saved = saved;
      }
      if (topic !== void 0) {
        options.topic = topic;
      }
      const createdAfterDate = CreatedAfterOptions[createdAfter].getDate();
      if (createdAfterDate.valueOf() > 0) {
        options.createdAfter = createdAfterDate;
      }
      return Promise.all([
        api.getNotifications(options),
        api.getStatus(),
        api.getTopics(options)
      ]);
    },
    [
      containsText,
      unreadOnly,
      createdAfter,
      pageNumber,
      pageSize,
      sorting,
      saved,
      severity,
      topic
    ]
  );
  const throttledSetRefresh = useMemo(
    () => throttle(setRefresh, ThrottleDelayMs),
    [setRefresh]
  );
  useEffect(() => {
    if (refresh && !loading) {
      retry();
      setRefresh(false);
    }
  }, [refresh, setRefresh, retry, loading]);
  useEffect(() => {
    if (lastSignal && lastSignal.action) {
      throttledSetRefresh(true);
    }
  }, [lastSignal, throttledSetRefresh]);
  const onUpdate = () => {
    throttledSetRefresh(true);
  };
  if (error) {
    return /* @__PURE__ */ jsx(ResponseErrorPanel, { error });
  }
  const notifications = value?.[0]?.notifications;
  const totalCount = value?.[0]?.totalCount;
  const isUnread = !!value?.[1]?.unread;
  const allTopics = value?.[2]?.topics;
  let tableTitle = `All notifications (${totalCount})`;
  if (saved) {
    tableTitle = `Saved notifications (${totalCount})`;
  } else if (unreadOnly === true) {
    tableTitle = `Unread notifications (${totalCount})`;
  } else if (unreadOnly === false) {
    tableTitle = `Read notifications (${totalCount})`;
  }
  return /* @__PURE__ */ jsx(
    PageWithHeader,
    {
      title,
      themeId,
      tooltip,
      subtitle,
      type,
      typeLink,
      children: /* @__PURE__ */ jsx(Content, { children: /* @__PURE__ */ jsx(ConfirmProvider, { children: /* @__PURE__ */ jsxs(Grid, { container: true, children: [
        /* @__PURE__ */ jsx(Grid, { item: true, xs: 2, children: /* @__PURE__ */ jsx(
          NotificationsFilters,
          {
            unreadOnly,
            onUnreadOnlyChanged: setUnreadOnly,
            createdAfter,
            onCreatedAfterChanged: setCreatedAfter,
            onSortingChanged: setSorting,
            sorting,
            saved,
            onSavedChanged: setSaved,
            severity,
            onSeverityChanged: setSeverity,
            topic,
            onTopicChanged: setTopic,
            allTopics
          }
        ) }),
        /* @__PURE__ */ jsx(Grid, { item: true, xs: 10, children: /* @__PURE__ */ jsx(
          NotificationsTable,
          {
            title: tableTitle,
            isLoading: loading,
            isUnread,
            markAsReadOnLinkOpen,
            notifications,
            onUpdate,
            setContainsText,
            onPageChange: setPageNumber,
            onRowsPerPageChange: setPageSize,
            page: pageNumber,
            pageSize,
            totalCount
          }
        ) })
      ] }) }) })
    }
  );
};

export { NotificationsPage };
//# sourceMappingURL=NotificationsPage.esm.js.map
