import { jsxs, jsx } from 'react/jsx-runtime';
import { isNotificationsEnabledFor } from '@backstage/plugin-notifications-common';
import IconButton from '@material-ui/core/IconButton';
import Switch from '@material-ui/core/Switch';
import TableRow from '@material-ui/core/TableRow';
import Tooltip from '@material-ui/core/Tooltip';
import KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';
import { NoBorderTableCell } from './NoBorderTableCell.esm.js';
import { useNotificationFormat } from './UserNotificationSettingsCard.esm.js';

const OriginRow = (props) => {
  const { origin, settings, handleChange, open, handleRowToggle } = props;
  const { formatOriginName } = useNotificationFormat();
  return /* @__PURE__ */ jsxs(TableRow, { children: [
    /* @__PURE__ */ jsx(NoBorderTableCell, { children: origin.topics && origin.topics.length > 0 && /* @__PURE__ */ jsx(
      Tooltip,
      {
        title: `Show Topics for the ${formatOriginName(origin.id)} origin`,
        children: /* @__PURE__ */ jsx(
          IconButton,
          {
            "aria-label": "expand row",
            size: "small",
            onClick: () => handleRowToggle(origin.id),
            children: open ? /* @__PURE__ */ jsx(KeyboardArrowUpIcon, {}) : /* @__PURE__ */ jsx(KeyboardArrowDownIcon, {})
          }
        )
      }
    ) }),
    /* @__PURE__ */ jsx(NoBorderTableCell, { children: formatOriginName(origin.id) }),
    /* @__PURE__ */ jsx(NoBorderTableCell, { children: "all" }),
    settings.channels.map((ch) => /* @__PURE__ */ jsx(NoBorderTableCell, { align: "center", children: /* @__PURE__ */ jsx(
      Tooltip,
      {
        title: `Enable or disable ${ch.id.toLocaleLowerCase(
          "en-US"
        )} notifications from ${formatOriginName(origin.id)}`,
        children: /* @__PURE__ */ jsx(
          Switch,
          {
            checked: isNotificationsEnabledFor(
              settings,
              ch.id,
              origin.id,
              null
            ),
            onChange: (event) => {
              handleChange(ch.id, origin.id, null, event.target.checked);
            }
          }
        )
      }
    ) }, ch.id))
  ] });
};

export { OriginRow };
//# sourceMappingURL=OriginRow.esm.js.map
