{"version":3,"file":"UserNotificationSettingsCard.esm.js","sources":["../../../src/components/UserNotificationSettingsCard/UserNotificationSettingsCard.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport { ErrorPanel, InfoCard, Progress } from '@backstage/core-components';\nimport { useNotificationsApi } from '../../hooks';\nimport { NotificationSettings } from '@backstage/plugin-notifications-common';\nimport { notificationsApiRef } from '../../api';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { UserNotificationSettingsPanel } from './UserNotificationSettingsPanel';\nimport { capitalize } from 'lodash';\n\ntype FormatContextType = {\n  formatOriginName: (id: string) => string;\n  formatTopicName: (id: string) => string;\n};\n\nconst NotificationFormatContext = createContext<FormatContextType | undefined>(\n  undefined,\n);\n\nexport const useNotificationFormat = () => {\n  const context = useContext(NotificationFormatContext);\n  if (!context)\n    throw new Error(\n      'useNotificationFormat must be used within a NotificationFormatProvider',\n    );\n  return context;\n};\n\ntype Props = {\n  children: React.ReactNode;\n  originMap: Record<string, string> | undefined;\n  topicMap: Record<string, string> | undefined;\n};\n\nexport const NotificationFormatProvider = ({\n  children,\n  originMap,\n  topicMap,\n}: Props) => {\n  const formatName = (\n    id: string,\n    nameMap: Record<string, string> | undefined,\n  ) => {\n    if (nameMap && id in nameMap) {\n      return nameMap[id];\n    }\n    return capitalize(id.replaceAll(/[-_:]/g, ' '));\n  };\n\n  const formatOriginName = (originId: string) => {\n    return formatName(originId, originMap);\n  };\n\n  const formatTopicName = (topicId: string) => {\n    return formatName(topicId, topicMap);\n  };\n  return (\n    <NotificationFormatContext.Provider\n      value={{ formatOriginName, formatTopicName }}\n    >\n      {children}\n    </NotificationFormatContext.Provider>\n  );\n};\n\n/** @public */\nexport const UserNotificationSettingsCard = (props: {\n  originNames?: Record<string, string>;\n  topicNames?: Record<string, string>;\n}) => {\n  const [settings, setNotificationSettings] = useState<\n    NotificationSettings | undefined\n  >(undefined);\n\n  const client = useApi(notificationsApiRef);\n  const { error, value, loading } = useNotificationsApi(api => {\n    return api.getNotificationSettings();\n  });\n\n  useEffect(() => {\n    if (!loading && !error) {\n      setNotificationSettings(value);\n    }\n  }, [loading, value, error]);\n\n  const onUpdate = (newSettings: NotificationSettings) => {\n    client\n      .updateNotificationSettings(newSettings)\n      .then(updatedSettings => setNotificationSettings(updatedSettings));\n  };\n\n  return (\n    <InfoCard title=\"Notification settings\" variant=\"gridItem\">\n      {loading && <Progress />}\n      {error && <ErrorPanel title=\"Failed to load settings\" error={error} />}\n      {settings && (\n        <NotificationFormatProvider\n          originMap={props.originNames}\n          topicMap={props.topicNames}\n        >\n          <UserNotificationSettingsPanel\n            settings={settings}\n            onChange={onUpdate}\n          />\n        </NotificationFormatProvider>\n      )}\n    </InfoCard>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AA8BA,MAAM,yBAAA,GAA4B,aAAA;AAAA,EAChC;AACF,CAAA;AAEO,MAAM,wBAAwB,MAAM;AACzC,EAAA,MAAM,OAAA,GAAU,WAAW,yBAAyB,CAAA;AACpD,EAAA,IAAI,CAAC,OAAA;AACH,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AACF,EAAA,OAAO,OAAA;AACT;AAQO,MAAM,6BAA6B,CAAC;AAAA,EACzC,QAAA;AAAA,EACA,SAAA;AAAA,EACA;AACF,CAAA,KAAa;AACX,EAAA,MAAM,UAAA,GAAa,CACjB,EAAA,EACA,OAAA,KACG;AACH,IAAA,IAAI,OAAA,IAAW,MAAM,OAAA,EAAS;AAC5B,MAAA,OAAO,QAAQ,EAAE,CAAA;AAAA,IACnB;AACA,IAAA,OAAO,UAAA,CAAW,EAAA,CAAG,UAAA,CAAW,QAAA,EAAU,GAAG,CAAC,CAAA;AAAA,EAChD,CAAA;AAEA,EAAA,MAAM,gBAAA,GAAmB,CAAC,QAAA,KAAqB;AAC7C,IAAA,OAAO,UAAA,CAAW,UAAU,SAAS,CAAA;AAAA,EACvC,CAAA;AAEA,EAAA,MAAM,eAAA,GAAkB,CAAC,OAAA,KAAoB;AAC3C,IAAA,OAAO,UAAA,CAAW,SAAS,QAAQ,CAAA;AAAA,EACrC,CAAA;AACA,EAAA,uBACE,GAAA;AAAA,IAAC,yBAAA,CAA0B,QAAA;AAAA,IAA1B;AAAA,MACC,KAAA,EAAO,EAAE,gBAAA,EAAkB,eAAA,EAAgB;AAAA,MAE1C;AAAA;AAAA,GACH;AAEJ;AAGO,MAAM,4BAAA,GAA+B,CAAC,KAAA,KAGvC;AACJ,EAAA,MAAM,CAAC,QAAA,EAAU,uBAAuB,CAAA,GAAI,SAE1C,MAAS,CAAA;AAEX,EAAA,MAAM,MAAA,GAAS,OAAO,mBAAmB,CAAA;AACzC,EAAA,MAAM,EAAE,KAAA,EAAO,KAAA,EAAO,OAAA,EAAQ,GAAI,oBAAoB,CAAA,GAAA,KAAO;AAC3D,IAAA,OAAO,IAAI,uBAAA,EAAwB;AAAA,EACrC,CAAC,CAAA;AAED,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,CAAC,OAAA,IAAW,CAAC,KAAA,EAAO;AACtB,MAAA,uBAAA,CAAwB,KAAK,CAAA;AAAA,IAC/B;AAAA,EACF,CAAA,EAAG,CAAC,OAAA,EAAS,KAAA,EAAO,KAAK,CAAC,CAAA;AAE1B,EAAA,MAAM,QAAA,GAAW,CAAC,WAAA,KAAsC;AACtD,IAAA,MAAA,CACG,2BAA2B,WAAW,CAAA,CACtC,KAAK,CAAA,eAAA,KAAmB,uBAAA,CAAwB,eAAe,CAAC,CAAA;AAAA,EACrE,CAAA;AAEA,EAAA,uBACE,IAAA,CAAC,QAAA,EAAA,EAAS,KAAA,EAAM,uBAAA,EAAwB,SAAQ,UAAA,EAC7C,QAAA,EAAA;AAAA,IAAA,OAAA,wBAAY,QAAA,EAAA,EAAS,CAAA;AAAA,IACrB,KAAA,oBAAS,GAAA,CAAC,UAAA,EAAA,EAAW,KAAA,EAAM,2BAA0B,KAAA,EAAc,CAAA;AAAA,IACnE,QAAA,oBACC,GAAA;AAAA,MAAC,0BAAA;AAAA,MAAA;AAAA,QACC,WAAW,KAAA,CAAM,WAAA;AAAA,QACjB,UAAU,KAAA,CAAM,UAAA;AAAA,QAEhB,QAAA,kBAAA,GAAA;AAAA,UAAC,6BAAA;AAAA,UAAA;AAAA,YACC,QAAA;AAAA,YACA,QAAA,EAAU;AAAA;AAAA;AACZ;AAAA;AACF,GAAA,EAEJ,CAAA;AAEJ;;;;"}