import { jsx, jsxs } from 'react/jsx-runtime';
import { useState } from 'react';
import Table from '@material-ui/core/Table';
import MuiTableCell from '@material-ui/core/TableCell';
import { withStyles } from '@material-ui/core/styles';
import TableHead from '@material-ui/core/TableHead';
import Typography from '@material-ui/core/Typography';
import TableBody from '@material-ui/core/TableBody';
import TableRow from '@material-ui/core/TableRow';
import { TopicRow } from './TopicRow.esm.js';
import { OriginRow } from './OriginRow.esm.js';

const TableCell = withStyles({
  root: {
    borderBottom: "none"
  }
})(MuiTableCell);
const UserNotificationSettingsPanel = (props) => {
  const { settings, onChange } = props;
  const [expandedRows, setExpandedRows] = useState(/* @__PURE__ */ new Set());
  const handleRowToggle = (originId) => {
    setExpandedRows((prevState) => {
      const newExpandedRows = new Set(prevState);
      if (newExpandedRows.has(originId)) {
        newExpandedRows.delete(originId);
      } else {
        newExpandedRows.add(originId);
      }
      return newExpandedRows;
    });
  };
  const handleChange = (channelId, originId, topicId, enabled) => {
    const updatedSettings = {
      channels: settings.channels.map((channel) => {
        if (channel.id !== channelId) {
          return channel;
        }
        return {
          ...channel,
          origins: channel.origins.map((origin) => {
            if (origin.id !== originId) {
              return origin;
            }
            if (topicId === null) {
              return {
                ...origin,
                enabled,
                topics: origin.topics?.map((topic) => {
                  return { ...topic, enabled };
                }) ?? []
              };
            }
            return {
              ...origin,
              topics: origin.topics?.map((topic) => {
                if (topic.id === topicId) {
                  return {
                    ...topic,
                    enabled: origin.enabled ? enabled : origin.enabled
                  };
                }
                return topic;
              }) ?? []
            };
          })
        };
      })
    };
    onChange(updatedSettings);
  };
  if (settings.channels.length === 0) {
    return /* @__PURE__ */ jsx(Typography, { variant: "body1", children: "No notification settings available, check back later" });
  }
  const uniqueOriginsMap = settings.channels.flatMap((channel) => channel.origins).reduce((map, origin) => {
    if (!map.has(origin.id)) {
      map.set(origin.id, origin);
    }
    return map;
  }, /* @__PURE__ */ new Map()).values();
  const uniqueOrigins = Array.from(uniqueOriginsMap);
  return /* @__PURE__ */ jsxs(Table, { children: [
    /* @__PURE__ */ jsx(TableHead, { children: /* @__PURE__ */ jsxs(TableRow, { children: [
      /* @__PURE__ */ jsx(TableCell, {}),
      /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { variant: "subtitle1", children: "Origin" }) }),
      /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { variant: "subtitle1", children: "Topic" }) }),
      settings.channels.map((channel) => /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { variant: "subtitle1", align: "center", children: channel.id }) }, channel.id))
    ] }) }),
    /* @__PURE__ */ jsx(TableBody, { children: uniqueOrigins.flatMap((origin) => [
      /* @__PURE__ */ jsx(
        OriginRow,
        {
          origin,
          settings,
          open: expandedRows.has(origin.id),
          handleChange,
          handleRowToggle
        },
        origin.id
      ),
      ...expandedRows.has(origin.id) ? origin.topics?.map((topic) => /* @__PURE__ */ jsx(
        TopicRow,
        {
          topic,
          origin,
          settings,
          handleChange
        },
        `${origin.id}-${topic.id}`
      )) || [] : []
    ]) })
  ] });
};

export { UserNotificationSettingsPanel };
//# sourceMappingURL=UserNotificationSettingsPanel.esm.js.map
