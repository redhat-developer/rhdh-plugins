{"version":3,"file":"UserNotificationSettingsPanel.esm.js","sources":["../../../src/components/UserNotificationSettingsCard/UserNotificationSettingsPanel.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useState } from 'react';\nimport {\n  NotificationSettings,\n  OriginSetting,\n} from '@backstage/plugin-notifications-common';\nimport Table from '@material-ui/core/Table';\nimport MuiTableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core/styles';\nimport TableHead from '@material-ui/core/TableHead';\nimport Typography from '@material-ui/core/Typography';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport { TopicRow } from './TopicRow';\nimport { OriginRow } from './OriginRow';\n\nconst TableCell = withStyles({\n  root: {\n    borderBottom: 'none',\n  },\n})(MuiTableCell);\n\nexport const UserNotificationSettingsPanel = (props: {\n  settings: NotificationSettings;\n  onChange: (settings: NotificationSettings) => void;\n  originNames?: Record<string, string>;\n  topicNames?: Record<string, string>;\n}) => {\n  const { settings, onChange } = props;\n  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());\n\n  const handleRowToggle = (originId: string) => {\n    setExpandedRows(prevState => {\n      const newExpandedRows = new Set(prevState);\n      if (newExpandedRows.has(originId)) {\n        newExpandedRows.delete(originId);\n      } else {\n        newExpandedRows.add(originId);\n      }\n      return newExpandedRows;\n    });\n  };\n  const handleChange = (\n    channelId: string,\n    originId: string,\n    topicId: string | null,\n    enabled: boolean,\n  ) => {\n    const updatedSettings = {\n      channels: settings.channels.map(channel => {\n        if (channel.id !== channelId) {\n          return channel;\n        }\n        return {\n          ...channel,\n          origins: channel.origins.map(origin => {\n            if (origin.id !== originId) {\n              return origin;\n            }\n\n            if (topicId === null) {\n              return {\n                ...origin,\n                enabled,\n                topics:\n                  origin.topics?.map(topic => {\n                    return { ...topic, enabled };\n                  }) ?? [],\n              };\n            }\n\n            return {\n              ...origin,\n              topics:\n                origin.topics?.map(topic => {\n                  if (topic.id === topicId) {\n                    return {\n                      ...topic,\n                      enabled: origin.enabled ? enabled : origin.enabled,\n                    };\n                  }\n                  return topic;\n                }) ?? [],\n            };\n          }),\n        };\n      }),\n    };\n    onChange(updatedSettings);\n  };\n\n  if (settings.channels.length === 0) {\n    return (\n      <Typography variant=\"body1\">\n        No notification settings available, check back later\n      </Typography>\n    );\n  }\n\n  const uniqueOriginsMap = settings.channels\n    .flatMap(channel => channel.origins)\n    .reduce((map, origin) => {\n      if (!map.has(origin.id)) {\n        map.set(origin.id, origin);\n      }\n      return map;\n    }, new Map<string, OriginSetting>())\n    .values();\n\n  const uniqueOrigins = Array.from(uniqueOriginsMap);\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell />\n          <TableCell>\n            <Typography variant=\"subtitle1\">Origin</Typography>\n          </TableCell>\n          <TableCell>\n            <Typography variant=\"subtitle1\">Topic</Typography>\n          </TableCell>\n          {settings.channels.map(channel => (\n            <TableCell key={channel.id}>\n              <Typography variant=\"subtitle1\" align=\"center\">\n                {channel.id}\n              </Typography>\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {uniqueOrigins.flatMap(origin => [\n          <OriginRow\n            key={origin.id}\n            origin={origin}\n            settings={settings}\n            open={expandedRows.has(origin.id)}\n            handleChange={handleChange}\n            handleRowToggle={handleRowToggle}\n          />,\n          ...(expandedRows.has(origin.id)\n            ? origin.topics?.map(topic => (\n                <TopicRow\n                  key={`${origin.id}-${topic.id}`}\n                  topic={topic}\n                  origin={origin}\n                  settings={settings}\n                  handleChange={handleChange}\n                />\n              )) || []\n            : []),\n        ])}\n      </TableBody>\n    </Table>\n  );\n};\n"],"names":[],"mappings":"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"}