import { jsxs, jsx } from 'react/jsx-runtime';
import { createContext, useState, useEffect, useContext } from 'react';
import { InfoCard, Progress, ErrorPanel } from '@backstage/core-components';
import { useNotificationsApi } from '../../hooks/useNotificationsApi.esm.js';
import { useApi } from '@backstage/core-plugin-api';
import { notificationsApiRef } from '../../api/NotificationsApi.esm.js';
import '@backstage/errors';
import '../../routes.esm.js';
import '../../hooks/useTitleCounter.esm.js';
import { UserNotificationSettingsPanel } from './UserNotificationSettingsPanel.esm.js';
import { capitalize } from 'lodash';

const NotificationFormatContext = createContext(
  void 0
);
const useNotificationFormat = () => {
  const context = useContext(NotificationFormatContext);
  if (!context)
    throw new Error(
      "useNotificationFormat must be used within a NotificationFormatProvider"
    );
  return context;
};
const NotificationFormatProvider = ({
  children,
  originMap,
  topicMap
}) => {
  const formatName = (id, nameMap) => {
    if (nameMap && id in nameMap) {
      return nameMap[id];
    }
    return capitalize(id.replaceAll(/[-_:]/g, " "));
  };
  const formatOriginName = (originId) => {
    return formatName(originId, originMap);
  };
  const formatTopicName = (topicId) => {
    return formatName(topicId, topicMap);
  };
  return /* @__PURE__ */ jsx(
    NotificationFormatContext.Provider,
    {
      value: { formatOriginName, formatTopicName },
      children
    }
  );
};
const UserNotificationSettingsCard = (props) => {
  const [settings, setNotificationSettings] = useState(void 0);
  const client = useApi(notificationsApiRef);
  const { error, value, loading } = useNotificationsApi((api) => {
    return api.getNotificationSettings();
  });
  useEffect(() => {
    if (!loading && !error) {
      setNotificationSettings(value);
    }
  }, [loading, value, error]);
  const onUpdate = (newSettings) => {
    client.updateNotificationSettings(newSettings).then((updatedSettings) => setNotificationSettings(updatedSettings));
  };
  return /* @__PURE__ */ jsxs(InfoCard, { title: "Notification settings", variant: "gridItem", children: [
    loading && /* @__PURE__ */ jsx(Progress, {}),
    error && /* @__PURE__ */ jsx(ErrorPanel, { title: "Failed to load settings", error }),
    settings && /* @__PURE__ */ jsx(
      NotificationFormatProvider,
      {
        originMap: props.originNames,
        topicMap: props.topicNames,
        children: /* @__PURE__ */ jsx(
          UserNotificationSettingsPanel,
          {
            settings,
            onChange: onUpdate
          }
        )
      }
    )
  ] });
};

export { NotificationFormatProvider, UserNotificationSettingsCard, useNotificationFormat };
//# sourceMappingURL=UserNotificationSettingsCard.esm.js.map
