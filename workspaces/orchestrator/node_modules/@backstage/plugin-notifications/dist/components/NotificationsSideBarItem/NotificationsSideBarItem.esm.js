import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useMemo, useState, useCallback, useEffect } from 'react';
import { useNotificationsApi } from '../../hooks/useNotificationsApi.esm.js';
import { useWebNotifications } from '../../hooks/useWebNotifications.esm.js';
import { useTitleCounter } from '../../hooks/useTitleCounter.esm.js';
import { SidebarItem, Link } from '@backstage/core-components';
import NotificationsIcon from '@material-ui/icons/Notifications';
import { useApi, alertApiRef, useRouteRef } from '@backstage/core-plugin-api';
import { rootRouteRef } from '../../routes.esm.js';
import { useSignal } from '@backstage/plugin-signals-react';
import { notificationsApiRef } from '../../api/NotificationsApi.esm.js';
import '@backstage/errors';
import { MaterialDesignContent, SnackbarProvider, closeSnackbar, enqueueSnackbar } from 'notistack';
import { SeverityIcon } from '../NotificationsTable/SeverityIcon.esm.js';
import OpenInNew from '@material-ui/icons/OpenInNew';
import MarkAsReadIcon from '@material-ui/icons/CheckCircle';
import IconButton from '@material-ui/core/IconButton';
import Chip from '@material-ui/core/Chip';
import { styled } from '@material-ui/core/styles';

const StyledMaterialDesignContent = styled(MaterialDesignContent)(
  ({ theme }) => ({
    "&.notistack-MuiContent-low": {
      backgroundColor: theme.palette.background.default,
      color: theme.palette.text.primary
    },
    "&.notistack-MuiContent-normal": {
      backgroundColor: theme.palette.background.default,
      color: theme.palette.text.primary
    },
    "&.notistack-MuiContent-high": {
      backgroundColor: theme.palette.background.default,
      color: theme.palette.text.primary
    },
    "&.notistack-MuiContent-critical": {
      backgroundColor: theme.palette.background.default,
      color: theme.palette.text.primary
    }
  })
);
const NotificationsSidebarItem = (props) => {
  const {
    webNotificationsEnabled = false,
    titleCounterEnabled = true,
    snackbarEnabled = true,
    snackbarAutoHideDuration = 1e4,
    icon = NotificationsIcon,
    text = "Notifications",
    ...restProps
  } = props ?? {
    webNotificationsEnabled: false,
    titleCounterEnabled: true,
    snackbarProps: {
      enabled: true,
      autoHideDuration: 1e4
    }
  };
  const snackbarProps = useMemo(
    () => props?.snackbarProps ?? {
      enabled: snackbarEnabled,
      autoHideDuration: snackbarAutoHideDuration
    },
    [props?.snackbarProps, snackbarAutoHideDuration, snackbarEnabled]
  );
  const { loading, error, value, retry } = useNotificationsApi(
    (api) => api.getStatus()
  );
  const notificationsApi = useApi(notificationsApiRef);
  const alertApi = useApi(alertApiRef);
  const [unreadCount, setUnreadCount] = useState(0);
  const notificationsRoute = useRouteRef(rootRouteRef)();
  const { lastSignal } = useSignal("notifications");
  const { sendWebNotification, requestUserPermission } = useWebNotifications(
    webNotificationsEnabled
  );
  const [refresh, setRefresh] = useState(false);
  const { setNotificationCount } = useTitleCounter();
  const getSnackbarProperties = useCallback(
    (notification) => {
      const action = (snackBarId) => /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(
          IconButton,
          {
            component: Link,
            to: notification.payload.link ?? notificationsRoute,
            onClick: () => {
              if (notification.payload.link) {
                notificationsApi.updateNotifications({
                  ids: [notification.id],
                  read: true
                }).catch(() => {
                  alertApi.post({
                    message: "Failed to mark notification as read",
                    severity: "error"
                  });
                });
              }
              closeSnackbar(snackBarId);
            },
            children: /* @__PURE__ */ jsx(OpenInNew, { fontSize: "small" })
          }
        ),
        /* @__PURE__ */ jsx(
          IconButton,
          {
            onClick: () => {
              notificationsApi.updateNotifications({
                ids: [notification.id],
                read: true
              }).then(() => {
                closeSnackbar(snackBarId);
              }).catch(() => {
                alertApi.post({
                  message: "Failed to mark notification as read",
                  severity: "error"
                });
              });
            },
            children: /* @__PURE__ */ jsx(MarkAsReadIcon, { fontSize: "small" })
          }
        )
      ] });
      return { action };
    },
    [notificationsRoute, notificationsApi, alertApi]
  );
  useEffect(() => {
    if (refresh) {
      retry();
      setRefresh(false);
    }
  }, [refresh, retry]);
  useEffect(() => {
    const handleNotificationSignal = (signal) => {
      if (!webNotificationsEnabled && !snackbarProps.enabled || signal.action !== "new_notification") {
        return;
      }
      notificationsApi.getNotification(signal.notification_id).then((notification) => {
        if (!notification) {
          return;
        }
        if (webNotificationsEnabled) {
          sendWebNotification({
            id: notification.id,
            title: notification.payload.title,
            description: notification.payload.description ?? "",
            link: notification.payload.link
          });
        }
        if (snackbarProps.enabled) {
          const { action } = getSnackbarProperties(notification);
          const snackBarText = notification.payload.title.length > 50 ? `${notification.payload.title.substring(0, 50)}...` : notification.payload.title;
          enqueueSnackbar(snackBarText, {
            key: notification.id,
            style: snackbarProps.snackStyle,
            variant: notification.payload.severity,
            anchorOrigin: snackbarProps.anchorOrigin ?? {
              vertical: "bottom",
              horizontal: "right"
            },
            action,
            autoHideDuration: snackbarProps.autoHideDuration
          });
        }
      }).catch(() => {
        alertApi.post({
          message: "Failed to fetch notification",
          severity: "error"
        });
      });
    };
    if (lastSignal && lastSignal.action) {
      handleNotificationSignal(lastSignal);
      setRefresh(true);
    }
  }, [
    lastSignal,
    sendWebNotification,
    webNotificationsEnabled,
    notificationsApi,
    alertApi,
    getSnackbarProperties,
    snackbarProps
  ]);
  useEffect(() => {
    if (!loading && !error && value) {
      setUnreadCount(value.unread);
    }
  }, [loading, error, value]);
  useEffect(() => {
    if (titleCounterEnabled) {
      setNotificationCount(unreadCount);
    }
  }, [titleCounterEnabled, unreadCount, setNotificationCount]);
  const count = !error && !!unreadCount ? unreadCount : void 0;
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    snackbarEnabled && /* @__PURE__ */ jsx(
      SnackbarProvider,
      {
        iconVariant: {
          normal: snackbarProps?.iconVariant?.normal ?? /* @__PURE__ */ jsx(SeverityIcon, { severity: "normal" }),
          critical: snackbarProps?.iconVariant?.critical ?? /* @__PURE__ */ jsx(SeverityIcon, { severity: "critical" }),
          high: snackbarProps?.iconVariant?.high ?? /* @__PURE__ */ jsx(SeverityIcon, { severity: "high" }),
          low: snackbarProps?.iconVariant?.low ?? /* @__PURE__ */ jsx(SeverityIcon, { severity: "low" })
        },
        dense: snackbarProps?.dense,
        maxSnack: snackbarProps?.maxSnack,
        Components: {
          normal: snackbarProps?.Components?.normal ?? StyledMaterialDesignContent,
          critical: snackbarProps?.Components?.critical ?? StyledMaterialDesignContent,
          high: snackbarProps?.Components?.high ?? StyledMaterialDesignContent,
          low: snackbarProps?.Components?.low ?? StyledMaterialDesignContent
        }
      }
    ),
    /* @__PURE__ */ jsx(
      SidebarItem,
      {
        to: notificationsRoute,
        onClick: () => {
          requestUserPermission();
        },
        text,
        icon,
        ...restProps,
        children: count && /* @__PURE__ */ jsx(Chip, { size: "small", label: count > 99 ? "99+" : count })
      }
    )
  ] });
};

export { NotificationsSidebarItem };
//# sourceMappingURL=NotificationsSideBarItem.esm.js.map
