import { useState, useCallback } from 'react';
import { useRouteRef, useApi } from '@backstage/core-plugin-api';
import { notificationsApiRef } from '../api/NotificationsApi.esm.js';
import '@backstage/errors';
import { rootRouteRef } from '../routes.esm.js';

function useWebNotifications(enabled) {
  const [webNotificationPermission, setWebNotificationPermission] = useState("default");
  const notificationsRoute = useRouteRef(rootRouteRef)();
  const notificationsApi = useApi(notificationsApiRef);
  const requestUserPermission = useCallback(() => {
    if (enabled && "Notification" in window && webNotificationPermission === "default") {
      window.Notification.requestPermission().then((permission) => {
        setWebNotificationPermission(permission);
      });
    }
  }, [enabled, webNotificationPermission]);
  const sendWebNotification = useCallback(
    (options) => {
      if (webNotificationPermission !== "granted") {
        return null;
      }
      const notification = new Notification(options.title, {
        body: options.description,
        tag: options.id
        // Prevent duplicates from multiple tabs
      });
      notification.onclick = (event) => {
        event.preventDefault();
        if (options.link) {
          window.open(options.link, "_blank");
          notificationsApi.updateNotifications({
            ids: [options.id],
            read: true
          });
        } else {
          window.open(notificationsRoute);
        }
        notification.close();
      };
      return notification;
    },
    [webNotificationPermission, notificationsApi, notificationsRoute]
  );
  return { sendWebNotification, requestUserPermission };
}

export { useWebNotifications };
//# sourceMappingURL=useWebNotifications.esm.js.map
