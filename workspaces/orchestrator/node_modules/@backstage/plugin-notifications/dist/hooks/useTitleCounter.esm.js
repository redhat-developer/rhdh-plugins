import { useState, useEffect, useCallback } from 'react';
import throttle from 'lodash/throttle';

const getPrefix = (value) => value === 0 ? "" : `(${value}) `;
const cleanTitle = (currentTitle) => currentTitle.replace(/^\(\d+\)\s/, "");
const throttledSetTitle = throttle((shownTitle) => {
  document.title = shownTitle;
}, 100);
function useTitleCounter() {
  const [title, setTitle] = useState(document.title);
  const [count, setCount] = useState(0);
  useEffect(() => {
    const baseTitle = cleanTitle(title);
    const shownTitle = `${getPrefix(count)}${baseTitle}`;
    if (document.title !== shownTitle) {
      throttledSetTitle(shownTitle);
    }
    return () => {
      document.title = cleanTitle(title);
    };
  }, [count, title]);
  useEffect(() => {
    const titleElement = document.querySelector("title");
    let observer;
    if (titleElement) {
      observer = new MutationObserver((mutations) => {
        if (mutations?.[0]?.target?.textContent) {
          setTitle(mutations[0].target.textContent);
        }
      });
      observer.observe(titleElement, {
        characterData: true,
        childList: true
      });
    }
    return () => {
      if (observer) {
        observer.disconnect();
      }
    };
  }, []);
  const setNotificationCount = useCallback(
    (newCount) => setCount(newCount),
    []
  );
  return { setNotificationCount };
}

export { useTitleCounter };
//# sourceMappingURL=useTitleCounter.esm.js.map
