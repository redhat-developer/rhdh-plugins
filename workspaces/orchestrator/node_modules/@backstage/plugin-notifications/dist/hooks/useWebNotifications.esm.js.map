{"version":3,"file":"useWebNotifications.esm.js","sources":["../../src/hooks/useWebNotifications.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { useApi, useRouteRef } from '@backstage/core-plugin-api';\nimport { notificationsApiRef } from '../api';\nimport { rootRouteRef } from '../routes';\n\n/** @internal */\nexport function useWebNotifications(enabled: boolean) {\n  const [webNotificationPermission, setWebNotificationPermission] =\n    useState('default');\n  const notificationsRoute = useRouteRef(rootRouteRef)();\n  const notificationsApi = useApi(notificationsApiRef);\n\n  const requestUserPermission = useCallback(() => {\n    if (\n      enabled &&\n      'Notification' in window &&\n      webNotificationPermission === 'default'\n    ) {\n      window.Notification.requestPermission().then(permission => {\n        setWebNotificationPermission(permission);\n      });\n    }\n  }, [enabled, webNotificationPermission]);\n\n  const sendWebNotification = useCallback(\n    (options: {\n      id: string;\n      title: string;\n      description: string;\n      link?: string;\n    }) => {\n      if (webNotificationPermission !== 'granted') {\n        return null;\n      }\n\n      const notification = new Notification(options.title, {\n        body: options.description,\n        tag: options.id, // Prevent duplicates from multiple tabs\n      });\n\n      notification.onclick = event => {\n        event.preventDefault();\n        if (options.link) {\n          window.open(options.link, '_blank');\n          notificationsApi.updateNotifications({\n            ids: [options.id],\n            read: true,\n          });\n        } else {\n          window.open(notificationsRoute);\n        }\n        notification.close();\n      };\n\n      return notification;\n    },\n    [webNotificationPermission, notificationsApi, notificationsRoute],\n  );\n\n  return { sendWebNotification, requestUserPermission };\n}\n"],"names":[],"mappings":";;;;;;AAqBO,SAAS,oBAAoB,OAAA,EAAkB;AACpD,EAAA,MAAM,CAAC,yBAAA,EAA2B,4BAA4B,CAAA,GAC5D,SAAS,SAAS,CAAA;AACpB,EAAA,MAAM,kBAAA,GAAqB,WAAA,CAAY,YAAY,CAAA,EAAE;AACrD,EAAA,MAAM,gBAAA,GAAmB,OAAO,mBAAmB,CAAA;AAEnD,EAAA,MAAM,qBAAA,GAAwB,YAAY,MAAM;AAC9C,IAAA,IACE,OAAA,IACA,cAAA,IAAkB,MAAA,IAClB,yBAAA,KAA8B,SAAA,EAC9B;AACA,MAAA,MAAA,CAAO,YAAA,CAAa,iBAAA,EAAkB,CAAE,IAAA,CAAK,CAAA,UAAA,KAAc;AACzD,QAAA,4BAAA,CAA6B,UAAU,CAAA;AAAA,MACzC,CAAC,CAAA;AAAA,IACH;AAAA,EACF,CAAA,EAAG,CAAC,OAAA,EAAS,yBAAyB,CAAC,CAAA;AAEvC,EAAA,MAAM,mBAAA,GAAsB,WAAA;AAAA,IAC1B,CAAC,OAAA,KAKK;AACJ,MAAA,IAAI,8BAA8B,SAAA,EAAW;AAC3C,QAAA,OAAO,IAAA;AAAA,MACT;AAEA,MAAA,MAAM,YAAA,GAAe,IAAI,YAAA,CAAa,OAAA,CAAQ,KAAA,EAAO;AAAA,QACnD,MAAM,OAAA,CAAQ,WAAA;AAAA,QACd,KAAK,OAAA,CAAQ;AAAA;AAAA,OACd,CAAA;AAED,MAAA,YAAA,CAAa,UAAU,CAAA,KAAA,KAAS;AAC9B,QAAA,KAAA,CAAM,cAAA,EAAe;AACrB,QAAA,IAAI,QAAQ,IAAA,EAAM;AAChB,UAAA,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,IAAA,EAAM,QAAQ,CAAA;AAClC,UAAA,gBAAA,CAAiB,mBAAA,CAAoB;AAAA,YACnC,GAAA,EAAK,CAAC,OAAA,CAAQ,EAAE,CAAA;AAAA,YAChB,IAAA,EAAM;AAAA,WACP,CAAA;AAAA,QACH,CAAA,MAAO;AACL,UAAA,MAAA,CAAO,KAAK,kBAAkB,CAAA;AAAA,QAChC;AACA,QAAA,YAAA,CAAa,KAAA,EAAM;AAAA,MACrB,CAAA;AAEA,MAAA,OAAO,YAAA;AAAA,IACT,CAAA;AAAA,IACA,CAAC,yBAAA,EAA2B,gBAAA,EAAkB,kBAAkB;AAAA,GAClE;AAEA,EAAA,OAAO,EAAE,qBAAqB,qBAAA,EAAsB;AACtD;;;;"}