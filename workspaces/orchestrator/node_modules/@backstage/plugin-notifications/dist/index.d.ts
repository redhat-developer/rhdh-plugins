import * as react_jsx_runtime from 'react/jsx-runtime';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { DiscoveryApi, FetchApi, IconComponent } from '@backstage/core-plugin-api';
import { NotificationSeverity, Notification, NotificationStatus, NotificationSettings } from '@backstage/plugin-notifications-common';
import * as React from 'react';
import { TableProps } from '@backstage/core-components';

/** @public */
type NotificationsPageProps = {
    /** Mark notification as read when opening the link it contains, defaults to false */
    markAsReadOnLinkOpen?: boolean;
    title?: string;
    themeId?: string;
    subtitle?: string;
    tooltip?: string;
    type?: string;
    typeLink?: string;
};

/** @public */
declare const notificationsPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}>;
/** @public */
declare const NotificationsPage: (props?: NotificationsPageProps) => react_jsx_runtime.JSX.Element;

/** @public */
declare const notificationsApiRef: _backstage_core_plugin_api.ApiRef<NotificationsApi>;
/** @public */
type GetNotificationsCommonOptions = {
    search?: string;
    read?: boolean;
    saved?: boolean;
    createdAfter?: Date;
    minimumSeverity?: NotificationSeverity;
};
/** @public */
type GetNotificationsOptions = GetNotificationsCommonOptions & {
    offset?: number;
    limit?: number;
    sort?: 'created' | 'topic' | 'origin';
    sortOrder?: 'asc' | 'desc';
    topic?: string;
};
/** @public */
type GetTopicsOptions = GetNotificationsCommonOptions;
/** @public */
type UpdateNotificationsOptions = {
    ids: string[];
    read?: boolean;
    saved?: boolean;
};
/** @public */
type GetNotificationsResponse = {
    notifications: Notification[];
    totalCount: number;
};
/** @public */
type GetTopicsResponse = {
    topics: string[];
};
/** @public */
interface NotificationsApi {
    getNotifications(options?: GetNotificationsOptions): Promise<GetNotificationsResponse>;
    getNotification(id: string): Promise<Notification>;
    getStatus(): Promise<NotificationStatus>;
    updateNotifications(options: UpdateNotificationsOptions): Promise<Notification[]>;
    getNotificationSettings(): Promise<NotificationSettings>;
    updateNotificationSettings(settings: NotificationSettings): Promise<NotificationSettings>;
    getTopics(options?: GetTopicsOptions): Promise<GetTopicsResponse>;
}

/** @public */
declare class NotificationsClient implements NotificationsApi {
    private readonly discoveryApi;
    private readonly fetchApi;
    constructor(options: {
        discoveryApi: DiscoveryApi;
        fetchApi: FetchApi;
    });
    getNotifications(options?: GetNotificationsOptions): Promise<GetNotificationsResponse>;
    getNotification(id: string): Promise<Notification>;
    getStatus(): Promise<NotificationStatus>;
    updateNotifications(options: UpdateNotificationsOptions): Promise<Notification[]>;
    getNotificationSettings(): Promise<NotificationSettings>;
    updateNotificationSettings(settings: NotificationSettings): Promise<NotificationSettings>;
    getTopics(options?: GetTopicsOptions): Promise<GetTopicsResponse>;
    private appendCommonQueryStrings;
    private request;
}

/** @public */
declare function useNotificationsApi<T>(f: (api: NotificationsApi) => Promise<T>, deps?: any[]): {
    retry: () => void;
    loading: boolean;
    error?: undefined;
    value?: undefined;
} | {
    retry: () => void;
    loading: false;
    error: Error;
    value?: undefined;
} | {
    retry: () => void;
    loading: true;
    error?: Error | undefined;
    value?: T | undefined;
} | {
    retry: () => void;
    loading: false;
    error?: undefined;
    value: T;
};

declare module 'notistack' {
    interface VariantOverrides {
        low: true;
        normal: true;
        high: true;
        critical: true;
    }
}
/**
 * @public
 */
type NotificationSnackbarProperties = {
    enabled?: boolean;
    autoHideDuration?: number | null;
    anchorOrigin?: {
        vertical: 'top' | 'bottom';
        horizontal: 'left' | 'center' | 'right';
    };
    dense?: boolean;
    maxSnack?: number;
    snackStyle?: React.CSSProperties;
    iconVariant?: Partial<Record<NotificationSeverity, React.ReactNode>>;
    Components?: {
        [key in NotificationSeverity]: React.JSXElementConstructor<any>;
    };
};
/**
 * @public
 */
type NotificationsSideBarItemProps = {
    webNotificationsEnabled?: boolean;
    titleCounterEnabled?: boolean;
    /**
     * @deprecated Use `snackbarProps` instead.
     */
    snackbarEnabled?: boolean;
    /**
     * @deprecated Use `snackbarProps` instead.
     */
    snackbarAutoHideDuration?: number | null;
    snackbarProps?: NotificationSnackbarProperties;
    className?: string;
    icon?: IconComponent;
    text?: string;
    disableHighlight?: boolean;
    noTrack?: boolean;
};
/** @public */
declare const NotificationsSidebarItem: (props?: NotificationsSideBarItemProps) => react_jsx_runtime.JSX.Element;

/** @public */
type NotificationsTableProps = Pick<TableProps, 'onPageChange' | 'onRowsPerPageChange' | 'page' | 'totalCount' | 'title'> & {
    markAsReadOnLinkOpen?: boolean;
    isLoading?: boolean;
    isUnread: boolean;
    notifications?: Notification[];
    onUpdate: () => void;
    setContainsText: (search: string) => void;
    pageSize: number;
};
/** @public */
declare const NotificationsTable: ({ title, markAsReadOnLinkOpen, isLoading, notifications, isUnread, onUpdate, setContainsText, onPageChange, onRowsPerPageChange, page, pageSize, totalCount, }: NotificationsTableProps) => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserNotificationSettingsCard: (props: {
    originNames?: Record<string, string>;
    topicNames?: Record<string, string>;
}) => react_jsx_runtime.JSX.Element;

export { type GetNotificationsCommonOptions, type GetNotificationsOptions, type GetNotificationsResponse, type GetTopicsOptions, type GetTopicsResponse, type NotificationSnackbarProperties, type NotificationsApi, NotificationsClient, NotificationsPage, type NotificationsPageProps, type NotificationsSideBarItemProps, NotificationsSidebarItem, NotificationsTable, type NotificationsTableProps, type UpdateNotificationsOptions, UserNotificationSettingsCard, notificationsApiRef, notificationsPlugin, useNotificationsApi };
