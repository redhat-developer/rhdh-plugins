import * as _backstage_catalog_model from '@backstage/catalog-model';
import * as react from 'react';
import * as _backstage_plugin_catalog_react_alpha from '@backstage/plugin-catalog-react/alpha';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import { Direction } from '@backstage/plugin-catalog-graph';

/** @alpha */
declare const catalogGraphTranslationRef: _backstage_frontend_plugin_api.TranslationRef<"catalog-graph", {
    readonly "catalogGraphCard.title": "Relations";
    readonly "catalogGraphCard.deepLinkTitle": "View graph";
    readonly "catalogGraphPage.title": "Catalog Graph";
    readonly "catalogGraphPage.filterToggleButtonTitle": "Filters";
    readonly "catalogGraphPage.supportButtonDescription": "Start tracking your component in by adding it to the software catalog.";
    readonly "catalogGraphPage.simplifiedSwitchLabel": "Simplified";
    readonly "catalogGraphPage.mergeRelationsSwitchLabel": "Merge relations";
    readonly "catalogGraphPage.zoomOutDescription": "Use pinch &amp; zoom to move around the diagram. Click to change active node, shift click to navigate to entity.";
    readonly "catalogGraphPage.curveFilter.title": "Curve";
    readonly "catalogGraphPage.curveFilter.curveStepBefore": "Step Before";
    readonly "catalogGraphPage.curveFilter.curveMonotoneX": "Monotone X";
    readonly "catalogGraphPage.directionFilter.title": "Direction";
    readonly "catalogGraphPage.directionFilter.leftToRight": "Left to right";
    readonly "catalogGraphPage.directionFilter.rightToLeft": "Right to left";
    readonly "catalogGraphPage.directionFilter.topToBottom": "Top to bottom";
    readonly "catalogGraphPage.directionFilter.bottomToTop": "Bottom to top";
    readonly "catalogGraphPage.maxDepthFilter.title": "Max depth";
    readonly "catalogGraphPage.maxDepthFilter.inputPlaceholder": "âˆž Infinite";
    readonly "catalogGraphPage.maxDepthFilter.clearButtonAriaLabel": "clear max depth";
    readonly "catalogGraphPage.selectedKindsFilter.title": "Kinds";
    readonly "catalogGraphPage.selectedRelationsFilter.title": "Relations";
}>;

declare const _default: _backstage_frontend_plugin_api.OverridableFrontendPlugin<{
    catalogGraph: _backstage_frontend_plugin_api.RouteRef<undefined>;
}, {
    catalogEntity: _backstage_frontend_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }>;
}, {
    "entity-card:catalog-graph/relations": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            kinds: string[] | undefined;
            relations: string[] | undefined;
            maxDepth: number | undefined;
            unidirectional: boolean | undefined;
            mergeRelations: boolean | undefined;
            direction: Direction | undefined;
            relationPairs: [string, string][] | undefined;
            zoom: "disabled" | "enabled" | "enable-on-click" | undefined;
            curve: "curveStepBefore" | "curveMonotoneX" | undefined;
            title: string | undefined;
            height: number | undefined;
        } & {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            height?: number | undefined;
            curve?: "curveStepBefore" | "curveMonotoneX" | undefined;
            direction?: Direction | undefined;
            zoom?: "disabled" | "enabled" | "enable-on-click" | undefined;
            title?: string | undefined;
            relations?: string[] | undefined;
            maxDepth?: number | undefined;
            kinds?: string[] | undefined;
            unidirectional?: boolean | undefined;
            mergeRelations?: boolean | undefined;
            relationPairs?: [string, string][] | undefined;
        } & {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "entity-card";
        name: "relations";
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "page:catalog-graph": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            selectedKinds: string[] | undefined;
            selectedRelations: string[] | undefined;
            rootEntityRefs: string[] | undefined;
            maxDepth: number | undefined;
            unidirectional: boolean | undefined;
            mergeRelations: boolean | undefined;
            direction: Direction | undefined;
            showFilters: boolean | undefined;
            curve: "curveStepBefore" | "curveMonotoneX" | undefined;
            kinds: string[] | undefined;
            relations: string[] | undefined;
            relationPairs: [string, string][] | undefined;
            zoom: "disabled" | "enabled" | "enable-on-click" | undefined;
        } & {
            path: string | undefined;
        };
        configInput: {
            curve?: "curveStepBefore" | "curveMonotoneX" | undefined;
            direction?: Direction | undefined;
            zoom?: "disabled" | "enabled" | "enable-on-click" | undefined;
            relations?: string[] | undefined;
            rootEntityRefs?: string[] | undefined;
            maxDepth?: number | undefined;
            kinds?: string[] | undefined;
            unidirectional?: boolean | undefined;
            mergeRelations?: boolean | undefined;
            relationPairs?: [string, string][] | undefined;
            selectedRelations?: string[] | undefined;
            selectedKinds?: string[] | undefined;
            showFilters?: boolean | undefined;
        } & {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "page";
        name: undefined;
        params: {
            defaultPath?: [Error: `Use the 'path' param instead`];
            path: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef;
        };
    }>;
}>;

export { catalogGraphTranslationRef, _default as default };
