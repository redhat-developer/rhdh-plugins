import { jsx } from 'react/jsx-runtime';
import { PageBlueprint, createFrontendPlugin } from '@backstage/frontend-plugin-api';
import { compatWrapper, convertLegacyRouteRef } from '@backstage/core-compat-api';
import { EntityCardBlueprint } from '@backstage/plugin-catalog-react/alpha';
import { catalogGraphRouteRef, catalogEntityRouteRef } from './routes.esm.js';
import { Direction } from '@backstage/plugin-catalog-graph';
export { catalogGraphTranslationRef } from './translation.esm.js';

const CatalogGraphEntityCard = EntityCardBlueprint.makeWithOverrides({
  name: "relations",
  config: {
    schema: {
      kinds: (z) => z.array(z.string()).optional(),
      relations: (z) => z.array(z.string()).optional(),
      maxDepth: (z) => z.number().optional(),
      unidirectional: (z) => z.boolean().optional(),
      mergeRelations: (z) => z.boolean().optional(),
      direction: (z) => z.nativeEnum(Direction).optional(),
      relationPairs: (z) => z.array(z.tuple([z.string(), z.string()])).optional(),
      zoom: (z) => z.enum(["enabled", "disabled", "enable-on-click"]).optional(),
      curve: (z) => z.enum(["curveStepBefore", "curveMonotoneX"]).optional(),
      // Skipping a "variant" config for now, defaulting to "gridItem" in the component
      // For more details, see this comment: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
      title: (z) => z.string().optional(),
      height: (z) => z.number().optional()
    }
  },
  factory(originalFactory, { config }) {
    return originalFactory({
      loader: async () => import('./components/CatalogGraphCard/index.esm.js').then(
        (m) => compatWrapper(/* @__PURE__ */ jsx(m.CatalogGraphCard, { ...config }))
      )
    });
  }
});
const CatalogGraphPage = PageBlueprint.makeWithOverrides({
  config: {
    schema: {
      selectedKinds: (z) => z.array(z.string()).optional(),
      selectedRelations: (z) => z.array(z.string()).optional(),
      rootEntityRefs: (z) => z.array(z.string()).optional(),
      maxDepth: (z) => z.number().optional(),
      unidirectional: (z) => z.boolean().optional(),
      mergeRelations: (z) => z.boolean().optional(),
      direction: (z) => z.nativeEnum(Direction).optional(),
      showFilters: (z) => z.boolean().optional(),
      curve: (z) => z.enum(["curveStepBefore", "curveMonotoneX"]).optional(),
      kinds: (z) => z.array(z.string()).optional(),
      relations: (z) => z.array(z.string()).optional(),
      relationPairs: (z) => z.array(z.tuple([z.string(), z.string()])).optional(),
      zoom: (z) => z.enum(["enabled", "disabled", "enable-on-click"]).optional()
    }
  },
  factory(originalFactory, { config }) {
    return originalFactory({
      path: "/catalog-graph",
      routeRef: convertLegacyRouteRef(catalogGraphRouteRef),
      loader: () => import('./components/CatalogGraphPage/index.esm.js').then(
        (m) => compatWrapper(/* @__PURE__ */ jsx(m.CatalogGraphPage, { ...config }))
      )
    });
  }
});
var alpha = createFrontendPlugin({
  pluginId: "catalog-graph",
  info: { packageJson: () => import('./package.json.esm.js') },
  routes: {
    catalogGraph: convertLegacyRouteRef(catalogGraphRouteRef)
  },
  externalRoutes: {
    catalogEntity: convertLegacyRouteRef(catalogEntityRouteRef)
  },
  extensions: [CatalogGraphPage, CatalogGraphEntityCard]
});

export { alpha as default };
//# sourceMappingURL=alpha.esm.js.map
