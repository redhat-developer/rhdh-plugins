import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import Box from '@material-ui/core/Box';
import Checkbox from '@material-ui/core/Checkbox';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import CheckBoxIcon from '@material-ui/icons/CheckBox';
import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Autocomplete from '@material-ui/lab/Autocomplete';
import { useEffect, useMemo, useCallback } from 'react';
import useAsync from 'react-use/esm/useAsync';
import { catalogGraphTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/frontend-plugin-api';

const useStyles = makeStyles(
  {
    formControl: {
      maxWidth: 300
    }
  },
  { name: "PluginCatalogGraphSelectedKindsFilter" }
);
const SelectedKindsFilter = ({ value, onChange }) => {
  const classes = useStyles();
  const alertApi = useApi(alertApiRef);
  const catalogApi = useApi(catalogApiRef);
  const { t } = useTranslationRef(catalogGraphTranslationRef);
  const { error, value: kinds } = useAsync(async () => {
    return await catalogApi.getEntityFacets({ facets: ["kind"] }).then((response) => response.facets.kind?.map((f) => f.value).sort() || []);
  });
  useEffect(() => {
    if (error) {
      alertApi.post({
        message: `Failed to load entity kinds`,
        severity: "error"
      });
    }
  }, [error, alertApi]);
  const normalizedKinds = useMemo(
    () => kinds ? kinds.map((k) => k.toLocaleLowerCase("en-US")) : kinds,
    [kinds]
  );
  const handleChange = useCallback(
    (_, v) => {
      onChange(
        normalizedKinds && normalizedKinds.every((r) => v.includes(r)) ? void 0 : v
      );
    },
    [normalizedKinds, onChange]
  );
  const handleEmpty = useCallback(() => {
    onChange(value?.length ? value : void 0);
  }, [value, onChange]);
  if (!kinds?.length || !normalizedKinds?.length || error) {
    return /* @__PURE__ */ jsx(Fragment, {});
  }
  return /* @__PURE__ */ jsxs(Box, { pb: 1, pt: 1, children: [
    /* @__PURE__ */ jsx(Typography, { variant: "button", children: t("catalogGraphPage.selectedKindsFilter.title") }),
    /* @__PURE__ */ jsx(
      Autocomplete,
      {
        className: classes.formControl,
        multiple: true,
        limitTags: 4,
        disableCloseOnSelect: true,
        "aria-label": t("catalogGraphPage.selectedKindsFilter.title"),
        options: normalizedKinds,
        value: value ?? normalizedKinds,
        getOptionLabel: (k) => kinds[normalizedKinds.indexOf(k)] ?? k,
        onChange: handleChange,
        onBlur: handleEmpty,
        renderOption: (option, { selected }) => /* @__PURE__ */ jsx(
          FormControlLabel,
          {
            control: /* @__PURE__ */ jsx(
              Checkbox,
              {
                icon: /* @__PURE__ */ jsx(CheckBoxOutlineBlankIcon, { fontSize: "small" }),
                checkedIcon: /* @__PURE__ */ jsx(CheckBoxIcon, { fontSize: "small" }),
                checked: selected
              }
            ),
            label: kinds[normalizedKinds.indexOf(option)] ?? option
          }
        ),
        size: "small",
        popupIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, { "data-testid": "selected-kinds-expand" }),
        renderInput: (params) => /* @__PURE__ */ jsx(TextField, { ...params, variant: "outlined" })
      }
    )
  ] });
};

export { SelectedKindsFilter };
//# sourceMappingURL=SelectedKindsFilter.esm.js.map
