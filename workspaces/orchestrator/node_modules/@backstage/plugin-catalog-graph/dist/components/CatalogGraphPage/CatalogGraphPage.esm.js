import { jsxs, jsx } from 'react/jsx-runtime';
import { parseEntityRef } from '@backstage/catalog-model';
import { Page, Header, Content, ContentHeader, SupportButton } from '@backstage/core-components';
import { useRouteRef, useAnalytics } from '@backstage/core-plugin-api';
import { entityRouteRef, humanizeEntityRef } from '@backstage/plugin-catalog-react';
import Grid from '@material-ui/core/Grid';
import Paper from '@material-ui/core/Paper';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import FilterListIcon from '@material-ui/icons/FilterList';
import ZoomOutMap from '@material-ui/icons/ZoomOutMap';
import ToggleButton from '@material-ui/lab/ToggleButton';
import { useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { EntityRelationsGraph } from '../EntityRelationsGraph/EntityRelationsGraph.esm.js';
import { ALL_RELATION_PAIRS } from '../EntityRelationsGraph/relations.esm.js';
import { CurveFilter } from './CurveFilter.esm.js';
import { DirectionFilter } from './DirectionFilter.esm.js';
import { MaxDepthFilter } from './MaxDepthFilter.esm.js';
import { SelectedKindsFilter } from './SelectedKindsFilter.esm.js';
import { SelectedRelationsFilter } from './SelectedRelationsFilter.esm.js';
import { SwitchFilter } from './SwitchFilter.esm.js';
import { useCatalogGraphPage } from './useCatalogGraphPage.esm.js';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { catalogGraphTranslationRef } from '../../translation.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    content: {
      minHeight: 0
    },
    container: {
      height: "100%",
      maxHeight: "100%",
      minHeight: 0
    },
    fullHeight: {
      maxHeight: "100%",
      display: "flex",
      minHeight: 0
    },
    graphWrapper: {
      position: "relative",
      flex: 1,
      minHeight: 0,
      display: "flex"
    },
    graph: {
      flex: 1,
      minHeight: 0
    },
    legend: {
      position: "absolute",
      bottom: 0,
      right: 0,
      padding: theme.spacing(1),
      "& .icon": {
        verticalAlign: "bottom"
      }
    },
    filters: {
      display: "grid",
      gridGap: theme.spacing(1),
      gridAutoRows: "auto",
      [theme.breakpoints.up("lg")]: {
        display: "block"
      },
      [theme.breakpoints.only("md")]: {
        gridTemplateColumns: "repeat(3, 1fr)"
      },
      [theme.breakpoints.only("sm")]: {
        gridTemplateColumns: "repeat(2, 1fr)"
      },
      [theme.breakpoints.down("xs")]: {
        gridTemplateColumns: "repeat(1, 1fr)"
      }
    }
  }),
  { name: "PluginCatalogGraphCatalogGraphPage" }
);
const CatalogGraphPage = (props) => {
  const {
    relationPairs = ALL_RELATION_PAIRS,
    initialState,
    entityFilter
  } = props;
  const { t } = useTranslationRef(catalogGraphTranslationRef);
  const navigate = useNavigate();
  const classes = useStyles();
  const catalogEntityRoute = useRouteRef(entityRouteRef);
  const {
    maxDepth,
    setMaxDepth,
    selectedKinds,
    setSelectedKinds,
    selectedRelations,
    setSelectedRelations,
    unidirectional,
    setUnidirectional,
    mergeRelations,
    setMergeRelations,
    direction,
    setDirection,
    curve,
    setCurve,
    rootEntityNames,
    setRootEntityNames,
    showFilters,
    toggleShowFilters
  } = useCatalogGraphPage({ initialState });
  const analytics = useAnalytics();
  const onNodeClick = useCallback(
    (node, event) => {
      const nodeEntityName = parseEntityRef(node.id);
      if (event.shiftKey) {
        const path = catalogEntityRoute({
          kind: nodeEntityName.kind.toLocaleLowerCase("en-US"),
          namespace: nodeEntityName.namespace.toLocaleLowerCase("en-US"),
          name: nodeEntityName.name
        });
        analytics.captureEvent(
          "click",
          node.entity.metadata.title ?? humanizeEntityRef(nodeEntityName),
          { attributes: { to: path } }
        );
        navigate(path);
      } else {
        analytics.captureEvent(
          "click",
          node.entity.metadata.title ?? humanizeEntityRef(nodeEntityName)
        );
        setRootEntityNames([nodeEntityName]);
      }
    },
    [catalogEntityRoute, navigate, setRootEntityNames, analytics]
  );
  return /* @__PURE__ */ jsxs(Page, { themeId: "home", children: [
    /* @__PURE__ */ jsx(
      Header,
      {
        title: t("catalogGraphPage.title"),
        subtitle: rootEntityNames.map((e) => humanizeEntityRef(e)).join(", ")
      }
    ),
    /* @__PURE__ */ jsxs(Content, { stretch: true, className: classes.content, children: [
      /* @__PURE__ */ jsx(
        ContentHeader,
        {
          titleComponent: /* @__PURE__ */ jsxs(
            ToggleButton,
            {
              value: "show filters",
              selected: showFilters,
              onChange: () => toggleShowFilters(),
              children: [
                /* @__PURE__ */ jsx(FilterListIcon, {}),
                " ",
                t("catalogGraphPage.filterToggleButtonTitle")
              ]
            }
          ),
          children: /* @__PURE__ */ jsx(SupportButton, { children: t("catalogGraphPage.supportButtonDescription") })
        }
      ),
      /* @__PURE__ */ jsxs(Grid, { container: true, alignItems: "stretch", className: classes.container, children: [
        showFilters && /* @__PURE__ */ jsxs(Grid, { item: true, xs: 12, lg: 2, className: classes.filters, children: [
          /* @__PURE__ */ jsx(MaxDepthFilter, { value: maxDepth, onChange: setMaxDepth }),
          /* @__PURE__ */ jsx(
            SelectedKindsFilter,
            {
              value: selectedKinds,
              onChange: setSelectedKinds
            }
          ),
          /* @__PURE__ */ jsx(
            SelectedRelationsFilter,
            {
              value: selectedRelations,
              onChange: setSelectedRelations,
              relationPairs
            }
          ),
          /* @__PURE__ */ jsx(DirectionFilter, { value: direction, onChange: setDirection }),
          /* @__PURE__ */ jsx(CurveFilter, { value: curve, onChange: setCurve }),
          /* @__PURE__ */ jsx(
            SwitchFilter,
            {
              value: unidirectional,
              onChange: setUnidirectional,
              label: t("catalogGraphPage.simplifiedSwitchLabel")
            }
          ),
          /* @__PURE__ */ jsx(
            SwitchFilter,
            {
              value: mergeRelations,
              onChange: setMergeRelations,
              label: t("catalogGraphPage.mergeRelationsSwitchLabel")
            }
          )
        ] }),
        /* @__PURE__ */ jsx(Grid, { item: true, xs: true, className: classes.fullHeight, children: /* @__PURE__ */ jsxs(Paper, { className: classes.graphWrapper, children: [
          /* @__PURE__ */ jsxs(
            Typography,
            {
              variant: "caption",
              color: "textSecondary",
              display: "block",
              className: classes.legend,
              children: [
                /* @__PURE__ */ jsx(ZoomOutMap, { className: "icon" }),
                " ",
                t("catalogGraphPage.zoomOutDescription")
              ]
            }
          ),
          /* @__PURE__ */ jsx(
            EntityRelationsGraph,
            {
              ...props,
              rootEntityNames,
              maxDepth,
              kinds: selectedKinds && selectedKinds.length > 0 ? selectedKinds : void 0,
              relations: selectedRelations && selectedRelations.length > 0 ? selectedRelations : void 0,
              mergeRelations,
              unidirectional,
              onNodeClick,
              direction,
              relationPairs,
              entityFilter,
              className: classes.graph,
              zoom: "enabled",
              curve
            }
          )
        ] }) })
      ] })
    ] })
  ] });
};

export { CatalogGraphPage };
//# sourceMappingURL=CatalogGraphPage.esm.js.map
