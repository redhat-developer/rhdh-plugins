{"version":3,"file":"useEntityRelationGraph.esm.js","sources":["../../../src/components/EntityRelationsGraph/useEntityRelationGraph.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport { useEffect, useMemo } from 'react';\nimport { useEntityStore } from './useEntityStore';\nimport { pickBy } from 'lodash';\n\n/**\n * Discover the graph of entities connected by relations, starting from a set of\n * root entities. Filters are used to select which relations to includes.\n * Returns all discovered entities once they are loaded.\n */\nexport function useEntityRelationGraph({\n  rootEntityRefs,\n  filter: {\n    maxDepth = Number.POSITIVE_INFINITY,\n    relations,\n    kinds,\n    entityFilter,\n  } = {},\n}: {\n  rootEntityRefs: string[];\n  filter?: {\n    maxDepth?: number;\n    relations?: string[];\n    kinds?: string[];\n    entityFilter?: (entity: Entity) => boolean;\n  };\n}): {\n  entities?: { [ref: string]: Entity };\n  loading: boolean;\n  error?: Error;\n} {\n  const { entities, loading, error, requestEntities } = useEntityStore();\n\n  useEffect(() => {\n    const expectedEntities = new Set([...rootEntityRefs]);\n    const processedEntityRefs = new Set<string>();\n\n    let nextDepthRefQueue = [...rootEntityRefs];\n    let depth = 0;\n\n    while (\n      nextDepthRefQueue.length > 0 &&\n      (!isFinite(maxDepth) || depth < maxDepth)\n    ) {\n      const entityRefQueue = nextDepthRefQueue;\n      nextDepthRefQueue = [];\n\n      while (entityRefQueue.length > 0) {\n        const entityRef = entityRefQueue.shift()!;\n        const entity = entities[entityRef];\n\n        processedEntityRefs.add(entityRef);\n\n        if (entity && entity.relations) {\n          // If the entity is filtered out then no need to check any\n          // of its outgoing relationships to other entities\n          if (entityFilter && !entityFilter(entity)) {\n            continue;\n          }\n          for (const rel of entity.relations) {\n            if (\n              (!relations || relations.includes(rel.type)) &&\n              (!kinds ||\n                kinds.some(kind =>\n                  rel.targetRef.startsWith(\n                    `${kind.toLocaleLowerCase('en-US')}:`,\n                  ),\n                ))\n            ) {\n              if (!processedEntityRefs.has(rel.targetRef)) {\n                nextDepthRefQueue.push(rel.targetRef);\n                expectedEntities.add(rel.targetRef);\n              }\n            }\n          }\n        }\n      }\n\n      ++depth;\n    }\n    requestEntities([...expectedEntities]);\n  }, [\n    entities,\n    rootEntityRefs,\n    maxDepth,\n    relations,\n    kinds,\n    entityFilter,\n    requestEntities,\n  ]);\n\n  const filteredEntities = useMemo(\n    () =>\n      entityFilter\n        ? pickBy(entities, (value, _key) => entityFilter(value))\n        : entities,\n    [entities, entityFilter],\n  );\n\n  return {\n    entities: filteredEntities,\n    loading,\n    error,\n  };\n}\n"],"names":[],"mappings":";;;;AAyBO,SAAS,sBAAA,CAAuB;AAAA,EACrC,cAAA;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,WAAW,MAAA,CAAO,iBAAA;AAAA,IAClB,SAAA;AAAA,IACA,KAAA;AAAA,IACA;AAAA,MACE;AACN,CAAA,EAYE;AACA,EAAA,MAAM,EAAE,QAAA,EAAU,OAAA,EAAS,KAAA,EAAO,eAAA,KAAoB,cAAA,EAAe;AAErE,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,MAAM,mCAAmB,IAAI,GAAA,CAAI,CAAC,GAAG,cAAc,CAAC,CAAA;AACpD,IAAA,MAAM,mBAAA,uBAA0B,GAAA,EAAY;AAE5C,IAAA,IAAI,iBAAA,GAAoB,CAAC,GAAG,cAAc,CAAA;AAC1C,IAAA,IAAI,KAAA,GAAQ,CAAA;AAEZ,IAAA,OACE,iBAAA,CAAkB,SAAS,CAAA,KAC1B,CAAC,SAAS,QAAQ,CAAA,IAAK,QAAQ,QAAA,CAAA,EAChC;AACA,MAAA,MAAM,cAAA,GAAiB,iBAAA;AACvB,MAAA,iBAAA,GAAoB,EAAC;AAErB,MAAA,OAAO,cAAA,CAAe,SAAS,CAAA,EAAG;AAChC,QAAA,MAAM,SAAA,GAAY,eAAe,KAAA,EAAM;AACvC,QAAA,MAAM,MAAA,GAAS,SAAS,SAAS,CAAA;AAEjC,QAAA,mBAAA,CAAoB,IAAI,SAAS,CAAA;AAEjC,QAAA,IAAI,MAAA,IAAU,OAAO,SAAA,EAAW;AAG9B,UAAA,IAAI,YAAA,IAAgB,CAAC,YAAA,CAAa,MAAM,CAAA,EAAG;AACzC,YAAA;AAAA,UACF;AACA,UAAA,KAAA,MAAW,GAAA,IAAO,OAAO,SAAA,EAAW;AAClC,YAAA,IAAA,CACG,CAAC,aAAa,SAAA,CAAU,QAAA,CAAS,IAAI,IAAI,CAAA,MACzC,CAAC,KAAA,IACA,KAAA,CAAM,IAAA;AAAA,cAAK,CAAA,IAAA,KACT,IAAI,SAAA,CAAU,UAAA;AAAA,gBACZ,CAAA,EAAG,IAAA,CAAK,iBAAA,CAAkB,OAAO,CAAC,CAAA,CAAA;AAAA;AACpC,aACF,CAAA,EACF;AACA,cAAA,IAAI,CAAC,mBAAA,CAAoB,GAAA,CAAI,GAAA,CAAI,SAAS,CAAA,EAAG;AAC3C,gBAAA,iBAAA,CAAkB,IAAA,CAAK,IAAI,SAAS,CAAA;AACpC,gBAAA,gBAAA,CAAiB,GAAA,CAAI,IAAI,SAAS,CAAA;AAAA,cACpC;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,MAAA,EAAE,KAAA;AAAA,IACJ;AACA,IAAA,eAAA,CAAgB,CAAC,GAAG,gBAAgB,CAAC,CAAA;AAAA,EACvC,CAAA,EAAG;AAAA,IACD,QAAA;AAAA,IACA,cAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,KAAA;AAAA,IACA,YAAA;AAAA,IACA;AAAA,GACD,CAAA;AAED,EAAA,MAAM,gBAAA,GAAmB,OAAA;AAAA,IACvB,MACE,YAAA,GACI,MAAA,CAAO,QAAA,EAAU,CAAC,OAAO,IAAA,KAAS,YAAA,CAAa,KAAK,CAAC,CAAA,GACrD,QAAA;AAAA,IACN,CAAC,UAAU,YAAY;AAAA,GACzB;AAEA,EAAA,OAAO;AAAA,IACL,QAAA,EAAU,gBAAA;AAAA,IACV,OAAA;AAAA,IACA;AAAA,GACF;AACF;;;;"}