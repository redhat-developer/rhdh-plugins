import { jsxs, jsx } from 'react/jsx-runtime';
import { useEntityPresentation } from '@backstage/plugin-catalog-react';
import { makeStyles } from '@material-ui/core/styles';
import classNames from 'classnames';
import { useState, useRef, useLayoutEffect } from 'react';
import { EntityIcon } from './EntityIcon.esm.js';
import { DEFAULT_NAMESPACE } from '@backstage/catalog-model';

const useStyles = makeStyles(
  (theme) => ({
    node: {
      fill: theme.palette.grey[300],
      stroke: theme.palette.grey[300],
      "&.primary": {
        fill: theme.palette.primary.light,
        stroke: theme.palette.primary.light
      },
      "&.secondary": {
        fill: theme.palette.secondary.light,
        stroke: theme.palette.secondary.light
      }
    },
    text: {
      fill: theme.palette.getContrastText(theme.palette.grey[300]),
      "&.primary": {
        fill: theme.palette.primary.contrastText
      },
      "&.secondary": {
        fill: theme.palette.secondary.contrastText
      },
      "&.focused": {
        fontWeight: "bold"
      }
    },
    clickable: {
      cursor: "pointer"
    }
  }),
  { name: "PluginCatalogGraphCustomNode" }
);
function DefaultRenderNode({
  node: { id, entity, color = "default", focused, onClick }
}) {
  const classes = useStyles();
  const [width, setWidth] = useState(0);
  const [height, setHeight] = useState(0);
  const idRef = useRef(null);
  const entityRefPresentationSnapshot = useEntityPresentation(entity, {
    defaultNamespace: DEFAULT_NAMESPACE
  });
  useLayoutEffect(() => {
    if (idRef.current) {
      let { height: renderedHeight, width: renderedWidth } = idRef.current.getBBox();
      renderedHeight = Math.round(renderedHeight);
      renderedWidth = Math.round(renderedWidth);
      if (renderedHeight !== height || renderedWidth !== width) {
        setWidth(renderedWidth);
        setHeight(renderedHeight);
      }
    }
  }, [width, height]);
  const hasKindIcon = !!entityRefPresentationSnapshot.Icon;
  const padding = 10;
  const iconSize = height;
  const paddedIconWidth = hasKindIcon ? iconSize + padding : 0;
  const paddedWidth = paddedIconWidth + width + padding * 2;
  const paddedHeight = height + padding * 2;
  const displayTitle = entityRefPresentationSnapshot.primaryTitle ?? id;
  return /* @__PURE__ */ jsxs("g", { onClick, className: classNames(onClick && classes.clickable), children: [
    /* @__PURE__ */ jsx(
      "rect",
      {
        className: classNames(
          classes.node,
          color === "primary" && "primary",
          color === "secondary" && "secondary"
        ),
        width: paddedWidth,
        height: paddedHeight,
        rx: 10
      }
    ),
    hasKindIcon && /* @__PURE__ */ jsx(
      EntityIcon,
      {
        icon: entityRefPresentationSnapshot.Icon,
        y: padding,
        x: padding,
        width: iconSize,
        height: iconSize,
        className: classNames(
          classes.text,
          focused && "focused",
          color === "primary" && "primary",
          color === "secondary" && "secondary"
        )
      }
    ),
    /* @__PURE__ */ jsx(
      "text",
      {
        ref: idRef,
        className: classNames(
          classes.text,
          focused && "focused",
          color === "primary" && "primary",
          color === "secondary" && "secondary"
        ),
        y: paddedHeight / 2,
        x: paddedIconWidth + (width + padding * 2) / 2,
        textAnchor: "middle",
        alignmentBaseline: "middle",
        children: displayTitle
      }
    ),
    /* @__PURE__ */ jsx("title", { children: entityRefPresentationSnapshot.entityRef })
  ] });
}

export { DefaultRenderNode };
//# sourceMappingURL=DefaultRenderNode.esm.js.map
