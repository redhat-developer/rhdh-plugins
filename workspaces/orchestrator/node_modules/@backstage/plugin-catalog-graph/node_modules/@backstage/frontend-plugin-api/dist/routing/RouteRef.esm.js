import { describeParentCallSite } from './describeParentCallSite.esm.js';

function toInternalRouteRef(resource) {
  const r = resource;
  if (r.$$type !== "@backstage/RouteRef") {
    throw new Error(`Invalid RouteRef, bad type '${r.$$type}'`);
  }
  return r;
}
class RouteRefImpl {
  constructor(params = [], creationSite, alias) {
    this.params = params;
    this.#params = params;
    this.#creationSite = creationSite;
    this.#alias = alias;
  }
  $$type = "@backstage/RouteRef";
  version = "v1";
  #id;
  #params;
  #creationSite;
  #alias;
  getParams() {
    return this.#params;
  }
  get alias() {
    return this.#alias;
  }
  getDescription() {
    if (this.#id) {
      return this.#id;
    }
    return `created at '${this.#creationSite}'`;
  }
  get #name() {
    return this.$$type.slice("@backstage/".length);
  }
  setId(id) {
    if (!id) {
      throw new Error(`${this.#name} id must be a non-empty string`);
    }
    if (this.#id && this.#id !== id) {
      throw new Error(
        `${this.#name} was referenced twice as both '${this.#id}' and '${id}'`
      );
    }
    this.#id = id;
  }
  toString() {
    return `${this.#name}{${this.getDescription()}}`;
  }
}
function createRouteRef(config) {
  return new RouteRefImpl(
    config?.params,
    describeParentCallSite(),
    config?.aliasFor
  );
}

export { RouteRefImpl, createRouteRef, toInternalRouteRef };
//# sourceMappingURL=RouteRef.esm.js.map
