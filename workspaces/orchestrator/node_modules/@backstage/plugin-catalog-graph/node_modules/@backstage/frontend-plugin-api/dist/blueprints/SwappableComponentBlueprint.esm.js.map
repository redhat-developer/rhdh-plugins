{"version":3,"file":"SwappableComponentBlueprint.esm.js","sources":["../../src/blueprints/SwappableComponentBlueprint.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SwappableComponentRef } from '../components';\nimport {\n  createExtensionBlueprint,\n  createExtensionBlueprintParams,\n  createExtensionDataRef,\n} from '../wiring';\n\nexport const componentDataRef = createExtensionDataRef<{\n  ref: SwappableComponentRef;\n  loader:\n    | (() => (props: {}) => JSX.Element | null)\n    | (() => Promise<(props: {}) => JSX.Element | null>);\n}>().with({ id: 'core.swappableComponent' });\n\n/**\n * Blueprint for creating swappable components from a SwappableComponentRef and a loader\n *\n * @public\n */\nexport const SwappableComponentBlueprint = createExtensionBlueprint({\n  kind: 'component',\n  attachTo: { id: 'api:app/swappable-components', input: 'components' },\n  output: [componentDataRef],\n  dataRefs: {\n    component: componentDataRef,\n  },\n  defineParams<Ref extends SwappableComponentRef<any>>(params: {\n    component: Ref extends SwappableComponentRef<\n      any,\n      infer IExternalComponentProps\n    >\n      ? { ref: Ref } & ((props: IExternalComponentProps) => JSX.Element | null)\n      : never;\n    loader: Ref extends SwappableComponentRef<infer IInnerComponentProps, any>\n      ?\n          | (() => (props: IInnerComponentProps) => JSX.Element | null)\n          | (() => Promise<(props: IInnerComponentProps) => JSX.Element | null>)\n      : never;\n  }) {\n    return createExtensionBlueprintParams(params);\n  },\n  factory: params => [\n    componentDataRef({\n      ref: params.component.ref,\n      loader: params.loader,\n    }),\n  ],\n});\n"],"names":[],"mappings":";;;;;;AAsBO,MAAM,mBAAmB,sBAAA,EAK7B,CAAE,KAAK,EAAE,EAAA,EAAI,2BAA2B;AAOpC,MAAM,8BAA8B,wBAAA,CAAyB;AAAA,EAClE,IAAA,EAAM,WAAA;AAAA,EACN,QAAA,EAAU,EAAE,EAAA,EAAI,8BAAA,EAAgC,OAAO,YAAA,EAAa;AAAA,EACpE,MAAA,EAAQ,CAAC,gBAAgB,CAAA;AAAA,EACzB,QAAA,EAAU;AAAA,IACR,SAAA,EAAW;AAAA,GACb;AAAA,EACA,aAAqD,MAAA,EAYlD;AACD,IAAA,OAAO,+BAA+B,MAAM,CAAA;AAAA,EAC9C,CAAA;AAAA,EACA,SAAS,CAAA,MAAA,KAAU;AAAA,IACjB,gBAAA,CAAiB;AAAA,MACf,GAAA,EAAK,OAAO,SAAA,CAAU,GAAA;AAAA,MACtB,QAAQ,MAAA,CAAO;AAAA,KAChB;AAAA;AAEL,CAAC;;;;"}