{"version":3,"file":"createExtensionInput.esm.js","sources":["../../src/wiring/createExtensionInput.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExtensionDataRef } from './createExtensionDataRef';\n\n/** @public */\nexport interface ExtensionInput<\n  UExtensionData extends ExtensionDataRef<unknown, string, { optional?: true }>,\n  TConfig extends { singleton: boolean; optional: boolean },\n> {\n  $$type: '@backstage/ExtensionInput';\n  extensionData: Array<UExtensionData>;\n  config: TConfig;\n  replaces?: Array<{ id: string; input: string }>;\n}\n\n/** @public */\nexport function createExtensionInput<\n  UExtensionData extends ExtensionDataRef<unknown, string, { optional?: true }>,\n  TConfig extends { singleton?: boolean; optional?: boolean },\n>(\n  extensionData: Array<UExtensionData>,\n  config?: TConfig & { replaces?: Array<{ id: string; input: string }> },\n): ExtensionInput<\n  UExtensionData,\n  {\n    singleton: TConfig['singleton'] extends true ? true : false;\n    optional: TConfig['optional'] extends true ? true : false;\n  }\n> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (Array.isArray(extensionData)) {\n      const seen = new Set();\n      const duplicates = [];\n      for (const dataRef of extensionData) {\n        if (seen.has(dataRef.id)) {\n          duplicates.push(dataRef.id);\n        } else {\n          seen.add(dataRef.id);\n        }\n      }\n      if (duplicates.length > 0) {\n        throw new Error(\n          `ExtensionInput may not have duplicate data refs: '${duplicates.join(\n            \"', '\",\n          )}'`,\n        );\n      }\n    }\n  }\n  return {\n    $$type: '@backstage/ExtensionInput',\n    extensionData,\n    config: {\n      singleton: Boolean(config?.singleton) as TConfig['singleton'] extends true\n        ? true\n        : false,\n      optional: Boolean(config?.optional) as TConfig['optional'] extends true\n        ? true\n        : false,\n    },\n    replaces: config?.replaces,\n  } as ExtensionInput<\n    UExtensionData,\n    {\n      singleton: TConfig['singleton'] extends true ? true : false;\n      optional: TConfig['optional'] extends true ? true : false;\n    }\n  >;\n}\n"],"names":[],"mappings":"AA8BO,SAAS,oBAAA,CAId,eACA,MAAA,EAOA;AACA,EAAA,IAAI,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,YAAA,EAAc;AACzC,IAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,aAAa,CAAA,EAAG;AAChC,MAAA,MAAM,IAAA,uBAAW,GAAA,EAAI;AACrB,MAAA,MAAM,aAAa,EAAC;AACpB,MAAA,KAAA,MAAW,WAAW,aAAA,EAAe;AACnC,QAAA,IAAI,IAAA,CAAK,GAAA,CAAI,OAAA,CAAQ,EAAE,CAAA,EAAG;AACxB,UAAA,UAAA,CAAW,IAAA,CAAK,QAAQ,EAAE,CAAA;AAAA,QAC5B,CAAA,MAAO;AACL,UAAA,IAAA,CAAK,GAAA,CAAI,QAAQ,EAAE,CAAA;AAAA,QACrB;AAAA,MACF;AACA,MAAA,IAAI,UAAA,CAAW,SAAS,CAAA,EAAG;AACzB,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,qDAAqD,UAAA,CAAW,IAAA;AAAA,YAC9D;AAAA,WACD,CAAA,CAAA;AAAA,SACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,EAAA,OAAO;AAAA,IACL,MAAA,EAAQ,2BAAA;AAAA,IACR,aAAA;AAAA,IACA,MAAA,EAAQ;AAAA,MACN,SAAA,EAAW,OAAA,CAAQ,MAAA,EAAQ,SAAS,CAAA;AAAA,MAGpC,QAAA,EAAU,OAAA,CAAQ,MAAA,EAAQ,QAAQ;AAAA,KAGpC;AAAA,IACA,UAAU,MAAA,EAAQ;AAAA,GACpB;AAOF;;;;"}