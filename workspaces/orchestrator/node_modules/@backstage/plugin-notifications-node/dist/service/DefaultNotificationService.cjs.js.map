{"version":3,"file":"DefaultNotificationService.cjs.js","sources":["../../src/service/DefaultNotificationService.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotificationService } from './NotificationService';\nimport { AuthService, DiscoveryService } from '@backstage/backend-plugin-api';\nimport { NotificationPayload } from '@backstage/plugin-notifications-common';\n\n/** @public */\nexport type NotificationServiceOptions = {\n  auth: AuthService;\n  discovery: DiscoveryService;\n};\n\n/** @public */\nexport type NotificationRecipients =\n  | {\n      type: 'entity';\n      /**\n       * Entity references to send the notifications to\n       */\n      entityRef: string | string[];\n      /**\n       * Optional entity reference(s) to filter out of the resolved recipients.\n       * Usually the currently logged-in user for preventing sending notification\n       * of user action to him/herself.\n       */\n      excludeEntityRef?: string | string[];\n    }\n  | { type: 'broadcast' };\n\n/** @public */\nexport type NotificationSendOptions = {\n  recipients: NotificationRecipients;\n  payload: NotificationPayload;\n};\n\n/** @public */\nexport class DefaultNotificationService implements NotificationService {\n  private constructor(\n    private readonly discovery: DiscoveryService,\n    private readonly auth: AuthService,\n  ) {}\n\n  static create(\n    options: NotificationServiceOptions,\n  ): DefaultNotificationService {\n    return new DefaultNotificationService(options.discovery, options.auth);\n  }\n\n  async send(notification: NotificationSendOptions): Promise<void> {\n    try {\n      const baseUrl = await this.discovery.getBaseUrl('notifications');\n      const { token } = await this.auth.getPluginRequestToken({\n        onBehalfOf: await this.auth.getOwnServiceCredentials(),\n        targetPluginId: 'notifications',\n      });\n\n      const response = await fetch(baseUrl, {\n        method: 'POST',\n        body: JSON.stringify(notification),\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Request failed with status ${response.status}`);\n      }\n    } catch (error) {\n      // TODO: Should not throw in optimal case, see BEP\n      throw new Error(`Failed to send notifications: ${error}`);\n    }\n  }\n}\n"],"names":[],"mappings":";;AAkDO,MAAM,0BAAA,CAA0D;AAAA,EAC7D,WAAA,CACW,WACA,IAAA,EACjB;AAFiB,IAAA,IAAA,CAAA,SAAA,GAAA,SAAA;AACA,IAAA,IAAA,CAAA,IAAA,GAAA,IAAA;AAAA,EAChB;AAAA,EAEH,OAAO,OACL,OAAA,EAC4B;AAC5B,IAAA,OAAO,IAAI,0BAAA,CAA2B,OAAA,CAAQ,SAAA,EAAW,QAAQ,IAAI,CAAA;AAAA,EACvE;AAAA,EAEA,MAAM,KAAK,YAAA,EAAsD;AAC/D,IAAA,IAAI;AACF,MAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,SAAA,CAAU,WAAW,eAAe,CAAA;AAC/D,MAAA,MAAM,EAAE,KAAA,EAAM,GAAI,MAAM,IAAA,CAAK,KAAK,qBAAA,CAAsB;AAAA,QACtD,UAAA,EAAY,MAAM,IAAA,CAAK,IAAA,CAAK,wBAAA,EAAyB;AAAA,QACrD,cAAA,EAAgB;AAAA,OACjB,CAAA;AAED,MAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,OAAA,EAAS;AAAA,QACpC,MAAA,EAAQ,MAAA;AAAA,QACR,IAAA,EAAM,IAAA,CAAK,SAAA,CAAU,YAAY,CAAA;AAAA,QACjC,OAAA,EAAS;AAAA,UACP,cAAA,EAAgB,kBAAA;AAAA,UAChB,MAAA,EAAQ,kBAAA;AAAA,UACR,aAAA,EAAe,UAAU,KAAK,CAAA;AAAA;AAChC,OACD,CAAA;AAED,MAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,QAAA,MAAM,IAAI,KAAA,CAAM,CAAA,2BAAA,EAA8B,QAAA,CAAS,MAAM,CAAA,CAAE,CAAA;AAAA,MACjE;AAAA,IACF,SAAS,KAAA,EAAO;AAEd,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,8BAAA,EAAiC,KAAK,CAAA,CAAE,CAAA;AAAA,IAC1D;AAAA,EACF;AACF;;;;"}