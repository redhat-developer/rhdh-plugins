{"version":3,"file":"SignalManager.cjs.js","sources":["../../src/service/SignalManager.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventParams, EventsService } from '@backstage/plugin-events-node';\nimport { SignalPayload } from '@backstage/plugin-signals-node';\nimport crypto from 'crypto';\nimport { RawData, WebSocket } from 'ws';\nimport { v4 as uuid } from 'uuid';\nimport { JsonObject } from '@backstage/types';\nimport {\n  BackstageUserInfo,\n  LifecycleService,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\n\n/**\n * @internal\n */\nexport type SignalConnection = {\n  id: string;\n  user: string;\n  ws: WebSocket;\n  ownershipEntityRefs: string[];\n  subscriptions: Set<string>;\n  isAlive: boolean;\n};\n\n/**\n * @internal\n */\nexport type SignalManagerOptions = {\n  events: EventsService;\n  config: Config;\n  logger: LoggerService;\n  lifecycle: LifecycleService;\n};\n\n/** @internal */\nexport class SignalManager {\n  private connections: Map<string, SignalConnection> = new Map<\n    string,\n    SignalConnection\n  >();\n  private events: EventsService;\n  private logger: LoggerService;\n  private pingInterval: ReturnType<typeof setInterval> | undefined;\n\n  static create(options: SignalManagerOptions) {\n    return new SignalManager(options);\n  }\n\n  private constructor(options: SignalManagerOptions) {\n    this.events = options.events;\n\n    // Use a unique subscriber ID for each signals instance, in order to fan-out\n    // all events to each signals instance. This ensures that events always\n    // reach users in a scaled deployment.\n    const id = `signals-${crypto.randomBytes(8).toString('hex')}`;\n    this.logger = options.logger.child({ subscriberId: id });\n    this.logger.info(`Signals manager is subscribing to signals events`);\n\n    this.events.subscribe({\n      id,\n      topics: ['signals'],\n      onEvent: (params: EventParams) =>\n        this.onEventBrokerEvent(params.eventPayload as SignalPayload),\n    });\n\n    options.lifecycle.addShutdownHook(() => this.onShutdown());\n  }\n\n  private ping() {\n    this.connections.forEach(conn => {\n      if (!conn.isAlive) {\n        this.logger.debug(`Connection ${conn.id} is not alive, terminating`);\n        conn.ws.terminate();\n        return;\n      }\n\n      conn.isAlive = false;\n      conn.ws.ping();\n    });\n  }\n\n  private onShutdown() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n    }\n\n    // TODO: Unsubscribe from events?\n\n    this.connections.forEach(conn => {\n      conn.ws.terminate();\n    });\n    this.connections.clear();\n  }\n\n  addConnection(ws: WebSocket, identity?: BackstageUserInfo) {\n    // Start pinging on first connection\n    if (!this.pingInterval) {\n      this.pingInterval = setInterval(() => this.ping(), 30000);\n    }\n\n    const id = uuid();\n    const conn = {\n      id,\n      user: identity?.userEntityRef ?? 'user:default/guest',\n      ws,\n      ownershipEntityRefs: identity?.ownershipEntityRefs ?? [\n        'user:default/guest',\n      ],\n      subscriptions: new Set<string>(),\n      isAlive: true,\n    };\n\n    this.connections.set(id, conn);\n\n    this.logger.debug(`Connection ${id} connected`);\n    ws.on('error', (err: Error) => {\n      this.logger.error(\n        `Error occurred with connection ${id}: ${err}, closing connection`,\n      );\n      ws.terminate();\n      this.connections.delete(id);\n    });\n\n    ws.on('close', (code: number, reason: Buffer) => {\n      this.logger.debug(\n        `Connection ${id} closed with code ${code}, reason: ${reason}`,\n      );\n      ws.terminate();\n      this.connections.delete(id);\n    });\n\n    ws.on('ping', () => {\n      conn.isAlive = true;\n      ws.pong();\n    });\n\n    ws.on('pong', () => {\n      conn.isAlive = true;\n    });\n\n    ws.on('message', (data: RawData, isBinary: boolean) => {\n      this.logger.debug(`Received message from connection ${id}: ${data}`);\n      if (isBinary) {\n        return;\n      }\n      try {\n        const json = JSON.parse(data.toString()) as JsonObject;\n        this.handleMessage(conn, json);\n      } catch (err: any) {\n        this.logger.error(\n          `Invalid message received from connection ${id}: ${err}`,\n        );\n      }\n    });\n  }\n\n  private handleMessage(connection: SignalConnection, message: JsonObject) {\n    if (message.action === 'subscribe' && message.channel) {\n      this.logger.debug(\n        `Connection ${connection.id} subscribed to ${message.channel}`,\n      );\n      connection.subscriptions.add(message.channel as string);\n    } else if (message.action === 'unsubscribe' && message.channel) {\n      this.logger.debug(\n        `Connection ${connection.id} unsubscribed from ${message.channel}`,\n      );\n      connection.subscriptions.delete(message.channel as string);\n    }\n  }\n\n  private async onEventBrokerEvent(eventPayload: SignalPayload): Promise<void> {\n    if (!eventPayload.channel || !eventPayload.message) {\n      return;\n    }\n\n    const { channel, recipients, message } = eventPayload;\n    const jsonMessage = JSON.stringify({ channel, message });\n    let users: string[] = [];\n    if (recipients.type === 'user') {\n      users = Array.isArray(recipients.entityRef)\n        ? recipients.entityRef\n        : [recipients.entityRef];\n    }\n\n    // Actual websocket message sending\n    this.connections.forEach(conn => {\n      if (!conn.subscriptions.has(channel)) {\n        return;\n      }\n\n      // Sending to all users can be done with broadcast\n      if (\n        recipients.type !== 'broadcast' &&\n        !conn.ownershipEntityRefs.some((ref: string) => users.includes(ref))\n      ) {\n        return;\n      }\n\n      if (conn.ws.readyState !== WebSocket.OPEN) {\n        return;\n      }\n\n      conn.ws.send(jsonMessage, err => {\n        if (err) {\n          this.logger.error(`Failed to send message to ${conn.id}: ${err}`);\n        }\n      });\n    });\n  }\n}\n"],"names":["crypto","uuid","WebSocket"],"mappings":"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"}