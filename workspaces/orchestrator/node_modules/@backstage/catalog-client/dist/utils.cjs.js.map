{"version":3,"file":"utils.cjs.js","sources":["../src/utils.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  QueryEntitiesCursorRequest,\n  QueryEntitiesInitialRequest,\n} from './types/api';\n\nexport function isQueryEntitiesInitialRequest(\n  request: QueryEntitiesInitialRequest,\n): request is QueryEntitiesInitialRequest {\n  return !(request as QueryEntitiesCursorRequest).cursor;\n}\n\n/**\n * Takes a set of entity refs, and splits them into chunks (groups) such that\n * the total string length in each chunk does not exceed the default Express.js\n * request body limit of 100 kB (with some margin) when JSON encoded as an\n * array.\n */\nexport function splitRefsIntoChunks(\n  refs: string[],\n  options?: {\n    // No chunk has more than this many refs, no matter what\n    maxCountPerChunk?: number;\n    // The total string length (taking the extraStringLengthPerRef into account)\n    // of each chunk never exceeds this many characters, no matter what\n    maxStringLengthPerChunk?: number;\n    // Add this many characters to the length of each ref when calculating\n    // (default is 3, since eacn array entry is surrounded by quotes and a\n    // comma)\n    extraStringLengthPerRef?: number;\n  },\n): string[][] {\n  if (!refs.length) {\n    return [];\n  }\n\n  const {\n    maxCountPerChunk = 1000,\n    maxStringLengthPerChunk = 90 * 2 ** 10,\n    extraStringLengthPerRef = 3,\n  } = options ?? {};\n\n  const chunks: string[][] = [];\n\n  let currentChunkStart = 0;\n  let currentChunkStringLength = 0;\n  let currentChunkSize = 0;\n\n  for (let i = 0; i < refs.length; ++i) {\n    const refLength = refs[i].length + extraStringLengthPerRef;\n\n    // always allow at least one element per chunk even in abnormal situations\n    if (currentChunkSize > 0) {\n      // emit chunk and start over if either the string length or the count\n      // limit would be reached\n      if (\n        currentChunkStringLength + refLength > maxStringLengthPerChunk ||\n        currentChunkSize + 1 > maxCountPerChunk\n      ) {\n        chunks.push(refs.slice(currentChunkStart, i));\n        currentChunkStart = i;\n        currentChunkStringLength = 0;\n        currentChunkSize = 0;\n      }\n    }\n\n    currentChunkStringLength += refLength;\n    currentChunkSize += 1;\n  }\n\n  // emit whatever is left as the last chunk\n  chunks.push(refs.slice(currentChunkStart, refs.length));\n\n  return chunks;\n}\n"],"names":[],"mappings":";;AAqBO,SAAS,8BACd,OAAA,EACwC;AACxC,EAAA,OAAO,CAAE,OAAA,CAAuC,MAAA;AAClD;AAQO,SAAS,mBAAA,CACd,MACA,OAAA,EAWY;AACZ,EAAA,IAAI,CAAC,KAAK,MAAA,EAAQ;AAChB,IAAA,OAAO,EAAC;AAAA,EACV;AAEA,EAAA,MAAM;AAAA,IACJ,gBAAA,GAAmB,GAAA;AAAA,IACnB,uBAAA,GAA0B,KAAK,CAAA,IAAK,EAAA;AAAA,IACpC,uBAAA,GAA0B;AAAA,GAC5B,GAAe,EAAC;AAEhB,EAAA,MAAM,SAAqB,EAAC;AAE5B,EAAA,IAAI,iBAAA,GAAoB,CAAA;AACxB,EAAA,IAAI,wBAAA,GAA2B,CAAA;AAC/B,EAAA,IAAI,gBAAA,GAAmB,CAAA;AAEvB,EAAA,KAAA,IAAS,IAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,MAAA,EAAQ,EAAE,CAAA,EAAG;AACpC,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,CAAC,CAAA,CAAE,MAAA,GAAS,uBAAA;AAGnC,IAAA,IAAI,mBAAmB,CAAA,EAAG;AAGxB,MAAA,IACE,wBAAA,GAA2B,SAAA,GAAY,uBAAA,IACvC,gBAAA,GAAmB,IAAI,gBAAA,EACvB;AACA,QAAA,MAAA,CAAO,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,iBAAA,EAAmB,CAAC,CAAC,CAAA;AAC5C,QAAA,iBAAA,GAAoB,CAAA;AACpB,QAAA,wBAAA,GAA2B,CAAA;AAC3B,QAAA,gBAAA,GAAmB,CAAA;AAAA,MACrB;AAAA,IACF;AAEA,IAAA,wBAAA,IAA4B,SAAA;AAC5B,IAAA,gBAAA,IAAoB,CAAA;AAAA,EACtB;AAGA,EAAA,MAAA,CAAO,KAAK,IAAA,CAAK,KAAA,CAAM,iBAAA,EAAmB,IAAA,CAAK,MAAM,CAAC,CAAA;AAEtD,EAAA,OAAO,MAAA;AACT;;;;;"}