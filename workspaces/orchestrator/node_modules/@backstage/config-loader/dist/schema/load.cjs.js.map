{"version":3,"file":"load.cjs.js","sources":["../../src/schema/load.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { compileConfigSchemas } from './compile';\nimport { collectConfigSchemas } from './collect';\nimport { filterByVisibility, filterErrorsByVisibility } from './filtering';\nimport {\n  ValidationError,\n  ConfigSchema,\n  ConfigSchemaPackageEntry,\n  CONFIG_VISIBILITIES,\n} from './types';\nimport { normalizeAjvPath } from './utils';\n\n/**\n * Options that control the loading of configuration schema files in the backend.\n *\n * @public\n */\nexport type LoadConfigSchemaOptions =\n  | (\n      | {\n          dependencies: string[];\n          packagePaths?: string[];\n        }\n      | {\n          serialized: JsonObject;\n        }\n    ) & {\n      noUndeclaredProperties?: boolean;\n    };\n\nfunction errorsToError(errors: ValidationError[]): Error {\n  const messages = errors.map(({ instancePath, message, params }) => {\n    const paramStr = Object.entries(params)\n      .map(([name, value]) => `${name}=${value}`)\n      .join(' ');\n    return `Config ${message || ''} { ${paramStr} } at ${normalizeAjvPath(\n      instancePath,\n    )}`;\n  });\n  const error = new Error(`Config validation failed, ${messages.join('; ')}`);\n  (error as any).messages = messages;\n  return error;\n}\n\n/**\n * Loads config schema for a Backstage instance.\n *\n * @public\n */\nexport async function loadConfigSchema(\n  options: LoadConfigSchemaOptions,\n): Promise<ConfigSchema> {\n  let schemas: ConfigSchemaPackageEntry[];\n\n  if ('dependencies' in options) {\n    schemas = await collectConfigSchemas(\n      options.dependencies,\n      options.packagePaths ?? [],\n    );\n  } else {\n    const { serialized } = options;\n    if (serialized?.backstageConfigSchemaVersion !== 1) {\n      throw new Error(\n        'Serialized configuration schema is invalid or has an invalid version number',\n      );\n    }\n    schemas = serialized.schemas as ConfigSchemaPackageEntry[];\n  }\n\n  const validate = compileConfigSchemas(schemas, {\n    noUndeclaredProperties: options.noUndeclaredProperties,\n  });\n\n  return {\n    process(\n      configs: AppConfig[],\n      {\n        visibility,\n        valueTransform,\n        withFilteredKeys,\n        withDeprecatedKeys,\n        ignoreSchemaErrors,\n      } = {},\n    ): AppConfig[] {\n      const result = validate(configs);\n\n      if (!ignoreSchemaErrors) {\n        const visibleErrors = filterErrorsByVisibility(\n          result.errors,\n          visibility,\n          result.visibilityByDataPath,\n          result.visibilityBySchemaPath,\n        );\n        if (visibleErrors.length > 0) {\n          throw errorsToError(visibleErrors);\n        }\n      }\n\n      let processedConfigs = configs;\n\n      if (visibility) {\n        processedConfigs = processedConfigs.map(({ data, context }) => ({\n          context,\n          ...filterByVisibility(\n            data,\n            visibility,\n            result.visibilityByDataPath,\n            result.deepVisibilityByDataPath,\n            result.deprecationByDataPath,\n            valueTransform,\n            withFilteredKeys,\n            withDeprecatedKeys,\n          ),\n        }));\n      } else if (valueTransform) {\n        processedConfigs = processedConfigs.map(({ data, context }) => ({\n          context,\n          ...filterByVisibility(\n            data,\n            Array.from(CONFIG_VISIBILITIES),\n            result.visibilityByDataPath,\n            result.deepVisibilityByDataPath,\n            result.deprecationByDataPath,\n            valueTransform,\n            withFilteredKeys,\n            withDeprecatedKeys,\n          ),\n        }));\n      }\n\n      return processedConfigs;\n    },\n    serialize(): JsonObject {\n      return {\n        schemas,\n        backstageConfigSchemaVersion: 1,\n      };\n    },\n  };\n}\n"],"names":["normalizeAjvPath","collectConfigSchemas","compileConfigSchemas","filterErrorsByVisibility","filterByVisibility","CONFIG_VISIBILITIES"],"mappings":"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"}