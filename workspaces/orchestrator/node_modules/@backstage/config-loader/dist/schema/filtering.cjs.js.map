{"version":3,"file":"filtering.cjs.js","sources":["../../src/schema/filtering.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport {\n  ConfigVisibility,\n  DEFAULT_CONFIG_VISIBILITY,\n  TransformFunc,\n  ValidationError,\n} from './types';\nimport { normalizeAjvPath } from './utils';\n\n/**\n * This filters data by visibility by discovering the visibility of each\n * value, and then only keeping the ones that are specified in `includeVisibilities`.\n */\nexport function filterByVisibility(\n  data: JsonObject,\n  includeVisibilities: ConfigVisibility[],\n  visibilityByDataPath: Map<string, ConfigVisibility>,\n  deepVisibilityByDataPath: Map<string, ConfigVisibility>,\n  deprecationByDataPath: Map<string, string>,\n  transformFunc?: TransformFunc<number | string | boolean>,\n  withFilteredKeys?: boolean,\n  withDeprecatedKeys?: boolean,\n): {\n  data: JsonObject;\n  filteredKeys?: string[];\n  deprecatedKeys?: { key: string; description: string }[];\n} {\n  const filteredKeys = new Array<string>();\n  const deprecatedKeys = new Array<{ key: string; description: string }>();\n\n  function transform(\n    jsonVal: JsonValue,\n    visibilityPath: string, // Matches the format we get from ajv\n    filterPath: string, // Matches the format of the ConfigReader\n    inheritedVisibility: ConfigVisibility,\n  ): JsonValue | undefined {\n    const visibility =\n      visibilityByDataPath.get(visibilityPath) ?? inheritedVisibility;\n    const isVisible = includeVisibilities.includes(visibility);\n\n    // If a deep visibility is set for our current path, then we that as our\n    // default visibility for all children until we encounter a different deep visibility\n    const newInheritedVisibility =\n      deepVisibilityByDataPath.get(visibilityPath) ?? inheritedVisibility;\n\n    // deprecated keys are added regardless of visibility indicator\n    const deprecation = deprecationByDataPath.get(visibilityPath);\n    if (deprecation) {\n      deprecatedKeys.push({ key: filterPath, description: deprecation });\n    }\n\n    if (typeof jsonVal !== 'object') {\n      if (isVisible) {\n        if (transformFunc) {\n          return transformFunc(jsonVal, { visibility, path: filterPath });\n        }\n        return jsonVal;\n      }\n      if (withFilteredKeys) {\n        filteredKeys.push(filterPath);\n      }\n      return undefined;\n    } else if (jsonVal === null) {\n      return undefined;\n    } else if (Array.isArray(jsonVal)) {\n      const arr = new Array<JsonValue>();\n\n      for (const [index, value] of jsonVal.entries()) {\n        let path = visibilityPath;\n        const hasVisibilityInIndex = visibilityByDataPath.get(\n          `${visibilityPath}/${index}`,\n        );\n\n        if (hasVisibilityInIndex || typeof value === 'object') {\n          path = `${visibilityPath}/${index}`;\n        }\n\n        const out = transform(\n          value,\n          path,\n          `${filterPath}[${index}]`,\n          newInheritedVisibility,\n        );\n\n        if (out !== undefined) {\n          arr.push(out);\n        }\n      }\n\n      if (arr.length > 0 || isVisible) {\n        return arr;\n      }\n      return undefined;\n    }\n\n    const outObj: JsonObject = {};\n    let hasOutput = false;\n\n    for (const [key, value] of Object.entries(jsonVal)) {\n      if (value === undefined) {\n        continue;\n      }\n      const out = transform(\n        value,\n        `${visibilityPath}/${key}`,\n        filterPath ? `${filterPath}.${key}` : key,\n        newInheritedVisibility,\n      );\n      if (out !== undefined) {\n        outObj[key] = out;\n        hasOutput = true;\n      }\n    }\n\n    if (hasOutput || isVisible) {\n      return outObj;\n    }\n    return undefined;\n  }\n\n  return {\n    filteredKeys: withFilteredKeys ? filteredKeys : undefined,\n    deprecatedKeys: withDeprecatedKeys ? deprecatedKeys : undefined,\n    data:\n      (transform(data, '', '', DEFAULT_CONFIG_VISIBILITY) as JsonObject) ?? {},\n  };\n}\n\nexport function filterErrorsByVisibility(\n  errors: ValidationError[] | undefined,\n  includeVisibilities: ConfigVisibility[] | undefined,\n  visibilityByDataPath: Map<string, ConfigVisibility>,\n  visibilityBySchemaPath: Map<string, ConfigVisibility>,\n): ValidationError[] {\n  if (!errors) {\n    return [];\n  }\n  if (!includeVisibilities) {\n    return errors;\n  }\n\n  const visibleSchemaPaths = Array.from(visibilityBySchemaPath)\n    .filter(([, v]) => includeVisibilities.includes(v))\n    .map(([k]) => k);\n\n  // If we're filtering by visibility we only care about the errors that happened\n  // in a visible path.\n  return errors.filter(error => {\n    // We always include structural errors as we don't know whether there are\n    // any visible paths within the structures.\n    if (\n      error.keyword === 'type' &&\n      ['object', 'array'].includes(error.params.type)\n    ) {\n      return true;\n    }\n\n    // For fields that were required we use the schema path to determine whether\n    // it was visible in addition to the data path. This is because the data path\n    // visibilities are only populated for values that we reached, which we won't\n    // if the value is missing.\n    // We don't use this method for all the errors as the data path is more robust\n    // and doesn't require us to properly trim the schema path.\n    if (error.keyword === 'required') {\n      const trimmedPath = normalizeAjvPath(error.schemaPath).slice(\n        1,\n        -'/required'.length,\n      );\n      const fullPath = `${trimmedPath}/properties/${error.params.missingProperty}`;\n      if (\n        visibleSchemaPaths.some(visiblePath => visiblePath.startsWith(fullPath))\n      ) {\n        return true;\n      }\n    }\n\n    const vis =\n      visibilityByDataPath.get(normalizeAjvPath(error.instancePath)) ??\n      DEFAULT_CONFIG_VISIBILITY;\n    return vis && includeVisibilities.includes(vis);\n  });\n}\n"],"names":["DEFAULT_CONFIG_VISIBILITY","normalizeAjvPath"],"mappings":"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"}