{"version":3,"file":"loader.cjs.js","sources":["../src/loader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { ConfigSources } from './sources';\n\n/**\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type ConfigTarget = { path: string } | { url: string };\n\n/**\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type LoadConfigOptionsWatch = {\n  /**\n   * A listener that is called when a config file is changed.\n   */\n  onChange: (configs: AppConfig[]) => void;\n\n  /**\n   * An optional signal that stops the watcher once the promise resolves.\n   */\n  stopSignal?: Promise<void>;\n};\n\n/**\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type LoadConfigOptionsRemote = {\n  /**\n   * A remote config reloading period, in seconds\n   */\n  reloadIntervalSeconds: number;\n};\n\n/**\n * Options that control the loading of configuration files in the backend.\n *\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type LoadConfigOptions = {\n  // The root directory of the config loading context. Used to find default configs.\n  configRoot: string;\n\n  // Paths to load config files from. Configs from earlier paths have lower priority.\n  configTargets: ConfigTarget[];\n\n  /**\n   * Custom environment variable loading function\n   *\n   * @experimental This API is not stable and may change at any point\n   */\n  experimentalEnvFunc?: (name: string) => Promise<string | undefined>;\n\n  /**\n   * An optional remote config\n   */\n  remote?: LoadConfigOptionsRemote;\n\n  /**\n   * An optional configuration that enables watching of config files.\n   */\n  watch?: LoadConfigOptionsWatch;\n};\n\n/**\n * Results of loading configuration files.\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type LoadConfigResult = {\n  /**\n   * Array of all loaded configs.\n   */\n  appConfigs: AppConfig[];\n};\n\n/**\n * Load configuration data.\n *\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport async function loadConfig(\n  options: LoadConfigOptions,\n): Promise<LoadConfigResult> {\n  const source = ConfigSources.default({\n    substitutionFunc: options.experimentalEnvFunc,\n    remote: options.remote && {\n      reloadInterval: { seconds: options.remote.reloadIntervalSeconds },\n    },\n    watch: Boolean(options.watch),\n    rootDir: options.configRoot,\n    argv: options.configTargets.flatMap(t => [\n      '--config',\n      'url' in t ? t.url : t.path,\n    ]),\n  });\n\n  return new Promise<LoadConfigResult>((resolve, reject) => {\n    async function loadConfigReaderLoop() {\n      let loaded = false;\n\n      try {\n        const abortController = new AbortController();\n        options.watch?.stopSignal?.then(() => abortController.abort());\n\n        for await (const { configs } of source.readConfigData({\n          signal: abortController.signal,\n        })) {\n          if (loaded) {\n            options.watch?.onChange(configs);\n          } else {\n            resolve({ appConfigs: configs });\n            loaded = true;\n\n            if (options.watch) {\n              options.watch.stopSignal?.then(() => abortController.abort());\n            } else {\n              abortController.abort();\n            }\n          }\n        }\n      } catch (error) {\n        if (loaded) {\n          console.error(`Failed to reload configuration, ${error}`);\n        } else {\n          reject(error);\n        }\n      }\n    }\n    loadConfigReaderLoop();\n  });\n}\n"],"names":["ConfigSources"],"mappings":";;;;;;;;;;;AAqGA,eAAsB,WACpB,OAAA,EAC2B;AAC3B,EAAA,MAAM,MAAA,GAASA,4BAAc,OAAA,CAAQ;AAAA,IACnC,kBAAkB,OAAA,CAAQ,mBAAA;AAAA,IAC1B,MAAA,EAAQ,QAAQ,MAAA,IAAU;AAAA,MACxB,cAAA,EAAgB,EAAE,OAAA,EAAS,OAAA,CAAQ,OAAO,qBAAA;AAAsB,KAClE;AAAA,IACA,KAAA,EAAO,OAAA,CAAQ,OAAA,CAAQ,KAAK,CAAA;AAAA,IAC5B,SAAS,OAAA,CAAQ,UAAA;AAAA,IACjB,IAAA,EAAM,OAAA,CAAQ,aAAA,CAAc,OAAA,CAAQ,CAAA,CAAA,KAAK;AAAA,MACvC,UAAA;AAAA,MACA,KAAA,IAAS,CAAA,GAAI,CAAA,CAAE,GAAA,GAAM,CAAA,CAAE;AAAA,KACxB;AAAA,GACF,CAAA;AAED,EAAA,OAAO,IAAI,OAAA,CAA0B,CAAC,OAAA,EAAS,MAAA,KAAW;AACxD,IAAA,eAAe,oBAAA,GAAuB;AACpC,MAAA,IAAI,MAAA,GAAS,KAAA;AAEb,MAAA,IAAI;AACF,QAAA,MAAM,eAAA,GAAkB,IAAI,eAAA,EAAgB;AAC5C,QAAA,OAAA,CAAQ,OAAO,UAAA,EAAY,IAAA,CAAK,MAAM,eAAA,CAAgB,OAAO,CAAA;AAE7D,QAAA,WAAA,MAAiB,EAAE,OAAA,EAAQ,IAAK,MAAA,CAAO,cAAA,CAAe;AAAA,UACpD,QAAQ,eAAA,CAAgB;AAAA,SACzB,CAAA,EAAG;AACF,UAAA,IAAI,MAAA,EAAQ;AACV,YAAA,OAAA,CAAQ,KAAA,EAAO,SAAS,OAAO,CAAA;AAAA,UACjC,CAAA,MAAO;AACL,YAAA,OAAA,CAAQ,EAAE,UAAA,EAAY,OAAA,EAAS,CAAA;AAC/B,YAAA,MAAA,GAAS,IAAA;AAET,YAAA,IAAI,QAAQ,KAAA,EAAO;AACjB,cAAA,OAAA,CAAQ,MAAM,UAAA,EAAY,IAAA,CAAK,MAAM,eAAA,CAAgB,OAAO,CAAA;AAAA,YAC9D,CAAA,MAAO;AACL,cAAA,eAAA,CAAgB,KAAA,EAAM;AAAA,YACxB;AAAA,UACF;AAAA,QACF;AAAA,MACF,SAAS,KAAA,EAAO;AACd,QAAA,IAAI,MAAA,EAAQ;AACV,UAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,gCAAA,EAAmC,KAAK,CAAA,CAAE,CAAA;AAAA,QAC1D,CAAA,MAAO;AACL,UAAA,MAAA,CAAO,KAAK,CAAA;AAAA,QACd;AAAA,MACF;AAAA,IACF;AACA,IAAA,oBAAA,EAAqB;AAAA,EACvB,CAAC,CAAA;AACH;;;;"}