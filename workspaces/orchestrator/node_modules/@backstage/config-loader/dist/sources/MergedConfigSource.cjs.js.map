{"version":3,"file":"MergedConfigSource.cjs.js","sources":["../../src/sources/MergedConfigSource.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AsyncConfigSourceGenerator,\n  ConfigSource,\n  ConfigSourceData,\n  ReadConfigDataOptions,\n} from './types';\n\nconst sourcesSymbol = Symbol.for(\n  '@backstage/config-loader#MergedConfigSource.sources',\n);\n\n/** @internal */\nexport class MergedConfigSource implements ConfigSource {\n  // An optimization to flatten nested merged sources to avid unnecessary microtasks\n  static #flattenSources(sources: ConfigSource[]): ConfigSource[] {\n    return sources.flatMap(source => {\n      if (\n        sourcesSymbol in source &&\n        Array.isArray((source as any)[sourcesSymbol])\n      ) {\n        return this.#flattenSources(\n          (source as any)[sourcesSymbol] as ConfigSource[],\n        );\n      }\n      return source;\n    });\n  }\n\n  static from(sources: ConfigSource[]): ConfigSource {\n    return new MergedConfigSource(this.#flattenSources(sources));\n  }\n\n  [sourcesSymbol]: ConfigSource[];\n\n  private constructor(private readonly sources: ConfigSource[]) {\n    this[sourcesSymbol] = this.sources;\n  }\n\n  async *readConfigData(\n    options?: ReadConfigDataOptions,\n  ): AsyncConfigSourceGenerator {\n    const its = this.sources.map(source => source.readConfigData(options));\n    const initialResults = await Promise.all(its.map(it => it.next()));\n    const configs = initialResults.map((result, i) => {\n      if (result.done) {\n        throw new Error(\n          `Config source ${String(this.sources[i])} returned no data`,\n        );\n      }\n      return result.value.configs;\n    });\n\n    yield { configs: configs.flat(1) };\n\n    const results: Array<\n      | Promise<\n          readonly [\n            number,\n            IteratorResult<{ configs: ConfigSourceData[] }, void>,\n          ]\n        >\n      | undefined\n    > = its.map((it, i) => nextWithIndex(it, i));\n\n    while (results.some(Boolean)) {\n      try {\n        const [i, result] = (await Promise.race(results.filter(Boolean)))!;\n        if (result.done) {\n          results[i] = undefined;\n        } else {\n          results[i] = nextWithIndex(its[i], i);\n          configs[i] = result.value.configs;\n          yield { configs: configs.flat(1) };\n        }\n      } catch (error) {\n        const source = this.sources[error.index];\n        if (source) {\n          throw new Error(`Config source ${String(source)} failed: ${error}`);\n        }\n        throw error;\n      }\n    }\n  }\n\n  toString() {\n    return `MergedConfigSource{${this.sources.map(String).join(', ')}}`;\n  }\n}\n\n// Helper to wait for the next value of the iterator, while decorating the value\n// or error with the index of the iterator.\nfunction nextWithIndex<T>(\n  iterator: AsyncIterator<T, void, void>,\n  index: number,\n): Promise<readonly [index: number, result: IteratorResult<T, void>]> {\n  return iterator.next().then(\n    r => [index, r] as const,\n    e => {\n      throw Object.assign(e, { index });\n    },\n  );\n}\n"],"names":[],"mappings":";;AAuBA,MAAM,gBAAgB,MAAA,CAAO,GAAA;AAAA,EAC3B;AACF,CAAA;AAGO,MAAM,kBAAA,CAA2C;AAAA,EAsB9C,YAA6B,OAAA,EAAyB;AAAzB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AACnC,IAAA,IAAA,CAAK,aAAa,IAAI,IAAA,CAAK,OAAA;AAAA,EAC7B;AAAA;AAAA,EAtBA,OAAO,gBAAgB,OAAA,EAAyC;AAC9D,IAAA,OAAO,OAAA,CAAQ,QAAQ,CAAA,MAAA,KAAU;AAC/B,MAAA,IACE,iBAAiB,MAAA,IACjB,KAAA,CAAM,QAAS,MAAA,CAAe,aAAa,CAAC,CAAA,EAC5C;AACA,QAAA,OAAO,IAAA,CAAK,eAAA;AAAA,UACT,OAAe,aAAa;AAAA,SAC/B;AAAA,MACF;AACA,MAAA,OAAO,MAAA;AAAA,IACT,CAAC,CAAA;AAAA,EACH;AAAA,EAEA,OAAO,KAAK,OAAA,EAAuC;AACjD,IAAA,OAAO,IAAI,kBAAA,CAAmB,IAAA,CAAK,eAAA,CAAgB,OAAO,CAAC,CAAA;AAAA,EAC7D;AAAA,EAEA,CAAC,aAAa;AAAA,EAMd,OAAO,eACL,OAAA,EAC4B;AAC5B,IAAA,MAAM,GAAA,GAAM,KAAK,OAAA,CAAQ,GAAA,CAAI,YAAU,MAAA,CAAO,cAAA,CAAe,OAAO,CAAC,CAAA;AACrE,IAAA,MAAM,cAAA,GAAiB,MAAM,OAAA,CAAQ,GAAA,CAAI,GAAA,CAAI,IAAI,CAAA,EAAA,KAAM,EAAA,CAAG,IAAA,EAAM,CAAC,CAAA;AACjE,IAAA,MAAM,OAAA,GAAU,cAAA,CAAe,GAAA,CAAI,CAAC,QAAQ,CAAA,KAAM;AAChD,MAAA,IAAI,OAAO,IAAA,EAAM;AACf,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,iBAAiB,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAC,CAAC,CAAA,iBAAA;AAAA,SAC1C;AAAA,MACF;AACA,MAAA,OAAO,OAAO,KAAA,CAAM,OAAA;AAAA,IACtB,CAAC,CAAA;AAED,IAAA,MAAM,EAAE,OAAA,EAAS,OAAA,CAAQ,IAAA,CAAK,CAAC,CAAA,EAAE;AAEjC,IAAA,MAAM,OAAA,GAQF,IAAI,GAAA,CAAI,CAAC,IAAI,CAAA,KAAM,aAAA,CAAc,EAAA,EAAI,CAAC,CAAC,CAAA;AAE3C,IAAA,OAAO,OAAA,CAAQ,IAAA,CAAK,OAAO,CAAA,EAAG;AAC5B,MAAA,IAAI;AACF,QAAA,MAAM,CAAC,CAAA,EAAG,MAAM,CAAA,GAAK,MAAM,QAAQ,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,OAAO,CAAC,CAAA;AAC/D,QAAA,IAAI,OAAO,IAAA,EAAM;AACf,UAAA,OAAA,CAAQ,CAAC,CAAA,GAAI,KAAA,CAAA;AAAA,QACf,CAAA,MAAO;AACL,UAAA,OAAA,CAAQ,CAAC,CAAA,GAAI,aAAA,CAAc,GAAA,CAAI,CAAC,GAAG,CAAC,CAAA;AACpC,UAAA,OAAA,CAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,KAAA,CAAM,OAAA;AAC1B,UAAA,MAAM,EAAE,OAAA,EAAS,OAAA,CAAQ,IAAA,CAAK,CAAC,CAAA,EAAE;AAAA,QACnC;AAAA,MACF,SAAS,KAAA,EAAO;AACd,QAAA,MAAM,MAAA,GAAS,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,KAAK,CAAA;AACvC,QAAA,IAAI,MAAA,EAAQ;AACV,UAAA,MAAM,IAAI,MAAM,CAAA,cAAA,EAAiB,MAAA,CAAO,MAAM,CAAC,CAAA,SAAA,EAAY,KAAK,CAAA,CAAE,CAAA;AAAA,QACpE;AACA,QAAA,MAAM,KAAA;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EAEA,QAAA,GAAW;AACT,IAAA,OAAO,CAAA,mBAAA,EAAsB,KAAK,OAAA,CAAQ,GAAA,CAAI,MAAM,CAAA,CAAE,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA,CAAA;AAAA,EAClE;AACF;AAIA,SAAS,aAAA,CACP,UACA,KAAA,EACoE;AACpE,EAAA,OAAO,QAAA,CAAS,MAAK,CAAE,IAAA;AAAA,IACrB,CAAA,CAAA,KAAK,CAAC,KAAA,EAAO,CAAC,CAAA;AAAA,IACd,CAAA,CAAA,KAAK;AACH,MAAA,MAAM,MAAA,CAAO,MAAA,CAAO,CAAA,EAAG,EAAE,OAAO,CAAA;AAAA,IAClC;AAAA,GACF;AACF;;;;"}