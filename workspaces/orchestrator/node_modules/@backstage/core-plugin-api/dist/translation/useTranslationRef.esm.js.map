{"version":3,"file":"useTranslationRef.esm.js","sources":["../../src/translation/useTranslationRef.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { errorApiRef, useApi } from '../apis';\nimport {\n  translationApiRef,\n  TranslationFunction,\n  TranslationSnapshot,\n} from '../apis/alpha';\nimport { TranslationRef } from './TranslationRef';\n\n// Make sure we don't fill the logs with loading errors for the same ref\nconst loggedRefs = new WeakSet<TranslationRef<string, {}>>();\n\n/** @alpha */\nexport const useTranslationRef = <\n  TMessages extends { [key in string]: string },\n>(\n  translationRef: TranslationRef<string, TMessages>,\n): { t: TranslationFunction<TMessages> } => {\n  const errorApi = useApi(errorApiRef);\n  const translationApi = useApi(translationApiRef);\n\n  const [snapshot, setSnapshot] = useState<TranslationSnapshot<TMessages>>(() =>\n    translationApi.getTranslation(translationRef),\n  );\n  const observable = useMemo(\n    () => translationApi.translation$(translationRef),\n    [translationApi, translationRef],\n  );\n\n  const onError = useCallback(\n    (error: Error) => {\n      if (!loggedRefs.has(translationRef)) {\n        const errMsg = `Failed to load translation resource '${translationRef.id}'; caused by ${error}`;\n        // eslint-disable-next-line no-console\n        console.error(errMsg);\n        errorApi.post(new Error(errMsg));\n        loggedRefs.add(translationRef);\n      }\n    },\n    [errorApi, translationRef],\n  );\n\n  useEffect(() => {\n    const subscription = observable.subscribe({\n      next(next) {\n        if (next.ready) {\n          setSnapshot(next);\n        }\n      },\n      error(error) {\n        onError(error);\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable, onError]);\n\n  // Keep track of if the provided translation ref changes, and in that case update the snapshot\n  const initialRenderRef = useRef(true);\n  useEffect(() => {\n    if (initialRenderRef.current) {\n      initialRenderRef.current = false;\n    } else {\n      setSnapshot(translationApi.getTranslation(translationRef));\n    }\n  }, [translationApi, translationRef]);\n\n  if (!snapshot.ready) {\n    throw new Promise<void>(resolve => {\n      const subscription = observable.subscribe({\n        next(next) {\n          if (next.ready) {\n            subscription.unsubscribe();\n            resolve();\n          }\n        },\n        error(error) {\n          subscription.unsubscribe();\n          onError(error);\n          resolve();\n        },\n      });\n    });\n  }\n\n  return { t: snapshot.t };\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AA0BA,MAAM,UAAA,uBAAiB,OAAA,EAAoC;AAGpD,MAAM,iBAAA,GAAoB,CAG/B,cAAA,KAC0C;AAC1C,EAAA,MAAM,QAAA,GAAW,OAAO,WAAW,CAAA;AACnC,EAAA,MAAM,cAAA,GAAiB,OAAO,iBAAiB,CAAA;AAE/C,EAAA,MAAM,CAAC,QAAA,EAAU,WAAW,CAAA,GAAI,QAAA;AAAA,IAAyC,MACvE,cAAA,CAAe,cAAA,CAAe,cAAc;AAAA,GAC9C;AACA,EAAA,MAAM,UAAA,GAAa,OAAA;AAAA,IACjB,MAAM,cAAA,CAAe,YAAA,CAAa,cAAc,CAAA;AAAA,IAChD,CAAC,gBAAgB,cAAc;AAAA,GACjC;AAEA,EAAA,MAAM,OAAA,GAAU,WAAA;AAAA,IACd,CAAC,KAAA,KAAiB;AAChB,MAAA,IAAI,CAAC,UAAA,CAAW,GAAA,CAAI,cAAc,CAAA,EAAG;AACnC,QAAA,MAAM,MAAA,GAAS,CAAA,qCAAA,EAAwC,cAAA,CAAe,EAAE,gBAAgB,KAAK,CAAA,CAAA;AAE7F,QAAA,OAAA,CAAQ,MAAM,MAAM,CAAA;AACpB,QAAA,QAAA,CAAS,IAAA,CAAK,IAAI,KAAA,CAAM,MAAM,CAAC,CAAA;AAC/B,QAAA,UAAA,CAAW,IAAI,cAAc,CAAA;AAAA,MAC/B;AAAA,IACF,CAAA;AAAA,IACA,CAAC,UAAU,cAAc;AAAA,GAC3B;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,MAAM,YAAA,GAAe,WAAW,SAAA,CAAU;AAAA,MACxC,KAAK,IAAA,EAAM;AACT,QAAA,IAAI,KAAK,KAAA,EAAO;AACd,UAAA,WAAA,CAAY,IAAI,CAAA;AAAA,QAClB;AAAA,MACF,CAAA;AAAA,MACA,MAAM,KAAA,EAAO;AACX,QAAA,OAAA,CAAQ,KAAK,CAAA;AAAA,MACf;AAAA,KACD,CAAA;AAED,IAAA,OAAO,MAAM;AACX,MAAA,YAAA,CAAa,WAAA,EAAY;AAAA,IAC3B,CAAA;AAAA,EACF,CAAA,EAAG,CAAC,UAAA,EAAY,OAAO,CAAC,CAAA;AAGxB,EAAA,MAAM,gBAAA,GAAmB,OAAO,IAAI,CAAA;AACpC,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,iBAAiB,OAAA,EAAS;AAC5B,MAAA,gBAAA,CAAiB,OAAA,GAAU,KAAA;AAAA,IAC7B,CAAA,MAAO;AACL,MAAA,WAAA,CAAY,cAAA,CAAe,cAAA,CAAe,cAAc,CAAC,CAAA;AAAA,IAC3D;AAAA,EACF,CAAA,EAAG,CAAC,cAAA,EAAgB,cAAc,CAAC,CAAA;AAEnC,EAAA,IAAI,CAAC,SAAS,KAAA,EAAO;AACnB,IAAA,MAAM,IAAI,QAAc,CAAA,OAAA,KAAW;AACjC,MAAA,MAAM,YAAA,GAAe,WAAW,SAAA,CAAU;AAAA,QACxC,KAAK,IAAA,EAAM;AACT,UAAA,IAAI,KAAK,KAAA,EAAO;AACd,YAAA,YAAA,CAAa,WAAA,EAAY;AACzB,YAAA,OAAA,EAAQ;AAAA,UACV;AAAA,QACF,CAAA;AAAA,QACA,MAAM,KAAA,EAAO;AACX,UAAA,YAAA,CAAa,WAAA,EAAY;AACzB,UAAA,OAAA,CAAQ,KAAK,CAAA;AACb,UAAA,OAAA,EAAQ;AAAA,QACV;AAAA,OACD,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH;AAEA,EAAA,OAAO,EAAE,CAAA,EAAG,QAAA,CAAS,CAAA,EAAE;AACzB;;;;"}