{"version":3,"file":"Plugin.esm.js","sources":["../../src/plugin/Plugin.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginConfig,\n  BackstagePlugin,\n  Extension,\n  AnyRoutes,\n  AnyExternalRoutes,\n  PluginFeatureFlagConfig,\n} from './types';\nimport { AnyApiFactory } from '../apis';\n\n/**\n * @internal\n */\nexport class PluginImpl<\n  Routes extends AnyRoutes,\n  ExternalRoutes extends AnyExternalRoutes,\n> implements BackstagePlugin<Routes, ExternalRoutes>\n{\n  constructor(private readonly config: PluginConfig<Routes, ExternalRoutes>) {}\n\n  getId(): string {\n    return this.config.id;\n  }\n\n  getApis(): Iterable<AnyApiFactory> {\n    return this.config.apis ?? [];\n  }\n\n  getFeatureFlags(): Iterable<PluginFeatureFlagConfig> {\n    return this.config.featureFlags?.slice() ?? [];\n  }\n\n  get routes(): Routes {\n    return this.config.routes ?? ({} as Routes);\n  }\n\n  get externalRoutes(): ExternalRoutes {\n    return this.config.externalRoutes ?? ({} as ExternalRoutes);\n  }\n\n  provide<T>(extension: Extension<T>): T {\n    return extension.expose(this);\n  }\n\n  toString() {\n    return `plugin{${this.config.id}}`;\n  }\n}\n\n/**\n * Creates Backstage Plugin from config.\n *\n * @param config - Plugin configuration.\n * @public\n */\nexport function createPlugin<\n  Routes extends AnyRoutes = {},\n  ExternalRoutes extends AnyExternalRoutes = {},\n>(\n  config: PluginConfig<Routes, ExternalRoutes>,\n): BackstagePlugin<Routes, ExternalRoutes> {\n  return new PluginImpl(config);\n}\n"],"names":[],"mappings":"AA6BO,MAAM,UAAA,CAIb;AAAA,EACE,YAA6B,MAAA,EAA8C;AAA9C,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAAA,EAA+C;AAAA,EAE5E,KAAA,GAAgB;AACd,IAAA,OAAO,KAAK,MAAA,CAAO,EAAA;AAAA,EACrB;AAAA,EAEA,OAAA,GAAmC;AACjC,IAAA,OAAO,IAAA,CAAK,MAAA,CAAO,IAAA,IAAQ,EAAC;AAAA,EAC9B;AAAA,EAEA,eAAA,GAAqD;AACnD,IAAA,OAAO,IAAA,CAAK,MAAA,CAAO,YAAA,EAAc,KAAA,MAAW,EAAC;AAAA,EAC/C;AAAA,EAEA,IAAI,MAAA,GAAiB;AACnB,IAAA,OAAO,IAAA,CAAK,MAAA,CAAO,MAAA,IAAW,EAAC;AAAA,EACjC;AAAA,EAEA,IAAI,cAAA,GAAiC;AACnC,IAAA,OAAO,IAAA,CAAK,MAAA,CAAO,cAAA,IAAmB,EAAC;AAAA,EACzC;AAAA,EAEA,QAAW,SAAA,EAA4B;AACrC,IAAA,OAAO,SAAA,CAAU,OAAO,IAAI,CAAA;AAAA,EAC9B;AAAA,EAEA,QAAA,GAAW;AACT,IAAA,OAAO,CAAA,OAAA,EAAU,IAAA,CAAK,MAAA,CAAO,EAAE,CAAA,CAAA,CAAA;AAAA,EACjC;AACF;AAQO,SAAS,aAId,MAAA,EACyC;AACzC,EAAA,OAAO,IAAI,WAAW,MAAM,CAAA;AAC9B;;;;"}