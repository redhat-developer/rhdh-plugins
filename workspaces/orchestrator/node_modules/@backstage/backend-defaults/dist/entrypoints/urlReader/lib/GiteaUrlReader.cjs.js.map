{"version":3,"file":"GiteaUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GiteaUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGiteaFileContentsUrl,\n  getGiteaArchiveUrl,\n  getGiteaLatestCommitUrl,\n  parseGiteaUrl,\n  getGiteaRequestOptions,\n  GiteaIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport {\n  assertError,\n  AuthenticationError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport { Readable } from 'stream';\nimport { parseLastModified } from './util';\nimport parseGitUrl from 'git-url-parse';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for the Gitea v1 api.\n *\n * @public\n */\nexport class GiteaUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    return ScmIntegrations.fromConfig(config)\n      .gitea.list()\n      .map(integration => {\n        const reader = new GiteaUrlReader(integration, { treeResponseFactory });\n        const predicate = (url: URL) => {\n          return url.host === integration.config.host;\n        };\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: GiteaIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    const blobUrl = getGiteaFileContentsUrl(this.integration.config, url);\n\n    try {\n      response = await fetch(blobUrl, {\n        method: 'GET',\n        ...getGiteaRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${blobUrl}, ${e}`);\n    }\n\n    if (response.ok) {\n      // Gitea returns an object with the file contents encoded, not the file itself\n      const { encoding, content } = await response.json();\n\n      if (encoding === 'base64') {\n        return ReadUrlResponseFactory.fromReadable(\n          Readable.from(Buffer.from(content, 'base64')),\n          {\n            etag: response.headers.get('ETag') ?? undefined,\n            lastModifiedAt: parseLastModified(\n              response.headers.get('Last-Modified'),\n            ),\n          },\n        );\n      }\n\n      throw new Error(`Unknown encoding: ${encoding}`);\n    }\n\n    const message = `${url} could not be read as ${blobUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.status === 403) {\n      throw new AuthenticationError();\n    }\n\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const lastCommitHash = await this.getLastCommitHash(url);\n    if (options?.etag && options.etag === lastCommitHash) {\n      throw new NotModifiedError();\n    }\n\n    const archiveUri = getGiteaArchiveUrl(this.integration.config, url);\n\n    let response: Response;\n    try {\n      response = await fetch(archiveUri, {\n        method: 'GET',\n        ...getGiteaRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${archiveUri}, ${e}`);\n    }\n\n    const parsedUri = parseGiteaUrl(this.integration.config, url);\n\n    return this.deps.treeResponseFactory.fromTarArchive({\n      response: response,\n      subpath: parsedUri.path,\n      etag: lastCommitHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    if (filepath.match(/[*?]/)) {\n      throw new Error('Unsupported search pattern URL');\n    }\n\n    try {\n      const data = await this.readUrl(url, options);\n\n      return {\n        files: [\n          {\n            url: url,\n            content: data.buffer,\n            lastModifiedAt: data.lastModifiedAt,\n          },\n        ],\n        etag: data.etag ?? '',\n      };\n    } catch (error) {\n      assertError(error);\n      if (error.name === 'NotFoundError') {\n        return {\n          files: [],\n          etag: '',\n        };\n      }\n      throw error;\n    }\n  }\n\n  toString() {\n    const { host } = this.integration.config;\n    return `gitea{host=${host},authed=${Boolean(\n      this.integration.config.password,\n    )}}`;\n  }\n\n  private async getLastCommitHash(url: string): Promise<string> {\n    const commitUri = getGiteaLatestCommitUrl(this.integration.config, url);\n\n    const response = await fetch(\n      commitUri,\n      getGiteaRequestOptions(this.integration.config),\n    );\n    if (!response.ok) {\n      const message = `Failed to retrieve latest commit information from ${commitUri}, ${response.status} ${response.statusText}`;\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return (await response.json()).sha;\n  }\n}\n"],"names":["ScmIntegrations","getGiteaFileContentsUrl","getGiteaRequestOptions","ReadUrlResponseFactory","Readable","parseLastModified","NotFoundError","NotModifiedError","AuthenticationError","getGiteaArchiveUrl","parseGiteaUrl","parseGitUrl","assertError","getGiteaLatestCommitUrl"],"mappings":"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"}