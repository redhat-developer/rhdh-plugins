{"version":3,"file":"GerritUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GerritUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { Base64Decode } from 'base64-stream';\nimport fetch, { Response } from 'node-fetch';\nimport { Readable } from 'stream';\nimport {\n  GerritIntegration,\n  ScmIntegrations,\n  buildGerritGitilesArchiveUrlFromLocation,\n  getGerritBranchApiUrl,\n  getGerritFileContentsApiUrl,\n  getGerritRequestOptions,\n  parseGerritJsonResponse,\n  parseGitilesUrlRef,\n} from '@backstage/integration';\nimport {\n  NotFoundError,\n  NotModifiedError,\n  ResponseError,\n  assertError,\n} from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { Minimatch } from 'minimatch';\nimport { getGitilesAuthenticationUrl } from '@backstage/integration';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files in Gerrit.\n *\n * @remarks\n * To be able to link to Git contents for Gerrit providers in a user friendly\n * way we are depending on that there is a Gitiles installation somewhere\n * that we can link to. It is perfectly possible to integrate Gerrit with\n * Backstage without Gitiles since all API calls goes directly to Gerrit.\n * However if Gitiles is configured, readTree will use it to fetch\n * an archive instead of cloning the repository.\n *\n * The \"host\" variable in the config is the Gerrit host. The address where\n * Gitiles is installed may be on the same host but it could be on a\n * separate host. For example a Gerrit instance could be hosted on\n * \"gerrit-review.company.com\" but the repos could be browsable on a separate\n * host, e.g. \"gerrit.company.com\" and the human readable URL would then\n * not point to the API host.\n *\n * @public\n */\nexport class GerritUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    if (!integrations.gerrit) {\n      return [];\n    }\n    return integrations.gerrit.list().map(integration => {\n      const reader = new GerritUrlReader(integration, { treeResponseFactory });\n      const predicate = (url: URL) => {\n        const gitilesUrl = new URL(integration.config.gitilesBaseUrl!);\n        // If gitilesUrl is not specified it will default to\n        // \"integration.config.host\".\n        return url.host === gitilesUrl.host;\n      };\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GerritIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const apiUrl = getGerritFileContentsApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read gerrit file ${url}, ${e}`);\n    }\n\n    if (response.ok) {\n      let responseBody: string;\n      return {\n        buffer: async () => {\n          if (responseBody === undefined) {\n            responseBody = await response.text();\n          }\n          return Buffer.from(responseBody, 'base64');\n        },\n        stream: () => {\n          const readable = Readable.from(response.body);\n          return readable.pipe(new Base64Decode());\n        },\n      };\n    }\n    if (response.status === 404) {\n      throw new NotFoundError(`File ${url} not found.`);\n    }\n    throw new Error(\n      `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n    );\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const urlRevision = await this.getRevisionForUrl(url, options);\n\n    return this.readTreeFromGitiles(url, urlRevision, options);\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { path } = parseGitilesUrlRef(this.integration.config, url);\n\n    if (!path.match(/[*?]/)) {\n      try {\n        const data = await this.readUrl(url, options);\n\n        return {\n          files: [\n            {\n              url: url,\n              content: data.buffer,\n              lastModifiedAt: data.lastModifiedAt,\n            },\n          ],\n          etag: data.etag ?? '',\n        };\n      } catch (error) {\n        assertError(error);\n        if (error.name === 'NotFoundError') {\n          return {\n            files: [],\n            etag: '',\n          };\n        }\n        throw error;\n      }\n    }\n\n    const urlRevision = await this.getRevisionForUrl(url, options);\n\n    const files = await this.searchFilesFromGitiles(url, options);\n\n    return { files, etag: urlRevision };\n  }\n\n  toString() {\n    const { host, password } = this.integration.config;\n    return `gerrit{host=${host},authed=${Boolean(password)}}`;\n  }\n\n  private async readTreeFromGitiles(\n    url: string,\n    revision: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ) {\n    const archiveUrl = buildGerritGitilesArchiveUrlFromLocation(\n      this.integration.config,\n      url,\n    );\n    const archiveResponse = await fetch(archiveUrl, {\n      ...getGerritRequestOptions(this.integration.config),\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n\n    if (archiveResponse.status === 404) {\n      throw new NotFoundError(`Not found: ${archiveUrl}`);\n    }\n\n    if (!archiveResponse.ok) {\n      throw new Error(\n        `${url} could not be read as ${archiveUrl}, ${archiveResponse.status} ${archiveResponse.statusText}`,\n      );\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: archiveResponse.body as unknown as Readable,\n      etag: revision,\n      filter: options?.filter,\n      stripFirstDirectory: false,\n    });\n  }\n\n  private async getRevisionForUrl(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<string> {\n    const { ref, refType } = parseGitilesUrlRef(this.integration.config, url);\n    // The url points to a static revision.\n    if (refType === 'sha') {\n      if (options?.etag === ref) {\n        throw new NotModifiedError();\n      }\n      return ref;\n    }\n\n    const apiUrl = getGerritBranchApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read branch state ${url}, ${e}`);\n    }\n\n    if (!response.ok) {\n      throw await ResponseError.fromResponse(response);\n    }\n\n    const branchInfo = (await parseGerritJsonResponse(response as any)) as {\n      revision: string;\n    };\n    if (options?.etag === branchInfo.revision) {\n      throw new NotModifiedError();\n    }\n    return branchInfo.revision;\n  }\n\n  private async searchFilesFromGitiles(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceSearchResponse['files']> {\n    const { path, basePath } = parseGitilesUrlRef(this.integration.config, url);\n\n    const treeUrl = `${basePath}/?format=JSON&recursive`.replace(\n      this.integration.config.gitilesBaseUrl,\n      getGitilesAuthenticationUrl(this.integration.config),\n    );\n\n    const treeResponse = await fetch(treeUrl, {\n      ...getGerritRequestOptions(this.integration.config),\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n    if (!treeResponse.ok) {\n      throw await ResponseError.fromResponse(treeResponse);\n    }\n\n    const res = (await parseGerritJsonResponse(treeResponse as any)) as {\n      id: string;\n      entries: { mode: number; type: string; id: string; name: string }[];\n    };\n\n    const matcher = new Minimatch(decodeURIComponent(path).replace(/^\\/+/, ''));\n\n    const matching = res.entries.filter(\n      item => item.type === 'blob' && item.name && matcher.match(item.name),\n    );\n\n    return matching.map(item => ({\n      url: `${basePath}/${item.name}`,\n      content: async () => {\n        const apiUrl = getGerritFileContentsApiUrl(\n          this.integration.config,\n          `${basePath}/${item.name}`,\n        );\n        const response = await fetch(apiUrl, {\n          method: 'GET',\n          ...getGerritRequestOptions(this.integration.config),\n          // TODO(freben): The signal cast is there because pre-3.x versions of\n          // node-fetch have a very slightly deviating AbortSignal type signature.\n          // The difference does not affect us in practice however. The cast can\n          // be removed after we support ESM for CLI dependencies and migrate to\n          // version 3 of node-fetch.\n          // https://github.com/backstage/backstage/issues/8242\n          signal: options?.signal as any,\n        });\n\n        const responseBody = await response.text();\n        return Buffer.from(responseBody, 'base64');\n      },\n    }));\n  }\n}\n"],"names":["ScmIntegrations","getGerritFileContentsApiUrl","fetch","getGerritRequestOptions","Readable","Base64Decode","NotFoundError","parseGitilesUrlRef","assertError","buildGerritGitilesArchiveUrlFromLocation","NotModifiedError","getGerritBranchApiUrl","ResponseError","parseGerritJsonResponse","getGitilesAuthenticationUrl","Minimatch"],"mappings":"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"}