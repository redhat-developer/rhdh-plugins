{"version":3,"file":"BitbucketUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/BitbucketUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  assertError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport {\n  BitbucketIntegration,\n  getBitbucketDefaultBranch,\n  getBitbucketDownloadUrl,\n  getBitbucketFileFetchUrl,\n  getBitbucketRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files from Bitbucket v1 and v2 APIs, such\n * as the one exposed by Bitbucket Cloud itself.\n *\n * @public\n * @deprecated in favor of BitbucketCloudUrlReader and BitbucketServerUrlReader\n */\nexport class BitbucketUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, logger, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucket\n      .list()\n      .filter(\n        item =>\n          !integrations.bitbucketCloud.byHost(item.config.host) &&\n          !integrations.bitbucketServer.byHost(item.config.host),\n      )\n      .map(integration => {\n        const reader = new BitbucketUrlReader(integration, logger, {\n          treeResponseFactory,\n        });\n        const predicate = (url: URL) => url.host === integration.config.host;\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: BitbucketIntegration,\n    logger: LoggerService,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {\n    const { host, token, username, appPassword } = integration.config;\n    const replacement =\n      host === 'bitbucket.org' ? 'bitbucketCloud' : 'bitbucketServer';\n    logger.warn(\n      `[Deprecated] Please migrate from \"integrations.bitbucket\" to \"integrations.${replacement}\".`,\n    );\n\n    if (!token && username && !appPassword) {\n      throw new Error(\n        `Bitbucket integration for '${host}' has configured a username but is missing a required appPassword.`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketFileFetchUrl(url, this.integration.config);\n    const requestOptions = getBitbucketRequestOptions(this.integration.config);\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter && {\n            'If-Modified-Since': lastModifiedAfter.toUTCString(),\n          }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromResponse(response);\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveBitbucketResponse = await fetch(\n      downloadUrl,\n      getBitbucketRequestOptions(this.integration.config),\n    );\n    if (!archiveBitbucketResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveBitbucketResponse.status} ${archiveBitbucketResponse.statusText}`;\n      if (archiveBitbucketResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      response: archiveBitbucketResponse,\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    // If it's a direct URL we use readUrl instead\n    if (!filepath?.match(/[*?]/)) {\n      try {\n        const data = await this.readUrl(url, options);\n\n        return {\n          files: [\n            {\n              url: url,\n              content: data.buffer,\n              lastModifiedAt: data.lastModifiedAt,\n            },\n          ],\n          etag: data.etag ?? '',\n        };\n      } catch (error) {\n        assertError(error);\n        if (error.name === 'NotFoundError') {\n          return {\n            files: [],\n            etag: '',\n          };\n        }\n        throw error;\n      }\n    }\n\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token, username, appPassword } = this.integration.config;\n    let authed = Boolean(token);\n    if (!authed) {\n      authed = Boolean(username && appPassword);\n    }\n    return `bitbucket{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { resource, name: repoName, owner: project, ref } = parseGitUrl(url);\n\n    let branch = ref;\n    if (!branch) {\n      branch = await getBitbucketDefaultBranch(url, this.integration.config);\n    }\n\n    const isHosted = resource === 'bitbucket.org';\n    // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp222\n    const commitsApiUrl = isHosted\n      ? `${this.integration.config.apiBaseUrl}/repositories/${project}/${repoName}/commits/${branch}`\n      : `${this.integration.config.apiBaseUrl}/projects/${project}/repos/${repoName}/commits`;\n\n    const commitsResponse = await fetch(\n      commitsApiUrl,\n      getBitbucketRequestOptions(this.integration.config),\n    );\n    if (!commitsResponse.ok) {\n      const message = `Failed to retrieve commits from ${commitsApiUrl}, ${commitsResponse.status} ${commitsResponse.statusText}`;\n      if (commitsResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commits = await commitsResponse.json();\n    if (isHosted) {\n      if (\n        commits &&\n        commits.values &&\n        commits.values.length > 0 &&\n        commits.values[0].hash\n      ) {\n        return commits.values[0].hash.substring(0, 12);\n      }\n    } else {\n      if (\n        commits &&\n        commits.values &&\n        commits.values.length > 0 &&\n        commits.values[0].id\n      ) {\n        return commits.values[0].id.substring(0, 12);\n      }\n    }\n\n    throw new Error(`Failed to read response from ${commitsApiUrl}`);\n  }\n}\n"],"names":["ScmIntegrations","getBitbucketFileFetchUrl","getBitbucketRequestOptions","NotModifiedError","ReadUrlResponseFactory","NotFoundError","parseGitUrl","getBitbucketDownloadUrl","assertError","Minimatch","trimEnd","getBitbucketDefaultBranch"],"mappings":"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"}