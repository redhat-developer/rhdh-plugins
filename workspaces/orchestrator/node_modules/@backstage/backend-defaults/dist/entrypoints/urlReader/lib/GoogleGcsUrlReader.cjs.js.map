{"version":3,"file":"GoogleGcsUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GoogleGcsUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as GoogleCloud from '@google-cloud/storage';\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { ReaderFactory } from './types';\nimport getRawBody from 'raw-body';\nimport {\n  GoogleGcsIntegrationConfig,\n  readGoogleGcsIntegrationConfig,\n} from '@backstage/integration';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport packageinfo from '../../../../package.json';\nimport { assertError } from '@backstage/errors';\n\nconst GOOGLE_GCS_HOST = 'storage.cloud.google.com';\n\nconst parseURL = (\n  url: string,\n): { host: string; bucket: string; key: string } => {\n  const { host, pathname } = new URL(url);\n\n  if (host !== GOOGLE_GCS_HOST) {\n    throw new Error(`not a valid GCS URL: ${url}`);\n  }\n\n  const [, bucket, ...key] = pathname.split('/');\n  return {\n    host: host,\n    bucket,\n    key: key.join('/'),\n  };\n};\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files on Google GCS.\n *\n * @public\n */\nexport class GoogleGcsUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, logger }) => {\n    if (!config.has('integrations.googleGcs')) {\n      return [];\n    }\n    const gcsConfig = readGoogleGcsIntegrationConfig(\n      config.getConfig('integrations.googleGcs'),\n    );\n    let storage: GoogleCloud.Storage;\n    if (!gcsConfig.clientEmail || !gcsConfig.privateKey) {\n      logger.info(\n        'googleGcs credentials not found in config. Using default credentials provider.',\n      );\n      storage = new GoogleCloud.Storage({\n        userAgent: `backstage/backend-defaults.GoogleGcsUrlReader/${packageinfo.version}`,\n      });\n    } else {\n      storage = new GoogleCloud.Storage({\n        credentials: {\n          client_email: gcsConfig.clientEmail || undefined,\n          private_key: gcsConfig.privateKey || undefined,\n        },\n        userAgent: `backstage/backend-defaults.GoogleGcsUrlReader/${packageinfo.version}`,\n      });\n    }\n    const reader = new GoogleGcsUrlReader(gcsConfig, storage);\n    const predicate = (url: URL) => url.host === GOOGLE_GCS_HOST;\n    return [{ reader, predicate }];\n  };\n\n  constructor(\n    private readonly integration: GoogleGcsIntegrationConfig,\n    private readonly storage: GoogleCloud.Storage,\n  ) {}\n\n  private readStreamFromUrl(url: string): Readable {\n    const { bucket, key } = parseURL(url);\n    return this.storage.bucket(bucket).file(key).createReadStream();\n  }\n\n  async read(url: string): Promise<Buffer> {\n    try {\n      return await getRawBody(this.readStreamFromUrl(url));\n    } catch (error) {\n      throw new Error(`unable to read gcs file from ${url}, ${error}`);\n    }\n  }\n\n  async readUrl(\n    url: string,\n    _options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // TODO etag is not implemented yet.\n    const stream = this.readStreamFromUrl(url);\n    return ReadUrlResponseFactory.fromReadable(stream);\n  }\n\n  async readTree(): Promise<UrlReaderServiceReadTreeResponse> {\n    throw new Error('GcsUrlReader does not implement readTree');\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { bucket, key: pattern } = parseURL(url);\n\n    // If it's a direct URL we use readUrl instead\n    if (!pattern?.match(/[*?]/)) {\n      try {\n        const data = await this.readUrl(url, options);\n\n        return {\n          files: [\n            {\n              url: url,\n              content: data.buffer,\n              lastModifiedAt: data.lastModifiedAt,\n            },\n          ],\n          etag: data.etag ?? '',\n        };\n      } catch (error) {\n        assertError(error);\n        if (error.name === 'NotFoundError') {\n          return {\n            files: [],\n            etag: '',\n          };\n        }\n        throw error;\n      }\n    }\n\n    if (!pattern.endsWith('*') || pattern.indexOf('*') !== pattern.length - 1) {\n      throw new Error('GcsUrlReader only supports prefix-based searches');\n    }\n\n    const [files] = await this.storage.bucket(bucket).getFiles({\n      autoPaginate: true,\n      prefix: pattern.split('*').join(''),\n    });\n\n    return {\n      files: files.map(file => {\n        const fullUrl = ['https:/', GOOGLE_GCS_HOST, bucket, file.name].join(\n          '/',\n        );\n        return {\n          url: fullUrl,\n          content: async () => {\n            const readResponse = await this.readUrl(fullUrl);\n            return readResponse.buffer();\n          },\n        };\n      }),\n      // TODO etag is not implemented yet.\n      etag: 'NOT/IMPLEMENTED',\n    };\n  }\n\n  toString() {\n    const key = this.integration.privateKey;\n    return `googleGcs{host=${GOOGLE_GCS_HOST},authed=${Boolean(key)}}`;\n  }\n}\n"],"names":["readGoogleGcsIntegrationConfig","GoogleCloud","packageinfo","getRawBody","ReadUrlResponseFactory","assertError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,MAAM,eAAA,GAAkB,0BAAA;AAExB,MAAM,QAAA,GAAW,CACf,GAAA,KACkD;AAClD,EAAA,MAAM,EAAE,IAAA,EAAM,QAAA,EAAS,GAAI,IAAI,IAAI,GAAG,CAAA;AAEtC,EAAA,IAAI,SAAS,eAAA,EAAiB;AAC5B,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,qBAAA,EAAwB,GAAG,CAAA,CAAE,CAAA;AAAA,EAC/C;AAEA,EAAA,MAAM,GAAG,MAAA,EAAQ,GAAG,GAAG,CAAA,GAAI,QAAA,CAAS,MAAM,GAAG,CAAA;AAC7C,EAAA,OAAO;AAAA,IACL,IAAA;AAAA,IACA,MAAA;AAAA,IACA,GAAA,EAAK,GAAA,CAAI,IAAA,CAAK,GAAG;AAAA,GACnB;AACF,CAAA;AAOO,MAAM,kBAAA,CAA+C;AAAA,EA8B1D,WAAA,CACmB,aACA,OAAA,EACjB;AAFiB,IAAA,IAAA,CAAA,WAAA,GAAA,WAAA;AACA,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AAAA,EAChB;AAAA,EAhCH,OAAO,OAAA,GAAyB,CAAC,EAAE,MAAA,EAAQ,QAAO,KAAM;AACtD,IAAA,IAAI,CAAC,MAAA,CAAO,GAAA,CAAI,wBAAwB,CAAA,EAAG;AACzC,MAAA,OAAO,EAAC;AAAA,IACV;AACA,IAAA,MAAM,SAAA,GAAYA,0CAAA;AAAA,MAChB,MAAA,CAAO,UAAU,wBAAwB;AAAA,KAC3C;AACA,IAAA,IAAI,OAAA;AACJ,IAAA,IAAI,CAAC,SAAA,CAAU,WAAA,IAAe,CAAC,UAAU,UAAA,EAAY;AACnD,MAAA,MAAA,CAAO,IAAA;AAAA,QACL;AAAA,OACF;AACA,MAAA,OAAA,GAAU,IAAIC,uBAAY,OAAA,CAAQ;AAAA,QAChC,SAAA,EAAW,CAAA,8CAAA,EAAiDC,gBAAA,CAAY,OAAO,CAAA;AAAA,OAChF,CAAA;AAAA,IACH,CAAA,MAAO;AACL,MAAA,OAAA,GAAU,IAAID,uBAAY,OAAA,CAAQ;AAAA,QAChC,WAAA,EAAa;AAAA,UACX,YAAA,EAAc,UAAU,WAAA,IAAe,MAAA;AAAA,UACvC,WAAA,EAAa,UAAU,UAAA,IAAc;AAAA,SACvC;AAAA,QACA,SAAA,EAAW,CAAA,8CAAA,EAAiDC,gBAAA,CAAY,OAAO,CAAA;AAAA,OAChF,CAAA;AAAA,IACH;AACA,IAAA,MAAM,MAAA,GAAS,IAAI,kBAAA,CAAmB,SAAA,EAAW,OAAO,CAAA;AACxD,IAAA,MAAM,SAAA,GAAY,CAAC,GAAA,KAAa,GAAA,CAAI,IAAA,KAAS,eAAA;AAC7C,IAAA,OAAO,CAAC,EAAE,MAAA,EAAQ,SAAA,EAAW,CAAA;AAAA,EAC/B,CAAA;AAAA,EAOQ,kBAAkB,GAAA,EAAuB;AAC/C,IAAA,MAAM,EAAE,MAAA,EAAQ,GAAA,EAAI,GAAI,SAAS,GAAG,CAAA;AACpC,IAAA,OAAO,IAAA,CAAK,QAAQ,MAAA,CAAO,MAAM,EAAE,IAAA,CAAK,GAAG,EAAE,gBAAA,EAAiB;AAAA,EAChE;AAAA,EAEA,MAAM,KAAK,GAAA,EAA8B;AACvC,IAAA,IAAI;AACF,MAAA,OAAO,MAAMC,2BAAA,CAAW,IAAA,CAAK,iBAAA,CAAkB,GAAG,CAAC,CAAA;AAAA,IACrD,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,6BAAA,EAAgC,GAAG,CAAA,EAAA,EAAK,KAAK,CAAA,CAAE,CAAA;AAAA,IACjE;AAAA,EACF;AAAA,EAEA,MAAM,OAAA,CACJ,GAAA,EACA,QAAA,EAC0C;AAE1C,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,iBAAA,CAAkB,GAAG,CAAA;AACzC,IAAA,OAAOC,6CAAA,CAAuB,aAAa,MAAM,CAAA;AAAA,EACnD;AAAA,EAEA,MAAM,QAAA,GAAsD;AAC1D,IAAA,MAAM,IAAI,MAAM,0CAA0C,CAAA;AAAA,EAC5D;AAAA,EAEA,MAAM,MAAA,CACJ,GAAA,EACA,OAAA,EACyC;AACzC,IAAA,MAAM,EAAE,MAAA,EAAQ,GAAA,EAAK,OAAA,EAAQ,GAAI,SAAS,GAAG,CAAA;AAG7C,IAAA,IAAI,CAAC,OAAA,EAAS,KAAA,CAAM,MAAM,CAAA,EAAG;AAC3B,MAAA,IAAI;AACF,QAAA,MAAM,IAAA,GAAO,MAAM,IAAA,CAAK,OAAA,CAAQ,KAAK,OAAO,CAAA;AAE5C,QAAA,OAAO;AAAA,UACL,KAAA,EAAO;AAAA,YACL;AAAA,cACE,GAAA;AAAA,cACA,SAAS,IAAA,CAAK,MAAA;AAAA,cACd,gBAAgB,IAAA,CAAK;AAAA;AACvB,WACF;AAAA,UACA,IAAA,EAAM,KAAK,IAAA,IAAQ;AAAA,SACrB;AAAA,MACF,SAAS,KAAA,EAAO;AACd,QAAAC,kBAAA,CAAY,KAAK,CAAA;AACjB,QAAA,IAAI,KAAA,CAAM,SAAS,eAAA,EAAiB;AAClC,UAAA,OAAO;AAAA,YACL,OAAO,EAAC;AAAA,YACR,IAAA,EAAM;AAAA,WACR;AAAA,QACF;AACA,QAAA,MAAM,KAAA;AAAA,MACR;AAAA,IACF;AAEA,IAAA,IAAI,CAAC,OAAA,CAAQ,QAAA,CAAS,GAAG,CAAA,IAAK,OAAA,CAAQ,OAAA,CAAQ,GAAG,CAAA,KAAM,OAAA,CAAQ,MAAA,GAAS,CAAA,EAAG;AACzE,MAAA,MAAM,IAAI,MAAM,kDAAkD,CAAA;AAAA,IACpE;AAEA,IAAA,MAAM,CAAC,KAAK,CAAA,GAAI,MAAM,KAAK,OAAA,CAAQ,MAAA,CAAO,MAAM,CAAA,CAAE,QAAA,CAAS;AAAA,MACzD,YAAA,EAAc,IAAA;AAAA,MACd,QAAQ,OAAA,CAAQ,KAAA,CAAM,GAAG,CAAA,CAAE,KAAK,EAAE;AAAA,KACnC,CAAA;AAED,IAAA,OAAO;AAAA,MACL,KAAA,EAAO,KAAA,CAAM,GAAA,CAAI,CAAA,IAAA,KAAQ;AACvB,QAAA,MAAM,UAAU,CAAC,SAAA,EAAW,iBAAiB,MAAA,EAAQ,IAAA,CAAK,IAAI,CAAA,CAAE,IAAA;AAAA,UAC9D;AAAA,SACF;AACA,QAAA,OAAO;AAAA,UACL,GAAA,EAAK,OAAA;AAAA,UACL,SAAS,YAAY;AACnB,YAAA,MAAM,YAAA,GAAe,MAAM,IAAA,CAAK,OAAA,CAAQ,OAAO,CAAA;AAC/C,YAAA,OAAO,aAAa,MAAA,EAAO;AAAA,UAC7B;AAAA,SACF;AAAA,MACF,CAAC,CAAA;AAAA;AAAA,MAED,IAAA,EAAM;AAAA,KACR;AAAA,EACF;AAAA,EAEA,QAAA,GAAW;AACT,IAAA,MAAM,GAAA,GAAM,KAAK,WAAA,CAAY,UAAA;AAC7B,IAAA,OAAO,CAAA,eAAA,EAAkB,eAAe,CAAA,QAAA,EAAW,OAAA,CAAQ,GAAG,CAAC,CAAA,CAAA,CAAA;AAAA,EACjE;AACF;;;;"}