{"version":3,"file":"GithubUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GithubUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n  UrlReaderServiceSearchResponseFile,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGithubFileFetchUrl,\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubIntegration,\n  ScmIntegrations,\n  GithubCredentials,\n} from '@backstage/integration';\nimport { RestEndpointMethodTypes } from '@octokit/rest';\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport {\n  assertError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\nimport isGlob from 'is-glob';\n\nexport type GhRepoResponse =\n  RestEndpointMethodTypes['repos']['get']['response']['data'];\nexport type GhCombinedCommitStatusResponse =\n  RestEndpointMethodTypes['repos']['getCombinedStatusForRef']['response']['data'];\nexport type GhTreeResponse =\n  RestEndpointMethodTypes['git']['getTree']['response']['data'];\nexport type GhBlobResponse =\n  RestEndpointMethodTypes['git']['getBlob']['response']['data'];\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files through the GitHub v3 APIs, such as\n * the one exposed by GitHub itself.\n *\n * @public\n */\nexport class GithubUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credentialsProvider =\n      DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n    return integrations.github.list().map(integration => {\n      const reader = new GithubUrlReader(integration, {\n        treeResponseFactory,\n        credentialsProvider,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GithubIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n      credentialsProvider: GithubCredentialsProvider;\n    },\n  ) {\n    if (!integration.config.apiBaseUrl && !integration.config.rawBaseUrl) {\n      throw new Error(\n        `GitHub integration '${integration.title}' must configure an explicit apiBaseUrl or rawBaseUrl`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  private getCredentials = async (\n    url: string,\n    options?: { token?: string },\n  ): Promise<GithubCredentials> => {\n    if (options?.token) {\n      return {\n        headers: {\n          Authorization: `Bearer ${options.token}`,\n        },\n        type: 'token',\n        token: options.token,\n      };\n    }\n\n    return await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n  };\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const credentials = await this.getCredentials(url, options);\n\n    const ghUrl = getGithubFileFetchUrl(\n      url,\n      this.integration.config,\n      credentials,\n    );\n\n    const response = await this.fetchResponse(ghUrl, {\n      headers: {\n        ...credentials?.headers,\n        ...(options?.etag && { 'If-None-Match': options.etag }),\n        ...(options?.lastModifiedAfter && {\n          'If-Modified-Since': options.lastModifiedAfter.toUTCString(),\n        }),\n        Accept: 'application/vnd.github.v3.raw',\n      },\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n\n    return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n      etag: response.headers.get('ETag') ?? undefined,\n      lastModifiedAt: parseLastModified(response.headers.get('Last-Modified')),\n    });\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const repoDetails = await this.getRepoDetails(url, options);\n    const commitSha = repoDetails.commitSha;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.getCredentials(url, options);\n\n    return this.doReadTree(\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      { headers, signal: options?.signal as any },\n      options,\n    );\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    // If it's a direct URL we use readUrl instead\n    if (!isGlob(filepath)) {\n      try {\n        const data = await this.readUrl(url, options);\n\n        return {\n          files: [\n            {\n              url: url,\n              content: data.buffer,\n              lastModifiedAt: data.lastModifiedAt,\n            },\n          ],\n          etag: data.etag ?? '',\n        };\n      } catch (error) {\n        assertError(error);\n        if (error.name === 'NotFoundError') {\n          return {\n            files: [],\n            etag: '',\n          };\n        }\n        throw error;\n      }\n    }\n\n    const repoDetails = await this.getRepoDetails(url, options);\n    const commitSha = repoDetails.commitSha;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { headers } = await this.getCredentials(url, options);\n\n    const files = await this.doSearch(\n      url,\n      repoDetails.repo.trees_url,\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      { headers, signal: options?.signal as any },\n    );\n\n    return { files, etag: commitSha };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `github{host=${host},authed=${Boolean(token)}}`;\n  }\n\n  private async doReadTree(\n    archiveUrl: string,\n    sha: string,\n    subpath: string,\n    init: RequestInit,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    // archive_url looks like \"https://api.github.com/repos/owner/repo/{archive_format}{/ref}\"\n    const archive = await this.fetchResponse(\n      archiveUrl\n        .replace('{archive_format}', 'tarball')\n        .replace('{/ref}', `/${sha}`),\n      init,\n    );\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      // TODO(Rugvip): Underlying implementation of fetch will be node-fetch, we probably want\n      //               to stick to using that in exclusively backend code.\n      stream: Readable.from(archive.body),\n      subpath,\n      etag: sha,\n      filter: options?.filter,\n    });\n  }\n\n  private async doSearch(\n    url: string,\n    treesUrl: string,\n    archiveUrl: string,\n    sha: string,\n    query: string,\n    init: RequestInit,\n  ): Promise<UrlReaderServiceSearchResponseFile[]> {\n    function pathToUrl(path: string): string {\n      // TODO(freben): Use the integration package facility for this instead\n      // pathname starts as /backstage/backstage/blob/master/<path>\n      const updated = new URL(url);\n      const base = updated.pathname.split('/').slice(1, 5).join('/');\n      updated.pathname = `${base}/${path}`;\n      return updated.toString();\n    }\n\n    const matcher = new Minimatch(query.replace(/^\\/+/, ''));\n\n    // trees_url looks like \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\"\n    const recursiveTree: GhTreeResponse = await this.fetchJson(\n      treesUrl.replace('{/sha}', `/${sha}?recursive=true`),\n      init,\n    );\n\n    // The simple case is that we got the entire tree in a single operation.\n    if (!recursiveTree.truncated) {\n      const matching = recursiveTree.tree.filter(\n        item =>\n          item.type === 'blob' &&\n          item.path &&\n          item.url &&\n          matcher.match(item.path),\n      );\n\n      return matching.map(item => ({\n        url: pathToUrl(item.path!),\n        content: async () => {\n          const blob: GhBlobResponse = await this.fetchJson(item.url!, init);\n          return Buffer.from(blob.content, 'base64');\n        },\n      }));\n    }\n\n    // For larger repos, we leverage readTree and filter through that instead\n    const tree = await this.doReadTree(archiveUrl, sha, '', init, {\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return files.map(file => ({\n      url: pathToUrl(file.path),\n      content: file.content,\n      lastModifiedAt: file.lastModifiedAt,\n    }));\n  }\n\n  private async getRepoDetails(\n    url: string,\n    options?: { token?: string },\n  ): Promise<{\n    commitSha: string;\n    repo: {\n      archive_url: string;\n      trees_url: string;\n    };\n  }> {\n    const parsed = parseGitUrl(url);\n    const { ref, full_name } = parsed;\n\n    const credentials = await this.getCredentials(url, options);\n    const { headers } = credentials;\n\n    const commitStatus: GhCombinedCommitStatusResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${full_name}/commits/${\n        ref || (await this.getDefaultBranch(full_name, credentials))\n      }/status?per_page=0`,\n      { headers },\n    );\n\n    return {\n      commitSha: commitStatus.sha,\n      repo: commitStatus.repository,\n    };\n  }\n\n  private async getDefaultBranch(\n    repoFullName: string,\n    credentials: GithubCredentials,\n  ): Promise<string> {\n    const repo: GhRepoResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${repoFullName}`,\n      { headers: credentials.headers },\n    );\n\n    return repo.default_branch;\n  }\n\n  private async fetchResponse(\n    url: string | URL,\n    init: RequestInit,\n  ): Promise<Response> {\n    const urlAsString = url.toString();\n    const response = await fetch(urlAsString, init);\n\n    if (!response.ok) {\n      let message = `Request failed for ${urlAsString}, ${response.status} ${response.statusText}`;\n\n      if (response.status === 304) {\n        throw new NotModifiedError();\n      }\n\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n\n      // GitHub returns a 403 response with a couple of headers indicating rate\n      // limit status. See more in the GitHub docs:\n      // https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\n      if (this.integration.parseRateLimitInfo(response).isRateLimited) {\n        message += ' (rate limit exceeded)';\n      }\n\n      throw new Error(message);\n    }\n\n    return response;\n  }\n\n  private async fetchJson(url: string | URL, init: RequestInit): Promise<any> {\n    const response = await this.fetchResponse(url, init);\n    return await response.json();\n  }\n}\n"],"names":["ScmIntegrations","DefaultGithubCredentialsProvider","getGithubFileFetchUrl","ReadUrlResponseFactory","parseLastModified","NotModifiedError","parseGitUrl","isGlob","assertError","Readable","Minimatch","fetch","NotFoundError"],"mappings":"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"}