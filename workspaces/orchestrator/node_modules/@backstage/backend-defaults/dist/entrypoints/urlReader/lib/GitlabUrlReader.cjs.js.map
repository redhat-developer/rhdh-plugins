{"version":3,"file":"GitlabUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GitlabUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// NOTE(freben): Intentionally uses node-fetch because of https://github.com/backstage/backstage/issues/28190\nimport fetch, { Response } from 'node-fetch';\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  assertError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport {\n  getGitLabFileFetchUrl,\n  getGitLabIntegrationRelativePath,\n  getGitLabRequestOptions,\n  GitLabIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd, trimStart } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files on GitLab.\n *\n * @public\n */\nexport class GitlabUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.gitlab.list().map(integration => {\n      const reader = new GitlabUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GitLabIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter, signal, token } = options ?? {};\n    const isArtifact = url.includes('/-/jobs/artifacts/');\n    const builtUrl = await this.getGitlabFetchUrl(url, token);\n\n    let response: Response;\n    try {\n      response = await fetch(builtUrl, {\n        headers: {\n          ...getGitLabRequestOptions(this.integration.config, token).headers,\n          ...(etag && !isArtifact && { 'If-None-Match': etag }),\n          ...(lastModifiedAfter &&\n            !isArtifact && {\n              'If-Modified-Since': lastModifiedAfter.toUTCString(),\n            }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n        lastModifiedAt: parseLastModified(\n          response.headers.get('Last-Modified'),\n        ),\n      });\n    }\n\n    const message = `${url} could not be read as ${builtUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { etag, signal, token } = options ?? {};\n    const { ref, full_name, filepath } = parseGitUrl(url);\n\n    let repoFullName = full_name;\n\n    const relativePath = getGitLabIntegrationRelativePath(\n      this.integration.config,\n    );\n\n    // Considering self hosted gitlab with relative\n    // assuming '/gitlab' is the relative path\n    // from: /gitlab/repo/project\n    // to: repo/project\n    if (relativePath) {\n      const rectifiedRelativePath = `${trimStart(relativePath, '/')}/`;\n      repoFullName = full_name.replace(rectifiedRelativePath, '');\n    }\n\n    // Use GitLab API to get the default branch\n    // encodeURIComponent is required for GitLab API\n    // https://docs.gitlab.com/ee/api/README.html#namespaced-path-encoding\n    const projectGitlabResponse = await fetch(\n      new URL(\n        `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n          repoFullName,\n        )}`,\n      ).toString(),\n      getGitLabRequestOptions(this.integration.config, token),\n    );\n    if (!projectGitlabResponse.ok) {\n      const msg = `Failed to read tree from ${url}, ${projectGitlabResponse.status} ${projectGitlabResponse.statusText}`;\n      if (projectGitlabResponse.status === 404) {\n        throw new NotFoundError(msg);\n      }\n      throw new Error(msg);\n    }\n    const projectGitlabResponseJson = await projectGitlabResponse.json();\n\n    // ref is an empty string if no branch is set in provided url to readTree.\n    const branch = ref || projectGitlabResponseJson.default_branch;\n\n    // Fetch the latest commit that modifies the filepath in the provided or default branch\n    // to compare against the provided sha.\n    const commitsReqParams = new URLSearchParams();\n    commitsReqParams.set('ref_name', branch);\n    if (!!filepath) {\n      commitsReqParams.set('path', filepath);\n    }\n    const commitsGitlabResponse = await fetch(\n      new URL(\n        `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n          repoFullName,\n        )}/repository/commits?${commitsReqParams.toString()}`,\n      ).toString(),\n      {\n        ...getGitLabRequestOptions(this.integration.config, token),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      },\n    );\n    if (!commitsGitlabResponse.ok) {\n      const message = `Failed to read tree (branch) from ${url}, ${commitsGitlabResponse.status} ${commitsGitlabResponse.statusText}`;\n      if (commitsGitlabResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commitSha = (await commitsGitlabResponse.json())[0]?.id ?? '';\n    if (etag && etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const archiveReqParams = new URLSearchParams();\n    archiveReqParams.set('sha', branch);\n    if (!!filepath) {\n      archiveReqParams.set('path', filepath);\n    }\n    // https://docs.gitlab.com/ee/api/repositories.html#get-file-archive\n    const archiveGitLabResponse = await fetch(\n      `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n        repoFullName,\n      )}/repository/archive?${archiveReqParams.toString()}`,\n      {\n        ...getGitLabRequestOptions(this.integration.config, token),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      },\n    );\n    if (!archiveGitLabResponse.ok) {\n      const message = `Failed to read tree (archive) from ${url}, ${archiveGitLabResponse.status} ${archiveGitLabResponse.statusText}`;\n      if (archiveGitLabResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: Readable.from(archiveGitLabResponse.body),\n      subpath: filepath,\n      etag: commitSha,\n      filter: options?.filter,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    // If it's a direct URL we use readUrl instead\n    if (!filepath?.match(/[*?]/)) {\n      try {\n        const data = await this.readUrl(url, options);\n\n        return {\n          files: [\n            {\n              url: url,\n              content: data.buffer,\n              lastModifiedAt: data.lastModifiedAt,\n            },\n          ],\n          etag: data.etag ?? '',\n        };\n      } catch (error) {\n        assertError(error);\n        if (error.name === 'NotFoundError') {\n          return {\n            files: [],\n            etag: '',\n          };\n        }\n        throw error;\n      }\n    }\n\n    const staticPart = this.getStaticPart(filepath);\n    const matcher = new Minimatch(filepath);\n    const treeUrl = trimEnd(url.replace(filepath, staticPart), `/`);\n    const pathPrefix = staticPart ? `${staticPart}/` : '';\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      signal: options?.signal,\n      filter: path => matcher.match(`${pathPrefix}${path}`),\n    });\n\n    const files = await tree.files();\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${pathPrefix}${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  /**\n   * This function splits the input globPattern string into segments using the  path separator /. It then iterates over\n   * the segments from the end of the array towards the beginning, checking if the concatenated string up to that\n   * segment matches the original globPattern using the minimatch function. If a match is found, it continues iterating.\n   * If no match is found, it returns the concatenated string up to the current segment, which is the static part of the\n   * glob pattern.\n   *\n   * E.g. `catalog/foo/*.yaml` will return `catalog/foo`.\n   *\n   * @param globPattern - the glob pattern\n   */\n  private getStaticPart(globPattern: string) {\n    const segments = globPattern.split('/');\n    let i = segments.length;\n    while (\n      i > 0 &&\n      new Minimatch(segments.slice(0, i).join('/')).match(globPattern)\n    ) {\n      i--;\n    }\n    return segments.slice(0, i).join('/');\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `gitlab{host=${host},authed=${Boolean(token)}}`;\n  }\n\n  private async getGitlabFetchUrl(\n    target: string,\n    token?: string,\n  ): Promise<string> {\n    // If the target is for a job artifact then go down that path\n    const targetUrl = new URL(target);\n    if (targetUrl.pathname.includes('/-/jobs/artifacts/')) {\n      return this.getGitlabArtifactFetchUrl(targetUrl, token).then(value =>\n        value.toString(),\n      );\n    }\n    // Default to the old behavior of assuming the url is for a file\n    return getGitLabFileFetchUrl(target, this.integration.config, token);\n  }\n\n  // convert urls of the form:\n  //    https://example.com/<namespace>/<project>/-/jobs/artifacts/<ref>/raw/<path_to_file>?job=<job_name>\n  // to urls of the form:\n  //    https://example.com/api/v4/projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path?job=<job_name>\n  private async getGitlabArtifactFetchUrl(\n    target: URL,\n    token?: string,\n  ): Promise<URL> {\n    if (!target.pathname.includes('/-/jobs/artifacts/')) {\n      throw new Error('Unable to process url as an GitLab artifact');\n    }\n    try {\n      const [namespaceAndProject, ref] =\n        target.pathname.split('/-/jobs/artifacts/');\n      const projectPath = new URL(target);\n      projectPath.pathname = namespaceAndProject;\n      const projectId = await this.resolveProjectToId(projectPath, token);\n      const relativePath = getGitLabIntegrationRelativePath(\n        this.integration.config,\n      );\n      const newUrl = new URL(target);\n      newUrl.pathname = `${relativePath}/api/v4/projects/${projectId}/jobs/artifacts/${ref}`;\n      return newUrl;\n    } catch (e) {\n      throw new Error(\n        `Unable to translate GitLab artifact URL: ${target}, ${e}`,\n      );\n    }\n  }\n\n  private async resolveProjectToId(\n    pathToProject: URL,\n    token?: string,\n  ): Promise<number> {\n    let project = pathToProject.pathname;\n    // Check relative path exist and remove it if so\n    const relativePath = getGitLabIntegrationRelativePath(\n      this.integration.config,\n    );\n    if (relativePath) {\n      project = project.replace(relativePath, '');\n    }\n    // Trim an initial / if it exists\n    project = project.replace(/^\\//, '');\n    const result = await fetch(\n      `${\n        pathToProject.origin\n      }${relativePath}/api/v4/projects/${encodeURIComponent(project)}`,\n      getGitLabRequestOptions(this.integration.config, token),\n    );\n    const data = await result.json();\n    if (!result.ok) {\n      if (result.status === 401) {\n        throw new Error(\n          'GitLab Error: 401 - Unauthorized. The access token used is either expired, or does not have permission to read the project',\n        );\n      }\n\n      throw new Error(`Gitlab error: ${data.error}, ${data.error_description}`);\n    }\n    return Number(data.id);\n  }\n}\n"],"names":["ScmIntegrations","fetch","getGitLabRequestOptions","NotModifiedError","ReadUrlResponseFactory","parseLastModified","NotFoundError","parseGitUrl","getGitLabIntegrationRelativePath","trimStart","Readable","assertError","Minimatch","trimEnd","getGitLabFileFetchUrl"],"mappings":"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"}