{"version":3,"file":"LocalTaskWorker.cjs.js","sources":["../../../../src/entrypoints/scheduler/lib/LocalTaskWorker.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { SchedulerServiceTaskFunction } from '@backstage/backend-plugin-api';\nimport { ConflictError } from '@backstage/errors';\nimport { CronTime } from 'cron';\nimport { DateTime, Duration } from 'luxon';\nimport { TaskSettingsV2, TaskApiTasksResponse } from './types';\nimport { delegateAbortController, serializeError, sleep } from './util';\n\n/**\n * Implements tasks that run locally without cross-host collaboration.\n *\n * @private\n */\nexport class LocalTaskWorker {\n  private abortWait: AbortController | undefined;\n  #taskState: Exclude<TaskApiTasksResponse['taskState'], null> = {\n    status: 'idle',\n  };\n  #workerState: TaskApiTasksResponse['workerState'] = {\n    status: 'idle',\n  };\n\n  constructor(\n    private readonly taskId: string,\n    private readonly fn: SchedulerServiceTaskFunction,\n    private readonly logger: LoggerService,\n  ) {}\n\n  start(settings: TaskSettingsV2, options: { signal: AbortSignal }) {\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n\n    (async () => {\n      let attemptNum = 1;\n      for (;;) {\n        try {\n          await this.performInitialWait(settings, options.signal);\n\n          while (!options.signal.aborted) {\n            const startTime = process.hrtime();\n            await this.runOnce(settings, options.signal);\n            const timeTaken = process.hrtime(startTime);\n            await this.waitUntilNext(\n              settings,\n              (timeTaken[0] + timeTaken[1] / 1e9) * 1000,\n              options.signal,\n            );\n          }\n\n          this.logger.info(`Task worker finished: ${this.taskId}`);\n          attemptNum = 0;\n          break;\n        } catch (e) {\n          attemptNum += 1;\n          this.logger.warn(\n            `Task worker failed unexpectedly, attempt number ${attemptNum}, ${e}`,\n          );\n          await sleep(Duration.fromObject({ seconds: 1 }));\n        }\n      }\n    })();\n  }\n\n  trigger(): void {\n    if (!this.abortWait) {\n      throw new ConflictError(`Task ${this.taskId} is currently running`);\n    }\n    this.abortWait.abort();\n  }\n\n  taskState(): TaskApiTasksResponse['taskState'] {\n    return this.#taskState;\n  }\n\n  workerState(): TaskApiTasksResponse['workerState'] {\n    return this.#workerState;\n  }\n\n  /**\n   * Does the once-at-startup initial wait, if configured.\n   */\n  private async performInitialWait(\n    settings: TaskSettingsV2,\n    signal: AbortSignal,\n  ): Promise<void> {\n    if (settings.initialDelayDuration) {\n      const parsedDuration = Duration.fromISO(settings.initialDelayDuration);\n\n      this.#taskState = {\n        status: 'idle',\n        startsAt: DateTime.utc().plus(parsedDuration).toISO()!,\n        lastRunEndedAt: this.#taskState.lastRunEndedAt,\n        lastRunError: this.#taskState.lastRunError,\n      };\n      this.#workerState = {\n        status: 'initial-wait',\n      };\n\n      await this.sleep(parsedDuration, signal);\n    }\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion.\n   */\n  private async runOnce(\n    settings: TaskSettingsV2,\n    signal: AbortSignal,\n  ): Promise<void> {\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutDuration = Duration.fromISO(settings.timeoutAfterDuration);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, timeoutDuration.as('milliseconds'));\n\n    this.#taskState = {\n      status: 'running',\n      startedAt: DateTime.utc().toISO()!,\n      timesOutAt: DateTime.utc().plus(timeoutDuration).toISO()!,\n      lastRunEndedAt: this.#taskState.lastRunEndedAt,\n      lastRunError: this.#taskState.lastRunError,\n    };\n    this.#workerState = {\n      status: 'running',\n    };\n\n    try {\n      await this.fn(taskAbortController.signal);\n      this.#taskState.lastRunEndedAt = DateTime.utc().toISO()!;\n      this.#taskState.lastRunError = undefined;\n    } catch (e) {\n      this.#taskState.lastRunEndedAt = DateTime.utc().toISO()!;\n      this.#taskState.lastRunError = serializeError(e);\n    }\n\n    // release resources\n    clearTimeout(timeoutHandle);\n    taskAbortController.abort();\n  }\n\n  /**\n   * Sleeps until it's time to run the task again.\n   */\n  private async waitUntilNext(\n    settings: TaskSettingsV2,\n    lastRunMillis: number,\n    signal: AbortSignal,\n  ) {\n    if (signal.aborted) {\n      return;\n    }\n\n    const isCron = !settings.cadence.startsWith('P');\n    let dt: number;\n\n    if (isCron) {\n      const nextRun = +new CronTime(settings.cadence).sendAt().toJSDate();\n      dt = nextRun - Date.now();\n    } else {\n      dt =\n        Duration.fromISO(settings.cadence).as('milliseconds') - lastRunMillis;\n    }\n\n    dt = Math.max(dt, 0);\n    const startsAt = DateTime.now().plus(Duration.fromMillis(dt));\n\n    this.#taskState = {\n      status: 'idle',\n      startsAt: startsAt.toISO()!,\n      lastRunEndedAt: this.#taskState.lastRunEndedAt,\n      lastRunError: this.#taskState.lastRunError,\n    };\n    this.#workerState = {\n      status: 'idle',\n    };\n\n    this.logger.debug(\n      `task: ${this.taskId} will next occur around ${startsAt}`,\n    );\n\n    await this.sleep(Duration.fromMillis(dt), signal);\n  }\n\n  private async sleep(\n    duration: Duration,\n    abortSignal: AbortSignal,\n  ): Promise<void> {\n    this.abortWait = delegateAbortController(abortSignal);\n    await sleep(duration, this.abortWait.signal);\n    this.abortWait.abort(); // cleans up resources\n    this.abortWait = undefined;\n  }\n}\n"],"names":["sleep","Duration","ConflictError","DateTime","delegateAbortController","serializeError","CronTime"],"mappings":";;;;;;;AA6BO,MAAM,eAAA,CAAgB;AAAA,EAS3B,WAAA,CACmB,MAAA,EACA,EAAA,EACA,MAAA,EACjB;AAHiB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,IAAA,CAAA,EAAA,GAAA,EAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAAA,EAChB;AAAA,EAZK,SAAA;AAAA,EACR,UAAA,GAA+D;AAAA,IAC7D,MAAA,EAAQ;AAAA,GACV;AAAA,EACA,YAAA,GAAoD;AAAA,IAClD,MAAA,EAAQ;AAAA,GACV;AAAA,EAQA,KAAA,CAAM,UAA0B,OAAA,EAAkC;AAChE,IAAA,IAAA,CAAK,MAAA,CAAO,IAAA;AAAA,MACV,yBAAyB,IAAA,CAAK,MAAM,KAAK,IAAA,CAAK,SAAA,CAAU,QAAQ,CAAC,CAAA;AAAA,KACnE;AAEA,IAAA,CAAC,YAAY;AACX,MAAA,IAAI,UAAA,GAAa,CAAA;AACjB,MAAA,WAAS;AACP,QAAA,IAAI;AACF,UAAA,MAAM,IAAA,CAAK,kBAAA,CAAmB,QAAA,EAAU,OAAA,CAAQ,MAAM,CAAA;AAEtD,UAAA,OAAO,CAAC,OAAA,CAAQ,MAAA,CAAO,OAAA,EAAS;AAC9B,YAAA,MAAM,SAAA,GAAY,QAAQ,MAAA,EAAO;AACjC,YAAA,MAAM,IAAA,CAAK,OAAA,CAAQ,QAAA,EAAU,OAAA,CAAQ,MAAM,CAAA;AAC3C,YAAA,MAAM,SAAA,GAAY,OAAA,CAAQ,MAAA,CAAO,SAAS,CAAA;AAC1C,YAAA,MAAM,IAAA,CAAK,aAAA;AAAA,cACT,QAAA;AAAA,cAAA,CACC,UAAU,CAAC,CAAA,GAAI,SAAA,CAAU,CAAC,IAAI,GAAA,IAAO,GAAA;AAAA,cACtC,OAAA,CAAQ;AAAA,aACV;AAAA,UACF;AAEA,UAAA,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,CAAA,sBAAA,EAAyB,IAAA,CAAK,MAAM,CAAA,CAAE,CAAA;AACvD,UAAA,UAAA,GAAa,CAAA;AACb,UAAA;AAAA,QACF,SAAS,CAAA,EAAG;AACV,UAAA,UAAA,IAAc,CAAA;AACd,UAAA,IAAA,CAAK,MAAA,CAAO,IAAA;AAAA,YACV,CAAA,gDAAA,EAAmD,UAAU,CAAA,EAAA,EAAK,CAAC,CAAA;AAAA,WACrE;AACA,UAAA,MAAMA,WAAMC,cAAA,CAAS,UAAA,CAAW,EAAE,OAAA,EAAS,CAAA,EAAG,CAAC,CAAA;AAAA,QACjD;AAAA,MACF;AAAA,IACF,CAAA,GAAG;AAAA,EACL;AAAA,EAEA,OAAA,GAAgB;AACd,IAAA,IAAI,CAAC,KAAK,SAAA,EAAW;AACnB,MAAA,MAAM,IAAIC,oBAAA,CAAc,CAAA,KAAA,EAAQ,IAAA,CAAK,MAAM,CAAA,qBAAA,CAAuB,CAAA;AAAA,IACpE;AACA,IAAA,IAAA,CAAK,UAAU,KAAA,EAAM;AAAA,EACvB;AAAA,EAEA,SAAA,GAA+C;AAC7C,IAAA,OAAO,IAAA,CAAK,UAAA;AAAA,EACd;AAAA,EAEA,WAAA,GAAmD;AACjD,IAAA,OAAO,IAAA,CAAK,YAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,kBAAA,CACZ,QAAA,EACA,MAAA,EACe;AACf,IAAA,IAAI,SAAS,oBAAA,EAAsB;AACjC,MAAA,MAAM,cAAA,GAAiBD,cAAA,CAAS,OAAA,CAAQ,QAAA,CAAS,oBAAoB,CAAA;AAErE,MAAA,IAAA,CAAK,UAAA,GAAa;AAAA,QAChB,MAAA,EAAQ,MAAA;AAAA,QACR,UAAUE,cAAA,CAAS,GAAA,GAAM,IAAA,CAAK,cAAc,EAAE,KAAA,EAAM;AAAA,QACpD,cAAA,EAAgB,KAAK,UAAA,CAAW,cAAA;AAAA,QAChC,YAAA,EAAc,KAAK,UAAA,CAAW;AAAA,OAChC;AACA,MAAA,IAAA,CAAK,YAAA,GAAe;AAAA,QAClB,MAAA,EAAQ;AAAA,OACV;AAEA,MAAA,MAAM,IAAA,CAAK,KAAA,CAAM,cAAA,EAAgB,MAAM,CAAA;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,OAAA,CACZ,QAAA,EACA,MAAA,EACe;AAGf,IAAA,MAAM,mBAAA,GAAsBC,6BAAwB,MAAM,CAAA;AAC1D,IAAA,MAAM,eAAA,GAAkBH,cAAA,CAAS,OAAA,CAAQ,QAAA,CAAS,oBAAoB,CAAA;AACtE,IAAA,MAAM,aAAA,GAAgB,WAAW,MAAM;AACrC,MAAA,mBAAA,CAAoB,KAAA,EAAM;AAAA,IAC5B,CAAA,EAAG,eAAA,CAAgB,EAAA,CAAG,cAAc,CAAC,CAAA;AAErC,IAAA,IAAA,CAAK,UAAA,GAAa;AAAA,MAChB,MAAA,EAAQ,SAAA;AAAA,MACR,SAAA,EAAWE,cAAA,CAAS,GAAA,EAAI,CAAE,KAAA,EAAM;AAAA,MAChC,YAAYA,cAAA,CAAS,GAAA,GAAM,IAAA,CAAK,eAAe,EAAE,KAAA,EAAM;AAAA,MACvD,cAAA,EAAgB,KAAK,UAAA,CAAW,cAAA;AAAA,MAChC,YAAA,EAAc,KAAK,UAAA,CAAW;AAAA,KAChC;AACA,IAAA,IAAA,CAAK,YAAA,GAAe;AAAA,MAClB,MAAA,EAAQ;AAAA,KACV;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,IAAA,CAAK,EAAA,CAAG,mBAAA,CAAoB,MAAM,CAAA;AACxC,MAAA,IAAA,CAAK,UAAA,CAAW,cAAA,GAAiBA,cAAA,CAAS,GAAA,GAAM,KAAA,EAAM;AACtD,MAAA,IAAA,CAAK,WAAW,YAAA,GAAe,KAAA,CAAA;AAAA,IACjC,SAAS,CAAA,EAAG;AACV,MAAA,IAAA,CAAK,UAAA,CAAW,cAAA,GAAiBA,cAAA,CAAS,GAAA,GAAM,KAAA,EAAM;AACtD,MAAA,IAAA,CAAK,UAAA,CAAW,YAAA,GAAeE,mBAAA,CAAe,CAAC,CAAA;AAAA,IACjD;AAGA,IAAA,YAAA,CAAa,aAAa,CAAA;AAC1B,IAAA,mBAAA,CAAoB,KAAA,EAAM;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,aAAA,CACZ,QAAA,EACA,aAAA,EACA,MAAA,EACA;AACA,IAAA,IAAI,OAAO,OAAA,EAAS;AAClB,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,MAAA,GAAS,CAAC,QAAA,CAAS,OAAA,CAAQ,WAAW,GAAG,CAAA;AAC/C,IAAA,IAAI,EAAA;AAEJ,IAAA,IAAI,MAAA,EAAQ;AACV,MAAA,MAAM,OAAA,GAAU,CAAC,IAAIC,aAAA,CAAS,SAAS,OAAO,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAClE,MAAA,EAAA,GAAK,OAAA,GAAU,KAAK,GAAA,EAAI;AAAA,IAC1B,CAAA,MAAO;AACL,MAAA,EAAA,GACEL,eAAS,OAAA,CAAQ,QAAA,CAAS,OAAO,CAAA,CAAE,EAAA,CAAG,cAAc,CAAA,GAAI,aAAA;AAAA,IAC5D;AAEA,IAAA,EAAA,GAAK,IAAA,CAAK,GAAA,CAAI,EAAA,EAAI,CAAC,CAAA;AACnB,IAAA,MAAM,QAAA,GAAWE,eAAS,GAAA,EAAI,CAAE,KAAKF,cAAA,CAAS,UAAA,CAAW,EAAE,CAAC,CAAA;AAE5D,IAAA,IAAA,CAAK,UAAA,GAAa;AAAA,MAChB,MAAA,EAAQ,MAAA;AAAA,MACR,QAAA,EAAU,SAAS,KAAA,EAAM;AAAA,MACzB,cAAA,EAAgB,KAAK,UAAA,CAAW,cAAA;AAAA,MAChC,YAAA,EAAc,KAAK,UAAA,CAAW;AAAA,KAChC;AACA,IAAA,IAAA,CAAK,YAAA,GAAe;AAAA,MAClB,MAAA,EAAQ;AAAA,KACV;AAEA,IAAA,IAAA,CAAK,MAAA,CAAO,KAAA;AAAA,MACV,CAAA,MAAA,EAAS,IAAA,CAAK,MAAM,CAAA,wBAAA,EAA2B,QAAQ,CAAA;AAAA,KACzD;AAEA,IAAA,MAAM,KAAK,KAAA,CAAMA,cAAA,CAAS,UAAA,CAAW,EAAE,GAAG,MAAM,CAAA;AAAA,EAClD;AAAA,EAEA,MAAc,KAAA,CACZ,QAAA,EACA,WAAA,EACe;AACf,IAAA,IAAA,CAAK,SAAA,GAAYG,6BAAwB,WAAW,CAAA;AACpD,IAAA,MAAMJ,UAAA,CAAM,QAAA,EAAU,IAAA,CAAK,SAAA,CAAU,MAAM,CAAA;AAC3C,IAAA,IAAA,CAAK,UAAU,KAAA,EAAM;AACrB,IAAA,IAAA,CAAK,SAAA,GAAY,MAAA;AAAA,EACnB;AACF;;;;"}