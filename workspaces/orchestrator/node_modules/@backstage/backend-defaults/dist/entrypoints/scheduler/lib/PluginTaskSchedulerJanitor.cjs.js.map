{"version":3,"file":"PluginTaskSchedulerJanitor.cjs.js","sources":["../../../../src/entrypoints/scheduler/lib/PluginTaskSchedulerJanitor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { Knex } from 'knex';\nimport { Duration } from 'luxon';\nimport { DB_TASKS_TABLE, DbTasksRow } from '../database/tables';\nimport { serializeError, sleep } from './util';\n\n/**\n * Makes sure to auto-expire and clean up things that time out or for other\n * reasons should not be left lingering.\n */\nexport class PluginTaskSchedulerJanitor {\n  private readonly knex: Knex;\n  private readonly waitBetweenRuns: Duration;\n  private readonly logger: LoggerService;\n\n  constructor(options: {\n    knex: Knex;\n    waitBetweenRuns: Duration;\n    logger: LoggerService;\n  }) {\n    this.knex = options.knex;\n    this.waitBetweenRuns = options.waitBetweenRuns;\n    this.logger = options.logger;\n  }\n\n  async start(abortSignal?: AbortSignal) {\n    while (!abortSignal?.aborted) {\n      try {\n        await this.runOnce();\n      } catch (e) {\n        this.logger.warn(`Error while performing janitorial tasks, ${e}`);\n      }\n\n      await sleep(this.waitBetweenRuns, abortSignal);\n    }\n  }\n\n  private async runOnce() {\n    const dbNull = this.knex.raw('null');\n    const configClient = this.knex.client.config.client;\n\n    let tasks: Array<{ id: string }>;\n    if (configClient.includes('sqlite3') || configClient.includes('mysql')) {\n      tasks = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n        .select('id')\n        .where('current_run_expires_at', '<', this.knex.fn.now());\n      await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n        .whereIn(\n          'id',\n          tasks.map(t => t.id),\n        )\n        .update({\n          current_run_ticket: dbNull,\n          current_run_started_at: dbNull,\n          current_run_expires_at: dbNull,\n          last_run_ended_at: this.knex.fn.now(),\n          last_run_error_json: serializeError(new Error('Task timed out')),\n        });\n    } else {\n      tasks = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n        .where('current_run_expires_at', '<', this.knex.fn.now())\n        .update({\n          current_run_ticket: dbNull,\n          current_run_started_at: dbNull,\n          current_run_expires_at: dbNull,\n          last_run_ended_at: this.knex.fn.now(),\n          last_run_error_json: serializeError(new Error('Task timed out')),\n        })\n        .returning(['id']);\n    }\n\n    // In rare cases, knex drivers may ignore \"returning\", and return the number\n    // of rows changed instead\n    if (typeof tasks === 'number') {\n      if (tasks > 0) {\n        this.logger.warn(`${tasks} tasks timed out and were lost`);\n      }\n    } else {\n      for (const { id } of tasks) {\n        this.logger.warn(`Task timed out and was lost: ${id}`);\n      }\n    }\n  }\n}\n"],"names":["sleep","DB_TASKS_TABLE","serializeError"],"mappings":";;;;;AA0BO,MAAM,0BAAA,CAA2B;AAAA,EACrB,IAAA;AAAA,EACA,eAAA;AAAA,EACA,MAAA;AAAA,EAEjB,YAAY,OAAA,EAIT;AACD,IAAA,IAAA,CAAK,OAAO,OAAA,CAAQ,IAAA;AACpB,IAAA,IAAA,CAAK,kBAAkB,OAAA,CAAQ,eAAA;AAC/B,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,MAAA;AAAA,EACxB;AAAA,EAEA,MAAM,MAAM,WAAA,EAA2B;AACrC,IAAA,OAAO,CAAC,aAAa,OAAA,EAAS;AAC5B,MAAA,IAAI;AACF,QAAA,MAAM,KAAK,OAAA,EAAQ;AAAA,MACrB,SAAS,CAAA,EAAG;AACV,QAAA,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,CAAA,yCAAA,EAA4C,CAAC,CAAA,CAAE,CAAA;AAAA,MAClE;AAEA,MAAA,MAAMA,UAAA,CAAM,IAAA,CAAK,eAAA,EAAiB,WAAW,CAAA;AAAA,IAC/C;AAAA,EACF;AAAA,EAEA,MAAc,OAAA,GAAU;AACtB,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,IAAA,CAAK,GAAA,CAAI,MAAM,CAAA;AACnC,IAAA,MAAM,YAAA,GAAe,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,MAAA,CAAO,MAAA;AAE7C,IAAA,IAAI,KAAA;AACJ,IAAA,IAAI,aAAa,QAAA,CAAS,SAAS,KAAK,YAAA,CAAa,QAAA,CAAS,OAAO,CAAA,EAAG;AACtE,MAAA,KAAA,GAAQ,MAAM,IAAA,CAAK,IAAA,CAAiBC,qBAAc,EAC/C,MAAA,CAAO,IAAI,CAAA,CACX,KAAA,CAAM,0BAA0B,GAAA,EAAK,IAAA,CAAK,IAAA,CAAK,EAAA,CAAG,KAAK,CAAA;AAC1D,MAAA,MAAM,IAAA,CAAK,IAAA,CAAiBA,qBAAc,CAAA,CACvC,OAAA;AAAA,QACC,IAAA;AAAA,QACA,KAAA,CAAM,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,EAAE;AAAA,QAEpB,MAAA,CAAO;AAAA,QACN,kBAAA,EAAoB,MAAA;AAAA,QACpB,sBAAA,EAAwB,MAAA;AAAA,QACxB,sBAAA,EAAwB,MAAA;AAAA,QACxB,iBAAA,EAAmB,IAAA,CAAK,IAAA,CAAK,EAAA,CAAG,GAAA,EAAI;AAAA,QACpC,mBAAA,EAAqBC,mBAAA,CAAe,IAAI,KAAA,CAAM,gBAAgB,CAAC;AAAA,OAChE,CAAA;AAAA,IACL,CAAA,MAAO;AACL,MAAA,KAAA,GAAQ,MAAM,IAAA,CAAK,IAAA,CAAiBD,qBAAc,EAC/C,KAAA,CAAM,wBAAA,EAA0B,GAAA,EAAK,IAAA,CAAK,IAAA,CAAK,EAAA,CAAG,GAAA,EAAK,EACvD,MAAA,CAAO;AAAA,QACN,kBAAA,EAAoB,MAAA;AAAA,QACpB,sBAAA,EAAwB,MAAA;AAAA,QACxB,sBAAA,EAAwB,MAAA;AAAA,QACxB,iBAAA,EAAmB,IAAA,CAAK,IAAA,CAAK,EAAA,CAAG,GAAA,EAAI;AAAA,QACpC,mBAAA,EAAqBC,mBAAA,CAAe,IAAI,KAAA,CAAM,gBAAgB,CAAC;AAAA,OAChE,CAAA,CACA,SAAA,CAAU,CAAC,IAAI,CAAC,CAAA;AAAA,IACrB;AAIA,IAAA,IAAI,OAAO,UAAU,QAAA,EAAU;AAC7B,MAAA,IAAI,QAAQ,CAAA,EAAG;AACb,QAAA,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,CAAA,EAAG,KAAK,CAAA,8BAAA,CAAgC,CAAA;AAAA,MAC3D;AAAA,IACF,CAAA,MAAO;AACL,MAAA,KAAA,MAAW,EAAE,EAAA,EAAG,IAAK,KAAA,EAAO;AAC1B,QAAA,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,CAAA,6BAAA,EAAgC,EAAE,CAAA,CAAE,CAAA;AAAA,MACvD;AAAA,IACF;AAAA,EACF;AACF;;;;"}