{"version":3,"file":"TaskWorker.cjs.js","sources":["../../../../src/entrypoints/scheduler/lib/TaskWorker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { CronTime } from 'cron';\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\nimport { v4 as uuid } from 'uuid';\nimport { DB_TASKS_TABLE, DbTasksRow } from '../database/tables';\nimport {\n  TaskSettingsV2,\n  taskSettingsV2Schema,\n  TaskApiTasksResponse,\n} from './types';\nimport {\n  delegateAbortController,\n  nowPlus,\n  sleep,\n  dbTime,\n  serializeError,\n} from './util';\nimport { SchedulerServiceTaskFunction } from '@backstage/backend-plugin-api';\n\nconst DEFAULT_WORK_CHECK_FREQUENCY = Duration.fromObject({ seconds: 5 });\n\n/**\n * Implements tasks that run across worker hosts, with collaborative locking.\n *\n * @private\n */\nexport class TaskWorker {\n  #workerState: TaskApiTasksResponse['workerState'] = {\n    status: 'idle',\n  };\n\n  constructor(\n    private readonly taskId: string,\n    private readonly fn: SchedulerServiceTaskFunction,\n    private readonly knex: Knex,\n    private readonly logger: LoggerService,\n    private readonly workCheckFrequency: Duration = DEFAULT_WORK_CHECK_FREQUENCY,\n  ) {}\n\n  async start(settings: TaskSettingsV2, options: { signal: AbortSignal }) {\n    try {\n      await this.persistTask(settings);\n    } catch (e) {\n      throw new Error(`Failed to persist task, ${e}`);\n    }\n\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n\n    let workCheckFrequency = this.workCheckFrequency;\n    const isDuration = settings?.cadence.startsWith('P');\n    if (isDuration) {\n      const cadence = Duration.fromISO(settings.cadence);\n      if (cadence < workCheckFrequency) {\n        workCheckFrequency = cadence;\n      }\n    }\n\n    (async () => {\n      let attemptNum = 1;\n      for (;;) {\n        try {\n          await this.performInitialWait(settings, options.signal);\n\n          while (!options.signal.aborted) {\n            const runResult = await this.runOnce(options.signal);\n            if (runResult.result === 'abort') {\n              break;\n            }\n            await sleep(workCheckFrequency, options.signal);\n          }\n\n          this.logger.info(`Task worker finished: ${this.taskId}`);\n          attemptNum = 0;\n          break;\n        } catch (e) {\n          attemptNum += 1;\n          this.logger.warn(\n            `Task worker failed unexpectedly, attempt number ${attemptNum}, ${e}`,\n          );\n          await sleep(Duration.fromObject({ seconds: 1 }));\n        }\n      }\n    })();\n  }\n\n  /**\n   * Does the once-at-startup initial wait, if configured.\n   */\n  private async performInitialWait(\n    settings: TaskSettingsV2,\n    signal: AbortSignal,\n  ): Promise<void> {\n    if (settings.initialDelayDuration) {\n      this.#workerState = {\n        status: 'initial-wait',\n      };\n      await sleep(Duration.fromISO(settings.initialDelayDuration), signal);\n    }\n    this.#workerState = {\n      status: 'idle',\n    };\n  }\n\n  static async trigger(knex: Knex, taskId: string): Promise<void> {\n    // check if task exists\n    const rows = await knex<DbTasksRow>(DB_TASKS_TABLE)\n      .select(knex.raw(1))\n      .where('id', '=', taskId);\n    if (rows.length !== 1) {\n      throw new NotFoundError(`Task ${taskId} does not exist`);\n    }\n\n    const updatedRows = await knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', taskId)\n      .whereNull('current_run_ticket')\n      .update({\n        next_run_start_at: knex.fn.now(),\n      });\n    if (updatedRows < 1) {\n      throw new ConflictError(`Task ${taskId} is currently running`);\n    }\n  }\n\n  static async taskStates(\n    knex: Knex,\n  ): Promise<Map<string, TaskApiTasksResponse['taskState']>> {\n    const rows = await knex<DbTasksRow>(DB_TASKS_TABLE);\n    return new Map(\n      rows.map(row => {\n        const startedAt = row.current_run_started_at\n          ? dbTime(row.current_run_started_at).toISO()!\n          : undefined;\n        const timesOutAt = row.current_run_expires_at\n          ? dbTime(row.current_run_expires_at).toISO()!\n          : undefined;\n        const startsAt = row.next_run_start_at\n          ? dbTime(row.next_run_start_at).toISO()!\n          : undefined;\n        const lastRunEndedAt = row.last_run_ended_at\n          ? dbTime(row.last_run_ended_at).toISO()!\n          : undefined;\n        const lastRunError = row.last_run_error_json || undefined;\n\n        return [\n          row.id,\n          startedAt\n            ? {\n                status: 'running',\n                startedAt,\n                timesOutAt,\n                lastRunEndedAt,\n                lastRunError,\n              }\n            : {\n                status: 'idle',\n                startsAt,\n                lastRunEndedAt,\n                lastRunError,\n              },\n        ];\n      }),\n    );\n  }\n\n  workerState(): TaskApiTasksResponse['workerState'] {\n    return this.#workerState;\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion, if ready.\n   *\n   * @returns The outcome of the attempt\n   */\n  private async runOnce(\n    signal: AbortSignal,\n  ): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'failed' }\n    | { result: 'completed' }\n  > {\n    const findResult = await this.findReadyTask();\n    if (\n      findResult.result === 'not-ready-yet' ||\n      findResult.result === 'abort'\n    ) {\n      return findResult;\n    }\n\n    const taskSettings = findResult.settings;\n    const ticket = uuid();\n\n    const claimed = await this.tryClaimTask(ticket, taskSettings);\n    if (!claimed) {\n      return { result: 'not-ready-yet' };\n    }\n\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, Duration.fromISO(taskSettings.timeoutAfterDuration).as('milliseconds'));\n\n    try {\n      this.#workerState = {\n        status: 'running',\n      };\n      await this.fn(taskAbortController.signal);\n      taskAbortController.abort(); // releases resources\n    } catch (e) {\n      this.logger.error(e);\n      await this.tryReleaseTask(ticket, taskSettings, e);\n      return { result: 'failed' };\n    } finally {\n      this.#workerState = {\n        status: 'idle',\n      };\n      clearTimeout(timeoutHandle);\n    }\n\n    await this.tryReleaseTask(ticket, taskSettings);\n    return { result: 'completed' };\n  }\n\n  /**\n   * Perform the initial store of the task info\n   */\n  async persistTask(settings: TaskSettingsV2) {\n    // Perform an initial parse to ensure that we will definitely be able to\n    // read it back again.\n    taskSettingsV2Schema.parse(settings);\n\n    const isManual = settings?.cadence === 'manual';\n    const isDuration = settings?.cadence.startsWith('P');\n    const isCron = !isManual && !isDuration;\n\n    let startAt: Knex.Raw | undefined;\n    let nextStartAt: Knex.Raw | undefined;\n    if (settings.initialDelayDuration) {\n      startAt = nowPlus(\n        Duration.fromISO(settings.initialDelayDuration),\n        this.knex,\n      );\n    }\n\n    if (isCron) {\n      const time = new CronTime(settings.cadence)\n        .sendAt()\n        .minus({ seconds: 1 }) // immediately, if \"* * * * * *\"\n        .toUTC();\n\n      nextStartAt = this.nextRunAtRaw(time);\n      startAt ||= nextStartAt;\n    } else if (isManual) {\n      nextStartAt = this.knex.raw('null');\n      startAt ||= nextStartAt;\n    } else {\n      startAt ||= this.knex.fn.now();\n      nextStartAt = nowPlus(Duration.fromISO(settings.cadence), this.knex);\n    }\n\n    this.logger.debug(`task: ${this.taskId} configured to run at: ${startAt}`);\n\n    // It's OK if the task already exists; if it does, just replace its\n    // settings with the new value and start the loop as usual.\n    const settingsJson = JSON.stringify(settings);\n    await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .insert({\n        id: this.taskId,\n        settings_json: settingsJson,\n        next_run_start_at: startAt,\n      })\n      .onConflict('id')\n      .merge(\n        this.knex.client.config.client.includes('mysql')\n          ? {\n              settings_json: settingsJson,\n              next_run_start_at: this.knex.raw(\n                `CASE WHEN ?? < ?? THEN ?? ELSE ?? END`,\n                [\n                  nextStartAt,\n                  'next_run_start_at',\n                  nextStartAt,\n                  'next_run_start_at',\n                ],\n              ),\n            }\n          : {\n              settings_json: this.knex.ref('excluded.settings_json'),\n              next_run_start_at: this.knex.raw(\n                `CASE WHEN ?? < ?? THEN ?? ELSE ?? END`,\n                [\n                  nextStartAt,\n                  `${DB_TASKS_TABLE}.next_run_start_at`,\n                  nextStartAt,\n                  `${DB_TASKS_TABLE}.next_run_start_at`,\n                ],\n              ),\n            },\n      );\n  }\n\n  /**\n   * Check if the task is ready to run\n   */\n  async findReadyTask(): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'ready'; settings: TaskSettingsV2 }\n  > {\n    const [row] = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .select({\n        settingsJson: 'settings_json',\n        ready: this.knex.raw(\n          `CASE\n            WHEN next_run_start_at <= ? AND current_run_ticket IS NULL THEN TRUE\n            ELSE FALSE\n          END`,\n          [this.knex.fn.now()],\n        ),\n      });\n\n    if (!row) {\n      this.logger.info(\n        'No longer able to find task; aborting and assuming that it has been unregistered or expired',\n      );\n      return { result: 'abort' };\n    } else if (!row.ready) {\n      return { result: 'not-ready-yet' };\n    }\n\n    try {\n      const obj = JSON.parse(row.settingsJson);\n      const settings = taskSettingsV2Schema.parse(obj);\n      return { result: 'ready', settings };\n    } catch (e) {\n      this.logger.info(\n        `Task \"${this.taskId}\" is no longer able to parse task settings; aborting and assuming that a ` +\n          `newer version of the task has been issued and being handled by other workers, ${e}`,\n      );\n      return { result: 'abort' };\n    }\n  }\n\n  /**\n   * Attempts to claim a task that's ready for execution, on this worker's\n   * behalf. We should not attempt to perform the work unless the claim really\n   * goes through.\n   *\n   * @param ticket - A globally unique string that changes for each invocation\n   * @param settings - The settings of the task to claim\n   * @returns True if it was successfully claimed\n   */\n  async tryClaimTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const startedAt = this.knex.fn.now();\n    const expiresAt = settings.timeoutAfterDuration\n      ? nowPlus(Duration.fromISO(settings.timeoutAfterDuration), this.knex)\n      : this.knex.raw('null');\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .whereNull('current_run_ticket')\n      .update({\n        current_run_ticket: ticket,\n        current_run_started_at: startedAt,\n        current_run_expires_at: expiresAt,\n      });\n\n    return rows === 1;\n  }\n\n  async tryReleaseTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n    error?: Error,\n  ): Promise<boolean> {\n    const isManual = settings?.cadence === 'manual';\n    const isDuration = settings?.cadence.startsWith('P');\n    const isCron = !isManual && !isDuration;\n\n    let nextRun: Knex.Raw;\n    if (isCron) {\n      const time = new CronTime(settings.cadence).sendAt().toUTC();\n      this.logger.debug(`task: ${this.taskId} will next occur around ${time}`);\n\n      nextRun = this.nextRunAtRaw(time);\n    } else if (isManual) {\n      nextRun = this.knex.raw('null');\n    } else {\n      const dt = Duration.fromISO(settings.cadence).as('seconds');\n      this.logger.debug(\n        `task: ${this.taskId} will next occur around ${DateTime.now().plus({\n          seconds: dt,\n        })}`,\n      );\n\n      if (this.knex.client.config.client.includes('sqlite3')) {\n        nextRun = this.knex.raw(\n          `max(datetime(next_run_start_at, ?), datetime('now'))`,\n          [`+${dt} seconds`],\n        );\n      } else if (this.knex.client.config.client.includes('mysql')) {\n        nextRun = this.knex.raw(\n          `greatest(next_run_start_at + interval ${dt} second, now())`,\n        );\n      } else {\n        nextRun = this.knex.raw(\n          `greatest(next_run_start_at + interval '${dt} seconds', now())`,\n        );\n      }\n    }\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .where('current_run_ticket', '=', ticket)\n      .update({\n        next_run_start_at: nextRun,\n        current_run_ticket: this.knex.raw('null'),\n        current_run_started_at: this.knex.raw('null'),\n        current_run_expires_at: this.knex.raw('null'),\n        last_run_ended_at: this.knex.fn.now(),\n        last_run_error_json: error\n          ? serializeError(error)\n          : this.knex.raw('null'),\n      });\n\n    return rows === 1;\n  }\n\n  private nextRunAtRaw(time: DateTime): Knex.Raw {\n    if (this.knex.client.config.client.includes('sqlite3')) {\n      return this.knex.raw('datetime(?)', [time.toISO()]);\n    } else if (this.knex.client.config.client.includes('mysql')) {\n      return this.knex.raw(`?`, [time.toSQL({ includeOffset: false })]);\n    }\n    return this.knex.raw(`?`, [time.toISO()]);\n  }\n}\n"],"names":["Duration","sleep","DB_TASKS_TABLE","NotFoundError","ConflictError","dbTime","uuid","delegateAbortController","taskSettingsV2Schema","nowPlus","CronTime","DateTime","serializeError"],"mappings":"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"}