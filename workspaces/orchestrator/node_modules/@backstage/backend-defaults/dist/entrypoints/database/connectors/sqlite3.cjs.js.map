{"version":3,"file":"sqlite3.cjs.js","sources":["../../../../src/entrypoints/database/connectors/sqlite3.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DevDataStore } from '@backstage/backend-dev-utils';\nimport { LifecycleService, LoggerService } from '@backstage/backend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { ensureDirSync } from 'fs-extra';\nimport knexFactory, { Knex } from 'knex';\nimport { merge, omit } from 'lodash';\nimport path from 'path';\nimport { Connector } from '../types';\nimport { mergeDatabaseConfig } from './mergeDatabaseConfig';\n\n/**\n * Creates a knex SQLite3 database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createSqliteDatabaseClient(\n  pluginId: string,\n  dbConfig: Config,\n  deps: {\n    logger: LoggerService;\n    lifecycle: LifecycleService;\n  },\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildSqliteDatabaseConfig(dbConfig, overrides);\n  const connConfig = knexConfig.connection as Knex.Sqlite3ConnectionConfig;\n\n  const filename = connConfig.filename ?? ':memory:';\n\n  // If storage on disk is used, ensure that the directory exists\n  if (filename !== ':memory:') {\n    const directory = path.dirname(filename);\n    ensureDirSync(directory);\n  }\n\n  let database: Knex;\n\n  if (deps && filename === ':memory:') {\n    // The dev store is used during watch mode to store and restore the database\n    // across reloads. It is only available when running the backend through\n    // `backstage-cli package start`.\n    const devStore = DevDataStore.get();\n\n    if (devStore) {\n      const dataKey = `sqlite3-db-${pluginId}`;\n\n      const connectionLoader = async () => {\n        // If seed data is available, use it tconnectionLoader restore the database\n        const { data: seedData } = await devStore.load(dataKey);\n\n        return {\n          ...(knexConfig.connection as Knex.Sqlite3ConnectionConfig),\n          filename: seedData ?? ':memory:',\n        };\n      };\n\n      database = knexFactory({\n        ...knexConfig,\n        connection: Object.assign(connectionLoader, {\n          // This is a workaround for the knex SQLite driver always warning when using a config loader\n          filename: ':memory:',\n        }),\n      });\n\n      // If the dev store is available we save the database state on shutdown\n      deps.lifecycle.addShutdownHook(async () => {\n        const connection = await database.client.acquireConnection();\n        const data = connection.serialize();\n        await devStore.save(dataKey, data);\n      });\n    } else {\n      database = knexFactory(knexConfig);\n    }\n  } else {\n    database = knexFactory(knexConfig);\n  }\n\n  database.client.pool.on('createSuccess', (_eventId: any, resource: any) => {\n    resource.run('PRAGMA foreign_keys = ON', () => {});\n  });\n\n  return database;\n}\n\n/**\n * Builds a knex SQLite3 connection config\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildSqliteDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n): Knex.Config {\n  const baseConfig = dbConfig.get<Knex.Config>();\n\n  // Normalize config to always contain a connection object\n  if (typeof baseConfig.connection === 'string') {\n    baseConfig.connection = { filename: baseConfig.connection };\n  }\n  if (overrides && typeof overrides.connection === 'string') {\n    overrides.connection = { filename: overrides.connection };\n  }\n\n  const config: Knex.Config = mergeDatabaseConfig(\n    {\n      connection: {},\n    },\n    baseConfig,\n    {\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n\n  return config;\n}\n\n/**\n * Provides a partial knex SQLite3 config to override database name.\n */\nexport function createSqliteNameOverride(name: string): Partial<Knex.Config> {\n  return {\n    connection: parseSqliteConnectionString(name),\n  };\n}\n\n/**\n * Produces a partial knex SQLite3 connection config with database name.\n */\nexport function parseSqliteConnectionString(\n  name: string,\n): Knex.Sqlite3ConnectionConfig {\n  return {\n    filename: name,\n  };\n}\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\nfunction normalizeConnection(\n  connection: Knex.StaticConnectionConfig | JsonObject | string | undefined,\n): Partial<Knex.StaticConnectionConfig> {\n  if (typeof connection === 'undefined' || connection === null) {\n    return {};\n  }\n\n  return typeof connection === 'string' || connection instanceof String\n    ? parseSqliteConnectionString(connection as string)\n    : connection;\n}\n\nexport class Sqlite3Connector implements Connector {\n  constructor(private readonly config: Config) {}\n\n  async getClient(\n    pluginId: string,\n    deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): Promise<Knex> {\n    const pluginConfig = new ConfigReader(\n      this.getConfigForPlugin(pluginId) as JsonObject,\n    );\n\n    const pluginDivisionMode = this.getPluginDivisionModeConfig();\n    if (pluginDivisionMode !== 'database') {\n      throw new Error(\n        `The SQLite driver does not support plugin division mode '${pluginDivisionMode}'`,\n      );\n    }\n\n    const databaseClientOverrides = mergeDatabaseConfig(\n      {},\n      this.getDatabaseOverrides(pluginId),\n    );\n\n    const client = createSqliteDatabaseClient(\n      pluginId,\n      pluginConfig,\n      deps,\n      databaseClientOverrides,\n    );\n\n    return client;\n  }\n\n  /**\n   * Provides the canonical database name for a given plugin.\n   *\n   * This method provides the effective database name which is determined using global\n   * and plugin specific database config. If no explicit database name is configured\n   * and `pluginDivisionMode` is not `schema`, this method will provide a generated name\n   * which is the pluginId prefixed with 'backstage_plugin_'. If `pluginDivisionMode` is\n   * `schema`, it will fallback to using the default database for the knex instance.\n   *\n   * @param pluginId - Lookup the database name for given plugin\n   * @returns String representing the plugin's database name\n   */\n  private getDatabaseName(pluginId: string): string | undefined {\n    const connection = this.getConnectionConfig(pluginId);\n\n    const sqliteFilename: string | undefined = (\n      connection as Knex.Sqlite3ConnectionConfig\n    ).filename;\n\n    if (sqliteFilename === ':memory:') {\n      return sqliteFilename;\n    }\n\n    const sqliteDirectory =\n      (connection as { directory?: string }).directory ?? '.';\n\n    return path.join(sqliteDirectory, sqliteFilename ?? `${pluginId}.sqlite`);\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  private getRoleConfig(pluginId: string): string | undefined {\n    return (\n      this.config.getOptionalString(`${pluginPath(pluginId)}.role`) ??\n      this.config.getOptionalString('role')\n    );\n  }\n\n  /**\n   * Provides the knexConfig which should be used for a given plugin.\n   *\n   * @param pluginId - Plugin to get the knexConfig for\n   * @returns The merged knexConfig value or undefined if it isn't specified\n   */\n  private getAdditionalKnexConfig(pluginId: string): JsonObject | undefined {\n    const pluginConfig = this.config\n      .getOptionalConfig(`${pluginPath(pluginId)}.knexConfig`)\n      ?.get<JsonObject>();\n\n    const baseConfig = this.config\n      .getOptionalConfig('knexConfig')\n      ?.get<JsonObject>();\n\n    return merge(baseConfig, pluginConfig);\n  }\n\n  private getPluginDivisionModeConfig(): string {\n    return this.config.getOptionalString('pluginDivisionMode') ?? 'database';\n  }\n\n  /**\n   * Provides a Knex connection plugin config by combining base and plugin\n   * config.\n   *\n   * This method provides a baseConfig for a plugin database connector. If the\n   * client type has not been overridden, the global connection config will be\n   * included with plugin specific config as the base. Values from the plugin\n   * connection take precedence over the base. Base database name is omitted for\n   * all supported databases excluding SQLite unless `pluginDivisionMode` is set\n   * to `schema`.\n   */\n  private getConnectionConfig(pluginId: string): Knex.StaticConnectionConfig {\n    const { client, overridden } = this.getClientType(pluginId);\n\n    let baseConnection = normalizeConnection(this.config.get('connection'));\n\n    if (\n      client.includes('sqlite3') &&\n      'filename' in baseConnection &&\n      baseConnection.filename !== ':memory:'\n    ) {\n      throw new Error(\n        '`connection.filename` is not supported for the base sqlite connection. Prefer `connection.directory` or provide a filename for the plugin connection instead.',\n      );\n    }\n\n    // Databases cannot be shared unless the `pluginDivisionMode` is set to `schema`. The\n    // `database` property from the base connection is omitted unless `pluginDivisionMode`\n    // is set to `schema`. SQLite3's `filename` property is an exception as this is used as a\n    // directory elsewhere so we preserve `filename`.\n    if (this.getPluginDivisionModeConfig() !== 'schema') {\n      baseConnection = omit(baseConnection, 'database');\n    }\n\n    // get and normalize optional plugin specific database connection\n    const connection = normalizeConnection(\n      this.config.getOptional(`${pluginPath(pluginId)}.connection`),\n    );\n\n    return {\n      // include base connection if client type has not been overridden\n      ...(overridden ? {} : baseConnection),\n      ...connection,\n    } as Knex.StaticConnectionConfig;\n  }\n\n  /**\n   * Provides a Knex database config for a given plugin.\n   *\n   * This method provides a Knex configuration object along with the plugin's\n   * client type.\n   *\n   * @param pluginId - The plugin that the database config should correspond with\n   */\n  private getConfigForPlugin(pluginId: string): Knex.Config {\n    const { client } = this.getClientType(pluginId);\n    const role = this.getRoleConfig(pluginId);\n\n    return {\n      ...this.getAdditionalKnexConfig(pluginId),\n      client,\n      connection: this.getConnectionConfig(pluginId),\n      ...(role && { role }),\n    };\n  }\n\n  /**\n   * Provides a partial `Knex.Config`• database name override for a given plugin.\n   *\n   * @param pluginId - Target plugin to get database name override\n   * @returns Partial `Knex.Config` with database name override\n   */\n  private getDatabaseOverrides(pluginId: string): Knex.Config {\n    const databaseName = this.getDatabaseName(pluginId);\n    return databaseName ? createSqliteNameOverride(databaseName) : {};\n  }\n}\n"],"names":["path","ensureDirSync","DevDataStore","knexFactory","mergeDatabaseConfig","ConfigReader","merge","omit"],"mappings":"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"}