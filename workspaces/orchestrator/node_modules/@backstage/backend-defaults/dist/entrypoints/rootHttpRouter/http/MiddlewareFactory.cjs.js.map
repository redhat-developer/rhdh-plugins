{"version":3,"file":"MiddlewareFactory.cjs.js","sources":["../../../../src/entrypoints/rootHttpRouter/http/MiddlewareFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport {\n  ErrorRequestHandler,\n  NextFunction,\n  Request,\n  RequestHandler,\n  Response,\n} from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport { readHelmetOptions } from './readHelmetOptions';\nimport { readCorsOptions } from './readCorsOptions';\nimport {\n  AuthenticationError,\n  ConflictError,\n  ErrorResponseBody,\n  InputError,\n  NotAllowedError,\n  NotFoundError,\n  NotImplementedError,\n  NotModifiedError,\n  serializeError,\n  ServiceUnavailableError,\n} from '@backstage/errors';\nimport { applyInternalErrorFilter } from './applyInternalErrorFilter';\nimport { RateLimitStoreFactory } from '../../../lib/RateLimitStoreFactory.ts';\nimport { rateLimitMiddleware } from '../../../lib/rateLimitMiddleware.ts';\n\ntype LogMeta = {\n  date: string;\n  method: string;\n  url: string;\n  status: number;\n  httpVersion: string;\n  userAgent?: string;\n  contentLength?: number;\n  referrer?: string;\n};\n\nfunction getLogMeta(req: Request, res: Response): LogMeta {\n  const referrer = req.headers.referer ?? req.headers.referrer;\n  const userAgent = req.headers['user-agent'];\n  const contentLength = Number(res.getHeader('content-length'));\n\n  const meta: LogMeta = {\n    date: new Date().toISOString(),\n    method: req.method,\n    url: req.originalUrl ?? req.url,\n    status: res.statusCode,\n    httpVersion: `${req.httpVersionMajor}.${req.httpVersionMinor}`,\n  };\n\n  if (userAgent) {\n    meta.userAgent = userAgent;\n  }\n\n  if (isFinite(contentLength)) {\n    meta.contentLength = contentLength;\n  }\n\n  if (referrer) {\n    meta.referrer = Array.isArray(referrer) ? referrer.join(', ') : referrer;\n  }\n\n  return meta;\n}\n\n/**\n * Options used to create a {@link MiddlewareFactory}.\n *\n * @public\n */\nexport interface MiddlewareFactoryOptions {\n  config: RootConfigService;\n  logger: LoggerService;\n}\n\n/**\n * Options passed to the {@link MiddlewareFactory.error} middleware.\n *\n * @public\n */\nexport interface MiddlewareFactoryErrorOptions {\n  /**\n   * Whether error response bodies should show error stack traces or not.\n   *\n   * If not specified, by default shows stack traces only in development mode.\n   */\n  showStackTraces?: boolean;\n\n  /**\n   * Whether any 4xx errors should be logged or not.\n   *\n   * If not specified, default to only logging 5xx errors.\n   */\n  logAllErrors?: boolean;\n}\n\n/**\n * A utility to configure common middleware.\n *\n * @public\n */\nexport class MiddlewareFactory {\n  #config: RootConfigService;\n  #logger: LoggerService;\n\n  /**\n   * Creates a new {@link MiddlewareFactory}.\n   */\n  static create(options: MiddlewareFactoryOptions) {\n    return new MiddlewareFactory(options);\n  }\n\n  private constructor(options: MiddlewareFactoryOptions) {\n    this.#config = options.config;\n    this.#logger = options.logger;\n  }\n\n  /**\n   * Returns a middleware that unconditionally produces a 404 error response.\n   *\n   * @remarks\n   *\n   * Typically you want to place this middleware at the end of the chain, such\n   * that it's the last one attempted after no other routes matched.\n   *\n   * @returns An Express request handler\n   */\n  notFound(): RequestHandler {\n    return (_req: Request, res: Response) => {\n      res.status(404).end();\n    };\n  }\n\n  /**\n   * Returns the compression middleware.\n   *\n   * @remarks\n   *\n   * The middleware will attempt to compress response bodies for all requests\n   * that traverse through the middleware.\n   */\n  compression(): RequestHandler {\n    return compression();\n  }\n\n  /**\n   * Returns a request logging middleware.\n   *\n   * @remarks\n   *\n   * Typically you want to place this middleware at the start of the chain, such\n   * that it always logs requests whether they are \"caught\" by handlers farther\n   * down or not.\n   *\n   * @returns An Express request handler\n   */\n  logging(): RequestHandler {\n    const logger = this.#logger;\n    return (req: Request, res: Response, next: NextFunction) => {\n      res.on('finish', () => {\n        const meta = getLogMeta(req, res);\n        logger.info(\n          `[${meta.date}] \"${meta.method} ${meta.url} HTTP/${\n            meta.httpVersion\n          }\" ${meta.status} ${meta.contentLength ?? 0} \"${\n            meta.referrer ?? '-'\n          }\" \"${meta.userAgent ?? '-'}\"`,\n          {\n            type: 'incomingRequest',\n            ...meta,\n          },\n        );\n      });\n      next();\n    };\n  }\n\n  /**\n   * Returns a middleware that implements the helmet library.\n   *\n   * @remarks\n   *\n   * This middleware applies security policies to incoming requests and outgoing\n   * responses. It is configured using config keys such as `backend.csp`.\n   *\n   * @see {@link https://helmetjs.github.io/}\n   *\n   * @returns An Express request handler\n   */\n  helmet(): RequestHandler {\n    return helmet(readHelmetOptions(this.#config.getOptionalConfig('backend')));\n  }\n\n  /**\n   * Returns a middleware that implements the cors library.\n   *\n   * @remarks\n   *\n   * This middleware handles CORS. It is configured using the config key\n   * `backend.cors`.\n   *\n   * @see {@link https://github.com/expressjs/cors}\n   *\n   * @returns An Express request handler\n   */\n  cors(): RequestHandler {\n    return cors(readCorsOptions(this.#config.getOptionalConfig('backend')));\n  }\n\n  /**\n   * Returns a middleware that implements rate limiting.\n   *\n   * @remarks\n   *\n   * Rate limiting is a common technique to prevent abuse of APIs. This middleware is\n   * configured using the config key `backend.rateLimit`.\n   *\n   * @returns An Express request handler\n   */\n  rateLimit(): RequestHandler {\n    const enabled = this.#config.has('backend.rateLimit');\n    if (!enabled) {\n      return (_req: Request, _res: Response, next: NextFunction) => {\n        next();\n      };\n    }\n\n    const useDefaults = this.#config.getOptional('backend.rateLimit') === true;\n    const rateLimitOptions = useDefaults\n      ? undefined\n      : this.#config.getOptionalConfig('backend.rateLimit');\n\n    // Global rate limiting disabled\n    if (\n      rateLimitOptions &&\n      rateLimitOptions.getOptionalBoolean('global') === false\n    ) {\n      return (_req: Request, _res: Response, next: NextFunction) => {\n        next();\n      };\n    }\n\n    return rateLimitMiddleware({\n      store: useDefaults\n        ? undefined\n        : RateLimitStoreFactory.create({ config: this.#config }),\n      config: rateLimitOptions,\n    });\n  }\n\n  /**\n   * Express middleware to handle errors during request processing.\n   *\n   * @remarks\n   *\n   * This is commonly the very last middleware in the chain.\n   *\n   * Its primary purpose is not to do translation of business logic exceptions,\n   * but rather to be a global catch-all for uncaught \"fatal\" errors that are\n   * expected to result in a 500 error. However, it also does handle some common\n   * error types (such as http-error exceptions, and the well-known error types\n   * in the `@backstage/errors` package) and returns the enclosed status code\n   * accordingly.\n   *\n   * It will also produce a response body with a serialized form of the error,\n   * unless a previous handler already did send a body. See\n   * {@link @backstage/errors#ErrorResponseBody} for the response shape used.\n   *\n   * @returns An Express error request handler\n   */\n  error(options: MiddlewareFactoryErrorOptions = {}): ErrorRequestHandler {\n    const showStackTraces =\n      options.showStackTraces ?? process.env.NODE_ENV === 'development';\n\n    const logger = this.#logger.child({\n      type: 'errorHandler',\n    });\n\n    return (\n      rawError: Error,\n      req: Request,\n      res: Response,\n      next: NextFunction,\n    ) => {\n      const error = applyInternalErrorFilter(rawError, logger);\n\n      const statusCode = getStatusCode(error);\n      if (options.logAllErrors || statusCode >= 500) {\n        logger.error(`Request failed with status ${statusCode}`, error);\n      }\n\n      if (res.headersSent) {\n        // If the headers have already been sent, do not send the response again\n        // as this will throw an error in the backend.\n        next(error);\n        return;\n      }\n\n      const body: ErrorResponseBody = {\n        error: serializeError(error, { includeStack: showStackTraces }),\n        request: { method: req.method, url: req.url },\n        response: { statusCode },\n      };\n\n      res.status(statusCode).json(body);\n    };\n  }\n}\n\nfunction getStatusCode(error: Error): number {\n  // Look for common http library status codes\n  const knownStatusCodeFields = ['statusCode', 'status'];\n  for (const field of knownStatusCodeFields) {\n    const statusCode = (error as any)[field];\n    if (\n      typeof statusCode === 'number' &&\n      (statusCode | 0) === statusCode && // is whole integer\n      statusCode >= 100 &&\n      statusCode <= 599\n    ) {\n      return statusCode;\n    }\n  }\n\n  // Handle well-known error types\n  switch (error.name) {\n    case NotModifiedError.name:\n      return 304;\n    case InputError.name:\n      return 400;\n    case AuthenticationError.name:\n      return 401;\n    case NotAllowedError.name:\n      return 403;\n    case NotFoundError.name:\n      return 404;\n    case ConflictError.name:\n      return 409;\n    case NotImplementedError.name:\n      return 501;\n    case ServiceUnavailableError.name:\n      return 503;\n    default:\n      break;\n  }\n\n  // Fall back to internal server error\n  return 500;\n}\n"],"names":["compression","helmet","readHelmetOptions","cors","readCorsOptions","rateLimitMiddleware","RateLimitStoreFactory","applyInternalErrorFilter","serializeError","NotModifiedError","InputError","AuthenticationError","NotAllowedError","NotFoundError","ConflictError","NotImplementedError","ServiceUnavailableError"],"mappings":";;;;;;;;;;;;;;;;;;AA2DA,SAAS,UAAA,CAAW,KAAc,GAAA,EAAwB;AACxD,EAAA,MAAM,QAAA,GAAW,GAAA,CAAI,OAAA,CAAQ,OAAA,IAAW,IAAI,OAAA,CAAQ,QAAA;AACpD,EAAA,MAAM,SAAA,GAAY,GAAA,CAAI,OAAA,CAAQ,YAAY,CAAA;AAC1C,EAAA,MAAM,aAAA,GAAgB,MAAA,CAAO,GAAA,CAAI,SAAA,CAAU,gBAAgB,CAAC,CAAA;AAE5D,EAAA,MAAM,IAAA,GAAgB;AAAA,IACpB,IAAA,EAAA,iBAAM,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,IAC7B,QAAQ,GAAA,CAAI,MAAA;AAAA,IACZ,GAAA,EAAK,GAAA,CAAI,WAAA,IAAe,GAAA,CAAI,GAAA;AAAA,IAC5B,QAAQ,GAAA,CAAI,UAAA;AAAA,IACZ,aAAa,CAAA,EAAG,GAAA,CAAI,gBAAgB,CAAA,CAAA,EAAI,IAAI,gBAAgB,CAAA;AAAA,GAC9D;AAEA,EAAA,IAAI,SAAA,EAAW;AACb,IAAA,IAAA,CAAK,SAAA,GAAY,SAAA;AAAA,EACnB;AAEA,EAAA,IAAI,QAAA,CAAS,aAAa,CAAA,EAAG;AAC3B,IAAA,IAAA,CAAK,aAAA,GAAgB,aAAA;AAAA,EACvB;AAEA,EAAA,IAAI,QAAA,EAAU;AACZ,IAAA,IAAA,CAAK,QAAA,GAAW,MAAM,OAAA,CAAQ,QAAQ,IAAI,QAAA,CAAS,IAAA,CAAK,IAAI,CAAA,GAAI,QAAA;AAAA,EAClE;AAEA,EAAA,OAAO,IAAA;AACT;AAsCO,MAAM,iBAAA,CAAkB;AAAA,EAC7B,OAAA;AAAA,EACA,OAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,OAAA,EAAmC;AAC/C,IAAA,OAAO,IAAI,kBAAkB,OAAO,CAAA;AAAA,EACtC;AAAA,EAEQ,YAAY,OAAA,EAAmC;AACrD,IAAA,IAAA,CAAK,UAAU,OAAA,CAAQ,MAAA;AACvB,IAAA,IAAA,CAAK,UAAU,OAAA,CAAQ,MAAA;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,QAAA,GAA2B;AACzB,IAAA,OAAO,CAAC,MAAe,GAAA,KAAkB;AACvC,MAAA,GAAA,CAAI,MAAA,CAAO,GAAG,CAAA,CAAE,GAAA,EAAI;AAAA,IACtB,CAAA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAA,GAA8B;AAC5B,IAAA,OAAOA,4BAAA,EAAY;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAA,GAA0B;AACxB,IAAA,MAAM,SAAS,IAAA,CAAK,OAAA;AACpB,IAAA,OAAO,CAAC,GAAA,EAAc,GAAA,EAAe,IAAA,KAAuB;AAC1D,MAAA,GAAA,CAAI,EAAA,CAAG,UAAU,MAAM;AACrB,QAAA,MAAM,IAAA,GAAO,UAAA,CAAW,GAAA,EAAK,GAAG,CAAA;AAChC,QAAA,MAAA,CAAO,IAAA;AAAA,UACL,CAAA,CAAA,EAAI,IAAA,CAAK,IAAI,CAAA,GAAA,EAAM,IAAA,CAAK,MAAM,CAAA,CAAA,EAAI,IAAA,CAAK,GAAG,CAAA,MAAA,EACxC,IAAA,CAAK,WACP,CAAA,EAAA,EAAK,KAAK,MAAM,CAAA,CAAA,EAAI,IAAA,CAAK,aAAA,IAAiB,CAAC,CAAA,EAAA,EACzC,IAAA,CAAK,QAAA,IAAY,GACnB,CAAA,GAAA,EAAM,IAAA,CAAK,SAAA,IAAa,GAAG,CAAA,CAAA,CAAA;AAAA,UAC3B;AAAA,YACE,IAAA,EAAM,iBAAA;AAAA,YACN,GAAG;AAAA;AACL,SACF;AAAA,MACF,CAAC,CAAA;AACD,MAAA,IAAA,EAAK;AAAA,IACP,CAAA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAA,GAAyB;AACvB,IAAA,OAAOC,wBAAOC,mCAAA,CAAkB,IAAA,CAAK,QAAQ,iBAAA,CAAkB,SAAS,CAAC,CAAC,CAAA;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAA,GAAuB;AACrB,IAAA,OAAOC,sBAAKC,+BAAA,CAAgB,IAAA,CAAK,QAAQ,iBAAA,CAAkB,SAAS,CAAC,CAAC,CAAA;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,SAAA,GAA4B;AAC1B,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,mBAAmB,CAAA;AACpD,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,OAAO,CAAC,IAAA,EAAe,IAAA,EAAgB,IAAA,KAAuB;AAC5D,QAAA,IAAA,EAAK;AAAA,MACP,CAAA;AAAA,IACF;AAEA,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,OAAA,CAAQ,WAAA,CAAY,mBAAmB,CAAA,KAAM,IAAA;AACtE,IAAA,MAAM,mBAAmB,WAAA,GACrB,MAAA,GACA,IAAA,CAAK,OAAA,CAAQ,kBAAkB,mBAAmB,CAAA;AAGtD,IAAA,IACE,gBAAA,IACA,gBAAA,CAAiB,kBAAA,CAAmB,QAAQ,MAAM,KAAA,EAClD;AACA,MAAA,OAAO,CAAC,IAAA,EAAe,IAAA,EAAgB,IAAA,KAAuB;AAC5D,QAAA,IAAA,EAAK;AAAA,MACP,CAAA;AAAA,IACF;AAEA,IAAA,OAAOC,uCAAA,CAAoB;AAAA,MACzB,KAAA,EAAO,cACH,MAAA,GACAC,2CAAA,CAAsB,OAAO,EAAE,MAAA,EAAQ,IAAA,CAAK,OAAA,EAAS,CAAA;AAAA,MACzD,MAAA,EAAQ;AAAA,KACT,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,KAAA,CAAM,OAAA,GAAyC,EAAC,EAAwB;AACtE,IAAA,MAAM,eAAA,GACJ,OAAA,CAAQ,eAAA,IAAmB,OAAA,CAAQ,IAAI,QAAA,KAAa,aAAA;AAEtD,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM;AAAA,MAChC,IAAA,EAAM;AAAA,KACP,CAAA;AAED,IAAA,OAAO,CACL,QAAA,EACA,GAAA,EACA,GAAA,EACA,IAAA,KACG;AACH,MAAA,MAAM,KAAA,GAAQC,iDAAA,CAAyB,QAAA,EAAU,MAAM,CAAA;AAEvD,MAAA,MAAM,UAAA,GAAa,cAAc,KAAK,CAAA;AACtC,MAAA,IAAI,OAAA,CAAQ,YAAA,IAAgB,UAAA,IAAc,GAAA,EAAK;AAC7C,QAAA,MAAA,CAAO,KAAA,CAAM,CAAA,2BAAA,EAA8B,UAAU,CAAA,CAAA,EAAI,KAAK,CAAA;AAAA,MAChE;AAEA,MAAA,IAAI,IAAI,WAAA,EAAa;AAGnB,QAAA,IAAA,CAAK,KAAK,CAAA;AACV,QAAA;AAAA,MACF;AAEA,MAAA,MAAM,IAAA,GAA0B;AAAA,QAC9B,OAAOC,qBAAA,CAAe,KAAA,EAAO,EAAE,YAAA,EAAc,iBAAiB,CAAA;AAAA,QAC9D,SAAS,EAAE,MAAA,EAAQ,IAAI,MAAA,EAAQ,GAAA,EAAK,IAAI,GAAA,EAAI;AAAA,QAC5C,QAAA,EAAU,EAAE,UAAA;AAAW,OACzB;AAEA,MAAA,GAAA,CAAI,MAAA,CAAO,UAAU,CAAA,CAAE,IAAA,CAAK,IAAI,CAAA;AAAA,IAClC,CAAA;AAAA,EACF;AACF;AAEA,SAAS,cAAc,KAAA,EAAsB;AAE3C,EAAA,MAAM,qBAAA,GAAwB,CAAC,YAAA,EAAc,QAAQ,CAAA;AACrD,EAAA,KAAA,MAAW,SAAS,qBAAA,EAAuB;AACzC,IAAA,MAAM,UAAA,GAAc,MAAc,KAAK,CAAA;AACvC,IAAA,IACE,OAAO,UAAA,KAAe,QAAA,IAAA,CACrB,UAAA,GAAa,CAAA,MAAO,UAAA;AAAA,IACrB,UAAA,IAAc,GAAA,IACd,UAAA,IAAc,GAAA,EACd;AACA,MAAA,OAAO,UAAA;AAAA,IACT;AAAA,EACF;AAGA,EAAA,QAAQ,MAAM,IAAA;AAAM,IAClB,KAAKC,uBAAA,CAAiB,IAAA;AACpB,MAAA,OAAO,GAAA;AAAA,IACT,KAAKC,iBAAA,CAAW,IAAA;AACd,MAAA,OAAO,GAAA;AAAA,IACT,KAAKC,0BAAA,CAAoB,IAAA;AACvB,MAAA,OAAO,GAAA;AAAA,IACT,KAAKC,sBAAA,CAAgB,IAAA;AACnB,MAAA,OAAO,GAAA;AAAA,IACT,KAAKC,oBAAA,CAAc,IAAA;AACjB,MAAA,OAAO,GAAA;AAAA,IACT,KAAKC,oBAAA,CAAc,IAAA;AACjB,MAAA,OAAO,GAAA;AAAA,IACT,KAAKC,0BAAA,CAAoB,IAAA;AACvB,MAAA,OAAO,GAAA;AAAA,IACT,KAAKC,8BAAA,CAAwB,IAAA;AAC3B,MAAA,OAAO,GAAA;AAEP;AAIJ,EAAA,OAAO,GAAA;AACT;;;;"}