{"version":3,"file":"getGeneratedCertificate.cjs.js","sources":["../../../../src/entrypoints/rootHttpRouter/http/getGeneratedCertificate.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { resolve as resolvePath, dirname } from 'path';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport forge from 'node-forge';\n\nconst FIVE_DAYS_IN_MS = 5 * 24 * 60 * 60 * 1000;\n\nconst IP_HOSTNAME_REGEX = /:|^\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n\nexport async function getGeneratedCertificate(\n  hostname: string,\n  logger: LoggerService,\n) {\n  const hasModules = await fs.pathExists('node_modules');\n  let certPath;\n  if (hasModules) {\n    certPath = resolvePath(\n      'node_modules/.cache/backstage-backend/dev-cert.pem',\n    );\n    await fs.ensureDir(dirname(certPath));\n  } else {\n    certPath = resolvePath('.dev-cert.pem');\n  }\n\n  if (await fs.pathExists(certPath)) {\n    try {\n      const cert = await fs.readFile(certPath);\n\n      const crt = forge.pki.certificateFromPem(cert.toString());\n      const remainingMs = crt.validity.notAfter.getTime() - Date.now();\n      if (remainingMs > FIVE_DAYS_IN_MS) {\n        logger.info('Using existing self-signed certificate');\n        return {\n          key: cert,\n          cert,\n        };\n      }\n    } catch (error) {\n      logger.warn(`Unable to use existing self-signed certificate, ${error}`);\n    }\n  }\n\n  logger.info('Generating new self-signed certificate');\n  const newCert = await generateCertificate(hostname);\n  await fs.writeFile(certPath, newCert.cert + newCert.key, 'utf8');\n  return newCert;\n}\n\nasync function generateCertificate(hostname: string) {\n  const attributes = [\n    {\n      name: 'commonName',\n      value: 'dev-cert',\n    },\n  ];\n\n  const sans = [\n    {\n      type: 2, // DNS\n      value: 'localhost',\n    },\n    {\n      type: 2,\n      value: 'localhost.localdomain',\n    },\n    {\n      type: 2,\n      value: '[::1]',\n    },\n    {\n      type: 7, // IP\n      ip: '127.0.0.1',\n    },\n    {\n      type: 7,\n      ip: 'fe80::1',\n    },\n  ];\n\n  // Add hostname from backend.baseUrl if it doesn't already exist in our list of SANs\n  if (!sans.find(({ value, ip }) => value === hostname || ip === hostname)) {\n    sans.push(\n      IP_HOSTNAME_REGEX.test(hostname)\n        ? {\n            type: 7,\n            ip: hostname,\n          }\n        : {\n            type: 2,\n            value: hostname,\n          },\n    );\n  }\n\n  const params = {\n    algorithm: 'sha256',\n    keySize: 2048,\n    days: 30,\n    extensions: [\n      {\n        name: 'keyUsage',\n        keyCertSign: true,\n        digitalSignature: true,\n        nonRepudiation: true,\n        keyEncipherment: true,\n        dataEncipherment: true,\n      },\n      {\n        name: 'extKeyUsage',\n        serverAuth: true,\n        clientAuth: true,\n        codeSigning: true,\n        timeStamping: true,\n      },\n      {\n        name: 'subjectAltName',\n        altNames: sans,\n      },\n    ],\n  };\n\n  return new Promise<{ key: string; cert: string }>((resolve, reject) =>\n    require('selfsigned').generate(\n      attributes,\n      params,\n      (err: Error, bundle: { private: string; cert: string }) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ key: bundle.private, cert: bundle.cert });\n        }\n      },\n    ),\n  );\n}\n"],"names":["fs","resolvePath","dirname","forge"],"mappings":"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"}