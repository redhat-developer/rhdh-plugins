'use strict';

var errors = require('@backstage/errors');
var types = require('./types.cjs.js');

function getSeverityLogLevelMappings(config) {
  const auditorConfig = config.getOptionalConfig(types.CONFIG_ROOT_KEY);
  const severityLogLevelMappings = {
    low: auditorConfig?.getOptionalString("severityLogLevelMappings.low") ?? "debug",
    medium: auditorConfig?.getOptionalString("severityLogLevelMappings.medium") ?? "info",
    high: auditorConfig?.getOptionalString("severityLogLevelMappings.high") ?? "info",
    critical: auditorConfig?.getOptionalString("severityLogLevelMappings.critical") ?? "info"
  };
  const res = types.severityLogLevelMappingsSchema.safeParse(
    severityLogLevelMappings
  );
  if (!res.success) {
    const key = res.error.issues.at(0)?.path.at(0);
    const value = res.error.issues.at(0).received;
    const validKeys = res.error.issues.at(0).options;
    throw new errors.InputError(
      `The configuration value for 'backend.auditor.severityLogLevelMappings.${key}' was given an invalid value: '${value}'. Expected one of the following valid values: '${validKeys.join(
        ", "
      )}'.`
    );
  }
  return severityLogLevelMappings;
}

exports.getSeverityLogLevelMappings = getSeverityLogLevelMappings;
//# sourceMappingURL=utils.cjs.js.map
