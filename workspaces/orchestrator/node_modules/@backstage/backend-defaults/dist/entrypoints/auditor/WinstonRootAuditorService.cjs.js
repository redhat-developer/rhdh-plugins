'use strict';

var winston = require('winston');
require('../rootLogger/rootLoggerServiceFactory.cjs.js');
var WinstonLogger = require('../rootLogger/WinstonLogger.cjs.js');
var DefaultAuditorService = require('./DefaultAuditorService.cjs.js');
var utils = require('./utils.cjs.js');

function _interopNamespaceCompat(e) {
  if (e && typeof e === 'object' && 'default' in e) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var winston__namespace = /*#__PURE__*/_interopNamespaceCompat(winston);

const defaultFormatter = winston__namespace.format.combine(
  winston__namespace.format.timestamp({
    format: "YYYY-MM-DD HH:mm:ss"
  }),
  winston__namespace.format.errors({ stack: true }),
  winston__namespace.format.splat(),
  winston__namespace.format.json()
);
const auditorFieldFormat = winston__namespace.format((info) => {
  return { ...info, isAuditEvent: true };
})();
class WinstonRootAuditorService {
  constructor(winstonLogger) {
    this.winstonLogger = winstonLogger;
  }
  /**
   * Creates a {@link WinstonRootAuditorService} instance.
   */
  static create(options) {
    let winstonLogger = WinstonLogger.WinstonLogger.create({
      meta: {
        service: "backstage"
      },
      level: "info",
      format: winston__namespace.format.combine(
        auditorFieldFormat,
        options?.format ?? defaultFormatter
      ),
      transports: options?.transports
    });
    if (options?.meta) {
      winstonLogger = winstonLogger.child(options.meta);
    }
    return new WinstonRootAuditorService(winstonLogger);
  }
  forPlugin(deps) {
    const severityLogLevelMappings = utils.getSeverityLogLevelMappings(deps.config);
    return DefaultAuditorService.DefaultAuditorService.create((event) => {
      if ("error" in event) {
        const { error, ...rest } = event;
        const childAuditLogger = this.winstonLogger.child(rest);
        childAuditLogger[severityLogLevelMappings[event.severityLevel]](
          `${event.plugin}.${event.eventId}`,
          error
        );
      } else {
        this.winstonLogger[severityLogLevelMappings[event.severityLevel]](
          `${event.plugin}.${event.eventId}`,
          event
        );
      }
    }, deps);
  }
}

exports.WinstonRootAuditorService = WinstonRootAuditorService;
exports.auditorFieldFormat = auditorFieldFormat;
exports.defaultFormatter = defaultFormatter;
//# sourceMappingURL=WinstonRootAuditorService.cjs.js.map
