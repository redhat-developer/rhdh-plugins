'use strict';

var errors = require('@backstage/errors');

class DefaultAuditorService {
  logFn;
  auth;
  httpAuth;
  plugin;
  constructor(logFn, deps) {
    this.logFn = logFn;
    this.auth = deps.auth;
    this.httpAuth = deps.httpAuth;
    this.plugin = deps.plugin;
  }
  /**
   * Creates a {@link DefaultAuditorService} instance.
   */
  static create(logFn, deps) {
    return new DefaultAuditorService(logFn, deps);
  }
  async log(options) {
    const { eventId, severityLevel = "low", request, meta, ...rest } = options;
    await this.logFn({
      plugin: this.plugin.getId(),
      eventId,
      severityLevel,
      actor: {
        actorId: await this.getActorId(request),
        ip: request?.ip,
        hostname: request?.hostname,
        userAgent: request?.get("user-agent")
      },
      request: request ? {
        url: request?.originalUrl,
        method: request?.method
      } : void 0,
      meta: Object.keys(meta ?? {}).length === 0 ? void 0 : meta,
      ...rest
    });
  }
  async createEvent(options) {
    await this.log({ ...options, status: "initiated" });
    return {
      success: async (params) => {
        await this.log({
          ...options,
          meta: { ...options.meta, ...params?.meta },
          status: "succeeded"
        });
      },
      fail: async (params) => {
        await this.log({
          ...options,
          ...params,
          error: params.error,
          meta: { ...options.meta, ...params?.meta },
          status: "failed"
        });
      }
    };
  }
  async getActorId(request) {
    let credentials = await this.auth.getOwnServiceCredentials();
    if (request) {
      try {
        credentials = await this.httpAuth.credentials(request);
      } catch (error) {
        throw new errors.ForwardedError("Could not resolve credentials", error);
      }
    }
    if (this.auth.isPrincipal(credentials, "user")) {
      return credentials.principal.userEntityRef;
    }
    if (this.auth.isPrincipal(credentials, "service")) {
      return credentials.principal.subject;
    }
    return void 0;
  }
}

exports.DefaultAuditorService = DefaultAuditorService;
//# sourceMappingURL=DefaultAuditorService.cjs.js.map
