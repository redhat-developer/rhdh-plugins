{"version":3,"file":"helpers.cjs.js","sources":["../../../../src/entrypoints/auth/external/helpers.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AccessRestriptionsMap } from './types';\n\n/**\n * Parses and returns the `accessRestrictions` configuration from an\n * `externalAccess` entry, or undefined if there wasn't one.\n *\n * @internal\n */\nexport function readAccessRestrictionsFromConfig(\n  externalAccessEntryConfig: Config,\n): AccessRestriptionsMap | undefined {\n  const configs =\n    externalAccessEntryConfig.getOptionalConfigArray('accessRestrictions') ??\n    [];\n\n  const result: AccessRestriptionsMap = new Map();\n  for (const config of configs) {\n    const validKeys = ['plugin', 'permission', 'permissionAttribute'];\n    for (const key of config.keys()) {\n      if (!validKeys.includes(key)) {\n        const valid = validKeys.map(k => `'${k}'`).join(', ');\n        throw new Error(\n          `Invalid key '${key}' in 'accessRestrictions' config, expected one of ${valid}`,\n        );\n      }\n    }\n\n    const pluginId = config.getString('plugin');\n    const permissionNames = readPermissionNames(config);\n    const permissionAttributes = readPermissionAttributes(config);\n\n    if (result.has(pluginId)) {\n      throw new Error(\n        `Attempted to declare 'accessRestrictions' twice for plugin '${pluginId}', which is not permitted`,\n      );\n    }\n\n    result.set(pluginId, {\n      ...(permissionNames ? { permissionNames } : {}),\n      ...(permissionAttributes ? { permissionAttributes } : {}),\n    });\n  }\n\n  return result.size ? result : undefined;\n}\n\n/**\n * Reads a config value as a string or an array of strings, and deduplicates and\n * splits by comma/space into a string array. Can also validate against a known\n * set of values. Returns undefined if the key didn't exist or if the array\n * would have ended up being empty.\n *\n * @internal\n */\nexport function readStringOrStringArrayFromConfig<T extends string>(\n  root: Config,\n  key: string,\n  validValues?: readonly T[],\n): T[] | undefined {\n  if (!root.has(key)) {\n    return undefined;\n  }\n\n  const rawValues = Array.isArray(root.get(key))\n    ? root.getStringArray(key)\n    : [root.getString(key)];\n\n  const values = [\n    ...new Set(\n      rawValues\n        .map(v => v.split(/[ ,]/))\n        .flat()\n        .filter(Boolean),\n    ),\n  ];\n\n  if (!values.length) {\n    return undefined;\n  }\n\n  if (validValues?.length) {\n    for (const value of values) {\n      if (!validValues.includes(value as T)) {\n        const valid = validValues.map(k => `'${k}'`).join(', ');\n        throw new Error(\n          `Invalid value '${value}' at '${key}' in 'permissionAttributes' config, valid values are ${valid}`,\n        );\n      }\n    }\n  }\n\n  return values as T[];\n}\n\nfunction readPermissionNames(externalAccessEntryConfig: Config) {\n  return readStringOrStringArrayFromConfig(\n    externalAccessEntryConfig,\n    'permission',\n  );\n}\n\nfunction readPermissionAttributes(externalAccessEntryConfig: Config) {\n  const config = externalAccessEntryConfig.getOptionalConfig(\n    'permissionAttribute',\n  );\n  if (!config) {\n    return undefined;\n  }\n\n  const validKeys = ['action'];\n  for (const key of config.keys()) {\n    if (!validKeys.includes(key)) {\n      const valid = validKeys.map(k => `'${k}'`).join(', ');\n      throw new Error(\n        `Invalid key '${key}' in 'permissionAttribute' config, expected ${valid}`,\n      );\n    }\n  }\n\n  const action = readStringOrStringArrayFromConfig(config, 'action', [\n    'create',\n    'read',\n    'update',\n    'delete',\n  ]);\n\n  const result = {\n    ...(action ? { action } : {}),\n  };\n\n  return Object.keys(result).length ? result : undefined;\n}\n"],"names":[],"mappings":"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"}