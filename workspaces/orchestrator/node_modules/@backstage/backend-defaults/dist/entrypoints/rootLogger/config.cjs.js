'use strict';

var types = require('./types.cjs.js');

const getRootLoggerConfig = (config) => {
  const level = config.getOptionalString("backend.logger.level");
  const meta = config.getOptionalConfig("backend.logger.meta")?.get();
  const overridesConfig = config.getOptionalConfigArray(
    "backend.logger.overrides"
  );
  const overrides = overridesConfig?.map((override, i) => {
    const overrideLevel = override.getString("level");
    if (types.winstonLevels[overrideLevel] === void 0) {
      throw new Error(
        `Invalid config at backend.logger.overrides[${i}].level, '${overrideLevel}' is not a valid logging level, must be one of 'error', 'warn', 'info' or 'debug'.`
      );
    }
    const matchers = override.getConfig("matchers").get();
    return {
      matchers,
      level: overrideLevel
    };
  });
  return {
    meta,
    level,
    overrides
  };
};

exports.getRootLoggerConfig = getRootLoggerConfig;
//# sourceMappingURL=config.cjs.js.map
