{"version":3,"file":"httpAuthServiceFactory.cjs.js","sources":["../../../src/entrypoints/httpAuth/httpAuthServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  BackstageCredentials,\n  BackstagePrincipalTypes,\n  BackstageUserPrincipal,\n  DiscoveryService,\n  HttpAuthService,\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { AuthenticationError, NotAllowedError } from '@backstage/errors';\nimport { parse as parseCookie } from 'cookie';\nimport { Request, Response } from 'express';\n\nconst FIVE_MINUTES_MS = 5 * 60 * 1000;\n\nconst BACKSTAGE_AUTH_COOKIE = 'backstage-auth';\n\nfunction getTokenFromRequest(req: Request) {\n  let token: string | undefined;\n  const authHeader = req.headers.authorization;\n  if (typeof authHeader === 'string') {\n    const matches = authHeader.match(/^Bearer[ ]+(\\S+)$/i);\n    token = matches?.[1];\n  }\n\n  return { token };\n}\n\nfunction getCookieFromRequest(req: Request) {\n  const cookieHeader = req.headers.cookie;\n  if (cookieHeader) {\n    const cookies = parseCookie(cookieHeader);\n    const token = cookies[BACKSTAGE_AUTH_COOKIE];\n    if (token) {\n      return token;\n    }\n  }\n\n  return undefined;\n}\n\nfunction willExpireSoon(expiresAt: Date) {\n  return Date.now() + FIVE_MINUTES_MS > expiresAt.getTime();\n}\n\nconst credentialsSymbol = Symbol('backstage-credentials');\nconst limitedCredentialsSymbol = Symbol('backstage-limited-credentials');\n\ntype RequestWithCredentials = Request & {\n  [credentialsSymbol]?: Promise<BackstageCredentials>;\n  [limitedCredentialsSymbol]?: Promise<BackstageCredentials>;\n};\n\n/**\n * @public\n * Options for creating a DefaultHttpAuthService.\n */\nexport interface DefaultHttpAuthServiceOptions {\n  auth: AuthService;\n  discovery: DiscoveryService;\n  pluginId: string;\n  /**\n   * Optionally override logic for extracting the token from the request.\n   */\n  getTokenFromRequest?: (req: Request) => { token?: string };\n}\n\n/**\n * @public\n * DefaultHttpAuthService is the default implementation of the HttpAuthService\n */\nexport class DefaultHttpAuthService implements HttpAuthService {\n  readonly #auth: AuthService;\n  readonly #discovery: DiscoveryService;\n  readonly #pluginId: string;\n  readonly #getToken: (req: Request) => { token?: string };\n\n  private constructor(\n    auth: AuthService,\n    discovery: DiscoveryService,\n    pluginId: string,\n    getToken?: (req: Request) => { token?: string },\n  ) {\n    this.#auth = auth;\n    this.#discovery = discovery;\n    this.#pluginId = pluginId;\n    this.#getToken = getToken ?? getTokenFromRequest;\n  }\n\n  static create(\n    options: DefaultHttpAuthServiceOptions,\n  ): DefaultHttpAuthService {\n    return new DefaultHttpAuthService(\n      options.auth,\n      options.discovery,\n      options.pluginId,\n      options.getTokenFromRequest,\n    );\n  }\n\n  async #extractCredentialsFromRequest(req: Request) {\n    const { token } = this.#getToken(req);\n    if (!token) {\n      return await this.#auth.getNoneCredentials();\n    }\n\n    return await this.#auth.authenticate(token);\n  }\n\n  async #extractLimitedCredentialsFromRequest(req: Request) {\n    const { token } = this.#getToken(req);\n    if (token) {\n      return await this.#auth.authenticate(token, {\n        allowLimitedAccess: true,\n      });\n    }\n\n    const cookie = getCookieFromRequest(req);\n    if (cookie) {\n      return await this.#auth.authenticate(cookie, {\n        allowLimitedAccess: true,\n      });\n    }\n\n    return await this.#auth.getNoneCredentials();\n  }\n\n  async #getCredentials(req: RequestWithCredentials) {\n    return (req[credentialsSymbol] ??=\n      this.#extractCredentialsFromRequest(req));\n  }\n\n  async #getLimitedCredentials(req: RequestWithCredentials) {\n    return (req[limitedCredentialsSymbol] ??=\n      this.#extractLimitedCredentialsFromRequest(req));\n  }\n\n  async credentials<TAllowed extends keyof BackstagePrincipalTypes = 'unknown'>(\n    req: Request,\n    options?: {\n      allow?: Array<TAllowed>;\n      allowLimitedAccess?: boolean;\n    },\n  ): Promise<BackstageCredentials<BackstagePrincipalTypes[TAllowed]>> {\n    // Limited and full credentials are treated as two separate cases, this lets\n    // us avoid internal dependencies between the AuthService and\n    // HttpAuthService implementations\n    const credentials = options?.allowLimitedAccess\n      ? await this.#getLimitedCredentials(req)\n      : await this.#getCredentials(req);\n\n    const allowed = options?.allow;\n    if (!allowed) {\n      return credentials as any;\n    }\n\n    if (this.#auth.isPrincipal(credentials, 'none')) {\n      if (allowed.includes('none' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new AuthenticationError('Missing credentials');\n    } else if (this.#auth.isPrincipal(credentials, 'user')) {\n      if (allowed.includes('user' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'user' credentials`,\n      );\n    } else if (this.#auth.isPrincipal(credentials, 'service')) {\n      if (allowed.includes('service' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'service' credentials`,\n      );\n    }\n\n    throw new NotAllowedError(\n      'Unknown principal type, this should never happen',\n    );\n  }\n\n  async issueUserCookie(\n    res: Response,\n    options?: { credentials?: BackstageCredentials },\n  ): Promise<{ expiresAt: Date }> {\n    if (res.headersSent) {\n      throw new Error('Failed to issue user cookie, headers were already sent');\n    }\n\n    let credentials: BackstageCredentials<BackstageUserPrincipal>;\n    if (options?.credentials) {\n      if (this.#auth.isPrincipal(options.credentials, 'none')) {\n        res.clearCookie(\n          BACKSTAGE_AUTH_COOKIE,\n          await this.#getCookieOptions(res.req),\n        );\n        return { expiresAt: new Date() };\n      }\n      if (!this.#auth.isPrincipal(options.credentials, 'user')) {\n        throw new AuthenticationError(\n          'Refused to issue cookie for non-user principal',\n        );\n      }\n      credentials = options.credentials;\n    } else {\n      credentials = await this.credentials(res.req, { allow: ['user'] });\n    }\n\n    const existingExpiresAt = await this.#existingCookieExpiration(res.req);\n    if (existingExpiresAt && !willExpireSoon(existingExpiresAt)) {\n      return { expiresAt: existingExpiresAt };\n    }\n\n    const { token, expiresAt } = await this.#auth.getLimitedUserToken(\n      credentials,\n    );\n    if (!token) {\n      throw new Error('User credentials is unexpectedly missing token');\n    }\n\n    res.cookie(BACKSTAGE_AUTH_COOKIE, token, {\n      ...(await this.#getCookieOptions(res.req)),\n      expires: expiresAt,\n    });\n\n    return { expiresAt };\n  }\n\n  async #getCookieOptions(_req: Request): Promise<{\n    domain: string;\n    httpOnly: true;\n    secure: boolean;\n    priority: 'high';\n    sameSite: 'none' | 'lax';\n  }> {\n    // TODO: eventually we should read from `${req.protocol}://${req.hostname}`\n    // once https://github.com/backstage/backstage/issues/24169 has landed\n    const externalBaseUrlStr = await this.#discovery.getExternalBaseUrl(\n      this.#pluginId,\n    );\n    const externalBaseUrl = new URL(externalBaseUrlStr);\n\n    const secure =\n      externalBaseUrl.protocol === 'https:' ||\n      externalBaseUrl.hostname === 'localhost';\n\n    return {\n      domain: externalBaseUrl.hostname,\n      httpOnly: true,\n      secure,\n      priority: 'high',\n      sameSite: secure ? 'none' : 'lax',\n    };\n  }\n\n  async #existingCookieExpiration(req: Request): Promise<Date | undefined> {\n    const existingCookie = getCookieFromRequest(req);\n    if (!existingCookie) {\n      return undefined;\n    }\n\n    try {\n      const existingCredentials = await this.#auth.authenticate(\n        existingCookie,\n        {\n          allowLimitedAccess: true,\n        },\n      );\n      if (!this.#auth.isPrincipal(existingCredentials, 'user')) {\n        return undefined;\n      }\n\n      return existingCredentials.expiresAt;\n    } catch (error) {\n      if (error.name === 'AuthenticationError') {\n        return undefined;\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * Authentication of HTTP requests.\n *\n * See {@link @backstage/code-plugin-api#HttpAuthService}\n * and {@link https://backstage.io/docs/backend-system/core-services/http-auth | the service docs}\n * for more information.\n *\n * @public\n */\nexport const httpAuthServiceFactory = createServiceFactory({\n  service: coreServices.httpAuth,\n  deps: {\n    auth: coreServices.auth,\n    discovery: coreServices.discovery,\n    plugin: coreServices.pluginMetadata,\n  },\n  async factory({ auth, discovery, plugin }) {\n    return DefaultHttpAuthService.create({\n      auth,\n      discovery,\n      pluginId: plugin.getId(),\n    });\n  },\n});\n"],"names":["parseCookie","AuthenticationError","NotAllowedError","createServiceFactory","coreServices"],"mappings":"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"}