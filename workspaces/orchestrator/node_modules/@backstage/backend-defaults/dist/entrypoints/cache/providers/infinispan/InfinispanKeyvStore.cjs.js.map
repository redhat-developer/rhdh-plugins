{"version":3,"file":"InfinispanKeyvStore.cjs.js","sources":["../../../../../src/entrypoints/cache/providers/infinispan/InfinispanKeyvStore.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { InfinispanPutOptions } from '../../types';\n\n/**\n * Interface defining the required methods for an Infinispan client.\n * @public\n */\nexport interface InfinispanClientCacheInterface {\n  get(key: string): Promise<string | null | undefined>;\n  put(key: string, value: string, options?: InfinispanPutOptions): Promise<any>;\n  remove(key: string): Promise<boolean>;\n  clear(): Promise<void>;\n  disconnect(): Promise<void>;\n  on?(event: 'error' | string, listener: (...args: any[]) => void): this;\n  connect?(): Promise<any>;\n  query?(query: string): Promise<any[] | null>;\n  containsKey?(key: string): Promise<boolean>;\n}\n\n/**\n * Options for creating an InfinispanKeyvStore instance.\n */\nexport interface InfinispanKeyvStoreOptions {\n  clientPromise: Promise<InfinispanClientCacheInterface>;\n  logger: LoggerService;\n  defaultTtl?: number; // TTL in milliseconds\n}\n\n/**\n * A Keyv store implementation that uses Infinispan as the backend.\n * This store implements the Keyv store interface and provides caching functionality\n * using Infinispan's distributed cache capabilities.\n */\nexport class InfinispanKeyvStore extends EventEmitter {\n  private readonly clientPromise: Promise<InfinispanClientCacheInterface>;\n  private readonly logger: LoggerService;\n  private readonly defaultTtl?: number;\n  private resolvedClient: InfinispanClientCacheInterface | null = null;\n\n  public readonly namespace?: string; // Keyv expects this\n\n  constructor(options: InfinispanKeyvStoreOptions) {\n    super();\n    this.clientPromise = options.clientPromise;\n    this.logger = options.logger.child({ class: InfinispanKeyvStore.name });\n    this.defaultTtl = options.defaultTtl;\n\n    // Eagerly try to resolve the client to attach error listeners early\n    // and to have it ready for disconnect if resolved.\n    this.clientPromise\n      .then(client => {\n        this.resolvedClient = client;\n        if (typeof client.on === 'function') {\n          client.on('error', (error: Error) => {\n            this.logger.error('Native Infinispan client reported an error.', {\n              error: error.message,\n            });\n            this.emit('error', error);\n          });\n        } else {\n          this.logger.warn(\n            'Native Infinispan client does not appear to support .on(\"error\") event listening.',\n          );\n        }\n      })\n      .catch(err => {\n        this.logger.error(\n          'Failed to resolve Infinispan client promise in constructor.',\n          { error: err.message },\n        );\n        // Errors from operations will also be emitted when clientPromise is awaited and rejects.\n        this.emit('error', err);\n      });\n  }\n\n  private async getClient(): Promise<InfinispanClientCacheInterface> {\n    if (this.resolvedClient) {\n      return this.resolvedClient;\n    }\n    // If not yet resolved (e.g. called very quickly or promise rejected and retrying implicitly)\n    // Await the promise. This will throw if the promise is rejected.\n    this.resolvedClient = await this.clientPromise;\n    return this.resolvedClient;\n  }\n\n  async get(key: string): Promise<string | undefined> {\n    this.logger.debug(`Getting key: ${key}`);\n    try {\n      const client = await this.getClient();\n      const value = await client.get(key);\n      if (value === null || value === undefined) {\n        this.logger.debug(`Key not found or value is null/undefined: ${key}`);\n        return undefined;\n      }\n      this.logger.debug(`Successfully retrieved key: ${key}`);\n      return value;\n    } catch (error: any) {\n      this.logger.error(`Error getting key '${key}' from Infinispan.`, {\n        error: error.message,\n      });\n      this.emit(\n        'error',\n        error instanceof Error ? error : new Error(String(error)),\n      );\n      throw error;\n    }\n  }\n\n  async set(key: string, value: string, ttl?: number): Promise<void> {\n    this.logger.debug(`Setting key: ${key}`, { ttl });\n    this.logger.debug(`Setting key: ${key}`, { ttlInput: ttl });\n    const currentTtl = ttl ?? this.defaultTtl;\n    this.logger.debug(`Calculated currentTtl for key ${key}: ${currentTtl}ms`); // Log do TTL calculado\n    const storeOptions: InfinispanPutOptions = {};\n\n    if (typeof currentTtl === 'number' && currentTtl > 0) {\n      storeOptions.lifespan = `${currentTtl}ms`; // Ensure time unit is passed as string\n      // Ensure this matches client expectations. If client expects string '10s', convert here.\n      // For now, assuming number in ms is fine or string like '10000ms'.\n      // The PutOptions defines lifespan as string | number | null.\n    } else if (typeof currentTtl === 'string') {\n      storeOptions.lifespan = currentTtl;\n    }\n\n    try {\n      const client = await this.getClient();\n      await client.put(key, value, storeOptions);\n      this.logger.debug(`Successfully set key: ${key}`);\n    } catch (error: any) {\n      this.logger.error(`Error setting key '${key}' in Infinispan.`, {\n        error: error.message,\n      });\n      this.emit(\n        'error',\n        error instanceof Error ? error : new Error(String(error)),\n      );\n      throw error;\n    }\n  }\n\n  async delete(key: string): Promise<boolean> {\n    this.logger.debug(`Deleting key: ${key}`);\n    try {\n      const client = await this.getClient();\n      const deleted = await client.remove(key);\n      this.logger.debug(`Key deletion status for '${key}': ${deleted}`);\n      return deleted;\n    } catch (error: any) {\n      this.logger.error(`Error deleting key '${key}' from Infinispan.`, {\n        error: error.message,\n      });\n      this.emit(\n        'error',\n        error instanceof Error ? error : new Error(String(error)),\n      );\n      throw error;\n    }\n  }\n\n  async clear(): Promise<void> {\n    this.logger.info('Clearing all entries from Infinispan cache.');\n    try {\n      const client = await this.getClient();\n      await client.clear();\n      this.logger.info('Infinispan cache cleared successfully.');\n    } catch (error: any) {\n      this.logger.error('Error clearing Infinispan cache.', {\n        error: error.message,\n      });\n      this.emit(\n        'error',\n        error instanceof Error ? error : new Error(String(error)),\n      );\n      throw error;\n    }\n  }\n\n  // This disconnect is for the Keyv store instance, but the actual client is shared.\n  // The CacheManager should handle the shared client's disconnection.\n  // However, if Keyv calls this, we shouldn't error.\n  async disconnect(): Promise<void> {\n    this.logger.info(\n      'InfinispanKeyvStore disconnect called. Shared client managed by CacheManager.',\n    );\n    // No-op for this store instance as the actual client is managed externally by CacheManager.\n    // The CacheManager's stop() method will disconnect the shared native client.\n    return Promise.resolve();\n  }\n}\n"],"names":["EventEmitter"],"mappings":"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"}