{"version":3,"file":"CacheManager.cjs.js","sources":["../../../src/entrypoints/cache/CacheManager.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheService,\n  CacheServiceOptions,\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport Keyv from 'keyv';\nimport { DefaultCacheClient } from './CacheClient';\nimport {\n  CacheManagerOptions,\n  ttlToMilliseconds,\n  CacheStoreOptions,\n  RedisCacheStoreOptions,\n  InfinispanClientBehaviorOptions,\n  InfinispanServerConfig,\n} from './types';\nimport { InfinispanOptionsMapper } from './providers/infinispan/InfinispanOptionsMapper';\nimport { durationToMilliseconds } from '@backstage/types';\nimport { ConfigReader, readDurationFromConfig } from '@backstage/config';\nimport {\n  InfinispanClientCacheInterface,\n  InfinispanKeyvStore,\n} from './providers/infinispan/InfinispanKeyvStore';\n\ntype StoreFactory = (pluginId: string, defaultTtl: number | undefined) => Keyv;\n\n/**\n * Implements a Cache Manager which will automatically create new cache clients\n * for plugins when requested. All requested cache clients are created with the\n * connection details provided.\n *\n * @public\n */\nexport class CacheManager {\n  /**\n   * Keys represent supported `backend.cache.store` values, mapped to factories\n   * that return Keyv instances appropriate to the store.\n   */\n  private readonly storeFactories = {\n    redis: this.createRedisStoreFactory(),\n    valkey: this.createValkeyStoreFactory(),\n    memcache: this.createMemcacheStoreFactory(),\n    memory: this.createMemoryStoreFactory(),\n    infinispan: this.createInfinispanStoreFactory(),\n  };\n\n  private readonly logger?: LoggerService;\n  private readonly store: keyof CacheManager['storeFactories'];\n  private readonly connection: string;\n  private readonly errorHandler: CacheManagerOptions['onError'];\n  private readonly defaultTtl?: number;\n  private readonly storeOptions?: CacheStoreOptions;\n\n  /**\n   * Creates a new {@link CacheManager} instance by reading from the `backend`\n   * config section, specifically the `.cache` key.\n   *\n   * @param config - The loaded application configuration.\n   * @param options - Optional configuration for the CacheManager.\n   * @returns A new CacheManager instance.\n   */\n  static fromConfig(\n    config: RootConfigService,\n    options: CacheManagerOptions = {},\n  ): CacheManager {\n    // If no `backend.cache` config is provided, instantiate the CacheManager\n    // with an in-memory cache client.\n    const store = config.getOptionalString('backend.cache.store') || 'memory';\n    const defaultTtlConfig = config.getOptional('backend.cache.defaultTtl');\n    const connectionString =\n      config.getOptionalString('backend.cache.connection') || '';\n    const logger = options.logger?.child({\n      type: 'cacheManager',\n    });\n\n    if (config.has('backend.cache.useRedisSets')) {\n      logger?.warn(\n        \"The 'backend.cache.useRedisSets' configuration key is deprecated and no longer has any effect. The underlying '@keyv/redis' and '@keyv/valkey' libraries no longer support redis sets.\",\n      );\n    }\n\n    let defaultTtl: number | undefined;\n    if (defaultTtlConfig !== undefined) {\n      if (typeof defaultTtlConfig === 'number') {\n        defaultTtl = defaultTtlConfig;\n      } else {\n        defaultTtl = durationToMilliseconds(\n          readDurationFromConfig(config, { key: 'backend.cache.defaultTtl' }),\n        );\n      }\n    }\n\n    // Read store-specific options from config\n    const storeOptions = CacheManager.parseStoreOptions(store, config, logger);\n\n    return new CacheManager(\n      store,\n      connectionString,\n      options.onError,\n      logger,\n      defaultTtl,\n      storeOptions,\n    );\n  }\n\n  /**\n   * Parse store-specific options from configuration.\n   *\n   * @param store - The cache store type ('redis', 'valkey', 'memcache', 'infinispan', or 'memory')\n   * @param config - The configuration service\n   * @param logger - Optional logger for warnings\n   * @returns The parsed store options\n   */\n  private static parseStoreOptions(\n    store: string,\n    config: RootConfigService,\n    logger?: LoggerService,\n  ): CacheStoreOptions | undefined {\n    const storeConfigPath = `backend.cache.${store}`;\n\n    if (!config.has(storeConfigPath)) {\n      logger?.warn(\n        `No configuration found for cache store '${store}' at '${storeConfigPath}'.`,\n      );\n    }\n\n    if (store === 'redis' || store === 'valkey') {\n      return CacheManager.parseRedisOptions(\n        store,\n        storeConfigPath,\n        config,\n        logger,\n      );\n    }\n\n    if (store === 'infinispan') {\n      return InfinispanOptionsMapper.parseInfinispanOptions(\n        storeConfigPath,\n        config,\n        logger,\n      );\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Parse Redis-specific options from configuration.\n   */\n  private static parseRedisOptions(\n    store: string,\n    storeConfigPath: string,\n    config: RootConfigService,\n    logger?: LoggerService,\n  ): RedisCacheStoreOptions {\n    const redisOptions: RedisCacheStoreOptions = {\n      type: store as 'redis' | 'valkey',\n    };\n\n    const redisConfig =\n      config.getOptionalConfig(storeConfigPath) ?? new ConfigReader({});\n\n    redisOptions.client = {\n      namespace: redisConfig.getOptionalString('client.namespace'),\n      keyPrefixSeparator:\n        redisConfig.getOptionalString('client.keyPrefixSeparator') || ':',\n      clearBatchSize: redisConfig.getOptionalNumber('client.clearBatchSize'),\n      useUnlink: redisConfig.getOptionalBoolean('client.useUnlink'),\n      noNamespaceAffectsAll: redisConfig.getOptionalBoolean(\n        'client.noNamespaceAffectsAll',\n      ),\n    };\n\n    if (redisConfig.has('cluster')) {\n      const clusterConfig = redisConfig.getConfig('cluster');\n\n      if (!clusterConfig.has('rootNodes')) {\n        logger?.warn(\n          `Redis cluster config has no 'rootNodes' key, defaulting to non-clustered mode`,\n        );\n        return redisOptions;\n      }\n\n      redisOptions.cluster = {\n        rootNodes: clusterConfig.get('rootNodes'),\n        defaults: clusterConfig.getOptional('defaults'),\n        minimizeConnections: clusterConfig.getOptionalBoolean(\n          'minimizeConnections',\n        ),\n        useReplicas: clusterConfig.getOptionalBoolean('useReplicas'),\n        maxCommandRedirections: clusterConfig.getOptionalNumber(\n          'maxCommandRedirections',\n        ),\n      };\n    }\n\n    return redisOptions;\n  }\n\n  /**\n   * Construct the full namespace based on the options and pluginId.\n   *\n   * @param pluginId - The plugin ID to namespace\n   * @param storeOptions - Optional cache store configuration options\n   * @returns The constructed namespace string combining the configured namespace with pluginId\n   */\n  private static constructNamespace(\n    pluginId: string,\n    storeOptions: RedisCacheStoreOptions | undefined,\n  ): string {\n    const prefix = storeOptions?.client?.namespace\n      ? `${storeOptions.client.namespace}${\n          storeOptions.client.keyPrefixSeparator ?? ':'\n        }`\n      : '';\n\n    return `${prefix}${pluginId}`;\n  }\n\n  /** @internal */\n  constructor(\n    store: string,\n    connectionString: string,\n    errorHandler: CacheManagerOptions['onError'],\n    logger?: LoggerService,\n    defaultTtl?: number,\n    storeOptions?: CacheStoreOptions,\n  ) {\n    if (!this.storeFactories.hasOwnProperty(store)) {\n      throw new Error(`Unknown cache store: ${store}`);\n    }\n    this.logger = logger;\n    this.store = store as keyof CacheManager['storeFactories'];\n    this.connection = connectionString;\n    this.errorHandler = errorHandler;\n    this.defaultTtl = defaultTtl;\n    this.storeOptions = storeOptions;\n  }\n\n  /**\n   * Generates a PluginCacheManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the cache manager should be created for.\n   *        Plugin names should be unique.\n   */\n  forPlugin(pluginId: string): CacheService {\n    const clientFactory = (options: CacheServiceOptions) => {\n      const ttl = options.defaultTtl ?? this.defaultTtl;\n      return this.getClientWithTtl(\n        pluginId,\n        ttl !== undefined ? ttlToMilliseconds(ttl) : undefined,\n      );\n    };\n\n    return new DefaultCacheClient(clientFactory({}), clientFactory, {});\n  }\n\n  private getClientWithTtl(pluginId: string, ttl: number | undefined): Keyv {\n    return this.storeFactories[this.store](pluginId, ttl);\n  }\n\n  private createRedisStoreFactory(): StoreFactory {\n    const KeyvRedis = require('@keyv/redis').default;\n    const { createCluster } = require('@keyv/redis');\n    const stores: Record<string, typeof KeyvRedis> = {};\n\n    return (pluginId, defaultTtl) => {\n      if (this.storeOptions?.type !== 'redis') {\n        throw new Error(\n          `Internal error: Wrong config type passed to redis factory: ${this.storeOptions?.type}`,\n        );\n      }\n      if (!stores[pluginId]) {\n        const redisOptions = this.storeOptions?.client || {\n          keyPrefixSeparator: ':',\n        };\n        if (this.storeOptions?.cluster) {\n          // Create a Redis cluster\n          const cluster = createCluster(this.storeOptions?.cluster);\n          stores[pluginId] = new KeyvRedis(cluster, redisOptions);\n        } else {\n          // Create a regular Redis connection\n          stores[pluginId] = new KeyvRedis(this.connection, redisOptions);\n        }\n\n        // Always provide an error handler to avoid stopping the process\n        stores[pluginId].on('error', (err: Error) => {\n          this.logger?.error('Failed to create redis cache client', err);\n          this.errorHandler?.(err);\n        });\n      }\n      return new Keyv({\n        namespace: CacheManager.constructNamespace(pluginId, this.storeOptions),\n        ttl: defaultTtl,\n        store: stores[pluginId],\n        emitErrors: false,\n        useKeyPrefix: false,\n      });\n    };\n  }\n\n  private createValkeyStoreFactory(): StoreFactory {\n    const KeyvValkey = require('@keyv/valkey').default;\n    const { createCluster } = require('@keyv/valkey');\n    const stores: Record<string, typeof KeyvValkey> = {};\n\n    return (pluginId, defaultTtl) => {\n      if (this.storeOptions?.type !== 'valkey') {\n        throw new Error(\n          `Internal error: Wrong config type passed to valkey factory: ${this.storeOptions?.type}`,\n        );\n      }\n      if (!stores[pluginId]) {\n        const valkeyOptions = this.storeOptions?.client || {\n          keyPrefixSeparator: ':',\n        };\n        if (this.storeOptions?.cluster) {\n          // Create a Valkey cluster (Redis cluster under the hood)\n          const cluster = createCluster(this.storeOptions?.cluster);\n          stores[pluginId] = new KeyvValkey(cluster, valkeyOptions);\n        } else {\n          // Create a regular Valkey connection\n          stores[pluginId] = new KeyvValkey(this.connection, valkeyOptions);\n        }\n\n        // Always provide an error handler to avoid stopping the process\n        stores[pluginId].on('error', (err: Error) => {\n          this.logger?.error('Failed to create valkey cache client', err);\n          this.errorHandler?.(err);\n        });\n      }\n      return new Keyv({\n        namespace: CacheManager.constructNamespace(pluginId, this.storeOptions),\n        ttl: defaultTtl,\n        store: stores[pluginId],\n        emitErrors: false,\n        useKeyPrefix: false,\n      });\n    };\n  }\n\n  private createMemcacheStoreFactory(): StoreFactory {\n    const KeyvMemcache = require('@keyv/memcache').default;\n    const stores: Record<string, typeof KeyvMemcache> = {};\n\n    return (pluginId, defaultTtl) => {\n      if (!stores[pluginId]) {\n        stores[pluginId] = new KeyvMemcache(this.connection);\n        // Always provide an error handler to avoid stopping the process\n        stores[pluginId].on('error', (err: Error) => {\n          this.logger?.error('Failed to create memcache cache client', err);\n          this.errorHandler?.(err);\n        });\n      }\n      return new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        emitErrors: false,\n        store: stores[pluginId],\n      });\n    };\n  }\n\n  private createMemoryStoreFactory(): StoreFactory {\n    const store = new Map();\n    return (pluginId, defaultTtl) =>\n      new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        emitErrors: false,\n        store,\n      });\n  }\n\n  private createInfinispanStoreFactory(): StoreFactory {\n    const stores: Record<string, InfinispanKeyvStore> = {};\n\n    return (pluginId, defaultTtl) => {\n      if (this.storeOptions?.type !== 'infinispan') {\n        throw new Error(\n          `Internal error: Wrong config type passed to infinispan factory: ${this.storeOptions?.type}`,\n        );\n      }\n\n      if (!stores[pluginId]) {\n        // Use sync version for testing environments\n        const isTest =\n          process.env.NODE_ENV === 'test' || typeof jest !== 'undefined';\n\n        // Create the client promise ONCE and reuse it\n        const clientPromise: Promise<InfinispanClientCacheInterface> = isTest\n          ? this.createInfinispanClientSync()\n          : this.createInfinispanClientAsync();\n\n        this.logger?.info(\n          `Creating Infinispan cache client for plugin ${pluginId} isTest = ${isTest}`,\n        );\n        const storeInstance = new InfinispanKeyvStore({\n          clientPromise,\n          logger: this.logger!,\n        });\n\n        stores[pluginId] = storeInstance;\n\n        // Always provide an error handler to avoid stopping the process\n        storeInstance.on('error', (err: Error) => {\n          this.logger?.error('Failed to create infinispan cache client', err);\n          this.errorHandler?.(err);\n        });\n      }\n\n      return new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        store: stores[pluginId],\n        emitErrors: false,\n      });\n    };\n  }\n\n  /**\n   * Creates an Infinispan client using dynamic import (production use).\n   * @returns Promise that resolves to an Infinispan client\n   */\n  private async createInfinispanClientAsync(): Promise<InfinispanClientCacheInterface> {\n    return this.createInfinispanClient(false);\n  }\n\n  /**\n   * Creates an Infinispan client using synchronous import (testing purposes).\n   * @returns Promise that resolves to an Infinispan client\n   */\n  private createInfinispanClientSync(): Promise<InfinispanClientCacheInterface> {\n    return this.createInfinispanClient(true);\n  }\n\n  /**\n   * Creates an Infinispan client based on the provided configuration.\n   * @param useSync - Whether to use synchronous import (for testing) or dynamic import\n   * @returns Promise that resolves to an Infinispan client\n   */\n  private async createInfinispanClient(\n    useSync: boolean = false,\n  ): Promise<InfinispanClientCacheInterface> {\n    try {\n      this.logger?.info('Creating Infinispan client');\n\n      if (this.storeOptions?.type === 'infinispan') {\n        // Import infinispan based on the useSync parameter\n        const infinispan = useSync\n          ? require('infinispan')\n          : await import('infinispan');\n\n        const client = await infinispan.client(\n          this.storeOptions.servers as InfinispanServerConfig[],\n          this.storeOptions.options as InfinispanClientBehaviorOptions,\n        );\n\n        this.logger?.info('Infinispan client created successfully');\n        return client;\n      }\n      throw new Error('Infinispan store options are not defined');\n    } catch (error: any) {\n      this.logger?.error('Failed to create Infinispan client', {\n        error: error.message,\n      });\n      throw error;\n    }\n  }\n}\n"],"names":["config","durationToMilliseconds","readDurationFromConfig","InfinispanOptionsMapper","ConfigReader","ttlToMilliseconds","DefaultCacheClient","Keyv","InfinispanKeyvStore"],"mappings":";;;;;;;;;;;;;;AAiDO,MAAM,YAAA,CAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKP,cAAA,GAAiB;AAAA,IAChC,KAAA,EAAO,KAAK,uBAAA,EAAwB;AAAA,IACpC,MAAA,EAAQ,KAAK,wBAAA,EAAyB;AAAA,IACtC,QAAA,EAAU,KAAK,0BAAA,EAA2B;AAAA,IAC1C,MAAA,EAAQ,KAAK,wBAAA,EAAyB;AAAA,IACtC,UAAA,EAAY,KAAK,4BAAA;AAA6B,GAChD;AAAA,EAEiB,MAAA;AAAA,EACA,KAAA;AAAA,EACA,UAAA;AAAA,EACA,YAAA;AAAA,EACA,UAAA;AAAA,EACA,YAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUjB,OAAO,UAAA,CACLA,QAAA,EACA,OAAA,GAA+B,EAAC,EAClB;AAGd,IAAA,MAAM,KAAA,GAAQA,QAAA,CAAO,iBAAA,CAAkB,qBAAqB,CAAA,IAAK,QAAA;AACjE,IAAA,MAAM,gBAAA,GAAmBA,QAAA,CAAO,WAAA,CAAY,0BAA0B,CAAA;AACtE,IAAA,MAAM,gBAAA,GACJA,QAAA,CAAO,iBAAA,CAAkB,0BAA0B,CAAA,IAAK,EAAA;AAC1D,IAAA,MAAM,MAAA,GAAS,OAAA,CAAQ,MAAA,EAAQ,KAAA,CAAM;AAAA,MACnC,IAAA,EAAM;AAAA,KACP,CAAA;AAED,IAAA,IAAIA,QAAA,CAAO,GAAA,CAAI,4BAA4B,CAAA,EAAG;AAC5C,MAAA,MAAA,EAAQ,IAAA;AAAA,QACN;AAAA,OACF;AAAA,IACF;AAEA,IAAA,IAAI,UAAA;AACJ,IAAA,IAAI,qBAAqB,MAAA,EAAW;AAClC,MAAA,IAAI,OAAO,qBAAqB,QAAA,EAAU;AACxC,QAAA,UAAA,GAAa,gBAAA;AAAA,MACf,CAAA,MAAO;AACL,QAAA,UAAA,GAAaC,4BAAA;AAAA,UACXC,6BAAA,CAAuBF,QAAA,EAAQ,EAAE,GAAA,EAAK,4BAA4B;AAAA,SACpE;AAAA,MACF;AAAA,IACF;AAGA,IAAA,MAAM,YAAA,GAAe,YAAA,CAAa,iBAAA,CAAkB,KAAA,EAAOA,UAAQ,MAAM,CAAA;AAEzE,IAAA,OAAO,IAAI,YAAA;AAAA,MACT,KAAA;AAAA,MACA,gBAAA;AAAA,MACA,OAAA,CAAQ,OAAA;AAAA,MACR,MAAA;AAAA,MACA,UAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAe,iBAAA,CACb,KAAA,EACA,MAAA,EACA,MAAA,EAC+B;AAC/B,IAAA,MAAM,eAAA,GAAkB,iBAAiB,KAAK,CAAA,CAAA;AAE9C,IAAA,IAAI,CAAC,MAAA,CAAO,GAAA,CAAI,eAAe,CAAA,EAAG;AAChC,MAAA,MAAA,EAAQ,IAAA;AAAA,QACN,CAAA,wCAAA,EAA2C,KAAK,CAAA,MAAA,EAAS,eAAe,CAAA,EAAA;AAAA,OAC1E;AAAA,IACF;AAEA,IAAA,IAAI,KAAA,KAAU,OAAA,IAAW,KAAA,KAAU,QAAA,EAAU;AAC3C,MAAA,OAAO,YAAA,CAAa,iBAAA;AAAA,QAClB,KAAA;AAAA,QACA,eAAA;AAAA,QACA,MAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAEA,IAAA,IAAI,UAAU,YAAA,EAAc;AAC1B,MAAA,OAAOG,+CAAA,CAAwB,sBAAA;AAAA,QAC7B,eAAA;AAAA,QACA,MAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAEA,IAAA,OAAO,MAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,iBAAA,CACb,KAAA,EACA,eAAA,EACAH,UACA,MAAA,EACwB;AACxB,IAAA,MAAM,YAAA,GAAuC;AAAA,MAC3C,IAAA,EAAM;AAAA,KACR;AAEA,IAAA,MAAM,WAAA,GACJA,SAAO,iBAAA,CAAkB,eAAe,KAAK,IAAII,mBAAA,CAAa,EAAE,CAAA;AAElE,IAAA,YAAA,CAAa,MAAA,GAAS;AAAA,MACpB,SAAA,EAAW,WAAA,CAAY,iBAAA,CAAkB,kBAAkB,CAAA;AAAA,MAC3D,kBAAA,EACE,WAAA,CAAY,iBAAA,CAAkB,2BAA2B,CAAA,IAAK,GAAA;AAAA,MAChE,cAAA,EAAgB,WAAA,CAAY,iBAAA,CAAkB,uBAAuB,CAAA;AAAA,MACrE,SAAA,EAAW,WAAA,CAAY,kBAAA,CAAmB,kBAAkB,CAAA;AAAA,MAC5D,uBAAuB,WAAA,CAAY,kBAAA;AAAA,QACjC;AAAA;AACF,KACF;AAEA,IAAA,IAAI,WAAA,CAAY,GAAA,CAAI,SAAS,CAAA,EAAG;AAC9B,MAAA,MAAM,aAAA,GAAgB,WAAA,CAAY,SAAA,CAAU,SAAS,CAAA;AAErD,MAAA,IAAI,CAAC,aAAA,CAAc,GAAA,CAAI,WAAW,CAAA,EAAG;AACnC,QAAA,MAAA,EAAQ,IAAA;AAAA,UACN,CAAA,6EAAA;AAAA,SACF;AACA,QAAA,OAAO,YAAA;AAAA,MACT;AAEA,MAAA,YAAA,CAAa,OAAA,GAAU;AAAA,QACrB,SAAA,EAAW,aAAA,CAAc,GAAA,CAAI,WAAW,CAAA;AAAA,QACxC,QAAA,EAAU,aAAA,CAAc,WAAA,CAAY,UAAU,CAAA;AAAA,QAC9C,qBAAqB,aAAA,CAAc,kBAAA;AAAA,UACjC;AAAA,SACF;AAAA,QACA,WAAA,EAAa,aAAA,CAAc,kBAAA,CAAmB,aAAa,CAAA;AAAA,QAC3D,wBAAwB,aAAA,CAAc,iBAAA;AAAA,UACpC;AAAA;AACF,OACF;AAAA,IACF;AAEA,IAAA,OAAO,YAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAe,kBAAA,CACb,QAAA,EACA,YAAA,EACQ;AACR,IAAA,MAAM,MAAA,GAAS,YAAA,EAAc,MAAA,EAAQ,SAAA,GACjC,CAAA,EAAG,YAAA,CAAa,MAAA,CAAO,SAAS,CAAA,EAC9B,YAAA,CAAa,MAAA,CAAO,kBAAA,IAAsB,GAC5C,CAAA,CAAA,GACA,EAAA;AAEJ,IAAA,OAAO,CAAA,EAAG,MAAM,CAAA,EAAG,QAAQ,CAAA,CAAA;AAAA,EAC7B;AAAA;AAAA,EAGA,YACE,KAAA,EACA,gBAAA,EACA,YAAA,EACA,MAAA,EACA,YACA,YAAA,EACA;AACA,IAAA,IAAI,CAAC,IAAA,CAAK,cAAA,CAAe,cAAA,CAAe,KAAK,CAAA,EAAG;AAC9C,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,qBAAA,EAAwB,KAAK,CAAA,CAAE,CAAA;AAAA,IACjD;AACA,IAAA,IAAA,CAAK,MAAA,GAAS,MAAA;AACd,IAAA,IAAA,CAAK,KAAA,GAAQ,KAAA;AACb,IAAA,IAAA,CAAK,UAAA,GAAa,gBAAA;AAClB,IAAA,IAAA,CAAK,YAAA,GAAe,YAAA;AACpB,IAAA,IAAA,CAAK,UAAA,GAAa,UAAA;AAClB,IAAA,IAAA,CAAK,YAAA,GAAe,YAAA;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,QAAA,EAAgC;AACxC,IAAA,MAAM,aAAA,GAAgB,CAAC,OAAA,KAAiC;AACtD,MAAA,MAAM,GAAA,GAAM,OAAA,CAAQ,UAAA,IAAc,IAAA,CAAK,UAAA;AACvC,MAAA,OAAO,IAAA,CAAK,gBAAA;AAAA,QACV,QAAA;AAAA,QACA,GAAA,KAAQ,MAAA,GAAYC,yBAAA,CAAkB,GAAG,CAAA,GAAI;AAAA,OAC/C;AAAA,IACF,CAAA;AAEA,IAAA,OAAO,IAAIC,+BAAmB,aAAA,CAAc,EAAE,CAAA,EAAG,aAAA,EAAe,EAAE,CAAA;AAAA,EACpE;AAAA,EAEQ,gBAAA,CAAiB,UAAkB,GAAA,EAA+B;AACxE,IAAA,OAAO,KAAK,cAAA,CAAe,IAAA,CAAK,KAAK,CAAA,CAAE,UAAU,GAAG,CAAA;AAAA,EACtD;AAAA,EAEQ,uBAAA,GAAwC;AAC9C,IAAA,MAAM,SAAA,GAAY,OAAA,CAAQ,aAAa,CAAA,CAAE,OAAA;AACzC,IAAA,MAAM,EAAE,aAAA,EAAc,GAAI,OAAA,CAAQ,aAAa,CAAA;AAC/C,IAAA,MAAM,SAA2C,EAAC;AAElD,IAAA,OAAO,CAAC,UAAU,UAAA,KAAe;AAC/B,MAAA,IAAI,IAAA,CAAK,YAAA,EAAc,IAAA,KAAS,OAAA,EAAS;AACvC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,2DAAA,EAA8D,IAAA,CAAK,YAAA,EAAc,IAAI,CAAA;AAAA,SACvF;AAAA,MACF;AACA,MAAA,IAAI,CAAC,MAAA,CAAO,QAAQ,CAAA,EAAG;AACrB,QAAA,MAAM,YAAA,GAAe,IAAA,CAAK,YAAA,EAAc,MAAA,IAAU;AAAA,UAChD,kBAAA,EAAoB;AAAA,SACtB;AACA,QAAA,IAAI,IAAA,CAAK,cAAc,OAAA,EAAS;AAE9B,UAAA,MAAM,OAAA,GAAU,aAAA,CAAc,IAAA,CAAK,YAAA,EAAc,OAAO,CAAA;AACxD,UAAA,MAAA,CAAO,QAAQ,CAAA,GAAI,IAAI,SAAA,CAAU,SAAS,YAAY,CAAA;AAAA,QACxD,CAAA,MAAO;AAEL,UAAA,MAAA,CAAO,QAAQ,CAAA,GAAI,IAAI,SAAA,CAAU,IAAA,CAAK,YAAY,YAAY,CAAA;AAAA,QAChE;AAGA,QAAA,MAAA,CAAO,QAAQ,CAAA,CAAE,EAAA,CAAG,OAAA,EAAS,CAAC,GAAA,KAAe;AAC3C,UAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,qCAAA,EAAuC,GAAG,CAAA;AAC7D,UAAA,IAAA,CAAK,eAAe,GAAG,CAAA;AAAA,QACzB,CAAC,CAAA;AAAA,MACH;AACA,MAAA,OAAO,IAAIC,qBAAA,CAAK;AAAA,QACd,SAAA,EAAW,YAAA,CAAa,kBAAA,CAAmB,QAAA,EAAU,KAAK,YAAY,CAAA;AAAA,QACtE,GAAA,EAAK,UAAA;AAAA,QACL,KAAA,EAAO,OAAO,QAAQ,CAAA;AAAA,QACtB,UAAA,EAAY,KAAA;AAAA,QACZ,YAAA,EAAc;AAAA,OACf,CAAA;AAAA,IACH,CAAA;AAAA,EACF;AAAA,EAEQ,wBAAA,GAAyC;AAC/C,IAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,cAAc,CAAA,CAAE,OAAA;AAC3C,IAAA,MAAM,EAAE,aAAA,EAAc,GAAI,OAAA,CAAQ,cAAc,CAAA;AAChD,IAAA,MAAM,SAA4C,EAAC;AAEnD,IAAA,OAAO,CAAC,UAAU,UAAA,KAAe;AAC/B,MAAA,IAAI,IAAA,CAAK,YAAA,EAAc,IAAA,KAAS,QAAA,EAAU;AACxC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,4DAAA,EAA+D,IAAA,CAAK,YAAA,EAAc,IAAI,CAAA;AAAA,SACxF;AAAA,MACF;AACA,MAAA,IAAI,CAAC,MAAA,CAAO,QAAQ,CAAA,EAAG;AACrB,QAAA,MAAM,aAAA,GAAgB,IAAA,CAAK,YAAA,EAAc,MAAA,IAAU;AAAA,UACjD,kBAAA,EAAoB;AAAA,SACtB;AACA,QAAA,IAAI,IAAA,CAAK,cAAc,OAAA,EAAS;AAE9B,UAAA,MAAM,OAAA,GAAU,aAAA,CAAc,IAAA,CAAK,YAAA,EAAc,OAAO,CAAA;AACxD,UAAA,MAAA,CAAO,QAAQ,CAAA,GAAI,IAAI,UAAA,CAAW,SAAS,aAAa,CAAA;AAAA,QAC1D,CAAA,MAAO;AAEL,UAAA,MAAA,CAAO,QAAQ,CAAA,GAAI,IAAI,UAAA,CAAW,IAAA,CAAK,YAAY,aAAa,CAAA;AAAA,QAClE;AAGA,QAAA,MAAA,CAAO,QAAQ,CAAA,CAAE,EAAA,CAAG,OAAA,EAAS,CAAC,GAAA,KAAe;AAC3C,UAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,sCAAA,EAAwC,GAAG,CAAA;AAC9D,UAAA,IAAA,CAAK,eAAe,GAAG,CAAA;AAAA,QACzB,CAAC,CAAA;AAAA,MACH;AACA,MAAA,OAAO,IAAIA,qBAAA,CAAK;AAAA,QACd,SAAA,EAAW,YAAA,CAAa,kBAAA,CAAmB,QAAA,EAAU,KAAK,YAAY,CAAA;AAAA,QACtE,GAAA,EAAK,UAAA;AAAA,QACL,KAAA,EAAO,OAAO,QAAQ,CAAA;AAAA,QACtB,UAAA,EAAY,KAAA;AAAA,QACZ,YAAA,EAAc;AAAA,OACf,CAAA;AAAA,IACH,CAAA;AAAA,EACF;AAAA,EAEQ,0BAAA,GAA2C;AACjD,IAAA,MAAM,YAAA,GAAe,OAAA,CAAQ,gBAAgB,CAAA,CAAE,OAAA;AAC/C,IAAA,MAAM,SAA8C,EAAC;AAErD,IAAA,OAAO,CAAC,UAAU,UAAA,KAAe;AAC/B,MAAA,IAAI,CAAC,MAAA,CAAO,QAAQ,CAAA,EAAG;AACrB,QAAA,MAAA,CAAO,QAAQ,CAAA,GAAI,IAAI,YAAA,CAAa,KAAK,UAAU,CAAA;AAEnD,QAAA,MAAA,CAAO,QAAQ,CAAA,CAAE,EAAA,CAAG,OAAA,EAAS,CAAC,GAAA,KAAe;AAC3C,UAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,wCAAA,EAA0C,GAAG,CAAA;AAChE,UAAA,IAAA,CAAK,eAAe,GAAG,CAAA;AAAA,QACzB,CAAC,CAAA;AAAA,MACH;AACA,MAAA,OAAO,IAAIA,qBAAA,CAAK;AAAA,QACd,SAAA,EAAW,QAAA;AAAA,QACX,GAAA,EAAK,UAAA;AAAA,QACL,UAAA,EAAY,KAAA;AAAA,QACZ,KAAA,EAAO,OAAO,QAAQ;AAAA,OACvB,CAAA;AAAA,IACH,CAAA;AAAA,EACF;AAAA,EAEQ,wBAAA,GAAyC;AAC/C,IAAA,MAAM,KAAA,uBAAY,GAAA,EAAI;AACtB,IAAA,OAAO,CAAC,QAAA,EAAU,UAAA,KAChB,IAAIA,qBAAA,CAAK;AAAA,MACP,SAAA,EAAW,QAAA;AAAA,MACX,GAAA,EAAK,UAAA;AAAA,MACL,UAAA,EAAY,KAAA;AAAA,MACZ;AAAA,KACD,CAAA;AAAA,EACL;AAAA,EAEQ,4BAAA,GAA6C;AACnD,IAAA,MAAM,SAA8C,EAAC;AAErD,IAAA,OAAO,CAAC,UAAU,UAAA,KAAe;AAC/B,MAAA,IAAI,IAAA,CAAK,YAAA,EAAc,IAAA,KAAS,YAAA,EAAc;AAC5C,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,gEAAA,EAAmE,IAAA,CAAK,YAAA,EAAc,IAAI,CAAA;AAAA,SAC5F;AAAA,MACF;AAEA,MAAA,IAAI,CAAC,MAAA,CAAO,QAAQ,CAAA,EAAG;AAErB,QAAA,MAAM,SACJ,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,MAAA,IAAU,OAAO,IAAA,KAAS,WAAA;AAGrD,QAAA,MAAM,gBAAyD,MAAA,GAC3D,IAAA,CAAK,0BAAA,EAA2B,GAChC,KAAK,2BAAA,EAA4B;AAErC,QAAA,IAAA,CAAK,MAAA,EAAQ,IAAA;AAAA,UACX,CAAA,4CAAA,EAA+C,QAAQ,CAAA,UAAA,EAAa,MAAM,CAAA;AAAA,SAC5E;AACA,QAAA,MAAM,aAAA,GAAgB,IAAIC,uCAAA,CAAoB;AAAA,UAC5C,aAAA;AAAA,UACA,QAAQ,IAAA,CAAK;AAAA,SACd,CAAA;AAED,QAAA,MAAA,CAAO,QAAQ,CAAA,GAAI,aAAA;AAGnB,QAAA,aAAA,CAAc,EAAA,CAAG,OAAA,EAAS,CAAC,GAAA,KAAe;AACxC,UAAA,IAAA,CAAK,MAAA,EAAQ,KAAA,CAAM,0CAAA,EAA4C,GAAG,CAAA;AAClE,UAAA,IAAA,CAAK,eAAe,GAAG,CAAA;AAAA,QACzB,CAAC,CAAA;AAAA,MACH;AAEA,MAAA,OAAO,IAAID,qBAAA,CAAK;AAAA,QACd,SAAA,EAAW,QAAA;AAAA,QACX,GAAA,EAAK,UAAA;AAAA,QACL,KAAA,EAAO,OAAO,QAAQ,CAAA;AAAA,QACtB,UAAA,EAAY;AAAA,OACb,CAAA;AAAA,IACH,CAAA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,2BAAA,GAAuE;AACnF,IAAA,OAAO,IAAA,CAAK,uBAAuB,KAAK,CAAA;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,0BAAA,GAAsE;AAC5E,IAAA,OAAO,IAAA,CAAK,uBAAuB,IAAI,CAAA;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,sBAAA,CACZ,OAAA,GAAmB,KAAA,EACsB;AACzC,IAAA,IAAI;AACF,MAAA,IAAA,CAAK,MAAA,EAAQ,KAAK,4BAA4B,CAAA;AAE9C,MAAA,IAAI,IAAA,CAAK,YAAA,EAAc,IAAA,KAAS,YAAA,EAAc;AAE5C,QAAA,MAAM,aAAa,OAAA,GACf,OAAA,CAAQ,YAAY,CAAA,GACpB,MAAM,OAAO,YAAY,CAAA;AAE7B,QAAA,MAAM,MAAA,GAAS,MAAM,UAAA,CAAW,MAAA;AAAA,UAC9B,KAAK,YAAA,CAAa,OAAA;AAAA,UAClB,KAAK,YAAA,CAAa;AAAA,SACpB;AAEA,QAAA,IAAA,CAAK,MAAA,EAAQ,KAAK,wCAAwC,CAAA;AAC1D,QAAA,OAAO,MAAA;AAAA,MACT;AACA,MAAA,MAAM,IAAI,MAAM,0CAA0C,CAAA;AAAA,IAC5D,SAAS,KAAA,EAAY;AACnB,MAAA,IAAA,CAAK,MAAA,EAAQ,MAAM,oCAAA,EAAsC;AAAA,QACvD,OAAO,KAAA,CAAM;AAAA,OACd,CAAA;AACD,MAAA,MAAM,KAAA;AAAA,IACR;AAAA,EACF;AACF;;;;"}