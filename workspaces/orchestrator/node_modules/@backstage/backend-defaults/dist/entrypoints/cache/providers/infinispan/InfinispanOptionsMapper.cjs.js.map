{"version":3,"file":"InfinispanOptionsMapper.cjs.js","sources":["../../../../../src/entrypoints/cache/providers/infinispan/InfinispanOptionsMapper.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport {\n  DataFormatOptions,\n  InfinispanAuthOptions,\n  InfinispanCacheStoreOptions,\n  InfinispanClientAuthOptions,\n  InfinispanClientBehaviorOptions,\n  InfinispanClusterConfig,\n  InfinispanServerConfig,\n  InfinispanSslOptions,\n} from '../../types';\n\nexport class InfinispanOptionsMapper {\n  /**\n   * Parses Infinispan options from the provided configuration path.\n   *\n   * @param storeConfigPath - The configuration path for the Infinispan store.\n   * @param config - The root configuration service to retrieve the Infinispan configuration.\n   * @param logger - An optional logger service for logging errors and warnings.\n   * @returns Parsed Infinispan cache store options.\n   */\n  public static parseInfinispanOptions(\n    storeConfigPath: string,\n    config: RootConfigService,\n    logger?: LoggerService,\n  ): InfinispanCacheStoreOptions {\n    const infinispanConfig = config.getConfig(storeConfigPath);\n    const parsedOptions: Partial<InfinispanCacheStoreOptions> = {\n      type: 'infinispan',\n    };\n\n    // Parse Servers & Clusters Configurations\n    if (infinispanConfig.has('servers')) {\n      const serversConfig = infinispanConfig.get('servers');\n      if (Array.isArray(serversConfig)) {\n        parsedOptions.servers = infinispanConfig.getConfigArray('servers').map(\n          serverConf =>\n            ({\n              host: serverConf.getString('host'),\n              port: serverConf.getOptionalNumber('port') ?? 11222,\n            } as InfinispanServerConfig),\n        );\n      } else if (typeof serversConfig === 'object' && serversConfig !== null) {\n        const serverConf = infinispanConfig.getConfig('servers');\n        parsedOptions.servers = {\n          host: serverConf.getOptionalString('host') ?? '127.0.0.1',\n          port: serverConf.getOptionalString('port') ?? 11222,\n        } as InfinispanServerConfig;\n      } else {\n        throw new Error(\n          `Infinispan 'servers' configuration at ${storeConfigPath} is invalid, must be an object or an array.`,\n        );\n      }\n    } else {\n      logger?.warn(\n        `Infinispan configuration at ${storeConfigPath} is missing the 'servers' definition, will use client defaults.`,\n      );\n    }\n\n    // The parsed options block to send to the Infinispan client\n    // This will be used to configure the Infinispan client behavior.\n    const behaviorOptions: Partial<InfinispanClientBehaviorOptions> = {};\n\n    behaviorOptions.clusters = infinispanConfig\n      .getOptionalConfigArray('clusters')\n      ?.map(clusterConf => {\n        const name = clusterConf.getOptionalString('name');\n        return {\n          ...(name && { name }),\n          servers: clusterConf.getConfigArray('servers').map(serverConf => ({\n            host: serverConf.getString('host'),\n            port: serverConf.getOptionalNumber('port') ?? 11222,\n          })),\n        } as InfinispanClusterConfig;\n      });\n\n    // Parse Default Options Start...\n    const clientVersion =\n      infinispanConfig.getOptionalString('version') ?? '2.9';\n    if (\n      clientVersion === '2.9' ||\n      clientVersion === '2.5' ||\n      clientVersion === '2.2'\n    ) {\n      behaviorOptions.version = clientVersion;\n    } else if (clientVersion !== null && clientVersion !== undefined) {\n      logger?.warn(\n        `Invalid Infinispan client version \"${clientVersion}\" in config at ${storeConfigPath}.version. Must be \"2.9\", \"2.5\", or \"2.2\". It will be ignored, and the client may use a default or fail.`,\n      );\n    }\n\n    behaviorOptions.cacheName =\n      infinispanConfig.getOptionalString('cacheName') ?? 'cache';\n\n    const mediaType = infinispanConfig.getOptionalString('mediaType');\n    if (mediaType === 'text/plain' || mediaType === 'application/json') {\n      behaviorOptions.mediaType = mediaType;\n    } else if (mediaType !== null && mediaType !== undefined) {\n      logger?.warn(\n        `Invalid Infinispan mediaType \"${mediaType}\" in config at ${storeConfigPath}.mediaType. Must be \"text/plain\" | \"application/json\". It will be ignored, and the client may use a default or fail.`,\n      );\n    }\n\n    behaviorOptions.maxRetries =\n      infinispanConfig.getOptionalNumber('maxRetries');\n\n    behaviorOptions.topologyUpdates =\n      infinispanConfig.getOptionalBoolean('topologyUpdates') ?? true;\n\n    // Default Options End...\n\n    // Parse Authentication and SSL Options\n    const authConfig = infinispanConfig.getOptionalConfig('authentication');\n    const auth: Partial<InfinispanAuthOptions> = {};\n\n    auth.enabled = authConfig?.getOptionalBoolean('enabled');\n    auth.saslMechanism = authConfig?.getOptionalString('saslMechanism');\n    auth.userName = authConfig?.getOptionalString('userName');\n    auth.password = authConfig?.getOptionalString('password');\n    auth.token = authConfig?.getOptionalString('token');\n    auth.authzid = authConfig?.getOptionalString('authzid');\n\n    behaviorOptions.authentication = auth as InfinispanAuthOptions;\n\n    const sslConfig = infinispanConfig.getOptionalConfig('ssl');\n    const ssl: Partial<InfinispanSslOptions> = {};\n\n    ssl.enabled = sslConfig?.getOptionalBoolean('enabled');\n    ssl.secureProtocol = sslConfig?.getOptionalString('secureProtocol');\n    ssl.trustCerts = sslConfig?.getOptionalStringArray('trustCerts');\n    ssl.sniHostName = sslConfig?.getOptionalString('sniHostname');\n\n    const clientAuth = infinispanConfig.getOptionalConfig('clientAuth');\n    const clientAuthOpts: Partial<InfinispanClientAuthOptions> = {};\n\n    clientAuthOpts.key = clientAuth?.getOptionalString('key');\n    clientAuthOpts.passphrase = clientAuth?.getOptionalString('passphrase');\n    clientAuthOpts.cert = clientAuth?.getOptionalString('cert');\n\n    ssl.clientAuth = clientAuthOpts as InfinispanClientAuthOptions;\n\n    const cryptoStore = infinispanConfig.getOptionalConfig('cryptoStore');\n    const cryptoStoreOpts: Partial<InfinispanClientAuthOptions> = {};\n\n    cryptoStoreOpts.key = cryptoStore?.getOptionalString('path');\n    cryptoStoreOpts.passphrase = cryptoStore?.getOptionalString('passphrase');\n\n    ssl.cryptoStore = cryptoStoreOpts as InfinispanClientAuthOptions;\n\n    behaviorOptions.ssl = ssl as InfinispanSslOptions;\n\n    const dataFormat = infinispanConfig.getOptionalConfig('dataFormat');\n    const dataFormatOpts: Partial<DataFormatOptions> = {};\n\n    const keyType = dataFormat?.getOptionalString('keyType') ?? 'text/plain';\n    const valueType =\n      dataFormat?.getOptionalString('valueType') ?? 'text/plain';\n\n    if (keyType === 'text/plain' || keyType === 'application/json') {\n      dataFormatOpts.keyType = keyType;\n    } else if (keyType !== null && keyType !== undefined) {\n      logger?.warn(\n        `Invalid Infinispan dataFormat.keyType \"${keyType}\" in config at ${storeConfigPath}.dataFormat.keyType. Must be \"text/plain\" | \"application/json\". Not mapped, client will use default 'text/plain'.`,\n      );\n    }\n\n    if (valueType === 'text/plain' || valueType === 'application/json') {\n      dataFormatOpts.valueType = valueType;\n    } else if (valueType !== null && valueType !== undefined) {\n      logger?.warn(\n        `Invalid Infinispan dataFormat.valueType \"${valueType}\" in config at ${storeConfigPath}.dataFormat.valueType. Must be \"text/plain\" | \"application/json\". Not mapped, client will use default 'text/plain'.`,\n      );\n    }\n    behaviorOptions.dataFormat = dataFormatOpts as DataFormatOptions;\n    parsedOptions.options = behaviorOptions as InfinispanClientBehaviorOptions;\n\n    logger?.debug(\n      `Parsed Infinispan options from config at ${storeConfigPath}: ${JSON.stringify(\n        parsedOptions,\n      )}`,\n    );\n    return parsedOptions as InfinispanCacheStoreOptions;\n  }\n}\n"],"names":[],"mappings":"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"}