{"version":3,"file":"types.cjs.js","sources":["../../../src/entrypoints/cache/types.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { HumanDuration, durationToMilliseconds } from '@backstage/types';\nimport { RedisClusterOptions, KeyvRedisOptions } from '@keyv/redis';\n\n/**\n * Options for Redis cache store.\n *\n * @public\n */\nexport type RedisCacheStoreOptions = {\n  type: 'redis' | 'valkey';\n  client?: KeyvRedisOptions;\n  cluster?: RedisClusterOptions;\n};\n\n/**\n * Union type of all cache store options.\n *\n * @public\n */\nexport type CacheStoreOptions =\n  | RedisCacheStoreOptions\n  | InfinispanCacheStoreOptions;\n\n/**\n * Options given when constructing a {@link CacheManager}.\n *\n * @public\n */\nexport type CacheManagerOptions = {\n  /**\n   * An optional logger for use by the PluginCacheManager.\n   */\n  logger?: LoggerService;\n\n  /**\n   * An optional handler for connection errors emitted from the underlying data\n   * store.\n   */\n  onError?: (err: Error) => void;\n};\n\nexport function ttlToMilliseconds(ttl: number | HumanDuration): number {\n  return typeof ttl === 'number' ? ttl : durationToMilliseconds(ttl);\n}\n\n/**\n * Configuration for a single Infinispan server.\n */\nexport type InfinispanServerConfig = {\n  host: string;\n  port: number;\n};\n\n/**\n * Options for putting values into Infinispan cache.\n */\nexport type InfinispanPutOptions = {\n  lifespan?: string;\n  maxIdle?: string;\n  previous?: boolean;\n  flags?: string[];\n};\n/**\n * SSL/TLS options for the Infinispan client.\n */\nexport type InfinispanSslOptions = {\n  enabled: boolean;\n  secureProtocol?: string;\n  trustCerts?: string[]; // Array of trusted CA certificates\n  clientAuth?: InfinispanClientAuthOptions;\n  cryptoStore?: InfinispanCryptoStoreOptions;\n  sniHostName?: string;\n};\n\n/**\n * Authentication options for the Infinispan client.\n * This is used for client-side authentication with the Infinispan server.\n */\nexport type InfinispanClientAuthOptions = {\n  key?: string;\n  passphrase?: string;\n  cert?: string;\n};\n\n/**\n * Options for the Infinispan client crypto store.\n * This is used for storing keys and certificates securely.\n */\nexport type InfinispanCryptoStoreOptions = {\n  path?: string;\n  passphrase?: string;\n};\n\n/**\n * Authentication options for the Infinispan client.\n */\nexport type InfinispanAuthOptions = {\n  enabled: boolean;\n  saslMechanism?: string;\n  userName?: string;\n  password?: string;\n  token?: string;\n  authzid?: string;\n};\n\n/**\n * Options for the Infinispan cache store, designed to be configured\n * in app-config.yaml under `backend.cache.infinispan`.\n */\nexport type InfinispanCacheStoreOptions = {\n  type: 'infinispan';\n  servers: InfinispanServerConfig | InfinispanServerConfig[];\n  options?: InfinispanClientBehaviorOptions;\n};\n\nexport type InfinispanClusterConfig = {\n  name?: string;\n  servers: InfinispanServerConfig[];\n};\n\nexport type DataFormatOptions = {\n  keyType: 'text/plain' | 'application/json';\n  valueType: 'text/plain' | 'application/json';\n};\n\n/**\n * Detailed client behavior options for the Infinispan client.\n * @public\n */\nexport type InfinispanClientBehaviorOptions = {\n  version?: '2.9' | '2.5' | '2.2';\n  cacheName?: string;\n  maxRetries?: number;\n  connectionTimeout?: number;\n  socketTimeout?: number;\n  authentication?: InfinispanAuthOptions;\n  ssl?: InfinispanSslOptions;\n  mediaType?: 'text/plain' | 'application/json';\n  topologyUpdates?: boolean;\n  clusters?: InfinispanClusterConfig[];\n  dataFormat: DataFormatOptions;\n};\n"],"names":["durationToMilliseconds"],"mappings":";;;;AA0DO,SAAS,kBAAkB,GAAA,EAAqC;AACrE,EAAA,OAAO,OAAO,GAAA,KAAQ,QAAA,GAAW,GAAA,GAAMA,6BAAuB,GAAG,CAAA;AACnE;;;;"}