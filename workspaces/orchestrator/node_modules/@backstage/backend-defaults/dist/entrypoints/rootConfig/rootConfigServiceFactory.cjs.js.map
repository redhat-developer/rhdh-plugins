{"version":3,"file":"rootConfigServiceFactory.cjs.js","sources":["../../../src/entrypoints/rootConfig/rootConfigServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport {\n  ConfigSources,\n  RemoteConfigSourceOptions,\n} from '@backstage/config-loader';\n\n/**\n * Access to static configuration.\n *\n * See {@link @backstage/code-plugin-api#RootConfigService}\n * and {@link https://backstage.io/docs/backend-system/core-services/root-config | the service docs}\n * for more information.\n *\n * @public\n */\nexport interface RootConfigFactoryOptions {\n  /**\n   * Process arguments to use instead of the default `process.argv()`.\n   */\n  argv?: string[];\n\n  /**\n   * Enables and sets options for remote configuration loading.\n   */\n  remote?: Pick<RemoteConfigSourceOptions, 'reloadInterval'>;\n  watch?: boolean;\n}\n\nexport const rootConfigServiceFactoryWithOptions = (\n  options?: RootConfigFactoryOptions,\n) =>\n  createServiceFactory({\n    service: coreServices.rootConfig,\n    deps: {},\n    async factory() {\n      const source = ConfigSources.default({\n        argv: options?.argv,\n        remote: options?.remote,\n        watch: options?.watch,\n      });\n      console.log(`Loading config from ${source}`);\n      return await ConfigSources.toConfig(source);\n    },\n  });\n\n/**\n * @public\n */\nexport const rootConfigServiceFactory = Object.assign(\n  rootConfigServiceFactoryWithOptions,\n  rootConfigServiceFactoryWithOptions(),\n);\n"],"names":["createServiceFactory","coreServices","ConfigSources"],"mappings":";;;;;AA+CO,MAAM,mCAAA,GAAsC,CACjD,OAAA,KAEAA,qCAAA,CAAqB;AAAA,EACnB,SAASC,6BAAA,CAAa,UAAA;AAAA,EACtB,MAAM,EAAC;AAAA,EACP,MAAM,OAAA,GAAU;AACd,IAAA,MAAM,MAAA,GAASC,2BAAc,OAAA,CAAQ;AAAA,MACnC,MAAM,OAAA,EAAS,IAAA;AAAA,MACf,QAAQ,OAAA,EAAS,MAAA;AAAA,MACjB,OAAO,OAAA,EAAS;AAAA,KACjB,CAAA;AACD,IAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,oBAAA,EAAuB,MAAM,CAAA,CAAE,CAAA;AAC3C,IAAA,OAAO,MAAMA,0BAAA,CAAc,QAAA,CAAS,MAAM,CAAA;AAAA,EAC5C;AACF,CAAC;AAKI,MAAM,2BAA2B,MAAA,CAAO,MAAA;AAAA,EAC7C,mCAAA;AAAA,EACA,mCAAA;AACF;;;;;"}