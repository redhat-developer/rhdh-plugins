import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import { makeStyles } from '@material-ui/core/styles';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import { Helmet } from 'react-helmet';
import { Link } from '../../components/Link/Link.esm.js';
import { Breadcrumbs } from '../Breadcrumbs/Breadcrumbs.esm.js';
import '../Sidebar/Bar.esm.js';
import '../Sidebar/MobileSidebar.esm.js';
import '../Sidebar/SidebarGroup.esm.js';
import '../Sidebar/SidebarSubmenuItem.esm.js';
import '../Sidebar/SidebarSubmenu.esm.js';
import { useContent } from '../Sidebar/Page.esm.js';
import '../Sidebar/Items.esm.js';
import '../Sidebar/config.esm.js';
import '../Sidebar/SidebarOpenStateContext.esm.js';
import '../Sidebar/SidebarPinStateContext.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    header: {
      gridArea: "pageHeader",
      padding: theme.spacing(3),
      width: "100%",
      boxShadow: theme.shadows[4],
      position: "relative",
      zIndex: 100,
      display: "flex",
      flexDirection: "row",
      alignItems: "center",
      backgroundImage: theme.page.backgroundImage,
      backgroundPosition: "center",
      backgroundSize: "cover",
      [theme.breakpoints.down("sm")]: {
        flexWrap: "wrap"
      }
    },
    leftItemsBox: {
      maxWidth: "100%",
      flexGrow: 1
    },
    rightItemsBox: {
      width: "auto",
      alignItems: "center"
    },
    title: {
      color: theme.page.fontColor,
      wordBreak: "break-word",
      fontSize: theme.typography.h3.fontSize,
      marginBottom: 0
    },
    subtitle: {
      color: theme.page.fontColor,
      opacity: 0.8,
      display: "inline-block",
      // prevents margin collapse of adjacent siblings
      marginTop: theme.spacing(1),
      maxWidth: "75ch"
    },
    type: {
      textTransform: "uppercase",
      fontSize: 11,
      opacity: 0.8,
      marginBottom: theme.spacing(1),
      color: theme.page.fontColor
    },
    breadcrumb: {
      color: theme.page.fontColor
    },
    breadcrumbType: {
      fontSize: "inherit",
      opacity: 0.7,
      marginRight: -theme.spacing(0.3),
      marginBottom: theme.spacing(0.3)
    },
    breadcrumbTitle: {
      fontSize: "inherit",
      marginLeft: -theme.spacing(0.3),
      marginBottom: theme.spacing(0.3)
    }
  }),
  { name: "BackstageHeader" }
);
const TypeFragment = ({
  type,
  typeLink,
  classes,
  pageTitle
}) => {
  if (!type) {
    return null;
  }
  if (!typeLink) {
    return /* @__PURE__ */ jsx(Typography, { className: classes.type, children: type });
  }
  return /* @__PURE__ */ jsxs(Breadcrumbs, { className: classes.breadcrumb, children: [
    /* @__PURE__ */ jsx(Link, { to: typeLink, children: type }),
    /* @__PURE__ */ jsx(Typography, { children: pageTitle })
  ] });
};
const TitleFragment = ({ pageTitle, classes, tooltip }) => {
  const { contentRef } = useContent();
  const FinalTitle = /* @__PURE__ */ jsx(
    Typography,
    {
      ref: contentRef,
      tabIndex: -1,
      className: classes.title,
      variant: "h1",
      children: pageTitle
    }
  );
  if (!tooltip) {
    return FinalTitle;
  }
  return /* @__PURE__ */ jsx(Tooltip, { title: tooltip, placement: "top-start", children: FinalTitle });
};
const SubtitleFragment = ({ classes, subtitle }) => {
  if (!subtitle) {
    return null;
  }
  if (typeof subtitle !== "string") {
    return /* @__PURE__ */ jsx(Fragment, { children: subtitle });
  }
  return /* @__PURE__ */ jsx(
    Typography,
    {
      className: classes.subtitle,
      variant: "subtitle2",
      component: "span",
      children: subtitle
    }
  );
};
function Header(props) {
  const {
    children,
    pageTitleOverride,
    style,
    subtitle,
    title,
    tooltip,
    type,
    typeLink
  } = props;
  const classes = useStyles();
  const configApi = useApi(configApiRef);
  const appTitle = configApi.getOptionalString("app.title") || "Backstage";
  const documentTitle = pageTitleOverride || title;
  const pageTitle = title || pageTitleOverride;
  const titleTemplate = `${documentTitle} | %s | ${appTitle}`;
  const defaultTitle = `${documentTitle} | ${appTitle}`;
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Helmet, { titleTemplate, defaultTitle }),
    /* @__PURE__ */ jsxs("header", { style, className: classes.header, children: [
      /* @__PURE__ */ jsxs(Box, { className: classes.leftItemsBox, children: [
        /* @__PURE__ */ jsx(
          TypeFragment,
          {
            classes,
            type,
            typeLink,
            pageTitle
          }
        ),
        /* @__PURE__ */ jsx(
          TitleFragment,
          {
            classes,
            pageTitle,
            tooltip
          }
        ),
        /* @__PURE__ */ jsx(SubtitleFragment, { classes, subtitle })
      ] }),
      /* @__PURE__ */ jsx(Grid, { container: true, className: classes.rightItemsBox, spacing: 4, children })
    ] })
  ] });
}

export { Header };
//# sourceMappingURL=Header.esm.js.map
