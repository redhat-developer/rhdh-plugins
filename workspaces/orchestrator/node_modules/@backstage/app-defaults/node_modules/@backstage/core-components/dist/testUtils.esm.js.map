{"version":3,"file":"testUtils.esm.js","sources":["../src/testUtils.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport { act } from '@testing-library/react';\n\nconst originalMatchMedia = window.matchMedia;\n\n/**\n *  This is a mocking method suggested in the Jest docs, as it is not implemented in JSDOM yet.\n *  It can be used to mock values for the Material UI `useMediaQuery` hook if it is used in a tested component.\n *\n *  For issues checkout the documentation:\n *  https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom\n *\n *  If there are any updates from Material UI React on testing `useMediaQuery` this mock should be replaced\n *  https://mui.com/material-ui/react-use-media-query/#testing\n *\n * @public\n *\n * @example\n * Match with any media query:\n * ```ts\n * mockBreakpoint({ matches: true });\n * ```\n */\nexport function mockBreakpoint(options: { matches: boolean }): void;\n/**\n *  This is a mocking method suggested in the Jest docs, as it is not implemented in JSDOM yet.\n *  It can be used to mock values for the Material UI `useMediaQuery` hook if it is used in a tested component.\n *\n *  For issues checkout the documentation:\n *  https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom\n *\n *  If there are any updates from Material UI React on testing `useMediaQuery` this mock should be replaced\n *  https://mui.com/material-ui/react-use-media-query/#testing\n *\n * @public\n *\n * @example\n * Set the initial breakpoint:\n * ```ts\n * mockBreakpoint({ initialBreakpoint: 'md' });\n * ```\n *\n * @example\n * Map media queries to breakpoints:\n * ```ts\n * mockBreakpoint({ queryBreakpointMap: { '(min-width:1500px)': 'xl', '(min-width:1000px)': 'lg', '(min-width:700px)': 'md', '(min-width:400px)': 'sm', '(min-width:0px)': 'xs', } });\n * ```\n *\n * @example\n * Change the breakpoint during the test:\n * ```ts\n * const { set } = mockBreakpoint({ initialBreakpoint: 'md' });\n * set('lg');\n * ```\n **/\nexport function mockBreakpoint(options: {\n  /** Defaults to 'lg' */\n  initialBreakpoint?: Breakpoint;\n  /** Defaults to \\{ '(min-width:1920px)': 'xl', '(min-width:1280px)': 'lg', '(min-width:960px)': 'md', '(min-width:600px)': 'sm', '(min-width:0px)': 'xs' \\} */\n  queryBreakpointMap?: Record<string, Breakpoint>;\n}): {\n  set(value: string): void;\n  remove(): void;\n};\nexport function mockBreakpoint(\n  options:\n    | {\n        matches: boolean;\n      }\n    | {\n        initialBreakpoint?: Breakpoint;\n        queryBreakpointMap?: Record<string, Breakpoint>;\n      },\n): {\n  set(value: string): void;\n  remove(): void;\n} {\n  const mediaQueries: {\n    mediaQueryString: string;\n    mediaQueryList: { matches: boolean };\n    mediaQueryListeners: Set<(event: { matches: boolean }) => void>;\n  }[] = [];\n  let breakpoint: Breakpoint = 'lg';\n  if ('initialBreakpoint' in options && options.initialBreakpoint) {\n    breakpoint = options.initialBreakpoint;\n  }\n  const breakpoints: Record<string, Breakpoint> =\n    'queryBreakpointMap' in options &&\n    typeof options.queryBreakpointMap === 'object'\n      ? options.queryBreakpointMap\n      : {\n          '(min-width:1920px)': 'xl',\n          '(min-width:1280px)': 'lg',\n          '(min-width:960px)': 'md',\n          '(min-width:600px)': 'sm',\n          '(min-width:0px)': 'xs',\n        };\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: jest.fn().mockImplementation(mediaQueryString => {\n      const mediaQueryListeners = new Set<\n        (event: { matches: boolean }) => void\n      >();\n      const mediaQueryList = {\n        matches:\n          'matches' in options\n            ? options.matches\n            : breakpoints[mediaQueryString] === breakpoint,\n        media: mediaQueryString,\n        onchange: null,\n        addListener: jest.fn(listener => {\n          mediaQueryListeners.add(listener);\n        }),\n        removeListener: jest.fn(listener => {\n          mediaQueryListeners.delete(listener);\n        }),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      };\n      mediaQueries.push({\n        mediaQueryString,\n        mediaQueryList,\n        mediaQueryListeners,\n      });\n      return mediaQueryList;\n    }),\n  });\n\n  return {\n    set(newBreakpoint: Breakpoint) {\n      breakpoint = newBreakpoint;\n      mediaQueries.forEach(\n        ({ mediaQueryString, mediaQueryList, mediaQueryListeners }) => {\n          act(() => {\n            const matches =\n              'matches' in options\n                ? options.matches\n                : breakpoints[mediaQueryString] === breakpoint;\n            mediaQueryList.matches = matches;\n            mediaQueryListeners.forEach(listener => listener({ matches }));\n          });\n        },\n      );\n    },\n    remove() {\n      window.matchMedia = originalMatchMedia;\n    },\n  };\n}\n"],"names":[],"mappings":";;AAmBA,MAAM,qBAAqB,MAAA,CAAO,UAAA;AA6D3B,SAAS,eACd,OAAA,EAWA;AACA,EAAA,MAAM,eAIA,EAAC;AACP,EAAA,IAAI,UAAA,GAAyB,IAAA;AAC7B,EAAA,IAAI,mBAAA,IAAuB,OAAA,IAAW,OAAA,CAAQ,iBAAA,EAAmB;AAC/D,IAAA,UAAA,GAAa,OAAA,CAAQ,iBAAA;AAAA,EACvB;AACA,EAAA,MAAM,WAAA,GACJ,wBAAwB,OAAA,IACxB,OAAO,QAAQ,kBAAA,KAAuB,QAAA,GAClC,QAAQ,kBAAA,GACR;AAAA,IACE,oBAAA,EAAsB,IAAA;AAAA,IACtB,oBAAA,EAAsB,IAAA;AAAA,IACtB,mBAAA,EAAqB,IAAA;AAAA,IACrB,mBAAA,EAAqB,IAAA;AAAA,IACrB,iBAAA,EAAmB;AAAA,GACrB;AACN,EAAA,MAAA,CAAO,cAAA,CAAe,QAAQ,YAAA,EAAc;AAAA,IAC1C,QAAA,EAAU,IAAA;AAAA,IACV,KAAA,EAAO,IAAA,CAAK,EAAA,EAAG,CAAE,mBAAmB,CAAA,gBAAA,KAAoB;AACtD,MAAA,MAAM,mBAAA,uBAA0B,GAAA,EAE9B;AACF,MAAA,MAAM,cAAA,GAAiB;AAAA,QACrB,SACE,SAAA,IAAa,OAAA,GACT,QAAQ,OAAA,GACR,WAAA,CAAY,gBAAgB,CAAA,KAAM,UAAA;AAAA,QACxC,KAAA,EAAO,gBAAA;AAAA,QACP,QAAA,EAAU,IAAA;AAAA,QACV,WAAA,EAAa,IAAA,CAAK,EAAA,CAAG,CAAA,QAAA,KAAY;AAC/B,UAAA,mBAAA,CAAoB,IAAI,QAAQ,CAAA;AAAA,QAClC,CAAC,CAAA;AAAA,QACD,cAAA,EAAgB,IAAA,CAAK,EAAA,CAAG,CAAA,QAAA,KAAY;AAClC,UAAA,mBAAA,CAAoB,OAAO,QAAQ,CAAA;AAAA,QACrC,CAAC,CAAA;AAAA,QACD,gBAAA,EAAkB,KAAK,EAAA,EAAG;AAAA,QAC1B,mBAAA,EAAqB,KAAK,EAAA,EAAG;AAAA,QAC7B,aAAA,EAAe,KAAK,EAAA;AAAG,OACzB;AACA,MAAA,YAAA,CAAa,IAAA,CAAK;AAAA,QAChB,gBAAA;AAAA,QACA,cAAA;AAAA,QACA;AAAA,OACD,CAAA;AACD,MAAA,OAAO,cAAA;AAAA,IACT,CAAC;AAAA,GACF,CAAA;AAED,EAAA,OAAO;AAAA,IACL,IAAI,aAAA,EAA2B;AAC7B,MAAA,UAAA,GAAa,aAAA;AACb,MAAA,YAAA,CAAa,OAAA;AAAA,QACX,CAAC,EAAE,gBAAA,EAAkB,cAAA,EAAgB,qBAAoB,KAAM;AAC7D,UAAA,GAAA,CAAI,MAAM;AACR,YAAA,MAAM,UACJ,SAAA,IAAa,OAAA,GACT,QAAQ,OAAA,GACR,WAAA,CAAY,gBAAgB,CAAA,KAAM,UAAA;AACxC,YAAA,cAAA,CAAe,OAAA,GAAU,OAAA;AACzB,YAAA,mBAAA,CAAoB,QAAQ,CAAA,QAAA,KAAY,QAAA,CAAS,EAAE,OAAA,EAAS,CAAC,CAAA;AAAA,UAC/D,CAAC,CAAA;AAAA,QACH;AAAA,OACF;AAAA,IACF,CAAA;AAAA,IACA,MAAA,GAAS;AACP,MAAA,MAAA,CAAO,UAAA,GAAa,kBAAA;AAAA,IACtB;AAAA,GACF;AACF;;;;"}