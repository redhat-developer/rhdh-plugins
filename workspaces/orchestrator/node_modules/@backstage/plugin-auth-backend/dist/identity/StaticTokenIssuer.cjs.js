'use strict';

var issueUserToken = require('./issueUserToken.cjs.js');

class StaticTokenIssuer {
  issuer;
  logger;
  keyStore;
  sessionExpirationSeconds;
  omitClaimsFromToken;
  constructor(options, keyStore) {
    this.issuer = options.issuer;
    this.logger = options.logger;
    this.sessionExpirationSeconds = options.sessionExpirationSeconds;
    this.keyStore = keyStore;
    this.omitClaimsFromToken = options.omitClaimsFromToken;
  }
  async issueToken(params) {
    const key = await this.getSigningKey();
    return issueUserToken.issueUserToken({
      issuer: this.issuer,
      key,
      keyDurationSeconds: this.sessionExpirationSeconds,
      logger: this.logger,
      omitClaimsFromToken: this.omitClaimsFromToken,
      params
    });
  }
  async getSigningKey() {
    const { items: keys } = await this.keyStore.listKeys();
    if (keys.length >= 1) {
      return this.keyStore.getPrivateKey(keys[0].key.kid);
    }
    throw new Error("Keystore should hold at least 1 key");
  }
  async listPublicKeys() {
    const { items: keys } = await this.keyStore.listKeys();
    return { keys: keys.map(({ key }) => key) };
  }
}

exports.StaticTokenIssuer = StaticTokenIssuer;
//# sourceMappingURL=StaticTokenIssuer.cjs.js.map
