'use strict';

var express = require('express');
var Router = require('express-promise-router');
var cookieParser = require('cookie-parser');
var errors = require('@backstage/errors');
var KeyStores = require('../identity/KeyStores.cjs.js');
var TokenFactory = require('../identity/TokenFactory.cjs.js');
var UserInfoDatabase = require('../database/UserInfoDatabase.cjs.js');
var session = require('express-session');
var connectSessionKnex = require('connect-session-knex');
var passport = require('passport');
var AuthDatabase = require('../database/AuthDatabase.cjs.js');
var readBackstageTokenExpiration = require('./readBackstageTokenExpiration.cjs.js');
var StaticTokenIssuer = require('../identity/StaticTokenIssuer.cjs.js');
var StaticKeyStore = require('../identity/StaticKeyStore.cjs.js');
var router = require('../providers/router.cjs.js');
var OidcRouter = require('./OidcRouter.cjs.js');
var OidcDatabase = require('../database/OidcDatabase.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var express__default = /*#__PURE__*/_interopDefaultCompat(express);
var Router__default = /*#__PURE__*/_interopDefaultCompat(Router);
var cookieParser__default = /*#__PURE__*/_interopDefaultCompat(cookieParser);
var session__default = /*#__PURE__*/_interopDefaultCompat(session);
var connectSessionKnex__default = /*#__PURE__*/_interopDefaultCompat(connectSessionKnex);
var passport__default = /*#__PURE__*/_interopDefaultCompat(passport);

async function createRouter(options) {
  const {
    logger,
    config,
    discovery,
    database: db,
    tokenFactoryAlgorithm,
    providerFactories = {},
    httpAuth
  } = options;
  const router$1 = Router__default.default();
  const appUrl = config.getString("app.baseUrl");
  const authUrl = await discovery.getExternalBaseUrl("auth");
  const backstageTokenExpiration = readBackstageTokenExpiration.readBackstageTokenExpiration(config);
  const database = AuthDatabase.AuthDatabase.create(db);
  const keyStore = await KeyStores.KeyStores.fromConfig(config, {
    logger,
    database
  });
  const userInfo = await UserInfoDatabase.UserInfoDatabase.create({
    database
  });
  const omitClaimsFromToken = config.getOptionalBoolean(
    "auth.omitIdentityTokenOwnershipClaim"
  ) ? ["ent"] : [];
  let tokenIssuer;
  if (keyStore instanceof StaticKeyStore.StaticKeyStore) {
    tokenIssuer = new StaticTokenIssuer.StaticTokenIssuer(
      {
        logger: logger.child({ component: "token-factory" }),
        issuer: authUrl,
        sessionExpirationSeconds: backstageTokenExpiration,
        omitClaimsFromToken
      },
      keyStore
    );
  } else {
    tokenIssuer = new TokenFactory.TokenFactory({
      issuer: authUrl,
      keyStore,
      keyDurationSeconds: backstageTokenExpiration,
      logger: logger.child({ component: "token-factory" }),
      algorithm: tokenFactoryAlgorithm ?? config.getOptionalString("auth.identityTokenAlgorithm"),
      omitClaimsFromToken
    });
  }
  const secret = config.getOptionalString("auth.session.secret");
  if (secret) {
    router$1.use(cookieParser__default.default(secret));
    const enforceCookieSSL = authUrl.startsWith("https");
    const KnexSessionStore = connectSessionKnex__default.default(session__default.default);
    router$1.use(
      session__default.default({
        secret,
        saveUninitialized: false,
        resave: false,
        cookie: { secure: enforceCookieSSL ? "auto" : false },
        store: new KnexSessionStore({
          createtable: false,
          knex: await database.get()
        })
      })
    );
    router$1.use(passport__default.default.initialize());
    router$1.use(passport__default.default.session());
  } else {
    router$1.use(cookieParser__default.default());
  }
  router$1.use(express__default.default.urlencoded({ extended: false }));
  router$1.use(express__default.default.json());
  router.bindProviderRouters(router$1, {
    providers: providerFactories,
    appUrl,
    baseUrl: authUrl,
    tokenIssuer,
    ...options,
    auth: options.auth,
    userInfo
  });
  const oidc = await OidcDatabase.OidcDatabase.create({ database });
  const oidcRouter = OidcRouter.OidcRouter.create({
    auth: options.auth,
    tokenIssuer,
    baseUrl: authUrl,
    appUrl,
    userInfo,
    oidc,
    logger,
    httpAuth,
    config
  });
  router$1.use(oidcRouter.getRouter());
  router$1.use("/:provider/", (req) => {
    const { provider } = req.params;
    throw new errors.NotFoundError(`Unknown auth provider '${provider}'`);
  });
  return router$1;
}

exports.createRouter = createRouter;
//# sourceMappingURL=router.cjs.js.map
