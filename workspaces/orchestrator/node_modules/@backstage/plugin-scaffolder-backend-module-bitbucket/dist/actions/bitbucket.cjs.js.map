{"version":3,"file":"bitbucket.cjs.js","sources":["../../src/actions/bitbucket.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  BitbucketIntegrationConfig,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  initRepoAndPush,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { Config } from '@backstage/config';\nimport { examples } from './bitbucket.examples';\n\nconst createBitbucketCloudRepository = async (opts: {\n  workspace: string;\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  mainBranch: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    workspace,\n    project,\n    repo,\n    description,\n    repoVisibility,\n    mainBranch,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      scm: 'git',\n      description: description,\n      is_private: repoVisibility === 'private',\n      project: { key: project },\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  let response: Response;\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'https') {\n      remoteUrl = link.href;\n    }\n  }\n\n  // \"mainbranch.name\" cannot be set neither at create nor update of the repo\n  // the first pushed branch will be set as \"main branch\" then\n  const repoContentsUrl = `${r.links.html.href}/src/${mainBranch}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\nconst createBitbucketServerRepository = async (opts: {\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    project,\n    repo,\n    description,\n    authorization,\n    repoVisibility,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: repo,\n      description: description,\n      public: repoVisibility === 'public',\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(`${apiBaseUrl}/projects/${project}/repos`, options);\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'http') {\n      remoteUrl = link.href;\n    }\n  }\n\n  const repoContentsUrl = `${r.links.self[0].href}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\nconst getAuthorizationHeader = (config: BitbucketIntegrationConfig) => {\n  if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n\n    return `Basic ${buffer.toString('base64')}`;\n  }\n\n  if (config.token) {\n    return `Bearer ${config.token}`;\n  }\n\n  throw new Error(\n    `Authorization has not been provided for Bitbucket. Please add either username + appPassword or token to the Integrations config`,\n  );\n};\n\nconst performEnableLFS = async (opts: {\n  authorization: string;\n  host: string;\n  project: string;\n  repo: string;\n}) => {\n  const { authorization, host, project, repo } = opts;\n\n  const options: RequestInit = {\n    method: 'PUT',\n    headers: {\n      Authorization: authorization,\n    },\n  };\n\n  const { ok, status, statusText } = await fetch(\n    `https://${host}/rest/git-lfs/admin/projects/${project}/repos/${repo}/enabled`,\n    options,\n  );\n\n  if (!ok)\n    throw new Error(\n      `Failed to enable LFS in the repository, ${status}: ${statusText}`,\n    );\n};\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Bitbucket.\n * @public\n * @deprecated in favor of \"createPublishBitbucketCloudAction\" by \\@backstage/plugin-scaffolder-backend-module-bitbucket-cloud and \"createPublishBitbucketServerAction\" by \\@backstage/plugin-scaffolder-backend-module-bitbucket-server\n */\nexport function createPublishBitbucketAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:bitbucket',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Bitbucket.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        description: z =>\n          z\n            .string({\n              description: 'Repository Description',\n            })\n            .optional(),\n        repoVisibility: z =>\n          z\n            .enum(['private', 'public'], {\n              description: 'Repository Visibility',\n            })\n            .optional(),\n        defaultBranch: z =>\n          z\n            .string({\n              description: `Sets the default branch on the repository. The default value is 'master'`,\n            })\n            .optional(),\n        sourcePath: z =>\n          z\n            .string({\n              description:\n                'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            })\n            .optional(),\n        enableLFS: z =>\n          z\n            .boolean({\n              description:\n                'Enable LFS for the repository. Only available for hosted Bitbucket.',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to BitBucket',\n            })\n            .optional(),\n        gitCommitMessage: z =>\n          z\n            .string({\n              description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the default author email for the commit.`,\n            })\n            .optional(),\n        signCommit: z =>\n          z\n            .boolean({\n              description: 'Sign commit with configured PGP private key',\n            })\n            .optional(),\n      },\n      output: {\n        remoteUrl: z =>\n          z\n            .string({\n              description: 'A URL to the repository with the provider',\n            })\n            .optional(),\n        repoContentsUrl: z =>\n          z\n            .string({\n              description: 'A URL to the root of the repository',\n            })\n            .optional(),\n        commitHash: z =>\n          z\n            .string({\n              description: 'The git commit hash of the initial commit',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      ctx.logger.warn(\n        `[Deprecated] Please migrate the use of action \"publish:bitbucket\" to \"publish:bitbucketCloud\" or \"publish:bitbucketServer\".`,\n      );\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'master',\n        repoVisibility = 'private',\n        enableLFS = false,\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n        signCommit,\n      } = ctx.input;\n\n      const { workspace, project, repo, host } = parseRepoUrl(\n        repoUrl,\n        integrations,\n      );\n\n      // Workspace is only required for bitbucket cloud\n      if (host === 'bitbucket.org') {\n        if (!workspace) {\n          throw new InputError(\n            `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`,\n          );\n        }\n      }\n\n      // Project is required for both bitbucket cloud and bitbucket server\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucket.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const authorization = getAuthorizationHeader(\n        ctx.input.token\n          ? {\n              host: integrationConfig.config.host,\n              apiBaseUrl: integrationConfig.config.apiBaseUrl,\n              token: ctx.input.token,\n            }\n          : integrationConfig.config,\n      );\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      const createMethod =\n        host === 'bitbucket.org'\n          ? createBitbucketCloudRepository\n          : createBitbucketServerRepository;\n\n      const { remoteUrl, repoContentsUrl } = await ctx.checkpoint({\n        key: `create.repo.${host}.${repo}`,\n        fn: async () =>\n          createMethod({\n            authorization,\n            workspace: workspace || '',\n            project,\n            repo,\n            repoVisibility,\n            mainBranch: defaultBranch,\n            description,\n            apiBaseUrl,\n          }),\n      });\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n      const signingKey =\n        integrationConfig.config.commitSigningKey ??\n        config.getOptionalString('scaffolder.defaultCommitSigningKey');\n      if (signCommit && !signingKey) {\n        throw new Error(\n          'Signing commits is enabled but no signing key is provided in the configuration',\n        );\n      }\n\n      let auth;\n\n      if (ctx.input.token) {\n        auth = {\n          username: 'x-token-auth',\n          password: ctx.input.token,\n        };\n      } else {\n        auth = {\n          username: integrationConfig.config.username\n            ? integrationConfig.config.username\n            : 'x-token-auth',\n          password: integrationConfig.config.appPassword\n            ? integrationConfig.config.appPassword\n            : integrationConfig.config.token ?? '',\n        };\n      }\n\n      const commitHash = await ctx.checkpoint({\n        key: `init.repo.and.push${host}.${repo}`,\n        fn: async () => {\n          const commitResult = await initRepoAndPush({\n            dir: getRepoSourceDirectory(\n              ctx.workspacePath,\n              ctx.input.sourcePath,\n            ),\n            remoteUrl,\n            auth,\n            defaultBranch,\n            logger: ctx.logger,\n            commitMessage: gitCommitMessage\n              ? gitCommitMessage\n              : config.getOptionalString('scaffolder.defaultCommitMessage'),\n            gitAuthorInfo,\n            signingKey: signCommit ? signingKey : undefined,\n          });\n          return commitResult?.commitHash;\n        },\n      });\n\n      if (enableLFS && host !== 'bitbucket.org') {\n        await performEnableLFS({ authorization, host, project, repo });\n      }\n\n      ctx.output('commitHash', commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","initRepoAndPush","getRepoSourceDirectory"],"mappings":"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"}