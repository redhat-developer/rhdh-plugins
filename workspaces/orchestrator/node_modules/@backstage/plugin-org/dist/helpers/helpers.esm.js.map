{"version":3,"file":"helpers.esm.js","sources":["../../src/helpers/helpers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CompoundEntityRef,\n  DEFAULT_NAMESPACE,\n  Entity,\n  GroupEntity,\n  RELATION_PARENT_OF,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport {\n  CatalogApi,\n  getEntityRelations,\n} from '@backstage/plugin-catalog-react';\n\nexport const getMembersFromGroups = async (\n  groups: CompoundEntityRef[],\n  catalogApi: CatalogApi,\n  relationship = 'memberof',\n) => {\n  const membersList =\n    groups.length === 0\n      ? { items: [] }\n      : await catalogApi.getEntities({\n          filter: {\n            kind: 'User',\n            [`relations.${relationship.toLocaleLowerCase('en-US')}`]:\n              groups.map(group =>\n                stringifyEntityRef({\n                  kind: 'group',\n                  namespace: group.namespace.toLocaleLowerCase('en-US'),\n                  name: group.name.toLocaleLowerCase('en-US'),\n                }),\n              ),\n          },\n        });\n\n  return membersList.items as UserEntity[];\n};\n\nexport const getDescendantGroupsFromGroup = async (\n  group: GroupEntity,\n  catalogApi: CatalogApi,\n) => {\n  const alreadyQueuedOrExpandedGroupNames = new Map<string, boolean>();\n  const groupRef: CompoundEntityRef = {\n    kind: group.kind,\n    namespace: group.metadata.namespace ?? DEFAULT_NAMESPACE,\n    name: group.metadata.name,\n  };\n\n  const groupQueue = [groupRef];\n  const resultantGroupRefs: CompoundEntityRef[] = [];\n\n  // Continue expanding groups until there are no more\n  while (groupQueue.length > 0) {\n    const activeGroupRef = groupQueue.shift() as CompoundEntityRef;\n    const activeGroup = await catalogApi.getEntityByRef(activeGroupRef);\n    alreadyQueuedOrExpandedGroupNames.set(\n      stringifyEntityRef(activeGroupRef),\n      true,\n    );\n\n    const childGroups = getEntityRelations(activeGroup, RELATION_PARENT_OF, {\n      kind: 'Group',\n    }).filter(\n      currentGroup =>\n        !alreadyQueuedOrExpandedGroupNames.has(\n          stringifyEntityRef(currentGroup),\n        ),\n    );\n    childGroups.forEach(childGroup =>\n      alreadyQueuedOrExpandedGroupNames.set(\n        stringifyEntityRef(childGroup),\n        true,\n      ),\n    );\n\n    groupQueue.push(...childGroups);\n    resultantGroupRefs.push(...childGroups);\n  }\n\n  return resultantGroupRefs;\n};\n\nexport const getAllDesendantMembersForGroupEntity = async (\n  groupEntity: GroupEntity,\n  catalogApi: CatalogApi,\n  relationship = 'memberof',\n) =>\n  getMembersFromGroups(\n    await getDescendantGroupsFromGroup(groupEntity, catalogApi),\n    catalogApi,\n    relationship,\n  );\n\nexport const removeDuplicateEntitiesFrom = (entityArray: Entity[]) => {\n  const seenEntities = new Map<string, boolean>();\n\n  return entityArray.filter(entity => {\n    const stringifiedEntity = stringifyEntityRef(entity);\n    const isDuplicate = seenEntities.has(stringifiedEntity);\n\n    seenEntities.set(stringifiedEntity, true);\n    return !isDuplicate;\n  });\n};\n"],"names":[],"mappings":";;;AA8BO,MAAM,oBAAA,GAAuB,OAClC,MAAA,EACA,UAAA,EACA,eAAe,UAAA,KACZ;AACH,EAAA,MAAM,WAAA,GACJ,MAAA,CAAO,MAAA,KAAW,CAAA,GACd,EAAE,KAAA,EAAO,EAAC,EAAE,GACZ,MAAM,UAAA,CAAW,WAAA,CAAY;AAAA,IAC3B,MAAA,EAAQ;AAAA,MACN,IAAA,EAAM,MAAA;AAAA,MACN,CAAC,aAAa,YAAA,CAAa,iBAAA,CAAkB,OAAO,CAAC,CAAA,CAAE,GACrD,MAAA,CAAO,GAAA;AAAA,QAAI,WACT,kBAAA,CAAmB;AAAA,UACjB,IAAA,EAAM,OAAA;AAAA,UACN,SAAA,EAAW,KAAA,CAAM,SAAA,CAAU,iBAAA,CAAkB,OAAO,CAAA;AAAA,UACpD,IAAA,EAAM,KAAA,CAAM,IAAA,CAAK,iBAAA,CAAkB,OAAO;AAAA,SAC3C;AAAA;AACH;AACJ,GACD,CAAA;AAEP,EAAA,OAAO,WAAA,CAAY,KAAA;AACrB;AAEO,MAAM,4BAAA,GAA+B,OAC1C,KAAA,EACA,UAAA,KACG;AACH,EAAA,MAAM,iCAAA,uBAAwC,GAAA,EAAqB;AACnE,EAAA,MAAM,QAAA,GAA8B;AAAA,IAClC,MAAM,KAAA,CAAM,IAAA;AAAA,IACZ,SAAA,EAAW,KAAA,CAAM,QAAA,CAAS,SAAA,IAAa,iBAAA;AAAA,IACvC,IAAA,EAAM,MAAM,QAAA,CAAS;AAAA,GACvB;AAEA,EAAA,MAAM,UAAA,GAAa,CAAC,QAAQ,CAAA;AAC5B,EAAA,MAAM,qBAA0C,EAAC;AAGjD,EAAA,OAAO,UAAA,CAAW,SAAS,CAAA,EAAG;AAC5B,IAAA,MAAM,cAAA,GAAiB,WAAW,KAAA,EAAM;AACxC,IAAA,MAAM,WAAA,GAAc,MAAM,UAAA,CAAW,cAAA,CAAe,cAAc,CAAA;AAClE,IAAA,iCAAA,CAAkC,GAAA;AAAA,MAChC,mBAAmB,cAAc,CAAA;AAAA,MACjC;AAAA,KACF;AAEA,IAAA,MAAM,WAAA,GAAc,kBAAA,CAAmB,WAAA,EAAa,kBAAA,EAAoB;AAAA,MACtE,IAAA,EAAM;AAAA,KACP,CAAA,CAAE,MAAA;AAAA,MACD,CAAA,YAAA,KACE,CAAC,iCAAA,CAAkC,GAAA;AAAA,QACjC,mBAAmB,YAAY;AAAA;AACjC,KACJ;AACA,IAAA,WAAA,CAAY,OAAA;AAAA,MAAQ,gBAClB,iCAAA,CAAkC,GAAA;AAAA,QAChC,mBAAmB,UAAU,CAAA;AAAA,QAC7B;AAAA;AACF,KACF;AAEA,IAAA,UAAA,CAAW,IAAA,CAAK,GAAG,WAAW,CAAA;AAC9B,IAAA,kBAAA,CAAmB,IAAA,CAAK,GAAG,WAAW,CAAA;AAAA,EACxC;AAEA,EAAA,OAAO,kBAAA;AACT;AAEO,MAAM,oCAAA,GAAuC,OAClD,WAAA,EACA,UAAA,EACA,eAAe,UAAA,KAEf,oBAAA;AAAA,EACE,MAAM,4BAAA,CAA6B,WAAA,EAAa,UAAU,CAAA;AAAA,EAC1D,UAAA;AAAA,EACA;AACF;AAEK,MAAM,2BAAA,GAA8B,CAAC,WAAA,KAA0B;AACpE,EAAA,MAAM,YAAA,uBAAmB,GAAA,EAAqB;AAE9C,EAAA,OAAO,WAAA,CAAY,OAAO,CAAA,MAAA,KAAU;AAClC,IAAA,MAAM,iBAAA,GAAoB,mBAAmB,MAAM,CAAA;AACnD,IAAA,MAAM,WAAA,GAAc,YAAA,CAAa,GAAA,CAAI,iBAAiB,CAAA;AAEtD,IAAA,YAAA,CAAa,GAAA,CAAI,mBAAmB,IAAI,CAAA;AACxC,IAAA,OAAO,CAAC,WAAA;AAAA,EACV,CAAC,CAAA;AACH;;;;"}