import * as _backstage_catalog_model from '@backstage/catalog-model';
import * as react from 'react';
import * as _backstage_plugin_catalog_react_alpha from '@backstage/plugin-catalog-react/alpha';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';

/**
 * @alpha
 */
declare const orgTranslationRef: _backstage_frontend_plugin_api.TranslationRef<"org", {
    readonly "groupProfileCard.groupNotFound": "Group not found";
    readonly "groupProfileCard.editIconButtonTitle": "Edit Metadata";
    readonly "groupProfileCard.refreshIconButtonTitle": "Schedule entity refresh";
    readonly "groupProfileCard.refreshIconButtonAriaLabel": "Refresh";
    readonly "groupProfileCard.listItemTitle.email": "Email";
    readonly "groupProfileCard.listItemTitle.entityRef": "Entity Ref";
    readonly "groupProfileCard.listItemTitle.parentGroup": "Parent Group";
    readonly "groupProfileCard.listItemTitle.childGroups": "Child Groups";
    readonly "membersListCard.title": "Members";
    readonly "membersListCard.subtitle": "of {{groupName}}";
    readonly "membersListCard.paginationLabel": ", page {{page}} of {{nbPages}}";
    readonly "membersListCard.noMembersDescription": "This group has no members.";
    readonly "membersListCard.aggregateMembersToggle.ariaLabel": "Users Type Switch";
    readonly "membersListCard.aggregateMembersToggle.directMembers": "Direct Members";
    readonly "membersListCard.aggregateMembersToggle.aggregatedMembers": "Aggregated Members";
    readonly "ownershipCard.title": "Ownership";
    readonly "ownershipCard.aggregateRelationsToggle.ariaLabel": "Ownership Type Switch";
    readonly "ownershipCard.aggregateRelationsToggle.directRelations": "Direct Relations";
    readonly "ownershipCard.aggregateRelationsToggle.aggregatedRelations": "Aggregated Relations";
    readonly "userProfileCard.editIconButtonTitle": "Edit Metadata";
    readonly "userProfileCard.listItemTitle.email": "Email";
    readonly "userProfileCard.listItemTitle.memberOf": "Member of";
    readonly "userProfileCard.userNotFound": "User not found";
    readonly "userProfileCard.moreGroupButtonTitle": "...More ({{number}})";
    readonly "userProfileCard.allGroupDialog.title": "All {{name}}'s groups:";
    readonly "userProfileCard.allGroupDialog.closeButtonTitle": "Close";
}>;

/** @alpha */
declare const _default: _backstage_frontend_plugin_api.OverridableFrontendPlugin<{}, {
    catalogIndex: _backstage_frontend_plugin_api.ExternalRouteRef<undefined>;
}, {
    "entity-card:org/group-profile": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "group-profile";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:org/members-list": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "members-list";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:org/ownership": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "ownership";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:org/user-profile": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            maxRelations: number | undefined;
            hideIcons: boolean;
        } & {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            hideIcons?: boolean | undefined;
            maxRelations?: number | undefined;
        } & {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "entity-card";
        name: "user-profile";
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
}>;

export { _default as default, orgTranslationRef };
