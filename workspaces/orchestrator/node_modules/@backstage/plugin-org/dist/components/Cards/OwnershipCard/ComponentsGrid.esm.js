import { jsx, jsxs } from 'react/jsx-runtime';
import { Progress, ResponseErrorPanel, OverflowTooltip, Link } from '@backstage/core-components';
import { useRouteRef } from '@backstage/core-plugin-api';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import pluralize from 'pluralize';
import { catalogIndexRouteRef } from '../../../routes.esm.js';
import { useGetEntities } from './useGetEntities.esm.js';

const useStyles = makeStyles(
  (theme) => createStyles({
    card: {
      border: `1px solid ${theme.palette.divider}`,
      boxShadow: theme.shadows[2],
      borderRadius: "4px",
      padding: theme.spacing(2),
      transition: `${theme.transitions.duration.standard}ms`,
      "&:hover": {
        boxShadow: theme.shadows[4]
      },
      height: "100%"
    },
    bold: {
      fontWeight: theme.typography.fontWeightBold
    },
    smallFont: {
      fontSize: theme.typography.body2.fontSize
    },
    entityTypeBox: {
      background: (props) => theme.getPageTheme({ themeId: props.type }).backgroundImage,
      color: (props) => theme.getPageTheme({ themeId: props.type }).fontColor
    }
  }),
  { name: "PluginOrgComponentsGrid" }
);
const EntityCountTile = ({
  counter,
  type,
  kind,
  url
}) => {
  const classes = useStyles({ type: type ?? kind });
  const rawTitle = type ?? kind;
  const isLongText = rawTitle.length > 10;
  const tile = /* @__PURE__ */ jsxs(
    Box,
    {
      className: `${classes.card} ${classes.entityTypeBox}`,
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      children: [
        /* @__PURE__ */ jsx(Typography, { className: classes.bold, variant: "h6", children: counter }),
        /* @__PURE__ */ jsx(Box, { sx: { width: "100%", textAlign: "center" }, children: /* @__PURE__ */ jsx(
          Typography,
          {
            className: `${classes.bold} ${isLongText && classes.smallFont}`,
            variant: "h6",
            children: /* @__PURE__ */ jsx(
              OverflowTooltip,
              {
                text: pluralize(rawTitle.toLocaleUpperCase("en-US"), counter)
              }
            )
          }
        ) }),
        type && /* @__PURE__ */ jsx(Typography, { variant: "subtitle1", children: kind })
      ]
    }
  );
  if (url) {
    return /* @__PURE__ */ jsx(Link, { to: url, variant: "body2", children: tile });
  }
  return tile;
};
const ComponentsGrid = ({
  className,
  entity,
  relationsType,
  relationAggregation,
  entityFilterKind,
  entityLimit = 6
}) => {
  const catalogLink = useRouteRef(catalogIndexRouteRef);
  if (!relationsType && !relationAggregation) {
    throw new Error(
      "The relationAggregation property must be set as an EntityRelationAggregation type."
    );
  }
  const { componentsWithCounters, loading, error } = useGetEntities(
    entity,
    relationAggregation ?? relationsType,
    // we can safely use the non-null assertion here because of the run-time check above
    entityFilterKind,
    entityLimit
  );
  if (loading) {
    return /* @__PURE__ */ jsx(Progress, {});
  } else if (error) {
    return /* @__PURE__ */ jsx(ResponseErrorPanel, { error });
  }
  return /* @__PURE__ */ jsx(Grid, { container: true, className, children: componentsWithCounters?.map((c) => /* @__PURE__ */ jsx(Grid, { item: true, xs: 6, md: 6, lg: 4, children: /* @__PURE__ */ jsx(
    EntityCountTile,
    {
      counter: c.counter,
      kind: c.kind,
      type: c.type,
      url: catalogLink && `${catalogLink()}?${c.queryParams}`
    }
  ) }, c.type ?? c.kind)) });
};

export { ComponentsGrid };
//# sourceMappingURL=ComponentsGrid.esm.js.map
