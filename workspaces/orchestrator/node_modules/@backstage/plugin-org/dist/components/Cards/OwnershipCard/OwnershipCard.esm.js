import { jsxs, jsx } from 'react/jsx-runtime';
import { InfoCard } from '@backstage/core-components';
import { useEntity } from '@backstage/plugin-catalog-react';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import Switch from '@material-ui/core/Switch';
import Tooltip from '@material-ui/core/Tooltip';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import { useState, useEffect } from 'react';
import { ComponentsGrid } from './ComponentsGrid.esm.js';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { orgTranslationRef } from '../../../translation.esm.js';
import Box from '@material-ui/core/Box';

const useStyles = makeStyles(
  (theme) => createStyles({
    card: {
      maxHeight: "100%"
    },
    cardContent: {
      display: "flex",
      flexDirection: "column",
      overflow: "hidden"
    },
    list: {
      [theme.breakpoints.down("xs")]: {
        padding: `0 0 12px`
      }
    },
    listItemText: {
      [theme.breakpoints.down("xs")]: {
        paddingRight: 0,
        paddingLeft: 0
      }
    },
    listItemSecondaryAction: {
      [theme.breakpoints.down("xs")]: {
        width: "100%",
        top: "auto",
        right: "auto",
        position: "relative",
        transform: "unset"
      }
    },
    grid: {
      overflowY: "auto",
      marginTop: 0
    },
    box: {
      overflowY: "auto",
      padding: theme.spacing(0, 1, 1),
      margin: theme.spacing(0, -1)
    }
  }),
  {
    name: "PluginOrgOwnershipCard"
  }
);
const OwnershipCard = (props) => {
  const {
    variant,
    entityFilterKind,
    hideRelationsToggle,
    entityLimit = 6,
    maxScrollHeight: propMaxScrollHeight
  } = props;
  const relationAggregation = props.relationAggregation ?? props.relationsType;
  const relationsToggle = hideRelationsToggle === void 0 ? false : hideRelationsToggle;
  const maxScrollHeight = variant !== "fullHeight" ? propMaxScrollHeight : void 0;
  const classes = useStyles();
  const { entity } = useEntity();
  const { t } = useTranslationRef(orgTranslationRef);
  const defaultRelationAggregation = entity.kind === "User" ? "aggregated" : "direct";
  const [getRelationAggregation, setRelationAggregation] = useState(
    relationAggregation ?? defaultRelationAggregation
  );
  useEffect(() => {
    if (!relationAggregation) {
      setRelationAggregation(defaultRelationAggregation);
    }
  }, [setRelationAggregation, defaultRelationAggregation, relationAggregation]);
  return /* @__PURE__ */ jsxs(
    InfoCard,
    {
      title: t("ownershipCard.title"),
      variant,
      className: classes.card,
      cardClassName: classes.cardContent,
      children: [
        !relationsToggle && /* @__PURE__ */ jsx(List, { dense: true, children: /* @__PURE__ */ jsxs(ListItem, { className: classes.list, children: [
          /* @__PURE__ */ jsx(ListItemText, { className: classes.listItemText }),
          /* @__PURE__ */ jsxs(
            ListItemSecondaryAction,
            {
              className: classes.listItemSecondaryAction,
              children: [
                t("ownershipCard.aggregateRelationsToggle.directRelations"),
                /* @__PURE__ */ jsx(
                  Tooltip,
                  {
                    placement: "top",
                    arrow: true,
                    title: getRelationAggregation === "direct" ? t(
                      "ownershipCard.aggregateRelationsToggle.directRelations"
                    ) : t(
                      "ownershipCard.aggregateRelationsToggle.aggregatedRelations"
                    ),
                    children: /* @__PURE__ */ jsx(
                      Switch,
                      {
                        color: "primary",
                        checked: getRelationAggregation !== "direct",
                        onChange: () => {
                          const updatedRelationAggregation = getRelationAggregation === "direct" ? "aggregated" : "direct";
                          setRelationAggregation(updatedRelationAggregation);
                        },
                        name: "pin",
                        inputProps: {
                          "aria-label": t(
                            "ownershipCard.aggregateRelationsToggle.ariaLabel"
                          )
                        }
                      }
                    )
                  }
                ),
                t("ownershipCard.aggregateRelationsToggle.aggregatedRelations")
              ]
            }
          )
        ] }) }),
        /* @__PURE__ */ jsx(Box, { maxHeight: maxScrollHeight, className: classes.box, children: /* @__PURE__ */ jsx(
          ComponentsGrid,
          {
            className: classes.grid,
            entity,
            entityLimit,
            relationAggregation: getRelationAggregation,
            entityFilterKind
          }
        ) })
      ]
    }
  );
};

export { OwnershipCard };
//# sourceMappingURL=OwnershipCard.esm.js.map
