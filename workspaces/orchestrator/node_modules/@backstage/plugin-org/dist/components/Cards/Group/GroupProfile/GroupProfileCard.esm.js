import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { stringifyEntityRef, RELATION_PARENT_OF, RELATION_CHILD_OF, ANNOTATION_LOCATION, ANNOTATION_EDIT_URL } from '@backstage/catalog-model';
import { Link, InfoCard, Avatar } from '@backstage/core-components';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import IconButton from '@material-ui/core/IconButton';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Tooltip from '@material-ui/core/Tooltip';
import { catalogApiRef, useEntity, getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import { useCallback } from 'react';
import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import AccountTreeIcon from '@material-ui/icons/AccountTree';
import Alert from '@material-ui/lab/Alert';
import CachedIcon from '@material-ui/icons/Cached';
import EditIcon from '@material-ui/icons/Edit';
import EmailIcon from '@material-ui/icons/Email';
import GroupIcon from '@material-ui/icons/Group';
import PermIdentityIcon from '@material-ui/icons/PermIdentity';
import { LinksGroup } from '../../Meta/LinksGroup.esm.js';
import { useEntityPermission } from '@backstage/plugin-catalog-react/alpha';
import { catalogEntityRefreshPermission } from '@backstage/plugin-catalog-common/alpha';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { orgTranslationRef } from '../../../../translation.esm.js';

const CardTitle = (props) => /* @__PURE__ */ jsxs(Box, { display: "flex", alignItems: "center", children: [
  /* @__PURE__ */ jsx(GroupIcon, { fontSize: "inherit" }),
  /* @__PURE__ */ jsx(Box, { ml: 1, children: props.title })
] });
const GroupProfileCard = (props) => {
  const catalogApi = useApi(catalogApiRef);
  const alertApi = useApi(alertApiRef);
  const { entity: group } = useEntity();
  const { allowed: canRefresh } = useEntityPermission(
    catalogEntityRefreshPermission
  );
  const { t } = useTranslationRef(orgTranslationRef);
  const refreshEntity = useCallback(async () => {
    await catalogApi.refreshEntity(stringifyEntityRef(group));
    alertApi.post({
      message: "Refresh scheduled",
      severity: "info",
      display: "transient"
    });
  }, [catalogApi, alertApi, group]);
  if (!group) {
    return /* @__PURE__ */ jsx(Alert, { severity: "error", children: t("groupProfileCard.groupNotFound") });
  }
  const {
    metadata: { name, description, title, annotations, links },
    spec: { profile }
  } = group;
  const childRelations = getEntityRelations(group, RELATION_PARENT_OF, {
    kind: "Group"
  });
  const parentRelations = getEntityRelations(group, RELATION_CHILD_OF, {
    kind: "group"
  });
  const entityLocation = annotations?.[ANNOTATION_LOCATION];
  const allowRefresh = entityLocation?.startsWith("url:") || entityLocation?.startsWith("file:");
  const entityMetadataEditUrl = group.metadata.annotations?.[ANNOTATION_EDIT_URL];
  const displayName = profile?.displayName ?? title ?? name;
  const emailHref = profile?.email ? `mailto:${profile.email}` : "#";
  const infoCardAction = entityMetadataEditUrl ? /* @__PURE__ */ jsx(
    IconButton,
    {
      "aria-label": t("groupProfileCard.editIconButtonTitle"),
      title: t("groupProfileCard.editIconButtonTitle"),
      component: Link,
      to: entityMetadataEditUrl,
      children: /* @__PURE__ */ jsx(EditIcon, {})
    }
  ) : /* @__PURE__ */ jsx(
    IconButton,
    {
      "aria-label": t("groupProfileCard.editIconButtonTitle"),
      disabled: true,
      title: t("groupProfileCard.editIconButtonTitle"),
      children: /* @__PURE__ */ jsx(EditIcon, {})
    }
  );
  return /* @__PURE__ */ jsx(
    InfoCard,
    {
      title: /* @__PURE__ */ jsx(CardTitle, { title: displayName }),
      subheader: description,
      variant: props.variant,
      action: /* @__PURE__ */ jsxs(Fragment, { children: [
        allowRefresh && canRefresh && /* @__PURE__ */ jsx(
          IconButton,
          {
            "aria-label": t("groupProfileCard.refreshIconButtonAriaLabel"),
            title: t("groupProfileCard.refreshIconButtonTitle"),
            onClick: refreshEntity,
            children: /* @__PURE__ */ jsx(CachedIcon, {})
          }
        ),
        infoCardAction
      ] }),
      children: /* @__PURE__ */ jsxs(Grid, { container: true, spacing: 3, children: [
        /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, sm: 2, xl: 1, children: /* @__PURE__ */ jsx(Avatar, { displayName, picture: profile?.picture }) }),
        /* @__PURE__ */ jsx(Grid, { item: true, md: 10, xl: 11, children: /* @__PURE__ */ jsxs(List, { children: [
          /* @__PURE__ */ jsxs(ListItem, { children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Tooltip, { title: t("groupProfileCard.listItemTitle.entityRef"), children: /* @__PURE__ */ jsx(PermIdentityIcon, {}) }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: stringifyEntityRef(group),
                secondary: t("groupProfileCard.listItemTitle.entityRef")
              }
            )
          ] }),
          profile?.email && /* @__PURE__ */ jsxs(ListItem, { children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Tooltip, { title: t("groupProfileCard.listItemTitle.email"), children: /* @__PURE__ */ jsx(EmailIcon, {}) }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: /* @__PURE__ */ jsx(Link, { to: emailHref, children: profile.email }),
                secondary: t("groupProfileCard.listItemTitle.email")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs(ListItem, { children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(
              Tooltip,
              {
                title: t("groupProfileCard.listItemTitle.parentGroup"),
                children: /* @__PURE__ */ jsx(AccountTreeIcon, {})
              }
            ) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: parentRelations.length ? /* @__PURE__ */ jsx(
                  EntityRefLinks,
                  {
                    entityRefs: parentRelations,
                    defaultKind: "Group"
                  }
                ) : "N/A",
                secondary: t("groupProfileCard.listItemTitle.parentGroup")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs(ListItem, { children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(
              Tooltip,
              {
                title: t("groupProfileCard.listItemTitle.childGroups"),
                children: /* @__PURE__ */ jsx(GroupIcon, {})
              }
            ) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: childRelations.length ? /* @__PURE__ */ jsx(
                  EntityRefLinks,
                  {
                    entityRefs: childRelations,
                    defaultKind: "Group"
                  }
                ) : "N/A",
                secondary: t("groupProfileCard.listItemTitle.childGroups")
              }
            )
          ] }),
          props?.showLinks && /* @__PURE__ */ jsx(LinksGroup, { links })
        ] }) })
      ] })
    }
  );
};

export { GroupProfileCard };
//# sourceMappingURL=GroupProfileCard.esm.js.map
