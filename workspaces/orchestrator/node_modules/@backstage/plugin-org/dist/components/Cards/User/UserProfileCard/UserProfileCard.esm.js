import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { ANNOTATION_EDIT_URL, RELATION_MEMBER_OF } from '@backstage/catalog-model';
import { InfoCard, Avatar, Link } from '@backstage/core-components';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import BaseButton from '@material-ui/core/ButtonBase';
import IconButton from '@material-ui/core/IconButton';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Tooltip from '@material-ui/core/Tooltip';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogContent from '@material-ui/core/DialogContent';
import DialogActions from '@material-ui/core/DialogActions';
import CloseIcon from '@material-ui/icons/Close';
import { useEntity, getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import Alert from '@material-ui/lab/Alert';
import EditIcon from '@material-ui/icons/Edit';
import EmailIcon from '@material-ui/icons/Email';
import GroupIcon from '@material-ui/icons/Group';
import { LinksGroup } from '../../Meta/LinksGroup.esm.js';
import PersonIcon from '@material-ui/icons/Person';
import { useState, useCallback } from 'react';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { orgTranslationRef } from '../../../../translation.esm.js';

const useStyles = makeStyles(
  (theme) => createStyles({
    closeButton: {
      position: "absolute",
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    },
    moreButton: {
      display: "contents",
      color: theme.palette.primary.main
    },
    dialogPaper: {
      minHeight: 400
    }
  }),
  { name: "PluginOrgUserProfileCard" }
);
const CardTitle = (props) => props.title ? /* @__PURE__ */ jsxs(Box, { display: "flex", alignItems: "center", children: [
  /* @__PURE__ */ jsx(PersonIcon, { fontSize: "inherit" }),
  /* @__PURE__ */ jsx(Box, { ml: 1, children: props.title })
] }) : null;
const UserProfileCard = (props) => {
  const { maxRelations, hideIcons } = props;
  const classes = useStyles();
  const { entity: user } = useEntity();
  const [isAllGroupsDialogOpen, setIsAllGroupsDialogOpen] = useState(false);
  const { t } = useTranslationRef(orgTranslationRef);
  const toggleAllGroupsDialog = useCallback(
    () => setIsAllGroupsDialogOpen(
      (prevIsViewAllGroupsDialogOpen) => !prevIsViewAllGroupsDialogOpen
    ),
    []
  );
  if (!user) {
    return /* @__PURE__ */ jsx(Alert, { severity: "error", children: t("userProfileCard.userNotFound") });
  }
  const entityMetadataEditUrl = user.metadata.annotations?.[ANNOTATION_EDIT_URL];
  const {
    metadata: { name: metaName, description, links },
    spec: { profile }
  } = user;
  const displayName = profile?.displayName ?? metaName;
  const emailHref = profile?.email ? `mailto:${profile.email}` : void 0;
  const memberOfRelations = getEntityRelations(user, RELATION_MEMBER_OF, {
    kind: "Group"
  });
  return /* @__PURE__ */ jsxs(
    InfoCard,
    {
      title: /* @__PURE__ */ jsx(CardTitle, { title: displayName }),
      subheader: description,
      variant: props.variant,
      action: /* @__PURE__ */ jsx(Fragment, { children: entityMetadataEditUrl && /* @__PURE__ */ jsx(
        IconButton,
        {
          "aria-label": t("userProfileCard.editIconButtonTitle"),
          title: t("userProfileCard.editIconButtonTitle"),
          component: Link,
          to: entityMetadataEditUrl,
          children: /* @__PURE__ */ jsx(EditIcon, {})
        }
      ) }),
      children: [
        /* @__PURE__ */ jsxs(Grid, { container: true, spacing: 3, alignItems: "flex-start", children: [
          /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, sm: 2, xl: 1, children: /* @__PURE__ */ jsx(Avatar, { displayName, picture: profile?.picture }) }),
          /* @__PURE__ */ jsx(Grid, { item: true, md: 10, xl: 11, children: /* @__PURE__ */ jsxs(List, { children: [
            profile?.email && /* @__PURE__ */ jsxs(ListItem, { children: [
              /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Tooltip, { title: t("userProfileCard.listItemTitle.email"), children: /* @__PURE__ */ jsx(EmailIcon, {}) }) }),
              /* @__PURE__ */ jsx(ListItemText, { children: /* @__PURE__ */ jsx(Link, { to: emailHref ?? "", children: profile.email }) })
            ] }),
            maxRelations === void 0 || maxRelations > 0 ? /* @__PURE__ */ jsxs(ListItem, { children: [
              /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Tooltip, { title: t("userProfileCard.listItemTitle.memberOf"), children: /* @__PURE__ */ jsx(GroupIcon, {}) }) }),
              /* @__PURE__ */ jsxs(ListItemText, { children: [
                /* @__PURE__ */ jsx(
                  EntityRefLinks,
                  {
                    entityRefs: memberOfRelations.slice(0, maxRelations),
                    defaultKind: "Group",
                    hideIcons
                  }
                ),
                maxRelations && memberOfRelations.length > maxRelations ? /* @__PURE__ */ jsxs(Fragment, { children: [
                  ",",
                  /* @__PURE__ */ jsx(
                    BaseButton,
                    {
                      className: classes.moreButton,
                      onClick: toggleAllGroupsDialog,
                      disableRipple: true,
                      children: t("userProfileCard.moreGroupButtonTitle", {
                        number: String(
                          memberOfRelations.length - maxRelations
                        )
                      })
                    }
                  )
                ] }) : null
              ] })
            ] }) : null,
            props?.showLinks && /* @__PURE__ */ jsx(LinksGroup, { links })
          ] }) })
        ] }),
        /* @__PURE__ */ jsxs(
          Dialog,
          {
            classes: { paper: classes.dialogPaper },
            open: isAllGroupsDialogOpen,
            onClose: toggleAllGroupsDialog,
            scroll: "paper",
            "aria-labelledby": "view-all-groups-dialog-title",
            maxWidth: "md",
            fullWidth: true,
            children: [
              /* @__PURE__ */ jsxs(DialogTitle, { id: "view-all-groups-dialog-title", children: [
                t("userProfileCard.allGroupDialog.title", {
                  name: user.metadata.name
                }),
                /* @__PURE__ */ jsx(
                  IconButton,
                  {
                    className: classes.closeButton,
                    "aria-label": t("userProfileCard.allGroupDialog.closeButtonTitle"),
                    onClick: toggleAllGroupsDialog,
                    children: /* @__PURE__ */ jsx(CloseIcon, {})
                  }
                )
              ] }),
              /* @__PURE__ */ jsx(DialogContent, { dividers: true, children: /* @__PURE__ */ jsx(EntityRefLinks, { entityRefs: memberOfRelations, defaultKind: "Group" }) }),
              /* @__PURE__ */ jsx(DialogActions, { children: /* @__PURE__ */ jsx(Button, { onClick: toggleAllGroupsDialog, children: t("userProfileCard.allGroupDialog.closeButtonTitle") }) })
            ]
          }
        )
      ]
    }
  );
};

export { UserProfileCard };
//# sourceMappingURL=UserProfileCard.esm.js.map
