{"version":3,"file":"useGetEntities.esm.js","sources":["../../../../src/components/Cards/OwnershipCard/useGetEntities.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  parseEntityRef,\n  RELATION_MEMBER_OF,\n  RELATION_PARENT_OF,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport {\n  CatalogApi,\n  catalogApiRef,\n  getEntityRelations,\n  humanizeEntityRef,\n} from '@backstage/plugin-catalog-react';\nimport limiterFactory from 'p-limit';\nimport { useApi } from '@backstage/core-plugin-api';\nimport useAsync from 'react-use/esm/useAsync';\nimport qs from 'qs';\nimport { EntityRelationAggregation } from '../types';\nimport { uniq, uniqBy } from 'lodash';\n\nconst limiter = limiterFactory(5);\n\ntype EntityTypeProps = {\n  kind: string;\n  type?: string;\n  count: number;\n};\n\nconst getQueryParams = (\n  ownersEntityRef: string[],\n  selectedEntity: EntityTypeProps,\n): string => {\n  const { kind, type } = selectedEntity;\n  const owners = ownersEntityRef.map(owner =>\n    humanizeEntityRef(parseEntityRef(owner), { defaultKind: 'group' }),\n  );\n  const filters = {\n    kind: kind.toLocaleLowerCase('en-US'),\n    type,\n    owners,\n    user: 'all',\n  };\n  return qs.stringify({ filters }, { arrayFormat: 'repeat' });\n};\n\nconst getMemberOfEntityRefs = (owner: Entity): string[] => {\n  const parentGroups = getEntityRelations(owner, RELATION_MEMBER_OF, {\n    kind: 'Group',\n  });\n\n  const ownerGroupsNames = parentGroups.map(({ kind, namespace, name }) =>\n    stringifyEntityRef({\n      kind,\n      namespace,\n      name,\n    }),\n  );\n\n  return [...ownerGroupsNames, stringifyEntityRef(owner)];\n};\n\nconst isEntity = (entity: Entity | undefined): entity is Entity =>\n  entity !== undefined;\n\nconst getChildOwnershipEntityRefs = async (\n  entity: Entity,\n  catalogApi: CatalogApi,\n  alreadyRetrievedParentRefs: string[] = [],\n): Promise<string[]> => {\n  const childGroups = getEntityRelations(entity, RELATION_PARENT_OF, {\n    kind: 'Group',\n  });\n\n  const hasChildGroups = childGroups.length > 0;\n\n  const entityRef = stringifyEntityRef(entity);\n  if (hasChildGroups) {\n    const entityRefs = childGroups.map(r => stringifyEntityRef(r));\n    const childGroupResponse = await limiter(() =>\n      catalogApi.getEntitiesByRefs({\n        fields: ['kind', 'metadata.namespace', 'metadata.name', 'relations'],\n        entityRefs,\n      }),\n    );\n    const childGroupEntities = childGroupResponse.items.filter(isEntity);\n\n    const unknownChildren = childGroupEntities.filter(\n      childGroupEntity =>\n        !alreadyRetrievedParentRefs.includes(\n          stringifyEntityRef(childGroupEntity),\n        ),\n    );\n    const childrenRefs = (\n      await Promise.all(\n        unknownChildren.map(childGroupEntity =>\n          getChildOwnershipEntityRefs(childGroupEntity, catalogApi, [\n            ...alreadyRetrievedParentRefs,\n            entityRef,\n          ]),\n        ),\n      )\n    ).flatMap(aggregated => aggregated);\n\n    return uniq([...childrenRefs, entityRef]);\n  }\n\n  return [entityRef];\n};\n\nconst getOwners = async (\n  entity: Entity,\n  relationAggregation: EntityRelationAggregation,\n  catalogApi: CatalogApi,\n): Promise<string[]> => {\n  const isGroup = entity.kind === 'Group';\n  const isAggregated = relationAggregation === 'aggregated';\n  const isUserEntity = entity.kind === 'User';\n\n  if (isAggregated && isGroup) {\n    return getChildOwnershipEntityRefs(entity, catalogApi);\n  }\n\n  if (isAggregated && isUserEntity) {\n    return getMemberOfEntityRefs(entity);\n  }\n\n  return [stringifyEntityRef(entity)];\n};\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst batchGetOwnedEntitiesByOwners = async (\n  owners: string[],\n  kinds: string[],\n  catalogApi: CatalogApi,\n  batchSize: number = 100,\n  delayMs: number = 100,\n) => {\n  const results = [];\n\n  for (let i = 0; i < owners.length; i += batchSize) {\n    const batch = owners.slice(i, i + batchSize);\n    const response = await catalogApi.getEntities({\n      filter: [\n        {\n          kind: kinds,\n          'relations.ownedBy': batch,\n        },\n      ],\n      fields: [\n        'kind',\n        'metadata.name',\n        'metadata.namespace',\n        'spec.type',\n        'relations',\n      ],\n    });\n\n    results.push(...response.items);\n\n    if (i + batchSize < owners.length) await delay(delayMs);\n  }\n\n  return uniqBy(results, stringifyEntityRef);\n};\n\nexport function useGetEntities(\n  entity: Entity,\n  relationAggregation: EntityRelationAggregation,\n  entityFilterKind?: string[],\n  entityLimit = 6,\n): {\n  componentsWithCounters:\n    | {\n        counter: number;\n        type: string;\n        kind: string;\n        queryParams: string;\n      }[]\n    | undefined;\n  loading: boolean;\n  error?: Error;\n} {\n  const catalogApi = useApi(catalogApiRef);\n  const kinds = entityFilterKind ?? ['Component', 'API', 'System'];\n\n  const {\n    loading,\n    error,\n    value: componentsWithCounters,\n  } = useAsync(async () => {\n    const owners = await getOwners(entity, relationAggregation, catalogApi);\n\n    const ownedEntitiesList = await batchGetOwnedEntitiesByOwners(\n      owners,\n      kinds,\n      catalogApi,\n    );\n\n    const counts = ownedEntitiesList.reduce(\n      (acc: EntityTypeProps[], ownedEntity) => {\n        const match = acc.find(\n          x => x.kind === ownedEntity.kind && x.type === ownedEntity.spec?.type,\n        );\n        if (match) {\n          match.count += 1;\n        } else {\n          acc.push({\n            kind: ownedEntity.kind,\n            type: ownedEntity.spec?.type?.toString(),\n            count: 1,\n          });\n        }\n        return acc;\n      },\n      [],\n    );\n\n    // Return top N (entityLimit) entities to be displayed in ownership boxes\n    const topN = counts.sort((a, b) => b.count - a.count).slice(0, entityLimit);\n\n    return topN.map(topOwnedEntity => ({\n      counter: topOwnedEntity.count,\n      type: topOwnedEntity.type,\n      kind: topOwnedEntity.kind,\n      queryParams: getQueryParams(owners, topOwnedEntity),\n    })) as Array<{\n      counter: number;\n      type: string;\n      kind: string;\n      queryParams: string;\n    }>;\n  }, [catalogApi, entity, relationAggregation]);\n\n  return {\n    componentsWithCounters,\n    loading,\n    error,\n  };\n}\n"],"names":[],"mappings":"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"}