{"version":3,"file":"UserProfileCard.esm.js","sources":["../../../../../src/components/Cards/User/UserProfileCard/UserProfileCard.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_EDIT_URL,\n  RELATION_MEMBER_OF,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport {\n  Avatar,\n  InfoCard,\n  InfoCardVariants,\n  Link,\n} from '@backstage/core-components';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport BaseButton from '@material-ui/core/ButtonBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {\n  EntityRefLinks,\n  getEntityRelations,\n  useEntity,\n} from '@backstage/plugin-catalog-react';\n\nimport Alert from '@material-ui/lab/Alert';\nimport EditIcon from '@material-ui/icons/Edit';\nimport EmailIcon from '@material-ui/icons/Email';\nimport GroupIcon from '@material-ui/icons/Group';\nimport { LinksGroup } from '../../Meta';\nimport PersonIcon from '@material-ui/icons/Person';\n\nimport { useCallback, useState } from 'react';\nimport { useTranslationRef } from '@backstage/frontend-plugin-api';\nimport { orgTranslationRef } from '../../../../translation';\n\n/** @public */\nexport type UserProfileCardClassKey =\n  | 'closeButton'\n  | 'moreButton'\n  | 'dialogPaper';\n\nconst useStyles = makeStyles(\n  theme =>\n    createStyles({\n      closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n      },\n      moreButton: {\n        display: 'contents',\n        color: theme.palette.primary.main,\n      },\n      dialogPaper: {\n        minHeight: 400,\n      },\n    }),\n  { name: 'PluginOrgUserProfileCard' },\n);\n\nconst CardTitle = (props: { title?: string }) =>\n  props.title ? (\n    <Box display=\"flex\" alignItems=\"center\">\n      <PersonIcon fontSize=\"inherit\" />\n      <Box ml={1}>{props.title}</Box>\n    </Box>\n  ) : null;\n\n/** @public */\nexport const UserProfileCard = (props: {\n  variant?: InfoCardVariants;\n  showLinks?: boolean;\n  maxRelations?: number;\n  hideIcons?: boolean;\n}) => {\n  const { maxRelations, hideIcons } = props;\n\n  const classes = useStyles();\n  const { entity: user } = useEntity<UserEntity>();\n  const [isAllGroupsDialogOpen, setIsAllGroupsDialogOpen] = useState(false);\n  const { t } = useTranslationRef(orgTranslationRef);\n\n  const toggleAllGroupsDialog = useCallback(\n    () =>\n      setIsAllGroupsDialogOpen(\n        prevIsViewAllGroupsDialogOpen => !prevIsViewAllGroupsDialogOpen,\n      ),\n    [],\n  );\n\n  if (!user) {\n    return <Alert severity=\"error\">{t('userProfileCard.userNotFound')}</Alert>;\n  }\n\n  const entityMetadataEditUrl =\n    user.metadata.annotations?.[ANNOTATION_EDIT_URL];\n\n  const {\n    metadata: { name: metaName, description, links },\n    spec: { profile },\n  } = user;\n  const displayName = profile?.displayName ?? metaName;\n  const emailHref = profile?.email ? `mailto:${profile.email}` : undefined;\n  const memberOfRelations = getEntityRelations(user, RELATION_MEMBER_OF, {\n    kind: 'Group',\n  });\n\n  return (\n    <InfoCard\n      title={<CardTitle title={displayName} />}\n      subheader={description}\n      variant={props.variant}\n      action={\n        <>\n          {entityMetadataEditUrl && (\n            <IconButton\n              aria-label={t('userProfileCard.editIconButtonTitle')}\n              title={t('userProfileCard.editIconButtonTitle')}\n              component={Link}\n              to={entityMetadataEditUrl}\n            >\n              <EditIcon />\n            </IconButton>\n          )}\n        </>\n      }\n    >\n      <Grid container spacing={3} alignItems=\"flex-start\">\n        <Grid item xs={12} sm={2} xl={1}>\n          <Avatar displayName={displayName} picture={profile?.picture} />\n        </Grid>\n\n        <Grid item md={10} xl={11}>\n          <List>\n            {profile?.email && (\n              <ListItem>\n                <ListItemIcon>\n                  <Tooltip title={t('userProfileCard.listItemTitle.email')}>\n                    <EmailIcon />\n                  </Tooltip>\n                </ListItemIcon>\n                <ListItemText>\n                  <Link to={emailHref ?? ''}>{profile.email}</Link>\n                </ListItemText>\n              </ListItem>\n            )}\n\n            {maxRelations === undefined || maxRelations > 0 ? (\n              <ListItem>\n                <ListItemIcon>\n                  <Tooltip title={t('userProfileCard.listItemTitle.memberOf')}>\n                    <GroupIcon />\n                  </Tooltip>\n                </ListItemIcon>\n                <ListItemText>\n                  <EntityRefLinks\n                    entityRefs={memberOfRelations.slice(0, maxRelations)}\n                    defaultKind=\"Group\"\n                    hideIcons={hideIcons}\n                  />\n                  {maxRelations && memberOfRelations.length > maxRelations ? (\n                    <>\n                      ,\n                      <BaseButton\n                        className={classes.moreButton}\n                        onClick={toggleAllGroupsDialog}\n                        disableRipple\n                      >\n                        {t('userProfileCard.moreGroupButtonTitle', {\n                          number: String(\n                            memberOfRelations.length - maxRelations,\n                          ),\n                        })}\n                      </BaseButton>\n                    </>\n                  ) : null}\n                </ListItemText>\n              </ListItem>\n            ) : null}\n            {props?.showLinks && <LinksGroup links={links} />}\n          </List>\n        </Grid>\n      </Grid>\n\n      <Dialog\n        classes={{ paper: classes.dialogPaper }}\n        open={isAllGroupsDialogOpen}\n        onClose={toggleAllGroupsDialog}\n        scroll=\"paper\"\n        aria-labelledby=\"view-all-groups-dialog-title\"\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle id=\"view-all-groups-dialog-title\">\n          {t('userProfileCard.allGroupDialog.title', {\n            name: user.metadata.name,\n          })}\n          <IconButton\n            className={classes.closeButton}\n            aria-label={t('userProfileCard.allGroupDialog.closeButtonTitle')}\n            onClick={toggleAllGroupsDialog}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers>\n          <EntityRefLinks entityRefs={memberOfRelations} defaultKind=\"Group\" />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleAllGroupsDialog}>\n            {t('userProfileCard.allGroupDialog.closeButtonTitle')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </InfoCard>\n  );\n};\n"],"names":[],"mappings":"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"}