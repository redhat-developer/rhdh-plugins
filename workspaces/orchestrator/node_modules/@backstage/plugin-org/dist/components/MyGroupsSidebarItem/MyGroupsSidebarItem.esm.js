import { jsx } from 'react/jsx-runtime';
import { getCompoundEntityRef, DEFAULT_NAMESPACE, stringifyEntityRef } from '@backstage/catalog-model';
import { SidebarItem, SidebarSubmenu, SidebarSubmenuItem } from '@backstage/core-components';
import { useApi, identityApiRef, useRouteRef } from '@backstage/core-plugin-api';
import useAsync from 'react-use/esm/useAsync';
import { catalogApiRef, entityRouteRef, entityPresentationApiRef } from '@backstage/plugin-catalog-react';

const MyGroupsSidebarItem = (props) => {
  const { singularTitle, pluralTitle, icon, filter } = props;
  const identityApi = useApi(identityApiRef);
  const catalogApi = useApi(catalogApiRef);
  const catalogEntityRoute = useRouteRef(entityRouteRef);
  const entityPresentationApi = useApi(entityPresentationApiRef);
  const { value: groups } = useAsync(async () => {
    const profile = await identityApi.getBackstageIdentity();
    const response = await catalogApi.getEntities({
      filter: [
        {
          kind: "group",
          "relations.hasMember": profile.userEntityRef,
          ...filter ?? {}
        }
      ],
      fields: ["metadata", "kind", "spec.profile"]
    });
    return response.items;
  }, []);
  if (!groups?.length) {
    return null;
  }
  if (groups.length === 1) {
    const group = groups[0];
    return /* @__PURE__ */ jsx(
      SidebarItem,
      {
        text: singularTitle,
        to: catalogEntityRoute(getCompoundEntityRef(group)),
        icon
      }
    );
  }
  return /* @__PURE__ */ jsx(SidebarItem, { icon, text: pluralTitle, children: /* @__PURE__ */ jsx(SidebarSubmenu, { title: pluralTitle, children: groups?.map((group) => {
    const entityDisplayName = entityPresentationApi.forEntity(group);
    return /* @__PURE__ */ jsx(
      SidebarSubmenuItem,
      {
        title: entityDisplayName.snapshot.primaryTitle,
        subtitle: group.metadata.namespace !== DEFAULT_NAMESPACE ? group.metadata.namespace : void 0,
        to: catalogEntityRoute(getCompoundEntityRef(group)),
        icon
      },
      stringifyEntityRef(group)
    );
  }) }) });
};

export { MyGroupsSidebarItem };
//# sourceMappingURL=MyGroupsSidebarItem.esm.js.map
