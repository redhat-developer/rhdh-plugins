import * as react_jsx_runtime from 'react/jsx-runtime';
import * as _backstage_core_components from '@backstage/core-components';
import { InfoCardVariants } from '@backstage/core-components';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { IconComponent } from '@backstage/core-plugin-api';

/** @public */
type EntityRelationAggregation = 'direct' | 'aggregated';

/** @public */
type MemberComponentClassKey = 'card' | 'avatar';
/** @public */
type MembersListCardClassKey = 'root' | 'cardContent' | 'memberList';
/** @public */
declare const MembersListCard: (props: {
    memberDisplayTitle?: string;
    pageSize?: number;
    showAggregateMembersToggle?: boolean;
    relationType?: string;
    /** @deprecated Please use `relationAggregation` instead */
    relationsType?: EntityRelationAggregation;
    relationAggregation?: EntityRelationAggregation;
}) => react_jsx_runtime.JSX.Element;

/** @public */
declare const GroupProfileCard: (props: {
    variant?: InfoCardVariants;
    showLinks?: boolean;
}) => react_jsx_runtime.JSX.Element;

/** @public */
type UserProfileCardClassKey = 'closeButton' | 'moreButton' | 'dialogPaper';
/** @public */
declare const UserProfileCard: (props: {
    variant?: InfoCardVariants;
    showLinks?: boolean;
    maxRelations?: number;
    hideIcons?: boolean;
}) => react_jsx_runtime.JSX.Element;

/** @public */
type OwnershipCardClassKey = 'card' | 'cardContent' | 'list' | 'listItemText' | 'listItemSecondaryAction' | 'grid';
/** @public */
declare const OwnershipCard: (props: {
    variant?: InfoCardVariants;
    entityFilterKind?: string[];
    hideRelationsToggle?: boolean;
    /** @deprecated Please use relationAggregation instead */
    relationsType?: EntityRelationAggregation;
    relationAggregation?: EntityRelationAggregation;
    entityLimit?: number;
    maxScrollHeight?: string;
}) => react_jsx_runtime.JSX.Element;

/** @public */
type ComponentsGridClassKey = 'card' | 'bold' | 'smallFont' | 'entityTypeBox';

/**
 * MyGroupsSidebarItem can be added to your sidebar providing quick access to groups the logged in user is a member of
 *
 * @public
 */
declare const MyGroupsSidebarItem: (props: {
    singularTitle: string;
    pluralTitle: string;
    icon: IconComponent;
    filter?: Record<string, string | symbol | (string | symbol)[]>;
}) => react_jsx_runtime.JSX.Element | null;

/** @public */
declare const orgPlugin: _backstage_core_plugin_api.BackstagePlugin<{}, {
    catalogIndex: _backstage_core_plugin_api.ExternalRouteRef<undefined, true>;
}>;
/** @public */
declare const EntityGroupProfileCard: (props: {
    variant?: _backstage_core_components.InfoCardVariants;
    showLinks?: boolean;
}) => react_jsx_runtime.JSX.Element;
/** @public */
declare const EntityMembersListCard: (props: {
    memberDisplayTitle?: string;
    pageSize?: number;
    showAggregateMembersToggle?: boolean;
    relationType?: string;
    relationsType?: EntityRelationAggregation;
    relationAggregation?: EntityRelationAggregation;
}) => react_jsx_runtime.JSX.Element;
/** @public */
declare const EntityOwnershipCard: (props: {
    variant?: _backstage_core_components.InfoCardVariants;
    entityFilterKind?: string[];
    hideRelationsToggle?: boolean;
    relationsType?: EntityRelationAggregation;
    relationAggregation?: EntityRelationAggregation;
    entityLimit?: number;
    maxScrollHeight?: string;
}) => react_jsx_runtime.JSX.Element;
/** @public */
declare const EntityUserProfileCard: (props: {
    variant?: _backstage_core_components.InfoCardVariants;
    showLinks?: boolean;
    maxRelations?: number;
    hideIcons?: boolean;
}) => react_jsx_runtime.JSX.Element;

export { type ComponentsGridClassKey, EntityGroupProfileCard, EntityMembersListCard, EntityOwnershipCard, type EntityRelationAggregation, EntityUserProfileCard, GroupProfileCard, type MemberComponentClassKey, MembersListCard, type MembersListCardClassKey, MyGroupsSidebarItem, OwnershipCard, type OwnershipCardClassKey, UserProfileCard, type UserProfileCardClassKey, orgPlugin, orgPlugin as plugin };
