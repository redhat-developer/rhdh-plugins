{"version":3,"file":"providers.esm.js","sources":["../../../src/layout/SignInPage/providers.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useLayoutEffect, useState, useMemo, useCallback } from 'react';\nimport {\n  SignInPageProps,\n  useApi,\n  useApiHolder,\n  errorApiRef,\n  IdentityApi,\n  useAnalytics,\n} from '@backstage/core-plugin-api';\nimport {\n  IdentityProviders,\n  SignInProvider,\n  SignInProviderConfig,\n} from './types';\nimport { commonProvider } from './commonProvider';\nimport { guestProvider } from './guestProvider';\nimport { customProvider } from './customProvider';\nimport { IdentityApiSignOutProxy } from './IdentityApiSignOutProxy';\nimport { useSearchParams } from 'react-router-dom';\nimport { useMountEffect } from '@react-hookz/web';\nimport { ForwardedError } from '@backstage/errors';\nimport { coreComponentsTranslationRef } from '../../translation';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\n\nconst PROVIDER_STORAGE_KEY = '@backstage/core:SignInPage:provider';\n\nexport type SignInProviderType = {\n  [key: string]: {\n    components: SignInProvider;\n    id: string;\n    config?: SignInProviderConfig;\n  };\n};\n\nconst signInProviders: { [key: string]: SignInProvider } = {\n  guest: guestProvider,\n  custom: customProvider,\n  common: commonProvider,\n};\n\nfunction validateIDs(id: string, providers: SignInProviderType): void {\n  if (id in providers)\n    throw new Error(\n      `\"${id}\" ID is duplicated. IDs of identity providers have to be unique.`,\n    );\n}\n\nexport function getSignInProviders(\n  identityProviders: IdentityProviders,\n): SignInProviderType {\n  const providers = identityProviders.reduce(\n    (acc: SignInProviderType, config) => {\n      if (typeof config === 'string') {\n        validateIDs(config, acc);\n        acc[config] = { components: signInProviders[config], id: config };\n\n        return acc;\n      }\n\n      const { id } = config as SignInProviderConfig;\n      validateIDs(id, acc);\n\n      acc[id] = { components: signInProviders.common, id, config };\n\n      return acc;\n    },\n    {},\n  );\n\n  return providers;\n}\n\nexport const useSignInProviders = (\n  providers: SignInProviderType,\n  onSignInSuccess: SignInPageProps['onSignInSuccess'],\n) => {\n  const errorApi = useApi(errorApiRef);\n  const apiHolder = useApiHolder();\n  const [loading, setLoading] = useState(true);\n  const analytics = useAnalytics();\n\n  const { t } = useTranslationRef(coreComponentsTranslationRef);\n  // User was redirected back to sign in page with error from auth redirect flow\n  const [searchParams, _setSearchParams] = useSearchParams();\n\n  useMountEffect(() => {\n    const errorParam = searchParams.get('error');\n    if (errorParam) {\n      errorApi.post(\n        new ForwardedError(t('signIn.loginFailed'), new Error(errorParam)),\n      );\n    }\n  });\n\n  // This decorates the result with sign out logic from this hook\n  const handleWrappedResult = useCallback(\n    async (identityApi: IdentityApi) => {\n      onSignInSuccess(\n        IdentityApiSignOutProxy.from({\n          identityApi,\n          signOut: async () => {\n            localStorage.removeItem(PROVIDER_STORAGE_KEY);\n            await identityApi.signOut?.();\n            analytics.captureEvent('signOut', 'success');\n          },\n        }),\n      );\n      analytics.captureEvent('signIn', 'success');\n    },\n    [onSignInSuccess, analytics],\n  );\n\n  // In this effect we check if the user has already selected an existing login\n  // provider, and in that case try to load an existing session for the provider.\n  useLayoutEffect(() => {\n    if (!loading) {\n      return undefined;\n    }\n\n    // We can't use storageApi here, as it might have a dependency on the IdentityApi\n    const selectedProviderId = localStorage.getItem(\n      PROVIDER_STORAGE_KEY,\n    ) as string;\n\n    // No provider selected, let the user pick one\n    if (selectedProviderId === null) {\n      setLoading(false);\n      return undefined;\n    }\n\n    const provider = providers[selectedProviderId];\n    if (!provider) {\n      setLoading(false);\n      return undefined;\n    }\n\n    let didCancel = false;\n\n    provider.components\n      .loader(apiHolder, provider.config?.apiRef!)\n      .then(result => {\n        if (didCancel) {\n          localStorage.removeItem(PROVIDER_STORAGE_KEY);\n          return;\n        }\n        if (result) {\n          handleWrappedResult(result);\n        } else {\n          setLoading(false);\n        }\n      })\n      .catch(error => {\n        localStorage.removeItem(PROVIDER_STORAGE_KEY);\n        if (didCancel) {\n          return;\n        }\n        errorApi.post(error);\n        setLoading(false);\n      });\n\n    return () => {\n      didCancel = true;\n    };\n  }, [\n    loading,\n    errorApi,\n    onSignInSuccess,\n    apiHolder,\n    providers,\n    handleWrappedResult,\n  ]);\n\n  // This renders all available sign-in providers\n  const elements = useMemo(\n    () =>\n      Object.keys(providers).map(key => {\n        const provider = providers[key];\n\n        const { Component } = provider.components;\n\n        const handleSignInSuccess = (result: IdentityApi) => {\n          handleWrappedResult(result);\n        };\n\n        const handleSignInStarted = () => {\n          localStorage.setItem(\n            PROVIDER_STORAGE_KEY,\n            provider?.config?.id || provider.id,\n          );\n        };\n\n        const handleSignInFailure = () => {\n          localStorage.removeItem(PROVIDER_STORAGE_KEY);\n        };\n\n        return (\n          <Component\n            key={provider.id}\n            config={provider.config!}\n            onSignInStarted={handleSignInStarted}\n            onSignInSuccess={handleSignInSuccess}\n            onSignInFailure={handleSignInFailure}\n          />\n        );\n      }),\n    [providers, handleWrappedResult],\n  );\n\n  return [loading, elements];\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;AAwCA,MAAM,oBAAA,GAAuB,qCAAA;AAU7B,MAAM,eAAA,GAAqD;AAAA,EACzD,KAAA,EAAO,aAAA;AAAA,EACP,MAAA,EAAQ,cAAA;AAAA,EACR,MAAA,EAAQ;AACV,CAAA;AAEA,SAAS,WAAA,CAAY,IAAY,SAAA,EAAqC;AACpE,EAAA,IAAI,EAAA,IAAM,SAAA;AACR,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,IAAI,EAAE,CAAA,gEAAA;AAAA,KACR;AACJ;AAEO,SAAS,mBACd,iBAAA,EACoB;AACpB,EAAA,MAAM,YAAY,iBAAA,CAAkB,MAAA;AAAA,IAClC,CAAC,KAAyB,MAAA,KAAW;AACnC,MAAA,IAAI,OAAO,WAAW,QAAA,EAAU;AAC9B,QAAA,WAAA,CAAY,QAAQ,GAAG,CAAA;AACvB,QAAA,GAAA,CAAI,MAAM,IAAI,EAAE,UAAA,EAAY,gBAAgB,MAAM,CAAA,EAAG,IAAI,MAAA,EAAO;AAEhE,QAAA,OAAO,GAAA;AAAA,MACT;AAEA,MAAA,MAAM,EAAE,IAAG,GAAI,MAAA;AACf,MAAA,WAAA,CAAY,IAAI,GAAG,CAAA;AAEnB,MAAA,GAAA,CAAI,EAAE,CAAA,GAAI,EAAE,YAAY,eAAA,CAAgB,MAAA,EAAQ,IAAI,MAAA,EAAO;AAE3D,MAAA,OAAO,GAAA;AAAA,IACT,CAAA;AAAA,IACA;AAAC,GACH;AAEA,EAAA,OAAO,SAAA;AACT;AAEO,MAAM,kBAAA,GAAqB,CAChC,SAAA,EACA,eAAA,KACG;AACH,EAAA,MAAM,QAAA,GAAW,OAAO,WAAW,CAAA;AACnC,EAAA,MAAM,YAAY,YAAA,EAAa;AAC/B,EAAA,MAAM,CAAC,OAAA,EAAS,UAAU,CAAA,GAAI,SAAS,IAAI,CAAA;AAC3C,EAAA,MAAM,YAAY,YAAA,EAAa;AAE/B,EAAA,MAAM,EAAE,CAAA,EAAE,GAAI,iBAAA,CAAkB,4BAA4B,CAAA;AAE5D,EAAA,MAAM,CAAC,YAAA,EAAc,gBAAgB,CAAA,GAAI,eAAA,EAAgB;AAEzD,EAAA,cAAA,CAAe,MAAM;AACnB,IAAA,MAAM,UAAA,GAAa,YAAA,CAAa,GAAA,CAAI,OAAO,CAAA;AAC3C,IAAA,IAAI,UAAA,EAAY;AACd,MAAA,QAAA,CAAS,IAAA;AAAA,QACP,IAAI,eAAe,CAAA,CAAE,oBAAoB,GAAG,IAAI,KAAA,CAAM,UAAU,CAAC;AAAA,OACnE;AAAA,IACF;AAAA,EACF,CAAC,CAAA;AAGD,EAAA,MAAM,mBAAA,GAAsB,WAAA;AAAA,IAC1B,OAAO,WAAA,KAA6B;AAClC,MAAA,eAAA;AAAA,QACE,wBAAwB,IAAA,CAAK;AAAA,UAC3B,WAAA;AAAA,UACA,SAAS,YAAY;AACnB,YAAA,YAAA,CAAa,WAAW,oBAAoB,CAAA;AAC5C,YAAA,MAAM,YAAY,OAAA,IAAU;AAC5B,YAAA,SAAA,CAAU,YAAA,CAAa,WAAW,SAAS,CAAA;AAAA,UAC7C;AAAA,SACD;AAAA,OACH;AACA,MAAA,SAAA,CAAU,YAAA,CAAa,UAAU,SAAS,CAAA;AAAA,IAC5C,CAAA;AAAA,IACA,CAAC,iBAAiB,SAAS;AAAA,GAC7B;AAIA,EAAA,eAAA,CAAgB,MAAM;AACpB,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,OAAO,MAAA;AAAA,IACT;AAGA,IAAA,MAAM,qBAAqB,YAAA,CAAa,OAAA;AAAA,MACtC;AAAA,KACF;AAGA,IAAA,IAAI,uBAAuB,IAAA,EAAM;AAC/B,MAAA,UAAA,CAAW,KAAK,CAAA;AAChB,MAAA,OAAO,MAAA;AAAA,IACT;AAEA,IAAA,MAAM,QAAA,GAAW,UAAU,kBAAkB,CAAA;AAC7C,IAAA,IAAI,CAAC,QAAA,EAAU;AACb,MAAA,UAAA,CAAW,KAAK,CAAA;AAChB,MAAA,OAAO,MAAA;AAAA,IACT;AAEA,IAAA,IAAI,SAAA,GAAY,KAAA;AAEhB,IAAA,QAAA,CAAS,UAAA,CACN,OAAO,SAAA,EAAW,QAAA,CAAS,QAAQ,MAAO,CAAA,CAC1C,KAAK,CAAA,MAAA,KAAU;AACd,MAAA,IAAI,SAAA,EAAW;AACb,QAAA,YAAA,CAAa,WAAW,oBAAoB,CAAA;AAC5C,QAAA;AAAA,MACF;AACA,MAAA,IAAI,MAAA,EAAQ;AACV,QAAA,mBAAA,CAAoB,MAAM,CAAA;AAAA,MAC5B,CAAA,MAAO;AACL,QAAA,UAAA,CAAW,KAAK,CAAA;AAAA,MAClB;AAAA,IACF,CAAC,CAAA,CACA,KAAA,CAAM,CAAA,KAAA,KAAS;AACd,MAAA,YAAA,CAAa,WAAW,oBAAoB,CAAA;AAC5C,MAAA,IAAI,SAAA,EAAW;AACb,QAAA;AAAA,MACF;AACA,MAAA,QAAA,CAAS,KAAK,KAAK,CAAA;AACnB,MAAA,UAAA,CAAW,KAAK,CAAA;AAAA,IAClB,CAAC,CAAA;AAEH,IAAA,OAAO,MAAM;AACX,MAAA,SAAA,GAAY,IAAA;AAAA,IACd,CAAA;AAAA,EACF,CAAA,EAAG;AAAA,IACD,OAAA;AAAA,IACA,QAAA;AAAA,IACA,eAAA;AAAA,IACA,SAAA;AAAA,IACA,SAAA;AAAA,IACA;AAAA,GACD,CAAA;AAGD,EAAA,MAAM,QAAA,GAAW,OAAA;AAAA,IACf,MACE,MAAA,CAAO,IAAA,CAAK,SAAS,CAAA,CAAE,IAAI,CAAA,GAAA,KAAO;AAChC,MAAA,MAAM,QAAA,GAAW,UAAU,GAAG,CAAA;AAE9B,MAAA,MAAM,EAAE,SAAA,EAAU,GAAI,QAAA,CAAS,UAAA;AAE/B,MAAA,MAAM,mBAAA,GAAsB,CAAC,MAAA,KAAwB;AACnD,QAAA,mBAAA,CAAoB,MAAM,CAAA;AAAA,MAC5B,CAAA;AAEA,MAAA,MAAM,sBAAsB,MAAM;AAChC,QAAA,YAAA,CAAa,OAAA;AAAA,UACX,oBAAA;AAAA,UACA,QAAA,EAAU,MAAA,EAAQ,EAAA,IAAM,QAAA,CAAS;AAAA,SACnC;AAAA,MACF,CAAA;AAEA,MAAA,MAAM,sBAAsB,MAAM;AAChC,QAAA,YAAA,CAAa,WAAW,oBAAoB,CAAA;AAAA,MAC9C,CAAA;AAEA,MAAA,uBACE,GAAA;AAAA,QAAC,SAAA;AAAA,QAAA;AAAA,UAEC,QAAQ,QAAA,CAAS,MAAA;AAAA,UACjB,eAAA,EAAiB,mBAAA;AAAA,UACjB,eAAA,EAAiB,mBAAA;AAAA,UACjB,eAAA,EAAiB;AAAA,SAAA;AAAA,QAJZ,QAAA,CAAS;AAAA,OAKhB;AAAA,IAEJ,CAAC,CAAA;AAAA,IACH,CAAC,WAAW,mBAAmB;AAAA,GACjC;AAEA,EAAA,OAAO,CAAC,SAAS,QAAQ,CAAA;AAC3B;;;;"}