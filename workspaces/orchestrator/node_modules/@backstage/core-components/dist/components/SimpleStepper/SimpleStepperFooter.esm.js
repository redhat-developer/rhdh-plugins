import { jsxs, jsx } from 'react/jsx-runtime';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import { makeStyles } from '@material-ui/core/styles';
import { useContext } from 'react';
import { VerticalStepperContext } from './SimpleStepper.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      marginTop: theme.spacing(3),
      "& button": {
        marginRight: theme.spacing(1)
      }
    }
  }),
  { name: "BackstageSimpleStepperFooter" }
);
const RestartBtn = ({ text, handleClick }) => {
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  return /* @__PURE__ */ jsx(Button, { onClick: handleClick, children: text || t("simpleStepper.reset") });
};
const NextBtn = ({
  text,
  handleClick,
  disabled,
  last,
  stepIndex
}) => {
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  return /* @__PURE__ */ jsx(
    Button,
    {
      variant: "contained",
      color: "primary",
      disabled,
      "data-testid": `nextButton-${stepIndex}`,
      onClick: handleClick,
      children: text || (last ? t("simpleStepper.finish") : t("simpleStepper.next"))
    }
  );
};
const SkipBtn = ({ text, handleClick, disabled, stepIndex }) => {
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  return /* @__PURE__ */ jsx(
    Button,
    {
      variant: "outlined",
      color: "primary",
      disabled,
      "data-testid": `skipButton-${stepIndex}`,
      onClick: handleClick,
      children: text || t("simpleStepper.skip")
    }
  );
};
const BackBtn = ({ text, handleClick, disabled, stepIndex }) => {
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  return /* @__PURE__ */ jsx(
    Button,
    {
      onClick: handleClick,
      "data-testid": `backButton-${stepIndex}`,
      disabled,
      children: text || t("simpleStepper.back")
    }
  );
};
const SimpleStepperFooter = ({
  actions = {},
  children
}) => {
  const classes = useStyles();
  const {
    stepperLength,
    stepIndex,
    setStepIndex,
    stepHistory,
    setStepHistory,
    onStepChange
  } = useContext(VerticalStepperContext);
  const onChange = (newIndex, callback) => {
    if (callback) {
      callback();
    }
    if (onStepChange) {
      onStepChange(stepIndex, newIndex);
    }
    setStepIndex(newIndex);
  };
  const handleNext = () => {
    const newIndex = actions.nextStep ? actions.nextStep(stepIndex, stepperLength - 1) : stepIndex + 1;
    onChange(newIndex, actions.onNext);
    setStepHistory([...stepHistory, newIndex]);
  };
  const handleBack = () => {
    stepHistory.pop();
    onChange(stepHistory[stepHistory.length - 1], actions.onBack);
    setStepHistory([...stepHistory]);
  };
  const handleRestart = () => {
    onChange(0, actions.onRestart);
    setStepHistory([0]);
  };
  return /* @__PURE__ */ jsxs(Box, { className: classes.root, children: [
    [void 0, true].includes(actions.showBack) && stepIndex !== 0 && /* @__PURE__ */ jsx(
      BackBtn,
      {
        text: actions.backText,
        handleClick: handleBack,
        disabled: stepIndex === 0,
        stepIndex
      }
    ),
    actions.showSkip && /* @__PURE__ */ jsx(
      SkipBtn,
      {
        text: actions.skipText,
        handleClick: handleNext,
        disabled: !!stepperLength && stepIndex >= stepperLength || !!actions.canSkip && !actions.canSkip(),
        stepIndex
      }
    ),
    [void 0, true].includes(actions.showNext) && /* @__PURE__ */ jsx(
      NextBtn,
      {
        text: actions.nextText,
        handleClick: handleNext,
        disabled: !!stepperLength && stepIndex >= stepperLength || !!actions.canNext && !actions.canNext(),
        stepIndex
      }
    ),
    actions.showRestart && stepIndex !== 0 && /* @__PURE__ */ jsx(
      RestartBtn,
      {
        text: actions.restartText,
        handleClick: handleRestart,
        stepIndex
      }
    ),
    children
  ] });
};

export { RestartBtn, SimpleStepperFooter };
//# sourceMappingURL=SimpleStepperFooter.esm.js.map
