{"version":3,"file":"alpha.cjs.js","sources":["../src/alpha/index.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createExtensionPoint } from '@backstage/backend-plugin-api';\nimport {\n  TaskBroker,\n  TemplateAction,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport { CreatedTemplateFilter } from './filters';\nimport { CreatedTemplateGlobal } from './globals';\n\nexport * from '../tasks/alpha';\nexport * from './filters';\nexport * from './globals';\nexport * from './types';\nexport * from './checkpoints';\n\n/**\n * Extension point for managing scaffolder actions.\n *\n * @alpha\n */\nexport interface ScaffolderActionsExtensionPoint {\n  addActions(...actions: TemplateAction<any, any, any>[]): void;\n}\n\n/**\n * Extension point for managing scaffolder actions.\n *\n * @alpha\n */\nexport const scaffolderActionsExtensionPoint =\n  createExtensionPoint<ScaffolderActionsExtensionPoint>({\n    id: 'scaffolder.actions',\n  });\n\n/**\n * Extension point for replacing the scaffolder task broker.\n *\n * @alpha\n */\nexport interface ScaffolderTaskBrokerExtensionPoint {\n  setTaskBroker(taskBroker: TaskBroker): void;\n}\n\n/**\n * Extension point for replacing the scaffolder task broker.\n *\n * @alpha\n */\nexport const scaffolderTaskBrokerExtensionPoint =\n  createExtensionPoint<ScaffolderTaskBrokerExtensionPoint>({\n    id: 'scaffolder.taskBroker',\n  });\n\n/**\n * Extension point for adding template filters and globals.\n *\n * @alpha\n */\nexport interface ScaffolderTemplatingExtensionPoint {\n  addTemplateFilters(\n    filters: Record<string, TemplateFilter> | CreatedTemplateFilter<any, any>[],\n  ): void;\n\n  addTemplateGlobals(\n    globals: Record<string, TemplateGlobal> | CreatedTemplateGlobal[],\n  ): void;\n}\n\n/**\n * Extension point for adding template filters and globals.\n *\n * @alpha\n */\nexport const scaffolderTemplatingExtensionPoint =\n  createExtensionPoint<ScaffolderTemplatingExtensionPoint>({\n    id: 'scaffolder.templating',\n  });\n\n/**\n * Autocomplete handler for the scaffolder.\n * @alpha\n */\nexport type AutocompleteHandler = ({\n  resource,\n  token,\n  context,\n}: {\n  resource: string;\n  token: string;\n  context: Record<string, string>;\n}) => Promise<{ results: { title?: string; id: string }[] }>;\n\n/**\n * Extension point for adding autocomplete handler providers\n * @alpha\n */\nexport interface ScaffolderAutocompleteExtensionPoint {\n  addAutocompleteProvider({\n    id,\n    handler,\n  }: {\n    id: string;\n    handler: AutocompleteHandler;\n  }): void;\n}\n\n/**\n * Extension point for adding autocomplete handlers.\n *\n * @alpha\n */\nexport const scaffolderAutocompleteExtensionPoint =\n  createExtensionPoint<ScaffolderAutocompleteExtensionPoint>({\n    id: 'scaffolder.autocomplete',\n  });\n\n/**\n * This provider has to be implemented to make it possible to serialize/deserialize scaffolder workspace.\n *\n * @alpha\n */\nexport interface WorkspaceProvider {\n  serializeWorkspace({\n    path,\n    taskId,\n  }: {\n    path: string;\n    taskId: string;\n  }): Promise<void>;\n\n  cleanWorkspace(options: { taskId: string }): Promise<void>;\n\n  rehydrateWorkspace(options: {\n    taskId: string;\n    targetPath: string;\n  }): Promise<void>;\n}\n\n/**\n * Extension point for adding workspace providers.\n *\n * @alpha\n */\nexport interface ScaffolderWorkspaceProviderExtensionPoint {\n  addProviders(providers: Record<string, WorkspaceProvider>): void;\n}\n\n/**\n * Extension point for adding workspace providers.\n *\n * @alpha\n */\nexport const scaffolderWorkspaceProviderExtensionPoint =\n  createExtensionPoint<ScaffolderWorkspaceProviderExtensionPoint>({\n    id: 'scaffolder.workspace.provider',\n  });\n"],"names":["createExtensionPoint"],"mappings":";;;;;;;AA8CO,MAAM,kCACXA,qCAAA,CAAsD;AAAA,EACpD,EAAA,EAAI;AACN,CAAC;AAgBI,MAAM,qCACXA,qCAAA,CAAyD;AAAA,EACvD,EAAA,EAAI;AACN,CAAC;AAsBI,MAAM,qCACXA,qCAAA,CAAyD;AAAA,EACvD,EAAA,EAAI;AACN,CAAC;AAmCI,MAAM,uCACXA,qCAAA,CAA2D;AAAA,EACzD,EAAA,EAAI;AACN,CAAC;AAsCI,MAAM,4CACXA,qCAAA,CAAgE;AAAA,EAC9D,EAAA,EAAI;AACN,CAAC;;;;;;;;;;;;;"}