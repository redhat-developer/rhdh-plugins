{"version":3,"file":"serializeDirectoryContents.cjs.js","sources":["../../src/files/serializeDirectoryContents.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport globby from 'globby';\nimport limiterFactory from 'p-limit';\nimport { resolveSafeChildPath } from '@backstage/backend-plugin-api';\nimport { SerializedFile } from './types';\nimport { isError } from '@backstage/errors';\n\nconst DEFAULT_GLOB_PATTERNS = ['./**', '!.git'];\n\nexport const isExecutable = (fileMode: number | undefined) => {\n  if (!fileMode) {\n    return false;\n  }\n\n  const executeBitMask = 0o000111;\n  const res = fileMode & executeBitMask;\n  return res > 0;\n};\n\nasync function asyncFilter<T>(\n  array: T[],\n  callback: (value: T, index: number, array: T[]) => Promise<boolean>,\n): Promise<T[]> {\n  const filterMap = await Promise.all(array.map(callback));\n  return array.filter((_value, index) => filterMap[index]);\n}\n\n/**\n * @public\n */\nexport async function serializeDirectoryContents(\n  sourcePath: string,\n  options?: {\n    gitignore?: boolean;\n    globPatterns?: string[];\n  },\n): Promise<SerializedFile[]> {\n  const paths = await globby(options?.globPatterns ?? DEFAULT_GLOB_PATTERNS, {\n    cwd: sourcePath,\n    dot: true,\n    gitignore: options?.gitignore,\n    followSymbolicLinks: false,\n    // In order to pick up 'broken' symlinks, we oxymoronically request files AND folders yet we filter out folders\n    // This is because broken symlinks aren't classed as files so we need to glob everything\n    onlyFiles: false,\n    objectMode: true,\n    stats: true,\n  });\n\n  const limiter = limiterFactory(10);\n\n  const valid = await asyncFilter(paths, async ({ dirent, path }) => {\n    if (dirent.isDirectory()) return false;\n    if (!dirent.isSymbolicLink()) return true;\n\n    const safePath = resolveSafeChildPath(sourcePath, path);\n\n    // we only want files that don't exist\n    try {\n      await fs.stat(safePath);\n      return false;\n    } catch (e) {\n      return isError(e) && e.code === 'ENOENT';\n    }\n  });\n\n  return Promise.all(\n    valid.map(async ({ dirent, path, stats }) => ({\n      path,\n      content: await limiter(async () => {\n        const absFilePath = resolveSafeChildPath(sourcePath, path);\n        if (dirent.isSymbolicLink()) {\n          return fs.readlink(absFilePath, 'buffer');\n        }\n        return fs.readFile(absFilePath);\n      }),\n      executable: isExecutable(stats?.mode),\n      symlink: dirent.isSymbolicLink(),\n    })),\n  );\n}\n"],"names":["globby","limiterFactory","resolveSafeChildPath","fs","isError"],"mappings":";;;;;;;;;;;;;AAuBA,MAAM,qBAAA,GAAwB,CAAC,MAAA,EAAQ,OAAO,CAAA;AAEvC,MAAM,YAAA,GAAe,CAAC,QAAA,KAAiC;AAC5D,EAAA,IAAI,CAAC,QAAA,EAAU;AACb,IAAA,OAAO,KAAA;AAAA,EACT;AAEA,EAAA,MAAM,cAAA,GAAiB,EAAA;AACvB,EAAA,MAAM,MAAM,QAAA,GAAW,cAAA;AACvB,EAAA,OAAO,GAAA,GAAM,CAAA;AACf;AAEA,eAAe,WAAA,CACb,OACA,QAAA,EACc;AACd,EAAA,MAAM,YAAY,MAAM,OAAA,CAAQ,IAAI,KAAA,CAAM,GAAA,CAAI,QAAQ,CAAC,CAAA;AACvD,EAAA,OAAO,MAAM,MAAA,CAAO,CAAC,QAAQ,KAAA,KAAU,SAAA,CAAU,KAAK,CAAC,CAAA;AACzD;AAKA,eAAsB,0BAAA,CACpB,YACA,OAAA,EAI2B;AAC3B,EAAA,MAAM,KAAA,GAAQ,MAAMA,uBAAA,CAAO,OAAA,EAAS,gBAAgB,qBAAA,EAAuB;AAAA,IACzE,GAAA,EAAK,UAAA;AAAA,IACL,GAAA,EAAK,IAAA;AAAA,IACL,WAAW,OAAA,EAAS,SAAA;AAAA,IACpB,mBAAA,EAAqB,KAAA;AAAA;AAAA;AAAA,IAGrB,SAAA,EAAW,KAAA;AAAA,IACX,UAAA,EAAY,IAAA;AAAA,IACZ,KAAA,EAAO;AAAA,GACR,CAAA;AAED,EAAA,MAAM,OAAA,GAAUC,gCAAe,EAAE,CAAA;AAEjC,EAAA,MAAM,KAAA,GAAQ,MAAM,WAAA,CAAY,KAAA,EAAO,OAAO,EAAE,MAAA,EAAQ,MAAK,KAAM;AACjE,IAAA,IAAI,MAAA,CAAO,WAAA,EAAY,EAAG,OAAO,KAAA;AACjC,IAAA,IAAI,CAAC,MAAA,CAAO,cAAA,EAAe,EAAG,OAAO,IAAA;AAErC,IAAA,MAAM,QAAA,GAAWC,qCAAA,CAAqB,UAAA,EAAY,IAAI,CAAA;AAGtD,IAAA,IAAI;AACF,MAAA,MAAMC,WAAA,CAAG,KAAK,QAAQ,CAAA;AACtB,MAAA,OAAO,KAAA;AAAA,IACT,SAAS,CAAA,EAAG;AACV,MAAA,OAAOC,cAAA,CAAQ,CAAC,CAAA,IAAK,CAAA,CAAE,IAAA,KAAS,QAAA;AAAA,IAClC;AAAA,EACF,CAAC,CAAA;AAED,EAAA,OAAO,OAAA,CAAQ,GAAA;AAAA,IACb,MAAM,GAAA,CAAI,OAAO,EAAE,MAAA,EAAQ,IAAA,EAAM,OAAM,MAAO;AAAA,MAC5C,IAAA;AAAA,MACA,OAAA,EAAS,MAAM,OAAA,CAAQ,YAAY;AACjC,QAAA,MAAM,WAAA,GAAcF,qCAAA,CAAqB,UAAA,EAAY,IAAI,CAAA;AACzD,QAAA,IAAI,MAAA,CAAO,gBAAe,EAAG;AAC3B,UAAA,OAAOC,WAAA,CAAG,QAAA,CAAS,WAAA,EAAa,QAAQ,CAAA;AAAA,QAC1C;AACA,QAAA,OAAOA,WAAA,CAAG,SAAS,WAAW,CAAA;AAAA,MAChC,CAAC,CAAA;AAAA,MACD,UAAA,EAAY,YAAA,CAAa,KAAA,EAAO,IAAI,CAAA;AAAA,MACpC,OAAA,EAAS,OAAO,cAAA;AAAe,KACjC,CAAE;AAAA,GACJ;AACF;;;;;"}