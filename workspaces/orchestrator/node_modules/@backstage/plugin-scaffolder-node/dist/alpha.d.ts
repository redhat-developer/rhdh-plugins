import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { TemplateAction, TaskBroker, TemplateFilter, TemplateGlobal } from '@backstage/plugin-scaffolder-node';
import { z } from 'zod';
import { JsonValue } from '@backstage/types';
export { T as TemplateFilter, a as TemplateGlobal } from './types/types.d-C0fXdKnD.js';

/**
 * @alpha
 */
type ZodFunctionSchema<TFunctionArgs extends [z.ZodTypeAny, ...z.ZodTypeAny[]], TReturnType extends z.ZodTypeAny> = (zod: typeof z) => z.ZodFunction<z.ZodTuple<TFunctionArgs, null>, TReturnType> | z.ZodType<(...args: z.infer<z.ZodTuple<TFunctionArgs>>) => z.infer<TReturnType>>;

/** @alpha */
type TemplateFilterExample = {
    description?: string;
    example: string;
    notes?: string;
};
/** @alpha */
type CreatedTemplateFilter<TFunctionArgs extends [z.ZodTypeAny, ...z.ZodTypeAny[]], TReturnType extends z.ZodTypeAny> = {
    id: string;
    description?: string;
    examples?: TemplateFilterExample[];
    schema?: ZodFunctionSchema<TFunctionArgs, TReturnType>;
    filter: (...args: z.infer<z.ZodTuple<TFunctionArgs>>) => z.infer<TReturnType>;
};

/**
 * This function is used to create new template filters in type-safe manner.
 * @alpha
 */
declare const createTemplateFilter: <TFunctionArgs extends [z.ZodTypeAny, ...z.ZodTypeAny[]], TReturnType extends z.ZodTypeAny>(options: {
    id: string;
    description?: string;
    examples?: TemplateFilterExample[];
    schema?: ZodFunctionSchema<TFunctionArgs, TReturnType>;
    filter: (...args: z.infer<z.ZodTuple<TFunctionArgs>>) => z.infer<TReturnType>;
}) => CreatedTemplateFilter<TFunctionArgs, TReturnType>;

/** @alpha */
type CreatedTemplateGlobalValue<T extends JsonValue = JsonValue> = {
    id: string;
    value: T;
    description?: string;
};
/** @alpha */
type TemplateGlobalFunctionExample = {
    description?: string;
    example: string;
    notes?: string;
};
/** @alpha */
type CreatedTemplateGlobalFunction<TFunctionArgs extends [z.ZodTypeAny, ...z.ZodTypeAny[]], TReturnType extends z.ZodTypeAny> = {
    id: string;
    description?: string;
    examples?: TemplateGlobalFunctionExample[];
    schema?: ZodFunctionSchema<TFunctionArgs, TReturnType>;
    fn: (...args: z.infer<z.ZodTuple<TFunctionArgs>>) => z.infer<TReturnType>;
};
/** @alpha */
type CreatedTemplateGlobal = CreatedTemplateGlobalValue | CreatedTemplateGlobalFunction<any, any>;

/**
 * This function is used to create new template global values in type-safe manner.
 * @param t - CreatedTemplateGlobalValue | CreatedTemplateGlobalFunction
 * @returns t
 * @alpha
 */
declare const createTemplateGlobalValue: (v: CreatedTemplateGlobalValue) => CreatedTemplateGlobalValue;
/**
 * This function is used to create new template global functions in type-safe manner.
 * @param fn - CreatedTemplateGlobalFunction
 * @returns fn
 * @alpha
 */
declare const createTemplateGlobalFunction: <TFunctionArgs extends [z.ZodTypeAny, ...z.ZodTypeAny[]], TReturnType extends z.ZodTypeAny>(options: {
    id: string;
    description?: string;
    examples?: TemplateGlobalFunctionExample[];
    schema?: ZodFunctionSchema<TFunctionArgs, TReturnType>;
    fn: (...args: z.infer<z.ZodTuple<TFunctionArgs>>) => z.infer<TReturnType>;
}) => CreatedTemplateGlobalFunction<TFunctionArgs, TReturnType>;

/**
 * Serializes provided path into tar archive
 *
 * @alpha
 */
declare const serializeWorkspace: (opts: {
    path: string;
}) => Promise<{
    contents: Buffer;
}>;
/**
 * Rehydrates the provided buffer of tar archive into the provide destination path
 *
 * @alpha
 */
declare const restoreWorkspace: (opts: {
    path: string;
    buffer?: Buffer;
}) => Promise<void>;

/**
 * Options for updating a checkpoint in a task.
 *
 * @alpha
 */
type UpdateTaskCheckpointOptions = {
    key: string;
} & CheckpointStateValue;

/**
 * The status of a checkpoint, indicating whether it succeeded or failed.
 *
 * @alpha
 */
type CheckpointStatus = 'failed' | 'success';
/**
 * Represents the union of all possible checkpoint state values.
 *
 * @alpha
 */
type CheckpointStateValue<T extends JsonValue = JsonValue> = {
    status: 'failed';
    reason: string;
} | {
    status: 'success';
    value: T;
};
/**
 * A map of checkpoint keys to their states.
 *
 * @alpha
 */
type CheckpointState = {
    [key: string]: CheckpointStateValue;
};
/**
 * Context for checkpoint function invocation.
 *
 * @alpha
 */
type CheckpointContext<T extends JsonValue | void = JsonValue> = {
    /**
     * Unique key for the checkpoint
     */
    key: string;
    /**
     * Function to execute for the checkpoint
     */
    fn: () => Promise<T> | T;
};

/**
 * Extension point for managing scaffolder actions.
 *
 * @alpha
 */
interface ScaffolderActionsExtensionPoint {
    addActions(...actions: TemplateAction<any, any, any>[]): void;
}
/**
 * Extension point for managing scaffolder actions.
 *
 * @alpha
 */
declare const scaffolderActionsExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<ScaffolderActionsExtensionPoint>;
/**
 * Extension point for replacing the scaffolder task broker.
 *
 * @alpha
 */
interface ScaffolderTaskBrokerExtensionPoint {
    setTaskBroker(taskBroker: TaskBroker): void;
}
/**
 * Extension point for replacing the scaffolder task broker.
 *
 * @alpha
 */
declare const scaffolderTaskBrokerExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<ScaffolderTaskBrokerExtensionPoint>;
/**
 * Extension point for adding template filters and globals.
 *
 * @alpha
 */
interface ScaffolderTemplatingExtensionPoint {
    addTemplateFilters(filters: Record<string, TemplateFilter> | CreatedTemplateFilter<any, any>[]): void;
    addTemplateGlobals(globals: Record<string, TemplateGlobal> | CreatedTemplateGlobal[]): void;
}
/**
 * Extension point for adding template filters and globals.
 *
 * @alpha
 */
declare const scaffolderTemplatingExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<ScaffolderTemplatingExtensionPoint>;
/**
 * Autocomplete handler for the scaffolder.
 * @alpha
 */
type AutocompleteHandler = ({ resource, token, context, }: {
    resource: string;
    token: string;
    context: Record<string, string>;
}) => Promise<{
    results: {
        title?: string;
        id: string;
    }[];
}>;
/**
 * Extension point for adding autocomplete handler providers
 * @alpha
 */
interface ScaffolderAutocompleteExtensionPoint {
    addAutocompleteProvider({ id, handler, }: {
        id: string;
        handler: AutocompleteHandler;
    }): void;
}
/**
 * Extension point for adding autocomplete handlers.
 *
 * @alpha
 */
declare const scaffolderAutocompleteExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<ScaffolderAutocompleteExtensionPoint>;
/**
 * This provider has to be implemented to make it possible to serialize/deserialize scaffolder workspace.
 *
 * @alpha
 */
interface WorkspaceProvider {
    serializeWorkspace({ path, taskId, }: {
        path: string;
        taskId: string;
    }): Promise<void>;
    cleanWorkspace(options: {
        taskId: string;
    }): Promise<void>;
    rehydrateWorkspace(options: {
        taskId: string;
        targetPath: string;
    }): Promise<void>;
}
/**
 * Extension point for adding workspace providers.
 *
 * @alpha
 */
interface ScaffolderWorkspaceProviderExtensionPoint {
    addProviders(providers: Record<string, WorkspaceProvider>): void;
}
/**
 * Extension point for adding workspace providers.
 *
 * @alpha
 */
declare const scaffolderWorkspaceProviderExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<ScaffolderWorkspaceProviderExtensionPoint>;

export { type AutocompleteHandler, type CheckpointContext, type CheckpointState, type CheckpointStateValue, type CheckpointStatus, type CreatedTemplateFilter, type CreatedTemplateGlobal, type CreatedTemplateGlobalFunction, type CreatedTemplateGlobalValue, type ScaffolderActionsExtensionPoint, type ScaffolderAutocompleteExtensionPoint, type ScaffolderTaskBrokerExtensionPoint, type ScaffolderTemplatingExtensionPoint, type ScaffolderWorkspaceProviderExtensionPoint, type TemplateFilterExample, type TemplateGlobalFunctionExample, type UpdateTaskCheckpointOptions, type WorkspaceProvider, type ZodFunctionSchema, createTemplateFilter, createTemplateGlobalFunction, createTemplateGlobalValue, restoreWorkspace, scaffolderActionsExtensionPoint, scaffolderAutocompleteExtensionPoint, scaffolderTaskBrokerExtensionPoint, scaffolderTemplatingExtensionPoint, scaffolderWorkspaceProviderExtensionPoint, serializeWorkspace };
