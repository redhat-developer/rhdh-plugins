{"version":3,"file":"MockDirectory.cjs.js","sources":["../../src/filesystem/MockDirectory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport os from 'os';\nimport { isChildPath } from '@backstage/backend-plugin-api';\nimport fs from 'fs-extra';\nimport textextensions from 'textextensions';\nimport {\n  dirname,\n  extname,\n  join as joinPath,\n  resolve as resolvePath,\n  relative as relativePath,\n  win32,\n  posix,\n} from 'path';\n\nconst tmpdirMarker = Symbol('os-tmpdir-mock');\n\n/**\n * A context that allows for more advanced file system operations when writing mock directory content.\n *\n * @public\n */\nexport interface MockDirectoryContentCallbackContext {\n  /** Absolute path to the location of this piece of content on the filesystem */\n  path: string;\n\n  /** Creates a symbolic link at the current location */\n  symlink(target: string): void;\n}\n\n/**\n * A callback that allows for more advanced file system operations when writing mock directory content.\n *\n * @public\n */\nexport type MockDirectoryContentCallback = (\n  ctx: MockDirectoryContentCallbackContext,\n) => void;\n\n/**\n * The content of a mock directory represented by a nested object structure.\n *\n * @remarks\n *\n * When used as input, the keys may contain forward slashes to indicate nested directories.\n * Then returned as output, each directory will always be represented as a separate object.\n *\n * @example\n * ```ts\n * {\n *   'test.txt': 'content',\n *   'sub-dir': {\n *     'file.txt': 'content',\n *     'nested-dir/file.txt': 'content',\n *   },\n *   'empty-dir': {},\n *   'binary-file': Buffer.from([0, 1, 2]),\n * }\n * ```\n *\n * @public\n */\nexport type MockDirectoryContent = {\n  [name in string]:\n    | MockDirectoryContent\n    | string\n    | Buffer\n    | MockDirectoryContentCallback;\n};\n\n/**\n * Options for {@link MockDirectory.content}.\n *\n * @public\n */\nexport interface MockDirectoryContentOptions {\n  /**\n   * The path to read content from. Defaults to the root of the mock directory.\n   *\n   * An absolute path can also be provided, as long as it is a child path of the mock directory.\n   */\n  path?: string;\n\n  /**\n   * Whether or not to return files as text rather than buffers.\n   *\n   * Defaults to checking the file extension against a list of known text extensions.\n   */\n  shouldReadAsText?: boolean | ((path: string, buffer: Buffer) => boolean);\n}\n\n/**\n * A utility for creating a mock directory that is automatically cleaned up.\n *\n * @public\n */\nexport interface MockDirectory {\n  /**\n   * The path to the root of the mock directory\n   */\n  readonly path: string;\n\n  /**\n   * Resolves a path relative to the root of the mock directory.\n   */\n  resolve(...paths: string[]): string;\n\n  /**\n   * Sets the content of the mock directory. This will remove any existing content.\n   *\n   * @example\n   * ```ts\n   * mockDir.setContent({\n   *   'test.txt': 'content',\n   *   'sub-dir': {\n   *     'file.txt': 'content',\n   *     'nested-dir/file.txt': 'content',\n   *   },\n   *   'empty-dir': {},\n   *   'binary-file': Buffer.from([0, 1, 2]),\n   * });\n   * ```\n   */\n  setContent(root: MockDirectoryContent): void;\n\n  /**\n   * Adds content of the mock directory. This will overwrite existing files.\n   *\n   * @example\n   * ```ts\n   * mockDir.addContent({\n   *   'test.txt': 'content',\n   *   'sub-dir': {\n   *     'file.txt': 'content',\n   *     'nested-dir/file.txt': 'content',\n   *   },\n   *   'empty-dir': {},\n   *   'binary-file': Buffer.from([0, 1, 2]),\n   * });\n   * ```\n   */\n  addContent(root: MockDirectoryContent): void;\n\n  /**\n   * Reads the content of the mock directory.\n   *\n   * @remarks\n   *\n   * Text files will be returned as strings, while binary files will be returned as buffers.\n   * By default the file extension is used to determine whether a file should be read as text.\n   *\n   * @example\n   * ```ts\n   * expect(mockDir.content()).toEqual({\n   *   'test.txt': 'content',\n   *   'sub-dir': {\n   *     'file.txt': 'content',\n   *     'nested-dir': {\n   *       'file.txt': 'content',\n   *     },\n   *   },\n   *   'empty-dir': {},\n   *   'binary-file': Buffer.from([0, 1, 2]),\n   * });\n   * ```\n   */\n  content(\n    options?: MockDirectoryContentOptions,\n  ): MockDirectoryContent | undefined;\n\n  /**\n   * Clears the content of the mock directory, ensuring that the directory itself exists.\n   */\n  clear(): void;\n\n  /**\n   * Removes the mock directory and all its contents.\n   */\n  remove(): void;\n}\n\n/** @internal */\ntype MockEntry =\n  | {\n      type: 'file';\n      path: string;\n      content: Buffer;\n    }\n  | {\n      type: 'dir';\n      path: string;\n    }\n  | {\n      type: 'callback';\n      path: string;\n      callback: MockDirectoryContentCallback;\n    };\n\n/** @internal */\nclass MockDirectoryImpl {\n  readonly #root: string;\n\n  constructor(root: string) {\n    this.#root = root;\n  }\n\n  get path(): string {\n    return this.#root;\n  }\n\n  resolve(...paths: string[]): string {\n    return resolvePath(this.#root, ...paths);\n  }\n\n  setContent(root: MockDirectoryContent): void {\n    this.remove();\n\n    return this.addContent(root);\n  }\n\n  addContent(root: MockDirectoryContent): void {\n    const entries = this.#transformInput(root);\n\n    for (const entry of entries) {\n      const fullPath = resolvePath(this.#root, entry.path);\n      if (!isChildPath(this.#root, fullPath)) {\n        throw new Error(\n          `Provided path must resolve to a child path of the mock directory, got '${fullPath}'`,\n        );\n      }\n\n      if (entry.type === 'dir') {\n        fs.ensureDirSync(fullPath);\n      } else if (entry.type === 'file') {\n        fs.ensureDirSync(dirname(fullPath));\n        fs.writeFileSync(fullPath, entry.content);\n      } else if (entry.type === 'callback') {\n        fs.ensureDirSync(dirname(fullPath));\n        entry.callback({\n          path: fullPath,\n          symlink(target: string) {\n            fs.symlinkSync(target, fullPath);\n          },\n        });\n      }\n    }\n  }\n\n  content(\n    options?: MockDirectoryContentOptions,\n  ): MockDirectoryContent | undefined {\n    const shouldReadAsText =\n      (typeof options?.shouldReadAsText === 'boolean'\n        ? () => options?.shouldReadAsText\n        : options?.shouldReadAsText) ??\n      ((path: string) => textextensions.includes(extname(path).slice(1)));\n\n    const root = resolvePath(this.#root, options?.path ?? '');\n    if (!isChildPath(this.#root, root)) {\n      throw new Error(\n        `Provided path must resolve to a child path of the mock directory, got '${root}'`,\n      );\n    }\n\n    function read(path: string): MockDirectoryContent | undefined {\n      if (!fs.pathExistsSync(path)) {\n        return undefined;\n      }\n\n      const entries = fs.readdirSync(path, { withFileTypes: true });\n      return Object.fromEntries(\n        entries.map(entry => {\n          const fullPath = resolvePath(path, entry.name);\n\n          if (entry.isDirectory()) {\n            return [entry.name, read(fullPath)];\n          }\n          const content = fs.readFileSync(fullPath);\n          const relativePosixPath = relativePath(root, fullPath)\n            .split(win32.sep)\n            .join(posix.sep);\n\n          if (shouldReadAsText(relativePosixPath, content)) {\n            return [entry.name, content.toString('utf8')];\n          }\n          return [entry.name, content];\n        }),\n      );\n    }\n\n    return read(root);\n  }\n\n  clear = (): void => {\n    this.setContent({});\n  };\n\n  remove = (): void => {\n    fs.rmSync(this.#root, { recursive: true, force: true, maxRetries: 10 });\n  };\n\n  #transformInput(input: MockDirectoryContent[string]): MockEntry[] {\n    const entries: MockEntry[] = [];\n\n    function traverse(node: MockDirectoryContent[string], path: string) {\n      if (typeof node === 'string') {\n        entries.push({\n          type: 'file',\n          path,\n          content: Buffer.from(node, 'utf8'),\n        });\n      } else if (node instanceof Buffer) {\n        entries.push({ type: 'file', path, content: node });\n      } else if (typeof node === 'function') {\n        entries.push({ type: 'callback', path, callback: node });\n      } else {\n        entries.push({ type: 'dir', path });\n        for (const [name, child] of Object.entries(node)) {\n          traverse(child, path ? `${path}/${name}` : name);\n        }\n      }\n    }\n\n    traverse(input, '');\n\n    return entries;\n  }\n}\n\n/**\n * Options for {@link createMockDirectory}.\n *\n * @public\n */\nexport interface CreateMockDirectoryOptions {\n  /**\n   * In addition to creating a temporary directory, also mock `os.tmpdir()` to\n   * return the mock directory path until the end of the test suite.\n   *\n   * When this option is provided the `createMockDirectory` call must happen in\n   * a scope where calling `afterAll` from Jest is allowed\n   *\n   * @returns\n   */\n  mockOsTmpDir?: boolean;\n\n  /**\n   * Initializes the directory with the given content, see {@link MockDirectory.setContent}.\n   */\n  content?: MockDirectoryContent;\n}\n\nconst cleanupCallbacks = new Array<() => void>();\n\nlet registered = false;\nfunction registerTestHooks() {\n  if (typeof afterAll !== 'function') {\n    return;\n  }\n  if (registered) {\n    return;\n  }\n  registered = true;\n\n  afterAll(async () => {\n    for (const callback of cleanupCallbacks) {\n      try {\n        callback();\n      } catch (error) {\n        console.error(\n          `Failed to clean up mock directory after tests, ${error}`,\n        );\n      }\n    }\n    cleanupCallbacks.length = 0;\n  });\n}\n\nregisterTestHooks();\n\n/**\n * Creates a new temporary mock directory that will be removed after the tests have completed.\n *\n * @public\n * @remarks\n *\n * This method is intended to be called outside of any test, either at top-level or\n * within a `describe` block. It will call `afterAll` to make sure that the mock directory\n * is removed after the tests have run.\n *\n * @example\n * ```ts\n * describe('MySubject', () => {\n *   const mockDir = createMockDirectory();\n *\n *   beforeEach(mockDir.clear);\n *\n *   it('should work', () => {\n *     // ... use mockDir\n *   })\n * })\n * ```\n */\nexport function createMockDirectory(\n  options?: CreateMockDirectoryOptions,\n): MockDirectory {\n  const tmpDir = process.env.RUNNER_TEMP || os.tmpdir(); // GitHub Actions\n  const root = fs.mkdtempSync(joinPath(tmpDir, 'backstage-tmp-test-dir-'));\n\n  const mocker = new MockDirectoryImpl(root);\n\n  const origTmpdir = options?.mockOsTmpDir ? os.tmpdir : undefined;\n  if (origTmpdir) {\n    if (Object.hasOwn(origTmpdir, tmpdirMarker)) {\n      throw new Error(\n        'Cannot mock os.tmpdir() when it has already been mocked',\n      );\n    }\n    const mock = Object.assign(() => mocker.path, { [tmpdirMarker]: true });\n    os.tmpdir = mock;\n  }\n\n  // In CI we expect there to be no need to clean up temporary directories\n  const needsCleanup = !process.env.CI;\n  if (needsCleanup) {\n    process.on('beforeExit', mocker.remove);\n  }\n\n  if (needsCleanup) {\n    cleanupCallbacks.push(() => mocker.remove());\n  }\n\n  if (origTmpdir) {\n    afterAll(() => {\n      os.tmpdir = origTmpdir;\n    });\n  }\n\n  if (options?.content) {\n    mocker.setContent(options.content);\n  }\n\n  return mocker;\n}\n"],"names":["resolvePath","isChildPath","fs","dirname","path","textextensions","extname","relativePath","win32","posix","os","joinPath"],"mappings":"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"}