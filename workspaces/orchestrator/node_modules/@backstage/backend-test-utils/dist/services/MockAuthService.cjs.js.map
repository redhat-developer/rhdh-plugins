{"version":3,"file":"MockAuthService.cjs.js","sources":["../../src/services/MockAuthService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackstageCredentials,\n  BackstageServicePrincipal,\n  BackstagePrincipalTypes,\n  BackstageUserPrincipal,\n  BackstageNonePrincipal,\n  AuthService,\n} from '@backstage/backend-plugin-api';\nimport { AuthenticationError } from '@backstage/errors';\nimport {\n  mockCredentials,\n  MOCK_USER_TOKEN,\n  MOCK_USER_TOKEN_PREFIX,\n  MOCK_INVALID_USER_TOKEN,\n  MOCK_USER_LIMITED_TOKEN_PREFIX,\n  MOCK_INVALID_USER_LIMITED_TOKEN,\n  MOCK_SERVICE_TOKEN,\n  MOCK_SERVICE_TOKEN_PREFIX,\n  MOCK_INVALID_SERVICE_TOKEN,\n  UserTokenPayload,\n  ServiceTokenPayload,\n} from './mockCredentials';\nimport { JsonObject } from '@backstage/types';\n\n/** @internal */\nexport class MockAuthService implements AuthService {\n  readonly pluginId: string;\n  readonly disableDefaultAuthPolicy: boolean;\n\n  constructor(options: {\n    pluginId: string;\n    disableDefaultAuthPolicy: boolean;\n  }) {\n    this.pluginId = options.pluginId;\n    this.disableDefaultAuthPolicy = options.disableDefaultAuthPolicy;\n  }\n\n  async authenticate(\n    token: string,\n    options?: { allowLimitedAccess?: boolean },\n  ): Promise<BackstageCredentials> {\n    switch (token) {\n      case MOCK_USER_TOKEN:\n        return mockCredentials.user();\n      case MOCK_SERVICE_TOKEN:\n        return mockCredentials.service();\n      case MOCK_INVALID_USER_TOKEN:\n        throw new AuthenticationError('User token is invalid');\n      case MOCK_INVALID_USER_LIMITED_TOKEN:\n        throw new AuthenticationError('Limited user token is invalid');\n      case MOCK_INVALID_SERVICE_TOKEN:\n        throw new AuthenticationError('Service token is invalid');\n      case '':\n        throw new AuthenticationError('Token is empty');\n      default:\n        break;\n    }\n\n    if (token.startsWith(MOCK_USER_TOKEN_PREFIX)) {\n      const { sub: userEntityRef, actor }: UserTokenPayload = JSON.parse(\n        token.slice(MOCK_USER_TOKEN_PREFIX.length),\n      );\n\n      return mockCredentials.user(userEntityRef, { actor });\n    }\n\n    if (token.startsWith(MOCK_USER_LIMITED_TOKEN_PREFIX)) {\n      if (!options?.allowLimitedAccess) {\n        throw new AuthenticationError('Limited user token is not allowed');\n      }\n\n      const { sub: userEntityRef }: UserTokenPayload = JSON.parse(\n        token.slice(MOCK_USER_LIMITED_TOKEN_PREFIX.length),\n      );\n\n      return mockCredentials.user(userEntityRef);\n    }\n\n    if (token.startsWith(MOCK_SERVICE_TOKEN_PREFIX)) {\n      const { sub, target, obo }: ServiceTokenPayload = JSON.parse(\n        token.slice(MOCK_SERVICE_TOKEN_PREFIX.length),\n      );\n\n      if (target && target !== this.pluginId) {\n        throw new AuthenticationError(\n          `Invalid mock token target plugin ID, got '${target}' but expected '${this.pluginId}'`,\n        );\n      }\n      if (obo) {\n        return mockCredentials.user(obo);\n      }\n\n      return mockCredentials.service(sub);\n    }\n\n    throw new AuthenticationError(`Unknown mock token '${token}'`);\n  }\n\n  async getNoneCredentials() {\n    return mockCredentials.none();\n  }\n\n  async getOwnServiceCredentials(): Promise<\n    BackstageCredentials<BackstageServicePrincipal>\n  > {\n    return mockCredentials.service(`plugin:${this.pluginId}`);\n  }\n\n  isPrincipal<TType extends keyof BackstagePrincipalTypes>(\n    credentials: BackstageCredentials,\n    type: TType,\n  ): credentials is BackstageCredentials<BackstagePrincipalTypes[TType]> {\n    const principal = credentials.principal as\n      | BackstageUserPrincipal\n      | BackstageServicePrincipal\n      | BackstageNonePrincipal;\n\n    if (type === 'unknown') {\n      return true;\n    }\n\n    if (principal.type !== type) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async getPluginRequestToken(options: {\n    onBehalfOf: BackstageCredentials;\n    targetPluginId: string;\n  }): Promise<{ token: string }> {\n    const principal = options.onBehalfOf.principal as\n      | BackstageUserPrincipal\n      | BackstageServicePrincipal\n      | BackstageNonePrincipal;\n\n    if (principal.type === 'none' && this.disableDefaultAuthPolicy) {\n      return { token: '' };\n    }\n\n    if (principal.type !== 'user' && principal.type !== 'service') {\n      throw new AuthenticationError(\n        `Refused to issue service token for credential type '${principal.type}'`,\n      );\n    }\n\n    return {\n      token: mockCredentials.service.token({\n        onBehalfOf: options.onBehalfOf,\n        targetPluginId: options.targetPluginId,\n      }),\n    };\n  }\n\n  async getLimitedUserToken(\n    credentials: BackstageCredentials<BackstageUserPrincipal>,\n  ): Promise<{ token: string; expiresAt: Date }> {\n    if (credentials.principal.type !== 'user') {\n      throw new AuthenticationError(\n        `Refused to issue limited user token for credential type '${credentials.principal.type}'`,\n      );\n    }\n\n    return {\n      token: mockCredentials.limitedUser.token(\n        credentials.principal.userEntityRef,\n      ),\n      expiresAt: new Date(Date.now() + 3600_000),\n    };\n  }\n\n  listPublicServiceKeys(): Promise<{ keys: JsonObject[] }> {\n    throw new Error('Not implemented');\n  }\n}\n"],"names":["MOCK_USER_TOKEN","mockCredentials","MOCK_SERVICE_TOKEN","MOCK_INVALID_USER_TOKEN","AuthenticationError","MOCK_INVALID_USER_LIMITED_TOKEN","MOCK_INVALID_SERVICE_TOKEN","MOCK_USER_TOKEN_PREFIX","MOCK_USER_LIMITED_TOKEN_PREFIX","MOCK_SERVICE_TOKEN_PREFIX"],"mappings":"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"}