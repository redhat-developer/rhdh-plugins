{"version":3,"file":"MockRootLoggerService.cjs.js","sources":["../../src/services/MockRootLoggerService.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport type { mockServices } from './mockServices';\n\nconst levels = {\n  none: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n  debug: 4,\n};\n\nexport class MockRootLoggerService implements RootLoggerService {\n  #level: number;\n  #meta: JsonObject;\n\n  static create(\n    options?: mockServices.rootLogger.Options,\n  ): MockRootLoggerService {\n    const level = options?.level ?? 'none';\n    if (!(level in levels)) {\n      throw new Error(`Invalid log level '${level}'`);\n    }\n    return new MockRootLoggerService(levels[level], {});\n  }\n\n  error(message: string, meta?: JsonObject | Error | undefined): void {\n    this.#log('error', message, meta);\n  }\n\n  warn(message: string, meta?: JsonObject | Error | undefined): void {\n    this.#log('warn', message, meta);\n  }\n\n  info(message: string, meta?: JsonObject | Error | undefined): void {\n    this.#log('info', message, meta);\n  }\n\n  debug(message: string, meta?: JsonObject | Error | undefined): void {\n    this.#log('debug', message, meta);\n  }\n\n  child(meta: JsonObject): LoggerService {\n    return new MockRootLoggerService(this.#level, { ...this.#meta, ...meta });\n  }\n\n  private constructor(level: number, meta: JsonObject) {\n    this.#level = level;\n    this.#meta = meta;\n  }\n\n  #log(\n    level: 'error' | 'warn' | 'info' | 'debug',\n    message: string,\n    meta?: JsonObject | Error | undefined,\n  ) {\n    const levelValue = levels[level] ?? 0;\n    if (levelValue <= this.#level) {\n      const labels = Object.entries(this.#meta)\n        .map(([key, value]) => `${key}=${value}`)\n        .join(',');\n      console[level](`${labels} ${message}`, meta);\n    }\n  }\n}\n"],"names":[],"mappings":";;AAuBA,MAAM,MAAA,GAAS;AAAA,EACb,IAAA,EAAM,CAAA;AAAA,EACN,KAAA,EAAO,CAAA;AAAA,EACP,IAAA,EAAM,CAAA;AAAA,EACN,IAAA,EAAM,CAAA;AAAA,EACN,KAAA,EAAO;AACT,CAAA;AAEO,MAAM,qBAAA,CAAmD;AAAA,EAC9D,MAAA;AAAA,EACA,KAAA;AAAA,EAEA,OAAO,OACL,OAAA,EACuB;AACvB,IAAA,MAAM,KAAA,GAAQ,SAAS,KAAA,IAAS,MAAA;AAChC,IAAA,IAAI,EAAE,SAAS,MAAA,CAAA,EAAS;AACtB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,mBAAA,EAAsB,KAAK,CAAA,CAAA,CAAG,CAAA;AAAA,IAChD;AACA,IAAA,OAAO,IAAI,qBAAA,CAAsB,MAAA,CAAO,KAAK,CAAA,EAAG,EAAE,CAAA;AAAA,EACpD;AAAA,EAEA,KAAA,CAAM,SAAiB,IAAA,EAA6C;AAClE,IAAA,IAAA,CAAK,IAAA,CAAK,OAAA,EAAS,OAAA,EAAS,IAAI,CAAA;AAAA,EAClC;AAAA,EAEA,IAAA,CAAK,SAAiB,IAAA,EAA6C;AACjE,IAAA,IAAA,CAAK,IAAA,CAAK,MAAA,EAAQ,OAAA,EAAS,IAAI,CAAA;AAAA,EACjC;AAAA,EAEA,IAAA,CAAK,SAAiB,IAAA,EAA6C;AACjE,IAAA,IAAA,CAAK,IAAA,CAAK,MAAA,EAAQ,OAAA,EAAS,IAAI,CAAA;AAAA,EACjC;AAAA,EAEA,KAAA,CAAM,SAAiB,IAAA,EAA6C;AAClE,IAAA,IAAA,CAAK,IAAA,CAAK,OAAA,EAAS,OAAA,EAAS,IAAI,CAAA;AAAA,EAClC;AAAA,EAEA,MAAM,IAAA,EAAiC;AACrC,IAAA,OAAO,IAAI,qBAAA,CAAsB,IAAA,CAAK,MAAA,EAAQ,EAAE,GAAG,IAAA,CAAK,KAAA,EAAO,GAAG,IAAA,EAAM,CAAA;AAAA,EAC1E;AAAA,EAEQ,WAAA,CAAY,OAAe,IAAA,EAAkB;AACnD,IAAA,IAAA,CAAK,MAAA,GAAS,KAAA;AACd,IAAA,IAAA,CAAK,KAAA,GAAQ,IAAA;AAAA,EACf;AAAA,EAEA,IAAA,CACE,KAAA,EACA,OAAA,EACA,IAAA,EACA;AACA,IAAA,MAAM,UAAA,GAAa,MAAA,CAAO,KAAK,CAAA,IAAK,CAAA;AACpC,IAAA,IAAI,UAAA,IAAc,KAAK,MAAA,EAAQ;AAC7B,MAAA,MAAM,SAAS,MAAA,CAAO,OAAA,CAAQ,KAAK,KAAK,CAAA,CACrC,IAAI,CAAC,CAAC,KAAK,KAAK,CAAA,KAAM,GAAG,GAAG,CAAA,CAAA,EAAI,KAAK,CAAA,CAAE,CAAA,CACvC,KAAK,GAAG,CAAA;AACX,MAAA,OAAA,CAAQ,KAAK,CAAA,CAAE,CAAA,EAAG,MAAM,CAAA,CAAA,EAAI,OAAO,IAAI,IAAI,CAAA;AAAA,IAC7C;AAAA,EACF;AACF;;;;"}