{"version":3,"file":"mockCredentials.cjs.js","sources":["../../src/services/mockCredentials.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackstageCredentials,\n  BackstageNonePrincipal,\n  BackstagePrincipalAccessRestrictions,\n  BackstageServicePrincipal,\n  BackstageUserPrincipal,\n} from '@backstage/backend-plugin-api';\n\nexport const DEFAULT_MOCK_USER_ENTITY_REF = 'user:default/mock';\nexport const DEFAULT_MOCK_SERVICE_SUBJECT = 'external:test-service';\n\nexport const MOCK_AUTH_COOKIE = 'backstage-auth';\n\nexport const MOCK_NONE_TOKEN = 'mock-none-token';\n\nexport const MOCK_USER_TOKEN = 'mock-user-token';\nexport const MOCK_USER_TOKEN_PREFIX = 'mock-user-token:';\nexport const MOCK_INVALID_USER_TOKEN = 'mock-invalid-user-token';\n\nexport const MOCK_USER_LIMITED_TOKEN_PREFIX = 'mock-limited-user-token:';\nexport const MOCK_INVALID_USER_LIMITED_TOKEN =\n  'mock-invalid-limited-user-token';\n\nexport const MOCK_SERVICE_TOKEN = 'mock-service-token';\nexport const MOCK_SERVICE_TOKEN_PREFIX = 'mock-service-token:';\nexport const MOCK_INVALID_SERVICE_TOKEN = 'mock-invalid-service-token';\n\nfunction validateUserEntityRef(ref: string) {\n  if (!ref.match(/^.+:.+\\/.+$/)) {\n    throw new TypeError(\n      `Invalid user entity reference '${ref}', expected <kind>:<namespace>/<name>`,\n    );\n  }\n}\n\n/**\n * The payload that can be encoded into a mock user token.\n * @internal\n */\nexport type UserTokenPayload = {\n  sub?: string;\n  actor?: { subject: string };\n};\n\n/**\n * The payload that can be encoded into a mock service token.\n * @internal\n */\nexport type ServiceTokenPayload = {\n  sub?: string; // service subject\n  obo?: string; // user entity reference\n  target?: string; // target plugin id\n};\n\n/**\n * @public\n */\nexport namespace mockCredentials {\n  /**\n   * Creates a mocked credentials object for a unauthenticated principal.\n   */\n  export function none(): BackstageCredentials<BackstageNonePrincipal> {\n    const result = {\n      $$type: '@backstage/BackstageCredentials',\n      principal: { type: 'none' },\n    } as const;\n    Object.defineProperties(result, {\n      toString: {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: () => `mockCredentials{nonePrincipal}`,\n      },\n    });\n    return result;\n  }\n\n  /**\n   * Utilities related to none credentials.\n   */\n  export namespace none {\n    /**\n     * Returns an authorization header that translates to unauthenticated\n     * credentials.\n     *\n     * This is useful when one wants to explicitly test unauthenticated requests\n     * while still using the default behavior of the mock HttpAuthService where\n     * it defaults to user credentials.\n     */\n    export function header(): string {\n      // NOTE: there is no .token() version of this because only the\n      //       HttpAuthService should know about and consume this token\n      return `Bearer ${MOCK_NONE_TOKEN}`;\n    }\n  }\n\n  /**\n   * Creates a mocked credentials object for a user principal.\n   *\n   * The default user entity reference is 'user:default/mock'.\n   */\n  export function user(\n    userEntityRef: string = DEFAULT_MOCK_USER_ENTITY_REF,\n    options?: { actor?: { subject: string } },\n  ): BackstageCredentials<BackstageUserPrincipal> {\n    validateUserEntityRef(userEntityRef);\n    const result = {\n      $$type: '@backstage/BackstageCredentials',\n      principal: {\n        type: 'user',\n        userEntityRef,\n        ...(options?.actor && {\n          actor: { type: 'service', subject: options.actor.subject } as const,\n        }),\n      },\n    } as const;\n    Object.defineProperties(result, {\n      toString: {\n        enumerable: false,\n        configurable: true,\n        value: () =>\n          `mockCredentials{userPrincipal{${userEntityRef}${\n            options?.actor ? `,actor={${options.actor.subject}}` : ''\n          }}}`,\n      },\n      token: {\n        enumerable: false,\n        configurable: true,\n        value: user.token(),\n      },\n    });\n    return result;\n  }\n\n  /**\n   * Utilities related to user credentials.\n   */\n  export namespace user {\n    /**\n     * Creates a mocked user token. If a payload is provided it will be encoded\n     * into the token and forwarded to the credentials object when authenticated\n     * by the mock auth service.\n     */\n    export function token(\n      userEntityRef?: string,\n      options?: { actor?: { subject: string } },\n    ): string {\n      if (userEntityRef) {\n        validateUserEntityRef(userEntityRef);\n        return `${MOCK_USER_TOKEN_PREFIX}${JSON.stringify({\n          sub: userEntityRef,\n          ...(options?.actor && {\n            actor: { subject: options.actor.subject },\n          }),\n        } satisfies UserTokenPayload)}`;\n      }\n      return MOCK_USER_TOKEN;\n    }\n\n    /**\n     * Returns an authorization header with a mocked user token. If a payload is\n     * provided it will be encoded into the token and forwarded to the\n     * credentials object when authenticated by the mock auth service.\n     */\n    export function header(userEntityRef?: string): string {\n      return `Bearer ${token(userEntityRef)}`;\n    }\n\n    export function invalidToken(): string {\n      return MOCK_INVALID_USER_TOKEN;\n    }\n\n    export function invalidHeader(): string {\n      return `Bearer ${invalidToken()}`;\n    }\n  }\n\n  /**\n   * Creates a mocked credentials object for a user principal with limited\n   * access.\n   *\n   * The default user entity reference is 'user:default/mock'.\n   */\n  export function limitedUser(\n    userEntityRef: string = DEFAULT_MOCK_USER_ENTITY_REF,\n  ): BackstageCredentials<BackstageUserPrincipal> {\n    return user(userEntityRef);\n  }\n\n  /**\n   * Utilities related to limited user credentials.\n   */\n  export namespace limitedUser {\n    /**\n     * Creates a mocked limited user token. If a payload is provided it will be\n     * encoded into the token and forwarded to the credentials object when\n     * authenticated by the mock auth service.\n     */\n    export function token(\n      userEntityRef: string = DEFAULT_MOCK_USER_ENTITY_REF,\n    ): string {\n      validateUserEntityRef(userEntityRef);\n      return `${MOCK_USER_LIMITED_TOKEN_PREFIX}${JSON.stringify({\n        sub: userEntityRef,\n      } satisfies UserTokenPayload)}`;\n    }\n\n    /**\n     * Returns an authorization header with a mocked limited user token. If a\n     * payload is provided it will be encoded into the token and forwarded to\n     * the credentials object when authenticated by the mock auth service.\n     */\n    export function cookie(userEntityRef?: string): string {\n      return `${MOCK_AUTH_COOKIE}=${token(userEntityRef)}`;\n    }\n\n    export function invalidToken(): string {\n      return MOCK_INVALID_USER_LIMITED_TOKEN;\n    }\n\n    export function invalidCookie(): string {\n      return `${MOCK_AUTH_COOKIE}=${invalidToken()}`;\n    }\n  }\n\n  /**\n   * Creates a mocked credentials object for a service principal.\n   *\n   * The default subject is 'external:test-service', and no access restrictions.\n   */\n  export function service(\n    subject: string = DEFAULT_MOCK_SERVICE_SUBJECT,\n    accessRestrictions?: BackstagePrincipalAccessRestrictions,\n  ): BackstageCredentials<BackstageServicePrincipal> {\n    const result = {\n      $$type: '@backstage/BackstageCredentials',\n      principal: {\n        type: 'service',\n        subject,\n        ...(accessRestrictions ? { accessRestrictions } : {}),\n      },\n    } as const;\n    Object.defineProperties(result, {\n      toString: {\n        enumerable: false,\n        configurable: true,\n        value: () =>\n          `mockCredentials{servicePrincipal{${subject}${\n            accessRestrictions\n              ? `,accessRestrictions=${JSON.stringify(accessRestrictions)}`\n              : ''\n          }}}`,\n      },\n    });\n    return result;\n  }\n\n  /**\n   * Utilities related to service credentials.\n   */\n  export namespace service {\n    /**\n     * Options for the creation of mock service tokens.\n     */\n    export type TokenOptions = {\n      onBehalfOf: BackstageCredentials;\n      targetPluginId: string;\n    };\n\n    /**\n     * Creates a mocked service token. The provided options will be encoded into\n     * the token and forwarded to the credentials object when authenticated by\n     * the mock auth service.\n     */\n    export function token(options?: TokenOptions): string {\n      if (options) {\n        const { targetPluginId, onBehalfOf } = options; // for fixed ordering\n\n        const oboPrincipal = onBehalfOf?.principal as\n          | BackstageServicePrincipal\n          | BackstageUserPrincipal\n          | BackstageNonePrincipal;\n        const obo =\n          oboPrincipal.type === 'user' ? oboPrincipal.userEntityRef : undefined;\n        const subject =\n          oboPrincipal.type === 'service' ? oboPrincipal.subject : undefined;\n\n        return `${MOCK_SERVICE_TOKEN_PREFIX}${JSON.stringify({\n          sub: subject,\n          obo,\n          target: targetPluginId,\n        } satisfies ServiceTokenPayload)}`;\n      }\n      return MOCK_SERVICE_TOKEN;\n    }\n\n    /**\n     * Returns an authorization header with a mocked service token. The provided\n     * options will be encoded into the token and forwarded to the credentials\n     * object when authenticated by the mock auth service.\n     */\n    export function header(options?: TokenOptions): string {\n      return `Bearer ${token(options)}`;\n    }\n\n    export function invalidToken(): string {\n      return MOCK_INVALID_SERVICE_TOKEN;\n    }\n\n    export function invalidHeader(): string {\n      return `Bearer ${invalidToken()}`;\n    }\n  }\n}\n"],"names":["mockCredentials","none","user","limitedUser","service"],"mappings":";;AAwBO,MAAM,4BAAA,GAA+B;AACrC,MAAM,4BAAA,GAA+B;AAErC,MAAM,gBAAA,GAAmB;AAEzB,MAAM,eAAA,GAAkB;AAExB,MAAM,eAAA,GAAkB;AACxB,MAAM,sBAAA,GAAyB;AAC/B,MAAM,uBAAA,GAA0B;AAEhC,MAAM,8BAAA,GAAiC;AACvC,MAAM,+BAAA,GACX;AAEK,MAAM,kBAAA,GAAqB;AAC3B,MAAM,yBAAA,GAA4B;AAClC,MAAM,0BAAA,GAA6B;AAE1C,SAAS,sBAAsB,GAAA,EAAa;AAC1C,EAAA,IAAI,CAAC,GAAA,CAAI,KAAA,CAAM,aAAa,CAAA,EAAG;AAC7B,IAAA,MAAM,IAAI,SAAA;AAAA,MACR,kCAAkC,GAAG,CAAA,qCAAA;AAAA,KACvC;AAAA,EACF;AACF;AAwBiBA;AAAA,CAAV,CAAUA,gBAAAA,KAAV;AAIE,EAAA,SAAS,IAAA,GAAqD;AACnE,IAAA,MAAM,MAAA,GAAS;AAAA,MACb,MAAA,EAAQ,iCAAA;AAAA,MACR,SAAA,EAAW,EAAE,IAAA,EAAM,MAAA;AAAO,KAC5B;AACA,IAAA,MAAA,CAAO,iBAAiB,MAAA,EAAQ;AAAA,MAC9B,QAAA,EAAU;AAAA,QACR,UAAA,EAAY,KAAA;AAAA,QACZ,YAAA,EAAc,IAAA;AAAA,QACd,QAAA,EAAU,IAAA;AAAA,QACV,OAAO,MAAM,CAAA,8BAAA;AAAA;AACf,KACD,CAAA;AACD,IAAA,OAAO,MAAA;AAAA,EACT;AAdO,EAAAA,gBAAAA,CAAS,IAAA,GAAA,IAAA;AAmBT,EAAA,CAAA,CAAUC,KAAAA,KAAV;AASE,IAAA,SAAS,MAAA,GAAiB;AAG/B,MAAA,OAAO,UAAU,eAAe,CAAA,CAAA;AAAA,IAClC;AAJO,IAAAA,KAAAA,CAAS,MAAA,GAAA,MAAA;AAAA,EAAA,CAAA,EATD,IAAA,GAAAD,gBAAAA,CAAA,IAAA,KAAAA,gBAAAA,CAAA,IAAA,GAAA,EAAA,CAAA,CAAA;AAqBV,EAAA,SAAS,IAAA,CACd,aAAA,GAAwB,4BAAA,EACxB,OAAA,EAC8C;AAC9C,IAAA,qBAAA,CAAsB,aAAa,CAAA;AACnC,IAAA,MAAM,MAAA,GAAS;AAAA,MACb,MAAA,EAAQ,iCAAA;AAAA,MACR,SAAA,EAAW;AAAA,QACT,IAAA,EAAM,MAAA;AAAA,QACN,aAAA;AAAA,QACA,GAAI,SAAS,KAAA,IAAS;AAAA,UACpB,OAAO,EAAE,IAAA,EAAM,WAAW,OAAA,EAAS,OAAA,CAAQ,MAAM,OAAA;AAAQ;AAC3D;AACF,KACF;AACA,IAAA,MAAA,CAAO,iBAAiB,MAAA,EAAQ;AAAA,MAC9B,QAAA,EAAU;AAAA,QACR,UAAA,EAAY,KAAA;AAAA,QACZ,YAAA,EAAc,IAAA;AAAA,QACd,KAAA,EAAO,MACL,CAAA,8BAAA,EAAiC,aAAa,CAAA,EAC5C,OAAA,EAAS,KAAA,GAAQ,CAAA,QAAA,EAAW,OAAA,CAAQ,KAAA,CAAM,OAAO,CAAA,CAAA,CAAA,GAAM,EACzD,CAAA,EAAA;AAAA,OACJ;AAAA,MACA,KAAA,EAAO;AAAA,QACL,UAAA,EAAY,KAAA;AAAA,QACZ,YAAA,EAAc,IAAA;AAAA,QACd,KAAA,EAAO,KAAK,KAAA;AAAM;AACpB,KACD,CAAA;AACD,IAAA,OAAO,MAAA;AAAA,EACT;AA/BO,EAAAA,gBAAAA,CAAS,IAAA,GAAA,IAAA;AAoCT,EAAA,CAAA,CAAUE,KAAAA,KAAV;AAME,IAAA,SAAS,KAAA,CACd,eACA,OAAA,EACQ;AACR,MAAA,IAAI,aAAA,EAAe;AACjB,QAAA,qBAAA,CAAsB,aAAa,CAAA;AACnC,QAAA,OAAO,CAAA,EAAG,sBAAsB,CAAA,EAAG,IAAA,CAAK,SAAA,CAAU;AAAA,UAChD,GAAA,EAAK,aAAA;AAAA,UACL,GAAI,SAAS,KAAA,IAAS;AAAA,YACpB,KAAA,EAAO,EAAE,OAAA,EAAS,OAAA,CAAQ,MAAM,OAAA;AAAQ;AAC1C,SAC0B,CAAC,CAAA,CAAA;AAAA,MAC/B;AACA,MAAA,OAAO,eAAA;AAAA,IACT;AAdO,IAAAA,KAAAA,CAAS,KAAA,GAAA,KAAA;AAqBT,IAAA,SAAS,OAAO,aAAA,EAAgC;AACrD,MAAA,OAAO,CAAA,OAAA,EAAU,KAAA,CAAM,aAAa,CAAC,CAAA,CAAA;AAAA,IACvC;AAFO,IAAAA,KAAAA,CAAS,MAAA,GAAA,MAAA;AAIT,IAAA,SAAS,YAAA,GAAuB;AACrC,MAAA,OAAO,uBAAA;AAAA,IACT;AAFO,IAAAA,KAAAA,CAAS,YAAA,GAAA,YAAA;AAIT,IAAA,SAAS,aAAA,GAAwB;AACtC,MAAA,OAAO,CAAA,OAAA,EAAU,cAAc,CAAA,CAAA;AAAA,IACjC;AAFO,IAAAA,KAAAA,CAAS,aAAA,GAAA,aAAA;AAAA,EAAA,CAAA,EAnCD,IAAA,GAAAF,gBAAAA,CAAA,IAAA,KAAAA,gBAAAA,CAAA,IAAA,GAAA,EAAA,CAAA,CAAA;AA8CV,EAAA,SAAS,WAAA,CACd,gBAAwB,4BAAA,EACsB;AAC9C,IAAA,OAAO,KAAK,aAAa,CAAA;AAAA,EAC3B;AAJO,EAAAA,gBAAAA,CAAS,WAAA,GAAA,WAAA;AAST,EAAA,CAAA,CAAUG,YAAAA,KAAV;AAME,IAAA,SAAS,KAAA,CACd,gBAAwB,4BAAA,EAChB;AACR,MAAA,qBAAA,CAAsB,aAAa,CAAA;AACnC,MAAA,OAAO,CAAA,EAAG,8BAA8B,CAAA,EAAG,IAAA,CAAK,SAAA,CAAU;AAAA,QACxD,GAAA,EAAK;AAAA,OACqB,CAAC,CAAA,CAAA;AAAA,IAC/B;AAPO,IAAAA,YAAAA,CAAS,KAAA,GAAA,KAAA;AAcT,IAAA,SAAS,OAAO,aAAA,EAAgC;AACrD,MAAA,OAAO,CAAA,EAAG,gBAAgB,CAAA,CAAA,EAAI,KAAA,CAAM,aAAa,CAAC,CAAA,CAAA;AAAA,IACpD;AAFO,IAAAA,YAAAA,CAAS,MAAA,GAAA,MAAA;AAIT,IAAA,SAAS,YAAA,GAAuB;AACrC,MAAA,OAAO,+BAAA;AAAA,IACT;AAFO,IAAAA,YAAAA,CAAS,YAAA,GAAA,YAAA;AAIT,IAAA,SAAS,aAAA,GAAwB;AACtC,MAAA,OAAO,CAAA,EAAG,gBAAgB,CAAA,CAAA,EAAI,YAAA,EAAc,CAAA,CAAA;AAAA,IAC9C;AAFO,IAAAA,YAAAA,CAAS,aAAA,GAAA,aAAA;AAAA,EAAA,CAAA,EA5BD,WAAA,GAAAH,gBAAAA,CAAA,WAAA,KAAAA,gBAAAA,CAAA,WAAA,GAAA,EAAA,CAAA,CAAA;AAsCV,EAAA,SAAS,OAAA,CACd,OAAA,GAAkB,4BAAA,EAClB,kBAAA,EACiD;AACjD,IAAA,MAAM,MAAA,GAAS;AAAA,MACb,MAAA,EAAQ,iCAAA;AAAA,MACR,SAAA,EAAW;AAAA,QACT,IAAA,EAAM,SAAA;AAAA,QACN,OAAA;AAAA,QACA,GAAI,kBAAA,GAAqB,EAAE,kBAAA,KAAuB;AAAC;AACrD,KACF;AACA,IAAA,MAAA,CAAO,iBAAiB,MAAA,EAAQ;AAAA,MAC9B,QAAA,EAAU;AAAA,QACR,UAAA,EAAY,KAAA;AAAA,QACZ,YAAA,EAAc,IAAA;AAAA,QACd,KAAA,EAAO,MACL,CAAA,iCAAA,EAAoC,OAAO,CAAA,EACzC,kBAAA,GACI,CAAA,oBAAA,EAAuB,IAAA,CAAK,SAAA,CAAU,kBAAkB,CAAC,CAAA,CAAA,GACzD,EACN,CAAA,EAAA;AAAA;AACJ,KACD,CAAA;AACD,IAAA,OAAO,MAAA;AAAA,EACT;AAzBO,EAAAA,gBAAAA,CAAS,OAAA,GAAA,OAAA;AA8BT,EAAA,CAAA,CAAUI,QAAAA,KAAV;AAcE,IAAA,SAAS,MAAM,OAAA,EAAgC;AACpD,MAAA,IAAI,OAAA,EAAS;AACX,QAAA,MAAM,EAAE,cAAA,EAAgB,UAAA,EAAW,GAAI,OAAA;AAEvC,QAAA,MAAM,eAAe,UAAA,EAAY,SAAA;AAIjC,QAAA,MAAM,GAAA,GACJ,YAAA,CAAa,IAAA,KAAS,MAAA,GAAS,aAAa,aAAA,GAAgB,MAAA;AAC9D,QAAA,MAAM,OAAA,GACJ,YAAA,CAAa,IAAA,KAAS,SAAA,GAAY,aAAa,OAAA,GAAU,MAAA;AAE3D,QAAA,OAAO,CAAA,EAAG,yBAAyB,CAAA,EAAG,IAAA,CAAK,SAAA,CAAU;AAAA,UACnD,GAAA,EAAK,OAAA;AAAA,UACL,GAAA;AAAA,UACA,MAAA,EAAQ;AAAA,SACqB,CAAC,CAAA,CAAA;AAAA,MAClC;AACA,MAAA,OAAO,kBAAA;AAAA,IACT;AApBO,IAAAA,QAAAA,CAAS,KAAA,GAAA,KAAA;AA2BT,IAAA,SAAS,OAAO,OAAA,EAAgC;AACrD,MAAA,OAAO,CAAA,OAAA,EAAU,KAAA,CAAM,OAAO,CAAC,CAAA,CAAA;AAAA,IACjC;AAFO,IAAAA,QAAAA,CAAS,MAAA,GAAA,MAAA;AAIT,IAAA,SAAS,YAAA,GAAuB;AACrC,MAAA,OAAO,0BAAA;AAAA,IACT;AAFO,IAAAA,QAAAA,CAAS,YAAA,GAAA,YAAA;AAIT,IAAA,SAAS,aAAA,GAAwB;AACtC,MAAA,OAAO,CAAA,OAAA,EAAU,cAAc,CAAA,CAAA;AAAA,IACjC;AAFO,IAAAA,QAAAA,CAAS,aAAA,GAAA,aAAA;AAAA,EAAA,CAAA,EAjDD,OAAA,GAAAJ,gBAAAA,CAAA,OAAA,KAAAA,gBAAAA,CAAA,OAAA,GAAA,EAAA,CAAA,CAAA;AAAA,CAAA,EA3MFA,uBAAA,KAAAA,uBAAA,GAAA,EAAA,CAAA,CAAA;;;;;;;;;;;;;;;"}