{"version":3,"file":"MockSchedulerService.cjs.js","sources":["../../src/services/MockSchedulerService.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createServiceFactory,\n  SchedulerService,\n  SchedulerServiceTaskDescriptor,\n  SchedulerServiceTaskInvocationDefinition,\n  SchedulerServiceTaskRunner,\n  SchedulerServiceTaskScheduleDefinition,\n} from '@backstage/backend-plugin-api';\nimport { createDeferred, DeferredPromise } from '@backstage/types';\n\nexport class MockSchedulerService implements SchedulerService {\n  readonly #tasks = new Map<\n    string,\n    SchedulerServiceTaskInvocationDefinition &\n      SchedulerServiceTaskScheduleDefinition & {\n        descriptor: SchedulerServiceTaskDescriptor;\n        abortControllers: AbortController;\n      }\n  >();\n  readonly #runningTasks = new Set<string>();\n  readonly #deferredTaskCompletions = new Map<string, DeferredPromise<void>>();\n\n  /**\n   * Creates a service factory for this mock scheduler instance, which can be installed in a test backend\n   */\n  factory(options?: {\n    skipTaskRunOnStartup?: boolean;\n    includeManualTasksOnStartup?: boolean;\n    includeInitialDelayedTasksOnStartup?: boolean;\n  }) {\n    return createServiceFactory({\n      service: coreServices.scheduler,\n      deps: { lifecycle: coreServices.lifecycle },\n      factory: async ({ lifecycle }) => {\n        if (!options?.skipTaskRunOnStartup) {\n          lifecycle.addStartupHook(async () => {\n            await this.#triggerAllTasks({\n              includeManualTasks: options?.includeManualTasksOnStartup,\n              includeInitialDelayedTasks:\n                options?.includeInitialDelayedTasksOnStartup,\n            });\n          });\n        }\n        lifecycle.addShutdownHook(async () => {\n          await this.#shutdownAllTasks();\n        });\n        return this;\n      },\n    });\n  }\n\n  createScheduledTaskRunner(\n    schedule: SchedulerServiceTaskScheduleDefinition,\n  ): SchedulerServiceTaskRunner {\n    return {\n      run: async task => {\n        await this.scheduleTask({ ...task, ...schedule });\n      },\n    };\n  }\n\n  async getScheduledTasks(): Promise<SchedulerServiceTaskDescriptor[]> {\n    return Array.from(this.#tasks.values()).map(({ descriptor }) => descriptor);\n  }\n\n  async scheduleTask(\n    task: SchedulerServiceTaskScheduleDefinition &\n      SchedulerServiceTaskInvocationDefinition,\n  ): Promise<void> {\n    this.#tasks.set(task.id, {\n      ...task,\n      descriptor: {\n        id: task.id,\n        scope: task.scope ?? 'global',\n        settings: { version: 1 },\n      },\n      abortControllers: new AbortController(),\n    });\n  }\n\n  async triggerTask(id: string): Promise<void> {\n    const task = this.#tasks.get(id);\n    if (!task) {\n      throw new Error(`Task ${id} not found`);\n    }\n    if (this.#runningTasks.has(id)) {\n      return;\n    }\n    this.#runningTasks.add(id);\n    try {\n      await task.fn(task.abortControllers.signal);\n      this.#deferredTaskCompletions.get(id)?.resolve();\n    } catch (error) {\n      this.#deferredTaskCompletions.get(id)?.reject(error);\n    } finally {\n      this.#deferredTaskCompletions.delete(id);\n      this.#runningTasks.delete(id);\n    }\n  }\n\n  /**\n   * Trigger all tasks that match the given options, and wait for them to complete.\n   *\n   * @param options - The options to filter the tasks to trigger\n   */\n  async #triggerAllTasks(options?: {\n    scope?: 'all' | 'global' | 'local';\n    includeInitialDelayedTasks?: boolean;\n    includeManualTasks?: boolean;\n  }): Promise<void> {\n    const {\n      scope = 'all',\n      includeManualTasks = false,\n      includeInitialDelayedTasks = false,\n    } = options ?? {};\n\n    const selectedTaskIds = new Array<string>();\n    for (const task of this.#tasks.values()) {\n      if (task.initialDelay && !includeInitialDelayedTasks) {\n        continue;\n      }\n      if (\n        'trigger' in task.frequency &&\n        task.frequency.trigger === 'manual' &&\n        !includeManualTasks\n      ) {\n        continue;\n      }\n      if (scope === 'all' || scope === task.scope) {\n        selectedTaskIds.push(task.id);\n      }\n    }\n\n    await Promise.all(selectedTaskIds.map(id => this.triggerTask(id)));\n  }\n\n  async #shutdownAllTasks() {\n    for (const task of this.#tasks.values()) {\n      task.abortControllers.abort();\n    }\n  }\n\n  /**\n   * Wait for the task with the given ID to complete.\n   *\n   * If the task has not yet been scheduled or started, this will wait for it to be scheduled, started, and completed\n   *\n   * @param id - The task ID to wait for\n   * @returns A promise that resolves when the task is completed\n   */\n  async waitForTask(id: string): Promise<void> {\n    const existing = this.#deferredTaskCompletions.get(id);\n    if (existing) {\n      return existing;\n    }\n    const deferred = createDeferred<void>();\n    this.#deferredTaskCompletions.set(id, deferred);\n    return deferred;\n  }\n}\n"],"names":["createServiceFactory","coreServices","createDeferred"],"mappings":"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"}