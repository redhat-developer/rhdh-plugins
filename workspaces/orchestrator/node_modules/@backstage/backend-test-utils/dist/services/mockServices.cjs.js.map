{"version":3,"file":"mockServices.cjs.js","sources":["../../src/services/mockServices.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { auditorServiceFactory } from '@backstage/backend-defaults/auditor';\nimport { cacheServiceFactory } from '@backstage/backend-defaults/cache';\nimport { databaseServiceFactory } from '@backstage/backend-defaults/database';\nimport { HostDiscovery } from '@backstage/backend-defaults/discovery';\nimport { httpRouterServiceFactory } from '@backstage/backend-defaults/httpRouter';\nimport { lifecycleServiceFactory } from '@backstage/backend-defaults/lifecycle';\nimport { loggerServiceFactory } from '@backstage/backend-defaults/logger';\nimport { permissionsServiceFactory } from '@backstage/backend-defaults/permissions';\nimport { permissionsRegistryServiceFactory } from '@backstage/backend-defaults/permissionsRegistry';\nimport { rootHealthServiceFactory } from '@backstage/backend-defaults/rootHealth';\nimport { rootHttpRouterServiceFactory } from '@backstage/backend-defaults/rootHttpRouter';\nimport { rootLifecycleServiceFactory } from '@backstage/backend-defaults/rootLifecycle';\nimport { urlReaderServiceFactory } from '@backstage/backend-defaults/urlReader';\nimport {\n  AuthService,\n  BackstageCredentials,\n  BackstageUserInfo,\n  DatabaseService,\n  DiscoveryService,\n  HttpAuthService,\n  LoggerService,\n  PermissionsService,\n  RootConfigService,\n  SchedulerService,\n  ServiceFactory,\n  ServiceRef,\n  UserInfoService,\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { ConfigReader } from '@backstage/config';\nimport { EventsService, eventsServiceRef } from '@backstage/plugin-events-node';\nimport { AuthorizeResult } from '@backstage/plugin-permission-common';\nimport { JsonObject } from '@backstage/types';\nimport { Knex } from 'knex';\nimport { MockAuthService } from './MockAuthService';\nimport { MockHttpAuthService } from './MockHttpAuthService';\nimport { MockRootLoggerService } from './MockRootLoggerService';\nimport { MockUserInfoService } from './MockUserInfoService';\nimport { mockCredentials } from './mockCredentials';\nimport { MockEventsService } from './MockEventsService';\nimport { MockPermissionsService } from './MockPermissionsService';\nimport { simpleMock } from './simpleMock';\nimport { MockSchedulerService } from './MockSchedulerService';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { ObservableConfigProxy } from '../../../config-loader/src/sources/ObservableConfigProxy';\n\n/** @internal */\nfunction createLoggerMock() {\n  return {\n    child: jest.fn().mockImplementation(createLoggerMock),\n    debug: jest.fn(),\n    error: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n  };\n}\n\n/** @internal */\nfunction simpleFactoryWithOptions<\n  TService,\n  TScope extends 'root' | 'plugin',\n  TOptions extends [options?: object] = [],\n>(\n  ref: ServiceRef<TService, TScope>,\n  factory: (...options: TOptions) => TService,\n): (...options: TOptions) => ServiceFactory<TService, TScope> {\n  const factoryWithOptions = (...options: TOptions) =>\n    createServiceFactory({\n      service: ref as ServiceRef<TService, any>,\n      deps: {},\n      async factory() {\n        return factory(...options);\n      },\n    });\n  return Object.assign(\n    factoryWithOptions,\n    factoryWithOptions(...([undefined] as unknown as TOptions)),\n  ) as ServiceFactory<TService, TScope> &\n    ((...options: TOptions) => ServiceFactory<TService, TScope>);\n}\n\n/**\n * Mock implementations of the core services, to be used in tests.\n *\n * @public\n * @remarks\n *\n * There are some variations among the services depending on what needs tests\n * might have, but overall there are three main usage patterns:\n *\n * 1. Creating an actual fake service instance, often with a simplified version\n * of functionality, by calling the mock service itself as a function.\n *\n * ```ts\n * // The function often accepts parameters that control its behavior\n * const foo = mockServices.foo();\n * ```\n *\n * 2. Creating a mock service, where all methods are replaced with jest mocks, by\n * calling the service's `mock` function.\n *\n * ```ts\n * // You can optionally supply a subset of its methods to implement\n * const foo = mockServices.foo.mock({\n *   someMethod: () => 'mocked result',\n * });\n * // After exercising your test, you can make assertions on the mock:\n * expect(foo.someMethod).toHaveBeenCalledTimes(2);\n * expect(foo.otherMethod).toHaveBeenCalledWith(testData);\n * ```\n *\n * 3. Creating a service factory that behaves similarly to the mock as per above.\n *\n * ```ts\n * await startTestBackend({\n *   features: [\n *     mockServices.foo.factory({\n *       someMethod: () => 'mocked result',\n *     })\n *   ],\n * });\n * ```\n */\nexport namespace mockServices {\n  export function rootConfig(\n    options?: rootConfig.Options,\n  ): RootConfigService & { update(options: { data: JsonObject }): void } {\n    const config = ObservableConfigProxy.create(new AbortController());\n    config.setConfig(new ConfigReader(options?.data ?? {}, 'mock-config'));\n    return Object.assign(config, {\n      update({ data }: { data: JsonObject }): void {\n        config.setConfig(new ConfigReader(data, 'mock-config'));\n      },\n    });\n  }\n  export namespace rootConfig {\n    export type Options = { data?: JsonObject };\n\n    export const factory = simpleFactoryWithOptions(\n      coreServices.rootConfig,\n      rootConfig,\n    );\n    export const mock = simpleMock(coreServices.rootConfig, () => ({\n      get: jest.fn(),\n      getBoolean: jest.fn(),\n      getConfig: jest.fn(),\n      getConfigArray: jest.fn(),\n      getNumber: jest.fn(),\n      getOptional: jest.fn(),\n      getOptionalBoolean: jest.fn(),\n      getOptionalConfig: jest.fn(),\n      getOptionalConfigArray: jest.fn(),\n      getOptionalNumber: jest.fn(),\n      getOptionalString: jest.fn(),\n      getOptionalStringArray: jest.fn(),\n      getString: jest.fn(),\n      getStringArray: jest.fn(),\n      has: jest.fn(),\n      keys: jest.fn(),\n    }));\n  }\n\n  export function rootLogger(options?: rootLogger.Options): LoggerService {\n    return MockRootLoggerService.create(options);\n  }\n  export namespace rootLogger {\n    export type Options = {\n      level?: 'none' | 'error' | 'warn' | 'info' | 'debug';\n    };\n\n    export const factory = simpleFactoryWithOptions(\n      coreServices.rootLogger,\n      rootLogger,\n    );\n    export const mock = simpleMock(coreServices.rootLogger, () => ({\n      child: jest.fn(),\n      debug: jest.fn(),\n      error: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n    }));\n  }\n\n  export namespace auditor {\n    export const factory = () => auditorServiceFactory;\n\n    export const mock = simpleMock(coreServices.auditor, () => ({\n      createEvent: jest.fn(async _ => {\n        return {\n          success: jest.fn(),\n          fail: jest.fn(),\n        };\n      }),\n    }));\n  }\n\n  export function auth(options?: {\n    pluginId?: string;\n    disableDefaultAuthPolicy?: boolean;\n  }): AuthService {\n    return new MockAuthService({\n      pluginId: options?.pluginId ?? 'test',\n      disableDefaultAuthPolicy: Boolean(options?.disableDefaultAuthPolicy),\n    });\n  }\n  export namespace auth {\n    export const factory = () =>\n      createServiceFactory({\n        service: coreServices.auth,\n        deps: {\n          plugin: coreServices.pluginMetadata,\n          config: coreServices.rootConfig,\n        },\n        factory({ plugin, config }) {\n          const disableDefaultAuthPolicy = Boolean(\n            config.getOptionalBoolean(\n              'backend.auth.dangerouslyDisableDefaultAuthPolicy',\n            ),\n          );\n          return new MockAuthService({\n            pluginId: plugin.getId(),\n            disableDefaultAuthPolicy,\n          });\n        },\n      });\n    export const mock = simpleMock(coreServices.auth, () => ({\n      authenticate: jest.fn(),\n      getNoneCredentials: jest.fn(),\n      getOwnServiceCredentials: jest.fn(),\n      isPrincipal: jest.fn() as any,\n      getPluginRequestToken: jest.fn(),\n      getLimitedUserToken: jest.fn(),\n      listPublicServiceKeys: jest.fn(),\n    }));\n  }\n\n  export function discovery(): DiscoveryService {\n    return HostDiscovery.fromConfig(\n      new ConfigReader({\n        backend: {\n          // Invalid port to make sure that requests are always mocked\n          baseUrl: 'http://localhost:0',\n          listen: { port: 0 },\n        },\n      }),\n    );\n  }\n  export namespace discovery {\n    export const factory = () =>\n      createServiceFactory({\n        service: coreServices.discovery,\n        deps: {},\n        factory: () => discovery(),\n      });\n    export const mock = simpleMock(coreServices.discovery, () => ({\n      getBaseUrl: jest.fn(),\n      getExternalBaseUrl: jest.fn(),\n    }));\n  }\n\n  /**\n   * Creates a mock implementation of the `HttpAuthService`.\n   *\n   * By default all requests without credentials are treated as requests from\n   * the default mock user principal. This behavior can be configured with the\n   * `defaultCredentials` option.\n   */\n  export function httpAuth(options?: {\n    pluginId?: string;\n    /**\n     * The default credentials to use if there are no credentials present in the\n     * incoming request.\n     *\n     * By default all requests without credentials are treated as authenticated\n     * as the default mock user as returned from `mockCredentials.user()`.\n     */\n    defaultCredentials?: BackstageCredentials;\n  }): HttpAuthService {\n    return new MockHttpAuthService(\n      options?.pluginId ?? 'test',\n      options?.defaultCredentials ?? mockCredentials.user(),\n    );\n  }\n  export namespace httpAuth {\n    /**\n     * Creates a mock service factory for the `HttpAuthService`.\n     *\n     * By default all requests without credentials are treated as requests from\n     * the default mock user principal. This behavior can be configured with the\n     * `defaultCredentials` option.\n     */\n    export const factory = (options?: {\n      defaultCredentials?: BackstageCredentials;\n    }) =>\n      createServiceFactory({\n        service: coreServices.httpAuth,\n        deps: { plugin: coreServices.pluginMetadata },\n        factory: ({ plugin }) =>\n          new MockHttpAuthService(\n            plugin.getId(),\n            options?.defaultCredentials ?? mockCredentials.user(),\n          ),\n      });\n    export const mock = simpleMock(coreServices.httpAuth, () => ({\n      credentials: jest.fn(),\n      issueUserCookie: jest.fn(),\n    }));\n  }\n\n  /**\n   * Creates a mock implementation of the `UserInfoService`.\n   *\n   * By default it extracts the user's entity ref from a user principal and\n   * returns that as the only ownership entity ref, but this can be overridden\n   * by passing in a custom set of user info.\n   */\n  export function userInfo(\n    customInfo?: Partial<BackstageUserInfo>,\n  ): UserInfoService {\n    return new MockUserInfoService(customInfo);\n  }\n  export namespace userInfo {\n    /**\n     * Creates a mock service factory for the `UserInfoService`.\n     *\n     * By default it extracts the user's entity ref from a user principal and\n     * returns that as the only ownership entity ref.\n     */\n    export const factory = () =>\n      createServiceFactory({\n        service: coreServices.userInfo,\n        deps: {},\n        factory() {\n          return new MockUserInfoService();\n        },\n      });\n    export const mock = simpleMock(coreServices.userInfo, () => ({\n      getUserInfo: jest.fn(),\n    }));\n  }\n\n  // TODO(Rugvip): Not all core services have implementations available here yet.\n  //               some may need a bit more refactoring for it to be simpler to\n  //               re-implement functioning mock versions here.\n  export namespace cache {\n    export const factory = () => cacheServiceFactory;\n    export const mock = simpleMock(coreServices.cache, () => ({\n      delete: jest.fn(),\n      get: jest.fn(),\n      set: jest.fn(),\n      withOptions: jest.fn(),\n    }));\n  }\n\n  /**\n   * Creates a mock implementation of the\n   * {@link @backstage/backend-plugin-api#coreServices.database}. Just returns\n   * the given `knex` instance, which is useful in combination with the\n   * {@link TestDatabases} facility.\n   */\n  export function database(options: {\n    knex: Knex;\n    migrations?: { skip?: boolean };\n  }): DatabaseService {\n    return {\n      getClient: async () => options.knex,\n      migrations: options.migrations,\n    };\n  }\n  export namespace database {\n    /**\n     * Creates a mock factory for the\n     * {@link @backstage/backend-plugin-api#coreServices.database}. Just returns\n     * the given `knex` instance if you supply one, which is useful in\n     * combination with the {@link TestDatabases} facility. Otherwise, it\n     * returns the regular default database factory which reads config settings.\n     */\n    export const factory = (options?: {\n      knex: Knex;\n      migrations?: { skip?: boolean };\n    }) =>\n      options\n        ? createServiceFactory({\n            service: coreServices.database,\n            deps: {},\n            factory: () => database(options),\n          })\n        : databaseServiceFactory;\n    /**\n     * Creates a mock of the\n     * {@link @backstage/backend-plugin-api#coreServices.database}, optionally\n     * with some given method implementations.\n     */\n    export const mock = simpleMock(coreServices.database, () => ({\n      getClient: jest.fn(),\n    }));\n  }\n\n  export namespace rootHealth {\n    export const factory = () => rootHealthServiceFactory;\n    export const mock = simpleMock(coreServices.rootHealth, () => ({\n      getLiveness: jest.fn(),\n      getReadiness: jest.fn(),\n    }));\n  }\n\n  export namespace httpRouter {\n    export const factory = () => httpRouterServiceFactory;\n    export const mock = simpleMock(coreServices.httpRouter, () => ({\n      use: jest.fn(),\n      addAuthPolicy: jest.fn(),\n    }));\n  }\n\n  export namespace rootHttpRouter {\n    export const factory = () => rootHttpRouterServiceFactory();\n    export const mock = simpleMock(coreServices.rootHttpRouter, () => ({\n      use: jest.fn(),\n    }));\n  }\n\n  export namespace lifecycle {\n    export const factory = () => lifecycleServiceFactory;\n    export const mock = simpleMock(coreServices.lifecycle, () => ({\n      addShutdownHook: jest.fn(),\n      addStartupHook: jest.fn(),\n    }));\n  }\n\n  export namespace logger {\n    export const factory = () => loggerServiceFactory;\n    export const mock = simpleMock(coreServices.logger, () =>\n      createLoggerMock(),\n    );\n  }\n\n  /**\n   * Creates a functional mock implementation of the\n   * {@link @backstage/backend-plugin-api#PermissionsService}.\n   */\n  export function permissions(options?: {\n    result: AuthorizeResult.ALLOW | AuthorizeResult.DENY;\n  }): PermissionsService {\n    return new MockPermissionsService(options);\n  }\n  export namespace permissions {\n    /**\n     * Creates a mock factory for the\n     * {@link @backstage/backend-plugin-api#coreServices.permissions}. Just\n     * returns the given `result` if you supply one. Otherwise, it returns the\n     * regular default permissions factory.\n     */\n    export const factory = (options?: {\n      result: AuthorizeResult.ALLOW | AuthorizeResult.DENY;\n    }) =>\n      options?.result\n        ? createServiceFactory({\n            service: coreServices.permissions,\n            deps: {},\n            factory: () => new MockPermissionsService(options),\n          })\n        : permissionsServiceFactory;\n    /**\n     * Creates a mock of the\n     * {@link @backstage/backend-plugin-api#coreServices.permissions},\n     * optionally with some given method implementations.\n     */\n    export const mock = simpleMock(coreServices.permissions, () => ({\n      authorize: jest.fn(),\n      authorizeConditional: jest.fn(),\n    }));\n  }\n\n  export namespace permissionsRegistry {\n    export const factory = () => permissionsRegistryServiceFactory;\n    export const mock = simpleMock(coreServices.permissionsRegistry, () => ({\n      addPermissionRules: jest.fn(),\n      addPermissions: jest.fn(),\n      addResourceType: jest.fn(),\n      getPermissionRuleset: jest.fn(),\n    }));\n  }\n\n  export namespace rootLifecycle {\n    export const factory = () => rootLifecycleServiceFactory;\n    export const mock = simpleMock(coreServices.rootLifecycle, () => ({\n      addShutdownHook: jest.fn(),\n      addBeforeShutdownHook: jest.fn(),\n      addStartupHook: jest.fn(),\n    }));\n  }\n\n  export function scheduler(): SchedulerService {\n    return new MockSchedulerService();\n  }\n  export namespace scheduler {\n    export const factory = (options?: {\n      skipTaskRunOnStartup?: boolean;\n      includeManualTasksOnStartup?: boolean;\n      includeInitialDelayedTasksOnStartup?: boolean;\n    }) => new MockSchedulerService().factory(options);\n    export const mock = simpleMock(coreServices.scheduler, () => ({\n      createScheduledTaskRunner: jest.fn(),\n      getScheduledTasks: jest.fn(),\n      scheduleTask: jest.fn(),\n      triggerTask: jest.fn(),\n    }));\n  }\n\n  export namespace urlReader {\n    export const factory = () => urlReaderServiceFactory;\n    export const mock = simpleMock(coreServices.urlReader, () => ({\n      readTree: jest.fn(),\n      readUrl: jest.fn(),\n      search: jest.fn(),\n    }));\n  }\n\n  /**\n   * Creates a functional mock implementation of the\n   * {@link @backstage/backend-events-node#eventsServiceRef}.\n   */\n  export function events(): EventsService {\n    return new MockEventsService();\n  }\n  export namespace events {\n    /**\n     * Creates a functional mock factory for the\n     * {@link @backstage/backend-events-node#eventsServiceRef}.\n     */\n    export const factory = simpleFactoryWithOptions(eventsServiceRef, events);\n    /**\n     * Creates a mock of the\n     * {@link @backstage/backend-events-node#eventsServiceRef}, optionally\n     * with some given method implementations.\n     */\n    export const mock = simpleMock(eventsServiceRef, () => ({\n      publish: jest.fn(),\n      subscribe: jest.fn(),\n    }));\n  }\n}\n"],"names":["createServiceFactory","mockServices","config","ObservableConfigProxy","ConfigReader","rootConfig","coreServices","simpleMock","MockRootLoggerService","rootLogger","auditor","auditorServiceFactory","MockAuthService","auth","discovery","HostDiscovery","MockHttpAuthService","mockCredentials","httpAuth","MockUserInfoService","userInfo","cache","cacheServiceFactory","database","databaseServiceFactory","rootHealth","rootHealthServiceFactory","httpRouter","httpRouterServiceFactory","rootHttpRouter","rootHttpRouterServiceFactory","lifecycle","lifecycleServiceFactory","logger","loggerServiceFactory","permissions","MockPermissionsService","permissionsServiceFactory","permissionsRegistry","permissionsRegistryServiceFactory","rootLifecycle","rootLifecycleServiceFactory","MockSchedulerService","scheduler","urlReader","urlReaderServiceFactory","MockEventsService","events","eventsServiceRef"],"mappings":"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"}