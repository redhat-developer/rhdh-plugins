{"version":3,"file":"ServiceRegistry.cjs.js","sources":["../../../../../backend-app-api/src/wiring/ServiceRegistry.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ServiceFactory,\n  ServiceRef,\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { ConflictError, stringifyError } from '@backstage/errors';\n// Direct internal import to avoid duplication\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { InternalServiceFactory } from '../../../backend-plugin-api/src/services/system/types';\nimport { DependencyGraph } from '../lib/DependencyGraph';\n/**\n * Keep in sync with `@backstage/backend-plugin-api/src/services/system/types.ts`\n * @internal\n */\nexport type InternalServiceRef = ServiceRef<unknown> & {\n  __defaultFactory?: (\n    service: ServiceRef<unknown>,\n  ) => Promise<ServiceFactory | (() => ServiceFactory)>;\n};\n\nfunction toInternalServiceFactory<TService, TScope extends 'plugin' | 'root'>(\n  factory: ServiceFactory<TService, TScope>,\n): InternalServiceFactory<TService, TScope> {\n  const f = factory as InternalServiceFactory<TService, TScope>;\n  if (f.$$type !== '@backstage/BackendFeature') {\n    throw new Error(`Invalid service factory, bad type '${f.$$type}'`);\n  }\n  if (f.version !== 'v1') {\n    throw new Error(`Invalid service factory, bad version '${f.version}'`);\n  }\n  return f;\n}\n\nfunction createPluginMetadataServiceFactory(pluginId: string) {\n  return createServiceFactory({\n    service: coreServices.pluginMetadata,\n    deps: {},\n    factory: async () => ({ getId: () => pluginId }),\n  });\n}\n\nexport class ServiceRegistry {\n  static create(factories: Array<ServiceFactory>): ServiceRegistry {\n    const factoryMap = new Map<string, InternalServiceFactory[]>();\n    for (const factory of factories) {\n      if (factory.service.multiton) {\n        const existing = factoryMap.get(factory.service.id) ?? [];\n        factoryMap.set(\n          factory.service.id,\n          existing.concat(toInternalServiceFactory(factory)),\n        );\n      } else {\n        factoryMap.set(factory.service.id, [toInternalServiceFactory(factory)]);\n      }\n    }\n    const registry = new ServiceRegistry(factoryMap);\n    registry.checkForCircularDeps();\n    return registry;\n  }\n\n  readonly #providedFactories: Map<string, InternalServiceFactory[]>;\n  readonly #loadedDefaultFactories: Map<\n    Function,\n    Promise<InternalServiceFactory>\n  >;\n  readonly #implementations: Map<\n    InternalServiceFactory,\n    {\n      context: Promise<unknown>;\n      byPlugin: Map<string, Promise<unknown>>;\n    }\n  >;\n  readonly #rootServiceImplementations = new Map<\n    InternalServiceFactory,\n    Promise<unknown>\n  >();\n  readonly #addedFactoryIds = new Set<string>();\n  readonly #instantiatedFactories = new Set<string>();\n\n  private constructor(factories: Map<string, InternalServiceFactory[]>) {\n    this.#providedFactories = factories;\n    this.#loadedDefaultFactories = new Map();\n    this.#implementations = new Map();\n  }\n\n  #resolveFactory(\n    ref: ServiceRef<unknown>,\n    pluginId: string,\n  ): Promise<InternalServiceFactory[]> | undefined {\n    // Special case handling of the plugin metadata service, generating a custom factory for it each time\n    if (ref.id === coreServices.pluginMetadata.id) {\n      return Promise.resolve([\n        toInternalServiceFactory(createPluginMetadataServiceFactory(pluginId)),\n      ]);\n    }\n\n    let resolvedFactory:\n      | Promise<InternalServiceFactory[]>\n      | InternalServiceFactory[]\n      | undefined = this.#providedFactories.get(ref.id);\n    const { __defaultFactory: defaultFactory } = ref as InternalServiceRef;\n    if (!resolvedFactory && !defaultFactory) {\n      return undefined;\n    }\n\n    if (!resolvedFactory) {\n      let loadedFactory = this.#loadedDefaultFactories.get(defaultFactory!);\n      if (!loadedFactory) {\n        loadedFactory = Promise.resolve()\n          .then(() => defaultFactory!(ref))\n          .then(f =>\n            toInternalServiceFactory(typeof f === 'function' ? f() : f),\n          );\n        this.#loadedDefaultFactories.set(defaultFactory!, loadedFactory);\n      }\n      resolvedFactory = loadedFactory.then(\n        factory => [factory],\n        error => {\n          throw new Error(\n            `Failed to instantiate service '${\n              ref.id\n            }' because the default factory loader threw an error, ${stringifyError(\n              error,\n            )}`,\n          );\n        },\n      );\n    }\n\n    return Promise.resolve(resolvedFactory);\n  }\n\n  #checkForMissingDeps(factory: InternalServiceFactory, pluginId: string) {\n    const missingDeps = Object.values(factory.deps).filter(ref => {\n      if (ref.id === coreServices.pluginMetadata.id) {\n        return false;\n      }\n      if (this.#providedFactories.get(ref.id)) {\n        return false;\n      }\n      if (ref.multiton) {\n        return false;\n      }\n\n      return !(ref as InternalServiceRef).__defaultFactory;\n    });\n\n    if (missingDeps.length) {\n      const missing = missingDeps.map(r => `'${r.id}'`).join(', ');\n      throw new Error(\n        `Failed to instantiate service '${factory.service.id}' for '${pluginId}' because the following dependent services are missing: ${missing}`,\n      );\n    }\n  }\n\n  checkForCircularDeps(): void {\n    const graph = DependencyGraph.fromIterable(\n      Array.from(this.#providedFactories).map(([serviceId, factories]) => ({\n        value: serviceId,\n        provides: [serviceId],\n        consumes: factories.flatMap(factory =>\n          Object.values(factory.deps).map(d => d.id),\n        ),\n      })),\n    );\n    const circularDependencies = Array.from(graph.detectCircularDependencies());\n\n    if (circularDependencies.length) {\n      const cycles = circularDependencies\n        .map(c => c.map(id => `'${id}'`).join(' -> '))\n        .join('\\n  ');\n\n      throw new ConflictError(`Circular dependencies detected:\\n  ${cycles}`);\n    }\n  }\n\n  hasBeenAdded(ref: ServiceRef<any>) {\n    if (ref.id === coreServices.pluginMetadata.id) {\n      return true;\n    }\n    return this.#addedFactoryIds.has(ref.id);\n  }\n\n  add(factory: ServiceFactory) {\n    const factoryId = factory.service.id;\n    if (factoryId === coreServices.pluginMetadata.id) {\n      throw new Error(\n        `The ${coreServices.pluginMetadata.id} service cannot be overridden`,\n      );\n    }\n\n    if (this.#instantiatedFactories.has(factoryId)) {\n      throw new Error(\n        `Unable to set service factory with id ${factoryId}, service has already been instantiated`,\n      );\n    }\n\n    if (factory.service.multiton) {\n      const newFactories = (\n        this.#providedFactories.get(factoryId) ?? []\n      ).concat(toInternalServiceFactory(factory));\n      this.#providedFactories.set(factoryId, newFactories);\n    } else {\n      if (this.#addedFactoryIds.has(factoryId)) {\n        throw new Error(\n          `Duplicate service implementations provided for ${factoryId}`,\n        );\n      }\n\n      this.#addedFactoryIds.add(factoryId);\n      this.#providedFactories.set(factoryId, [\n        toInternalServiceFactory(factory),\n      ]);\n    }\n  }\n\n  async initializeEagerServicesWithScope(\n    scope: 'root' | 'plugin',\n    pluginId: string = 'root',\n  ) {\n    for (const [factory] of this.#providedFactories.values()) {\n      if (factory.service.scope === scope) {\n        // Root-scoped services are eager by default, plugin-scoped are lazy by default\n        if (scope === 'root' && factory.initialization !== 'lazy') {\n          await this.get(factory.service, pluginId);\n        } else if (scope === 'plugin' && factory.initialization === 'always') {\n          await this.get(factory.service, pluginId);\n        }\n      }\n    }\n  }\n\n  get<T, TInstances extends 'singleton' | 'multiton'>(\n    ref: ServiceRef<T, 'plugin' | 'root', TInstances>,\n    pluginId: string,\n  ): Promise<TInstances extends 'multiton' ? T[] : T> | undefined {\n    this.#instantiatedFactories.add(ref.id);\n\n    const resolvedFactory = this.#resolveFactory(ref, pluginId);\n\n    if (!resolvedFactory) {\n      return ref.multiton\n        ? (Promise.resolve([]) as\n            | Promise<TInstances extends 'multiton' ? T[] : T>\n            | undefined)\n        : undefined;\n    }\n\n    return resolvedFactory\n      .then(factories => {\n        return Promise.all(\n          factories.map(factory => {\n            if (factory.service.scope === 'root') {\n              let existing = this.#rootServiceImplementations.get(factory);\n              if (!existing) {\n                this.#checkForMissingDeps(factory, pluginId);\n                const rootDeps = new Array<\n                  Promise<[name: string, impl: unknown]>\n                >();\n\n                for (const [name, serviceRef] of Object.entries(factory.deps)) {\n                  if (serviceRef.scope !== 'root') {\n                    throw new Error(\n                      `Failed to instantiate 'root' scoped service '${ref.id}' because it depends on '${serviceRef.scope}' scoped service '${serviceRef.id}'.`,\n                    );\n                  }\n                  const target = this.get(serviceRef, pluginId)!;\n                  rootDeps.push(target.then(impl => [name, impl]));\n                }\n\n                existing = Promise.all(rootDeps).then(entries =>\n                  factory.factory(Object.fromEntries(entries), undefined),\n                );\n                this.#rootServiceImplementations.set(factory, existing);\n              }\n              return existing as Promise<T>;\n            }\n\n            let implementation = this.#implementations.get(factory);\n            if (!implementation) {\n              this.#checkForMissingDeps(factory, pluginId);\n              const rootDeps = new Array<\n                Promise<[name: string, impl: unknown]>\n              >();\n\n              for (const [name, serviceRef] of Object.entries(factory.deps)) {\n                if (serviceRef.scope === 'root') {\n                  const target = this.get(serviceRef, pluginId)!;\n                  rootDeps.push(target.then(impl => [name, impl]));\n                }\n              }\n\n              implementation = {\n                context: Promise.all(rootDeps)\n                  .then(entries =>\n                    factory.createRootContext?.(Object.fromEntries(entries)),\n                  )\n                  .catch(error => {\n                    const cause = stringifyError(error);\n                    throw new Error(\n                      `Failed to instantiate service '${ref.id}' because createRootContext threw an error, ${cause}`,\n                    );\n                  }),\n                byPlugin: new Map(),\n              };\n\n              this.#implementations.set(factory, implementation);\n            }\n\n            let result = implementation.byPlugin.get(pluginId) as Promise<any>;\n            if (!result) {\n              const allDeps = new Array<\n                Promise<[name: string, impl: unknown]>\n              >();\n\n              for (const [name, serviceRef] of Object.entries(factory.deps)) {\n                const target = this.get(serviceRef, pluginId)!;\n                allDeps.push(target.then(impl => [name, impl]));\n              }\n\n              result = implementation.context\n                .then(context =>\n                  Promise.all(allDeps).then(entries =>\n                    factory.factory(Object.fromEntries(entries), context),\n                  ),\n                )\n                .catch(error => {\n                  const cause = stringifyError(error);\n                  throw new Error(\n                    `Failed to instantiate service '${ref.id}' for '${pluginId}' because the factory function threw an error, ${cause}`,\n                  );\n                });\n              implementation.byPlugin.set(pluginId, result);\n            }\n            return result;\n          }),\n        );\n      })\n      .then(results => (ref.multiton ? results : results[0]));\n  }\n}\n"],"names":["createServiceFactory","coreServices","stringifyError","DependencyGraph","ConflictError"],"mappings":"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"}