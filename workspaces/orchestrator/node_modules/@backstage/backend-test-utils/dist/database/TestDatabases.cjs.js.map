{"version":3,"file":"TestDatabases.cjs.js","sources":["../../src/database/TestDatabases.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { isDockerDisabledForTests } from '../util/isDockerDisabledForTests';\nimport { MysqlEngine } from './mysql';\nimport { PostgresEngine } from './postgres';\nimport { SqliteEngine } from './sqlite';\nimport {\n  Engine,\n  TestDatabaseId,\n  TestDatabaseProperties,\n  allDatabases,\n} from './types';\n\n/**\n * Encapsulates the creation of ephemeral test database instances for use\n * inside unit or integration tests.\n *\n * @public\n */\nexport class TestDatabases {\n  private readonly engineFactoryByDriver: Record<\n    string,\n    (properties: TestDatabaseProperties) => Promise<Engine>\n  > = {\n    pg: PostgresEngine.create,\n    mysql: MysqlEngine.create,\n    mysql2: MysqlEngine.create,\n    'better-sqlite3': SqliteEngine.create,\n    sqlite3: SqliteEngine.create,\n  };\n  private readonly engineByTestDatabaseId: Map<string, Engine>;\n  private readonly supportedIds: TestDatabaseId[];\n  private static defaultIds?: TestDatabaseId[];\n\n  /**\n   * Creates an empty `TestDatabases` instance, and sets up Jest to clean up\n   * all of its acquired resources after all tests finish.\n   *\n   * You typically want to create just a single instance like this at the top\n   * of your test file or `describe` block, and then call `init` many times on\n   * that instance inside the individual tests. Spinning up a \"physical\"\n   * database instance takes a considerable amount of time, slowing down tests.\n   * But initializing a new logical database inside that instance using `init`\n   * is very fast.\n   */\n  static create(options?: {\n    ids?: TestDatabaseId[];\n    disableDocker?: boolean;\n  }): TestDatabases {\n    const ids = options?.ids;\n    const disableDocker = options?.disableDocker ?? isDockerDisabledForTests();\n\n    let testDatabaseIds: TestDatabaseId[];\n    if (ids) {\n      testDatabaseIds = ids;\n    } else if (TestDatabases.defaultIds) {\n      testDatabaseIds = TestDatabases.defaultIds;\n    } else {\n      testDatabaseIds = Object.keys(allDatabases) as TestDatabaseId[];\n    }\n\n    const supportedIds = testDatabaseIds.filter(id => {\n      const properties = allDatabases[id];\n      if (!properties) {\n        return false;\n      }\n      // If the caller has set up the env with an explicit connection string,\n      // we'll assume that this database will work\n      if (\n        properties.connectionStringEnvironmentVariableName &&\n        process.env[properties.connectionStringEnvironmentVariableName]\n      ) {\n        return true;\n      }\n      // If the database doesn't require docker at all, there's nothing to worry\n      // about\n      if (!properties.dockerImageName) {\n        return true;\n      }\n      // If the database requires docker, but docker is disabled, we will fail.\n      if (disableDocker) {\n        return false;\n      }\n      return true;\n    });\n\n    const databases = new TestDatabases(supportedIds);\n\n    if (supportedIds.length > 0) {\n      afterAll(async () => {\n        await databases.shutdown();\n      });\n    }\n\n    return databases;\n  }\n\n  static setDefaults(options: { ids?: TestDatabaseId[] }) {\n    TestDatabases.defaultIds = options.ids;\n  }\n\n  private constructor(supportedIds: TestDatabaseId[]) {\n    this.engineByTestDatabaseId = new Map();\n    this.supportedIds = supportedIds;\n  }\n\n  supports(id: TestDatabaseId): boolean {\n    return this.supportedIds.includes(id);\n  }\n\n  eachSupportedId(): [TestDatabaseId][] {\n    return this.supportedIds.map(id => [id]);\n  }\n\n  /**\n   * Returns a fresh, unique, empty logical database on an instance of the\n   * given database ID platform.\n   *\n   * @param id - The ID of the database platform to use, e.g. 'POSTGRES_13'\n   * @returns A `Knex` connection object\n   */\n  async init(id: TestDatabaseId): Promise<Knex> {\n    const properties = allDatabases[id];\n    if (!properties) {\n      const candidates = Object.keys(allDatabases).join(', ');\n      throw new Error(\n        `Unknown test database ${id}, possible values are ${candidates}`,\n      );\n    }\n    if (!this.supportedIds.includes(id)) {\n      const candidates = this.supportedIds.join(', ');\n      throw new Error(\n        `Unsupported test database ${id} for this environment, possible values are ${candidates}`,\n      );\n    }\n\n    let engine = this.engineByTestDatabaseId.get(id);\n    if (!engine) {\n      const factory = this.engineFactoryByDriver[properties.driver];\n      if (!factory) {\n        throw new Error(`Unknown database driver ${properties.driver}`);\n      }\n      engine = await factory(properties);\n      this.engineByTestDatabaseId.set(id, engine);\n    }\n\n    return await engine.createDatabaseInstance();\n  }\n\n  private async shutdown() {\n    const engines = [...this.engineByTestDatabaseId.values()];\n    this.engineByTestDatabaseId.clear();\n\n    for (const engine of engines) {\n      try {\n        await engine.shutdown();\n      } catch (error) {\n        console.warn(`TestDatabases: Failed to shutdown engine`, {\n          engine,\n          error,\n        });\n      }\n    }\n  }\n}\n"],"names":["PostgresEngine","MysqlEngine","SqliteEngine","isDockerDisabledForTests","allDatabases"],"mappings":"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"}