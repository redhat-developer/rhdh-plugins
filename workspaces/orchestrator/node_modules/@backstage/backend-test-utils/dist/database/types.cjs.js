'use strict';

var getDockerImageForName = require('../util/getDockerImageForName.cjs.js');

const allDatabases = Object.freeze({
  POSTGRES_17: {
    name: "Postgres 17.x",
    driver: "pg",
    dockerImageName: getDockerImageForName.getDockerImageForName("postgres:17"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_POSTGRES17_CONNECTION_STRING"
  },
  POSTGRES_16: {
    name: "Postgres 16.x",
    driver: "pg",
    dockerImageName: getDockerImageForName.getDockerImageForName("postgres:16"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_POSTGRES16_CONNECTION_STRING"
  },
  POSTGRES_15: {
    name: "Postgres 15.x",
    driver: "pg",
    dockerImageName: getDockerImageForName.getDockerImageForName("postgres:15"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_POSTGRES15_CONNECTION_STRING"
  },
  POSTGRES_14: {
    name: "Postgres 14.x",
    driver: "pg",
    dockerImageName: getDockerImageForName.getDockerImageForName("postgres:14"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_POSTGRES14_CONNECTION_STRING"
  },
  POSTGRES_13: {
    name: "Postgres 13.x",
    driver: "pg",
    dockerImageName: getDockerImageForName.getDockerImageForName("postgres:13"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_POSTGRES13_CONNECTION_STRING"
  },
  POSTGRES_12: {
    name: "Postgres 12.x",
    driver: "pg",
    dockerImageName: getDockerImageForName.getDockerImageForName("postgres:12"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_POSTGRES12_CONNECTION_STRING"
  },
  POSTGRES_11: {
    name: "Postgres 11.x",
    driver: "pg",
    dockerImageName: getDockerImageForName.getDockerImageForName("postgres:11"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_POSTGRES11_CONNECTION_STRING"
  },
  POSTGRES_9: {
    name: "Postgres 9.x",
    driver: "pg",
    dockerImageName: getDockerImageForName.getDockerImageForName("postgres:9"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_POSTGRES9_CONNECTION_STRING"
  },
  MYSQL_8: {
    name: "MySQL 8.x",
    driver: "mysql2",
    dockerImageName: getDockerImageForName.getDockerImageForName("mysql:8"),
    connectionStringEnvironmentVariableName: "BACKSTAGE_TEST_DATABASE_MYSQL8_CONNECTION_STRING"
  },
  SQLITE_3: {
    name: "SQLite 3.x",
    driver: "better-sqlite3"
  }
});
const LARGER_POOL_CONFIG = {
  pool: {
    min: 0,
    max: 50
  }
};

exports.LARGER_POOL_CONFIG = LARGER_POOL_CONFIG;
exports.allDatabases = allDatabases;
//# sourceMappingURL=types.cjs.js.map
