{"version":3,"file":"postgres.cjs.js","sources":["../../src/database/postgres.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyError } from '@backstage/errors';\nimport { randomBytes } from 'crypto';\nimport knexFactory, { Knex } from 'knex';\nimport { parse as parsePgConnectionString } from 'pg-connection-string';\nimport { v4 as uuid } from 'uuid';\nimport { Engine, LARGER_POOL_CONFIG, TestDatabaseProperties } from './types';\n\nasync function waitForPostgresReady(\n  connection: Knex.PgConnectionConfig,\n): Promise<void> {\n  const startTime = Date.now();\n\n  let lastError: Error | undefined;\n  let attempts = 0;\n  for (;;) {\n    attempts += 1;\n\n    let knex: Knex | undefined;\n    try {\n      knex = knexFactory({\n        client: 'pg',\n        connection: {\n          // make a copy because the driver mutates this\n          ...connection,\n        },\n      });\n      const result = await knex.select(knex.raw('version()'));\n      if (Array.isArray(result) && result[0]?.version) {\n        return;\n      }\n    } catch (e) {\n      lastError = e;\n    } finally {\n      await knex?.destroy();\n    }\n\n    if (Date.now() - startTime > 30_000) {\n      throw new Error(\n        `Timed out waiting for the database to be ready for connections, ${attempts} attempts, ${\n          lastError\n            ? `last error was ${stringifyError(lastError)}`\n            : '(no errors thrown)'\n        }`,\n      );\n    }\n\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n}\n\nexport async function startPostgresContainer(image: string): Promise<{\n  connection: Knex.PgConnectionConfig;\n  stopContainer: () => Promise<void>;\n}> {\n  const user = 'postgres';\n  const password = uuid();\n\n  // Lazy-load to avoid side-effect of importing testcontainers\n  const { GenericContainer } =\n    require('testcontainers') as typeof import('testcontainers');\n\n  const container = await new GenericContainer(image)\n    .withExposedPorts(5432)\n    .withEnvironment({ POSTGRES_PASSWORD: password })\n    .withTmpFs({ '/var/lib/postgresql/data': 'rw' })\n    .start();\n\n  const host = container.getHost();\n  const port = container.getMappedPort(5432);\n  const connection = { host, port, user, password };\n  const stopContainer = async () => {\n    await container.stop({ timeout: 10_000 });\n  };\n\n  await waitForPostgresReady(connection);\n\n  return { connection, stopContainer };\n}\n\nexport class PostgresEngine implements Engine {\n  static async create(\n    properties: TestDatabaseProperties,\n  ): Promise<PostgresEngine> {\n    const { connectionStringEnvironmentVariableName, dockerImageName } =\n      properties;\n\n    if (connectionStringEnvironmentVariableName) {\n      const connectionString =\n        process.env[connectionStringEnvironmentVariableName];\n      if (connectionString) {\n        const connection = parsePgConnectionString(connectionString);\n        return new PostgresEngine(\n          properties,\n          connection as Knex.PgConnectionConfig,\n        );\n      }\n    }\n\n    if (dockerImageName) {\n      const { connection, stopContainer } = await startPostgresContainer(\n        dockerImageName,\n      );\n      return new PostgresEngine(properties, connection, stopContainer);\n    }\n\n    throw new Error(`Test databasee for ${properties.name} not configured`);\n  }\n\n  readonly #properties: TestDatabaseProperties;\n  readonly #connection: Knex.PgConnectionConfig;\n  readonly #knexInstances: Knex[];\n  readonly #databaseNames: string[];\n  readonly #stopContainer?: () => Promise<void>;\n\n  constructor(\n    properties: TestDatabaseProperties,\n    connection: Knex.PgConnectionConfig,\n    stopContainer?: () => Promise<void>,\n  ) {\n    this.#properties = properties;\n    this.#connection = connection;\n    this.#knexInstances = [];\n    this.#databaseNames = [];\n    this.#stopContainer = stopContainer;\n  }\n\n  async createDatabaseInstance(): Promise<Knex> {\n    const adminConnection = this.#connectAdmin();\n    try {\n      const databaseName = `db${randomBytes(16).toString('hex')}`;\n\n      await adminConnection.raw('CREATE DATABASE ??', [databaseName]);\n      this.#databaseNames.push(databaseName);\n\n      const knexInstance = knexFactory({\n        client: this.#properties.driver,\n        connection: {\n          ...this.#connection,\n          database: databaseName,\n        },\n        ...LARGER_POOL_CONFIG,\n      });\n      this.#knexInstances.push(knexInstance);\n\n      return knexInstance;\n    } finally {\n      await adminConnection.destroy();\n    }\n  }\n\n  async shutdown(): Promise<void> {\n    for (const instance of this.#knexInstances) {\n      await instance.destroy();\n    }\n\n    const adminConnection = this.#connectAdmin();\n    try {\n      for (const databaseName of this.#databaseNames) {\n        await adminConnection.raw('DROP DATABASE ??', [databaseName]);\n      }\n    } finally {\n      await adminConnection.destroy();\n    }\n\n    await this.#stopContainer?.();\n  }\n\n  #connectAdmin(): Knex {\n    return knexFactory({\n      client: this.#properties.driver,\n      connection: {\n        ...this.#connection,\n        database: 'postgres',\n      },\n      pool: {\n        acquireTimeoutMillis: 10000,\n      },\n    });\n  }\n}\n"],"names":["knexFactory","stringifyError","uuid","parsePgConnectionString","randomBytes","LARGER_POOL_CONFIG"],"mappings":"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"}