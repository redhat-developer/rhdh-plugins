{"version":3,"file":"TestBackend.cjs.js","sources":["../../src/wiring/TestBackend.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Backend, createSpecializedBackend } from '@backstage/backend-app-api';\nimport {\n  createServiceFactory,\n  BackendFeature,\n  ExtensionPoint,\n  coreServices,\n  createBackendModule,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { mockServices } from '../services';\nimport { ConfigReader } from '@backstage/config';\nimport express from 'express';\n// Direct internal import to avoid duplication\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  InternalBackendFeature,\n  InternalBackendRegistrations,\n} from '../../../backend-plugin-api/src/wiring/types';\nimport {\n  DefaultRootHttpRouter,\n  ExtendedHttpServer,\n  MiddlewareFactory,\n  createHealthRouter,\n  createHttpServer,\n} from '@backstage/backend-defaults/rootHttpRouter';\nimport { HostDiscovery } from '@backstage/backend-defaults/discovery';\nimport {\n  actionsRegistryServiceMock,\n  actionsServiceMock,\n} from '../alpha/services';\n\n/** @public */\nexport interface TestBackendOptions<TExtensionPoints extends any[]> {\n  extensionPoints?: readonly [\n    ...{\n      [index in keyof TExtensionPoints]: [\n        ExtensionPoint<TExtensionPoints[index]>,\n        Partial<TExtensionPoints[index]>,\n      ];\n    },\n  ];\n  features?: Array<BackendFeature | Promise<{ default: BackendFeature }>>;\n}\n\n/** @public */\nexport interface TestBackend extends Backend {\n  /**\n   * Provides access to the underling HTTP server for use with utilities\n   * such as `supertest`.\n   *\n   * If the root http router service has been replaced, this will throw an error.\n   */\n  readonly server: ExtendedHttpServer;\n}\n\nexport const defaultServiceFactories = [\n  mockServices.auth.factory(),\n  mockServices.auditor.factory(),\n  mockServices.cache.factory(),\n  mockServices.rootConfig.factory(),\n  mockServices.database.factory(),\n  mockServices.httpAuth.factory(),\n  mockServices.httpRouter.factory(),\n  mockServices.lifecycle.factory(),\n  mockServices.logger.factory(),\n  mockServices.permissions.factory(),\n  mockServices.permissionsRegistry.factory(),\n  mockServices.rootHealth.factory(),\n  mockServices.rootLifecycle.factory(),\n  mockServices.rootLogger.factory(),\n  mockServices.scheduler.factory(),\n  mockServices.userInfo.factory(),\n  mockServices.urlReader.factory(),\n  mockServices.events.factory(),\n\n  // Alpha services\n  actionsRegistryServiceMock.factory(),\n  actionsServiceMock.factory(),\n];\n\n/**\n * Given a set of features, return an array of plugins that ensures that each\n * module in the provided set of features has a corresponding plugin.\n * @internal\n */\nfunction createPluginsForOrphanModules(features: Array<BackendFeature>) {\n  const pluginIds = new Set<string>();\n  const modulePluginIds = new Set<string>();\n\n  for (const feature of features) {\n    if (isInternalBackendRegistrations(feature)) {\n      const registrations = feature.getRegistrations();\n      for (const registration of registrations) {\n        if (registration.type === 'plugin') {\n          pluginIds.add(registration.pluginId);\n        } else if (registration.type === 'module') {\n          modulePluginIds.add(registration.pluginId);\n        }\n      }\n    }\n  }\n\n  for (const pluginId of pluginIds) {\n    modulePluginIds.delete(pluginId);\n  }\n\n  return Array.from(modulePluginIds).map(pluginId =>\n    createBackendPlugin({\n      pluginId,\n      register(reg) {\n        reg.registerInit({ deps: {}, async init() {} });\n      },\n    }),\n  );\n}\n\n/**\n * Given a set of extension points and features, find the extension\n * points that we mock and tie them to the correct plugin ID.\n * @returns\n */\nfunction createExtensionPointTestModules(\n  features: Array<BackendFeature>,\n  extensionPointTuples?: readonly [\n    ref: ExtensionPoint<unknown>,\n    impl: unknown,\n  ][],\n): Array<BackendFeature> {\n  if (!extensionPointTuples) {\n    return [];\n  }\n\n  const registrations = features.flatMap(feature => {\n    if (isInternalBackendRegistrations(feature)) {\n      return feature.getRegistrations();\n    }\n    return [];\n  });\n\n  const extensionPointMap = new Map(\n    extensionPointTuples.map(ep => [ep[0].id, ep]),\n  );\n  const extensionPointsToSort = new Set(extensionPointMap.keys());\n  const extensionPointsByPlugin = new Map<string, string[]>();\n\n  for (const registration of registrations) {\n    if (registration.type === 'module') {\n      const testDep = Object.values(registration.init.deps).filter(dep =>\n        extensionPointsToSort.has(dep.id),\n      );\n      if (testDep.length > 0) {\n        let points = extensionPointsByPlugin.get(registration.pluginId);\n        if (!points) {\n          points = [];\n          extensionPointsByPlugin.set(registration.pluginId, points);\n        }\n        for (const { id } of testDep) {\n          points.push(id);\n          extensionPointsToSort.delete(id);\n        }\n      }\n    }\n  }\n\n  if (extensionPointsToSort.size > 0) {\n    const list = Array.from(extensionPointsToSort)\n      .map(id => `'${id}'`)\n      .join(', ');\n    throw new Error(\n      `Unable to determine the plugin ID of extension point(s) ${list}. ` +\n        'Tested extension points must be depended on by one or more tested modules.',\n    );\n  }\n\n  const modules = [];\n\n  for (const [pluginId, pluginExtensionPointIds] of extensionPointsByPlugin) {\n    modules.push(\n      createBackendModule({\n        pluginId,\n        moduleId: 'test-extension-point-registration',\n        register(reg) {\n          for (const id of pluginExtensionPointIds) {\n            const tuple = extensionPointMap.get(id)!;\n            reg.registerExtensionPoint(...tuple);\n          }\n\n          reg.registerInit({ deps: {}, async init() {} });\n        },\n      }),\n    );\n  }\n\n  return modules;\n}\n\nfunction isPromise<T>(value: unknown | Promise<T>): value is Promise<T> {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'then' in value &&\n    typeof value.then === 'function'\n  );\n}\n\n// Same as in the backend-app-api, handles double defaults from dynamic imports\nfunction unwrapFeature(\n  feature: BackendFeature | { default: BackendFeature },\n): BackendFeature {\n  if ('$$type' in feature) {\n    return feature;\n  }\n\n  if ('default' in feature) {\n    return feature.default;\n  }\n\n  return feature;\n}\n\nconst backendInstancesToCleanUp = new Array<Backend>();\n\n/** @public */\nexport async function startTestBackend<TExtensionPoints extends any[]>(\n  options: TestBackendOptions<TExtensionPoints>,\n): Promise<TestBackend> {\n  const { extensionPoints, ...otherOptions } = options;\n\n  // Unpack input into awaited plain BackendFeatures\n  const features: BackendFeature[] = await Promise.all(\n    options.features?.map(async val => {\n      if (isPromise(val)) {\n        const { default: feature } = await val;\n        return unwrapFeature(feature);\n      }\n      return unwrapFeature(val);\n    }) ?? [],\n  );\n\n  let server: ExtendedHttpServer;\n\n  const rootHttpRouterFactory = createServiceFactory({\n    service: coreServices.rootHttpRouter,\n    deps: {\n      config: coreServices.rootConfig,\n      lifecycle: coreServices.rootLifecycle,\n      rootLogger: coreServices.rootLogger,\n      health: coreServices.rootHealth,\n    },\n    async factory({ config, lifecycle, rootLogger, health }) {\n      const router = DefaultRootHttpRouter.create();\n      const logger = rootLogger.child({ service: 'rootHttpRouter' });\n\n      const app = express();\n\n      const middleware = MiddlewareFactory.create({ config, logger });\n      const healthRouter = createHealthRouter({ config, health });\n\n      app.use(healthRouter);\n      app.use(router.handler());\n      app.use(middleware.notFound());\n      app.use(middleware.error());\n\n      server = await createHttpServer(\n        app,\n        { listen: { host: '', port: 0 } },\n        { logger },\n      );\n\n      lifecycle.addShutdownHook(() => server.stop(), { logger });\n\n      await server.start();\n\n      return router;\n    },\n  });\n\n  const discoveryFactory = createServiceFactory({\n    service: coreServices.discovery,\n    deps: {\n      rootHttpRouter: coreServices.rootHttpRouter,\n    },\n    async factory() {\n      if (!server) {\n        throw new Error('Test server not started yet');\n      }\n      const port = server.port();\n      const discovery = HostDiscovery.fromConfig(\n        new ConfigReader({\n          backend: { baseUrl: `http://localhost:${port}`, listen: { port } },\n        }),\n      );\n      return discovery;\n    },\n  });\n\n  const backend = createSpecializedBackend({\n    ...otherOptions,\n    defaultServiceFactories: [\n      ...defaultServiceFactories,\n      rootHttpRouterFactory,\n      discoveryFactory,\n    ],\n  });\n\n  backendInstancesToCleanUp.push(backend);\n\n  for (const m of createExtensionPointTestModules(features, extensionPoints)) {\n    backend.add(m);\n  }\n  for (const p of createPluginsForOrphanModules(features)) {\n    backend.add(p);\n  }\n  for (const feature of features) {\n    backend.add(feature);\n  }\n\n  await backend.start();\n\n  return Object.assign(backend, {\n    get server() {\n      if (!server) {\n        throw new Error('TestBackend server is not available');\n      }\n      return server;\n    },\n  });\n}\n\nlet registered = false;\nfunction registerTestHooks() {\n  if (typeof afterAll !== 'function') {\n    return;\n  }\n  if (registered) {\n    return;\n  }\n  registered = true;\n\n  afterAll(async () => {\n    await Promise.all(\n      backendInstancesToCleanUp.map(async backend => {\n        try {\n          await backend.stop();\n        } catch (error) {\n          console.error(`Failed to stop backend after tests, ${error}`);\n        }\n      }),\n    );\n    backendInstancesToCleanUp.length = 0;\n  });\n}\n\nregisterTestHooks();\n\nfunction toInternalBackendFeature(\n  feature: BackendFeature,\n): InternalBackendFeature {\n  if (feature.$$type !== '@backstage/BackendFeature') {\n    throw new Error(`Invalid BackendFeature, bad type '${feature.$$type}'`);\n  }\n  const internal = feature as InternalBackendFeature;\n  if (internal.version !== 'v1') {\n    throw new Error(\n      `Invalid BackendFeature, bad version '${internal.version}'`,\n    );\n  }\n  return internal;\n}\n\nfunction isInternalBackendRegistrations(\n  feature: BackendFeature,\n): feature is InternalBackendRegistrations {\n  const internal = toInternalBackendFeature(feature);\n  if (internal.featureType === 'registrations') {\n    return true;\n  }\n  // Backwards compatibility for v1 registrations that use duck typing\n  return 'getRegistrations' in internal;\n}\n"],"names":["mockServices","actionsRegistryServiceMock","actionsServiceMock","createBackendPlugin","createBackendModule","createServiceFactory","coreServices","DefaultRootHttpRouter","express","MiddlewareFactory","createHealthRouter","createHttpServer","discovery","HostDiscovery","ConfigReader","createSpecializedBackend"],"mappings":"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"}