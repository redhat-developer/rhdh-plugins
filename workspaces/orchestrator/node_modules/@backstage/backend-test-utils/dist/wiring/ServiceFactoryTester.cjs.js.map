{"version":3,"file":"ServiceFactoryTester.cjs.js","sources":["../../src/wiring/ServiceFactoryTester.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ServiceFactory, ServiceRef } from '@backstage/backend-plugin-api';\nimport { defaultServiceFactories } from './TestBackend';\n// Direct internal import to avoid duplication.\n// This is a relative import in order to make sure that the implementation is duplicated\n// rather than leading to an import from @backstage/backend-app-api.\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { ServiceRegistry } from '../../../backend-app-api/src/wiring/ServiceRegistry';\n\n/**\n * Options for {@link ServiceFactoryTester}.\n * @public\n */\nexport interface ServiceFactoryTesterOptions {\n  /**\n   * Additional service factories to make available as dependencies.\n   *\n   * @remarks\n   *\n   * If a service factory is provided for a service that already has a default\n   * implementation, the provided factory will override the default.\n   */\n  dependencies?: Array<ServiceFactory>;\n}\n\n/**\n * A utility to help test service factories in isolation.\n *\n * @public\n */\nexport class ServiceFactoryTester<\n  TService,\n  TScope extends 'root' | 'plugin',\n  TInstances extends 'singleton' | 'multiton' = 'singleton',\n> {\n  readonly #subject: ServiceRef<TService, TScope, TInstances>;\n  readonly #registry: ServiceRegistry;\n\n  /**\n   * Creates a new {@link ServiceFactoryTester} used to test the provided subject.\n   *\n   * @param subject - The service factory to test.\n   * @param options - Additional options\n   * @returns A new tester instance for the provided subject.\n   */\n  static from<\n    TService,\n    TScope extends 'root' | 'plugin',\n    TInstances extends 'singleton' | 'multiton' = 'singleton',\n  >(\n    subject: ServiceFactory<TService, TScope, TInstances>,\n    options?: ServiceFactoryTesterOptions,\n  ): ServiceFactoryTester<TService, TScope, TInstances> {\n    const registry = ServiceRegistry.create([\n      ...defaultServiceFactories,\n      ...(options?.dependencies ?? []),\n      subject,\n    ]);\n    return new ServiceFactoryTester(subject.service, registry);\n  }\n\n  private constructor(\n    subject: ServiceRef<TService, TScope, TInstances>,\n    registry: ServiceRegistry,\n  ) {\n    this.#subject = subject;\n    this.#registry = registry;\n  }\n\n  /**\n   * Returns the service instance for the subject.\n   *\n   * @remarks\n   *\n   * If the subject is a plugin scoped service factory a plugin ID\n   * can be provided to instantiate the service for a specific plugin.\n   *\n   * By default the plugin ID 'test' is used.\n   */\n  async getSubject(\n    ...args: 'root' extends TScope ? [] : [pluginId?: string]\n  ): Promise<TInstances extends 'multiton' ? TService[] : TService> {\n    const [pluginId] = args;\n    const instance = this.#registry.get(this.#subject, pluginId ?? 'test')!;\n    return instance;\n  }\n\n  /**\n   * Return the service instance for any of the provided dependencies or built-in services.\n   *\n   * @remarks\n   *\n   * A plugin ID can optionally be provided for plugin scoped services, otherwise the plugin ID 'test' is used.\n   */\n  async getService<\n    TGetService,\n    TGetScope extends 'root' | 'plugin',\n    TGetInstances extends 'singleton' | 'multiton' = 'singleton',\n  >(\n    service: ServiceRef<TGetService, TGetScope, TGetInstances>,\n    ...args: 'root' extends TGetScope ? [] : [pluginId?: string]\n  ): Promise<TGetInstances extends 'multiton' ? TGetService[] : TGetService> {\n    const [pluginId] = args;\n    const instance = await this.#registry.get(service, pluginId ?? 'test');\n    if (instance === undefined) {\n      throw new Error(`Service '${service.id}' not found`);\n    }\n    return instance;\n  }\n}\n"],"names":["ServiceRegistry","defaultServiceFactories"],"mappings":";;;;;AA6CO,MAAM,oBAAA,CAIX;AAAA,EACS,QAAA;AAAA,EACA,SAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAST,OAAO,IAAA,CAKL,OAAA,EACA,OAAA,EACoD;AACpD,IAAA,MAAM,QAAA,GAAWA,gCAAgB,MAAA,CAAO;AAAA,MACtC,GAAGC,mCAAA;AAAA,MACH,GAAI,OAAA,EAAS,YAAA,IAAgB,EAAC;AAAA,MAC9B;AAAA,KACD,CAAA;AACD,IAAA,OAAO,IAAI,oBAAA,CAAqB,OAAA,CAAQ,OAAA,EAAS,QAAQ,CAAA;AAAA,EAC3D;AAAA,EAEQ,WAAA,CACN,SACA,QAAA,EACA;AACA,IAAA,IAAA,CAAK,QAAA,GAAW,OAAA;AAChB,IAAA,IAAA,CAAK,SAAA,GAAY,QAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,cACD,IAAA,EAC6D;AAChE,IAAA,MAAM,CAAC,QAAQ,CAAA,GAAI,IAAA;AACnB,IAAA,MAAM,WAAW,IAAA,CAAK,SAAA,CAAU,IAAI,IAAA,CAAK,QAAA,EAAU,YAAY,MAAM,CAAA;AACrE,IAAA,OAAO,QAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,UAAA,CAKJ,OAAA,EAAA,GACG,IAAA,EACsE;AACzE,IAAA,MAAM,CAAC,QAAQ,CAAA,GAAI,IAAA;AACnB,IAAA,MAAM,WAAW,MAAM,IAAA,CAAK,UAAU,GAAA,CAAI,OAAA,EAAS,YAAY,MAAM,CAAA;AACrE,IAAA,IAAI,aAAa,MAAA,EAAW;AAC1B,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,SAAA,EAAY,OAAA,CAAQ,EAAE,CAAA,WAAA,CAAa,CAAA;AAAA,IACrD;AACA,IAAA,OAAO,QAAA;AAAA,EACT;AACF;;;;"}