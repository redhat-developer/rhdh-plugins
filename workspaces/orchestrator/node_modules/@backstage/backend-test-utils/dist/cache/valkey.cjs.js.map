{"version":3,"file":"valkey.cjs.js","sources":["../../src/cache/valkey.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Keyv from 'keyv';\nimport KeyvValkey from '@keyv/valkey';\nimport { v4 as uuid } from 'uuid';\nimport { Instance } from './types';\n\nasync function attemptValkeyConnection(connection: string): Promise<Keyv> {\n  const startTime = Date.now();\n\n  for (;;) {\n    try {\n      const store = new KeyvValkey(connection);\n      const keyv = new Keyv({ store });\n      const value = uuid();\n      await keyv.set('test', value);\n      if ((await keyv.get('test')) === value) {\n        return keyv;\n      }\n    } catch (e) {\n      if (Date.now() - startTime > 30_000) {\n        throw new Error(\n          `Timed out waiting for valkey to be ready for connections, ${e}`,\n        );\n      }\n    }\n\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n}\n\nexport async function connectToExternalValkey(\n  connection: string,\n): Promise<Instance> {\n  const keyv = await attemptValkeyConnection(connection);\n  return {\n    store: 'valkey',\n    connection,\n    keyv,\n    stop: async () => await keyv.disconnect(),\n  };\n}\n\nexport async function startValkeyContainer(image: string): Promise<Instance> {\n  // Lazy-load to avoid side-effect of importing testcontainers\n  const { GenericContainer } =\n    require('testcontainers') as typeof import('testcontainers');\n\n  const container = await new GenericContainer(image)\n    .withExposedPorts(6379)\n    .start();\n\n  const host = container.getHost();\n  const port = container.getMappedPort(6379);\n  const connection = `redis://${host}:${port}`;\n\n  const keyv = await attemptValkeyConnection(connection);\n\n  return {\n    store: 'valkey',\n    connection,\n    keyv,\n    stop: async () => {\n      await keyv.disconnect();\n      await container.stop({ timeout: 10_000 });\n    },\n  };\n}\n"],"names":["KeyvValkey","Keyv","uuid"],"mappings":";;;;;;;;;;;AAqBA,eAAe,wBAAwB,UAAA,EAAmC;AACxE,EAAA,MAAM,SAAA,GAAY,KAAK,GAAA,EAAI;AAE3B,EAAA,WAAS;AACP,IAAA,IAAI;AACF,MAAA,MAAM,KAAA,GAAQ,IAAIA,2BAAA,CAAW,UAAU,CAAA;AACvC,MAAA,MAAM,IAAA,GAAO,IAAIC,qBAAA,CAAK,EAAE,OAAO,CAAA;AAC/B,MAAA,MAAM,QAAQC,OAAA,EAAK;AACnB,MAAA,MAAM,IAAA,CAAK,GAAA,CAAI,MAAA,EAAQ,KAAK,CAAA;AAC5B,MAAA,IAAK,MAAM,IAAA,CAAK,GAAA,CAAI,MAAM,MAAO,KAAA,EAAO;AACtC,QAAA,OAAO,IAAA;AAAA,MACT;AAAA,IACF,SAAS,CAAA,EAAG;AACV,MAAA,IAAI,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA,GAAY,GAAA,EAAQ;AACnC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,6DAA6D,CAAC,CAAA;AAAA,SAChE;AAAA,MACF;AAAA,IACF;AAEA,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,GAAG,CAAC,CAAA;AAAA,EACvD;AACF;AAEA,eAAsB,wBACpB,UAAA,EACmB;AACnB,EAAA,MAAM,IAAA,GAAO,MAAM,uBAAA,CAAwB,UAAU,CAAA;AACrD,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,QAAA;AAAA,IACP,UAAA;AAAA,IACA,IAAA;AAAA,IACA,IAAA,EAAM,YAAY,MAAM,IAAA,CAAK,UAAA;AAAW,GAC1C;AACF;AAEA,eAAsB,qBAAqB,KAAA,EAAkC;AAE3E,EAAA,MAAM,EAAE,gBAAA,EAAiB,GACvB,OAAA,CAAQ,gBAAgB,CAAA;AAE1B,EAAA,MAAM,SAAA,GAAY,MAAM,IAAI,gBAAA,CAAiB,KAAK,CAAA,CAC/C,gBAAA,CAAiB,IAAI,CAAA,CACrB,KAAA,EAAM;AAET,EAAA,MAAM,IAAA,GAAO,UAAU,OAAA,EAAQ;AAC/B,EAAA,MAAM,IAAA,GAAO,SAAA,CAAU,aAAA,CAAc,IAAI,CAAA;AACzC,EAAA,MAAM,UAAA,GAAa,CAAA,QAAA,EAAW,IAAI,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA;AAE1C,EAAA,MAAM,IAAA,GAAO,MAAM,uBAAA,CAAwB,UAAU,CAAA;AAErD,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,QAAA;AAAA,IACP,UAAA;AAAA,IACA,IAAA;AAAA,IACA,MAAM,YAAY;AAChB,MAAA,MAAM,KAAK,UAAA,EAAW;AACtB,MAAA,MAAM,SAAA,CAAU,IAAA,CAAK,EAAE,OAAA,EAAS,KAAQ,CAAA;AAAA,IAC1C;AAAA,GACF;AACF;;;;;"}