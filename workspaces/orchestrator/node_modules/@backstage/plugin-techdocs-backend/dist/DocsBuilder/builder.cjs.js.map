{"version":3,"file":"builder.cjs.js","sources":["../../src/DocsBuilder/builder.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  DEFAULT_NAMESPACE,\n  Entity,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError, isError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport {\n  GeneratorBase,\n  GeneratorBuilder,\n  getLocationForEntity,\n  PreparerBase,\n  PreparerBuilder,\n  PublisherBase,\n} from '@backstage/plugin-techdocs-node';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport path from 'path';\nimport { Writable } from 'stream';\nimport { Logger } from 'winston';\nimport { BuildMetadataStorage } from './BuildMetadataStorage';\nimport { TechDocsCache } from '../cache';\n\ntype DocsBuilderArguments = {\n  preparers: PreparerBuilder;\n  generators: GeneratorBuilder;\n  publisher: PublisherBase;\n  entity: Entity;\n  logger: Logger;\n  config: Config;\n  scmIntegrations: ScmIntegrationRegistry;\n  logStream?: Writable;\n  cache?: TechDocsCache;\n};\n\nexport class DocsBuilder {\n  private preparer: PreparerBase;\n  private generator: GeneratorBase;\n  private publisher: PublisherBase;\n  private entity: Entity;\n  private logger: Logger;\n  private config: Config;\n  private scmIntegrations: ScmIntegrationRegistry;\n  private logStream: Writable | undefined;\n  private cache?: TechDocsCache;\n\n  constructor({\n    preparers,\n    generators,\n    publisher,\n    entity,\n    logger,\n    config,\n    scmIntegrations,\n    logStream,\n    cache,\n  }: DocsBuilderArguments) {\n    this.preparer = preparers.get(entity);\n    this.generator = generators.get(entity);\n    this.publisher = publisher;\n    this.entity = entity;\n    this.logger = logger;\n    this.config = config;\n    this.scmIntegrations = scmIntegrations;\n    this.logStream = logStream;\n    this.cache = cache;\n  }\n\n  /**\n   * Build the docs and return whether they have been newly generated or have been cached\n   * @returns true, if the docs have been built. false, if the cached docs are still up-to-date.\n   */\n  public async build(): Promise<boolean> {\n    if (!this.entity.metadata.uid) {\n      throw new Error(\n        'Trying to build documentation for entity not in software catalog',\n      );\n    }\n\n    /**\n     * Prepare (and cache check)\n     */\n\n    this.logger.info(\n      `Step 1 of 3: Preparing docs for entity ${stringifyEntityRef(\n        this.entity,\n      )}`,\n    );\n\n    // If available, use the etag stored in techdocs_metadata.json to\n    // check if docs are outdated and need to be regenerated.\n    let storedEtag: string | undefined;\n    if (await this.publisher.hasDocsBeenGenerated(this.entity)) {\n      try {\n        storedEtag = (\n          await this.publisher.fetchTechDocsMetadata({\n            namespace: this.entity.metadata.namespace ?? DEFAULT_NAMESPACE,\n            kind: this.entity.kind,\n            name: this.entity.metadata.name,\n          })\n        ).etag;\n      } catch (err) {\n        // Proceed with a fresh build\n        this.logger.warn(\n          `Unable to read techdocs_metadata.json, proceeding with fresh build, error ${err}.`,\n        );\n      }\n    }\n\n    let preparedDir: string | undefined;\n    let outputDir: string | undefined;\n\n    try {\n      let newEtag: string;\n      try {\n        const preparerResponse = await this.preparer.prepare(this.entity, {\n          etag: storedEtag,\n          logger: this.logger,\n        });\n\n        preparedDir = preparerResponse.preparedDir;\n        newEtag = preparerResponse.etag;\n      } catch (err) {\n        if (isError(err) && err.name === 'NotModifiedError') {\n          // No need to prepare anymore since cache is valid.\n          // Set last check happened to now\n          new BuildMetadataStorage(this.entity.metadata.uid).setLastUpdated();\n          this.logger.debug(\n            `Docs for ${stringifyEntityRef(\n              this.entity,\n            )} are unmodified. Using cache, skipping generate and prepare`,\n          );\n          return false;\n        }\n        throw err;\n      }\n\n      this.logger.info(\n        `Prepare step completed for entity ${stringifyEntityRef(\n          this.entity,\n        )}, stored at ${preparedDir}`,\n      );\n\n      /**\n       * Generate\n       */\n\n      this.logger.info(\n        `Step 2 of 3: Generating docs for entity ${stringifyEntityRef(\n          this.entity,\n        )}`,\n      );\n\n      const workingDir = this.config.getOptionalString(\n        'backend.workingDirectory',\n      );\n      const tmpdirPath = workingDir || os.tmpdir();\n      // Fixes a problem with macOS returning a path that is a symlink\n      const tmpdirResolvedPath = fs.realpathSync(tmpdirPath);\n      outputDir = await fs.mkdtemp(\n        path.join(tmpdirResolvedPath, 'techdocs-tmp-'),\n      );\n\n      const parsedLocationAnnotation = getLocationForEntity(\n        this.entity,\n        this.scmIntegrations,\n      );\n      await this.generator.run({\n        inputDir: preparedDir,\n        outputDir,\n        parsedLocationAnnotation,\n        etag: newEtag,\n        logger: this.logger,\n        logStream: this.logStream,\n        siteOptions: {\n          name: this.entity.metadata.title ?? this.entity.metadata.name,\n        },\n      });\n\n      /**\n       * Publish\n       */\n\n      this.logger.info(\n        `Step 3 of 3: Publishing docs for entity ${stringifyEntityRef(\n          this.entity,\n        )}`,\n      );\n\n      const published = await this.publisher.publish({\n        entity: this.entity,\n        directory: outputDir,\n      });\n\n      // Invalidate the cache for any published objects.\n      if (this.cache && published && published?.objects?.length) {\n        this.logger.debug(\n          `Invalidating ${published.objects.length} cache objects`,\n        );\n        await this.cache.invalidateMultiple(published.objects);\n      }\n    } finally {\n      // Remove Prepared directory since it is no longer needed.\n      // Caveat: Can not remove prepared directory in case of git preparer since the\n      // local git repository is used to get etag on subsequent requests.\n      if (preparedDir && this.preparer.shouldCleanPreparedDirectory()) {\n        this.logger.debug(`Removing prepared directory ${preparedDir}`);\n        try {\n          // Not a blocker hence no need to await this.\n          fs.remove(preparedDir);\n        } catch (error) {\n          assertError(error);\n          this.logger.debug(\n            `Error removing prepared directory ${error.message}`,\n          );\n        }\n      }\n\n      if (outputDir) {\n        this.logger.debug(`Removing generated directory ${outputDir}`);\n        try {\n          // Not a blocker hence no need to await this.\n          fs.remove(outputDir);\n        } catch (error) {\n          assertError(error);\n          this.logger.debug(\n            `Error removing generated directory ${error.message}`,\n          );\n        }\n      }\n    }\n\n    // Update the last check time for the entity\n    new BuildMetadataStorage(this.entity.metadata.uid).setLastUpdated();\n\n    return true;\n  }\n}\n"],"names":["stringifyEntityRef","DEFAULT_NAMESPACE","isError","BuildMetadataStorage","os","fs","path","getLocationForEntity","assertError"],"mappings":"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"}