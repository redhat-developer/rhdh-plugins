{"version":3,"file":"TechDocsCache.cjs.js","sources":["../../src/cache/TechDocsCache.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertError, CustomErrorBase } from '@backstage/errors';\nimport { Config, readDurationFromConfig } from '@backstage/config';\nimport { CacheService, LoggerService } from '@backstage/backend-plugin-api';\nimport { durationToMilliseconds } from '@backstage/types';\n\nexport class CacheInvalidationError extends CustomErrorBase {}\n\nexport class TechDocsCache {\n  protected readonly cache: CacheService;\n  protected readonly logger: LoggerService;\n  protected readonly readTimeout: number;\n\n  private constructor({\n    cache,\n    logger,\n    readTimeout,\n  }: {\n    cache: CacheService;\n    logger: LoggerService;\n    readTimeout: number;\n  }) {\n    this.cache = cache;\n    this.logger = logger;\n    this.readTimeout = readTimeout;\n  }\n\n  static fromConfig(\n    config: Config,\n    { cache, logger }: { cache: CacheService; logger: LoggerService },\n  ) {\n    let readTimeout: number;\n    if (config.has('techdocs.cache.readTimeout')) {\n      if (typeof config.get('techdocs.cache.readTimeout') === 'number') {\n        readTimeout = config.getNumber('techdocs.cache.readTimeout');\n      } else {\n        readTimeout = durationToMilliseconds(\n          readDurationFromConfig(config, {\n            key: 'techdocs.cache.readTimeout',\n          }),\n        );\n      }\n    } else {\n      readTimeout = 1000;\n    }\n    return new TechDocsCache({ cache, logger, readTimeout });\n  }\n\n  async get(path: string): Promise<Buffer | undefined> {\n    try {\n      // Promise.race ensures we don't hang the client for long if the cache is\n      // temporarily unreachable.\n      const response = (await Promise.race([\n        this.cache.get(path),\n        new Promise(cancelAfter => setTimeout(cancelAfter, this.readTimeout)),\n      ])) as string | undefined;\n\n      if (response !== undefined) {\n        this.logger.debug(`Cache hit: ${path}`);\n        return Buffer.from(response, 'base64');\n      }\n\n      this.logger.debug(`Cache miss: ${path}`);\n      return response;\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(`Error getting cache entry ${path}: ${e.message}`);\n      this.logger.debug(e.message, e);\n      return undefined;\n    }\n  }\n\n  async set(path: string, data: Buffer): Promise<void> {\n    this.logger.debug(`Writing cache entry for ${path}`);\n    this.cache\n      .set(path, data.toString('base64'))\n      .catch(e => this.logger.error('write error', e));\n  }\n\n  async invalidate(path: string): Promise<void> {\n    return this.cache.delete(path);\n  }\n\n  async invalidateMultiple(\n    paths: string[],\n  ): Promise<PromiseSettledResult<void>[]> {\n    const settled = await Promise.allSettled(\n      paths.map(path => this.cache.delete(path)),\n    );\n    const rejected = settled.filter(\n      s => s.status === 'rejected',\n    ) as PromiseRejectedResult[];\n\n    if (rejected.length) {\n      throw new CacheInvalidationError(\n        'TechDocs cache invalidation error',\n        rejected,\n      );\n    }\n\n    return settled;\n  }\n}\n"],"names":["CustomErrorBase","config","durationToMilliseconds","readDurationFromConfig","assertError"],"mappings":"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"}