'use strict';

var errors = require('@backstage/errors');
var config = require('@backstage/config');
var types = require('@backstage/types');

class CacheInvalidationError extends errors.CustomErrorBase {
}
class TechDocsCache {
  cache;
  logger;
  readTimeout;
  constructor({
    cache,
    logger,
    readTimeout
  }) {
    this.cache = cache;
    this.logger = logger;
    this.readTimeout = readTimeout;
  }
  static fromConfig(config$1, { cache, logger }) {
    let readTimeout;
    if (config$1.has("techdocs.cache.readTimeout")) {
      if (typeof config$1.get("techdocs.cache.readTimeout") === "number") {
        readTimeout = config$1.getNumber("techdocs.cache.readTimeout");
      } else {
        readTimeout = types.durationToMilliseconds(
          config.readDurationFromConfig(config$1, {
            key: "techdocs.cache.readTimeout"
          })
        );
      }
    } else {
      readTimeout = 1e3;
    }
    return new TechDocsCache({ cache, logger, readTimeout });
  }
  async get(path) {
    try {
      const response = await Promise.race([
        this.cache.get(path),
        new Promise((cancelAfter) => setTimeout(cancelAfter, this.readTimeout))
      ]);
      if (response !== void 0) {
        this.logger.debug(`Cache hit: ${path}`);
        return Buffer.from(response, "base64");
      }
      this.logger.debug(`Cache miss: ${path}`);
      return response;
    } catch (e) {
      errors.assertError(e);
      this.logger.warn(`Error getting cache entry ${path}: ${e.message}`);
      this.logger.debug(e.message, e);
      return void 0;
    }
  }
  async set(path, data) {
    this.logger.debug(`Writing cache entry for ${path}`);
    this.cache.set(path, data.toString("base64")).catch((e) => this.logger.error("write error", e));
  }
  async invalidate(path) {
    return this.cache.delete(path);
  }
  async invalidateMultiple(paths) {
    const settled = await Promise.allSettled(
      paths.map((path) => this.cache.delete(path))
    );
    const rejected = settled.filter(
      (s) => s.status === "rejected"
    );
    if (rejected.length) {
      throw new CacheInvalidationError(
        "TechDocs cache invalidation error",
        rejected
      );
    }
    return settled;
  }
}

exports.CacheInvalidationError = CacheInvalidationError;
exports.TechDocsCache = TechDocsCache;
//# sourceMappingURL=TechDocsCache.cjs.js.map
