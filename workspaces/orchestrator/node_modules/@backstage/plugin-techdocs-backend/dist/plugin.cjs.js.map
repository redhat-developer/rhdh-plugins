{"version":3,"file":"plugin.cjs.js","sources":["../src/plugin.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport {\n  DocsBuildStrategy,\n  Generators,\n  PreparerBase,\n  Preparers,\n  Publisher,\n  PublisherBase,\n  PublisherSettings,\n  PublisherType,\n  RemoteProtocol,\n  techdocsBuildsExtensionPoint,\n  TechdocsGenerator,\n  techdocsGeneratorExtensionPoint,\n  techdocsPreparerExtensionPoint,\n  techdocsPublisherExtensionPoint,\n} from '@backstage/plugin-techdocs-node';\nimport { catalogServiceRef } from '@backstage/plugin-catalog-node/alpha';\nimport * as winston from 'winston';\nimport { createRouter } from './service/router';\n\n/**\n * The TechDocs plugin is responsible for serving and building documentation for any entity.\n * @public\n */\nexport const techdocsPlugin = createBackendPlugin({\n  pluginId: 'techdocs',\n  register(env) {\n    let docsBuildStrategy: DocsBuildStrategy | undefined;\n    let buildLogTransport: winston.transport | undefined;\n    env.registerExtensionPoint(techdocsBuildsExtensionPoint, {\n      setBuildStrategy(buildStrategy: DocsBuildStrategy) {\n        if (docsBuildStrategy) {\n          throw new Error('DocsBuildStrategy may only be set once');\n        }\n        docsBuildStrategy = buildStrategy;\n      },\n      setBuildLogTransport(transport: winston.transport) {\n        if (buildLogTransport) {\n          throw new Error('BuildLogTransport may only be set once');\n        }\n        buildLogTransport = transport;\n      },\n    });\n\n    let customTechdocsGenerator: TechdocsGenerator | undefined;\n    env.registerExtensionPoint(techdocsGeneratorExtensionPoint, {\n      setTechdocsGenerator(generator: TechdocsGenerator) {\n        if (customTechdocsGenerator) {\n          throw new Error('TechdocsGenerator may only be set once');\n        }\n\n        customTechdocsGenerator = generator;\n      },\n    });\n\n    const customPreparers = new Map<RemoteProtocol, PreparerBase>();\n    env.registerExtensionPoint(techdocsPreparerExtensionPoint, {\n      registerPreparer(protocol: RemoteProtocol, preparer: PreparerBase) {\n        if (customPreparers.has(protocol)) {\n          throw new Error(\n            `Preparer for protocol ${protocol} is already registered`,\n          );\n        }\n        customPreparers.set(protocol, preparer);\n      },\n    });\n\n    let customTechdocsPublisher: PublisherBase | undefined;\n    const publisherSettings: PublisherSettings = {};\n    env.registerExtensionPoint(techdocsPublisherExtensionPoint, {\n      registerPublisher(type: PublisherType, publisher: PublisherBase) {\n        if (customTechdocsPublisher) {\n          throw new Error(`Publisher for type ${type} is already registered`);\n        }\n        customTechdocsPublisher = publisher;\n      },\n      registerPublisherSettings<T extends keyof PublisherSettings>(\n        publisher: T,\n        settings: PublisherSettings[T],\n      ) {\n        publisherSettings[publisher] = settings;\n      },\n    });\n\n    env.registerInit({\n      deps: {\n        config: coreServices.rootConfig,\n        logger: coreServices.logger,\n        urlReader: coreServices.urlReader,\n        http: coreServices.httpRouter,\n        discovery: coreServices.discovery,\n        cache: coreServices.cache,\n        httpAuth: coreServices.httpAuth,\n        auth: coreServices.auth,\n        catalog: catalogServiceRef,\n      },\n      async init({\n        config,\n        logger,\n        urlReader,\n        http,\n        discovery,\n        cache,\n        httpAuth,\n        auth,\n        catalog,\n      }) {\n        // Preparers are responsible for fetching source files for documentation.\n        const preparers = await Preparers.fromConfig(config, {\n          reader: urlReader,\n          logger: logger,\n        });\n        for (const [protocol, preparer] of customPreparers.entries()) {\n          preparers.register(protocol, preparer);\n        }\n\n        // Generators are used for generating documentation sites.\n        const generators = await Generators.fromConfig(config, {\n          logger: logger,\n          customGenerator: customTechdocsGenerator,\n        });\n\n        // Publisher is used for\n        // 1. Publishing generated files to storage\n        // 2. Fetching files from storage and passing them to TechDocs frontend.\n        const publisher = await Publisher.fromConfig(config, {\n          logger: logger,\n          discovery: discovery,\n          customPublisher: customTechdocsPublisher,\n          publisherSettings,\n        });\n\n        // checks if the publisher is working and logs the result\n        await publisher.getReadiness();\n\n        http.use(\n          await createRouter({\n            logger: logger,\n            cache,\n            docsBuildStrategy,\n            buildLogTransport,\n            preparers,\n            generators,\n            publisher,\n            config,\n            discovery,\n            httpAuth,\n            auth,\n            catalogClient: catalog,\n          }),\n        );\n\n        http.addAuthPolicy({\n          path: '/static',\n          allow: 'user-cookie',\n        });\n      },\n    });\n  },\n});\n"],"names":["createBackendPlugin","techdocsBuildsExtensionPoint","techdocsGeneratorExtensionPoint","techdocsPreparerExtensionPoint","techdocsPublisherExtensionPoint","coreServices","catalogServiceRef","Preparers","Generators","Publisher","createRouter"],"mappings":"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"}