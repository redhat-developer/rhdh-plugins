'use strict';

var catalogModel = require('@backstage/catalog-model');

class CachedEntityLoader {
  auth;
  catalog;
  cache;
  readTimeout = 1e3;
  constructor({ auth, catalog, cache }) {
    this.auth = auth;
    this.catalog = catalog;
    this.cache = cache;
  }
  async load(credentials, entityRef, token) {
    const cacheKey = this.getCacheKey(entityRef, credentials);
    let result = await this.getFromCache(cacheKey);
    if (result) {
      return result;
    }
    result = await this.catalog.getEntityByRef(entityRef, { token });
    if (result) {
      this.cache.set(cacheKey, result, { ttl: 5e3 });
    }
    return result;
  }
  async getFromCache(key) {
    return await Promise.race([
      this.cache.get(key),
      new Promise((cancelAfter) => setTimeout(cancelAfter, this.readTimeout))
    ]);
  }
  getCacheKey(entityName, credentials) {
    const key = ["catalog", catalogModel.stringifyEntityRef(entityName)];
    if (this.auth.isPrincipal(credentials, "user")) {
      key.push(credentials.principal.userEntityRef);
    } else if (this.auth.isPrincipal(credentials, "service")) {
      key.push(credentials.principal.subject);
    }
    return key.join(":");
  }
}

exports.CachedEntityLoader = CachedEntityLoader;
//# sourceMappingURL=CachedEntityLoader.cjs.js.map
