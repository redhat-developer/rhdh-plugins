{"version":3,"file":"router.cjs.js","sources":["../../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CatalogApi, CatalogClient } from '@backstage/catalog-client';\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { Config, readDurationFromConfig } from '@backstage/config';\nimport { NotFoundError } from '@backstage/errors';\nimport {\n  DocsBuildStrategy,\n  GeneratorBuilder,\n  getLocationForEntity,\n  PreparerBuilder,\n  PublisherBase,\n} from '@backstage/plugin-techdocs-node';\nimport express, { Response } from 'express';\nimport Router from 'express-promise-router';\nimport { Knex } from 'knex';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { DocsSynchronizer, DocsSynchronizerSyncOpts } from './DocsSynchronizer';\nimport { createCacheMiddleware, TechDocsCache } from '../cache';\nimport { CachedEntityLoader } from './CachedEntityLoader';\nimport { DefaultDocsBuildStrategy } from './DefaultDocsBuildStrategy';\nimport * as winston from 'winston';\nimport {\n  AuthService,\n  CacheService,\n  DiscoveryService,\n  HttpAuthService,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\nimport { durationToMilliseconds } from '@backstage/types';\n\n/**\n * Required dependencies for running TechDocs in the \"out-of-the-box\"\n * deployment configuration (prepare/generate/publish all in the Backend).\n *\n * @internal\n */\nexport type OutOfTheBoxDeploymentOptions = {\n  preparers: PreparerBuilder;\n  generators: GeneratorBuilder;\n  publisher: PublisherBase;\n  logger: LoggerService;\n  discovery: DiscoveryService;\n  database?: Knex; // TODO: Make database required when we're implementing database stuff.\n  config: Config;\n  cache: CacheService;\n  docsBuildStrategy?: DocsBuildStrategy;\n  buildLogTransport?: winston.transport;\n  catalogClient?: CatalogApi;\n  httpAuth: HttpAuthService;\n  auth: AuthService;\n};\n\n/**\n * Required dependencies for running TechDocs in the \"recommended\" deployment\n * configuration (prepare/generate handled externally in CI/CD).\n *\n * @internal\n */\nexport type RecommendedDeploymentOptions = {\n  publisher: PublisherBase;\n  logger: LoggerService;\n  discovery: DiscoveryService;\n  config: Config;\n  cache: CacheService;\n  docsBuildStrategy?: DocsBuildStrategy;\n  buildLogTransport?: winston.transport;\n  catalogClient?: CatalogApi;\n  httpAuth: HttpAuthService;\n  auth: AuthService;\n};\n\n/**\n * One of the two deployment configurations must be provided.\n *\n * @internal\n */\nexport type RouterOptions =\n  | RecommendedDeploymentOptions\n  | OutOfTheBoxDeploymentOptions;\n\n/**\n * Typeguard to help createRouter() understand when we are in a \"recommended\"\n * deployment vs. when we are in an out-of-the-box deployment configuration.\n *\n * @internal\n */\nfunction isOutOfTheBoxOption(\n  opt: RouterOptions,\n): opt is OutOfTheBoxDeploymentOptions {\n  return (opt as OutOfTheBoxDeploymentOptions).preparers !== undefined;\n}\n\n/**\n * Creates a techdocs router.\n *\n * @internal\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = Router();\n  const { publisher, config, logger, discovery, httpAuth, auth } = options;\n\n  const catalogClient =\n    options.catalogClient ?? new CatalogClient({ discoveryApi: discovery });\n  const docsBuildStrategy =\n    options.docsBuildStrategy ?? DefaultDocsBuildStrategy.fromConfig(config);\n  const buildLogTransport = options.buildLogTransport;\n\n  // Entities are cached to optimize the /static/docs request path, which can be called many times\n  // when loading a single techdocs page.\n  const entityLoader = new CachedEntityLoader({\n    auth,\n    catalog: catalogClient,\n    cache: options.cache,\n  });\n\n  // Set up a cache client if configured.\n  let cache: TechDocsCache | undefined;\n  if (config.has('techdocs.cache.ttl')) {\n    let ttlMs: number;\n    if (typeof config.get('techdocs.cache.ttl') === 'number') {\n      ttlMs = config.getNumber('techdocs.cache.ttl');\n    } else {\n      ttlMs = durationToMilliseconds(\n        readDurationFromConfig(config, {\n          key: 'techdocs.cache.ttl',\n        }),\n      );\n    }\n    const cacheClient = options.cache.withOptions({ defaultTtl: ttlMs });\n    cache = TechDocsCache.fromConfig(config, { cache: cacheClient, logger });\n  }\n\n  const scmIntegrations = ScmIntegrations.fromConfig(config);\n  const docsSynchronizer = new DocsSynchronizer({\n    publisher,\n    logger,\n    buildLogTransport,\n    config,\n    scmIntegrations,\n    cache,\n  });\n\n  router.get('/metadata/techdocs/:namespace/:kind/:name', async (req, res) => {\n    const { kind, namespace, name } = req.params;\n    const entityName = { kind, namespace, name };\n\n    const credentials = await httpAuth.credentials(req);\n\n    const { token } = await auth.getPluginRequestToken({\n      onBehalfOf: credentials,\n      targetPluginId: 'catalog',\n    });\n\n    // Verify that the related entity exists and the current user has permission to view it.\n    const entity = await entityLoader.load(credentials, entityName, token);\n\n    if (!entity) {\n      throw new NotFoundError(\n        `Unable to get metadata for '${stringifyEntityRef(entityName)}'`,\n      );\n    }\n\n    try {\n      const techdocsMetadata = await publisher.fetchTechDocsMetadata(\n        entityName,\n      );\n\n      res.json(techdocsMetadata);\n    } catch (err) {\n      logger.info(\n        `Unable to get metadata for '${stringifyEntityRef(\n          entityName,\n        )}' with error ${err}`,\n      );\n      throw new NotFoundError(\n        `Unable to get metadata for '${stringifyEntityRef(entityName)}'`,\n        err,\n      );\n    }\n  });\n\n  router.get('/metadata/entity/:namespace/:kind/:name', async (req, res) => {\n    const { kind, namespace, name } = req.params;\n    const entityName = { kind, namespace, name };\n\n    const credentials = await httpAuth.credentials(req);\n\n    const { token } = await auth.getPluginRequestToken({\n      onBehalfOf: credentials,\n      targetPluginId: 'catalog',\n    });\n\n    const entity = await entityLoader.load(credentials, entityName, token);\n\n    if (!entity) {\n      throw new NotFoundError(\n        `Unable to get metadata for '${stringifyEntityRef(entityName)}'`,\n      );\n    }\n\n    try {\n      const locationMetadata = getLocationForEntity(entity, scmIntegrations);\n      res.json({ ...entity, locationMetadata });\n    } catch (err) {\n      logger.info(\n        `Unable to get metadata for '${stringifyEntityRef(\n          entityName,\n        )}' with error ${err}`,\n      );\n      throw new NotFoundError(\n        `Unable to get metadata for '${stringifyEntityRef(entityName)}'`,\n        err,\n      );\n    }\n  });\n\n  // Check if docs are the latest version and trigger rebuilds if not\n  // Responds with an event-stream that closes after the build finished\n  // Responds with an immediate success if rebuild not needed\n  // If a build is required, responds with a success when finished\n  router.get('/sync/:namespace/:kind/:name', async (req, res) => {\n    const { kind, namespace, name } = req.params;\n\n    const credentials = await httpAuth.credentials(req);\n\n    const { token } = await auth.getPluginRequestToken({\n      onBehalfOf: credentials,\n      targetPluginId: 'catalog',\n    });\n\n    const entity = await entityLoader.load(\n      credentials,\n      { kind, namespace, name },\n      token,\n    );\n\n    if (!entity?.metadata?.uid) {\n      throw new NotFoundError('Entity metadata UID missing');\n    }\n\n    const responseHandler: DocsSynchronizerSyncOpts = createEventStream(res);\n\n    // By default, techdocs-backend will only try to build documentation for an entity if techdocs.builder is set to\n    // 'local'. If set to 'external', it will assume that an external process (e.g. CI/CD pipeline\n    // of the repository) is responsible for building and publishing documentation to the storage provider.\n    // Altering the implementation of the injected docsBuildStrategy allows for more complex behaviours, based on\n    // either config or the properties of the entity (e.g. annotations, labels, spec fields etc.).\n    const shouldBuild = await docsBuildStrategy.shouldBuild({ entity });\n    if (!shouldBuild) {\n      // However, if caching is enabled, take the opportunity to check and\n      // invalidate stale cache entries.\n      if (cache) {\n        const { token: techDocsToken } = await auth.getPluginRequestToken({\n          onBehalfOf: await auth.getOwnServiceCredentials(),\n          targetPluginId: 'techdocs',\n        });\n        await docsSynchronizer.doCacheSync({\n          responseHandler,\n          discovery,\n          token: techDocsToken,\n          entity,\n        });\n        return;\n      }\n      responseHandler.finish({ updated: false });\n      return;\n    }\n\n    // Set the synchronization and build process if \"out-of-the-box\" configuration is provided.\n    if (isOutOfTheBoxOption(options)) {\n      const { preparers, generators } = options;\n\n      await docsSynchronizer.doSync({\n        responseHandler,\n        entity,\n        preparers,\n        generators,\n      });\n      return;\n    }\n\n    responseHandler.error(\n      new Error(\n        \"Invalid configuration. docsBuildStrategy.shouldBuild returned 'true', but no 'preparer' was provided to the router initialization.\",\n      ),\n    );\n  });\n\n  // Ensures that the related entity exists and the current user has permission to view it.\n  if (config.getOptionalBoolean('permission.enabled')) {\n    router.use(\n      '/static/docs/:namespace/:kind/:name',\n      async (req, _res, next) => {\n        const { kind, namespace, name } = req.params;\n        const entityName = { kind, namespace, name };\n\n        const credentials = await httpAuth.credentials(req, {\n          allowLimitedAccess: true,\n        });\n\n        const { token } = await auth.getPluginRequestToken({\n          onBehalfOf: credentials,\n          targetPluginId: 'catalog',\n        });\n\n        const entity = await entityLoader.load(credentials, entityName, token);\n\n        if (!entity) {\n          throw new NotFoundError(\n            `Entity not found for ${stringifyEntityRef(entityName)}`,\n          );\n        }\n\n        next();\n      },\n    );\n  }\n\n  // If a cache manager was provided, attach the cache middleware.\n  if (cache) {\n    router.use(createCacheMiddleware({ logger, cache }));\n  }\n\n  // Route middleware which serves files from the storage set in the publisher.\n  router.use('/static/docs', publisher.docsRouter());\n\n  return router;\n}\n\n/**\n * Create an event-stream response that emits the events 'log', 'error', and 'finish'.\n *\n * @param res - the response to write the event-stream to\n * @returns A tuple of <log, error, finish> callbacks to emit messages. A call to 'error' or 'finish'\n *          will close the event-stream.\n */\nexport function createEventStream(\n  res: Response<any, any>,\n): DocsSynchronizerSyncOpts {\n  // Mandatory headers and http status to keep connection open\n  res.writeHead(200, {\n    Connection: 'keep-alive',\n    'Cache-Control': 'no-cache',\n    'Content-Type': 'text/event-stream',\n  });\n\n  // client closes connection\n  res.socket?.on('close', () => {\n    res.end();\n  });\n\n  // write the event to the stream\n  const send = (type: 'error' | 'finish' | 'log', data: any) => {\n    res.write(`event: ${type}\\ndata: ${JSON.stringify(data)}\\n\\n`);\n\n    // res.flush() is only available with the compression middleware\n    if (res.flush) {\n      res.flush();\n    }\n  };\n\n  return {\n    log: data => {\n      send('log', data);\n    },\n\n    error: e => {\n      send('error', e.message);\n      res.end();\n    },\n\n    finish: result => {\n      send('finish', result);\n      res.end();\n    },\n  };\n}\n"],"names":["Router","config","catalogClient","CatalogClient","DefaultDocsBuildStrategy","CachedEntityLoader","durationToMilliseconds","readDurationFromConfig","TechDocsCache","ScmIntegrations","DocsSynchronizer","NotFoundError","stringifyEntityRef","getLocationForEntity","createCacheMiddleware"],"mappings":"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"}