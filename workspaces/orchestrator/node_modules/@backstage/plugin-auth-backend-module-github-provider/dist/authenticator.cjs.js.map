{"version":3,"file":"authenticator.cjs.js","sources":["../src/authenticator.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Strategy as GithubStrategy } from 'passport-github2';\nimport {\n  createOAuthAuthenticator,\n  PassportOAuthAuthenticatorHelper,\n  PassportOAuthDoneCallback,\n  PassportProfile,\n} from '@backstage/plugin-auth-node';\n\nconst ACCESS_TOKEN_PREFIX = 'access-token-v2.';\n\n/** @public */\nexport const githubAuthenticator = createOAuthAuthenticator({\n  defaultProfileTransform:\n    PassportOAuthAuthenticatorHelper.defaultProfileTransform,\n  scopes: {\n    persist: true,\n    required: ['read:user'],\n  },\n  initialize({ callbackUrl, config }) {\n    const clientId = config.getString('clientId');\n    const clientSecret = config.getString('clientSecret');\n    const enterpriseInstanceUrl = config\n      .getOptionalString('enterpriseInstanceUrl')\n      ?.replace(/\\/$/, '');\n    const authorizationUrl = enterpriseInstanceUrl\n      ? `${enterpriseInstanceUrl}/login/oauth/authorize`\n      : undefined;\n    const tokenUrl = enterpriseInstanceUrl\n      ? `${enterpriseInstanceUrl}/login/oauth/access_token`\n      : undefined;\n    const userProfileUrl = enterpriseInstanceUrl\n      ? `${enterpriseInstanceUrl}/api/v3/user`\n      : undefined;\n\n    return PassportOAuthAuthenticatorHelper.from(\n      new GithubStrategy(\n        {\n          clientID: clientId,\n          clientSecret: clientSecret,\n          callbackURL: callbackUrl,\n          tokenURL: tokenUrl,\n          userProfileURL: userProfileUrl,\n          authorizationURL: authorizationUrl,\n        },\n        (\n          accessToken: string,\n          refreshToken: string,\n          params: any,\n          fullProfile: PassportProfile,\n          done: PassportOAuthDoneCallback,\n        ) => {\n          done(\n            undefined,\n            { fullProfile, params, accessToken },\n            { refreshToken },\n          );\n        },\n      ),\n    );\n  },\n\n  async start(input, helper) {\n    return helper.start(input, {\n      accessType: 'offline',\n      prompt: 'consent',\n    });\n  },\n\n  async authenticate(input, helper) {\n    const { fullProfile, session } = await helper.authenticate(input);\n\n    // If we do not have a real refresh token and we have a non-expiring\n    // access token, then we use that as our refresh token.\n    if (!session.refreshToken && !session.expiresInSeconds) {\n      session.refreshToken = ACCESS_TOKEN_PREFIX + session.accessToken;\n    }\n    return { fullProfile, session };\n  },\n\n  async refresh(input, helper) {\n    // This is the OAuth App flow. A non-expiring access token is stored in the\n    // refresh token cookie. We use that token to fetch the user profile and\n    // refresh the Backstage session when needed.\n    if (input.refreshToken?.startsWith(ACCESS_TOKEN_PREFIX)) {\n      if (!input.scopeAlreadyGranted) {\n        throw new Error(\n          'Refresh failed, session has not been granted the requested scope',\n        );\n      }\n      const accessToken = input.refreshToken.slice(ACCESS_TOKEN_PREFIX.length);\n\n      const fullProfile = await helper\n        .fetchProfile(accessToken)\n        .catch(error => {\n          if (error.oauthError?.statusCode === 401) {\n            throw new Error('Invalid access token');\n          }\n          throw error;\n        });\n\n      return {\n        fullProfile,\n        session: {\n          accessToken,\n          tokenType: 'bearer',\n          scope: input.scope,\n          refreshToken: input.refreshToken,\n          // No expiration\n        },\n      };\n    }\n\n    // This is the App flow, which is close to a standard OAuth refresh flow. It has a\n    // pretty long session expiration, and it also ignores the requested scope, instead\n    // just allowing access to whatever is configured as part of the app installation.\n    return helper.refresh(input);\n  },\n});\n"],"names":["createOAuthAuthenticator","PassportOAuthAuthenticatorHelper","GithubStrategy"],"mappings":"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"}