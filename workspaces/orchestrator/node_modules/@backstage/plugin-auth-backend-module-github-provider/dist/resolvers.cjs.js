'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');
var zod = require('zod');

exports.githubSignInResolvers = void 0;
((githubSignInResolvers2) => {
  githubSignInResolvers2.usernameMatchingUserEntityName = pluginAuthNode.createSignInResolverFactory({
    optionsSchema: zod.z.object({
      dangerouslyAllowSignInWithoutUserInCatalog: zod.z.boolean().optional()
    }).optional(),
    create(options = {}) {
      return async (info, ctx) => {
        const { fullProfile } = info.result;
        const userId = fullProfile.username;
        if (!userId) {
          throw new Error(`GitHub user profile does not contain a username`);
        }
        return ctx.signInWithCatalogUser(
          {
            entityRef: { name: userId }
          },
          {
            dangerousEntityRefFallback: options?.dangerouslyAllowSignInWithoutUserInCatalog ? { entityRef: { name: userId } } : void 0
          }
        );
      };
    }
  });
})(exports.githubSignInResolvers || (exports.githubSignInResolvers = {}));
//# sourceMappingURL=resolvers.cjs.js.map
