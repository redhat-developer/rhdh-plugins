'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var errors = require('@backstage/errors');
var octokit = require('octokit');
var util = require('../util.cjs.js');
var githubIssuesCreate_examples = require('./githubIssuesCreate.examples.cjs.js');

function createGithubIssuesCreateAction(options) {
  const { integrations, githubCredentialsProvider } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "github:issues:create",
    description: "Creates an issue on GitHub.",
    examples: githubIssuesCreate_examples.examples,
    supportsDryRun: true,
    schema: {
      input: {
        repoUrl: (z) => z.string({
          description: "Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the repository name and `owner` is an organization or username"
        }),
        title: (z) => z.string({
          description: "The title of the issue"
        }),
        body: (z) => z.string({
          description: "The contents of the issue"
        }).optional(),
        assignees: (z) => z.array(z.string(), {
          description: "Logins for Users to assign to this issue. NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise."
        }).optional(),
        milestone: (z) => z.union([z.string(), z.number()], {
          description: "The number of the milestone to associate this issue with. NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise."
        }).optional(),
        labels: (z) => z.array(z.string(), {
          description: "Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise."
        }).optional(),
        token: (z) => z.string({
          description: "The `GITHUB_TOKEN` to use for authorization to GitHub"
        }).optional()
      },
      output: {
        issueUrl: (z) => z.string({
          description: "The URL of the created issue"
        }),
        issueNumber: (z) => z.number({
          description: "The number of the created issue"
        })
      }
    },
    async handler(ctx) {
      const {
        repoUrl,
        title,
        body,
        assignees,
        milestone,
        labels,
        token: providedToken
      } = ctx.input;
      const { host, owner, repo } = pluginScaffolderNode.parseRepoUrl(repoUrl, integrations);
      ctx.logger.info(`Creating issue "${title}" on repo ${repo}`);
      if (!owner) {
        throw new errors.InputError("Invalid repository owner provided in repoUrl");
      }
      const octokitOptions = await util.getOctokitOptions({
        integrations,
        credentialsProvider: githubCredentialsProvider,
        host,
        owner,
        repo,
        token: providedToken
      });
      const client = new octokit.Octokit({
        ...octokitOptions,
        log: ctx.logger
      });
      if (ctx.isDryRun) {
        ctx.logger.info(`Performing dry run of creating issue "${title}"`);
        ctx.output("issueUrl", `https://github.com/${owner}/${repo}/issues/42`);
        ctx.output("issueNumber", 42);
        ctx.logger.info(`Dry run complete`);
        return;
      }
      try {
        const issue = await ctx.checkpoint({
          key: `github.issues.create.${owner}.${repo}.${title}`,
          fn: async () => {
            const response = await client.rest.issues.create({
              owner,
              repo,
              title,
              body,
              assignees,
              milestone,
              labels
            });
            return {
              html_url: response.data.html_url,
              number: response.data.number
            };
          }
        });
        if (!issue) {
          throw new Error("Failed to create issue");
        }
        ctx.output("issueUrl", issue.html_url);
        ctx.output("issueNumber", issue.number);
        ctx.logger.info(
          `Successfully created issue #${issue.number}: ${issue.html_url}`
        );
      } catch (e) {
        errors.assertError(e);
        ctx.logger.warn(
          `Failed: creating issue '${title}' on repo: '${repo}', ${e.message}`
        );
        throw e;
      }
    }
  });
}

exports.createGithubIssuesCreateAction = createGithubIssuesCreateAction;
//# sourceMappingURL=githubIssuesCreate.cjs.js.map
