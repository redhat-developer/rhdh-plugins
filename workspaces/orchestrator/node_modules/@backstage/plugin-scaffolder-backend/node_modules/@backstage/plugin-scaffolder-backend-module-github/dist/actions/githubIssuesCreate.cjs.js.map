{"version":3,"file":"githubIssuesCreate.cjs.js","sources":["../../src/actions/githubIssuesCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { assertError, InputError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from '../util';\nimport { examples } from './githubIssuesCreate.examples';\n\n/**\n * Creates an issue on GitHub\n * @public\n */\nexport function createGithubIssuesCreateAction(options: {\n  integrations: ScmIntegrationRegistry;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction({\n    id: 'github:issues:create',\n    description: 'Creates an issue on GitHub.',\n    examples,\n    supportsDryRun: true,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description:\n              'Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the repository name and `owner` is an organization or username',\n          }),\n        title: z =>\n          z.string({\n            description: 'The title of the issue',\n          }),\n        body: z =>\n          z\n            .string({\n              description: 'The contents of the issue',\n            })\n            .optional(),\n        assignees: z =>\n          z\n            .array(z.string(), {\n              description:\n                'Logins for Users to assign to this issue. NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise.',\n            })\n            .optional(),\n        milestone: z =>\n          z\n            .union([z.string(), z.number()], {\n              description:\n                'The number of the milestone to associate this issue with. NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise.',\n            })\n            .optional(),\n        labels: z =>\n          z\n            .array(z.string(), {\n              description:\n                'Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description:\n                'The `GITHUB_TOKEN` to use for authorization to GitHub',\n            })\n            .optional(),\n      },\n      output: {\n        issueUrl: z =>\n          z.string({\n            description: 'The URL of the created issue',\n          }),\n        issueNumber: z =>\n          z.number({\n            description: 'The number of the created issue',\n          }),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        title,\n        body,\n        assignees,\n        milestone,\n        labels,\n        token: providedToken,\n      } = ctx.input;\n\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n      ctx.logger.info(`Creating issue \"${title}\" on repo ${repo}`);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        host,\n        owner,\n        repo,\n        token: providedToken,\n      });\n\n      const client = new Octokit({\n        ...octokitOptions,\n        log: ctx.logger,\n      });\n\n      if (ctx.isDryRun) {\n        ctx.logger.info(`Performing dry run of creating issue \"${title}\"`);\n        ctx.output('issueUrl', `https://github.com/${owner}/${repo}/issues/42`);\n        ctx.output('issueNumber', 42);\n        ctx.logger.info(`Dry run complete`);\n        return;\n      }\n\n      try {\n        const issue = await ctx.checkpoint({\n          key: `github.issues.create.${owner}.${repo}.${title}`,\n          fn: async () => {\n            const response = await client.rest.issues.create({\n              owner,\n              repo,\n              title,\n              body,\n              assignees,\n              milestone,\n              labels,\n            });\n\n            return {\n              html_url: response.data.html_url,\n              number: response.data.number,\n            };\n          },\n        });\n\n        if (!issue) {\n          throw new Error('Failed to create issue');\n        }\n\n        ctx.output('issueUrl', issue.html_url);\n        ctx.output('issueNumber', issue.number);\n\n        ctx.logger.info(\n          `Successfully created issue #${issue.number}: ${issue.html_url}`,\n        );\n      } catch (e) {\n        assertError(e);\n        ctx.logger.warn(\n          `Failed: creating issue '${title}' on repo: '${repo}', ${e.message}`,\n        );\n        throw e;\n      }\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getOctokitOptions","Octokit","assertError"],"mappings":"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"}