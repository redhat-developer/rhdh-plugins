{"version":3,"file":"githubWebhook.cjs.js","sources":["../../src/actions/githubWebhook.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { emitterEventNames } from '@octokit/webhooks';\nimport { assertError, InputError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from '../util';\nimport { examples } from './githubWebhook.examples';\n\n/**\n * Creates new action that creates a webhook for a repository on GitHub.\n * @public\n */\nexport function createGithubWebhookAction(options: {\n  integrations: ScmIntegrationRegistry;\n  defaultWebhookSecret?: string;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, defaultWebhookSecret, githubCredentialsProvider } =\n    options;\n\n  const eventNames = emitterEventNames.filter(event => !event.includes('.'));\n\n  return createTemplateAction({\n    id: 'github:webhook',\n    description: 'Creates webhook for a repository on GitHub.',\n    examples,\n    supportsDryRun: true,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description:\n              'Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the new repository name and `owner` is an organization or username',\n          }),\n        webhookUrl: z =>\n          z.string({\n            description: 'The URL to which the payloads will be delivered',\n          }),\n        webhookSecret: z =>\n          z\n            .string({\n              description:\n                'Webhook secret value. The default can be provided internally in action creation',\n            })\n            .optional(),\n        events: z =>\n          z\n            .union([\n              z.array(z.enum(eventNames as [string, ...string[]]), {\n                description:\n                  'Determines what events the hook is triggered for. Default: `[push]`',\n              }),\n              z.array(z.literal('*'), {\n                description:\n                  'Determines what events the hook is triggered for. Use \"*\" for all events. Default: `[push]`',\n              }),\n            ])\n            .default(['push'])\n            .optional(),\n        active: z =>\n          z\n            .boolean({\n              description:\n                'Determines if notifications are sent when the webhook is triggered. Default: `true`',\n            })\n            .default(true)\n            .optional(),\n        contentType: z =>\n          z\n            .enum(['form', 'json'], {\n              description:\n                'The media type used to serialize the payloads. The default is `form`',\n            })\n            .default('form')\n            .optional(),\n        insecureSsl: z =>\n          z\n            .boolean({\n              description:\n                'Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Default `false`',\n            })\n            .default(false)\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description:\n                'The `GITHUB_TOKEN` to use for authorization to GitHub',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        webhookUrl,\n        webhookSecret = defaultWebhookSecret,\n        events = ['push'],\n        active = true,\n        contentType = 'form',\n        insecureSsl = false,\n        token: providedToken,\n      } = ctx.input;\n\n      ctx.logger.info(`Creating webhook ${webhookUrl} for repo ${repoUrl}`);\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        host,\n        owner,\n        repo,\n        token: providedToken,\n      });\n      const client = new Octokit({\n        ...octokitOptions,\n        log: ctx.logger,\n      });\n\n      // If this is a dry run, log and return\n      if (ctx.isDryRun) {\n        ctx.logger.info(`Dry run complete`);\n        return;\n      }\n\n      try {\n        const insecure_ssl = insecureSsl ? '1' : '0';\n\n        await ctx.checkpoint({\n          key: `create.webhhook.${owner}.${repo}.${webhookUrl}`,\n          fn: async () => {\n            await client.rest.repos.createWebhook({\n              owner,\n              repo,\n              config: {\n                url: webhookUrl,\n                content_type: contentType,\n                secret: webhookSecret,\n                insecure_ssl,\n              },\n              events,\n              active,\n            });\n          },\n        });\n\n        ctx.logger.info(`Webhook '${webhookUrl}' created successfully`);\n      } catch (e) {\n        assertError(e);\n        ctx.logger.warn(\n          `Failed: create webhook '${webhookUrl}' on repo: '${repo}', ${e.message}`,\n        );\n      }\n    },\n  });\n}\n"],"names":["emitterEventNames","createTemplateAction","examples","parseRepoUrl","InputError","getOctokitOptions","Octokit","assertError"],"mappings":"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"}