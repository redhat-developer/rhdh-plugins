'use strict';

var errors = require('@backstage/errors');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var octokit = require('octokit');
var util = require('../util.cjs.js');
var githubActionsDispatch_examples = require('./githubActionsDispatch.examples.cjs.js');

function createGithubActionsDispatchAction(options) {
  const { integrations, githubCredentialsProvider } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "github:actions:dispatch",
    description: "Dispatches a GitHub Action workflow for a given branch or tag",
    examples: githubActionsDispatch_examples.examples,
    schema: {
      input: {
        repoUrl: (z) => z.string({
          description: "Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the new repository name and `owner` is an organization or username"
        }),
        workflowId: (z) => z.string({
          description: "The GitHub Action Workflow filename"
        }),
        branchOrTagName: (z) => z.string({
          description: "The git branch or tag name used to dispatch the workflow"
        }),
        workflowInputs: (z) => z.record(z.string(), {
          description: "Inputs keys and values to send to GitHub Action configured on the workflow file. The maximum number of properties is 10."
        }).optional(),
        token: (z) => z.string({
          description: "The `GITHUB_TOKEN` to use for authorization to GitHub"
        }).optional()
      }
    },
    async handler(ctx) {
      const {
        repoUrl,
        workflowId,
        branchOrTagName,
        workflowInputs,
        token: providedToken
      } = ctx.input;
      ctx.logger.info(
        `Dispatching workflow ${workflowId} for repo ${repoUrl} on ${branchOrTagName}`
      );
      const { host, owner, repo } = pluginScaffolderNode.parseRepoUrl(repoUrl, integrations);
      if (!owner) {
        throw new errors.InputError("Invalid repository owner provided in repoUrl");
      }
      const octokitOptions = await util.getOctokitOptions({
        integrations,
        host,
        owner,
        repo,
        credentialsProvider: githubCredentialsProvider,
        token: providedToken
      });
      const client = new octokit.Octokit({
        ...octokitOptions,
        log: ctx.logger
      });
      await ctx.checkpoint({
        key: `create.workflow.dispatch.${owner}.${repo}.${workflowId}`,
        fn: async () => {
          await client.rest.actions.createWorkflowDispatch({
            owner,
            repo,
            workflow_id: workflowId,
            ref: branchOrTagName,
            inputs: workflowInputs
          });
          ctx.logger.info(`Workflow ${workflowId} dispatched successfully`);
        }
      });
    }
  });
}

exports.createGithubActionsDispatchAction = createGithubActionsDispatchAction;
//# sourceMappingURL=githubActionsDispatch.cjs.js.map
