{"version":3,"file":"helpers.cjs.js","sources":["../../src/actions/helpers.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { assertError, NotFoundError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\n\nimport {\n  getRepoSourceDirectory,\n  initRepoAndPush,\n} from '@backstage/plugin-scaffolder-node';\n\nimport Sodium from 'libsodium-wrappers';\nimport {\n  enableBranchProtectionOnDefaultRepoBranch,\n  entityRefToName,\n} from './gitHelpers';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nexport async function createGithubRepoWithCollaboratorsAndTopics(\n  client: Octokit,\n  repo: string,\n  owner: string,\n  repoVisibility: 'private' | 'internal' | 'public' | undefined,\n  description: string | undefined,\n  homepage: string | undefined,\n  deleteBranchOnMerge: boolean,\n  allowMergeCommit: boolean,\n  allowSquashMerge: boolean,\n  squashMergeCommitTitle: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE' | undefined,\n  squashMergeCommitMessage: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK' | undefined,\n  allowRebaseMerge: boolean,\n  allowAutoMerge: boolean,\n  allowUpdateBranch: boolean,\n  access: string | undefined,\n  collaborators:\n    | (\n        | {\n            user: string;\n            access: string;\n          }\n        | {\n            team: string;\n            access: string;\n          }\n        | {\n            /** @deprecated This field is deprecated in favor of team */\n            username: string;\n            access: 'pull' | 'push' | 'admin' | 'maintain' | 'triage';\n          }\n      )[]\n    | undefined,\n  hasProjects: boolean | undefined,\n  hasWiki: boolean | undefined,\n  hasIssues: boolean | undefined,\n  topics: string[] | undefined,\n  repoVariables: { [key: string]: string } | undefined,\n  secrets: { [key: string]: string } | undefined,\n  oidcCustomization:\n    | {\n        useDefault: boolean;\n        includeClaimKeys?: string[];\n      }\n    | undefined,\n  customProperties: { [key: string]: string | string[] } | undefined,\n  subscribe: boolean | undefined,\n  logger: LoggerService,\n  autoInit?: boolean | undefined,\n) {\n  // eslint-disable-next-line testing-library/no-await-sync-queries\n  const user = await client.rest.users.getByUsername({\n    username: owner,\n  });\n\n  if (access?.startsWith(`${owner}/`)) {\n    await validateAccessTeam(client, access);\n  }\n\n  const repoCreationPromise =\n    user.data.type === 'Organization'\n      ? client.rest.repos.createInOrg({\n          name: repo,\n          org: owner,\n          private: repoVisibility === 'private',\n          // @ts-ignore https://github.com/octokit/types.ts/issues/522\n          visibility: repoVisibility,\n          description: description,\n          delete_branch_on_merge: deleteBranchOnMerge,\n          allow_merge_commit: allowMergeCommit,\n          allow_squash_merge: allowSquashMerge,\n          squash_merge_commit_title: squashMergeCommitTitle,\n          squash_merge_commit_message: squashMergeCommitMessage,\n          allow_rebase_merge: allowRebaseMerge,\n          allow_auto_merge: allowAutoMerge,\n          allow_update_branch: allowUpdateBranch,\n          homepage: homepage,\n          has_projects: hasProjects,\n          has_wiki: hasWiki,\n          has_issues: hasIssues,\n          auto_init: autoInit,\n          // Custom properties only available on org repos\n          custom_properties: customProperties,\n        })\n      : client.rest.repos.createForAuthenticatedUser({\n          name: repo,\n          private: repoVisibility === 'private',\n          description: description,\n          delete_branch_on_merge: deleteBranchOnMerge,\n          allow_merge_commit: allowMergeCommit,\n          allow_squash_merge: allowSquashMerge,\n          squash_merge_commit_title: squashMergeCommitTitle,\n          squash_merge_commit_message: squashMergeCommitMessage,\n          allow_rebase_merge: allowRebaseMerge,\n          allow_auto_merge: allowAutoMerge,\n          allow_update_branch: allowUpdateBranch,\n          homepage: homepage,\n          has_projects: hasProjects,\n          has_wiki: hasWiki,\n          has_issues: hasIssues,\n          auto_init: autoInit,\n        });\n\n  let newRepo;\n\n  try {\n    newRepo = (await repoCreationPromise).data;\n  } catch (e) {\n    assertError(e);\n    if (e.message === 'Resource not accessible by integration') {\n      logger.warn(\n        `The GitHub app or token provided may not have the required permissions to create the ${user.data.type} repository ${owner}/${repo}.`,\n      );\n    }\n    throw new Error(\n      `Failed to create the ${user.data.type} repository ${owner}/${repo}, ${e.message}`,\n    );\n  }\n\n  if (access?.startsWith(`${owner}/`)) {\n    const [, team] = access.split('/');\n    await client.rest.teams.addOrUpdateRepoPermissionsInOrg({\n      org: owner,\n      team_slug: team,\n      owner,\n      repo,\n      permission: 'admin',\n    });\n    // No need to add access if it's the person who owns the personal account\n  } else if (access && access !== owner) {\n    await client.rest.repos.addCollaborator({\n      owner,\n      repo,\n      username: access,\n      permission: 'admin',\n    });\n  }\n\n  if (collaborators) {\n    for (const collaborator of collaborators) {\n      try {\n        if ('user' in collaborator) {\n          await client.rest.repos.addCollaborator({\n            owner,\n            repo,\n            username: entityRefToName(collaborator.user),\n            permission: collaborator.access,\n          });\n        } else if ('team' in collaborator) {\n          await client.rest.teams.addOrUpdateRepoPermissionsInOrg({\n            org: owner,\n            team_slug: entityRefToName(collaborator.team),\n            owner,\n            repo,\n            permission: collaborator.access,\n          });\n        }\n      } catch (e) {\n        assertError(e);\n        const name = extractCollaboratorName(collaborator);\n        logger.warn(\n          `Skipping ${collaborator.access} access for ${name}, ${e.message}`,\n        );\n      }\n    }\n  }\n\n  if (topics) {\n    try {\n      await client.rest.repos.replaceAllTopics({\n        owner,\n        repo,\n        names: topics.map(t => t.toLowerCase()),\n      });\n    } catch (e) {\n      assertError(e);\n      logger.warn(`Skipping topics ${topics.join(' ')}, ${e.message}`);\n    }\n  }\n\n  for (const [key, value] of Object.entries(repoVariables ?? {})) {\n    await client.rest.actions.createRepoVariable({\n      owner,\n      repo,\n      name: key,\n      value: value,\n    });\n  }\n\n  if (secrets) {\n    const publicKeyResponse = await client.rest.actions.getRepoPublicKey({\n      owner,\n      repo,\n    });\n\n    await Sodium.ready;\n    const binaryKey = Sodium.from_base64(\n      publicKeyResponse.data.key,\n      Sodium.base64_variants.ORIGINAL,\n    );\n    for (const [key, value] of Object.entries(secrets)) {\n      const binarySecret = Sodium.from_string(value);\n      const encryptedBinarySecret = Sodium.crypto_box_seal(\n        binarySecret,\n        binaryKey,\n      );\n      const encryptedBase64Secret = Sodium.to_base64(\n        encryptedBinarySecret,\n        Sodium.base64_variants.ORIGINAL,\n      );\n\n      await client.rest.actions.createOrUpdateRepoSecret({\n        owner,\n        repo,\n        secret_name: key,\n        encrypted_value: encryptedBase64Secret,\n        key_id: publicKeyResponse.data.key_id,\n      });\n    }\n  }\n\n  if (oidcCustomization) {\n    await client.request(\n      'PUT /repos/{owner}/{repo}/actions/oidc/customization/sub',\n      {\n        owner,\n        repo,\n        use_default: oidcCustomization.useDefault,\n        include_claim_keys: oidcCustomization.includeClaimKeys,\n      },\n    );\n  }\n\n  if (subscribe) {\n    await client.rest.activity.setRepoSubscription({\n      subscribed: true,\n      ignored: false,\n      owner,\n      repo,\n    });\n  }\n\n  return newRepo;\n}\n\nexport async function initRepoPushAndProtect(\n  remoteUrl: string,\n  password: string,\n  workspacePath: string,\n  sourcePath: string | undefined,\n  defaultBranch: string,\n  protectDefaultBranch: boolean,\n  protectEnforceAdmins: boolean,\n  owner: string,\n  client: Octokit,\n  repo: string,\n  requireCodeOwnerReviews: boolean,\n  bypassPullRequestAllowances:\n    | {\n        users?: string[];\n        teams?: string[];\n        apps?: string[];\n      }\n    | undefined,\n  requiredApprovingReviewCount: number,\n  restrictions:\n    | {\n        users: string[];\n        teams: string[];\n        apps?: string[];\n      }\n    | undefined,\n  requiredStatusCheckContexts: string[],\n  requireBranchesToBeUpToDate: boolean,\n  requiredConversationResolution: boolean,\n  requireLastPushApproval: boolean,\n  config: Config,\n  logger: any,\n  gitCommitMessage?: string,\n  gitAuthorName?: string,\n  gitAuthorEmail?: string,\n  dismissStaleReviews?: boolean,\n  requiredCommitSigning?: boolean,\n  requiredLinearHistory?: boolean,\n): Promise<{ commitHash: string }> {\n  const gitAuthorInfo = {\n    name: gitAuthorName\n      ? gitAuthorName\n      : config.getOptionalString('scaffolder.defaultAuthor.name'),\n    email: gitAuthorEmail\n      ? gitAuthorEmail\n      : config.getOptionalString('scaffolder.defaultAuthor.email'),\n  };\n\n  const commitMessage =\n    getGitCommitMessage(gitCommitMessage, config) || 'initial commit';\n\n  const commitResult = await initRepoAndPush({\n    dir: getRepoSourceDirectory(workspacePath, sourcePath),\n    remoteUrl,\n    defaultBranch,\n    auth: {\n      username: 'x-access-token',\n      password,\n    },\n    logger,\n    commitMessage,\n    gitAuthorInfo,\n  });\n\n  if (protectDefaultBranch) {\n    try {\n      await enableBranchProtectionOnDefaultRepoBranch({\n        owner,\n        client,\n        repoName: repo,\n        logger,\n        defaultBranch,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount,\n        restrictions,\n        requireCodeOwnerReviews,\n        requiredStatusCheckContexts,\n        requireBranchesToBeUpToDate,\n        requiredConversationResolution,\n        requireLastPushApproval,\n        enforceAdmins: protectEnforceAdmins,\n        dismissStaleReviews: dismissStaleReviews,\n        requiredCommitSigning: requiredCommitSigning,\n        requiredLinearHistory: requiredLinearHistory,\n      });\n    } catch (e) {\n      assertError(e);\n      logger.warn(\n        `Skipping: default branch protection on '${repo}', ${e.message}`,\n      );\n    }\n  }\n\n  return { commitHash: commitResult.commitHash };\n}\n\nfunction extractCollaboratorName(\n  collaborator: { user: string } | { team: string } | { username: string },\n) {\n  if ('username' in collaborator) return collaborator.username;\n  if ('user' in collaborator) return collaborator.user;\n  return collaborator.team;\n}\n\nasync function validateAccessTeam(client: Octokit, access: string) {\n  const [org, team_slug] = access.split('/');\n  try {\n    // Below rule disabled because of a 'getByName' check for a different library\n    // incorrectly triggers here.\n    // eslint-disable-next-line testing-library/no-await-sync-queries\n    await client.rest.teams.getByName({\n      org,\n      team_slug,\n    });\n  } catch (e) {\n    if (e.response.data.message === 'Not Found') {\n      const message = `Received 'Not Found' from the API; one of org:\n        ${org} or team: ${team_slug} was not found within GitHub.`;\n      throw new NotFoundError(message);\n    }\n  }\n}\n\nexport function getGitCommitMessage(\n  gitCommitMessage: string | undefined,\n  config: Config,\n): string | undefined {\n  return gitCommitMessage\n    ? gitCommitMessage\n    : config.getOptionalString('scaffolder.defaultCommitMessage');\n}\n"],"names":["assertError","entityRefToName","Sodium","initRepoAndPush","getRepoSourceDirectory","enableBranchProtectionOnDefaultRepoBranch","NotFoundError"],"mappings":"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"}