'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var errors = require('@backstage/errors');
var octokit = require('octokit');
var util = require('../util.cjs.js');
var githubIssuesLabel_examples = require('./githubIssuesLabel.examples.cjs.js');

function createGithubIssuesLabelAction(options) {
  const { integrations, githubCredentialsProvider } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "github:issues:label",
    description: "Adds labels to a pull request or issue on GitHub.",
    examples: githubIssuesLabel_examples.examples,
    schema: {
      input: {
        repoUrl: (z) => z.string({
          description: "Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the repository name and `owner` is an organization or username"
        }),
        number: (z) => z.number({
          description: "The pull request or issue number to add labels to"
        }),
        labels: (z) => z.array(z.string(), {
          description: "The labels to add to the pull request or issue"
        }),
        token: (z) => z.string({
          description: "The `GITHUB_TOKEN` to use for authorization to GitHub"
        }).optional()
      }
    },
    async handler(ctx) {
      const { repoUrl, number, labels, token: providedToken } = ctx.input;
      const { host, owner, repo } = pluginScaffolderNode.parseRepoUrl(repoUrl, integrations);
      ctx.logger.info(`Adding labels to ${number} issue on repo ${repo}`);
      if (!owner) {
        throw new errors.InputError("Invalid repository owner provided in repoUrl");
      }
      const octokitOptions = await util.getOctokitOptions({
        integrations,
        credentialsProvider: githubCredentialsProvider,
        host,
        owner,
        repo,
        token: providedToken
      });
      const client = new octokit.Octokit({
        ...octokitOptions,
        log: ctx.logger
      });
      try {
        await ctx.checkpoint({
          key: `github.issues.add.label.${owner}.${repo}.${number}`,
          fn: async () => {
            await client.rest.issues.addLabels({
              owner,
              repo,
              issue_number: number,
              labels
            });
          }
        });
      } catch (e) {
        errors.assertError(e);
        ctx.logger.warn(
          `Failed: adding labels to issue: '${number}' on repo: '${repo}', ${e.message}`
        );
      }
    }
  });
}

exports.createGithubIssuesLabelAction = createGithubIssuesLabelAction;
//# sourceMappingURL=githubIssuesLabel.cjs.js.map
