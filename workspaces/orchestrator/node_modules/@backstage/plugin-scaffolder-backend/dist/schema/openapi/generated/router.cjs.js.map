{"version":3,"file":"router.cjs.js","sources":["../../../../src/schema/openapi/generated/router.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// ******************************************************************\n// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *\n// ******************************************************************\nimport { createValidatedOpenApiRouterFromGeneratedEndpointMap } from '@backstage/backend-openapi-utils';\nimport { EndpointMap } from './apis';\n\nexport const spec = {\n  openapi: '3.0.3',\n  info: {\n    title: 'scaffolder',\n    version: '1',\n    description:\n      'The Backstage backend plugin that helps you create new things',\n    license: {\n      name: 'Apache-2.0',\n      url: 'http://www.apache.org/licenses/LICENSE-2.0.html',\n    },\n    contact: {},\n  },\n  servers: [\n    {\n      url: '/',\n    },\n  ],\n  components: {\n    examples: {},\n    headers: {},\n    parameters: {\n      createdBy: {\n        name: 'createdBy',\n        in: 'query',\n        description: 'Created by',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n      },\n      eventsAfter: {\n        name: 'after',\n        in: 'query',\n        description: 'Offset event ID to stream events after.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n        },\n      },\n      kind: {\n        name: 'kind',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      limit: {\n        name: 'limit',\n        in: 'query',\n        description: 'Number of records to return in the response.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n      namespace: {\n        name: 'namespace',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      name: {\n        name: 'name',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      offset: {\n        name: 'offset',\n        in: 'query',\n        description: 'Number of records to skip in the query page.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n      order: {\n        name: 'order',\n        in: 'query',\n        description: 'Order',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n      },\n      status: {\n        name: 'status',\n        in: 'query',\n        description: 'Status',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n      },\n      taskId: {\n        name: 'taskId',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n    },\n    requestBodies: {},\n    responses: {\n      ErrorResponse: {\n        description: 'An error response from the backend.',\n        content: {\n          'application/json; charset=utf-8': {\n            schema: {\n              $ref: '#/components/schemas/Error',\n            },\n          },\n        },\n      },\n    },\n    schemas: {\n      Action: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n          },\n          description: {\n            type: 'string',\n          },\n          \"'examples'\": {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/ActionExample',\n            },\n          },\n          schema: {\n            type: 'object',\n            properties: {\n              input: {\n                $ref: '#/components/schemas/JsonObject',\n              },\n              output: {\n                $ref: '#/components/schemas/JsonObject',\n              },\n            },\n          },\n        },\n        required: ['id'],\n        description:\n          'The response shape for a single action in the `listActions` call to the `scaffolder-backend`',\n      },\n      ActionExample: {\n        type: 'object',\n        properties: {\n          description: {\n            type: 'string',\n          },\n          example: {\n            type: 'string',\n          },\n        },\n        required: ['description', 'example'],\n        description: 'A single action example',\n      },\n      DryRunResult: {\n        type: 'object',\n        properties: {\n          log: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                body: {\n                  allOf: [\n                    {\n                      $ref: '#/components/schemas/JsonObject',\n                    },\n                    {\n                      type: 'object',\n                      properties: {\n                        message: {\n                          type: 'string',\n                        },\n                        status: {\n                          $ref: '#/components/schemas/TaskStatus',\n                        },\n                        stepId: {\n                          type: 'string',\n                        },\n                      },\n                      required: ['message'],\n                    },\n                  ],\n                },\n              },\n              required: ['body'],\n            },\n          },\n          directoryContents: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/SerializedFile',\n            },\n          },\n          output: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n        },\n        required: ['log', 'directoryContents', 'output'],\n      },\n      Error: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              name: {\n                type: 'string',\n              },\n              message: {\n                type: 'string',\n              },\n              stack: {\n                type: 'string',\n              },\n              code: {\n                type: 'string',\n              },\n            },\n            required: ['name', 'message'],\n          },\n          request: {\n            type: 'object',\n            properties: {\n              method: {\n                type: 'string',\n              },\n              url: {\n                type: 'string',\n              },\n            },\n            required: ['method', 'url'],\n          },\n          response: {\n            type: 'object',\n            properties: {\n              statusCode: {\n                type: 'number',\n              },\n            },\n            required: ['statusCode'],\n          },\n        },\n        required: ['error', 'response'],\n        additionalProperties: {},\n      },\n      JsonArray: {\n        type: 'array',\n        items: {\n          $ref: '#/components/schemas/JsonValue',\n        },\n        description: 'A type representing all allowed JSON array values.',\n      },\n      JsonObject: {\n        type: 'object',\n        properties: {},\n        description: 'A type representing all allowed JSON object values.',\n        additionalProperties: {},\n      },\n      JsonPrimitive: {\n        oneOf: [\n          {\n            type: 'boolean',\n          },\n          {\n            type: 'number',\n          },\n          {\n            type: 'string',\n          },\n          {\n            type: 'object',\n            nullable: true,\n          },\n        ],\n        description: 'A type representing all allowed JSON primitive values.',\n      },\n      JsonValue: {\n        oneOf: [\n          {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          {\n            $ref: '#/components/schemas/JsonArray',\n          },\n          {\n            $ref: '#/components/schemas/JsonPrimitive',\n          },\n        ],\n        description: 'A type representing all allowed JSON values.',\n      },\n      ListActionsResponse: {\n        type: 'array',\n        items: {\n          $ref: '#/components/schemas/Action',\n        },\n        description:\n          'The response shape for the `listActions` call to the `scaffolder-backend`',\n      },\n      ListTasksResponse: {\n        type: 'object',\n        properties: {\n          tasks: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/SerializedTask',\n            },\n          },\n          totalTasks: {\n            type: 'number',\n          },\n        },\n        required: ['tasks'],\n        description:\n          'The response shape for the `listTasks` call to the `scaffolder-backend`',\n      },\n      ListTemplatingExtensionsResponse: {\n        type: 'object',\n        properties: {\n          filters: {\n            type: 'object',\n            additionalProperties: {\n              $ref: '#/components/schemas/TemplateFilter',\n            },\n          },\n          globals: {\n            type: 'object',\n            properties: {\n              functions: {\n                type: 'object',\n                additionalProperties: {\n                  $ref: '#/components/schemas/TemplateGlobalFunction',\n                },\n              },\n              values: {\n                type: 'object',\n                additionalProperties: {\n                  $ref: '#/components/schemas/TemplateGlobalValue',\n                },\n              },\n            },\n            required: ['functions', 'values'],\n          },\n        },\n        required: ['filters', 'globals'],\n        description:\n          'The response shape for the `listTemplatingExtensions` call to the `scaffolder-backend`',\n      },\n      ScaffolderScaffoldOptions: {\n        type: 'object',\n        properties: {\n          templateRef: {\n            type: 'string',\n          },\n          values: {\n            type: 'object',\n            additionalProperties: {},\n          },\n          secrets: {\n            type: 'object',\n            additionalProperties: {\n              type: 'string',\n            },\n          },\n        },\n        required: ['templateRef', 'values'],\n        description:\n          'The input options to the `scaffold` method of the `ScaffolderClient`.',\n      },\n      ScaffolderUsageExample: {\n        type: 'object',\n        properties: {\n          description: {\n            type: 'string',\n          },\n          example: {\n            type: 'string',\n          },\n          notes: {\n            type: 'string',\n          },\n        },\n        required: ['example'],\n        description: 'A single scaffolder usage example',\n      },\n      SerializedFile: {\n        type: 'object',\n        properties: {\n          path: {\n            type: 'string',\n          },\n          content: {\n            type: 'string',\n          },\n          executable: {\n            type: 'boolean',\n          },\n          symlink: {\n            type: 'boolean',\n          },\n        },\n        required: ['path', 'content'],\n      },\n      SerializedTaskEvent: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          isTaskRecoverable: {\n            type: 'boolean',\n          },\n          taskId: {\n            type: 'string',\n          },\n          body: {\n            allOf: [\n              {\n                $ref: '#/components/schemas/JsonObject',\n              },\n              {\n                type: 'object',\n                properties: {\n                  message: {\n                    type: 'string',\n                  },\n                  status: {\n                    $ref: '#/components/schemas/TaskStatus',\n                  },\n                  stepId: {\n                    type: 'string',\n                  },\n                },\n                required: ['message'],\n              },\n            ],\n          },\n          type: {\n            $ref: '#/components/schemas/TaskEventType',\n          },\n          createdAt: {\n            type: 'string',\n          },\n        },\n        required: ['id', 'taskId', 'body', 'type', 'createdAt'],\n        description: 'SerializedTaskEvent',\n      },\n      SerializedTask: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n          },\n          spec: {\n            type: 'object',\n          },\n          status: {\n            $ref: '#/components/schemas/TaskStatus',\n          },\n          createdAt: {\n            type: 'string',\n          },\n          lastHeartbeatAt: {\n            type: 'string',\n          },\n          createdBy: {\n            type: 'string',\n          },\n          secrets: {\n            $ref: '#/components/schemas/TaskSecrets',\n          },\n          state: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n        },\n        required: ['id', 'spec', 'status', 'createdAt'],\n        description: 'SerializedTask',\n      },\n      TaskEventType: {\n        type: 'string',\n        description: 'TaskEventType',\n        enum: ['cancelled', 'completion', 'log', 'recovered'],\n      },\n      TaskSecrets: {\n        allOf: [\n          {\n            type: 'object',\n            additionalProperties: {\n              type: 'string',\n            },\n          },\n          {\n            type: 'object',\n            properties: {\n              backstageToken: {\n                type: 'string',\n              },\n            },\n          },\n        ],\n        description: 'TaskSecrets',\n      },\n      TaskStatus: {\n        type: 'string',\n        enum: [\n          'cancelled',\n          'completed',\n          'failed',\n          'open',\n          'processing',\n          'skipped',\n        ],\n        description: 'The status of each step of the Task',\n      },\n      TemplateGlobalFunction: {\n        type: 'object',\n        properties: {\n          description: {\n            type: 'string',\n          },\n          schema: {\n            type: 'object',\n            properties: {\n              arguments: {\n                type: 'array',\n                items: {\n                  $ref: '#/components/schemas/JsonObject',\n                },\n              },\n              output: {\n                $ref: '#/components/schemas/JsonObject',\n              },\n            },\n          },\n          \"'examples'\": {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/ScaffolderUsageExample',\n            },\n          },\n        },\n        description:\n          'The response shape for a single global function in the `listTemplatingExtensions` call to the `scaffolder-backend`',\n      },\n      TemplateGlobalValue: {\n        type: 'object',\n        properties: {\n          description: {\n            type: 'string',\n          },\n          value: {\n            type: 'object',\n            nullable: true,\n          },\n        },\n        required: ['value'],\n        description:\n          'The response shape for a single global value in the `listTemplatingExtensions` call to the `scaffolder-backend`',\n      },\n      TemplateFilter: {\n        type: 'object',\n        properties: {\n          description: {\n            type: 'string',\n          },\n          schema: {\n            type: 'object',\n            properties: {\n              input: {\n                $ref: '#/components/schemas/JsonObject',\n              },\n              arguments: {\n                type: 'array',\n                items: {\n                  $ref: '#/components/schemas/JsonObject',\n                },\n              },\n              output: {\n                $ref: '#/components/schemas/JsonObject',\n              },\n            },\n          },\n          \"'examples'\": {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/ScaffolderUsageExample',\n            },\n          },\n        },\n        description:\n          'The response shape for a single filter in the `listTemplatingExtensions` call to the `scaffolder-backend`',\n      },\n      TemplateParameterSchema: {\n        type: 'object',\n        properties: {\n          title: {\n            type: 'string',\n          },\n          description: {\n            type: 'string',\n          },\n          steps: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                title: {\n                  type: 'string',\n                },\n                description: {\n                  type: 'string',\n                },\n                schema: {\n                  type: 'object',\n                },\n              },\n              required: ['title', 'schema'],\n            },\n          },\n        },\n        required: ['title', 'steps'],\n        description:\n          'The shape of each entry of parameters which gets rendered\\nas a separate step in the wizard input',\n        additionalProperties: {},\n      },\n      ValidationError: {\n        type: 'object',\n        properties: {\n          path: {\n            type: 'array',\n            items: {\n              oneOf: [\n                {\n                  type: 'string',\n                },\n                {\n                  type: 'integer',\n                },\n              ],\n            },\n          },\n          property: {\n            type: 'string',\n          },\n          message: {\n            type: 'string',\n          },\n          instance: {\n            type: 'object',\n          },\n          name: {\n            type: 'string',\n          },\n          argument: {\n            oneOf: [\n              {\n                type: 'boolean',\n              },\n              {\n                type: 'number',\n              },\n              {\n                type: 'object',\n              },\n              {\n                type: 'string',\n              },\n            ],\n          },\n          stack: {\n            type: 'string',\n          },\n        },\n        required: [\n          'path',\n          'property',\n          'message',\n          'schema',\n          'instance',\n          'name',\n          'argument',\n          'stack',\n        ],\n        additionalProperties: {},\n      },\n    },\n    securitySchemes: {\n      JWT: {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n      },\n    },\n  },\n  paths: {\n    '/v2/templates/{namespace}/{kind}/{name}/parameter-schema': {\n      get: {\n        operationId: 'GetTemplateParameterSchema',\n        description: 'Get template parameter schema.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/TemplateParameterSchema',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/namespace',\n          },\n          {\n            $ref: '#/components/parameters/kind',\n          },\n          {\n            $ref: '#/components/parameters/name',\n          },\n        ],\n      },\n    },\n    '/v2/actions': {\n      get: {\n        operationId: 'ListActions',\n        description: 'Returns a list of all installed actions.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/ListActionsResponse',\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n      },\n    },\n    '/v2/tasks': {\n      get: {\n        operationId: 'ListTasks',\n        description:\n          'Returns a list of tasks, filtering by ownership and/or status if given.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/ListTasksResponse',\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/createdBy',\n          },\n          {\n            $ref: '#/components/parameters/limit',\n          },\n          {\n            $ref: '#/components/parameters/offset',\n          },\n          {\n            $ref: '#/components/parameters/order',\n          },\n          {\n            $ref: '#/components/parameters/status',\n          },\n        ],\n      },\n      post: {\n        operationId: 'Scaffold',\n        description:\n          'Executes the scaffolding of a component, given a template and its\\nparameter values.',\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                $ref: '#/components/schemas/ScaffolderScaffoldOptions',\n              },\n            },\n          },\n        },\n        responses: {\n          '201': {\n            description: 'Created',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string',\n                    },\n                  },\n                  required: ['id'],\n                },\n              },\n            },\n          },\n          '400': {\n            description: 'Validation errors.',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    errors: {\n                      type: 'array',\n                      items: {\n                        $ref: '#/components/schemas/ValidationError',\n                      },\n                    },\n                  },\n                  required: ['errors'],\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n      },\n    },\n    '/v2/tasks/{taskId}': {\n      get: {\n        operationId: 'GetTask',\n        description: 'Get a task by ID.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/SerializedTask',\n                },\n              },\n            },\n          },\n          '403': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/taskId',\n          },\n        ],\n      },\n    },\n    '/v2/tasks/{taskId}/cancel': {\n      post: {\n        operationId: 'CancelTask',\n        description:\n          'Sends a signal to a task broker to cancel the running task by taskId.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    status: {\n                      $ref: '#/components/schemas/TaskStatus',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/taskId',\n          },\n        ],\n      },\n    },\n    '/v2/tasks/{taskId}/retry': {\n      post: {\n        operationId: 'Retry',\n        description: 'Starts the task again from the point where it failed.',\n        requestBody: {\n          required: false,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  secrets: {\n                    type: 'object',\n                    additionalProperties: {\n                      type: 'string',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        responses: {\n          '201': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string',\n                    },\n                  },\n                  required: ['id'],\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/taskId',\n          },\n        ],\n      },\n    },\n    '/v2/tasks/{taskId}/events': {\n      get: {\n        operationId: 'StreamLogsPolling',\n        description: 'Get events for a task by ID.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'array',\n                  items: {\n                    $ref: '#/components/schemas/SerializedTaskEvent',\n                  },\n                },\n              },\n            },\n          },\n          '403': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        parameters: [\n          {\n            $ref: '#/components/parameters/eventsAfter',\n          },\n          {\n            $ref: '#/components/parameters/taskId',\n          },\n        ],\n      },\n    },\n    '/v2/dry-run': {\n      post: {\n        operationId: 'DryRun',\n        description: 'Perform a dry-run of a template',\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  template: {\n                    type: 'object',\n                  },\n                  values: {\n                    $ref: '#/components/schemas/JsonObject',\n                  },\n                  secrets: {\n                    type: 'object',\n                    additionalProperties: {\n                      type: 'string',\n                    },\n                  },\n                  directoryContents: {\n                    type: 'array',\n                    items: {\n                      type: 'object',\n                      properties: {\n                        path: {\n                          type: 'string',\n                        },\n                        base64Content: {\n                          type: 'string',\n                        },\n                      },\n                    },\n                  },\n                },\n                required: ['template', 'values', 'directoryContents'],\n              },\n            },\n          },\n        },\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  allOf: [\n                    {\n                      $ref: '#/components/schemas/DryRunResult',\n                    },\n                    {\n                      type: 'object',\n                      properties: {\n                        steps: {\n                          type: 'array',\n                          items: {\n                            type: 'object',\n                            properties: {\n                              id: {\n                                type: 'string',\n                              },\n                              name: {\n                                type: 'string',\n                              },\n                              action: {\n                                type: 'string',\n                              },\n                            },\n                            required: ['id', 'name', 'action'],\n                            additionalProperties: {},\n                          },\n                        },\n                        directoryContents: {\n                          type: 'array',\n                          items: {\n                            type: 'object',\n                            properties: {\n                              path: {\n                                type: 'string',\n                              },\n                              executable: {\n                                type: 'boolean',\n                              },\n                              base64Content: {\n                                type: 'string',\n                              },\n                            },\n                            required: ['path', 'base64Content'],\n                          },\n                        },\n                      },\n                      required: ['steps'],\n                    },\n                  ],\n                },\n              },\n            },\n          },\n          '400': {\n            description: 'Validation errors.',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    errors: {\n                      type: 'array',\n                      items: {\n                        $ref: '#/components/schemas/ValidationError',\n                      },\n                    },\n                  },\n                  required: ['errors'],\n                },\n              },\n            },\n          },\n        },\n        parameters: [],\n      },\n    },\n    '/v2/autocomplete/{provider}/{resource}': {\n      post: {\n        operationId: 'Autocomplete',\n        description:\n          'Perform an autocomplete for the given provider and resource.',\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  context: {\n                    type: 'object',\n                    additionalProperties: {\n                      type: 'string',\n                    },\n                  },\n                  token: {\n                    type: 'string',\n                  },\n                },\n                required: ['context', 'token'],\n              },\n            },\n          },\n        },\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    results: {\n                      type: 'array',\n                      items: {\n                        type: 'object',\n                        properties: {\n                          title: {\n                            type: 'string',\n                          },\n                          id: {\n                            type: 'string',\n                          },\n                        },\n                        required: ['id'],\n                      },\n                    },\n                  },\n                  required: ['results'],\n                },\n              },\n            },\n          },\n          '400': {\n            description: 'Unsupported provider.',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    message: {\n                      type: 'string',\n                    },\n                    name: {\n                      type: 'string',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        parameters: [\n          {\n            in: 'path',\n            name: 'provider',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            in: 'path',\n            name: 'resource',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n    },\n    '/v2/templating-extensions': {\n      get: {\n        operationId: 'ListTemplatingExtensions',\n        description:\n          'Returns a structure describing the available templating extensions.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/ListTemplatingExtensionsResponse',\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n      },\n    },\n  },\n} as const;\nexport const createOpenApiRouter = async (\n  options?: Parameters<\n    typeof createValidatedOpenApiRouterFromGeneratedEndpointMap\n  >['1'],\n) =>\n  createValidatedOpenApiRouterFromGeneratedEndpointMap<EndpointMap>(\n    spec,\n    options,\n  );\n"],"names":["createValidatedOpenApiRouterFromGeneratedEndpointMap"],"mappings":"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"}