{"version":3,"file":"filter.cjs.js","sources":["../../../../../src/lib/templating/filters/parseEntityRef/filter.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { parseEntityRef as filter } from '@backstage/catalog-model';\nimport { createTemplateFilter } from '@backstage/plugin-scaffolder-node/alpha';\nimport { examples } from './examples';\n\nexport const parseEntityRef = createTemplateFilter({\n  id: 'parseEntityRef',\n  description:\n    'Extracts the parts of an entity reference, such as the kind, namespace, and name.',\n  schema: z =>\n    z\n      .function()\n      .args(\n        z.union([\n          z.string().describe('compact entity reference'),\n          z\n            .object({\n              kind: z.string().optional(),\n              namespace: z.string().optional(),\n              name: z.string(),\n            })\n            .describe('`CompoundEntityRef`'),\n        ]),\n        z\n          .object({\n            defaultKind: z\n              .string()\n              .describe('The default kind, if none is given in the reference'),\n            defaultNamespace: z\n              .string()\n              .describe(\n                'The default namespace, if none is given in the reference',\n              ),\n          })\n          .partial()\n          .optional(),\n      )\n      .returns(\n        z\n          .object({\n            kind: z.string(),\n            namespace: z.string(),\n            name: z.string(),\n          })\n          .describe('`CompoundEntityRef`'),\n      ),\n  examples,\n  filter,\n});\n"],"names":["createTemplateFilter","examples","filter"],"mappings":";;;;;;AAmBO,MAAM,iBAAiBA,0BAAA,CAAqB;AAAA,EACjD,EAAA,EAAI,gBAAA;AAAA,EACJ,WAAA,EACE,mFAAA;AAAA,EACF,MAAA,EAAQ,CAAA,CAAA,KACN,CAAA,CACG,QAAA,EAAS,CACT,IAAA;AAAA,IACC,EAAE,KAAA,CAAM;AAAA,MACN,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,CAAS,0BAA0B,CAAA;AAAA,MAC9C,EACG,MAAA,CAAO;AAAA,QACN,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,QAC1B,SAAA,EAAW,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,QAC/B,IAAA,EAAM,EAAE,MAAA;AAAO,OAChB,CAAA,CACA,QAAA,CAAS,qBAAqB;AAAA,KAClC,CAAA;AAAA,IACD,EACG,MAAA,CAAO;AAAA,MACN,WAAA,EAAa,CAAA,CACV,MAAA,EAAO,CACP,SAAS,qDAAqD,CAAA;AAAA,MACjE,gBAAA,EAAkB,CAAA,CACf,MAAA,EAAO,CACP,QAAA;AAAA,QACC;AAAA;AACF,KACH,CAAA,CACA,OAAA,EAAQ,CACR,QAAA;AAAS,GACd,CACC,OAAA;AAAA,IACC,EACG,MAAA,CAAO;AAAA,MACN,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,SAAA,EAAW,EAAE,MAAA,EAAO;AAAA,MACpB,IAAA,EAAM,EAAE,MAAA;AAAO,KAChB,CAAA,CACA,QAAA,CAAS,qBAAqB;AAAA,GACnC;AAAA,YACJC,iBAAA;AAAA,UACAC;AACF,CAAC;;;;"}