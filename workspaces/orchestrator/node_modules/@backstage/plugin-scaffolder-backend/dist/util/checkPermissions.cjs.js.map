{"version":3,"file":"checkPermissions.cjs.js","sources":["../../src/util/checkPermissions.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  BackstageCredentials,\n  PermissionsService,\n} from '@backstage/backend-plugin-api';\nimport { NotAllowedError } from '@backstage/errors';\nimport {\n  AuthorizeResult,\n  BasicPermission,\n  PermissionCriteria,\n  PolicyDecision,\n  ResourcePermission,\n} from '@backstage/plugin-permission-common';\nimport { ConditionTransformer } from '@backstage/plugin-permission-node';\nimport { SerializedTask } from '@backstage/plugin-scaffolder-node';\nimport { TaskFilters } from '@backstage/plugin-scaffolder-node';\n\nexport type checkPermissionOptions = {\n  credentials: BackstageCredentials;\n  permissions: BasicPermission[];\n  permissionService?: PermissionsService;\n};\n\nexport type checkTaskPermissionOptions = {\n  credentials: BackstageCredentials;\n  permissions: ResourcePermission[];\n  permissionService?: PermissionsService;\n  task: SerializedTask;\n  isTaskAuthorized: (\n    decision: PolicyDecision,\n    resource: SerializedTask | undefined,\n  ) => boolean;\n};\n\nexport type authorizeConditionsOptions = {\n  credentials: BackstageCredentials;\n  permission: ResourcePermission;\n  permissionService?: PermissionsService;\n  transformConditions: ConditionTransformer<TaskFilters>;\n};\n\n/**\n * Does a basic check on permissions. Throws 403 error if any permission responds with AuthorizeResult.DENY\n * @public\n */\nexport async function checkPermission(options: checkPermissionOptions) {\n  const { permissions, permissionService, credentials } = options;\n  if (permissionService) {\n    const permissionRequest = permissions.map(permission => ({\n      permission,\n    }));\n    const authorizationResponses = await permissionService.authorize(\n      permissionRequest,\n      { credentials: credentials },\n    );\n\n    for (const response of authorizationResponses) {\n      if (response.result === AuthorizeResult.DENY) {\n        throw new NotAllowedError();\n      }\n    }\n  }\n}\n\n/**\n * Does a conditional permission check for scaffolder task reading and cancellation.\n * Throws 403 error if permission responds with AuthorizeResult.DENY, or does not resolve to true during the conditional rule check\n * @public\n */\nexport async function checkTaskPermission(options: checkTaskPermissionOptions) {\n  const {\n    permissions,\n    permissionService,\n    credentials,\n    task,\n    isTaskAuthorized,\n  } = options;\n  if (permissionService) {\n    const permissionRequest = permissions.map(permission => ({\n      permission,\n    }));\n    const authorizationResponses = await permissionService.authorizeConditional(\n      permissionRequest,\n      { credentials },\n    );\n    for (const response of authorizationResponses) {\n      if (\n        response.result === AuthorizeResult.DENY ||\n        !isTaskAuthorized(response, task)\n      ) {\n        throw new NotAllowedError();\n      }\n    }\n  }\n}\n\n/** Fetches and transforms authorization conditions into filters, or returns `undefined` if the decision is not conditional.\n * @public\n */\nexport const getAuthorizeConditions = async (\n  options: authorizeConditionsOptions,\n): Promise<PermissionCriteria<TaskFilters> | undefined> => {\n  const { permission, permissionService, credentials, transformConditions } =\n    options;\n  if (permissionService) {\n    const [taskDecision] = await permissionService.authorizeConditional(\n      [{ permission: permission }],\n      { credentials },\n    );\n    if (taskDecision.result === AuthorizeResult.CONDITIONAL) {\n      return transformConditions(taskDecision.conditions);\n    }\n  }\n  return undefined;\n};\n"],"names":["AuthorizeResult","NotAllowedError"],"mappings":";;;;;AA2DA,eAAsB,gBAAgB,OAAA,EAAiC;AACrE,EAAA,MAAM,EAAE,WAAA,EAAa,iBAAA,EAAmB,WAAA,EAAY,GAAI,OAAA;AACxD,EAAA,IAAI,iBAAA,EAAmB;AACrB,IAAA,MAAM,iBAAA,GAAoB,WAAA,CAAY,GAAA,CAAI,CAAA,UAAA,MAAe;AAAA,MACvD;AAAA,KACF,CAAE,CAAA;AACF,IAAA,MAAM,sBAAA,GAAyB,MAAM,iBAAA,CAAkB,SAAA;AAAA,MACrD,iBAAA;AAAA,MACA,EAAE,WAAA;AAAyB,KAC7B;AAEA,IAAA,KAAA,MAAW,YAAY,sBAAA,EAAwB;AAC7C,MAAA,IAAI,QAAA,CAAS,MAAA,KAAWA,sCAAA,CAAgB,IAAA,EAAM;AAC5C,QAAA,MAAM,IAAIC,sBAAA,EAAgB;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AACF;AAOA,eAAsB,oBAAoB,OAAA,EAAqC;AAC7E,EAAA,MAAM;AAAA,IACJ,WAAA;AAAA,IACA,iBAAA;AAAA,IACA,WAAA;AAAA,IACA,IAAA;AAAA,IACA;AAAA,GACF,GAAI,OAAA;AACJ,EAAA,IAAI,iBAAA,EAAmB;AACrB,IAAA,MAAM,iBAAA,GAAoB,WAAA,CAAY,GAAA,CAAI,CAAA,UAAA,MAAe;AAAA,MACvD;AAAA,KACF,CAAE,CAAA;AACF,IAAA,MAAM,sBAAA,GAAyB,MAAM,iBAAA,CAAkB,oBAAA;AAAA,MACrD,iBAAA;AAAA,MACA,EAAE,WAAA;AAAY,KAChB;AACA,IAAA,KAAA,MAAW,YAAY,sBAAA,EAAwB;AAC7C,MAAA,IACE,QAAA,CAAS,WAAWD,sCAAA,CAAgB,IAAA,IACpC,CAAC,gBAAA,CAAiB,QAAA,EAAU,IAAI,CAAA,EAChC;AACA,QAAA,MAAM,IAAIC,sBAAA,EAAgB;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AACF;AAKO,MAAM,sBAAA,GAAyB,OACpC,OAAA,KACyD;AACzD,EAAA,MAAM,EAAE,UAAA,EAAY,iBAAA,EAAmB,WAAA,EAAa,qBAAoB,GACtE,OAAA;AACF,EAAA,IAAI,iBAAA,EAAmB;AACrB,IAAA,MAAM,CAAC,YAAY,CAAA,GAAI,MAAM,iBAAA,CAAkB,oBAAA;AAAA,MAC7C,CAAC,EAAE,UAAA,EAAwB,CAAA;AAAA,MAC3B,EAAE,WAAA;AAAY,KAChB;AACA,IAAA,IAAI,YAAA,CAAa,MAAA,KAAWD,sCAAA,CAAgB,WAAA,EAAa;AACvD,MAAA,OAAO,mBAAA,CAAoB,aAAa,UAAU,CAAA;AAAA,IACpD;AAAA,EACF;AACA,EAAA,OAAO,MAAA;AACT;;;;;;"}