'use strict';

var zod = require('zod');
var zodToJsonSchema = require('zod-to-json-schema');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var zodToJsonSchema__default = /*#__PURE__*/_interopDefaultCompat(zodToJsonSchema);

function convertFiltersToRecord(filters) {
  if (!filters) {
    return {};
  }
  if (Array.isArray(filters)) {
    const result = {};
    for (const filter of filters) {
      result[filter.id] = filter.filter;
    }
    return result;
  }
  return filters;
}
function convertZodFunctionToJsonSchema(t) {
  if (!("parameters" in t) || !("returnType" in t)) {
    throw new Error("Invalid Zod function schema");
  }
  const args = t.parameters().items.map(
    (zt) => zodToJsonSchema__default.default(zt)
  );
  let output = void 0;
  const returnType = t.returnType();
  if (!returnType._unknown) {
    output = zodToJsonSchema__default.default(returnType);
  }
  const result = {};
  if (args.length > 0) {
    result.arguments = args;
  }
  if (output) {
    result.output = output;
  }
  return result;
}
function convertToFilterSchema(fnSchema) {
  if (fnSchema.arguments?.length) {
    const [input, ...rest] = fnSchema.arguments;
    const result = { input };
    if (rest.length > 0) {
      result.arguments = rest;
    }
    if (fnSchema.output) {
      result.output = fnSchema.output;
    }
    return result;
  }
  return fnSchema;
}
function extractFilterMetadata(filters) {
  if (!filters) {
    return {};
  }
  if (Array.isArray(filters)) {
    const result2 = {};
    for (const filter of filters) {
      const metadata = {};
      if (filter.description) {
        metadata.description = filter.description;
      }
      if (filter.examples) {
        metadata.examples = filter.examples;
      }
      if (filter.schema) {
        metadata.schema = convertToFilterSchema(
          convertZodFunctionToJsonSchema(
            filter.schema(zod.z)
          )
        );
      }
      result2[filter.id] = metadata;
    }
    return result2;
  }
  const result = {};
  for (const key in filters) {
    if (filters.hasOwnProperty(key)) {
      result[key] = {};
    }
  }
  return result;
}
function isGlobalFunction(global) {
  return "fn" in global;
}
function extractGlobalFunctionMetadata(globals) {
  if (!globals) {
    return {};
  }
  if (Array.isArray(globals)) {
    const result2 = {};
    for (const global of globals) {
      if (isGlobalFunction(global)) {
        const metadata = {};
        if (global.description) {
          metadata.description = global.description;
        }
        if (global.examples) {
          metadata.examples = global.examples;
        }
        if (global.schema) {
          metadata.schema = convertZodFunctionToJsonSchema(global.schema(zod.z));
        }
        result2[global.id] = metadata;
      }
    }
    return result2;
  }
  const result = {};
  for (const key in globals) {
    if (typeof globals[key] === "function") {
      result[key] = {};
    }
  }
  return result;
}
function extractGlobalValueMetadata(globals) {
  if (!globals) {
    return {};
  }
  if (Array.isArray(globals)) {
    const result2 = {};
    for (const global of globals) {
      if (!isGlobalFunction(global)) {
        result2[global.id] = {
          value: global.value,
          description: global.description
        };
      }
    }
    return result2;
  }
  const result = {};
  for (const key in globals) {
    if (typeof globals[key] !== "function") {
      result[key] = { value: globals[key] };
    }
  }
  return result;
}
function convertGlobalsToRecord(globals) {
  if (!globals) {
    return {};
  }
  if (!Array.isArray(globals)) {
    return globals;
  }
  const result = {};
  for (const global of globals) {
    result[global.id] = isGlobalFunction(global) ? global.fn : global.value;
  }
  return result;
}

exports.convertFiltersToRecord = convertFiltersToRecord;
exports.convertGlobalsToRecord = convertGlobalsToRecord;
exports.extractFilterMetadata = extractFilterMetadata;
exports.extractGlobalFunctionMetadata = extractGlobalFunctionMetadata;
exports.extractGlobalValueMetadata = extractGlobalValueMetadata;
//# sourceMappingURL=templating.cjs.js.map
