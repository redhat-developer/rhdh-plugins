{"version":3,"file":"metrics.cjs.js","sources":["../../src/util/metrics.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Counter,\n  CounterConfiguration,\n  Gauge,\n  GaugeConfiguration,\n  Histogram,\n  HistogramConfiguration,\n  register,\n  Summary,\n  SummaryConfiguration,\n} from 'prom-client';\n\nexport function createCounterMetric<T extends string>(\n  config: CounterConfiguration<T>,\n): Counter<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Counter<T>(config);\n    register.registerMetric(metric);\n  }\n  return metric as Counter<T>;\n}\n\nexport function createGaugeMetric<T extends string>(\n  config: GaugeConfiguration<T>,\n): Gauge<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Gauge<T>(config);\n    register.registerMetric(metric);\n  }\n  return metric as Gauge<T>;\n}\n\nexport function createSummaryMetric<T extends string>(\n  config: SummaryConfiguration<T>,\n): Summary<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Summary<T>(config);\n    register.registerMetric(metric);\n  }\n\n  return metric as Summary<T>;\n}\n\nexport function createHistogramMetric<T extends string>(\n  config: HistogramConfiguration<T>,\n): Histogram<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Histogram<T>(config);\n    register.registerMetric(metric);\n  }\n\n  return metric as Histogram<T>;\n}\n"],"names":["register","Counter","Histogram"],"mappings":";;;;AA4BO,SAAS,oBACd,MAAA,EACY;AACZ,EAAA,IAAI,MAAA,GAASA,mBAAA,CAAS,eAAA,CAAgB,MAAA,CAAO,IAAI,CAAA;AACjD,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,MAAA,GAAS,IAAIC,mBAAW,MAAM,CAAA;AAC9B,IAAAD,mBAAA,CAAS,eAAe,MAAM,CAAA;AAAA,EAChC;AACA,EAAA,OAAO,MAAA;AACT;AAyBO,SAAS,sBACd,MAAA,EACc;AACd,EAAA,IAAI,MAAA,GAASA,mBAAA,CAAS,eAAA,CAAgB,MAAA,CAAO,IAAI,CAAA;AACjD,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,MAAA,GAAS,IAAIE,qBAAa,MAAM,CAAA;AAChC,IAAAF,mBAAA,CAAS,eAAe,MAAM,CAAA;AAAA,EAChC;AAEA,EAAA,OAAO,MAAA;AACT;;;;;"}