{"version":3,"file":"templating.cjs.js","sources":["../../src/util/templating.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport {\n  CreatedTemplateFilter,\n  CreatedTemplateGlobal,\n  CreatedTemplateGlobalFunction,\n  CreatedTemplateGlobalValue,\n  ZodFunctionSchema,\n} from '@backstage/plugin-scaffolder-node/alpha';\nimport { JsonValue } from '@backstage/types';\nimport { Schema } from 'jsonschema';\nimport { ZodType, z } from 'zod';\nimport zodToJsonSchema from 'zod-to-json-schema';\n\n/**\n * Converts template filters to a record of filter functions\n */\nexport function convertFiltersToRecord(\n  filters?: Record<string, TemplateFilter> | CreatedTemplateFilter<any, any>[],\n): Record<string, TemplateFilter> {\n  if (!filters) {\n    return {};\n  }\n\n  if (Array.isArray(filters)) {\n    const result: Record<string, TemplateFilter> = {};\n    for (const filter of filters) {\n      result[filter.id] = filter.filter as TemplateFilter;\n    }\n    return result;\n  }\n\n  return filters;\n}\n\ntype ExportFunctionSchema = {\n  arguments?: Schema[];\n  output?: Schema;\n};\n\ntype ExportFilterSchema = {\n  input?: Schema;\n} & ExportFunctionSchema;\n\n/**\n * Converts a Zod function schema to JSON schema\n */\nfunction convertZodFunctionToJsonSchema(\n  t: ReturnType<ZodFunctionSchema<any, any>>,\n): ExportFunctionSchema {\n  if (!('parameters' in t) || !('returnType' in t)) {\n    throw new Error('Invalid Zod function schema');\n  }\n\n  const args = (t.parameters().items as ZodType[]).map(\n    zt => zodToJsonSchema(zt) as Schema,\n  );\n\n  let output: Schema | undefined = undefined;\n  const returnType = t.returnType();\n  if (!returnType._unknown) {\n    output = zodToJsonSchema(returnType) as Schema;\n  }\n\n  const result: ExportFunctionSchema = {};\n  if (args.length > 0) {\n    result.arguments = args;\n  }\n  if (output) {\n    result.output = output;\n  }\n\n  return result;\n}\n\n/**\n * Converts a function schema to a filter schema\n */\nfunction convertToFilterSchema(\n  fnSchema: ExportFunctionSchema,\n): ExportFilterSchema {\n  if (fnSchema.arguments?.length) {\n    const [input, ...rest] = fnSchema.arguments;\n    const result: ExportFilterSchema = { input };\n\n    if (rest.length > 0) {\n      result.arguments = rest;\n    }\n\n    if (fnSchema.output) {\n      result.output = fnSchema.output;\n    }\n\n    return result;\n  }\n  return fnSchema;\n}\n\ntype ExportFilter = Pick<\n  CreatedTemplateFilter<any, any>,\n  'description' | 'examples'\n> & {\n  schema?: ExportFilterSchema;\n};\n\n/**\n * Extracts metadata from template filters\n */\nexport function extractFilterMetadata(\n  filters?: Record<string, TemplateFilter> | CreatedTemplateFilter<any, any>[],\n): Record<string, ExportFilter> {\n  if (!filters) {\n    return {};\n  }\n\n  if (Array.isArray(filters)) {\n    const result: Record<string, ExportFilter> = {};\n\n    for (const filter of filters) {\n      const metadata: ExportFilter = {};\n\n      if (filter.description) {\n        metadata.description = filter.description;\n      }\n\n      if (filter.examples) {\n        metadata.examples = filter.examples;\n      }\n\n      if (filter.schema) {\n        metadata.schema = convertToFilterSchema(\n          convertZodFunctionToJsonSchema(\n            filter.schema(z) as z.ZodFunction<any, any>,\n          ),\n        );\n      }\n\n      result[filter.id] = metadata;\n    }\n\n    return result;\n  }\n\n  // For non-array filters, return empty metadata\n  const result: Record<string, ExportFilter> = {};\n  for (const key in filters) {\n    if (filters.hasOwnProperty(key)) {\n      result[key] = {};\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if a global is a function\n */\nfunction isGlobalFunction(\n  global: CreatedTemplateGlobal,\n): global is CreatedTemplateGlobalFunction<any, any> {\n  return 'fn' in global;\n}\n\n/**\n * Extracts metadata from template global functions\n */\nexport function extractGlobalFunctionMetadata(\n  globals?: Record<string, TemplateGlobal> | CreatedTemplateGlobal[],\n): Record<\n  string,\n  Pick<CreatedTemplateGlobalFunction<any, any>, 'description' | 'examples'> & {\n    schema?: ExportFunctionSchema;\n  }\n> {\n  if (!globals) {\n    return {};\n  }\n\n  if (Array.isArray(globals)) {\n    const result: Record<string, any> = {};\n\n    for (const global of globals) {\n      if (isGlobalFunction(global)) {\n        const metadata: any = {};\n\n        if (global.description) {\n          metadata.description = global.description;\n        }\n\n        if (global.examples) {\n          metadata.examples = global.examples;\n        }\n\n        if (global.schema) {\n          metadata.schema = convertZodFunctionToJsonSchema(global.schema(z));\n        }\n\n        result[global.id] = metadata;\n      }\n    }\n\n    return result;\n  }\n\n  // For non-array globals, extract function metadata\n  const result: Record<string, any> = {};\n  for (const key in globals) {\n    if (typeof globals[key] === 'function') {\n      result[key] = {};\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts metadata from template global values\n */\nexport function extractGlobalValueMetadata(\n  globals?: Record<string, TemplateGlobal> | CreatedTemplateGlobal[],\n): Record<string, Omit<CreatedTemplateGlobalValue, 'id'>> {\n  if (!globals) {\n    return {};\n  }\n\n  if (Array.isArray(globals)) {\n    const result: Record<string, Omit<CreatedTemplateGlobalValue, 'id'>> = {};\n\n    for (const global of globals) {\n      if (!isGlobalFunction(global)) {\n        result[global.id] = {\n          value: (global as CreatedTemplateGlobalValue).value,\n          description: global.description,\n        };\n      }\n    }\n\n    return result;\n  }\n\n  // For non-array globals, extract value metadata\n  const result: Record<string, Omit<CreatedTemplateGlobalValue, 'id'>> = {};\n  for (const key in globals) {\n    if (typeof globals[key] !== 'function') {\n      result[key] = { value: globals[key] as JsonValue };\n    }\n  }\n  return result;\n}\n\n/**\n * Converts template globals to a record of global values and functions\n */\nexport function convertGlobalsToRecord(\n  globals?: Record<string, TemplateGlobal> | CreatedTemplateGlobal[],\n): Record<string, TemplateGlobal> {\n  if (!globals) {\n    return {};\n  }\n\n  if (!Array.isArray(globals)) {\n    return globals;\n  }\n\n  const result: Record<string, TemplateGlobal> = {};\n  for (const global of globals) {\n    result[global.id] = isGlobalFunction(global)\n      ? (global.fn as TemplateGlobal)\n      : (global as CreatedTemplateGlobalValue).value;\n  }\n  return result;\n}\n"],"names":["zodToJsonSchema","result","z"],"mappings":"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"}