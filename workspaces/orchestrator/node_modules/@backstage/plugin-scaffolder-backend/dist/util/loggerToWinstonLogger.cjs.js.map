{"version":3,"file":"loggerToWinstonLogger.cjs.js","sources":["../../src/util/loggerToWinstonLogger.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Logger as WinstonLogger, createLogger } from 'winston';\nimport Transport, { TransportStreamOptions } from 'winston-transport';\n\nclass BackstageLoggerTransport extends Transport {\n  constructor(\n    private readonly backstageLogger: LoggerService,\n    opts?: TransportStreamOptions,\n  ) {\n    super(opts);\n  }\n\n  log(info: unknown, callback: VoidFunction) {\n    if (typeof info !== 'object' || info === null) {\n      callback();\n      return;\n    }\n    const { level, message, ...meta } = info as JsonObject;\n    switch (level) {\n      case 'error':\n        this.backstageLogger.error(String(message), meta);\n        break;\n      case 'warn':\n        this.backstageLogger.warn(String(message), meta);\n        break;\n      case 'info':\n        this.backstageLogger.info(String(message), meta);\n        break;\n      case 'debug':\n        this.backstageLogger.debug(String(message), meta);\n        break;\n      default:\n        this.backstageLogger.info(String(message), meta);\n    }\n    callback();\n  }\n}\n\n/**\n * A helper function to convert a Backstage LoggerService to a Winston Logger.\n * @internal\n */\nexport function loggerToWinstonLogger(\n  logger: LoggerService,\n  opts?: TransportStreamOptions,\n): WinstonLogger {\n  return createLogger({\n    transports: [new BackstageLoggerTransport(logger, opts)],\n  });\n}\n"],"names":["Transport","createLogger"],"mappings":";;;;;;;;;AAqBA,MAAM,iCAAiCA,0BAAA,CAAU;AAAA,EAC/C,WAAA,CACmB,iBACjB,IAAA,EACA;AACA,IAAA,KAAA,CAAM,IAAI,CAAA;AAHO,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA;AAAA,EAInB;AAAA,EAEA,GAAA,CAAI,MAAe,QAAA,EAAwB;AACzC,IAAA,IAAI,OAAO,IAAA,KAAS,QAAA,IAAY,IAAA,KAAS,IAAA,EAAM;AAC7C,MAAA,QAAA,EAAS;AACT,MAAA;AAAA,IACF;AACA,IAAA,MAAM,EAAE,KAAA,EAAO,OAAA,EAAS,GAAG,MAAK,GAAI,IAAA;AACpC,IAAA,QAAQ,KAAA;AAAO,MACb,KAAK,OAAA;AACH,QAAA,IAAA,CAAK,eAAA,CAAgB,KAAA,CAAM,MAAA,CAAO,OAAO,GAAG,IAAI,CAAA;AAChD,QAAA;AAAA,MACF,KAAK,MAAA;AACH,QAAA,IAAA,CAAK,eAAA,CAAgB,IAAA,CAAK,MAAA,CAAO,OAAO,GAAG,IAAI,CAAA;AAC/C,QAAA;AAAA,MACF,KAAK,MAAA;AACH,QAAA,IAAA,CAAK,eAAA,CAAgB,IAAA,CAAK,MAAA,CAAO,OAAO,GAAG,IAAI,CAAA;AAC/C,QAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAA,IAAA,CAAK,eAAA,CAAgB,KAAA,CAAM,MAAA,CAAO,OAAO,GAAG,IAAI,CAAA;AAChD,QAAA;AAAA,MACF;AACE,QAAA,IAAA,CAAK,eAAA,CAAgB,IAAA,CAAK,MAAA,CAAO,OAAO,GAAG,IAAI,CAAA;AAAA;AAEnD,IAAA,QAAA,EAAS;AAAA,EACX;AACF;AAMO,SAAS,qBAAA,CACd,QACA,IAAA,EACe;AACf,EAAA,OAAOC,oBAAA,CAAa;AAAA,IAClB,YAAY,CAAC,IAAI,wBAAA,CAAyB,MAAA,EAAQ,IAAI,CAAC;AAAA,GACxD,CAAA;AACH;;;;"}