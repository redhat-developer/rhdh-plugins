{"version":3,"file":"ScaffolderPlugin.cjs.js","sources":["../src/ScaffolderPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { catalogServiceRef } from '@backstage/plugin-catalog-node';\nimport { eventsServiceRef } from '@backstage/plugin-events-node';\nimport { TaskBroker, TemplateAction } from '@backstage/plugin-scaffolder-node';\nimport {\n  AutocompleteHandler,\n  CreatedTemplateFilter,\n  CreatedTemplateGlobal,\n  createTemplateFilter,\n  createTemplateGlobalFunction,\n  createTemplateGlobalValue,\n  scaffolderActionsExtensionPoint,\n  scaffolderAutocompleteExtensionPoint,\n  scaffolderTaskBrokerExtensionPoint,\n  scaffolderTemplatingExtensionPoint,\n  scaffolderWorkspaceProviderExtensionPoint,\n  WorkspaceProvider,\n} from '@backstage/plugin-scaffolder-node/alpha';\nimport {\n  createCatalogRegisterAction,\n  createCatalogWriteAction,\n  createDebugLogAction,\n  createFetchCatalogEntityAction,\n  createFetchPlainAction,\n  createFetchPlainFileAction,\n  createFetchTemplateAction,\n  createFetchTemplateFileAction,\n  createFilesystemDeleteAction,\n  createFilesystemReadDirAction,\n  createFilesystemRenameAction,\n  createWaitAction,\n} from './scaffolder';\nimport { createRouter } from './service/router';\nimport { loggerToWinstonLogger } from './util/loggerToWinstonLogger';\nimport {\n  convertFiltersToRecord,\n  convertGlobalsToRecord,\n} from './util/templating';\nimport { actionsServiceRef } from '@backstage/backend-plugin-api/alpha';\n\n/**\n * Scaffolder plugin\n *\n * @public\n */\nexport const scaffolderPlugin = createBackendPlugin({\n  pluginId: 'scaffolder',\n  register(env) {\n    const addedActions = new Array<TemplateAction<any, any>>();\n    env.registerExtensionPoint(scaffolderActionsExtensionPoint, {\n      addActions(...newActions: TemplateAction<any>[]) {\n        addedActions.push(...newActions);\n      },\n    });\n\n    let taskBroker: TaskBroker | undefined;\n    env.registerExtensionPoint(scaffolderTaskBrokerExtensionPoint, {\n      setTaskBroker(newTaskBroker) {\n        if (taskBroker) {\n          throw new Error('Task broker may only be set once');\n        }\n        taskBroker = newTaskBroker;\n      },\n    });\n\n    const additionalTemplateFilters: CreatedTemplateFilter<any, any>[] = [];\n    const additionalTemplateGlobals: CreatedTemplateGlobal[] = [];\n\n    env.registerExtensionPoint(scaffolderTemplatingExtensionPoint, {\n      addTemplateFilters(newFilters) {\n        additionalTemplateFilters.push(\n          ...(Array.isArray(newFilters)\n            ? newFilters\n            : Object.entries(newFilters).map(([id, filter]) =>\n                createTemplateFilter({\n                  id,\n                  filter,\n                }),\n              )),\n        );\n      },\n      addTemplateGlobals(newGlobals) {\n        additionalTemplateGlobals.push(\n          ...(Array.isArray(newGlobals)\n            ? newGlobals\n            : Object.entries(newGlobals).map(([id, global]) =>\n                typeof global === 'function'\n                  ? createTemplateGlobalFunction({ id, fn: global })\n                  : createTemplateGlobalValue({ id, value: global }),\n              )),\n        );\n      },\n    });\n\n    const autocompleteHandlers: Record<string, AutocompleteHandler> = {};\n    env.registerExtensionPoint(scaffolderAutocompleteExtensionPoint, {\n      addAutocompleteProvider(provider) {\n        autocompleteHandlers[provider.id] = provider.handler;\n      },\n    });\n\n    const additionalWorkspaceProviders: Record<string, WorkspaceProvider> = {};\n    env.registerExtensionPoint(scaffolderWorkspaceProviderExtensionPoint, {\n      addProviders(provider) {\n        Object.assign(additionalWorkspaceProviders, provider);\n      },\n    });\n\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        lifecycle: coreServices.rootLifecycle,\n        reader: coreServices.urlReader,\n        permissions: coreServices.permissions,\n        database: coreServices.database,\n        auth: coreServices.auth,\n        httpRouter: coreServices.httpRouter,\n        httpAuth: coreServices.httpAuth,\n        auditor: coreServices.auditor,\n        catalog: catalogServiceRef,\n        events: eventsServiceRef,\n        actionsRegistry: actionsServiceRef,\n      },\n      async init({\n        logger,\n        config,\n        lifecycle,\n        reader,\n        database,\n        auth,\n        httpRouter,\n        httpAuth,\n        catalog,\n        permissions,\n        events,\n        auditor,\n        actionsRegistry,\n      }) {\n        const log = loggerToWinstonLogger(logger);\n        const integrations = ScmIntegrations.fromConfig(config);\n\n        const templateExtensions = {\n          additionalTemplateFilters: convertFiltersToRecord(\n            additionalTemplateFilters,\n          ),\n          additionalTemplateGlobals: convertGlobalsToRecord(\n            additionalTemplateGlobals,\n          ),\n        };\n        const actions = [\n          // actions provided from other modules\n          ...addedActions,\n\n          // built-in actions for the scaffolder\n          createFetchPlainAction({\n            reader,\n            integrations,\n          }),\n          createFetchPlainFileAction({\n            reader,\n            integrations,\n          }),\n          createFetchTemplateAction({\n            integrations,\n            reader,\n            ...templateExtensions,\n          }),\n          createFetchTemplateFileAction({\n            integrations,\n            reader,\n            ...templateExtensions,\n          }),\n          createDebugLogAction(),\n          createWaitAction(),\n          // todo(blam): maybe these should be a -catalog module?\n          createCatalogRegisterAction({ catalog, integrations }),\n          createFetchCatalogEntityAction({ catalog }),\n          createCatalogWriteAction(),\n          createFilesystemDeleteAction(),\n          createFilesystemRenameAction(),\n          createFilesystemReadDirAction(),\n        ];\n\n        const actionIds = actions.map(action => action.id).join(', ');\n\n        log.info(\n          `Starting scaffolder with the following actions enabled ${actionIds}`,\n        );\n\n        const router = await createRouter({\n          logger,\n          config,\n          database,\n          catalog,\n          lifecycle,\n          actions,\n          taskBroker,\n          additionalTemplateFilters,\n          additionalTemplateGlobals,\n          auth,\n          httpAuth,\n          permissions,\n          autocompleteHandlers,\n          additionalWorkspaceProviders,\n          events,\n          auditor,\n          actionsRegistry,\n        });\n        httpRouter.use(router);\n      },\n    });\n  },\n});\n"],"names":["createBackendPlugin","scaffolderActionsExtensionPoint","scaffolderTaskBrokerExtensionPoint","scaffolderTemplatingExtensionPoint","createTemplateFilter","createTemplateGlobalFunction","createTemplateGlobalValue","scaffolderAutocompleteExtensionPoint","scaffolderWorkspaceProviderExtensionPoint","coreServices","catalogServiceRef","eventsServiceRef","actionsServiceRef","log","loggerToWinstonLogger","ScmIntegrations","convertFiltersToRecord","convertGlobalsToRecord","createFetchPlainAction","createFetchPlainFileAction","createFetchTemplateAction","createFetchTemplateFileAction","createDebugLogAction","createWaitAction","createCatalogRegisterAction","createFetchCatalogEntityAction","createCatalogWriteAction","createFilesystemDeleteAction","createFilesystemRenameAction","createFilesystemReadDirAction","router","createRouter"],"mappings":"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"}