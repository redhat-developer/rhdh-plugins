{"version":3,"file":"fetch.cjs.js","sources":["../../../../../src/scaffolder/actions/builtin/catalog/fetch.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';\nimport { examples } from './fetch.examples';\nimport { CatalogService } from '@backstage/plugin-catalog-node';\n\nconst id = 'catalog:fetch';\n\n/**\n * Returns entity or entities from the catalog by entity reference(s).\n *\n * @public\n */\nexport function createFetchCatalogEntityAction(options: {\n  catalog: CatalogService;\n}) {\n  const { catalog } = options;\n\n  return createTemplateAction({\n    id,\n    description:\n      'Returns entity or entities from the catalog by entity reference(s)',\n    examples,\n    supportsDryRun: true,\n    schema: {\n      input: {\n        entityRef: z =>\n          z\n            .string({\n              description: 'Entity reference of the entity to get',\n            })\n            .optional(),\n        entityRefs: z =>\n          z\n            .array(z.string(), {\n              description: 'Entity references of the entities to get',\n            })\n            .optional(),\n        optional: z =>\n          z\n            .boolean({\n              description:\n                'Allow the entity or entities to optionally exist. Default: false',\n            })\n            .optional(),\n        defaultKind: z =>\n          z.string({ description: 'The default kind' }).optional(),\n        defaultNamespace: z =>\n          z.string({ description: 'The default namespace' }).optional(),\n      },\n      output: {\n        entity: z =>\n          z\n            .any({\n              description:\n                'Object containing same values used in the Entity schema. Only when used with `entityRef` parameter.',\n            })\n            .optional(),\n        entities: z =>\n          z\n            .array(\n              z.any({\n                description:\n                  'Array containing objects with same values used in the Entity schema. Only when used with `entityRefs` parameter.',\n              }),\n            )\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const { entityRef, entityRefs, optional, defaultKind, defaultNamespace } =\n        ctx.input;\n\n      if (!entityRef && !entityRefs) {\n        if (optional) {\n          return;\n        }\n        throw new Error('Missing entity reference or references');\n      }\n\n      if (entityRef) {\n        const entity = await catalog.getEntityByRef(\n          stringifyEntityRef(\n            parseEntityRef(entityRef, { defaultKind, defaultNamespace }),\n          ),\n          {\n            credentials: await ctx.getInitiatorCredentials(),\n          },\n        );\n\n        if (!entity && !optional) {\n          throw new Error(`Entity ${entityRef} not found`);\n        }\n        ctx.output('entity', entity ?? null);\n      }\n\n      if (entityRefs) {\n        const entities = await catalog.getEntitiesByRefs(\n          {\n            entityRefs: entityRefs.map(ref =>\n              stringifyEntityRef(\n                parseEntityRef(ref, { defaultKind, defaultNamespace }),\n              ),\n            ),\n          },\n          { credentials: await ctx.getInitiatorCredentials() },\n        );\n\n        const finalEntities = entities.items.map((e, i) => {\n          if (!e && !optional) {\n            throw new Error(`Entity ${entityRefs[i]} not found`);\n          }\n          return e ?? null;\n        });\n\n        ctx.output('entities', finalEntities);\n      }\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","stringifyEntityRef","parseEntityRef"],"mappings":"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"}