'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var backendPluginApi = require('@backstage/backend-plugin-api');
var fs = require('fs-extra');
var rename_examples = require('./rename.examples.cjs.js');
var errors = require('@backstage/errors');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

const createFilesystemRenameAction = () => {
  return pluginScaffolderNode.createTemplateAction({
    id: "fs:rename",
    description: "Renames files and directories within the workspace",
    examples: rename_examples.examples,
    schema: {
      input: {
        files: (z) => z.array(
          z.object({
            from: z.string({
              description: "The source location of the file to be renamed"
            }),
            to: z.string({
              description: "The destination of the new file"
            }),
            overwrite: z.boolean({
              description: "Overwrite existing file or directory, default is false"
            }).optional()
          }),
          {
            description: "A list of file and directory names that will be renamed"
          }
        )
      }
    },
    supportsDryRun: true,
    async handler(ctx) {
      if (!Array.isArray(ctx.input?.files)) {
        throw new errors.InputError("files must be an Array");
      }
      for (const file of ctx.input.files) {
        if (!file.from || !file.to) {
          throw new errors.InputError("each file must have a from and to property");
        }
        const sourceFilepath = backendPluginApi.resolveSafeChildPath(
          ctx.workspacePath,
          file.from
        );
        const destFilepath = backendPluginApi.resolveSafeChildPath(ctx.workspacePath, file.to);
        try {
          await fs__default.default.move(sourceFilepath, destFilepath, {
            overwrite: file.overwrite ?? false
          });
          ctx.logger.info(
            `File ${sourceFilepath} renamed to ${destFilepath} successfully`
          );
        } catch (err) {
          ctx.logger.error(
            `Failed to rename file ${sourceFilepath} to ${destFilepath}:`,
            err
          );
          throw err;
        }
      }
    }
  });
};

exports.createFilesystemRenameAction = createFilesystemRenameAction;
//# sourceMappingURL=rename.cjs.js.map
