'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var errors = require('@backstage/errors');
var backendPluginApi = require('@backstage/backend-plugin-api');
var fs = require('fs-extra');
var globby = require('globby');
var delete_examples = require('./delete.examples.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var globby__default = /*#__PURE__*/_interopDefaultCompat(globby);

const createFilesystemDeleteAction = () => {
  return pluginScaffolderNode.createTemplateAction({
    id: "fs:delete",
    description: "Deletes files and directories from the workspace",
    examples: delete_examples.examples,
    schema: {
      input: {
        files: (z) => z.array(z.string(), {
          description: "A list of files and directories that will be deleted"
        })
      }
    },
    supportsDryRun: true,
    async handler(ctx) {
      if (!Array.isArray(ctx.input?.files)) {
        throw new errors.InputError("files must be an Array");
      }
      for (const file of ctx.input.files) {
        const safeFilepath = backendPluginApi.resolveSafeChildPath(
          ctx.workspacePath,
          file
        ).replace(/\\/g, "/");
        const resolvedPaths = await globby__default.default(safeFilepath, {
          cwd: ctx.workspacePath,
          absolute: true,
          dot: true
        });
        for (const filepath of resolvedPaths) {
          try {
            await fs__default.default.remove(filepath);
            ctx.logger.info(`File ${filepath} deleted successfully`);
          } catch (err) {
            ctx.logger.error(`Failed to delete file ${filepath}:`, err);
            throw err;
          }
        }
      }
    }
  });
};

exports.createFilesystemDeleteAction = createFilesystemDeleteAction;
//# sourceMappingURL=delete.cjs.js.map
