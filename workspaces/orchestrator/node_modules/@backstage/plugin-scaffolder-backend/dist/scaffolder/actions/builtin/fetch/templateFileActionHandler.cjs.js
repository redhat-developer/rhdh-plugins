'use strict';

var fs = require('fs-extra');
var createDefaultFilters = require('../../../../lib/templating/filters/createDefaultFilters.cjs.js');
var templating = require('../../../../util/templating.cjs.js');
var backendPluginApi = require('@backstage/backend-plugin-api');
var path = require('path');
var SecureTemplater = require('../../../../lib/templating/SecureTemplater.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var path__default = /*#__PURE__*/_interopDefaultCompat(path);

async function createTemplateFileActionHandler(options) {
  const {
    resolveTemplateFile,
    integrations,
    additionalTemplateFilters,
    additionalTemplateGlobals: templateGlobals,
    ctx
  } = options;
  const templateFilters = {
    ...templating.convertFiltersToRecord(createDefaultFilters.createDefaultFilters({ integrations })),
    ...additionalTemplateFilters
  };
  const outputPath = backendPluginApi.resolveSafeChildPath(
    ctx.workspacePath,
    ctx.input.targetPath
  );
  if (fs__default.default.existsSync(outputPath) && !ctx.input.replace) {
    ctx.logger.info(
      `File ${ctx.input.targetPath} already exists in workspace, not replacing.`
    );
    return;
  }
  const filePath = await resolveTemplateFile();
  const { cookiecutterCompat, values } = ctx.input;
  const context = {
    [cookiecutterCompat ? "cookiecutter" : "values"]: values
  };
  ctx.logger.info(
    `Processing template file with input values`,
    ctx.input.values
  );
  const renderTemplate = await SecureTemplater.SecureTemplater.loadRenderer({
    cookiecutterCompat,
    templateFilters,
    templateGlobals,
    nunjucksConfigs: {
      trimBlocks: ctx.input.trimBlocks,
      lstripBlocks: ctx.input.lstripBlocks
    }
  });
  const contents = await fs__default.default.readFile(filePath, "utf-8");
  const result = renderTemplate(contents, context);
  await fs__default.default.ensureDir(path__default.default.dirname(outputPath));
  await fs__default.default.outputFile(outputPath, result);
  ctx.logger.info(`Template file has been written to ${outputPath}`);
}

exports.createTemplateFileActionHandler = createTemplateFileActionHandler;
//# sourceMappingURL=templateFileActionHandler.cjs.js.map
