{"version":3,"file":"register.cjs.js","sources":["../../../../../src/scaffolder/actions/builtin/catalog/register.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { stringifyEntityRef, Entity } from '@backstage/catalog-model';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { examples } from './register.examples';\nimport { CatalogService } from '@backstage/plugin-catalog-node';\n\nconst id = 'catalog:register';\n\n/**\n * Registers entities from a catalog descriptor file in the workspace into the software catalog.\n * @public\n */\nexport function createCatalogRegisterAction(options: {\n  catalog: CatalogService;\n  integrations: ScmIntegrations;\n}) {\n  const { catalog, integrations } = options;\n\n  return createTemplateAction({\n    id,\n    description:\n      'Registers entities from a catalog descriptor file in the workspace into the software catalog.',\n    examples,\n    schema: {\n      input: z =>\n        z.union([\n          z.object({\n            catalogInfoUrl: z.string({\n              description:\n                'An absolute URL pointing to the catalog info file location',\n            }),\n            optional: z\n              .boolean({\n                description:\n                  'Permit the registered location to optionally exist. Default: false',\n              })\n              .optional(),\n          }),\n          z.object({\n            repoContentsUrl: z.string({\n              description:\n                'An absolute URL pointing to the root of a repository directory tree',\n            }),\n            catalogInfoPath: z\n              .string({\n                description:\n                  'A relative path from the repo root pointing to the catalog info file, defaults to /catalog-info.yaml',\n              })\n              .optional(),\n            optional: z\n              .boolean({\n                description:\n                  'Permit the registered location to optionally exist. Default: false',\n              })\n              .optional(),\n          }),\n        ]),\n    },\n    async handler(ctx) {\n      const { input } = ctx;\n\n      let catalogInfoUrl;\n      if ('catalogInfoUrl' in input) {\n        catalogInfoUrl = input.catalogInfoUrl;\n      } else {\n        const { repoContentsUrl, catalogInfoPath = '/catalog-info.yaml' } =\n          input;\n        const integration = integrations.byUrl(repoContentsUrl);\n        if (!integration) {\n          throw new InputError(\n            `No integration found for host ${repoContentsUrl}`,\n          );\n        }\n\n        catalogInfoUrl = integration.resolveUrl({\n          base: repoContentsUrl,\n          url: catalogInfoPath,\n        });\n      }\n\n      ctx.logger.info(`Registering ${catalogInfoUrl} in the catalog`);\n\n      try {\n        // 1st try to register the location, this will throw an error if the location already exists (see catch)\n        await catalog.addLocation(\n          {\n            type: 'url',\n            target: catalogInfoUrl,\n          },\n          { credentials: await ctx.getInitiatorCredentials() },\n        );\n      } catch (e) {\n        if (!input.optional) {\n          // if optional is false or unset, it is not allowed to register the same location twice, we rethrow the error\n          throw e;\n        }\n      }\n\n      try {\n        // 2nd retry the registration as a dry run, this will not throw an error if the location already exists\n        const result = await catalog.addLocation(\n          {\n            dryRun: true,\n            type: 'url',\n            target: catalogInfoUrl,\n          },\n          { credentials: await ctx.getInitiatorCredentials() },\n        );\n\n        if (result.entities.length) {\n          const { entities } = result;\n          let entity: Entity | undefined;\n          // prioritise 'Component' type as it is the most central kind of entity\n          entity = entities.find(\n            e =>\n              !e.metadata.name.startsWith('generated-') &&\n              e.kind === 'Component',\n          );\n          if (!entity) {\n            entity = entities.find(\n              e => !e.metadata.name.startsWith('generated-'),\n            );\n          }\n          if (!entity) {\n            entity = entities[0];\n          }\n\n          ctx.output('entityRef', stringifyEntityRef(entity));\n        }\n      } catch (e) {\n        if (!input.optional) {\n          throw e;\n        }\n      }\n\n      ctx.output('catalogInfoUrl', catalogInfoUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","InputError","stringifyEntityRef"],"mappings":"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"}