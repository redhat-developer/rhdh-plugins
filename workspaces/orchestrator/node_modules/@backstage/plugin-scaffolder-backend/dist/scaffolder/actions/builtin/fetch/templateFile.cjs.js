'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var path = require('path');
var templateFile_examples = require('./templateFile.examples.cjs.js');
var templateFileActionHandler = require('./templateFileActionHandler.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var path__default = /*#__PURE__*/_interopDefaultCompat(path);

function createFetchTemplateFileAction(options) {
  return pluginScaffolderNode.createTemplateAction({
    id: "fetch:template:file",
    description: "Downloads single file and places it in the workspace.",
    examples: templateFile_examples.examples,
    schema: {
      input: {
        url: (z) => z.string({
          description: "Relative path or absolute URL pointing to the single file to fetch."
        }),
        targetPath: (z) => z.string({
          description: "Target path within the working directory to download the file as."
        }),
        values: (z) => z.record(z.any(), {
          description: "Values to pass on to the templating engine"
        }).optional(),
        cookiecutterCompat: (z) => z.boolean({
          description: "Enable features to maximise compatibility with templates built for fetch:cookiecutter"
        }).optional(),
        replace: (z) => z.boolean({
          description: "If set, replace file in targetPath instead of overwriting existing one."
        }).optional(),
        trimBlocks: (z) => z.boolean({
          description: "If set, the first newline after a block is removed (block, not variable tag)."
        }).optional(),
        lstripBlocks: (z) => z.boolean({
          description: "If set, leading spaces and tabs are stripped from the start of a line to a block."
        }).optional(),
        token: (z) => z.string({
          description: "An optional token to use for authentication when reading the resources."
        }).optional()
      }
    },
    supportsDryRun: true,
    handler: (ctx) => templateFileActionHandler.createTemplateFileActionHandler({
      ctx,
      resolveTemplateFile: async () => {
        ctx.logger.info("Fetching template file content from remote URL");
        const workDir = await ctx.createTemporaryDirectory();
        const tmpFilePath = path__default.default.join(workDir, "tmp");
        await pluginScaffolderNode.fetchFile({
          baseUrl: ctx.templateInfo?.baseUrl,
          fetchUrl: ctx.input.url,
          outputPath: tmpFilePath,
          token: ctx.input.token,
          ...options
        });
        return tmpFilePath;
      },
      ...options
    })
  });
}

exports.createFetchTemplateFileAction = createFetchTemplateFileAction;
//# sourceMappingURL=templateFile.cjs.js.map
