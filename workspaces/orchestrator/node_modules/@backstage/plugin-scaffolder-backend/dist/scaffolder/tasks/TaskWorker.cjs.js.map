{"version":3,"file":"TaskWorker.cjs.js","sources":["../../../src/scaffolder/tasks/TaskWorker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuditorService, LoggerService } from '@backstage/backend-plugin-api';\nimport { assertError, InputError, stringifyError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { PermissionEvaluator } from '@backstage/plugin-permission-common';\nimport {\n  TaskBroker,\n  TaskContext,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport PQueue from 'p-queue';\nimport { TemplateActionRegistry } from '../actions';\nimport { NunjucksWorkflowRunner } from './NunjucksWorkflowRunner';\nimport { WorkflowRunner } from './types';\nimport { setTimeout } from 'timers/promises';\nimport { JsonObject } from '@backstage/types';\nimport { Config } from '@backstage/config';\n\nconst DEFAULT_TASK_PARAMETER_MAX_LENGTH = 256;\n\n/**\n * TaskWorkerOptions\n * @deprecated this type is deprecated, and there will be a new way to create Workers in the next major version.\n * @public\n */\nexport type TaskWorkerOptions = {\n  taskBroker: TaskBroker;\n  runners: {\n    workflowRunner: WorkflowRunner;\n  };\n  concurrentTasksLimit: number;\n  permissions?: PermissionEvaluator;\n  logger?: LoggerService;\n  auditor?: AuditorService;\n  config?: Config;\n  gracefulShutdown?: boolean;\n};\n\n/**\n * CreateWorkerOptions\n * @deprecated this type is deprecated, and there will be a new way to create Workers in the next major version.\n * @public\n */\nexport type CreateWorkerOptions = {\n  taskBroker: TaskBroker;\n  actionRegistry: TemplateActionRegistry;\n  integrations: ScmIntegrations;\n  workingDirectory: string;\n  logger: LoggerService;\n  auditor?: AuditorService;\n  config?: Config;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  /**\n   * The number of tasks that can be executed at the same time by the worker\n   * @defaultValue 10\n   * @example\n   * ```\n   * {\n   *   concurrentTasksLimit: 1,\n   *   // OR\n   *   concurrentTasksLimit: Infinity\n   * }\n   * ```\n   */\n  concurrentTasksLimit?: number;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionEvaluator;\n  gracefulShutdown?: boolean;\n};\n\n/**\n * TaskWorker\n * @deprecated this type is deprecated, and there will be a new way to create Workers in the next major version.\n * @public\n */\nexport class TaskWorker {\n  private taskQueue: PQueue;\n  private logger: LoggerService | undefined;\n  private auditor: AuditorService | undefined;\n  private parameterAuditTransform: ParameterAuditTransform;\n  private stopWorkers: boolean;\n\n  private constructor(\n    private readonly options: TaskWorkerOptions & {\n      parameterAuditTransform: ParameterAuditTransform;\n    },\n  ) {\n    this.stopWorkers = false;\n    this.logger = options.logger;\n    this.auditor = options.auditor;\n    this.taskQueue = new PQueue({\n      concurrency: options.concurrentTasksLimit,\n    });\n    this.parameterAuditTransform = options.parameterAuditTransform;\n  }\n\n  static async create(options: CreateWorkerOptions): Promise<TaskWorker> {\n    const {\n      taskBroker,\n      logger,\n      auditor,\n      config,\n      actionRegistry,\n      integrations,\n      workingDirectory,\n      additionalTemplateFilters,\n      concurrentTasksLimit = 10, // from 1 to Infinity\n      additionalTemplateGlobals,\n      permissions,\n      gracefulShutdown,\n    } = options;\n\n    const workflowRunner = new NunjucksWorkflowRunner({\n      actionRegistry,\n      integrations,\n      logger,\n      auditor,\n      workingDirectory,\n      additionalTemplateFilters,\n      additionalTemplateGlobals,\n      permissions,\n    });\n\n    return new TaskWorker({\n      taskBroker: taskBroker,\n      runners: { workflowRunner },\n      concurrentTasksLimit,\n      permissions,\n      auditor,\n      config,\n      gracefulShutdown,\n      parameterAuditTransform: createParameterTruncator(config),\n    });\n  }\n\n  async recoverTasks() {\n    try {\n      await this.options.taskBroker.recoverTasks?.();\n    } catch (err) {\n      this.logger?.error(stringifyError(err));\n    }\n  }\n\n  start() {\n    (async () => {\n      while (!this.stopWorkers) {\n        await setTimeout(10000);\n        await this.recoverTasks();\n      }\n    })();\n    (async () => {\n      while (!this.stopWorkers) {\n        await this.onReadyToClaimTask();\n        if (!this.stopWorkers) {\n          const task = await this.options.taskBroker.claim();\n          void this.taskQueue.add(() => this.runOneTask(task));\n        }\n      }\n    })();\n  }\n\n  async stop() {\n    this.stopWorkers = true;\n    if (this.options?.gracefulShutdown) {\n      while (this.taskQueue.size > 0) {\n        await setTimeout(1000);\n      }\n    }\n  }\n\n  protected onReadyToClaimTask(): Promise<void> {\n    if (this.taskQueue.pending < this.options.concurrentTasksLimit) {\n      return Promise.resolve();\n    }\n    return new Promise(resolve => {\n      // \"next\" event emits when a task completes\n      // https://github.com/sindresorhus/p-queue#next\n      this.taskQueue.once('next', () => {\n        resolve();\n      });\n    });\n  }\n\n  async runOneTask(task: TaskContext) {\n    const auditorEvent = await this.auditor?.createEvent({\n      eventId: 'task',\n      severityLevel: 'medium',\n      meta: {\n        actionType: 'execution',\n        createdBy: task.createdBy,\n        taskId: task.taskId,\n        taskParameters: this.parameterAuditTransform(task.spec.parameters),\n        templateRef: task.spec.templateInfo?.entityRef,\n      },\n    });\n\n    try {\n      if (task.spec.apiVersion !== 'scaffolder.backstage.io/v1beta3') {\n        throw new Error(\n          `Unsupported Template apiVersion ${task.spec.apiVersion}`,\n        );\n      }\n\n      const { output } = await this.options.runners.workflowRunner.execute(\n        task,\n      );\n\n      await task.complete('completed', { output });\n      await auditorEvent?.success();\n    } catch (error) {\n      assertError(error);\n      await auditorEvent?.fail({\n        error,\n      });\n      await task.complete('failed', {\n        error: { name: error.name, message: error.message },\n      });\n    }\n  }\n}\n\ntype ParameterAuditTransform = (parameters: JsonObject) => JsonObject;\n\n/**\n * Truncates task parameters for audit logging using the configured max length.\n * @internal\n */\nexport function createParameterTruncator(\n  config?: Config,\n): ParameterAuditTransform {\n  const maxLength =\n    config?.getOptionalNumber('scaffolder.auditor.taskParameterMaxLength') ??\n    DEFAULT_TASK_PARAMETER_MAX_LENGTH;\n\n  if (!Number.isSafeInteger(maxLength) || maxLength < -1) {\n    throw new InputError(\n      `Invalid configuration for 'scaffolder.auditor.taskParameterMaxLength', got ${maxLength}. Must be a positive integer or -1 to disable truncation.`,\n    );\n  }\n\n  if (maxLength === -1) {\n    return (parameters: JsonObject) => parameters;\n  }\n\n  return (parameters: JsonObject) => {\n    function truncate(value: unknown): unknown {\n      if (typeof value === 'string') {\n        if (value.length > maxLength) {\n          return value.slice(0, maxLength).concat('...<truncated>');\n        }\n        return value;\n      }\n      if (Array.isArray(value)) {\n        return value.map(truncate);\n      }\n      if (value && typeof value === 'object') {\n        const result: Record<string, unknown> = {};\n        for (const k in value as object) {\n          if (Object.hasOwn(value, k)) {\n            result[k] = truncate((value as any)[k]);\n          }\n        }\n        return result;\n      }\n      return value;\n    }\n\n    return truncate(parameters) as JsonObject;\n  };\n}\n"],"names":["PQueue","NunjucksWorkflowRunner","stringifyError","setTimeout","assertError","InputError"],"mappings":"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"}