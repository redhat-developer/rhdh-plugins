{"version":3,"file":"logger.cjs.js","sources":["../../../src/scaffolder/tasks/logger.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  LoggerService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Format, TransformableInfo } from 'logform';\nimport Transport, { TransportStreamOptions } from 'winston-transport';\nimport { Logger, format, createLogger, transports } from 'winston';\nimport { LEVEL, MESSAGE, SPLAT } from 'triple-beam';\nimport { TaskContext } from '@backstage/plugin-scaffolder-node';\nimport _ from 'lodash';\n\n/**\n * Escapes a given string to be used inside a RegExp.\n *\n * Taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n */\nconst escapeRegExp = (text: string) => {\n  return text.replace(/[.*+?^${}(\\)|[\\]\\\\]/g, '\\\\$&');\n};\n\ninterface WinstonLoggerOptions {\n  meta?: JsonObject;\n  level: string;\n  format: Format;\n  transports: Transport[];\n}\n\n// This is a workaround for being able to preserve the log format of the root logger.\n// Will revisit all of this implementation once we can break the router to use only `LoggerService`.\nexport class BackstageLoggerTransport extends Transport {\n  constructor(\n    private readonly backstageLogger: LoggerService,\n    private readonly taskContext: TaskContext,\n    private readonly stepId: string,\n    opts?: TransportStreamOptions,\n  ) {\n    super(opts);\n  }\n\n  log(info: TransformableInfo, callback: VoidFunction) {\n    if (typeof info !== 'object' || info === null) {\n      callback();\n      return;\n    }\n\n    const message = info[MESSAGE];\n    const level = info[LEVEL];\n\n    switch (level) {\n      case 'error':\n        this.backstageLogger.error(String(message));\n        break;\n      case 'warn':\n        this.backstageLogger.warn(String(message));\n        break;\n      case 'info':\n        this.backstageLogger.info(String(message));\n        break;\n      case 'debug':\n        this.backstageLogger.debug(String(message));\n        break;\n      default:\n        this.backstageLogger.info(String(message));\n    }\n\n    this.taskContext.emitLog(message, { stepId: this.stepId });\n    callback();\n  }\n}\n\nexport class WinstonLogger implements RootLoggerService {\n  #winston: Logger;\n  #addRedactions?: (redactions: Iterable<string>) => void;\n\n  /**\n   * Creates a {@link WinstonLogger} instance.\n   */\n  static create(options: WinstonLoggerOptions): WinstonLogger {\n    const redacter = WinstonLogger.redacter();\n\n    let logger = createLogger({\n      level: options.level,\n      format: format.combine(options.format, redacter.format),\n      transports: options.transports ?? new transports.Console(),\n    });\n\n    if (options.meta) {\n      logger = logger.child(options.meta);\n    }\n\n    return new WinstonLogger(logger, redacter.add);\n  }\n\n  /**\n   * Creates a winston log formatter for redacting secrets.\n   */\n  static redacter(): {\n    format: Format;\n    add: (redactions: Iterable<string>) => void;\n  } {\n    const redactionSet = new Set<string>();\n\n    let redactionPattern: RegExp | undefined = undefined;\n\n    return {\n      format: format((obj: TransformableInfo) => {\n        if (!redactionPattern || !obj) {\n          return obj;\n        }\n\n        obj[MESSAGE] = obj[MESSAGE]?.replace?.(redactionPattern, '***');\n\n        return obj;\n      })(),\n      add(newRedactions) {\n        let added = 0;\n        for (const redactionToTrim of newRedactions) {\n          // Skip null or undefined values\n          if (redactionToTrim === null || redactionToTrim === undefined) {\n            continue;\n          }\n          // Trimming the string ensures that we don't accdentally get extra\n          // newlines or other whitespace interfering with the redaction; this\n          // can happen for example when using string literals in yaml\n          const redaction = redactionToTrim.trim();\n          // Exclude secrets that are empty or just one character in length. These\n          // typically mean that you are running local dev or tests, or using the\n          // --lax flag which sets things to just 'x'.\n          if (redaction.length <= 1) {\n            continue;\n          }\n          if (!redactionSet.has(redaction)) {\n            redactionSet.add(redaction);\n            added += 1;\n          }\n        }\n        if (added > 0) {\n          const redactions = Array.from(redactionSet)\n            .map(r => escapeRegExp(r))\n            .join('|');\n          redactionPattern = new RegExp(`(${redactions})`, 'g');\n        }\n      },\n    };\n  }\n\n  /**\n   * Creates a pretty printed winston log formatter.\n   */\n  static colorFormat(): Format {\n    const colorizer = format.colorize();\n\n    return format.combine(\n      format.timestamp(),\n      format.colorize({\n        colors: {\n          timestamp: 'dim',\n          prefix: 'blue',\n          field: 'cyan',\n          debug: 'grey',\n        },\n      }),\n      format.printf((info: TransformableInfo) => {\n        const { timestamp, plugin, service } = info;\n        const message = info[MESSAGE];\n        const level = info[LEVEL];\n        const fields = info[SPLAT];\n        const prefix = plugin || service;\n        const timestampColor = colorizer.colorize('timestamp', timestamp);\n        const prefixColor = colorizer.colorize('prefix', prefix);\n\n        const extraFields = Object.entries(fields)\n          .map(\n            ([key, value]) =>\n              `${colorizer.colorize('field', `${key}`)}=${value}`,\n          )\n          .join(' ');\n\n        return `${timestampColor} ${prefixColor} ${level} ${message} ${extraFields}`;\n      }),\n    );\n  }\n\n  private constructor(\n    winston: Logger,\n    addRedactions?: (redactions: Iterable<string>) => void,\n  ) {\n    this.#winston = winston;\n    this.#addRedactions = addRedactions;\n  }\n\n  error(message: string, meta?: JsonObject): void {\n    this.#winston.error(message, meta);\n  }\n\n  warn(message: string, meta?: JsonObject): void {\n    this.#winston.warn(message, meta);\n  }\n\n  info(message: string, meta?: JsonObject): void {\n    this.#winston.info(message, meta);\n  }\n\n  debug(message: string, meta?: JsonObject): void {\n    this.#winston.debug(message, meta);\n  }\n\n  child(meta: JsonObject): LoggerService {\n    return new WinstonLogger(this.#winston.child(meta));\n  }\n\n  addRedactions(redactions: Iterable<string>) {\n    this.#addRedactions?.(redactions);\n  }\n}\n"],"names":["Transport","MESSAGE","LEVEL","createLogger","format","transports","SPLAT"],"mappings":"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"}