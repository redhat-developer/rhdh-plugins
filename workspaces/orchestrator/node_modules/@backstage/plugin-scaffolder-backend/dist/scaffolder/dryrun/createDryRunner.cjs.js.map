{"version":3,"file":"createDryRunner.cjs.js","sources":["../../../src/scaffolder/dryrun/createDryRunner.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuditorService,\n  BackstageCredentials,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\nimport type { UserEntity } from '@backstage/catalog-model';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { PermissionEvaluator } from '@backstage/plugin-permission-common';\nimport {\n  ScaffolderTaskStatus,\n  TaskSpec,\n  TemplateInfo,\n} from '@backstage/plugin-scaffolder-common';\nimport {\n  createTemplateAction,\n  deserializeDirectoryContents,\n  SerializedFile,\n  serializeDirectoryContents,\n  TaskSecrets,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport { JsonObject } from '@backstage/types';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { TemplateActionRegistry } from '../actions';\nimport { NunjucksWorkflowRunner } from '../tasks/NunjucksWorkflowRunner';\nimport { DecoratedActionsRegistry } from './DecoratedActionsRegistry';\n\ninterface DryRunInput {\n  spec: TaskSpec;\n  templateInfo: TemplateInfo;\n  secrets?: TaskSecrets;\n  directoryContents: SerializedFile[];\n  credentials: BackstageCredentials;\n  user?: {\n    entity?: UserEntity;\n    ref?: string;\n  };\n}\n\ninterface DryRunResult {\n  log: Array<{\n    body: {\n      message: string;\n      stepId?: string;\n      status?: ScaffolderTaskStatus;\n    };\n  }>;\n  directoryContents: SerializedFile[];\n  output: JsonObject;\n}\n\n/** @internal */\nexport type TemplateTesterCreateOptions = {\n  logger: LoggerService;\n  auditor?: AuditorService;\n  integrations: ScmIntegrations;\n  actionRegistry: TemplateActionRegistry;\n  workingDirectory: string;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionEvaluator;\n};\n\n/**\n * Executes a dry-run of the provided template.\n *\n * The provided content will be extracted into a temporary directory\n * which is then use as the base for any relative file fetch paths.\n *\n * @internal\n */\nexport function createDryRunner(options: TemplateTesterCreateOptions) {\n  return async function dryRun(input: DryRunInput): Promise<DryRunResult> {\n    let contentPromise;\n\n    const workflowRunner = new NunjucksWorkflowRunner({\n      ...options,\n      actionRegistry: new DecoratedActionsRegistry(options.actionRegistry, [\n        createTemplateAction({\n          id: 'dry-run:extract',\n          supportsDryRun: true,\n          async handler(ctx) {\n            contentPromise = serializeDirectoryContents(ctx.workspacePath);\n            await contentPromise.catch(() => {});\n          },\n        }),\n      ]),\n    });\n\n    // Extracting contentsPath and dryRunId from the baseUrl\n    const baseUrl = input.templateInfo.baseUrl;\n    if (!baseUrl) {\n      throw new Error('baseUrl is required');\n    }\n    const basePath = fileURLToPath(new URL(baseUrl));\n    const contentsPath = path.dirname(basePath);\n    const dryRunId = uuid();\n\n    const log = new Array<{\n      body: {\n        message: string;\n        stepId?: string;\n        status?: ScaffolderTaskStatus;\n      };\n    }>();\n\n    try {\n      await deserializeDirectoryContents(contentsPath, input.directoryContents);\n\n      const abortSignal = new AbortController().signal;\n      const result = await workflowRunner.execute({\n        taskId: dryRunId,\n        spec: {\n          ...input.spec,\n          steps: [\n            ...input.spec.steps,\n            {\n              id: dryRunId,\n              name: 'dry-run:extract',\n              action: 'dry-run:extract',\n            },\n          ],\n          templateInfo: input.templateInfo,\n        },\n        secrets: input.secrets,\n        getInitiatorCredentials: () => Promise.resolve(input.credentials),\n        // No need to update this at the end of the run, so just hard-code it\n        done: false,\n        isDryRun: true,\n        getWorkspaceName: async () => `dry-run-${dryRunId}`,\n        cancelSignal: abortSignal,\n        async emitLog(message: string, logMetadata?: JsonObject) {\n          if (logMetadata?.stepId === dryRunId) {\n            return;\n          }\n          log.push({\n            body: {\n              ...logMetadata,\n              message,\n            },\n          });\n        },\n        complete: async () => {\n          throw new Error('Not implemented');\n        },\n      });\n\n      if (!contentPromise) {\n        throw new Error('Content extraction step was skipped');\n      }\n      const directoryContents = await contentPromise;\n\n      return {\n        log,\n        directoryContents,\n        output: result.output,\n      };\n    } finally {\n      await fs.remove(contentsPath);\n    }\n  };\n}\n"],"names":["NunjucksWorkflowRunner","DecoratedActionsRegistry","createTemplateAction","serializeDirectoryContents","fileURLToPath","path","uuid","deserializeDirectoryContents","fs"],"mappings":"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"}