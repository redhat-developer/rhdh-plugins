{"version":3,"file":"resolveRouteBindings.esm.js","sources":["../../src/app/resolveRouteBindings.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RouteRef,\n  SubRouteRef,\n  ExternalRouteRef,\n  BackstagePlugin,\n  AnyRoutes,\n  AnyExternalRoutes,\n} from '@backstage/core-plugin-api';\nimport { AppOptions, AppRouteBinder } from './types';\nimport { Config } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\n\n/** @internal */\nexport function collectRouteIds(\n  plugins: Iterable<\n    Pick<\n      BackstagePlugin<AnyRoutes, AnyExternalRoutes>,\n      'getId' | 'routes' | 'externalRoutes'\n    >\n  >,\n) {\n  const routesById = new Map<string, RouteRef | SubRouteRef>();\n  const externalRoutesById = new Map<string, ExternalRouteRef>();\n\n  for (const plugin of plugins) {\n    for (const [name, ref] of Object.entries(plugin.routes ?? {})) {\n      const refId = `${plugin.getId()}.${name}`;\n      if (routesById.has(refId)) {\n        throw new Error(`Unexpected duplicate route '${refId}'`);\n      }\n\n      routesById.set(refId, ref);\n    }\n    for (const [name, ref] of Object.entries(plugin.externalRoutes ?? {})) {\n      const refId = `${plugin.getId()}.${name}`;\n      if (externalRoutesById.has(refId)) {\n        throw new Error(`Unexpected duplicate external route '${refId}'`);\n      }\n\n      externalRoutesById.set(refId, ref);\n    }\n  }\n\n  return { routes: routesById, externalRoutes: externalRoutesById };\n}\n\n/** @internal */\nexport function resolveRouteBindings(\n  bindRoutes: AppOptions['bindRoutes'],\n  config: Config,\n  plugins: Iterable<\n    Pick<\n      BackstagePlugin<AnyRoutes, AnyExternalRoutes>,\n      'getId' | 'routes' | 'externalRoutes'\n    >\n  >,\n) {\n  const routesById = collectRouteIds(plugins);\n  const result = new Map<ExternalRouteRef, RouteRef | SubRouteRef>();\n  const disabledExternalRefs = new Set<ExternalRouteRef>();\n\n  // Perform callback bindings first with highest priority\n  if (bindRoutes) {\n    const bind: AppRouteBinder = (\n      externalRoutes,\n      targetRoutes: { [name: string]: RouteRef | SubRouteRef },\n    ) => {\n      for (const [key, value] of Object.entries(targetRoutes)) {\n        const externalRoute = externalRoutes[key];\n        if (!externalRoute) {\n          throw new Error(`Key ${key} is not an existing external route`);\n        }\n        if (!value && !externalRoute.optional) {\n          throw new Error(\n            `External route ${key} is required but was ${\n              value === false ? 'disabled' : 'not provided'\n            }`,\n          );\n        }\n        if (value) {\n          result.set(externalRoute, value);\n        } else if (value === false) {\n          disabledExternalRefs.add(externalRoute);\n        }\n      }\n    };\n    bindRoutes({ bind });\n  }\n\n  // Then perform config based bindings with lower priority\n  const bindings = config\n    .getOptionalConfig('app.routes.bindings')\n    ?.get<JsonObject>();\n  if (bindings) {\n    for (const [externalRefId, targetRefId] of Object.entries(bindings)) {\n      if (!isValidTargetRefId(targetRefId)) {\n        throw new Error(\n          `Invalid config at app.routes.bindings['${externalRefId}'], value must be a non-empty string or false`,\n        );\n      }\n\n      const externalRef = routesById.externalRoutes.get(externalRefId);\n      if (!externalRef) {\n        throw new Error(\n          `Invalid config at app.routes.bindings, '${externalRefId}' is not a valid external route`,\n        );\n      }\n\n      // Skip if binding was already defined in code\n      if (result.has(externalRef) || disabledExternalRefs.has(externalRef)) {\n        continue;\n      }\n\n      if (targetRefId === false) {\n        disabledExternalRefs.add(externalRef);\n      } else {\n        const targetRef = routesById.routes.get(targetRefId);\n        if (!targetRef) {\n          throw new Error(\n            `Invalid config at app.routes.bindings['${externalRefId}'], '${targetRefId}' is not a valid route`,\n          );\n        }\n\n        result.set(externalRef, targetRef);\n      }\n    }\n  }\n\n  // Finally fall back to attempting to map defaults, at lowest priority\n  for (const externalRef of routesById.externalRoutes.values()) {\n    if (!result.has(externalRef) && !disabledExternalRefs.has(externalRef)) {\n      const defaultRefId =\n        'getDefaultTarget' in externalRef\n          ? (externalRef.getDefaultTarget as () => string | undefined)()\n          : undefined;\n      if (defaultRefId) {\n        const defaultRef = routesById.routes.get(defaultRefId);\n        if (defaultRef) {\n          result.set(externalRef, defaultRef);\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction isValidTargetRefId(value: unknown): value is string | false {\n  if (value === false) {\n    return true;\n  }\n\n  if (typeof value === 'string' && value) {\n    return true;\n  }\n\n  return false;\n}\n"],"names":[],"mappings":"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"}