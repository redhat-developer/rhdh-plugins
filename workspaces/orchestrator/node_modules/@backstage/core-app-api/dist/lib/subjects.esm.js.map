{"version":3,"file":"subjects.esm.js","sources":["../../src/lib/subjects.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from '@backstage/types';\nimport ObservableImpl from 'zen-observable';\n\n// TODO(Rugvip): These are stopgap and probably incomplete implementations of subjects.\n// If we add a more complete Observables library they should be replaced.\n\n/**\n * A basic implementation of ReactiveX publish subjects.\n *\n * A subject is a convenient way to create an observable when you want\n * to fan out a single value to all subscribers.\n *\n * See http://reactivex.io/documentation/subject.html\n */\nexport class PublishSubject<T>\n  implements Observable<T>, ZenObservable.SubscriptionObserver<T>\n{\n  private isClosed = false;\n  private terminatingError?: Error;\n\n  private readonly observable = new ObservableImpl<T>(subscriber => {\n    if (this.isClosed) {\n      if (this.terminatingError) {\n        subscriber.error(this.terminatingError);\n      } else {\n        subscriber.complete();\n      }\n      return () => {};\n    }\n\n    this.subscribers.add(subscriber);\n    return () => {\n      this.subscribers.delete(subscriber);\n    };\n  });\n\n  private readonly subscribers = new Set<\n    ZenObservable.SubscriptionObserver<T>\n  >();\n\n  [Symbol.observable]() {\n    return this;\n  }\n\n  get closed() {\n    return this.isClosed;\n  }\n\n  next(value: T) {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.subscribers.forEach(subscriber => subscriber.next(value));\n  }\n\n  error(error: Error) {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.isClosed = true;\n    this.terminatingError = error;\n    this.subscribers.forEach(subscriber => subscriber.error(error));\n  }\n\n  complete() {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.isClosed = true;\n    this.subscribers.forEach(subscriber => subscriber.complete());\n  }\n\n  subscribe(observer: ZenObservable.Observer<T>): ZenObservable.Subscription;\n  subscribe(\n    onNext: (value: T) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription;\n  subscribe(\n    onNext: ZenObservable.Observer<T> | ((value: T) => void),\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription {\n    const observer =\n      typeof onNext === 'function'\n        ? {\n            next: onNext,\n            error: onError,\n            complete: onComplete,\n          }\n        : onNext;\n\n    return this.observable.subscribe(observer);\n  }\n}\n\n/**\n * A basic implementation of ReactiveX behavior subjects.\n *\n * A subject is a convenient way to create an observable when you want\n * to fan out a single value to all subscribers.\n *\n * The BehaviorSubject will emit the most recently emitted value or error\n * whenever a new observer subscribes to the subject.\n *\n * See http://reactivex.io/documentation/subject.html\n */\n\nexport class BehaviorSubject<T>\n  implements Observable<T>, ZenObservable.SubscriptionObserver<T>\n{\n  private isClosed: boolean;\n  private currentValue: T;\n  private terminatingError: Error | undefined;\n  private readonly observable: Observable<T>;\n\n  constructor(value: T) {\n    this.isClosed = false;\n    this.currentValue = value;\n    this.terminatingError = undefined;\n    this.observable = new ObservableImpl<T>(subscriber => {\n      if (this.isClosed) {\n        if (this.terminatingError) {\n          subscriber.error(this.terminatingError);\n        } else {\n          subscriber.complete();\n        }\n        return () => {};\n      }\n\n      subscriber.next(this.currentValue);\n\n      this.subscribers.add(subscriber);\n      return () => {\n        this.subscribers.delete(subscriber);\n      };\n    });\n  }\n\n  private readonly subscribers = new Set<\n    ZenObservable.SubscriptionObserver<T>\n  >();\n\n  [Symbol.observable]() {\n    return this;\n  }\n\n  get closed() {\n    return this.isClosed;\n  }\n\n  next(value: T) {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.currentValue = value;\n    this.subscribers.forEach(subscriber => subscriber.next(value));\n  }\n\n  error(error: Error) {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.isClosed = true;\n    this.terminatingError = error;\n    this.subscribers.forEach(subscriber => subscriber.error(error));\n  }\n\n  complete() {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.isClosed = true;\n    this.subscribers.forEach(subscriber => subscriber.complete());\n  }\n\n  subscribe(observer: ZenObservable.Observer<T>): ZenObservable.Subscription;\n  subscribe(\n    onNext: (value: T) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription;\n  subscribe(\n    onNext: ZenObservable.Observer<T> | ((value: T) => void),\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription {\n    const observer =\n      typeof onNext === 'function'\n        ? {\n            next: onNext,\n            error: onError,\n            complete: onComplete,\n          }\n        : onNext;\n\n    return this.observable.subscribe(observer);\n  }\n}\n"],"names":[],"mappings":"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"}