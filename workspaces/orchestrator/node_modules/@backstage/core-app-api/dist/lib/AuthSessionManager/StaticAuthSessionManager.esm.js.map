{"version":3,"file":"StaticAuthSessionManager.esm.js","sources":["../../../src/lib/AuthSessionManager/StaticAuthSessionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MutableSessionManager, GetSessionOptions } from './types';\nimport { AuthConnector } from '../AuthConnector';\nimport { SessionScopeHelper } from './common';\nimport { SessionStateTracker } from './SessionStateTracker';\n\ntype Options<T> = {\n  /** The connector used for acting on the auth session */\n  connector: AuthConnector<T>;\n  /** Used to get the scope of the session */\n  sessionScopes?: (session: T) => Set<string>;\n  /** The default scopes that should always be present in a session, defaults to none. */\n  defaultScopes?: Set<string>;\n};\n\n/**\n * StaticAuthSessionManager manages an underlying session that does not expire.\n */\nexport class StaticAuthSessionManager<T> implements MutableSessionManager<T> {\n  private readonly connector: AuthConnector<T>;\n  private readonly helper: SessionScopeHelper<T>;\n  private readonly stateTracker = new SessionStateTracker();\n\n  private currentSession: T | undefined;\n\n  constructor(options: Options<T>) {\n    const { connector, defaultScopes = new Set(), sessionScopes } = options;\n\n    this.connector = connector;\n    this.helper = new SessionScopeHelper({ sessionScopes, defaultScopes });\n  }\n\n  setSession(session: T | undefined): void {\n    this.currentSession = session;\n    this.stateTracker.setIsSignedIn(Boolean(session));\n  }\n\n  async getSession(options: GetSessionOptions): Promise<T | undefined> {\n    if (\n      this.helper.sessionExistsAndHasScope(this.currentSession, options.scopes)\n    ) {\n      return this.currentSession;\n    }\n\n    // If we continue here we will show a popup, so exit if this is an optional session request.\n    if (options.optional) {\n      return undefined;\n    }\n\n    // We can call authRequester multiple times, the returned session will contain all requested scopes.\n    this.currentSession = await this.connector.createSession({\n      ...options,\n      scopes: this.helper.getExtendedScope(this.currentSession, options.scopes),\n    });\n    this.stateTracker.setIsSignedIn(true);\n    return this.currentSession;\n  }\n\n  /**\n   * We don't call this.connector.removeSession here, since this session manager\n   * is intended to be static. As such there's no need to hit the remote logout\n   * endpoint - simply discarding the local session state when signing out is\n   * enough.\n   */\n  async removeSession() {\n    this.currentSession = undefined;\n    this.stateTracker.setIsSignedIn(false);\n  }\n\n  sessionState$() {\n    return this.stateTracker.sessionState$();\n  }\n}\n"],"names":[],"mappings":";;;AAiCO,MAAM,wBAAA,CAAgE;AAAA,EAC1D,SAAA;AAAA,EACA,MAAA;AAAA,EACA,YAAA,GAAe,IAAI,mBAAA,EAAoB;AAAA,EAEhD,cAAA;AAAA,EAER,YAAY,OAAA,EAAqB;AAC/B,IAAA,MAAM,EAAE,SAAA,EAAW,aAAA,uBAAoB,GAAA,EAAI,EAAG,eAAc,GAAI,OAAA;AAEhE,IAAA,IAAA,CAAK,SAAA,GAAY,SAAA;AACjB,IAAA,IAAA,CAAK,SAAS,IAAI,kBAAA,CAAmB,EAAE,aAAA,EAAe,eAAe,CAAA;AAAA,EACvE;AAAA,EAEA,WAAW,OAAA,EAA8B;AACvC,IAAA,IAAA,CAAK,cAAA,GAAiB,OAAA;AACtB,IAAA,IAAA,CAAK,YAAA,CAAa,aAAA,CAAc,OAAA,CAAQ,OAAO,CAAC,CAAA;AAAA,EAClD;AAAA,EAEA,MAAM,WAAW,OAAA,EAAoD;AACnE,IAAA,IACE,KAAK,MAAA,CAAO,wBAAA,CAAyB,KAAK,cAAA,EAAgB,OAAA,CAAQ,MAAM,CAAA,EACxE;AACA,MAAA,OAAO,IAAA,CAAK,cAAA;AAAA,IACd;AAGA,IAAA,IAAI,QAAQ,QAAA,EAAU;AACpB,MAAA,OAAO,MAAA;AAAA,IACT;AAGA,IAAA,IAAA,CAAK,cAAA,GAAiB,MAAM,IAAA,CAAK,SAAA,CAAU,aAAA,CAAc;AAAA,MACvD,GAAG,OAAA;AAAA,MACH,QAAQ,IAAA,CAAK,MAAA,CAAO,iBAAiB,IAAA,CAAK,cAAA,EAAgB,QAAQ,MAAM;AAAA,KACzE,CAAA;AACD,IAAA,IAAA,CAAK,YAAA,CAAa,cAAc,IAAI,CAAA;AACpC,IAAA,OAAO,IAAA,CAAK,cAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,aAAA,GAAgB;AACpB,IAAA,IAAA,CAAK,cAAA,GAAiB,MAAA;AACtB,IAAA,IAAA,CAAK,YAAA,CAAa,cAAc,KAAK,CAAA;AAAA,EACvC;AAAA,EAEA,aAAA,GAAgB;AACd,IAAA,OAAO,IAAA,CAAK,aAAa,aAAA,EAAc;AAAA,EACzC;AACF;;;;"}