{"version":3,"file":"AuthSessionStore.esm.js","sources":["../../../src/lib/AuthSessionManager/AuthSessionStore.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ZodSchema } from 'zod';\nimport {\n  MutableSessionManager,\n  SessionScopesFunc,\n  SessionShouldRefreshFunc,\n  GetSessionOptions,\n} from './types';\nimport { SessionScopeHelper } from './common';\n\ntype Options<T> = {\n  /** The connector used for acting on the auth session */\n  manager: MutableSessionManager<T>;\n  /** Storage key to use to store sessions */\n  storageKey: string;\n  /** The schema used to validate the stored data */\n  schema: ZodSchema<T>;\n  /** Used to get the scope of the session */\n  sessionScopes?: SessionScopesFunc<T>;\n  /** Used to check if the session needs to be refreshed, defaults to never refresh */\n  sessionShouldRefresh?: SessionShouldRefreshFunc<T>;\n};\n\n/**\n * AuthSessionStore decorates another SessionManager with a functionality\n * to store the session in local storage.\n *\n * Session is serialized to JSON with special support for following types: Set.\n */\nexport class AuthSessionStore<T> implements MutableSessionManager<T> {\n  private readonly manager: MutableSessionManager<T>;\n  private readonly storageKey: string;\n  private readonly schema: ZodSchema<T>;\n  private readonly sessionShouldRefreshFunc: SessionShouldRefreshFunc<T>;\n  private readonly helper: SessionScopeHelper<T>;\n\n  constructor(options: Options<T>) {\n    const {\n      manager,\n      storageKey,\n      schema,\n      sessionScopes,\n      sessionShouldRefresh = () => false,\n    } = options;\n\n    this.manager = manager;\n    this.storageKey = storageKey;\n    this.schema = schema;\n    this.sessionShouldRefreshFunc = sessionShouldRefresh;\n    this.helper = new SessionScopeHelper({\n      sessionScopes,\n      defaultScopes: new Set(),\n    });\n  }\n\n  setSession(session: T | undefined): void {\n    this.manager.setSession(session);\n    this.saveSession(session);\n  }\n\n  async getSession(options: GetSessionOptions): Promise<T | undefined> {\n    const { scopes } = options;\n    const session = this.loadSession();\n\n    if (this.helper.sessionExistsAndHasScope(session, scopes)) {\n      const shouldRefresh = this.sessionShouldRefreshFunc(session!);\n\n      if (!shouldRefresh) {\n        this.manager.setSession(session!);\n        return session!;\n      }\n    }\n\n    const newSession = await this.manager.getSession(options);\n    this.saveSession(newSession);\n    return newSession;\n  }\n\n  async removeSession() {\n    localStorage.removeItem(this.storageKey);\n    await this.manager.removeSession();\n  }\n\n  sessionState$() {\n    return this.manager.sessionState$();\n  }\n\n  private loadSession(): T | undefined {\n    try {\n      const sessionJson = localStorage.getItem(this.storageKey);\n      if (sessionJson) {\n        const session = JSON.parse(sessionJson, (_key, value) => {\n          if (value?.__type === 'Set') {\n            return new Set(value.__value);\n          }\n          return value;\n        });\n\n        try {\n          return this.schema.parse(session);\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.log(\n            `Failed to load session from local storage because it did not conform to the expected schema, ${e}`,\n          );\n          throw e;\n        }\n      }\n\n      return undefined;\n    } catch (error) {\n      localStorage.removeItem(this.storageKey);\n      return undefined;\n    }\n  }\n\n  private saveSession(session: T | undefined) {\n    if (session === undefined) {\n      localStorage.removeItem(this.storageKey);\n      return;\n    }\n\n    try {\n      this.schema.parse(session);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Failed to save session to local storage because it did not conform to the expected schema, ${e}`,\n      );\n      return;\n    }\n\n    localStorage.setItem(\n      this.storageKey,\n      JSON.stringify(session, (_key, value) => {\n        if (value instanceof Set) {\n          return {\n            __type: 'Set',\n            __value: Array.from(value),\n          };\n        }\n        return value;\n      }),\n    );\n  }\n}\n"],"names":[],"mappings":"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"}