{"version":3,"file":"UrlPatternDiscovery.esm.js","sources":["../../../../src/apis/implementations/DiscoveryApi/UrlPatternDiscovery.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiscoveryApi } from '@backstage/core-plugin-api';\n\nconst ERROR_PREFIX = 'Invalid discovery URL pattern,';\n\n/**\n * UrlPatternDiscovery is a lightweight DiscoveryApi implementation.\n * It uses a single template string to construct URLs for each plugin.\n *\n * @public\n */\nexport class UrlPatternDiscovery implements DiscoveryApi {\n  /**\n   * Creates a new UrlPatternDiscovery given a template. The only\n   * interpolation done for the template is to replace instances of `{{pluginId}}`\n   * with the ID of the plugin being requested.\n   *\n   * Example pattern: `http://localhost:7007/api/{{ pluginId }}`\n   */\n  static compile(pattern: string): UrlPatternDiscovery {\n    const parts = pattern.split(/\\{\\{\\s*pluginId\\s*\\}\\}/);\n    const urlStr = parts.join('pluginId');\n\n    let url;\n    try {\n      url = new URL(urlStr);\n    } catch {\n      throw new Error(`${ERROR_PREFIX} URL '${urlStr}' is invalid`);\n    }\n    if (url.hash) {\n      throw new Error(`${ERROR_PREFIX} URL must not have a hash`);\n    }\n    if (url.search) {\n      throw new Error(`${ERROR_PREFIX} URL must not have a query`);\n    }\n    if (urlStr.endsWith('/')) {\n      throw new Error(`${ERROR_PREFIX} URL must not end with a slash`);\n    }\n\n    return new UrlPatternDiscovery(parts);\n  }\n\n  private constructor(private readonly parts: string[]) {}\n\n  async getBaseUrl(pluginId: string): Promise<string> {\n    return this.parts.join(encodeURIComponent(pluginId));\n  }\n}\n"],"names":[],"mappings":"AAkBA,MAAM,YAAA,GAAe,gCAAA;AAQd,MAAM,mBAAA,CAA4C;AAAA,EA+B/C,YAA6B,KAAA,EAAiB;AAAjB,IAAA,IAAA,CAAA,KAAA,GAAA,KAAA;AAAA,EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAvBvD,OAAO,QAAQ,OAAA,EAAsC;AACnD,IAAA,MAAM,KAAA,GAAQ,OAAA,CAAQ,KAAA,CAAM,wBAAwB,CAAA;AACpD,IAAA,MAAM,MAAA,GAAS,KAAA,CAAM,IAAA,CAAK,UAAU,CAAA;AAEpC,IAAA,IAAI,GAAA;AACJ,IAAA,IAAI;AACF,MAAA,GAAA,GAAM,IAAI,IAAI,MAAM,CAAA;AAAA,IACtB,CAAA,CAAA,MAAQ;AACN,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,EAAG,YAAY,CAAA,MAAA,EAAS,MAAM,CAAA,YAAA,CAAc,CAAA;AAAA,IAC9D;AACA,IAAA,IAAI,IAAI,IAAA,EAAM;AACZ,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,EAAG,YAAY,CAAA,yBAAA,CAA2B,CAAA;AAAA,IAC5D;AACA,IAAA,IAAI,IAAI,MAAA,EAAQ;AACd,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,EAAG,YAAY,CAAA,0BAAA,CAA4B,CAAA;AAAA,IAC7D;AACA,IAAA,IAAI,MAAA,CAAO,QAAA,CAAS,GAAG,CAAA,EAAG;AACxB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,EAAG,YAAY,CAAA,8BAAA,CAAgC,CAAA;AAAA,IACjE;AAEA,IAAA,OAAO,IAAI,oBAAoB,KAAK,CAAA;AAAA,EACtC;AAAA,EAIA,MAAM,WAAW,QAAA,EAAmC;AAClD,IAAA,OAAO,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,kBAAA,CAAmB,QAAQ,CAAC,CAAA;AAAA,EACrD;AACF;;;;"}