{"version":3,"file":"OAuthPendingRequests.esm.js","sources":["../../../../src/apis/implementations/OAuthRequestApi/OAuthPendingRequests.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from '@backstage/types';\nimport { BehaviorSubject } from '../../../lib/subjects';\n\ntype RequestQueueEntry<ResultType> = {\n  scopes: Set<string>;\n  resolve: (value: ResultType | PromiseLike<ResultType>) => void;\n  reject: (reason: Error) => void;\n};\n\nexport type PendingRequest<ResultType> = {\n  scopes: Set<string> | undefined;\n  resolve: (value: ResultType) => void;\n  reject: (reason: Error) => void;\n};\n\nexport function hasScopes(\n  searched: Set<string>,\n  searchFor: Set<string>,\n): boolean {\n  for (const scope of searchFor) {\n    if (!searched.has(scope)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function joinScopes(\n  scopes: Set<string>,\n  ...moreScopess: Set<string>[]\n): Set<string> {\n  const result = new Set(scopes);\n\n  for (const moreScopes of moreScopess) {\n    for (const scope of moreScopes) {\n      result.add(scope);\n    }\n  }\n\n  return result;\n}\n\n/**\n * The OAuthPendingRequests class is a utility for managing and observing\n * a stream of requests for oauth scopes for a single provider, and resolving\n * them correctly once requests are fulfilled.\n */\nexport class OAuthPendingRequests<ResultType> {\n  private requests: RequestQueueEntry<ResultType>[] = [];\n  private subject = new BehaviorSubject<PendingRequest<ResultType>>(\n    this.getCurrentPending(),\n  );\n\n  request(scopes: Set<string>): Promise<ResultType> {\n    return new Promise((resolve, reject) => {\n      this.requests.push({ scopes, resolve, reject });\n\n      this.subject.next(this.getCurrentPending());\n    });\n  }\n\n  resolve(scopes: Set<string>, result: ResultType): void {\n    this.requests = this.requests.filter(request => {\n      if (hasScopes(scopes, request.scopes)) {\n        request.resolve(result);\n        return false;\n      }\n      return true;\n    });\n\n    this.subject.next(this.getCurrentPending());\n  }\n\n  reject(error: Error) {\n    this.requests.forEach(request => request.reject(error));\n    this.requests = [];\n\n    this.subject.next(this.getCurrentPending());\n  }\n\n  pending(): Observable<PendingRequest<ResultType>> {\n    return this.subject;\n  }\n\n  private getCurrentPending(): PendingRequest<ResultType> {\n    const currentScopes =\n      this.requests.length === 0\n        ? undefined\n        : this.requests\n            .slice(1)\n            .reduce(\n              (acc, current) => joinScopes(acc, current.scopes),\n              this.requests[0].scopes,\n            );\n\n    return {\n      scopes: currentScopes,\n      resolve: (value: ResultType) => {\n        if (currentScopes) {\n          this.resolve(currentScopes, value);\n        }\n      },\n      reject: (reason: Error) => {\n        if (currentScopes) {\n          this.reject(reason);\n        }\n      },\n    };\n  }\n}\n"],"names":[],"mappings":";;AA+BO,SAAS,SAAA,CACd,UACA,SAAA,EACS;AACT,EAAA,KAAA,MAAW,SAAS,SAAA,EAAW;AAC7B,IAAA,IAAI,CAAC,QAAA,CAAS,GAAA,CAAI,KAAK,CAAA,EAAG;AACxB,MAAA,OAAO,KAAA;AAAA,IACT;AAAA,EACF;AACA,EAAA,OAAO,IAAA;AACT;AAEO,SAAS,UAAA,CACd,WACG,WAAA,EACU;AACb,EAAA,MAAM,MAAA,GAAS,IAAI,GAAA,CAAI,MAAM,CAAA;AAE7B,EAAA,KAAA,MAAW,cAAc,WAAA,EAAa;AACpC,IAAA,KAAA,MAAW,SAAS,UAAA,EAAY;AAC9B,MAAA,MAAA,CAAO,IAAI,KAAK,CAAA;AAAA,IAClB;AAAA,EACF;AAEA,EAAA,OAAO,MAAA;AACT;AAOO,MAAM,oBAAA,CAAiC;AAAA,EACpC,WAA4C,EAAC;AAAA,EAC7C,UAAU,IAAI,eAAA;AAAA,IACpB,KAAK,iBAAA;AAAkB,GACzB;AAAA,EAEA,QAAQ,MAAA,EAA0C;AAChD,IAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAA,KAAW;AACtC,MAAA,IAAA,CAAK,SAAS,IAAA,CAAK,EAAE,MAAA,EAAQ,OAAA,EAAS,QAAQ,CAAA;AAE9C,MAAA,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,IAAA,CAAK,iBAAA,EAAmB,CAAA;AAAA,IAC5C,CAAC,CAAA;AAAA,EACH;AAAA,EAEA,OAAA,CAAQ,QAAqB,MAAA,EAA0B;AACrD,IAAA,IAAA,CAAK,QAAA,GAAW,IAAA,CAAK,QAAA,CAAS,MAAA,CAAO,CAAA,OAAA,KAAW;AAC9C,MAAA,IAAI,SAAA,CAAU,MAAA,EAAQ,OAAA,CAAQ,MAAM,CAAA,EAAG;AACrC,QAAA,OAAA,CAAQ,QAAQ,MAAM,CAAA;AACtB,QAAA,OAAO,KAAA;AAAA,MACT;AACA,MAAA,OAAO,IAAA;AAAA,IACT,CAAC,CAAA;AAED,IAAA,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,IAAA,CAAK,iBAAA,EAAmB,CAAA;AAAA,EAC5C;AAAA,EAEA,OAAO,KAAA,EAAc;AACnB,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,CAAA,OAAA,KAAW,OAAA,CAAQ,MAAA,CAAO,KAAK,CAAC,CAAA;AACtD,IAAA,IAAA,CAAK,WAAW,EAAC;AAEjB,IAAA,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,IAAA,CAAK,iBAAA,EAAmB,CAAA;AAAA,EAC5C;AAAA,EAEA,OAAA,GAAkD;AAChD,IAAA,OAAO,IAAA,CAAK,OAAA;AAAA,EACd;AAAA,EAEQ,iBAAA,GAAgD;AACtD,IAAA,MAAM,aAAA,GACJ,IAAA,CAAK,QAAA,CAAS,MAAA,KAAW,CAAA,GACrB,SACA,IAAA,CAAK,QAAA,CACF,KAAA,CAAM,CAAC,CAAA,CACP,MAAA;AAAA,MACC,CAAC,GAAA,EAAK,OAAA,KAAY,UAAA,CAAW,GAAA,EAAK,QAAQ,MAAM,CAAA;AAAA,MAChD,IAAA,CAAK,QAAA,CAAS,CAAC,CAAA,CAAE;AAAA,KACnB;AAER,IAAA,OAAO;AAAA,MACL,MAAA,EAAQ,aAAA;AAAA,MACR,OAAA,EAAS,CAAC,KAAA,KAAsB;AAC9B,QAAA,IAAI,aAAA,EAAe;AACjB,UAAA,IAAA,CAAK,OAAA,CAAQ,eAAe,KAAK,CAAA;AAAA,QACnC;AAAA,MACF,CAAA;AAAA,MACA,MAAA,EAAQ,CAAC,MAAA,KAAkB;AACzB,QAAA,IAAI,aAAA,EAAe;AACjB,UAAA,IAAA,CAAK,OAAO,MAAM,CAAA;AAAA,QACpB;AAAA,MACF;AAAA,KACF;AAAA,EACF;AACF;;;;"}