{"version":3,"file":"ApiRegistry.esm.js","sources":["../../../src/apis/system/ApiRegistry.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, ApiHolder } from '@backstage/core-plugin-api';\n\ntype ApiImpl<T = unknown> = readonly [ApiRef<T>, T];\n\n/** @internal */\nclass ApiRegistryBuilder {\n  private apis: [string, unknown][] = [];\n\n  add<T, I extends T>(api: ApiRef<T>, impl: I): I {\n    this.apis.push([api.id, impl]);\n    return impl;\n  }\n\n  build(): ApiRegistry {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new ApiRegistry(new Map(this.apis));\n  }\n}\n\n/**\n * A registry for utility APIs.\n *\n * @internal\n */\nexport class ApiRegistry implements ApiHolder {\n  static builder() {\n    return new ApiRegistryBuilder();\n  }\n\n  /**\n   * Creates a new ApiRegistry with a list of API implementations.\n   *\n   * @param apis - A list of pairs mapping an ApiRef to its respective implementation\n   */\n  static from(apis: ApiImpl[]) {\n    return new ApiRegistry(new Map(apis.map(([api, impl]) => [api.id, impl])));\n  }\n\n  /**\n   * Creates a new ApiRegistry with a single API implementation.\n   *\n   * @param api - ApiRef for the API to add\n   * @param impl - Implementation of the API to add\n   */\n  static with<T>(api: ApiRef<T>, impl: T): ApiRegistry {\n    return new ApiRegistry(new Map([[api.id, impl]]));\n  }\n\n  constructor(private readonly apis: Map<string, unknown>) {}\n\n  /**\n   * Returns a new ApiRegistry with the provided API added to the existing ones.\n   *\n   * @param api - ApiRef for the API to add\n   * @param impl - Implementation of the API to add\n   */\n  with<T>(api: ApiRef<T>, impl: T): ApiRegistry {\n    return new ApiRegistry(new Map([...this.apis, [api.id, impl]]));\n  }\n\n  get<T>(api: ApiRef<T>): T | undefined {\n    return this.apis.get(api.id) as T | undefined;\n  }\n}\n"],"names":[],"mappings":"AAqBA,MAAM,kBAAA,CAAmB;AAAA,EACf,OAA4B,EAAC;AAAA,EAErC,GAAA,CAAoB,KAAgB,IAAA,EAAY;AAC9C,IAAA,IAAA,CAAK,KAAK,IAAA,CAAK,CAAC,GAAA,CAAI,EAAA,EAAI,IAAI,CAAC,CAAA;AAC7B,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,KAAA,GAAqB;AAEnB,IAAA,OAAO,IAAI,WAAA,CAAY,IAAI,GAAA,CAAI,IAAA,CAAK,IAAI,CAAC,CAAA;AAAA,EAC3C;AACF;AAOO,MAAM,WAAA,CAAiC;AAAA,EAwB5C,YAA6B,IAAA,EAA4B;AAA5B,IAAA,IAAA,CAAA,IAAA,GAAA,IAAA;AAAA,EAA6B;AAAA,EAvB1D,OAAO,OAAA,GAAU;AACf,IAAA,OAAO,IAAI,kBAAA,EAAmB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,KAAK,IAAA,EAAiB;AAC3B,IAAA,OAAO,IAAI,WAAA,CAAY,IAAI,GAAA,CAAI,IAAA,CAAK,IAAI,CAAC,CAAC,GAAA,EAAK,IAAI,MAAM,CAAC,GAAA,CAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAA;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,IAAA,CAAQ,GAAA,EAAgB,IAAA,EAAsB;AACnD,IAAA,OAAO,IAAI,WAAA,iBAAY,IAAI,GAAA,CAAI,CAAC,CAAC,GAAA,CAAI,EAAA,EAAI,IAAI,CAAC,CAAC,CAAC,CAAA;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAA,CAAQ,KAAgB,IAAA,EAAsB;AAC5C,IAAA,OAAO,IAAI,WAAA,CAAY,IAAI,GAAA,CAAI,CAAC,GAAG,IAAA,CAAK,IAAA,EAAM,CAAC,GAAA,CAAI,EAAA,EAAI,IAAI,CAAC,CAAC,CAAC,CAAA;AAAA,EAChE;AAAA,EAEA,IAAO,GAAA,EAA+B;AACpC,IAAA,OAAO,IAAA,CAAK,IAAA,CAAK,GAAA,CAAI,GAAA,CAAI,EAAE,CAAA;AAAA,EAC7B;AACF;;;;"}