import { jsxs, jsx } from 'react/jsx-runtime';
import { useState, useEffect } from 'react';
import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import { useApi, errorApiRef, SessionState } from '@backstage/core-plugin-api';
import { ProviderSettingsAvatar } from './ProviderSettingsAvatar.esm.js';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { userSettingsTranslationRef } from '../../translation.esm.js';

const emptyProfile = {};
const ProviderSettingsItem = (props) => {
  const { title, description, icon: Icon, apiRef } = props;
  const api = useApi(apiRef);
  const errorApi = useApi(errorApiRef);
  const [signedIn, setSignedIn] = useState(false);
  const [profile, setProfile] = useState(emptyProfile);
  const { t } = useTranslationRef(userSettingsTranslationRef);
  useEffect(() => {
    let didCancel = false;
    const subscription = api.sessionState$().subscribe((sessionState) => {
      if (sessionState !== SessionState.SignedIn) {
        setProfile(emptyProfile);
        setSignedIn(false);
      }
      if (!didCancel) {
        api.getProfile({ optional: true }).then((profileResponse) => {
          if (!didCancel) {
            if (sessionState === SessionState.SignedIn) {
              setSignedIn(true);
            }
            if (profileResponse) {
              setProfile(profileResponse);
            }
          }
        });
      }
    });
    return () => {
      didCancel = true;
      subscription.unsubscribe();
    };
  }, [api]);
  return /* @__PURE__ */ jsxs(ListItem, { children: [
    /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Icon, {}) }),
    /* @__PURE__ */ jsx(
      ListItemText,
      {
        primary: title,
        secondary: /* @__PURE__ */ jsx(Tooltip, { placement: "top", arrow: true, title: description, children: /* @__PURE__ */ jsxs(Grid, { container: true, spacing: 6, children: [
          /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(ProviderSettingsAvatar, { size: 48, picture: profile.picture }) }),
          /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, sm: true, container: true, children: /* @__PURE__ */ jsx(Grid, { item: true, xs: true, container: true, direction: "column", spacing: 2, children: /* @__PURE__ */ jsxs(Grid, { item: true, xs: true, children: [
            profile.displayName && /* @__PURE__ */ jsx(
              Typography,
              {
                variant: "subtitle1",
                color: "textPrimary",
                gutterBottom: true,
                children: profile.displayName
              }
            ),
            profile.email && /* @__PURE__ */ jsx(Typography, { variant: "body2", color: "textSecondary", children: profile.email }),
            /* @__PURE__ */ jsx(Typography, { variant: "body2", color: "textSecondary", children: description })
          ] }) }) })
        ] }) }),
        secondaryTypographyProps: { noWrap: true, style: { width: "80%" } }
      }
    ),
    /* @__PURE__ */ jsx(ListItemSecondaryAction, { children: /* @__PURE__ */ jsx(
      Tooltip,
      {
        placement: "top",
        arrow: true,
        title: signedIn ? t("providerSettingsItem.title.signOut", { title }) : t("providerSettingsItem.title.signIn", { title }),
        children: /* @__PURE__ */ jsx(
          Button,
          {
            variant: "outlined",
            color: "primary",
            onClick: () => {
              const action = signedIn ? api.signOut() : api.signIn();
              action.catch((error) => errorApi.post(error));
            },
            children: signedIn ? t("providerSettingsItem.buttonTitle.signOut") : t("providerSettingsItem.buttonTitle.signIn")
          }
        )
      }
    ) })
  ] });
};

export { ProviderSettingsItem };
//# sourceMappingURL=ProviderSettingsItem.esm.js.map
