import { jsx, jsxs } from 'react/jsx-runtime';
import { useRef, useState, useCallback } from 'react';
import List from '@material-ui/core/List';
import TextField from '@material-ui/core/TextField';
import IconButton from '@material-ui/core/IconButton';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { EmptyFlags } from './EmptyFlags.esm.js';
import { FlagItem } from './FeatureFlagsItem.esm.js';
import { useApi, featureFlagsApiRef, FeatureFlagState } from '@backstage/core-plugin-api';
import { InfoCard } from '@backstage/core-components';
import ClearIcon from '@material-ui/icons/Clear';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { userSettingsTranslationRef } from '../../translation.esm.js';

const sortFlags = (flags, featureFlagsApi) => {
  const activeFlags = flags.filter((flag) => featureFlagsApi.isActive(flag.name));
  const idleFlags = flags.filter((flag) => !featureFlagsApi.isActive(flag.name));
  return [...activeFlags, ...idleFlags];
};
const UserSettingsFeatureFlags = () => {
  const featureFlagsApi = useApi(featureFlagsApiRef);
  const inputRef = useRef();
  const initialFeatureFlags = featureFlagsApi.getRegisteredFlags();
  const initialFeatureFlagsSorted = sortFlags(
    initialFeatureFlags,
    featureFlagsApi
  );
  const [featureFlags] = useState(initialFeatureFlagsSorted);
  const initialFlagState = Object.fromEntries(
    featureFlags.map(({ name }) => [name, featureFlagsApi.isActive(name)])
  );
  const [state, setState] = useState(initialFlagState);
  const [filterInput, setFilterInput] = useState("");
  const { t } = useTranslationRef(userSettingsTranslationRef);
  const toggleFlag = useCallback(
    (flagName) => {
      const newState = featureFlagsApi.isActive(flagName) ? FeatureFlagState.None : FeatureFlagState.Active;
      featureFlagsApi.save({
        states: { [flagName]: newState },
        merge: true
      });
      setState((prevState) => ({
        ...prevState,
        [flagName]: newState === FeatureFlagState.Active
      }));
    },
    [featureFlagsApi]
  );
  if (!featureFlags.length) {
    return /* @__PURE__ */ jsx(EmptyFlags, {});
  }
  const clearFilterInput = () => {
    setFilterInput("");
    inputRef?.current?.focus();
  };
  const filteredFeatureFlags = featureFlags.filter((featureFlag) => {
    const featureFlagName = featureFlag.name.toLocaleLowerCase("en-US");
    return featureFlagName.includes(filterInput.toLocaleLowerCase("en-US"));
  });
  const Header = () => /* @__PURE__ */ jsxs(Grid, { container: true, style: { justifyContent: "space-between" }, children: [
    /* @__PURE__ */ jsxs(Grid, { item: true, xs: 6, md: 8, children: [
      /* @__PURE__ */ jsx(Typography, { variant: "h5", children: t("featureFlags.title") }),
      /* @__PURE__ */ jsx(Typography, { variant: "subtitle1", children: t("featureFlags.description") })
    ] }),
    featureFlags.length >= 10 && /* @__PURE__ */ jsx(Grid, { item: true, xs: 6, md: 4, children: /* @__PURE__ */ jsx(
      TextField,
      {
        label: t("featureFlags.filterTitle"),
        style: { display: "flex", justifyContent: "flex-end" },
        inputRef: (ref) => ref && ref.focus(),
        InputProps: {
          ...filterInput.length && {
            endAdornment: /* @__PURE__ */ jsx(
              IconButton,
              {
                "aria-label": t("featureFlags.clearFilter"),
                onClick: clearFilterInput,
                edge: "end",
                children: /* @__PURE__ */ jsx(ClearIcon, {})
              }
            )
          }
        },
        onChange: (e) => setFilterInput(e.target.value),
        value: filterInput
      }
    ) })
  ] });
  return /* @__PURE__ */ jsx(InfoCard, { title: /* @__PURE__ */ jsx(Header, {}), children: /* @__PURE__ */ jsx(List, { dense: true, children: filteredFeatureFlags.map((featureFlag) => {
    const enabled = Boolean(state[featureFlag.name]);
    return /* @__PURE__ */ jsx(
      FlagItem,
      {
        flag: featureFlag,
        enabled,
        toggleHandler: toggleFlag
      },
      featureFlag.name
    );
  }) }) });
};

export { UserSettingsFeatureFlags, sortFlags };
//# sourceMappingURL=UserSettingsFeatureFlags.esm.js.map
