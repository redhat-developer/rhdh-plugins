import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { StorageApi, FetchApi, DiscoveryApi, ErrorApi, IdentityApi, StorageValueSnapshot, IconComponent, ApiRef, ProfileInfoApi, SessionApi, ProfileInfo } from '@backstage/core-plugin-api';
import { JsonValue, Observable } from '@backstage/types';
import { SignalApi } from '@backstage/plugin-signals-react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { PropsWithChildren, ReactNode, ElementType } from 'react';
import { TabProps } from '@material-ui/core/Tab';

/**
 * An implementation of the storage API, that uses the user-settings backend to
 * persist the data in the DB.
 *
 * @public
 */
declare class UserSettingsStorage implements StorageApi {
    private readonly namespace;
    private readonly fetchApi;
    private readonly discoveryApi;
    private readonly errorApi;
    private readonly identityApi;
    private readonly fallback;
    private readonly signalApi?;
    private subscribers;
    private readonly observables;
    private constructor();
    static create(options: {
        fetchApi: FetchApi;
        discoveryApi: DiscoveryApi;
        errorApi: ErrorApi;
        identityApi: IdentityApi;
        signalApi?: SignalApi;
        namespace?: string;
    }): UserSettingsStorage;
    forBucket(name: string): StorageApi;
    remove(key: string): Promise<void>;
    set<T extends JsonValue>(key: string, data: T): Promise<void>;
    observe$<T extends JsonValue>(key: string): Observable<StorageValueSnapshot<T>>;
    snapshot<T extends JsonValue>(key: string): StorageValueSnapshot<T>;
    private get;
    private getFetchUrl;
    private notifyChanges;
    private isSignedIn;
}

/** @public */
declare const userSettingsPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    settingsPage: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}>;
/** @public */
declare const UserSettingsPage: (props: {
    providerSettings?: JSX.Element;
}) => react_jsx_runtime.JSX.Element;

/** @public */
declare const Settings: (props: {
    icon?: IconComponent;
}) => react_jsx_runtime.JSX.Element;

/** @public */
declare const SettingsPage: (props: {
    providerSettings?: JSX.Element;
}) => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsAuthProviders: (props: {
    providerSettings?: JSX.Element;
}) => react_jsx_runtime.JSX.Element;

/** @public */
declare const DefaultProviderSettings: (props: {
    configuredProviders: string[];
}) => react_jsx_runtime.JSX.Element;

/** @public */
declare const ProviderSettingsItem: (props: {
    title: string;
    description: string;
    icon: IconComponent;
    apiRef: ApiRef<ProfileInfoApi & SessionApi>;
}) => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsGeneral: () => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsProfileCard: () => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsMenu: () => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsSignInAvatar: (props: {
    size?: number;
}) => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsAppearanceCard: () => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsThemeToggle: () => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsPinToggle: () => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsIdentityCard: () => react_jsx_runtime.JSX.Element;

/** @public */
declare const UserSettingsLanguageToggle: () => react_jsx_runtime.JSX.Element | null;

/** @public */
declare const UserSettingsFeatureFlags: () => react_jsx_runtime.JSX.Element;

/** @public */
declare const useUserProfile: () => {
    profile: ProfileInfo;
    displayName: string;
    loading: boolean;
    backstageIdentity?: undefined;
} | {
    profile: ProfileInfo;
    backstageIdentity: _backstage_core_plugin_api.BackstageUserIdentity;
    displayName: string;
    loading: false;
};

/** @public @deprecated Use SettingsLayout.Route approach instead */
declare const USER_SETTINGS_TAB_KEY = "plugin.user-settings.settingsLayoutRoute";
/** @public @deprecated Use SettingsLayoutRouteProps instead */
type UserSettingsTabProps = PropsWithChildren<{
    /**
     * The path to the tab in the settings route
     * @example `/settings/advanced`
     */
    path: string;
    /** The title of the tab. It will also reflect in the document title when the tab is active */
    title: string;
}>;
/**
 * Renders a tab inside the settings page
 * @param props - Component props
 * @public
 * @deprecated Use SettingsLayout.Route instead
 */
declare const UserSettingsTab: (props: UserSettingsTabProps) => react_jsx_runtime.JSX.Element;

/** @public */
type SettingsLayoutRouteProps = {
    path: string;
    title: string;
    children: JSX.Element;
    tabProps?: TabProps<ElementType, {
        component?: ElementType;
    }>;
};
/** @public */
type SettingsLayoutProps = {
    title?: string;
    subtitle?: string;
    children?: ReactNode;
};
/**
 * @public
 */
declare const SettingsLayout: {
    (props: SettingsLayoutProps): react_jsx_runtime.JSX.Element;
    Route: (props: SettingsLayoutRouteProps) => null;
};

export { DefaultProviderSettings, ProviderSettingsItem, SettingsPage as Router, Settings, SettingsLayout, type SettingsLayoutProps, type SettingsLayoutRouteProps, USER_SETTINGS_TAB_KEY, UserSettingsAppearanceCard, UserSettingsAuthProviders, UserSettingsFeatureFlags, UserSettingsGeneral, UserSettingsIdentityCard, UserSettingsLanguageToggle, UserSettingsMenu, UserSettingsPage, UserSettingsPinToggle, UserSettingsProfileCard, UserSettingsSignInAvatar, UserSettingsStorage, UserSettingsTab, type UserSettingsTabProps, UserSettingsThemeToggle, userSettingsPlugin as plugin, useUserProfile, userSettingsPlugin };
