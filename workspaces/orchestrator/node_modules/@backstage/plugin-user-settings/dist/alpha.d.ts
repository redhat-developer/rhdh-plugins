import * as react from 'react';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import * as _backstage_core_plugin_api_alpha from '@backstage/core-plugin-api/alpha';

/** @alpha */
declare const userSettingsTranslationRef: _backstage_core_plugin_api_alpha.TranslationRef<"user-settings", {
    readonly "featureFlags.title": "Feature Flags";
    readonly "featureFlags.description": "Please refresh the page when toggling feature flags";
    readonly "featureFlags.filterTitle": "Filter";
    readonly "featureFlags.clearFilter": "Clear filter";
    readonly "featureFlags.emptyFlags.title": "No Feature Flags";
    readonly "featureFlags.emptyFlags.action.title": "An example for how to add a feature flag is highlighted below:";
    readonly "featureFlags.emptyFlags.action.readMoreButtonTitle": "Read More";
    readonly "featureFlags.emptyFlags.description": "Feature Flags make it possible for plugins to register features in Backstage for users to opt into. You can use this to split out logic in your code for manual A/B testing, etc.";
    readonly "featureFlags.flagItem.title.disable": "Disable";
    readonly "featureFlags.flagItem.title.enable": "Enable";
    readonly "featureFlags.flagItem.subtitle.registeredInApplication": "Registered in the application";
    readonly "featureFlags.flagItem.subtitle.registeredInPlugin": "Registered in {{pluginId}} plugin";
    readonly "languageToggle.select": "Select language {{language}}";
    readonly "languageToggle.title": "Language";
    readonly "languageToggle.description": "Change the language";
    readonly "themeToggle.select": "Select {{theme}}";
    readonly "themeToggle.title": "Theme";
    readonly "themeToggle.description": "Change the theme mode";
    readonly "themeToggle.names.auto": "Auto";
    readonly "themeToggle.names.dark": "Dark";
    readonly "themeToggle.names.light": "Light";
    readonly "themeToggle.selectAuto": "Select Auto Theme";
    readonly "signOutMenu.title": "Sign Out";
    readonly "signOutMenu.moreIconTitle": "more";
    readonly "pinToggle.title": "Pin Sidebar";
    readonly "pinToggle.description": "Prevent the sidebar from collapsing";
    readonly "pinToggle.ariaLabelTitle": "Pin Sidebar Switch";
    readonly "pinToggle.switchTitles.unpin": "Unpin Sidebar";
    readonly "pinToggle.switchTitles.pin": "Pin Sidebar";
    readonly "identityCard.title": "Backstage Identity";
    readonly "identityCard.noIdentityTitle": "No Backstage Identity";
    readonly "identityCard.userEntity": "User Entity";
    readonly "identityCard.ownershipEntities": "Ownership Entities";
    readonly "defaultProviderSettings.description": "Provides authentication towards {{provider}} APIs and identities";
    readonly "emptyProviders.title": "No Authentication Providers";
    readonly "emptyProviders.action.title": "Open app-config.yaml and make the changes as highlighted below:";
    readonly "emptyProviders.action.readMoreButtonTitle": "Read More";
    readonly "emptyProviders.description": "You can add Authentication Providers to Backstage which allows you to use these providers to authenticate yourself.";
    readonly "providerSettingsItem.title.signIn": "Sign in to {{title}}";
    readonly "providerSettingsItem.title.signOut": "Sign out from {{title}}";
    readonly "providerSettingsItem.buttonTitle.signIn": "Sign in";
    readonly "providerSettingsItem.buttonTitle.signOut": "Sign out";
    readonly "authProviders.title": "Available Providers";
    readonly "defaultSettingsPage.tabsTitle.featureFlags": "Feature Flags";
    readonly "defaultSettingsPage.tabsTitle.authProviders": "Authentication Providers";
    readonly "defaultSettingsPage.tabsTitle.general": "General";
    readonly "settingsLayout.title": "Settings";
    readonly sidebarTitle: "Settings";
    readonly "profileCard.title": "Profile";
    readonly "appearanceCard.title": "Appearance";
}>;

/** @alpha */
declare const settingsNavItem: _backstage_frontend_plugin_api.ExtensionDefinition<{
    kind: "nav-item";
    name: undefined;
    config: {};
    configInput: {};
    output: _backstage_frontend_plugin_api.ExtensionDataRef<{
        title: string;
        icon: _backstage_core_plugin_api.IconComponent;
        routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
    }, "core.nav-item.target", {}>;
    inputs: {};
    params: {
        title: string;
        icon: _backstage_core_plugin_api.IconComponent;
        routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
    };
}>;
/**
 * @alpha
 */
declare const _default: _backstage_frontend_plugin_api.OverridableFrontendPlugin<{
    root: _backstage_frontend_plugin_api.RouteRef<undefined>;
}, {}, {
    "nav-item:user-settings": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "nav-item";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<{
            title: string;
            icon: _backstage_core_plugin_api.IconComponent;
            routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
        }, "core.nav-item.target", {}>;
        inputs: {};
        params: {
            title: string;
            icon: _backstage_core_plugin_api.IconComponent;
            routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
        };
    }>;
    "page:user-settings": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            path: string | undefined;
        };
        configInput: {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {
            providerSettings: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}>, {
                singleton: true;
                optional: true;
            }>;
        };
        kind: "page";
        name: undefined;
        params: {
            defaultPath?: [Error: `Use the 'path' param instead`];
            path: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef;
        };
    }>;
}>;

export { _default as default, settingsNavItem, userSettingsTranslationRef };
