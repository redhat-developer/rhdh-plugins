{"version":3,"file":"useLogViewerSelection.esm.js","sources":["../../../src/components/LogViewer/useLogViewerSelection.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorApiRef, useApi } from '@backstage/core-plugin-api';\nimport { useEffect, useState } from 'react';\nimport useCopyToClipboard from 'react-use/esm/useCopyToClipboard';\nimport { AnsiLine } from './AnsiProcessor';\n\nexport function useLogViewerSelection(lines: AnsiLine[]) {\n  const errorApi = useApi(errorApiRef);\n  const [sel, setSelection] = useState<{ start: number; end: number }>();\n  const start = sel ? Math.min(sel.start, sel.end) : undefined;\n  const end = sel ? Math.max(sel.start, sel.end) : undefined;\n\n  const [{ error }, copyToClipboard] = useCopyToClipboard();\n\n  useEffect(() => {\n    if (error) {\n      errorApi.post(error);\n    }\n  }, [error, errorApi]);\n\n  return {\n    shouldShowButton(line: number) {\n      return start === line || end === line;\n    },\n    isSelected(line: number) {\n      if (!sel) {\n        return false;\n      }\n      return start! <= line && line <= end!;\n    },\n    setSelection(line: number, add: boolean) {\n      if (add) {\n        setSelection(s =>\n          s ? { start: s.start, end: line } : { start: line, end: line },\n        );\n      } else {\n        setSelection(s =>\n          s?.start === line && s?.end === line\n            ? undefined\n            : { start: line, end: line },\n        );\n      }\n    },\n    copySelection() {\n      if (sel) {\n        const copyText = lines\n          .slice(Math.min(sel.start, sel.end) - 1, Math.max(sel.start, sel.end))\n          .map(l => l.chunks.map(c => c.text).join(''))\n          .join('\\n');\n        copyToClipboard(copyText);\n        setSelection(undefined);\n      }\n    },\n  };\n}\n"],"names":[],"mappings":";;;;AAqBO,SAAS,sBAAsB,KAAA,EAAmB;AACvD,EAAA,MAAM,QAAA,GAAW,OAAO,WAAW,CAAA;AACnC,EAAA,MAAM,CAAC,GAAA,EAAK,YAAY,CAAA,GAAI,QAAA,EAAyC;AACrE,EAAA,MAAM,KAAA,GAAQ,MAAM,IAAA,CAAK,GAAA,CAAI,IAAI,KAAA,EAAO,GAAA,CAAI,GAAG,CAAA,GAAI,MAAA;AACnD,EAAA,MAAM,GAAA,GAAM,MAAM,IAAA,CAAK,GAAA,CAAI,IAAI,KAAA,EAAO,GAAA,CAAI,GAAG,CAAA,GAAI,MAAA;AAEjD,EAAA,MAAM,CAAC,EAAE,KAAA,EAAM,EAAG,eAAe,IAAI,kBAAA,EAAmB;AAExD,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,KAAA,EAAO;AACT,MAAA,QAAA,CAAS,KAAK,KAAK,CAAA;AAAA,IACrB;AAAA,EACF,CAAA,EAAG,CAAC,KAAA,EAAO,QAAQ,CAAC,CAAA;AAEpB,EAAA,OAAO;AAAA,IACL,iBAAiB,IAAA,EAAc;AAC7B,MAAA,OAAO,KAAA,KAAU,QAAQ,GAAA,KAAQ,IAAA;AAAA,IACnC,CAAA;AAAA,IACA,WAAW,IAAA,EAAc;AACvB,MAAA,IAAI,CAAC,GAAA,EAAK;AACR,QAAA,OAAO,KAAA;AAAA,MACT;AACA,MAAA,OAAO,KAAA,IAAU,QAAQ,IAAA,IAAQ,GAAA;AAAA,IACnC,CAAA;AAAA,IACA,YAAA,CAAa,MAAc,GAAA,EAAc;AACvC,MAAA,IAAI,GAAA,EAAK;AACP,QAAA,YAAA;AAAA,UAAa,CAAA,CAAA,KACX,CAAA,GAAI,EAAE,KAAA,EAAO,CAAA,CAAE,KAAA,EAAO,GAAA,EAAK,IAAA,EAAK,GAAI,EAAE,KAAA,EAAO,IAAA,EAAM,KAAK,IAAA;AAAK,SAC/D;AAAA,MACF,CAAA,MAAO;AACL,QAAA,YAAA;AAAA,UAAa,CAAA,CAAA,KACX,CAAA,EAAG,KAAA,KAAU,IAAA,IAAQ,CAAA,EAAG,GAAA,KAAQ,IAAA,GAC5B,MAAA,GACA,EAAE,KAAA,EAAO,IAAA,EAAM,GAAA,EAAK,IAAA;AAAK,SAC/B;AAAA,MACF;AAAA,IACF,CAAA;AAAA,IACA,aAAA,GAAgB;AACd,MAAA,IAAI,GAAA,EAAK;AACP,QAAA,MAAM,QAAA,GAAW,KAAA,CACd,KAAA,CAAM,IAAA,CAAK,IAAI,GAAA,CAAI,KAAA,EAAO,GAAA,CAAI,GAAG,CAAA,GAAI,CAAA,EAAG,IAAA,CAAK,GAAA,CAAI,IAAI,KAAA,EAAO,GAAA,CAAI,GAAG,CAAC,CAAA,CACpE,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,OAAO,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,IAAI,EAAE,IAAA,CAAK,EAAE,CAAC,CAAA,CAC3C,KAAK,IAAI,CAAA;AACZ,QAAA,eAAA,CAAgB,QAAQ,CAAA;AACxB,QAAA,YAAA,CAAa,MAAS,CAAA;AAAA,MACxB;AAAA,IACF;AAAA,GACF;AACF;;;;"}