{"version":3,"file":"azureBlobStorage.cjs.js","sources":["../../../src/stages/publish/azureBlobStorage.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DefaultAzureCredential } from '@azure/identity';\nimport {\n  BlobServiceClient,\n  ContainerClient,\n  StorageSharedKeyCredential,\n} from '@azure/storage-blob';\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport express from 'express';\nimport JSON5 from 'json5';\nimport limiterFactory from 'p-limit';\nimport { default as path, default as platformPath } from 'path';\nimport {\n  bulkStorageOperation,\n  getCloudPathForLocalPath,\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTriplet,\n  getStaleFiles,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// The number of batches that may be ongoing at the same time.\nconst BATCH_CONCURRENCY = 3;\n\nexport class AzureBlobStoragePublish implements PublisherBase {\n  private readonly storageClient: BlobServiceClient;\n  private readonly containerName: string;\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: LoggerService;\n\n  constructor(options: {\n    storageClient: BlobServiceClient;\n    containerName: string;\n    legacyPathCasing: boolean;\n    logger: LoggerService;\n  }) {\n    this.storageClient = options.storageClient;\n    this.containerName = options.containerName;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.logger = options.logger;\n  }\n\n  static fromConfig(config: Config, logger: LoggerService): PublisherBase {\n    let storageClient: BlobServiceClient;\n    let containerName = '';\n    try {\n      containerName = config.getString(\n        'techdocs.publisher.azureBlobStorage.containerName',\n      );\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'azureBlobStorage' in your app config, \" +\n          'techdocs.publisher.azureBlobStorage.containerName is required.',\n      );\n    }\n\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    // Give more priority for connectionString, if configured, return the AzureBlobStoragePublish object here itself\n    const connectionStringKey =\n      'techdocs.publisher.azureBlobStorage.connectionString';\n    const connectionString = config.getOptionalString(connectionStringKey);\n\n    if (connectionString) {\n      logger.info(\n        `Using '${connectionStringKey}' configuration to create storage client`,\n      );\n      storageClient = BlobServiceClient.fromConnectionString(connectionString);\n    } else {\n      let accountName = '';\n      try {\n        accountName = config.getString(\n          'techdocs.publisher.azureBlobStorage.credentials.accountName',\n        );\n      } catch (error) {\n        throw new Error(\n          \"Since techdocs.publisher.type is set to 'azureBlobStorage' in your app config, \" +\n            'techdocs.publisher.azureBlobStorage.credentials.accountName is required.',\n        );\n      }\n\n      // Credentials is an optional config. If missing, default Azure Blob Storage environment variables will be used.\n      // https://docs.microsoft.com/en-us/azure/storage/common/storage-auth-aad-app\n      const accountKey = config.getOptionalString(\n        'techdocs.publisher.azureBlobStorage.credentials.accountKey',\n      );\n\n      let credential;\n      if (accountKey) {\n        credential = new StorageSharedKeyCredential(accountName, accountKey);\n      } else {\n        credential = new DefaultAzureCredential();\n      }\n\n      storageClient = new BlobServiceClient(\n        `https://${accountName}.blob.core.windows.net`,\n        credential,\n      );\n    }\n\n    return new AzureBlobStoragePublish({\n      storageClient: storageClient,\n      containerName: containerName,\n      legacyPathCasing: legacyPathCasing,\n      logger: logger,\n    });\n  }\n\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      const response = await this.storageClient\n        .getContainerClient(this.containerName)\n        .getProperties();\n\n      if (response._response.status === 200) {\n        return {\n          isAvailable: true,\n        };\n      }\n\n      if (response._response.status >= 400) {\n        this.logger.error(\n          `Failed to retrieve metadata from ${response._response.request.url} with status code ${response._response.status}.`,\n        );\n      }\n    } catch (e) {\n      assertError(e);\n      this.logger.error(`from Azure Blob Storage client library: ${e.message}`);\n    }\n\n    this.logger.error(\n      `Could not retrieve metadata about the Azure Blob Storage container ${this.containerName}. ` +\n        'Make sure that the Azure project and container exist and the access key is setup correctly ' +\n        'techdocs.publisher.azureBlobStorage.credentials defined in app config has correct permissions. ' +\n        'Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n    );\n\n    return { isAvailable: false };\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the Azure Blob Storage container.\n   * Directory structure used in the container is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const objects: string[] = [];\n    const useLegacyPathCasing = this.legacyPathCasing;\n\n    // First, try to retrieve a list of all individual files currently existing\n    const remoteFolder = getCloudPathForLocalPath(\n      entity,\n      undefined,\n      useLegacyPathCasing,\n    );\n    let existingFiles: string[] = [];\n    try {\n      existingFiles = await this.getAllBlobsFromContainer({\n        prefix: remoteFolder,\n        maxPageSize: BATCH_CONCURRENCY,\n      });\n    } catch (e) {\n      assertError(e);\n      this.logger.error(\n        `Unable to list files for Entity ${entity.metadata.name}: ${e.message}`,\n      );\n    }\n\n    // Then, merge new files into the same folder\n    let absoluteFilesToUpload;\n    let container: ContainerClient;\n    try {\n      // Remove the absolute path prefix of the source directory\n      // Path of all files to upload, relative to the root of the source directory\n      // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n      absoluteFilesToUpload = await getFileTreeRecursively(directory);\n\n      container = this.storageClient.getContainerClient(this.containerName);\n      const failedOperations: Error[] = [];\n      await bulkStorageOperation(\n        async absoluteFilePath => {\n          const relativeFilePath = path.normalize(\n            path.relative(directory, absoluteFilePath),\n          );\n          const remotePath = getCloudPathForLocalPath(\n            entity,\n            relativeFilePath,\n            useLegacyPathCasing,\n          );\n          objects.push(remotePath);\n          const response = await container\n            .getBlockBlobClient(remotePath)\n            .uploadFile(absoluteFilePath);\n\n          if (response._response.status >= 400) {\n            failedOperations.push(\n              new Error(\n                `Upload failed for ${absoluteFilePath} with status code ${response._response.status}`,\n              ),\n            );\n          }\n\n          return response;\n        },\n        absoluteFilesToUpload,\n        { concurrencyLimit: BATCH_CONCURRENCY },\n      );\n\n      if (failedOperations.length > 0) {\n        throw new Error(\n          failedOperations\n            .map(r => r.message)\n            .filter(Boolean)\n            .join(' '),\n        );\n      }\n\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${absoluteFilesToUpload.length}`,\n      );\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to Azure. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    // Last, try to remove the files that were *only* present previously\n    try {\n      const relativeFilesToUpload = absoluteFilesToUpload.map(\n        absoluteFilePath =>\n          getCloudPathForLocalPath(\n            entity,\n            path.relative(directory, absoluteFilePath),\n            useLegacyPathCasing,\n          ),\n      );\n\n      const staleFiles = getStaleFiles(relativeFilesToUpload, existingFiles);\n\n      await bulkStorageOperation(\n        async relativeFilePath => {\n          return await container.deleteBlob(relativeFilePath);\n        },\n        staleFiles,\n        { concurrencyLimit: BATCH_CONCURRENCY },\n      );\n\n      this.logger.info(\n        `Successfully deleted stale files for Entity ${entity.metadata.name}. Total number of files: ${staleFiles.length}`,\n      );\n    } catch (error) {\n      const errorMessage = `Unable to delete file(s) from Azure. ${error}`;\n      this.logger.error(errorMessage);\n    }\n\n    return { objects };\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    const entityTriplet = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n    const entityRootDir = this.legacyPathCasing\n      ? entityTriplet\n      : lowerCaseEntityTriplet(entityTriplet);\n\n    try {\n      const techdocsMetadataJson = await new Promise<Buffer>(\n        (resolve, reject) => {\n          const fileStreamChunks: Array<any> = [];\n          this.storageClient\n            .getContainerClient(this.containerName)\n            .getBlockBlobClient(`${entityRootDir}/techdocs_metadata.json`)\n            .download()\n            .then(res => {\n              const body = res.readableStreamBody;\n              if (!body) {\n                reject(new Error(`Unable to parse the response data`));\n                return;\n              }\n              body\n                .on('error', reject)\n                .on('data', chunk => {\n                  fileStreamChunks.push(chunk);\n                })\n                .on('end', () => {\n                  resolve(Buffer.concat(fileStreamChunks));\n                });\n            })\n            .catch(reject);\n        },\n      );\n\n      if (!techdocsMetadataJson) {\n        throw new Error(\n          `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n        );\n      }\n      const techdocsMetadata = JSON5.parse(\n        techdocsMetadataJson.toString('utf-8'),\n      );\n      return techdocsMetadata;\n    } catch (e) {\n      throw new ForwardedError('TechDocs metadata fetch failed', e);\n    }\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return (req, res) => {\n      // Decode and trim the leading forward slash\n      const decodedUri = decodeURI(req.path.replace(/^\\//, ''));\n\n      // filePath example - /default/Component/documented-component/index.html\n      const filePath = this.legacyPathCasing\n        ? decodedUri\n        : lowerCaseEntityTripletInStoragePath(decodedUri);\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = platformPath.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      const blobClient = this.storageClient\n        .getContainerClient(this.containerName)\n        .getBlockBlobClient(filePath);\n\n      blobClient\n        .download()\n        .then(downloadRes => {\n          if (!downloadRes.readableStreamBody) {\n            throw new Error('Unable to parse the response data');\n          }\n          for (const [headerKey, headerValue] of Object.entries(\n            responseHeaders,\n          )) {\n            res.setHeader(headerKey, headerValue);\n          }\n          downloadRes.readableStreamBody.pipe(res);\n        })\n        .catch(e => {\n          this.logger.warn(\n            `TechDocs Azure router failed to serve content from container ${this.containerName} at path ${filePath}: ${e.message}`,\n          );\n          if (!res.headersSent) {\n            res.status(404).send('File Not Found');\n          } else {\n            res.destroy();\n          }\n        });\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const entityTriplet = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n    const entityRootDir = this.legacyPathCasing\n      ? entityTriplet\n      : lowerCaseEntityTriplet(entityTriplet);\n\n    return this.storageClient\n      .getContainerClient(this.containerName)\n      .getBlockBlobClient(`${entityRootDir}/index.html`)\n      .exists();\n  }\n\n  protected async renameBlob(\n    originalName: string,\n    newName: string,\n    removeOriginal = false,\n  ): Promise<void> {\n    const container = this.storageClient.getContainerClient(this.containerName);\n    const blob = container.getBlobClient(newName);\n    const { url } = container.getBlobClient(originalName);\n    const response = await blob.beginCopyFromURL(url);\n    await response.pollUntilDone();\n    if (removeOriginal) {\n      await container.deleteBlob(originalName);\n    }\n  }\n\n  protected async renameBlobToLowerCase(\n    originalPath: string,\n    removeOriginal: boolean,\n  ) {\n    let newPath;\n    try {\n      newPath = lowerCaseEntityTripletInStoragePath(originalPath);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(e.message);\n      return;\n    }\n\n    if (originalPath === newPath) return;\n    try {\n      this.logger.debug(`Migrating ${originalPath}`);\n      await this.renameBlob(originalPath, newPath, removeOriginal);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(`Unable to migrate ${originalPath}: ${e.message}`);\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    const promises = [];\n    const limiter = limiterFactory(concurrency);\n    const container = this.storageClient.getContainerClient(this.containerName);\n\n    for await (const blob of container.listBlobsFlat()) {\n      promises.push(\n        limiter(\n          this.renameBlobToLowerCase.bind(this),\n          blob.name,\n          removeOriginal,\n        ),\n      );\n    }\n\n    await Promise.all(promises);\n  }\n\n  protected async getAllBlobsFromContainer({\n    prefix,\n    maxPageSize,\n  }: {\n    prefix: string;\n    maxPageSize: number;\n  }): Promise<string[]> {\n    const blobs: string[] = [];\n    const container = this.storageClient.getContainerClient(this.containerName);\n\n    let iterator = container.listBlobsFlat({ prefix }).byPage({ maxPageSize });\n    let response = (await iterator.next()).value;\n\n    do {\n      for (const blob of response?.segment?.blobItems ?? []) {\n        blobs.push(blob.name);\n      }\n      iterator = container\n        .listBlobsFlat({ prefix })\n        .byPage({ continuationToken: response.continuationToken, maxPageSize });\n      response = (await iterator.next()).value;\n    } while (response && response.continuationToken);\n\n    return blobs;\n  }\n}\n"],"names":["BlobServiceClient","StorageSharedKeyCredential","DefaultAzureCredential","assertError","getCloudPathForLocalPath","getFileTreeRecursively","bulkStorageOperation","path","getStaleFiles","lowerCaseEntityTriplet","JSON5","ForwardedError","lowerCaseEntityTripletInStoragePath","platformPath","getHeadersForFileExtension","limiterFactory"],"mappings":"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"}