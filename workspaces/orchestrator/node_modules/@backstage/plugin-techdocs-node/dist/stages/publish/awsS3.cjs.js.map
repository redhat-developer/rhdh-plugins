{"version":3,"file":"awsS3.cjs.js","sources":["../../../src/stages/publish/awsS3.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport {\n  AwsCredentialsManager,\n  DefaultAwsCredentialsManager,\n} from '@backstage/integration-aws-node';\nimport {\n  GetObjectCommand,\n  CopyObjectCommand,\n  DeleteObjectCommand,\n  HeadBucketCommand,\n  HeadObjectCommand,\n  PutObjectCommandInput,\n  ListObjectsV2CommandOutput,\n  ListObjectsV2Command,\n  S3Client,\n} from '@aws-sdk/client-s3';\nimport { fromTemporaryCredentials } from '@aws-sdk/credential-providers';\nimport { NodeHttpHandler } from '@smithy/node-http-handler';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { AwsCredentialIdentityProvider } from '@aws-sdk/types';\nimport { HttpsProxyAgent } from 'hpagent';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport JSON5 from 'json5';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport { Readable } from 'stream';\nimport {\n  bulkStorageOperation,\n  getCloudPathForLocalPath,\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  getStaleFiles,\n  isValidContentPath,\n  lowerCaseEntityTriplet,\n  lowerCaseEntityTripletInStoragePath,\n  normalizeExternalStorageRootPath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst streamToBuffer = (stream: Readable): Promise<Buffer> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const chunks: any[] = [];\n      stream.on('data', chunk => chunks.push(chunk));\n      stream.on('error', (e: Error) =>\n        reject(new ForwardedError('Unable to read stream', e)),\n      );\n      stream.on('end', () => resolve(Buffer.concat(chunks)));\n    } catch (e) {\n      throw new ForwardedError('Unable to parse the response data', e);\n    }\n  });\n};\n\nexport class AwsS3Publish implements PublisherBase {\n  private readonly storageClient: S3Client;\n  private readonly bucketName: string;\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: LoggerService;\n  private readonly bucketRootPath: string;\n  private readonly sse?: 'aws:kms' | 'AES256';\n\n  constructor(options: {\n    storageClient: S3Client;\n    bucketName: string;\n    legacyPathCasing: boolean;\n    logger: LoggerService;\n    bucketRootPath: string;\n    sse?: 'aws:kms' | 'AES256';\n  }) {\n    this.storageClient = options.storageClient;\n    this.bucketName = options.bucketName;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.logger = options.logger;\n    this.bucketRootPath = options.bucketRootPath;\n    this.sse = options.sse;\n  }\n\n  static async fromConfig(\n    config: Config,\n    logger: LoggerService,\n  ): Promise<PublisherBase> {\n    let bucketName = '';\n    try {\n      bucketName = config.getString('techdocs.publisher.awsS3.bucketName');\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'awsS3' in your app config, \" +\n          'techdocs.publisher.awsS3.bucketName is required.',\n      );\n    }\n\n    const bucketRootPath = normalizeExternalStorageRootPath(\n      config.getOptionalString('techdocs.publisher.awsS3.bucketRootPath') || '',\n    );\n\n    const sse = config.getOptionalString('techdocs.publisher.awsS3.sse') as\n      | 'aws:kms'\n      | 'AES256'\n      | undefined;\n\n    // AWS Region is an optional config. If missing, default AWS env variable AWS_REGION\n    // or AWS shared credentials file at ~/.aws/credentials will be used.\n    const region = config.getOptionalString('techdocs.publisher.awsS3.region');\n\n    // Credentials can optionally be configured by specifying the AWS account ID, which will retrieve credentials\n    // for the account from the 'aws' section of the app config.\n    // Credentials can also optionally be directly configured in the techdocs awsS3 config, but this method is\n    // deprecated.\n    // If no credentials are configured, the AWS SDK V3's default credential chain will be used.\n    const accountId = config.getOptionalString(\n      'techdocs.publisher.awsS3.accountId',\n    );\n    const credentialsConfig = config.getOptionalConfig(\n      'techdocs.publisher.awsS3.credentials',\n    );\n    const credsManager = DefaultAwsCredentialsManager.fromConfig(config);\n    const sdkCredentialProvider = await AwsS3Publish.buildCredentials(\n      credsManager,\n      accountId,\n      credentialsConfig,\n      region,\n    );\n\n    // AWS endpoint is an optional config. If missing, the default endpoint is built from\n    // the configured region.\n    const endpoint = config.getOptionalString(\n      'techdocs.publisher.awsS3.endpoint',\n    );\n\n    // AWS HTTPS proxy is an optional config. If missing, no proxy is used\n    const httpsProxy = config.getOptionalString(\n      'techdocs.publisher.awsS3.httpsProxy',\n    );\n\n    // AWS forcePathStyle is an optional config. If missing, it defaults to false. Needs to be enabled for cases\n    // where endpoint url points to locally hosted S3 compatible storage like Localstack\n    const forcePathStyle = config.getOptionalBoolean(\n      'techdocs.publisher.awsS3.s3ForcePathStyle',\n    );\n\n    // AWS MAX ATTEMPTS is an optional config. If missing, default value of 3 is used\n    const maxAttempts = config.getOptionalNumber(\n      'techdocs.publisher.awsS3.maxAttempts',\n    );\n\n    const storageClient = new S3Client({\n      customUserAgent: 'backstage-aws-techdocs-s3-publisher',\n      credentialDefaultProvider: () => sdkCredentialProvider,\n      ...(region && { region }),\n      ...(endpoint && { endpoint }),\n      ...(forcePathStyle && { forcePathStyle }),\n      ...(maxAttempts && { maxAttempts }),\n      ...(httpsProxy && {\n        requestHandler: new NodeHttpHandler({\n          httpsAgent: new HttpsProxyAgent({ proxy: httpsProxy }),\n        }),\n      }),\n    });\n\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    return new AwsS3Publish({\n      storageClient,\n      bucketName,\n      bucketRootPath,\n      legacyPathCasing,\n      logger,\n      sse,\n    });\n  }\n\n  private static buildStaticCredentials(\n    accessKeyId: string,\n    secretAccessKey: string,\n  ): AwsCredentialIdentityProvider {\n    return async () => {\n      return Promise.resolve({\n        accessKeyId,\n        secretAccessKey,\n      });\n    };\n  }\n\n  private static async buildCredentials(\n    credsManager: AwsCredentialsManager,\n    accountId?: string,\n    config?: Config,\n    region?: string,\n  ): Promise<AwsCredentialIdentityProvider> {\n    // Pull credentials for the specified account ID from the 'aws' config section\n    if (accountId) {\n      return (await credsManager.getCredentialProvider({ accountId }))\n        .sdkCredentialProvider;\n    }\n\n    // Fall back to the default credential chain if neither account ID\n    // nor explicit credentials are provided\n    if (!config) {\n      return (await credsManager.getCredentialProvider()).sdkCredentialProvider;\n    }\n\n    // Pull credentials from the techdocs config section (deprecated)\n    const accessKeyId = config.getOptionalString('accessKeyId');\n    const secretAccessKey = config.getOptionalString('secretAccessKey');\n    const explicitCredentials: AwsCredentialIdentityProvider =\n      accessKeyId && secretAccessKey\n        ? AwsS3Publish.buildStaticCredentials(accessKeyId, secretAccessKey)\n        : (await credsManager.getCredentialProvider()).sdkCredentialProvider;\n\n    const roleArn = config.getOptionalString('roleArn');\n    if (roleArn) {\n      return fromTemporaryCredentials({\n        masterCredentials: explicitCredentials,\n        params: {\n          RoleSessionName: 'backstage-aws-techdocs-s3-publisher',\n          RoleArn: roleArn,\n        },\n        clientConfig: { region },\n      });\n    }\n\n    return explicitCredentials;\n  }\n\n  /**\n   * Check if the defined bucket exists. Being able to connect means the configuration is good\n   * and the storage client will work.\n   */\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      await this.storageClient.send(\n        new HeadBucketCommand({ Bucket: this.bucketName }),\n      );\n\n      this.logger.info(\n        `Successfully connected to the AWS S3 bucket ${this.bucketName}.`,\n      );\n\n      return { isAvailable: true };\n    } catch (error) {\n      this.logger.error(\n        `Could not retrieve metadata about the AWS S3 bucket ${this.bucketName}. ` +\n          'Make sure the bucket exists. Also make sure that authentication is setup either by ' +\n          'explicitly defining credentials and region in techdocs.publisher.awsS3 in app config or ' +\n          'by using environment variables. Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n      );\n      this.logger.error(`from AWS client library`, error);\n      return {\n        isAvailable: false,\n      };\n    }\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the S3 bucket.\n   * Directory structure used in the bucket is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const objects: string[] = [];\n    const useLegacyPathCasing = this.legacyPathCasing;\n    const bucketRootPath = this.bucketRootPath;\n    const sse = this.sse;\n\n    // First, try to retrieve a list of all individual files currently existing\n    let existingFiles: string[] = [];\n    try {\n      const remoteFolder = getCloudPathForLocalPath(\n        entity,\n        undefined,\n        useLegacyPathCasing,\n        bucketRootPath,\n      );\n      existingFiles = await this.getAllObjectsFromBucket({\n        prefix: remoteFolder,\n      });\n    } catch (e) {\n      assertError(e);\n      this.logger.error(\n        `Unable to list files for Entity ${entity.metadata.name}: ${e.message}`,\n      );\n    }\n\n    // Then, merge new files into the same folder\n    let absoluteFilesToUpload;\n    try {\n      // Remove the absolute path prefix of the source directory\n      // Path of all files to upload, relative to the root of the source directory\n      // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n      absoluteFilesToUpload = await getFileTreeRecursively(directory);\n\n      await bulkStorageOperation(\n        async absoluteFilePath => {\n          const relativeFilePath = path.relative(directory, absoluteFilePath);\n          const fileStream = fs.createReadStream(absoluteFilePath);\n\n          const params: PutObjectCommandInput = {\n            Bucket: this.bucketName,\n            Key: getCloudPathForLocalPath(\n              entity,\n              relativeFilePath,\n              useLegacyPathCasing,\n              bucketRootPath,\n            ),\n            Body: fileStream,\n            ...(sse && { ServerSideEncryption: sse }),\n          };\n\n          objects.push(params.Key!);\n\n          const upload = new Upload({\n            client: this.storageClient,\n            params,\n          });\n          return upload.done();\n        },\n        absoluteFilesToUpload,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${absoluteFilesToUpload.length}`,\n      );\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to AWS S3. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    // Last, try to remove the files that were *only* present previously\n    try {\n      const relativeFilesToUpload = absoluteFilesToUpload.map(\n        absoluteFilePath =>\n          getCloudPathForLocalPath(\n            entity,\n            path.relative(directory, absoluteFilePath),\n            useLegacyPathCasing,\n            bucketRootPath,\n          ),\n      );\n      const staleFiles = getStaleFiles(relativeFilesToUpload, existingFiles);\n\n      await bulkStorageOperation(\n        async relativeFilePath => {\n          return await this.storageClient.send(\n            new DeleteObjectCommand({\n              Bucket: this.bucketName,\n              Key: relativeFilePath,\n            }),\n          );\n        },\n        staleFiles,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully deleted stale files for Entity ${entity.metadata.name}. Total number of files: ${staleFiles.length}`,\n      );\n    } catch (error) {\n      const errorMessage = `Unable to delete file(s) from AWS S3. ${error}`;\n      this.logger.error(errorMessage);\n    }\n    return { objects };\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    try {\n      return await new Promise<TechDocsMetadata>(async (resolve, reject) => {\n        const entityTriplet = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n        const entityDir = this.legacyPathCasing\n          ? entityTriplet\n          : lowerCaseEntityTriplet(entityTriplet);\n\n        const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n        if (!isValidContentPath(this.bucketRootPath, entityRootDir)) {\n          this.logger.error(\n            `Invalid content path found while fetching TechDocs metadata: ${entityRootDir}`,\n          );\n          throw new Error(`Metadata Not Found`);\n        }\n\n        try {\n          const resp = await this.storageClient.send(\n            new GetObjectCommand({\n              Bucket: this.bucketName,\n              Key: `${entityRootDir}/techdocs_metadata.json`,\n            }),\n          );\n\n          const techdocsMetadataJson = await streamToBuffer(\n            resp.Body as Readable,\n          );\n          if (!techdocsMetadataJson) {\n            throw new Error(\n              `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n            );\n          }\n\n          const techdocsMetadata = JSON5.parse(\n            techdocsMetadataJson.toString('utf-8'),\n          );\n\n          resolve(techdocsMetadata);\n        } catch (err) {\n          assertError(err);\n          this.logger.error(err.message);\n          reject(new Error(err.message));\n        }\n      });\n    } catch (e) {\n      throw new ForwardedError('TechDocs metadata fetch failed', e);\n    }\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return async (req, res) => {\n      const decodedUri = decodeURI(req.path.replace(/^\\//, ''));\n\n      // filePath example - /default/component/documented-component/index.html\n      const filePathNoRoot = this.legacyPathCasing\n        ? decodedUri\n        : lowerCaseEntityTripletInStoragePath(decodedUri);\n\n      // Prepend the root path to the relative file path\n      const filePath = path.posix.join(this.bucketRootPath, filePathNoRoot);\n      if (!isValidContentPath(this.bucketRootPath, filePath)) {\n        this.logger.error(\n          `Attempted to fetch TechDocs content for a file outside of the bucket root: ${filePathNoRoot}`,\n        );\n        res.status(404).send('File Not Found');\n        return;\n      }\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = path.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      try {\n        const resp = await this.storageClient.send(\n          new GetObjectCommand({ Bucket: this.bucketName, Key: filePath }),\n        );\n\n        // Inject response headers\n        for (const [headerKey, headerValue] of Object.entries(\n          responseHeaders,\n        )) {\n          res.setHeader(headerKey, headerValue);\n        }\n\n        (resp.Body as Readable)\n          .on('error', err => {\n            this.logger.warn(\n              `TechDocs S3 router failed to serve static files from bucket ${this.bucketName} at key ${filePath}: ${err.message}`,\n            );\n            if (!res.headersSent) {\n              res.status(404).send('File Not Found');\n            } else {\n              res.destroy();\n            }\n          })\n          .pipe(res);\n      } catch (err) {\n        assertError(err);\n        this.logger.warn(\n          `TechDocs S3 router failed to serve static files from bucket ${this.bucketName} at key ${filePath}: ${err.message}`,\n        );\n        res.status(404).send('File Not Found');\n      }\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    try {\n      const entityTriplet = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n      const entityDir = this.legacyPathCasing\n        ? entityTriplet\n        : lowerCaseEntityTriplet(entityTriplet);\n\n      const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n      if (!isValidContentPath(this.bucketRootPath, entityRootDir)) {\n        this.logger.error(\n          `Invalid content path found while checking if docs have been generated: ${entityRootDir}`,\n        );\n        return Promise.resolve(false);\n      }\n\n      await this.storageClient.send(\n        new HeadObjectCommand({\n          Bucket: this.bucketName,\n          Key: `${entityRootDir}/index.html`,\n        }),\n      );\n      return Promise.resolve(true);\n    } catch (e) {\n      return Promise.resolve(false);\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const allObjects = await this.getAllObjectsFromBucket();\n    const limiter = createLimiter(concurrency);\n    await Promise.all(\n      allObjects.map(f =>\n        limiter(async file => {\n          let newPath;\n          try {\n            newPath = lowerCaseEntityTripletInStoragePath(file);\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(e.message);\n            return;\n          }\n\n          // If all parts are already lowercase, ignore.\n          if (file === newPath) {\n            return;\n          }\n\n          try {\n            this.logger.debug(`Migrating ${file}`);\n            await this.storageClient.send(\n              new CopyObjectCommand({\n                Bucket: this.bucketName,\n                CopySource: [this.bucketName, file].join('/'),\n                Key: newPath,\n              }),\n            );\n\n            if (removeOriginal) {\n              await this.storageClient.send(\n                new DeleteObjectCommand({\n                  Bucket: this.bucketName,\n                  Key: file,\n                }),\n              );\n            }\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(`Unable to migrate ${file}: ${e.message}`);\n          }\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Returns a list of all object keys from the configured bucket.\n   */\n  protected async getAllObjectsFromBucket(\n    { prefix } = { prefix: '' },\n  ): Promise<string[]> {\n    const objects: string[] = [];\n    let nextContinuation: string | undefined;\n    let allObjects: ListObjectsV2CommandOutput;\n    // Iterate through every file in the root of the publisher.\n    do {\n      allObjects = await this.storageClient.send(\n        new ListObjectsV2Command({\n          Bucket: this.bucketName,\n          ContinuationToken: nextContinuation,\n          ...(prefix ? { Prefix: prefix } : {}),\n        }),\n      );\n      objects.push(\n        ...(allObjects.Contents || []).map(f => f.Key || '').filter(f => !!f),\n      );\n      nextContinuation = allObjects.NextContinuationToken;\n    } while (nextContinuation);\n\n    return objects;\n  }\n}\n"],"names":["ForwardedError","normalizeExternalStorageRootPath","DefaultAwsCredentialsManager","S3Client","NodeHttpHandler","HttpsProxyAgent","fromTemporaryCredentials","HeadBucketCommand","getCloudPathForLocalPath","assertError","getFileTreeRecursively","bulkStorageOperation","path","fs","Upload","getStaleFiles","DeleteObjectCommand","lowerCaseEntityTriplet","isValidContentPath","GetObjectCommand","JSON5","lowerCaseEntityTripletInStoragePath","getHeadersForFileExtension","HeadObjectCommand","createLimiter","CopyObjectCommand","ListObjectsV2Command"],"mappings":"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"}