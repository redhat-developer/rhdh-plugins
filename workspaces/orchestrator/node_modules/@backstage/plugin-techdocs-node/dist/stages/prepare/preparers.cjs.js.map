{"version":3,"file":"preparers.cjs.js","sources":["../../../src/stages/prepare/preparers.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { TECHDOCS_ANNOTATION } from '@backstage/plugin-techdocs-common';\nimport { parseReferenceAnnotation } from '../../helpers';\nimport { DirectoryPreparer } from './dir';\nimport { UrlPreparer } from './url';\nimport {\n  PreparerBase,\n  PreparerBuilder,\n  PreparerConfig,\n  RemoteProtocol,\n} from './types';\n\n/**\n * Collection of docs preparers (dir and url)\n * @public\n */\nexport class Preparers implements PreparerBuilder {\n  private preparerMap = new Map<RemoteProtocol, PreparerBase>();\n\n  /**\n   * Returns a generators instance containing a generator for TechDocs\n   * @public\n   * @param backstageConfig - A Backstage configuration\n   * @param preparerConfig - Options to configure preparers\n   */\n  static async fromConfig(\n    backstageConfig: Config,\n    options: PreparerConfig,\n  ): Promise<PreparerBuilder> {\n    const preparers = new Preparers();\n\n    const urlPreparer = UrlPreparer.fromConfig({\n      reader: options.reader,\n      logger: options.logger,\n    });\n    preparers.register('url', urlPreparer);\n\n    /**\n     * Dir preparer is a syntactic sugar for users to define techdocs-ref annotation.\n     * When using dir preparer, the docs will be fetched using URL Reader.\n     */\n    const directoryPreparer = DirectoryPreparer.fromConfig(backstageConfig, {\n      reader: options.reader,\n      logger: options.logger,\n    });\n    preparers.register('dir', directoryPreparer);\n\n    return preparers;\n  }\n\n  /**\n   * Register a preparer in the preparers collection\n   * @param protocol - url or dir to associate with preparer\n   * @param preparer - The preparer instance to set\n   */\n  register(protocol: RemoteProtocol, preparer: PreparerBase) {\n    this.preparerMap.set(protocol, preparer);\n  }\n\n  /**\n   * Returns the preparer for a given TechDocs entity\n   * @param entity - A TechDocs entity instance\n   * @returns\n   */\n  get(entity: Entity): PreparerBase {\n    const { type } = parseReferenceAnnotation(TECHDOCS_ANNOTATION, entity);\n    const preparer = this.preparerMap.get(type);\n\n    if (!preparer) {\n      throw new Error(`No preparer registered for type: \"${type}\"`);\n    }\n\n    return preparer;\n  }\n}\n"],"names":["UrlPreparer","DirectoryPreparer","parseReferenceAnnotation","TECHDOCS_ANNOTATION"],"mappings":";;;;;;;AAgCO,MAAM,SAAA,CAAqC;AAAA,EACxC,WAAA,uBAAkB,GAAA,EAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ5D,aAAa,UAAA,CACX,eAAA,EACA,OAAA,EAC0B;AAC1B,IAAA,MAAM,SAAA,GAAY,IAAI,SAAA,EAAU;AAEhC,IAAA,MAAM,WAAA,GAAcA,gBAAY,UAAA,CAAW;AAAA,MACzC,QAAQ,OAAA,CAAQ,MAAA;AAAA,MAChB,QAAQ,OAAA,CAAQ;AAAA,KACjB,CAAA;AACD,IAAA,SAAA,CAAU,QAAA,CAAS,OAAO,WAAW,CAAA;AAMrC,IAAA,MAAM,iBAAA,GAAoBC,qBAAA,CAAkB,UAAA,CAAW,eAAA,EAAiB;AAAA,MACtE,QAAQ,OAAA,CAAQ,MAAA;AAAA,MAChB,QAAQ,OAAA,CAAQ;AAAA,KACjB,CAAA;AACD,IAAA,SAAA,CAAU,QAAA,CAAS,OAAO,iBAAiB,CAAA;AAE3C,IAAA,OAAO,SAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAA,CAAS,UAA0B,QAAA,EAAwB;AACzD,IAAA,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,QAAA,EAAU,QAAQ,CAAA;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,MAAA,EAA8B;AAChC,IAAA,MAAM,EAAE,IAAA,EAAK,GAAIC,gCAAA,CAAyBC,0CAAqB,MAAM,CAAA;AACrE,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,IAAI,CAAA;AAE1C,IAAA,IAAI,CAAC,QAAA,EAAU;AACb,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,kCAAA,EAAqC,IAAI,CAAA,CAAA,CAAG,CAAA;AAAA,IAC9D;AAEA,IAAA,OAAO,QAAA;AAAA,EACT;AACF;;;;"}