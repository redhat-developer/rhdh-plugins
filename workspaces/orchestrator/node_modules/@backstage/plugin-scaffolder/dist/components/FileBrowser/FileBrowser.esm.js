import { jsx } from 'react/jsx-runtime';
import { useMemo } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import TreeView from '@material-ui/lab/TreeView';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import ChevronRightIcon from '@material-ui/icons/ChevronRight';
import TreeItem from '@material-ui/lab/TreeItem';

const useStyles = makeStyles((theme) => ({
  root: {
    whiteSpace: "nowrap",
    overflowY: "auto",
    padding: theme.spacing(1)
  }
}));
function parseFileEntries(paths) {
  const root = {
    children: []
  };
  for (const path of paths.slice().sort()) {
    const parts = path.split("/");
    let current = root;
    for (let i = 0; i < parts.length; i++) {
      const part = parts[i];
      if (part === "") {
        throw new Error(`Invalid path part: ''`);
      }
      const entryPath = parts.slice(0, i + 1).join("/");
      const existing = current.children.find((child) => child.name === part);
      if (existing?.type === "file") {
        throw new Error(`Duplicate filename at '${entryPath}'`);
      } else if (existing) {
        current = existing;
      } else {
        if (i < parts.length - 1) {
          const newEntry = {
            type: "directory",
            name: part,
            path: entryPath,
            children: []
          };
          const firstFileIndex = current.children.findIndex(
            (child) => child.type === "file"
          );
          current.children.splice(firstFileIndex, 0, newEntry);
          current = newEntry;
        } else {
          current.children.push({
            type: "file",
            name: part,
            path: entryPath
          });
        }
      }
    }
  }
  return root.children;
}
function FileTreeItem({ entry }) {
  if (entry.type === "file") {
    return /* @__PURE__ */ jsx(TreeItem, { nodeId: entry.path, label: entry.name });
  }
  return /* @__PURE__ */ jsx(TreeItem, { nodeId: entry.path, label: entry.name, children: entry.children.map((child) => /* @__PURE__ */ jsx(FileTreeItem, { entry: child }, child.path)) });
}
function FileBrowser(props) {
  const classes = useStyles();
  const fileTree = useMemo(
    () => parseFileEntries(props.filePaths),
    [props.filePaths]
  );
  return /* @__PURE__ */ jsx(
    TreeView,
    {
      selected: props.selected,
      className: classes.root,
      defaultCollapseIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}),
      defaultExpandIcon: /* @__PURE__ */ jsx(ChevronRightIcon, {}),
      onNodeSelect: (_e, nodeId) => {
        if (props.onSelect && props.filePaths.includes(nodeId)) {
          props.onSelect(nodeId);
        }
      },
      children: fileTree.map((entry) => /* @__PURE__ */ jsx(FileTreeItem, { entry }, entry.path))
    }
  );
}

export { FileBrowser, parseFileEntries };
//# sourceMappingURL=FileBrowser.esm.js.map
