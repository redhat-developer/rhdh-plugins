{"version":3,"file":"FileBrowser.esm.js","sources":["../../../src/components/FileBrowser/FileBrowser.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useMemo } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    whiteSpace: 'nowrap',\n    overflowY: 'auto',\n    padding: theme.spacing(1),\n  },\n}));\n\nexport type FileEntry =\n  | {\n      type: 'file';\n      name: string;\n      path: string;\n    }\n  | {\n      type: 'directory';\n      name: string;\n      path: string;\n      children: FileEntry[];\n    };\n\nexport function parseFileEntries(paths: string[]): FileEntry[] {\n  const root: FileEntry = {\n    type: 'directory',\n    name: '',\n    path: '',\n    children: [],\n  };\n\n  for (const path of paths.slice().sort()) {\n    const parts = path.split('/');\n\n    let current = root;\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i];\n      if (part === '') {\n        throw new Error(`Invalid path part: ''`);\n      }\n\n      const entryPath = parts.slice(0, i + 1).join('/');\n\n      const existing = current.children.find(child => child.name === part);\n      if (existing?.type === 'file') {\n        throw new Error(`Duplicate filename at '${entryPath}'`);\n      } else if (existing) {\n        current = existing;\n      } else {\n        if (i < parts.length - 1) {\n          const newEntry: FileEntry = {\n            type: 'directory',\n            name: part,\n            path: entryPath,\n            children: [],\n          };\n          const firstFileIndex = current.children.findIndex(\n            child => child.type === 'file',\n          );\n          current.children.splice(firstFileIndex, 0, newEntry);\n          current = newEntry;\n        } else {\n          current.children.push({\n            type: 'file',\n            name: part,\n            path: entryPath,\n          });\n        }\n      }\n    }\n  }\n\n  return root.children;\n}\n\nfunction FileTreeItem({ entry }: { entry: FileEntry }) {\n  if (entry.type === 'file') {\n    return <TreeItem nodeId={entry.path} label={entry.name} />;\n  }\n\n  return (\n    <TreeItem nodeId={entry.path} label={entry.name}>\n      {entry.children.map(child => (\n        <FileTreeItem key={child.path} entry={child} />\n      ))}\n    </TreeItem>\n  );\n}\n\ninterface FileBrowserProps {\n  /** A list of all filepaths to show, directories are separated with a `/` */\n  filePaths: string[];\n  /** The currently selected file */\n  selected?: string;\n  /** Callback for when a file is selected */\n  onSelect?(filePath: string): void;\n}\n\n/** A simple file browser that allows you to select individual files */\nexport function FileBrowser(props: FileBrowserProps) {\n  const classes = useStyles();\n\n  const fileTree = useMemo(\n    () => parseFileEntries(props.filePaths),\n    [props.filePaths],\n  );\n\n  return (\n    <TreeView\n      selected={props.selected}\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      onNodeSelect={(_e: unknown, nodeId: string) => {\n        if (props.onSelect && props.filePaths.includes(nodeId)) {\n          props.onSelect(nodeId);\n        }\n      }}\n    >\n      {fileTree.map(entry => (\n        <FileTreeItem key={entry.path} entry={entry} />\n      ))}\n    </TreeView>\n  );\n}\n"],"names":[],"mappings":"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"}