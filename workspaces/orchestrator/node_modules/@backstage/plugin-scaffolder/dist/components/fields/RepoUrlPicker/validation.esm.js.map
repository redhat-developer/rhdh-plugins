{"version":3,"file":"validation.esm.js","sources":["../../../../src/components/fields/RepoUrlPicker/validation.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldValidation } from '@rjsf/utils';\nimport { ApiHolder } from '@backstage/core-plugin-api';\nimport { scmIntegrationsApiRef } from '@backstage/integration-react';\n\n/**\n * The validation function for the `repoUrl` that is returned from the\n * field extension. Ensures that you have all the required fields filled for\n * the different providers that exist.\n *\n * @public\n */\nexport const repoPickerValidation = (\n  value: string,\n  validation: FieldValidation,\n  context: { apiHolder: ApiHolder },\n) => {\n  try {\n    const { host, searchParams } = new URL(`https://${value}`);\n\n    const integrationApi = context.apiHolder.get(scmIntegrationsApiRef);\n\n    if (!host) {\n      validation.addError(\n        'Incomplete repository location provided, host not provided',\n      );\n    } else {\n      if (integrationApi?.byHost(host)?.type === 'bitbucket') {\n        // workspace is only applicable for bitbucket cloud\n        if (host === 'bitbucket.org' && !searchParams.get('workspace')) {\n          validation.addError(\n            'Incomplete repository location provided, workspace not provided',\n          );\n        }\n\n        if (!searchParams.get('project')) {\n          validation.addError(\n            'Incomplete repository location provided, project not provided',\n          );\n        }\n      } else if (integrationApi?.byHost(host)?.type === 'azure') {\n        if (!searchParams.get('project')) {\n          validation.addError(\n            'Incomplete repository location provided, project not provided',\n          );\n        }\n      }\n      // For anything other than bitbucket, azure, and gerrit\n      else if (integrationApi?.byHost(host)?.type !== 'gerrit') {\n        if (!searchParams.get('owner')) {\n          validation.addError(\n            'Incomplete repository location provided, owner not provided',\n          );\n        }\n      }\n\n      // Do this for all hosts\n      if (!searchParams.get('repo')) {\n        validation.addError(\n          'Incomplete repository location provided, repo not provided',\n        );\n      }\n    }\n  } catch {\n    validation.addError('Unable to parse the Repository URL');\n  }\n};\n"],"names":[],"mappings":";;AA2BO,MAAM,oBAAA,GAAuB,CAClC,KAAA,EACA,UAAA,EACA,OAAA,KACG;AACH,EAAA,IAAI;AACF,IAAA,MAAM,EAAE,MAAM,YAAA,EAAa,GAAI,IAAI,GAAA,CAAI,CAAA,QAAA,EAAW,KAAK,CAAA,CAAE,CAAA;AAEzD,IAAA,MAAM,cAAA,GAAiB,OAAA,CAAQ,SAAA,CAAU,GAAA,CAAI,qBAAqB,CAAA;AAElE,IAAA,IAAI,CAAC,IAAA,EAAM;AACT,MAAA,UAAA,CAAW,QAAA;AAAA,QACT;AAAA,OACF;AAAA,IACF,CAAA,MAAO;AACL,MAAA,IAAI,cAAA,EAAgB,MAAA,CAAO,IAAI,CAAA,EAAG,SAAS,WAAA,EAAa;AAEtD,QAAA,IAAI,SAAS,eAAA,IAAmB,CAAC,YAAA,CAAa,GAAA,CAAI,WAAW,CAAA,EAAG;AAC9D,UAAA,UAAA,CAAW,QAAA;AAAA,YACT;AAAA,WACF;AAAA,QACF;AAEA,QAAA,IAAI,CAAC,YAAA,CAAa,GAAA,CAAI,SAAS,CAAA,EAAG;AAChC,UAAA,UAAA,CAAW,QAAA;AAAA,YACT;AAAA,WACF;AAAA,QACF;AAAA,MACF,WAAW,cAAA,EAAgB,MAAA,CAAO,IAAI,CAAA,EAAG,SAAS,OAAA,EAAS;AACzD,QAAA,IAAI,CAAC,YAAA,CAAa,GAAA,CAAI,SAAS,CAAA,EAAG;AAChC,UAAA,UAAA,CAAW,QAAA;AAAA,YACT;AAAA,WACF;AAAA,QACF;AAAA,MACF,WAES,cAAA,EAAgB,MAAA,CAAO,IAAI,CAAA,EAAG,SAAS,QAAA,EAAU;AACxD,QAAA,IAAI,CAAC,YAAA,CAAa,GAAA,CAAI,OAAO,CAAA,EAAG;AAC9B,UAAA,UAAA,CAAW,QAAA;AAAA,YACT;AAAA,WACF;AAAA,QACF;AAAA,MACF;AAGA,MAAA,IAAI,CAAC,YAAA,CAAa,GAAA,CAAI,MAAM,CAAA,EAAG;AAC7B,QAAA,UAAA,CAAW,QAAA;AAAA,UACT;AAAA,SACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAA,CAAA,MAAQ;AACN,IAAA,UAAA,CAAW,SAAS,oCAAoC,CAAA;AAAA,EAC1D;AACF;;;;"}