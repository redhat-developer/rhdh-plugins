import { jsx } from 'react/jsx-runtime';
import { RELATION_OWNED_BY } from '@backstage/catalog-model';
import { useApi, identityApiRef } from '@backstage/core-plugin-api';
import TextField from '@material-ui/core/TextField';
import Autocomplete from '@material-ui/lab/Autocomplete';
import useAsync from 'react-use/esm/useAsync';
import { EntityPicker } from '../EntityPicker/EntityPicker.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';
import { ScaffolderField } from '@backstage/plugin-scaffolder-react/alpha';
export { OwnedEntityPickerSchema } from './schema.esm.js';

const OwnedEntityPicker = (props) => {
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const {
    schema: {
      title = t("fields.ownedEntityPicker.title"),
      description = t("fields.ownedEntityPicker.description")
    },
    uiSchema,
    required
  } = props;
  const identityApi = useApi(identityApiRef);
  const { loading, value: identityRefs } = useAsync(async () => {
    const identity = await identityApi.getBackstageIdentity();
    return identity.ownershipEntityRefs;
  });
  if (loading)
    return /* @__PURE__ */ jsx(
      ScaffolderField,
      {
        rawDescription: uiSchema["ui:description"] ?? description,
        required,
        disabled: uiSchema["ui:disabled"],
        children: /* @__PURE__ */ jsx(
          Autocomplete,
          {
            loading,
            renderInput: (params) => /* @__PURE__ */ jsx(
              TextField,
              {
                ...params,
                label: title,
                margin: "dense",
                FormHelperTextProps: {
                  margin: "dense",
                  style: { marginLeft: 0 }
                },
                variant: "outlined",
                required,
                InputProps: params.InputProps
              }
            ),
            options: []
          }
        )
      }
    );
  const entityPickerUISchema = buildEntityPickerUISchema(
    uiSchema,
    identityRefs
  );
  return /* @__PURE__ */ jsx(EntityPicker, { ...props, uiSchema: entityPickerUISchema });
};
function buildEntityPickerUISchema(uiSchema, identityRefs) {
  const uiOptions = uiSchema?.["ui:options"] || {};
  const { allowedKinds, ...extraOptions } = uiOptions;
  const catalogFilter = asArray(uiOptions.catalogFilter).map((e) => ({
    ...e,
    ...allowedKinds ? { kind: allowedKinds } : {},
    [`relations.${RELATION_OWNED_BY}`]: identityRefs || []
  }));
  return {
    "ui:options": {
      ...extraOptions,
      catalogFilter
    }
  };
}
function asArray(catalogFilter) {
  if (catalogFilter) {
    return Array.isArray(catalogFilter) ? catalogFilter : [catalogFilter];
  }
  return [{}];
}

export { OwnedEntityPicker };
//# sourceMappingURL=OwnedEntityPicker.esm.js.map
