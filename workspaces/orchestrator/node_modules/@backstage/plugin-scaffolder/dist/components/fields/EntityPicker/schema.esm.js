import { makeFieldSchema } from '@backstage/plugin-scaffolder-react';

const createEntityQueryFilterExpressionSchema = (z) => z.record(
  z.string().or(z.object({ exists: z.boolean().optional() })).or(z.array(z.string()))
);
const EntityPickerFieldSchema = makeFieldSchema({
  output: (z) => z.string(),
  uiOptions: (z) => z.object({
    /**
     * @deprecated Use `catalogFilter` instead.
     */
    allowedKinds: z.array(z.string()).optional().describe(
      "DEPRECATED: Use `catalogFilter` instead. List of kinds of entities to derive options from"
    ),
    defaultKind: z.string().optional().describe(
      "The default entity kind. Options of this kind will not be prefixed."
    ),
    allowArbitraryValues: z.boolean().optional().describe("Whether to allow arbitrary user input. Defaults to true"),
    defaultNamespace: z.union([z.string(), z.literal(false)]).optional().describe(
      "The default namespace. Options with this namespace will not be prefixed."
    ),
    catalogFilter: ((t) => t.or(t.array()))(
      createEntityQueryFilterExpressionSchema(z)
    ).optional().describe("List of key-value filter expression for entities")
  })
});
const EntityPickerSchema = EntityPickerFieldSchema.schema;

export { EntityPickerFieldSchema, EntityPickerSchema, createEntityQueryFilterExpressionSchema };
//# sourceMappingURL=schema.esm.js.map
