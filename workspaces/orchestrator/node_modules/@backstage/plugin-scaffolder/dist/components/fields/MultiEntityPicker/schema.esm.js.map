{"version":3,"file":"schema.esm.js","sources":["../../../../src/components/fields/MultiEntityPicker/schema.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { z as zod } from 'zod';\nimport { makeFieldSchema } from '@backstage/plugin-scaffolder-react';\n\nexport const entityQueryFilterExpressionSchema = zod.record(\n  zod\n    .string()\n    .or(zod.object({ exists: zod.boolean().optional() }))\n    .or(zod.array(zod.string())),\n);\n\nexport const MultiEntityPickerFieldSchema = makeFieldSchema({\n  output: z => z.array(z.string()),\n  uiOptions: z =>\n    z.object({\n      defaultKind: z\n        .string()\n        .optional()\n        .describe(\n          'The default entity kind. Options of this kind will not be prefixed.',\n        ),\n      allowArbitraryValues: z\n        .boolean()\n        .optional()\n        .describe('Whether to allow arbitrary user input. Defaults to true'),\n      defaultNamespace: z\n        .union([z.string(), z.literal(false)])\n        .optional()\n        .describe(\n          'The default namespace. Options with this namespace will not be prefixed.',\n        ),\n      catalogFilter: z\n        .array(entityQueryFilterExpressionSchema)\n        .or(entityQueryFilterExpressionSchema)\n        .optional()\n        .describe('List of key-value filter expression for entities'),\n    }),\n});\n\n/**\n * The input props that can be specified under `ui:options` for the\n * `EntityPicker` field extension.\n */\nexport type MultiEntityPickerUiOptions = NonNullable<\n  (typeof MultiEntityPickerFieldSchema.TProps.uiSchema)['ui:options']\n>;\n\nexport type MultiEntityPickerProps = typeof MultiEntityPickerFieldSchema.TProps;\n\nexport const MultiEntityPickerSchema = MultiEntityPickerFieldSchema.schema;\n\nexport type MultiEntityPickerFilterQuery = zod.TypeOf<\n  typeof entityQueryFilterExpressionSchema\n>;\n\nexport type MultiEntityPickerFilterQueryValue =\n  MultiEntityPickerFilterQuery[keyof MultiEntityPickerFilterQuery];\n"],"names":["zod"],"mappings":";;;AAkBO,MAAM,oCAAoCA,CAAA,CAAI,MAAA;AAAA,EACnDA,CAAA,CACG,QAAO,CACP,EAAA,CAAGA,EAAI,MAAA,CAAO,EAAE,MAAA,EAAQA,CAAA,CAAI,OAAA,EAAQ,CAAE,UAAS,EAAG,CAAC,CAAA,CACnD,EAAA,CAAGA,EAAI,KAAA,CAAMA,CAAA,CAAI,MAAA,EAAQ,CAAC;AAC/B;AAEO,MAAM,+BAA+B,eAAA,CAAgB;AAAA,EAC1D,QAAQ,CAAA,CAAA,KAAK,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,EAC/B,SAAA,EAAW,CAAA,CAAA,KACT,CAAA,CAAE,MAAA,CAAO;AAAA,IACP,WAAA,EAAa,CAAA,CACV,MAAA,EAAO,CACP,UAAS,CACT,QAAA;AAAA,MACC;AAAA,KACF;AAAA,IACF,sBAAsB,CAAA,CACnB,OAAA,GACA,QAAA,EAAS,CACT,SAAS,yDAAyD,CAAA;AAAA,IACrE,gBAAA,EAAkB,CAAA,CACf,KAAA,CAAM,CAAC,EAAE,MAAA,EAAO,EAAG,CAAA,CAAE,OAAA,CAAQ,KAAK,CAAC,CAAC,CAAA,CACpC,UAAS,CACT,QAAA;AAAA,MACC;AAAA,KACF;AAAA,IACF,aAAA,EAAe,CAAA,CACZ,KAAA,CAAM,iCAAiC,CAAA,CACvC,EAAA,CAAG,iCAAiC,CAAA,CACpC,QAAA,EAAS,CACT,QAAA,CAAS,kDAAkD;AAAA,GAC/D;AACL,CAAC;AAYM,MAAM,0BAA0B,4BAAA,CAA6B;;;;"}