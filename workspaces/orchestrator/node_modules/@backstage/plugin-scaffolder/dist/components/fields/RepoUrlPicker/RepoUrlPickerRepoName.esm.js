import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { Select } from '@backstage/core-components';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import TextField from '@material-ui/core/TextField';
import Autocomplete from '@material-ui/lab/Autocomplete';
import { useEffect } from 'react';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const RepoUrlPickerRepoName = (props) => {
  const {
    repoName,
    allowedRepos,
    onChange,
    rawErrors,
    availableRepos,
    isDisabled
  } = props;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  useEffect(() => {
    if (!repoName) {
      if (allowedRepos?.length) {
        onChange({ name: allowedRepos[0] });
      }
    }
  }, [allowedRepos, repoName, onChange]);
  const repoItems = allowedRepos ? allowedRepos.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !repoName,
      children: [
        allowedRepos?.length ? /* @__PURE__ */ jsx(
          Select,
          {
            native: true,
            label: t("fields.repoUrlPicker.repository.title"),
            onChange: (selected) => onChange({
              name: String(Array.isArray(selected) ? selected[0] : selected)
            }),
            disabled: isDisabled || allowedRepos.length === 1,
            selected: repoName,
            items: repoItems
          }
        ) : /* @__PURE__ */ jsx(
          Autocomplete,
          {
            value: repoName,
            onInputChange: (_, newValue) => {
              const selectedRepo = availableRepos?.find(
                (r) => r.name === newValue
              );
              onChange(selectedRepo || { name: newValue || "" });
            },
            options: (availableRepos || []).map((r) => r.name),
            renderInput: (params) => /* @__PURE__ */ jsx(
              TextField,
              {
                ...params,
                label: t("fields.repoUrlPicker.repository.inputTitle"),
                required: true
              }
            ),
            freeSolo: true,
            autoSelect: true,
            disabled: isDisabled
          }
        ),
        /* @__PURE__ */ jsx(FormHelperText, { children: t("fields.repoUrlPicker.repository.description") })
      ]
    }
  ) });
};

export { RepoUrlPickerRepoName };
//# sourceMappingURL=RepoUrlPickerRepoName.esm.js.map
