{"version":3,"file":"MultiEntityPicker.esm.js","sources":["../../../../src/components/fields/MultiEntityPicker/MultiEntityPicker.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  type EntityFilterQuery,\n  CATALOG_FILTER_EXISTS,\n} from '@backstage/catalog-client';\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core-plugin-api';\nimport {\n  catalogApiRef,\n  entityPresentationApiRef,\n  EntityDisplayName,\n  EntityRefPresentationSnapshot,\n} from '@backstage/plugin-catalog-react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, {\n  AutocompleteChangeReason,\n  createFilterOptions,\n} from '@material-ui/lab/Autocomplete';\nimport { useCallback, useEffect, useState } from 'react';\nimport useAsync from 'react-use/esm/useAsync';\nimport { FieldValidation } from '@rjsf/utils';\nimport {\n  MultiEntityPickerFilterQueryValue,\n  MultiEntityPickerProps,\n  MultiEntityPickerUiOptions,\n  MultiEntityPickerFilterQuery,\n} from './schema';\nimport { VirtualizedListbox } from '../VirtualizedListbox';\nimport { ScaffolderField } from '@backstage/plugin-scaffolder-react/alpha';\nimport { useTranslationRef } from '@backstage/frontend-plugin-api';\nimport { scaffolderTranslationRef } from '../../../translation';\n\nexport { MultiEntityPickerSchema } from './schema';\n\n// AutocompleteChangeReason events that can be triggered when a user inputs a freeSolo option\nconst FREE_SOLO_EVENTS: readonly AutocompleteChangeReason[] = [\n  'blur',\n  'create-option',\n];\n\n/**\n * The underlying component that is rendered in the form for the `MultiEntityPicker`\n * field extension.\n */\nexport const MultiEntityPicker = (props: MultiEntityPickerProps) => {\n  const { t } = useTranslationRef(scaffolderTranslationRef);\n  const {\n    onChange,\n    schema: {\n      title = t('fields.multiEntityPicker.title'),\n      description = t('fields.multiEntityPicker.description'),\n    },\n    required,\n    uiSchema,\n    rawErrors,\n    formData,\n    idSchema,\n    errors,\n  } = props;\n\n  const catalogFilter = buildCatalogFilter(uiSchema);\n  const defaultKind = uiSchema['ui:options']?.defaultKind;\n  const defaultNamespace =\n    uiSchema['ui:options']?.defaultNamespace || undefined;\n  const isDisabled = uiSchema?.['ui:disabled'] ?? false;\n  const [noOfItemsSelected, setNoOfItemsSelected] = useState(0);\n\n  const catalogApi = useApi(catalogApiRef);\n  const entityPresentationApi = useApi(entityPresentationApiRef);\n  const { value: entities, loading } = useAsync(async () => {\n    const { items } = await catalogApi.getEntities(\n      catalogFilter ? { filter: catalogFilter } : undefined,\n    );\n    const entityRefToPresentation = new Map<\n      string,\n      EntityRefPresentationSnapshot\n    >(\n      await Promise.all(\n        items.map(async item => {\n          const presentation = await entityPresentationApi.forEntity(item)\n            .promise;\n          return [stringifyEntityRef(item), presentation] as [\n            string,\n            EntityRefPresentationSnapshot,\n          ];\n        }),\n      ),\n    );\n    return { entities: items, entityRefToPresentation };\n  });\n  const allowArbitraryValues =\n    uiSchema['ui:options']?.allowArbitraryValues ?? true;\n\n  // if not specified, maxItems defaults to undefined\n  const maxItems = props.schema.maxItems;\n\n  const onSelect = useCallback(\n    (_: any, refs: (string | Entity)[], reason: AutocompleteChangeReason) => {\n      const values = refs\n        .map(ref => {\n          // If the ref is not a string, then it was a selected option in the picker\n          if (typeof ref !== 'string') {\n            // if ref does not exist: pass 'undefined' to trigger validation for required value\n            return ref ? stringifyEntityRef(ref as Entity) : undefined;\n          }\n\n          // Add in default namespace, etc.\n          let entityRef = ref;\n          try {\n            // Attempt to parse the entity ref into it's full form.\n            entityRef = stringifyEntityRef(\n              parseEntityRef(ref as string, {\n                defaultKind,\n                defaultNamespace,\n              }),\n            );\n          } catch (err) {\n            // If the passed in value isn't an entity ref, do nothing.\n          }\n\n          // We need to check against formData here as that's the previous value for this field.\n          if (\n            // If value already matches what exists in form data, allow it\n            formData?.includes(ref) ||\n            // If arbitrary values are allowed and the reason is a free solo event, allow it\n            (allowArbitraryValues && FREE_SOLO_EVENTS.includes(reason))\n          ) {\n            return entityRef;\n          }\n\n          return undefined;\n        })\n        .filter(ref => ref !== undefined) as string[];\n\n      setNoOfItemsSelected(values.length);\n      onChange(values);\n    },\n    [onChange, formData, defaultKind, defaultNamespace, allowArbitraryValues],\n  );\n\n  useEffect(() => {\n    if (required && !allowArbitraryValues && entities?.entities?.length === 1) {\n      onChange([stringifyEntityRef(entities?.entities[0])]);\n    }\n  }, [entities, onChange, required, allowArbitraryValues]);\n\n  return (\n    <ScaffolderField\n      rawErrors={rawErrors}\n      rawDescription={uiSchema['ui:description'] ?? description}\n      required={required}\n      disabled={isDisabled}\n      errors={errors}\n    >\n      <Autocomplete\n        multiple\n        filterSelectedOptions\n        disabled={\n          isDisabled ||\n          (required &&\n            !allowArbitraryValues &&\n            entities?.entities?.length === 1)\n        }\n        id={idSchema?.$id}\n        defaultValue={formData}\n        loading={loading}\n        onChange={onSelect}\n        options={entities?.entities || []}\n        renderOption={option => <EntityDisplayName entityRef={option} />}\n        getOptionLabel={option =>\n          // option can be a string due to freeSolo.\n          typeof option === 'string'\n            ? option\n            : entities?.entityRefToPresentation.get(stringifyEntityRef(option))\n                ?.entityRef!\n        }\n        getOptionDisabled={_options =>\n          maxItems ? noOfItemsSelected >= maxItems : false\n        }\n        autoSelect\n        freeSolo={allowArbitraryValues}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label={title}\n            disabled={isDisabled}\n            margin=\"dense\"\n            FormHelperTextProps={{\n              margin: 'dense',\n              style: { marginLeft: 0 },\n            }}\n            variant=\"outlined\"\n            required={required}\n            InputProps={{\n              ...params.InputProps,\n              required: formData?.length === 0 && required,\n            }}\n          />\n        )}\n        filterOptions={createFilterOptions<Entity>({\n          stringify: option =>\n            entities?.entityRefToPresentation.get(stringifyEntityRef(option))\n              ?.primaryTitle!,\n        })}\n        ListboxComponent={VirtualizedListbox}\n      />\n    </ScaffolderField>\n  );\n};\n\nexport const validateMultiEntityPickerValidation = (\n  values: string[],\n  validation: FieldValidation,\n) => {\n  values.forEach(value => {\n    try {\n      parseEntityRef(value);\n    } catch {\n      validation.addError(`${value} is not a valid entity ref`);\n    }\n  });\n};\n\n/**\n * Converts a special `{exists: true}` value to the `CATALOG_FILTER_EXISTS` symbol.\n *\n * @param value - The value to convert.\n * @returns The converted value.\n */\nfunction convertOpsValues(\n  value: Exclude<MultiEntityPickerFilterQueryValue, Array<any>>,\n): string | symbol {\n  if (typeof value === 'object' && value.exists) {\n    return CATALOG_FILTER_EXISTS;\n  }\n  return value?.toString();\n}\n\n/**\n * Converts schema filters to entity filter query, replacing `{exists:true}` values\n * with the constant `CATALOG_FILTER_EXISTS`.\n *\n * @param schemaFilters - An object containing schema filters with keys as filter names\n * and values as filter values.\n * @returns An object with the same keys as the input object, but with `{exists:true}` values\n * transformed to `CATALOG_FILTER_EXISTS` symbol.\n */\nfunction convertSchemaFiltersToQuery(\n  schemaFilters: MultiEntityPickerFilterQuery,\n): Exclude<EntityFilterQuery, Array<any>> {\n  const query: EntityFilterQuery = {};\n\n  for (const [key, value] of Object.entries(schemaFilters)) {\n    if (Array.isArray(value)) {\n      query[key] = value;\n    } else {\n      query[key] = convertOpsValues(value);\n    }\n  }\n\n  return query;\n}\n\n/**\n * Builds an `EntityFilterQuery` based on the `uiSchema` passed in.\n * If `catalogFilter` is specified in the `uiSchema`, it is converted to a `EntityFilterQuery`.\n *\n * @param uiSchema The `uiSchema` of an `EntityPicker` component.\n * @returns An `EntityFilterQuery` based on the `uiSchema`, or `undefined` if `catalogFilter` is not specified in the `uiSchema`.\n */\nfunction buildCatalogFilter(\n  uiSchema: MultiEntityPickerProps['uiSchema'],\n): EntityFilterQuery | undefined {\n  const catalogFilter: MultiEntityPickerUiOptions['catalogFilter'] | undefined =\n    uiSchema['ui:options']?.catalogFilter;\n\n  if (!catalogFilter) {\n    return undefined;\n  }\n\n  if (Array.isArray(catalogFilter)) {\n    return catalogFilter.map(convertSchemaFiltersToQuery);\n  }\n\n  return convertSchemaFiltersToQuery(catalogFilter);\n}\n"],"names":[],"mappings":"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"}