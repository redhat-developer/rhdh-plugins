{"version":3,"file":"utils.esm.js","sources":["../../../../src/components/fields/RepoUrlPicker/utils.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoUrlPickerState } from './types';\n\nexport function serializeRepoPickerUrl(data: RepoUrlPickerState) {\n  if (!data.host) {\n    return undefined;\n  }\n\n  const params = new URLSearchParams();\n  if (data.owner) {\n    params.set('owner', data.owner);\n  }\n  if (data.repoName) {\n    params.set('repo', data.repoName);\n  }\n  if (data.organization) {\n    params.set('organization', data.organization);\n  }\n  if (data.workspace) {\n    params.set('workspace', data.workspace);\n  }\n  if (data.project) {\n    params.set('project', data.project);\n  }\n\n  return `${data.host}?${params.toString()}`;\n}\n\nexport function parseRepoPickerUrl(\n  url: string | undefined,\n): RepoUrlPickerState {\n  let host = '';\n  let owner = '';\n  let repoName = '';\n  let organization = '';\n  let workspace = '';\n  let project = '';\n\n  try {\n    if (url) {\n      const parsed = new URL(`https://${url}`);\n      host = parsed.host;\n      owner = parsed.searchParams.get('owner') || '';\n      repoName = parsed.searchParams.get('repo') || '';\n      organization = parsed.searchParams.get('organization') || '';\n      workspace = parsed.searchParams.get('workspace') || '';\n      project = parsed.searchParams.get('project') || '';\n    }\n  } catch {\n    /* ok */\n  }\n  return { host, owner, repoName, organization, workspace, project };\n}\n"],"names":[],"mappings":"AAkBO,SAAS,uBAAuB,IAAA,EAA0B;AAC/D,EAAA,IAAI,CAAC,KAAK,IAAA,EAAM;AACd,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,MAAM,MAAA,GAAS,IAAI,eAAA,EAAgB;AACnC,EAAA,IAAI,KAAK,KAAA,EAAO;AACd,IAAA,MAAA,CAAO,GAAA,CAAI,OAAA,EAAS,IAAA,CAAK,KAAK,CAAA;AAAA,EAChC;AACA,EAAA,IAAI,KAAK,QAAA,EAAU;AACjB,IAAA,MAAA,CAAO,GAAA,CAAI,MAAA,EAAQ,IAAA,CAAK,QAAQ,CAAA;AAAA,EAClC;AACA,EAAA,IAAI,KAAK,YAAA,EAAc;AACrB,IAAA,MAAA,CAAO,GAAA,CAAI,cAAA,EAAgB,IAAA,CAAK,YAAY,CAAA;AAAA,EAC9C;AACA,EAAA,IAAI,KAAK,SAAA,EAAW;AAClB,IAAA,MAAA,CAAO,GAAA,CAAI,WAAA,EAAa,IAAA,CAAK,SAAS,CAAA;AAAA,EACxC;AACA,EAAA,IAAI,KAAK,OAAA,EAAS;AAChB,IAAA,MAAA,CAAO,GAAA,CAAI,SAAA,EAAW,IAAA,CAAK,OAAO,CAAA;AAAA,EACpC;AAEA,EAAA,OAAO,GAAG,IAAA,CAAK,IAAI,CAAA,CAAA,EAAI,MAAA,CAAO,UAAU,CAAA,CAAA;AAC1C;AAEO,SAAS,mBACd,GAAA,EACoB;AACpB,EAAA,IAAI,IAAA,GAAO,EAAA;AACX,EAAA,IAAI,KAAA,GAAQ,EAAA;AACZ,EAAA,IAAI,QAAA,GAAW,EAAA;AACf,EAAA,IAAI,YAAA,GAAe,EAAA;AACnB,EAAA,IAAI,SAAA,GAAY,EAAA;AAChB,EAAA,IAAI,OAAA,GAAU,EAAA;AAEd,EAAA,IAAI;AACF,IAAA,IAAI,GAAA,EAAK;AACP,MAAA,MAAM,MAAA,GAAS,IAAI,GAAA,CAAI,CAAA,QAAA,EAAW,GAAG,CAAA,CAAE,CAAA;AACvC,MAAA,IAAA,GAAO,MAAA,CAAO,IAAA;AACd,MAAA,KAAA,GAAQ,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,OAAO,CAAA,IAAK,EAAA;AAC5C,MAAA,QAAA,GAAW,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,MAAM,CAAA,IAAK,EAAA;AAC9C,MAAA,YAAA,GAAe,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,cAAc,CAAA,IAAK,EAAA;AAC1D,MAAA,SAAA,GAAY,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,WAAW,CAAA,IAAK,EAAA;AACpD,MAAA,OAAA,GAAU,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,SAAS,CAAA,IAAK,EAAA;AAAA,IAClD;AAAA,EACF,CAAA,CAAA,MAAQ;AAAA,EAER;AACA,EAAA,OAAO,EAAE,IAAA,EAAM,KAAA,EAAO,QAAA,EAAU,YAAA,EAAc,WAAW,OAAA,EAAQ;AACnE;;;;"}