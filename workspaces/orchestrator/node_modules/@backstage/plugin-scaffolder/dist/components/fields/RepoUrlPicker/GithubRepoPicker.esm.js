import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { useState, useCallback, useMemo } from 'react';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import TextField from '@material-ui/core/TextField';
import { Select } from '@backstage/core-components';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';
import { useApi } from '@backstage/core-plugin-api';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import useDebounce from 'react-use/esm/useDebounce';
import Autocomplete from '@material-ui/lab/Autocomplete';
import uniq from 'lodash/uniq';
import map from 'lodash/map';

const GithubRepoPicker = (props) => {
  const {
    allowedOwners = [],
    rawErrors,
    state,
    onChange,
    accessToken,
    isDisabled
  } = props;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const ownerItems = allowedOwners ? allowedOwners.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  const { host, owner } = state;
  const scaffolderApi = useApi(scaffolderApiRef);
  const [availableRepositoriesWithOwner, setAvailableRepositoriesWithOwner] = useState([]);
  const updateAvailableRepositoriesWithOwner = useCallback(() => {
    if (!scaffolderApi.autocomplete || !accessToken || !host) {
      setAvailableRepositoriesWithOwner([]);
      return;
    }
    scaffolderApi.autocomplete({
      token: accessToken,
      resource: "repositoriesWithOwner",
      provider: "github",
      context: { host }
    }).then(({ results }) => {
      setAvailableRepositoriesWithOwner(
        results.map((r) => {
          const [rOwner, rName] = r.id.split("/");
          return { owner: rOwner, name: rName };
        })
      );
    }).catch(() => {
      setAvailableRepositoriesWithOwner([]);
    });
  }, [scaffolderApi, accessToken, host]);
  useDebounce(updateAvailableRepositoriesWithOwner, 500, [
    updateAvailableRepositoriesWithOwner
  ]);
  const availableOwners = useMemo(
    () => uniq(map(availableRepositoriesWithOwner, "owner")),
    [availableRepositoriesWithOwner]
  );
  const updateAvailableRepositories = useCallback(() => {
    const availableRepos = availableRepositoriesWithOwner.flatMap(
      (r) => r.owner === owner ? [{ name: r.name }] : []
    );
    onChange({ availableRepos });
  }, [availableRepositoriesWithOwner, owner, onChange]);
  useDebounce(updateAvailableRepositories, 500, [updateAvailableRepositories]);
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !owner,
      children: [
        allowedOwners?.length ? /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(
          Select,
          {
            native: true,
            label: t("fields.githubRepoPicker.owner.title"),
            onChange: (s) => onChange({ owner: String(Array.isArray(s) ? s[0] : s) }),
            disabled: isDisabled || allowedOwners.length === 1,
            selected: owner,
            items: ownerItems
          }
        ) }) : /* @__PURE__ */ jsx(
          Autocomplete,
          {
            value: owner,
            onChange: (_, newValue) => {
              onChange({ owner: newValue || "" });
            },
            options: availableOwners,
            renderInput: (params) => /* @__PURE__ */ jsx(
              TextField,
              {
                ...params,
                label: t("fields.githubRepoPicker.owner.inputTitle"),
                disabled: isDisabled,
                required: true
              }
            ),
            freeSolo: true,
            disabled: isDisabled,
            autoSelect: true
          }
        ),
        /* @__PURE__ */ jsx(FormHelperText, { children: t("fields.githubRepoPicker.owner.description") })
      ]
    }
  ) });
};

export { GithubRepoPicker };
//# sourceMappingURL=GithubRepoPicker.esm.js.map
