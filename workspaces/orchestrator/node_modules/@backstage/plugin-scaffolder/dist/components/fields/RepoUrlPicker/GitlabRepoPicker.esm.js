import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { Select } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import TextField from '@material-ui/core/TextField';
import Autocomplete from '@material-ui/lab/Autocomplete';
import { useState, useCallback } from 'react';
import useDebounce from 'react-use/esm/useDebounce';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const GitlabRepoPicker = (props) => {
  const {
    allowedOwners = [],
    state,
    onChange,
    rawErrors,
    accessToken,
    isDisabled
  } = props;
  const [availableGroups, setAvailableGroups] = useState([]);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const ownerItems = allowedOwners ? allowedOwners.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  const { owner, host } = state;
  const scaffolderApi = useApi(scaffolderApiRef);
  const updateAvailableGroups = useCallback(() => {
    if (!scaffolderApi.autocomplete || !accessToken || !host) {
      setAvailableGroups([]);
      return;
    }
    scaffolderApi.autocomplete({
      token: accessToken,
      resource: "groups",
      provider: "gitlab",
      context: { host }
    }).then(({ results }) => {
      setAvailableGroups(
        results.map((r) => {
          return {
            title: r.title,
            id: r.id
          };
        })
      );
    }).catch(() => {
      setAvailableGroups([]);
    });
  }, [scaffolderApi, accessToken, host]);
  useDebounce(updateAvailableGroups, 500, [updateAvailableGroups]);
  const updateAvailableRepositories = useCallback(() => {
    if (!scaffolderApi.autocomplete || !accessToken || !host || !owner) {
      onChange({ availableRepos: [] });
      return;
    }
    const selectedGroup = availableGroups.find((group) => group.title === owner);
    scaffolderApi.autocomplete({
      token: accessToken,
      resource: "repositories",
      context: {
        id: selectedGroup?.id ?? "",
        host
      },
      provider: "gitlab"
    }).then(({ results }) => {
      onChange({
        availableRepos: results.map((r) => {
          return { name: r.title, id: r.id };
        })
      });
    }).catch(() => {
      onChange({ availableRepos: [] });
    });
  }, [scaffolderApi, accessToken, host, owner, onChange, availableGroups]);
  useDebounce(updateAvailableRepositories, 500, [updateAvailableRepositories]);
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !owner,
      children: allowedOwners?.length ? /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(
          Select,
          {
            native: true,
            label: t("fields.gitlabRepoPicker.owner.title"),
            onChange: (selected) => onChange({
              owner: String(
                Array.isArray(selected) ? selected[0] : selected
              )
            }),
            disabled: isDisabled || allowedOwners.length === 1,
            selected: owner,
            items: ownerItems
          }
        ),
        /* @__PURE__ */ jsx(FormHelperText, { children: t("fields.gitlabRepoPicker.owner.description") })
      ] }) : /* @__PURE__ */ jsx(
        Autocomplete,
        {
          value: owner,
          onChange: (_, newValue) => {
            onChange({ owner: newValue || "" });
          },
          options: availableGroups.map((group) => group.title),
          renderInput: (params) => /* @__PURE__ */ jsx(
            TextField,
            {
              ...params,
              label: t("fields.gitlabRepoPicker.owner.title"),
              disabled: isDisabled,
              required: true
            }
          ),
          freeSolo: true,
          disabled: isDisabled,
          autoSelect: true
        }
      )
    }
  ) });
};

export { GitlabRepoPicker };
//# sourceMappingURL=GitlabRepoPicker.esm.js.map
