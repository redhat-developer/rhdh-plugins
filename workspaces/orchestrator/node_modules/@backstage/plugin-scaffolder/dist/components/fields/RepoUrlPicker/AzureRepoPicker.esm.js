import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import TextField from '@material-ui/core/TextField';
import { Select } from '@backstage/core-components';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const AzureRepoPicker = (props) => {
  const {
    allowedOrganizations = [],
    allowedProject = [],
    rawErrors,
    state,
    onChange,
    isDisabled
  } = props;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const organizationItems = allowedOrganizations ? allowedOrganizations.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  const projectItems = allowedProject ? allowedProject.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  const { organization, project } = state;
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      FormControl,
      {
        margin: "normal",
        required: true,
        error: rawErrors?.length > 0 && !organization,
        children: allowedOrganizations?.length ? /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(
            Select,
            {
              native: true,
              label: t("fields.azureRepoPicker.organization.title"),
              onChange: (s) => onChange({ organization: String(Array.isArray(s) ? s[0] : s) }),
              disabled: isDisabled || allowedOrganizations.length === 1,
              selected: organization,
              items: organizationItems
            }
          ),
          /* @__PURE__ */ jsx(FormHelperText, { children: t("fields.azureRepoPicker.organization.description") })
        ] }) : /* @__PURE__ */ jsx(
          TextField,
          {
            id: "orgInput",
            label: t("fields.azureRepoPicker.organization.title"),
            onChange: (e) => onChange({ organization: e.target.value }),
            helperText: t("fields.azureRepoPicker.organization.description"),
            disabled: isDisabled,
            value: organization
          }
        )
      }
    ),
    /* @__PURE__ */ jsx(
      FormControl,
      {
        margin: "normal",
        required: true,
        error: rawErrors?.length > 0 && !project,
        children: allowedProject?.length ? /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(
            Select,
            {
              native: true,
              label: t("fields.azureRepoPicker.project.title"),
              onChange: (s) => onChange({ project: String(Array.isArray(s) ? s[0] : s) }),
              disabled: isDisabled || allowedProject.length === 1,
              selected: project,
              items: projectItems
            }
          ),
          /* @__PURE__ */ jsx(FormHelperText, { children: t("fields.azureRepoPicker.project.description") })
        ] }) : /* @__PURE__ */ jsx(
          TextField,
          {
            id: "projectInput",
            label: t("fields.azureRepoPicker.project.title"),
            onChange: (e) => onChange({ project: e.target.value }),
            value: project,
            disabled: isDisabled,
            helperText: t("fields.azureRepoPicker.project.description")
          }
        )
      }
    )
  ] });
};

export { AzureRepoPicker };
//# sourceMappingURL=AzureRepoPicker.esm.js.map
