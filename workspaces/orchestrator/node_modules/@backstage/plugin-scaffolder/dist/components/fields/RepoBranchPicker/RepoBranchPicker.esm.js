import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useApi } from '@backstage/core-plugin-api';
import { scmIntegrationsApiRef, scmAuthApiRef } from '@backstage/integration-react';
import { useState, useEffect, useCallback } from 'react';
import useDebounce from 'react-use/esm/useDebounce';
import { useTemplateSecrets } from '@backstage/plugin-scaffolder-react';
import Box from '@material-ui/core/Box';
import Divider from '@material-ui/core/Divider';
import Typography from '@material-ui/core/Typography';
import { BitbucketRepoBranchPicker } from './BitbucketRepoBranchPicker.esm.js';
import { DefaultRepoBranchPicker } from './DefaultRepoBranchPicker.esm.js';
import { GitHubRepoBranchPicker } from './GitHubRepoBranchPicker.esm.js';
import { MarkdownContent } from '@backstage/core-components';

const RepoBranchPicker = (props) => {
  const {
    uiSchema,
    onChange,
    rawErrors,
    formData,
    schema,
    formContext,
    required
  } = props;
  const {
    formData: { repoUrl }
  } = formContext;
  const [state, setState] = useState({
    branch: formData || ""
  });
  const { host, branch } = state;
  const integrationApi = useApi(scmIntegrationsApiRef);
  const scmAuthApi = useApi(scmAuthApiRef);
  const { secrets, setSecrets } = useTemplateSecrets();
  useDebounce(
    async () => {
      const { requestUserCredentials } = uiSchema?.["ui:options"] ?? {};
      if (!requestUserCredentials || !host) {
        return;
      }
      if (secrets[requestUserCredentials.secretsKey]) {
        return;
      }
      const { token } = await scmAuthApi.getCredentials({
        url: `https://${host}`,
        additionalScope: {
          repoWrite: true,
          customScopes: requestUserCredentials.additionalScopes
        }
      });
      setSecrets({ [requestUserCredentials.secretsKey]: token });
    },
    500,
    [host, uiSchema]
  );
  useEffect(() => {
    if (repoUrl) {
      const url = new URL(`https://${repoUrl}`);
      setState((prevState) => ({
        ...prevState,
        host: url.host,
        workspace: url.searchParams.get("workspace") || "",
        repository: url.searchParams.get("repo") || "",
        owner: url.searchParams.get("owner") || ""
      }));
    }
  }, [repoUrl]);
  useEffect(() => {
    onChange(branch);
  }, [branch, onChange]);
  const updateLocalState = useCallback(
    (newState) => {
      setState((prevState) => ({ ...prevState, ...newState }));
    },
    [setState]
  );
  const hostType = (host && integrationApi.byHost(host)?.type) ?? null;
  const renderRepoBranchPicker = () => {
    switch (hostType) {
      case "bitbucket":
        return /* @__PURE__ */ jsx(
          BitbucketRepoBranchPicker,
          {
            onChange: updateLocalState,
            state,
            rawErrors,
            accessToken: uiSchema?.["ui:options"]?.requestUserCredentials?.secretsKey && secrets[uiSchema["ui:options"].requestUserCredentials.secretsKey],
            isDisabled: uiSchema?.["ui:disabled"] ?? false,
            required
          }
        );
      case "github":
        return /* @__PURE__ */ jsx(
          GitHubRepoBranchPicker,
          {
            onChange: updateLocalState,
            state,
            rawErrors,
            accessToken: uiSchema?.["ui:options"]?.requestUserCredentials?.secretsKey && secrets[uiSchema["ui:options"].requestUserCredentials.secretsKey],
            isDisabled: uiSchema?.["ui:disabled"] ?? false,
            required
          }
        );
      default:
        return /* @__PURE__ */ jsx(
          DefaultRepoBranchPicker,
          {
            onChange: updateLocalState,
            state,
            rawErrors,
            isDisabled: uiSchema?.["ui:disabled"] ?? false,
            required
          }
        );
    }
  };
  const description = uiSchema["ui:description"] ?? schema.description;
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    schema.title && /* @__PURE__ */ jsxs(Box, { my: 1, children: [
      /* @__PURE__ */ jsx(Typography, { variant: "h5", children: schema.title }),
      /* @__PURE__ */ jsx(Divider, {})
    ] }),
    description && /* @__PURE__ */ jsx(Typography, { variant: "body1", children: /* @__PURE__ */ jsx(MarkdownContent, { content: description }) }),
    renderRepoBranchPicker()
  ] });
};

export { RepoBranchPicker };
//# sourceMappingURL=RepoBranchPicker.esm.js.map
