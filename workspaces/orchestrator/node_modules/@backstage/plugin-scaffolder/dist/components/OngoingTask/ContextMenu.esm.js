import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import IconButton from '@material-ui/core/IconButton';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import MenuList from '@material-ui/core/MenuList';
import Popover from '@material-ui/core/Popover';
import { useTheme, makeStyles } from '@material-ui/core/styles';
import Cancel from '@material-ui/icons/Cancel';
import Repeat from '@material-ui/icons/Repeat';
import Replay from '@material-ui/icons/Replay';
import Toc from '@material-ui/icons/Toc';
import ControlPointIcon from '@material-ui/icons/ControlPoint';
import MoreVert from '@material-ui/icons/MoreVert';
import { useState } from 'react';
import { usePermission } from '@backstage/plugin-permission-react';
import { taskReadPermission, taskCreatePermission } from '@backstage/plugin-scaffolder-common/alpha';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../translation.esm.js';

const useStyles = makeStyles(() => ({
  button: {
    color: ({ fontColor }) => fontColor
  }
}));
const ContextMenu = (props) => {
  const {
    cancelEnabled,
    canRetry,
    isRetryableTask,
    logsVisible,
    buttonBarVisible,
    onRetry,
    onStartOver,
    onToggleLogs,
    onToggleButtonBar,
    taskId
  } = props;
  const { getPageTheme } = useTheme();
  const pageTheme = getPageTheme({ themeId: "website" });
  const classes = useStyles({ fontColor: pageTheme.fontColor });
  const [anchorEl, setAnchorEl] = useState();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const { allowed: canReadTask } = usePermission({
    permission: taskReadPermission,
    resourceRef: taskId
  });
  const { allowed: canCreateTask } = usePermission({
    permission: taskCreatePermission
  });
  const canStartOver = canReadTask && canCreateTask;
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      IconButton,
      {
        "aria-label": "more",
        "aria-controls": "long-menu",
        "aria-haspopup": "true",
        onClick: (event) => {
          setAnchorEl(event.currentTarget);
        },
        "data-testid": "menu-button",
        className: classes.button,
        children: /* @__PURE__ */ jsx(MoreVert, {})
      }
    ),
    /* @__PURE__ */ jsx(
      Popover,
      {
        open: Boolean(anchorEl),
        onClose: () => setAnchorEl(void 0),
        anchorEl,
        anchorOrigin: { vertical: "bottom", horizontal: "right" },
        transformOrigin: { vertical: "top", horizontal: "right" },
        children: /* @__PURE__ */ jsxs(MenuList, { children: [
          /* @__PURE__ */ jsxs(MenuItem, { onClick: () => onToggleLogs?.(!logsVisible), children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Toc, { fontSize: "small" }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: logsVisible ? t("ongoingTask.contextMenu.hideLogs") : t("ongoingTask.contextMenu.showLogs")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs(MenuItem, { onClick: () => onToggleButtonBar?.(!buttonBarVisible), children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(ControlPointIcon, { fontSize: "small" }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: buttonBarVisible ? t("ongoingTask.contextMenu.hideButtonBar") : t("ongoingTask.contextMenu.showButtonBar")
              }
            )
          ] }),
          /* @__PURE__ */ jsxs(
            MenuItem,
            {
              onClick: onStartOver,
              disabled: cancelEnabled || !canStartOver,
              "data-testid": "start-over-task",
              children: [
                /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Repeat, { fontSize: "small" }) }),
                /* @__PURE__ */ jsx(ListItemText, { primary: t("ongoingTask.contextMenu.startOver") })
              ]
            }
          ),
          isRetryableTask && /* @__PURE__ */ jsxs(
            MenuItem,
            {
              onClick: onRetry,
              disabled: cancelEnabled || !canRetry,
              "data-testid": "retry-task",
              children: [
                /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Replay, { fontSize: "small" }) }),
                /* @__PURE__ */ jsx(ListItemText, { primary: t("ongoingTask.contextMenu.retry") })
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            MenuItem,
            {
              onClick: props.onCancel,
              disabled: props.isCancelButtonDisabled,
              "data-testid": "cancel-task",
              children: [
                /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Cancel, { fontSize: "small" }) }),
                /* @__PURE__ */ jsx(ListItemText, { primary: t("ongoingTask.contextMenu.cancel") })
              ]
            }
          )
        ] })
      }
    )
  ] });
};

export { ContextMenu };
//# sourceMappingURL=ContextMenu.esm.js.map
