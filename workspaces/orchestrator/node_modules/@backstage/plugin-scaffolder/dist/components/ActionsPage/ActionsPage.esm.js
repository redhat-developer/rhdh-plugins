import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { useState, useEffect } from 'react';
import useAsync from 'react-use/esm/useAsync';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import LinkIcon from '@material-ui/icons/Link';
import Autocomplete from '@material-ui/lab/Autocomplete';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import SearchIcon from '@material-ui/icons/Search';
import { useRouteRef, useApi } from '@backstage/core-plugin-api';
import { Page, Header, Content, Progress, ErrorPanel, EmptyState, Link, MarkdownContent } from '@backstage/core-components';
import { ScaffolderPageContextMenu } from '@backstage/plugin-scaffolder-react/alpha';
import { useNavigate } from 'react-router-dom';
import { editRouteRef, scaffolderListTaskRouteRef, rootRouteRef, templatingExtensionsRouteRef } from '../../routes.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../translation.esm.js';
import { RenderSchema } from '../RenderSchema/RenderSchema.esm.js';
import { ScaffolderUsageExamplesTable } from '../ScaffolderUsageExamplesTable/ScaffolderUsageExamplesTable.esm.js';

const useStyles = makeStyles((theme) => ({
  code: {
    fontFamily: "Menlo, monospace",
    padding: theme.spacing(1),
    backgroundColor: theme.palette.type === "dark" ? theme.palette.grey[700] : theme.palette.grey[300],
    display: "inline-block",
    borderRadius: 5,
    border: `1px solid ${theme.palette.grey[500]}`,
    position: "relative"
  },
  codeRequired: {
    "&::after": {
      position: "absolute",
      content: '"*"',
      top: 0,
      right: theme.spacing(0.5),
      fontWeight: "bolder",
      color: theme.palette.error.light
    }
  },
  link: {
    paddingLeft: theme.spacing(1)
  }
}));
const ActionPageContent = () => {
  const api = useApi(scaffolderApiRef);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const classes = useStyles();
  const {
    loading,
    value = [],
    error
  } = useAsync(async () => {
    return api.listActions();
  }, [api]);
  const [selectedAction, setSelectedAction] = useState(null);
  const expanded = useState({});
  useEffect(() => {
    if (value.length && window.location.hash) {
      document.querySelector(window.location.hash)?.scrollIntoView();
    }
  }, [value]);
  if (loading) {
    return /* @__PURE__ */ jsx(Progress, {});
  }
  if (error) {
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(ErrorPanel, { error }),
      /* @__PURE__ */ jsx(
        EmptyState,
        {
          missing: "info",
          title: t("actionsPage.content.emptyState.title"),
          description: t("actionsPage.content.emptyState.description")
        }
      )
    ] });
  }
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Box, { pb: 3, children: /* @__PURE__ */ jsx(
      Autocomplete,
      {
        id: "actions-autocomplete",
        options: value,
        loading,
        getOptionLabel: (option) => option.id,
        renderInput: (params) => /* @__PURE__ */ jsx(
          TextField,
          {
            ...params,
            "aria-label": t("actionsPage.content.searchFieldPlaceholder"),
            placeholder: t("actionsPage.content.searchFieldPlaceholder"),
            variant: "outlined",
            InputProps: {
              ...params.InputProps,
              startAdornment: /* @__PURE__ */ jsx(InputAdornment, { position: "start", children: /* @__PURE__ */ jsx(SearchIcon, {}) })
            }
          }
        ),
        onChange: (_event, option) => {
          setSelectedAction(option);
        },
        fullWidth: true
      }
    ) }),
    (selectedAction ? [selectedAction] : value).map((action) => {
      if (action.id.startsWith("legacy:")) {
        return void 0;
      }
      const partialSchemaRenderContext = {
        classes,
        expanded,
        headings: [/* @__PURE__ */ jsx(Typography, { variant: "h6", component: "h4" })]
      };
      return /* @__PURE__ */ jsxs(Box, { pb: 3, children: [
        /* @__PURE__ */ jsxs(Box, { display: "flex", alignItems: "center", children: [
          /* @__PURE__ */ jsx(
            Typography,
            {
              id: action.id.replaceAll(":", "-"),
              variant: "h5",
              component: "h2",
              className: classes.code,
              children: action.id
            }
          ),
          /* @__PURE__ */ jsx(
            Link,
            {
              className: classes.link,
              to: `#${action.id.replaceAll(":", "-")}`,
              children: /* @__PURE__ */ jsx(LinkIcon, {})
            }
          )
        ] }),
        action.description && /* @__PURE__ */ jsx(MarkdownContent, { content: action.description }),
        action.schema?.input && /* @__PURE__ */ jsxs(Box, { pb: 2, children: [
          /* @__PURE__ */ jsx(Typography, { variant: "h6", component: "h3", children: t("actionsPage.action.input") }),
          /* @__PURE__ */ jsx(
            RenderSchema,
            {
              strategy: "properties",
              context: {
                parentId: `${action.id}.input`,
                ...partialSchemaRenderContext
              },
              schema: action?.schema?.input
            }
          )
        ] }),
        action.schema?.output && /* @__PURE__ */ jsxs(Box, { pb: 2, children: [
          /* @__PURE__ */ jsx(Typography, { variant: "h5", component: "h3", children: t("actionsPage.action.output") }),
          /* @__PURE__ */ jsx(
            RenderSchema,
            {
              strategy: "properties",
              context: {
                parentId: `${action.id}.output`,
                ...partialSchemaRenderContext
              },
              schema: action?.schema?.output
            }
          )
        ] }),
        action.examples && /* @__PURE__ */ jsxs(Accordion, { children: [
          /* @__PURE__ */ jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}), children: /* @__PURE__ */ jsx(Typography, { variant: "h6", component: "h3", children: t("actionsPage.action.examples") }) }),
          /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsx(Box, { pb: 2, children: /* @__PURE__ */ jsx(ScaffolderUsageExamplesTable, { examples: action.examples }) }) })
        ] })
      ] }, action.id);
    })
  ] });
};
const ActionsPage = (props) => {
  const navigate = useNavigate();
  const editorLink = useRouteRef(editRouteRef);
  const tasksLink = useRouteRef(scaffolderListTaskRouteRef);
  const createLink = useRouteRef(rootRouteRef);
  const templatingExtensionsLink = useRouteRef(templatingExtensionsRouteRef);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const scaffolderPageContextMenuProps = {
    onEditorClicked: props?.contextMenu?.editor !== false ? () => navigate(editorLink()) : void 0,
    onActionsClicked: void 0,
    onTasksClicked: props?.contextMenu?.tasks !== false ? () => navigate(tasksLink()) : void 0,
    onCreateClicked: props?.contextMenu?.create !== false ? () => navigate(createLink()) : void 0,
    onTemplatingExtensionsClicked: () => navigate(templatingExtensionsLink())
  };
  return /* @__PURE__ */ jsxs(Page, { themeId: "home", children: [
    /* @__PURE__ */ jsx(
      Header,
      {
        pageTitleOverride: t("actionsPage.pageTitle"),
        title: t("actionsPage.title"),
        subtitle: t("actionsPage.subtitle"),
        children: /* @__PURE__ */ jsx(ScaffolderPageContextMenu, { ...scaffolderPageContextMenuProps })
      }
    ),
    /* @__PURE__ */ jsx(Content, { children: /* @__PURE__ */ jsx(ActionPageContent, {}) })
  ] });
};

export { ActionPageContent, ActionsPage };
//# sourceMappingURL=ActionsPage.esm.js.map
