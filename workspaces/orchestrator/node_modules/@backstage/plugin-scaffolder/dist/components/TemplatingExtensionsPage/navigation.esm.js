const kinds = ["filter", "function", "value"];
const listTemplatingExtensions = (data) => {
  const exts = (kind, record) => record ? Object.keys(record).map((name) => ({ kind, name })) : [];
  return [
    ...exts("filter", data.filters),
    ...exts("function", data.globals?.functions),
    ...exts("value", data.globals?.values)
  ];
};
const renderFragment = (e) => `${e.kind}_${e.name}`;
const parseFragment = (fragment) => {
  const [k, name] = fragment.split("_", 2);
  const kind = k;
  if (kinds.includes(kind)) {
    return {
      kind,
      name
    };
  }
  throw Error(fragment);
};

export { listTemplatingExtensions, parseFragment, renderFragment };
//# sourceMappingURL=navigation.esm.js.map
