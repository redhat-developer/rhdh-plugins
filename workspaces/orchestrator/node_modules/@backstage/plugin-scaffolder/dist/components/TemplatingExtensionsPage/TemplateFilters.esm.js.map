{"version":3,"file":"TemplateFilters.esm.js","sources":["../../../src/components/TemplatingExtensionsPage/TemplateFilters.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Link, MarkdownContent } from '@backstage/core-components';\nimport {\n  ListTemplatingExtensionsResponse,\n  TemplateFilter,\n} from '@backstage/plugin-scaffolder-react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Box from '@material-ui/core/Box';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport classNames from 'classnames';\nimport { cloneElement, Fragment, ReactElement, useState } from 'react';\nimport { scaffolderTranslationRef } from '../../translation';\nimport { Expanded, RenderSchema, SchemaRenderContext } from '../RenderSchema';\nimport { ScaffolderUsageExamplesTable } from '../ScaffolderUsageExamplesTable';\nimport { inspectFunctionArgSchema } from './functionArgs';\nimport { Extension, renderFragment } from './navigation';\nimport { StyleClasses, TranslationMessages } from './types';\n\nconst FilterDetailContent = ({\n  t,\n  classes,\n  name,\n  filter,\n}: {\n  t: TranslationMessages<typeof scaffolderTranslationRef>;\n  classes: ClassNameMap;\n  name: string;\n  filter: TemplateFilter;\n}) => {\n  const expanded = useState<Expanded>({});\n  if (!Object.keys(filter).length) {\n    return (\n      <Typography style={{ fontStyle: 'italic' }}>\n        {t('templatingExtensions.content.filters.metadataAbsent')}\n      </Typography>\n    );\n  }\n  const schema = filter.schema;\n  const partialSchemaRenderContext: Omit<SchemaRenderContext, 'parentId'> = {\n    classes,\n    expanded,\n    headings: [<Typography variant=\"h6\" component=\"h4\" />],\n  };\n  return (\n    <Fragment key={`${name}.detail`}>\n      {filter.description && <MarkdownContent content={filter.description} />}\n      <Box pb={2}>\n        <Typography variant=\"h5\" component=\"h3\">\n          {t('templatingExtensions.content.filters.schema.input')}\n        </Typography>\n        <RenderSchema\n          strategy=\"root\"\n          context={{\n            parentId: `${name}.input`,\n            ...partialSchemaRenderContext,\n          }}\n          schema={schema?.input ?? {}}\n        />\n      </Box>\n      {schema?.arguments?.length && (\n        <Box key={`${name}.args`} pb={2}>\n          <Typography variant=\"h5\" component=\"h3\">\n            {t('templatingExtensions.content.filters.schema.arguments')}\n          </Typography>\n          {schema.arguments.map((arg, i) => {\n            const [argSchema, required] = inspectFunctionArgSchema(arg);\n\n            return (\n              <Fragment key={i}>\n                <div\n                  className={classNames({ [classes.argRequired]: required })}\n                >\n                  <Typography variant=\"h6\" component=\"h4\">\n                    {`[${i}]`}\n                  </Typography>\n                </div>\n                <RenderSchema\n                  strategy=\"root\"\n                  context={{\n                    parentId: `${name}.arg${i}`,\n                    ...partialSchemaRenderContext,\n                    headings: [<Typography variant=\"h6\" component=\"h5\" />],\n                  }}\n                  schema={argSchema}\n                />\n              </Fragment>\n            );\n          })}\n        </Box>\n      )}\n      <Box pb={2}>\n        <Typography variant=\"h5\" component=\"h3\">\n          {t('templatingExtensions.content.filters.schema.output')}\n        </Typography>\n        <RenderSchema\n          strategy=\"root\"\n          context={{\n            parentId: `${name}.output`,\n            ...partialSchemaRenderContext,\n          }}\n          schema={schema?.output ?? {}}\n        />\n      </Box>\n      {filter.examples && (\n        <Accordion>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography variant=\"h5\" component=\"h3\">\n              {t('templatingExtensions.content.filters.examples')}\n            </Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Box pb={2}>\n              <ScaffolderUsageExamplesTable examples={filter.examples} />\n            </Box>\n          </AccordionDetails>\n        </Accordion>\n      )}\n    </Fragment>\n  );\n};\n\nexport const TemplateFilters = ({\n  t,\n  classes,\n  filters,\n  baseLink,\n  selectedItem,\n}: {\n  t: TranslationMessages<typeof scaffolderTranslationRef>;\n  classes: StyleClasses;\n  filters: ListTemplatingExtensionsResponse['filters'];\n  baseLink: ReactElement<Parameters<typeof Link>[0]>;\n  selectedItem: Extension | null;\n}) => {\n  if (selectedItem && selectedItem.kind !== 'filter') {\n    return <></>;\n  }\n  if (!Object.keys(filters).length) {\n    return (\n      <div data-testid=\"no-filters\">\n        {t('templatingExtensions.content.filters.notAvailable')}\n      </div>\n    );\n  }\n  return (\n    <div data-testid=\"filters\">\n      {Object.entries(\n        selectedItem\n          ? { [selectedItem.name]: filters[selectedItem.name] }\n          : filters,\n      ).map(([name, filter]) => {\n        const fragment = renderFragment({ kind: 'filter', name });\n        return (\n          <Box pb={4} key={name} data-testid={name}>\n            <Typography\n              id={fragment}\n              variant=\"h4\"\n              component=\"h2\"\n              className={classes.code}\n            >\n              {name}\n            </Typography>\n            {cloneElement(baseLink, {\n              to: `${baseLink.props.to}#${fragment}`,\n            })}\n            <FilterDetailContent {...{ t, classes, name, filter }} />\n          </Box>\n        );\n      })}\n    </div>\n  );\n};\n"],"names":["Fragment"],"mappings":"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"}