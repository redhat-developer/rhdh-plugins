{"version":3,"file":"TemplateGlobals.esm.js","sources":["../../../src/components/TemplatingExtensionsPage/TemplateGlobals.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CodeSnippet, Link, MarkdownContent } from '@backstage/core-components';\nimport {\n  ListTemplatingExtensionsResponse,\n  TemplateGlobalFunction,\n} from '@backstage/plugin-scaffolder-react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Box from '@material-ui/core/Box';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport classNames from 'classnames';\nimport { cloneElement, Fragment, ReactElement, useState } from 'react';\nimport { scaffolderTranslationRef } from '../../translation';\nimport { Expanded, RenderSchema, SchemaRenderContext } from '../RenderSchema';\nimport { ScaffolderUsageExamplesTable } from '../ScaffolderUsageExamplesTable';\nimport { inspectFunctionArgSchema } from './functionArgs';\nimport { Extension, renderFragment } from './navigation';\nimport { TranslationMessages } from './types';\n\nconst FunctionDetailContent = ({\n  classes,\n  name,\n  fn,\n  t,\n}: {\n  classes: ClassNameMap;\n  name: string;\n  fn: TemplateGlobalFunction;\n  t: TranslationMessages<typeof scaffolderTranslationRef>;\n}) => {\n  const expanded = useState<Expanded>({});\n  if (!Object.keys(fn).length) {\n    return (\n      <Typography\n        style={{ fontStyle: 'italic' }}\n        data-testid={`${name}.metadataAbsent`}\n      >\n        {t('templatingExtensions.content.functions.metadataAbsent')}\n      </Typography>\n    );\n  }\n  const schema = fn.schema;\n  const partialSchemaRenderContext: Omit<SchemaRenderContext, 'parentId'> = {\n    classes,\n    expanded,\n    headings: [<Typography variant=\"h6\" component=\"h4\" />],\n  };\n  return (\n    <Fragment key={`${name}.detail`}>\n      {fn.description && <MarkdownContent content={fn.description} />}\n      {schema?.arguments?.length && (\n        <Box key={`${name}.args`} pb={2}>\n          <Typography variant=\"h5\" component=\"h3\">\n            {t('templatingExtensions.content.functions.schema.arguments')}\n          </Typography>\n          {schema.arguments.map((arg, i) => {\n            const [argSchema, required] = inspectFunctionArgSchema(arg);\n\n            return (\n              <Fragment key={i}>\n                <div\n                  className={classNames({ [classes.argRequired]: required })}\n                >\n                  <Typography\n                    variant=\"h6\"\n                    component=\"h4\"\n                  >{`[${i}]`}</Typography>\n                </div>\n                <RenderSchema\n                  strategy=\"root\"\n                  context={{\n                    parentId: `${name}.arg${i}`,\n                    ...partialSchemaRenderContext,\n                    headings: [<Typography variant=\"h6\" component=\"h5\" />],\n                  }}\n                  schema={argSchema}\n                />\n              </Fragment>\n            );\n          })}\n        </Box>\n      )}\n      <Box pb={2}>\n        <Typography variant=\"h5\" component=\"h3\">\n          {t('templatingExtensions.content.functions.schema.output')}\n        </Typography>\n        <RenderSchema\n          strategy=\"root\"\n          context={{\n            parentId: `${name}.output`,\n            ...partialSchemaRenderContext,\n          }}\n          schema={schema?.output ?? {}}\n        />\n      </Box>\n      {fn.examples && (\n        <Accordion>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography variant=\"h5\" component=\"h3\">\n              {t('templatingExtensions.content.functions.examples')}\n            </Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Box pb={2}>\n              <ScaffolderUsageExamplesTable examples={fn.examples} />\n            </Box>\n          </AccordionDetails>\n        </Accordion>\n      )}\n    </Fragment>\n  );\n};\n\nexport const TemplateGlobalFunctions = ({\n  classes,\n  functions,\n  t,\n  baseLink,\n  selectedItem,\n}: {\n  classes: ClassNameMap;\n  functions: ListTemplatingExtensionsResponse['globals']['functions'];\n  t: TranslationMessages<typeof scaffolderTranslationRef>;\n  baseLink: ReactElement<Parameters<typeof Link>[0]>;\n  selectedItem: Extension | null;\n}) => {\n  if (selectedItem && selectedItem.kind !== 'function') {\n    return <></>;\n  }\n  if (!Object.keys(functions).length) {\n    return (\n      <div data-testid=\"no-functions\">\n        {t('templatingExtensions.content.functions.notAvailable')}\n      </div>\n    );\n  }\n  return (\n    <div data-testid=\"functions\">\n      {Object.entries(\n        selectedItem\n          ? { [selectedItem.name]: functions[selectedItem.name] }\n          : functions,\n      ).map(([name, fn]) => {\n        const fragment = renderFragment({ kind: 'function', name });\n        return (\n          <Box pb={4} key={name} data-testid={name}>\n            <Typography\n              id={fragment}\n              variant=\"h4\"\n              component=\"h2\"\n              className={classes.code}\n            >\n              {name}\n            </Typography>\n            {cloneElement(baseLink, {\n              to: `${baseLink.props.to}#${fragment}`,\n            })}\n            <FunctionDetailContent {...{ classes, name, fn, t }} />\n          </Box>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const TemplateGlobalValues = ({\n  classes,\n  t,\n  values,\n  baseLink,\n  selectedItem,\n}: {\n  classes: ClassNameMap;\n  t: TranslationMessages<typeof scaffolderTranslationRef>;\n  values: ListTemplatingExtensionsResponse['globals']['values'];\n  baseLink: ReactElement<Parameters<typeof Link>[0]>;\n  selectedItem: Extension | null;\n}) => {\n  if (selectedItem && selectedItem.kind !== 'value') {\n    return <></>;\n  }\n  if (!Object.keys(values).length) {\n    return (\n      <div data-testid=\"no-values\">\n        {t('templatingExtensions.content.values.notAvailable')}\n      </div>\n    );\n  }\n  return (\n    <div data-testid=\"values\">\n      {Object.entries(\n        selectedItem\n          ? { [selectedItem.name]: values[selectedItem.name] }\n          : values,\n      ).map(([name, gv]) => {\n        const fragment = renderFragment({ kind: 'value', name });\n        return (\n          <Box pb={4} key={name} data-testid={name}>\n            <Typography\n              id={fragment}\n              variant=\"h4\"\n              component=\"h2\"\n              className={classes.code}\n            >\n              {name}\n            </Typography>\n            {cloneElement(baseLink, {\n              to: `${baseLink.props.to}#${fragment}`,\n            })}\n            {gv.description && <MarkdownContent content={gv.description} />}\n            <Box padding={1} data-testid={`${name}.value`}>\n              <CodeSnippet\n                text={JSON.stringify(gv.value, null, 2)}\n                showCopyCodeButton\n                language=\"json\"\n              />\n            </Box>\n          </Box>\n        );\n      })}\n    </div>\n  );\n};\n"],"names":["Fragment"],"mappings":";;;;;;;;;;;;;;;AAoCA,MAAM,wBAAwB,CAAC;AAAA,EAC7B,OAAA;AAAA,EACA,IAAA;AAAA,EACA,EAAA;AAAA,EACA;AACF,CAAA,KAKM;AACJ,EAAA,MAAM,QAAA,GAAW,QAAA,CAAmB,EAAE,CAAA;AACtC,EAAA,IAAI,CAAC,MAAA,CAAO,IAAA,CAAK,EAAE,EAAE,MAAA,EAAQ;AAC3B,IAAA,uBACE,GAAA;AAAA,MAAC,UAAA;AAAA,MAAA;AAAA,QACC,KAAA,EAAO,EAAE,SAAA,EAAW,QAAA,EAAS;AAAA,QAC7B,aAAA,EAAa,GAAG,IAAI,CAAA,eAAA,CAAA;AAAA,QAEnB,YAAE,uDAAuD;AAAA;AAAA,KAC5D;AAAA,EAEJ;AACA,EAAA,MAAM,SAAS,EAAA,CAAG,MAAA;AAClB,EAAA,MAAM,0BAAA,GAAoE;AAAA,IACxE,OAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA,EAAU,iBAAC,GAAA,CAAC,UAAA,EAAA,EAAW,SAAQ,IAAA,EAAK,SAAA,EAAU,MAAK,CAAE;AAAA,GACvD;AACA,EAAA,uBACE,IAAA,CAACA,YAAA,EACE,QAAA,EAAA;AAAA,IAAA,EAAA,CAAG,WAAA,oBAAe,GAAA,CAAC,eAAA,EAAA,EAAgB,OAAA,EAAS,GAAG,WAAA,EAAa,CAAA;AAAA,IAC5D,QAAQ,SAAA,EAAW,MAAA,oBAClB,IAAA,CAAC,GAAA,EAAA,EAAyB,IAAI,CAAA,EAC5B,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,cAAW,OAAA,EAAQ,IAAA,EAAK,WAAU,IAAA,EAChC,QAAA,EAAA,CAAA,CAAE,yDAAyD,CAAA,EAC9D,CAAA;AAAA,MACC,MAAA,CAAO,SAAA,CAAU,GAAA,CAAI,CAAC,KAAK,CAAA,KAAM;AAChC,QAAA,MAAM,CAAC,SAAA,EAAW,QAAQ,CAAA,GAAI,yBAAyB,GAAG,CAAA;AAE1D,QAAA,uBACE,IAAA,CAACA,YAAA,EACC,QAAA,EAAA;AAAA,0BAAA,GAAA;AAAA,YAAC,KAAA;AAAA,YAAA;AAAA,cACC,SAAA,EAAW,WAAW,EAAE,CAAC,QAAQ,WAAW,GAAG,UAAU,CAAA;AAAA,cAEzD,QAAA,kBAAA,GAAA;AAAA,gBAAC,UAAA;AAAA,gBAAA;AAAA,kBACC,OAAA,EAAQ,IAAA;AAAA,kBACR,SAAA,EAAU,IAAA;AAAA,kBACV,cAAI,CAAC,CAAA,CAAA;AAAA;AAAA;AAAI;AAAA,WACb;AAAA,0BACA,GAAA;AAAA,YAAC,YAAA;AAAA,YAAA;AAAA,cACC,QAAA,EAAS,MAAA;AAAA,cACT,OAAA,EAAS;AAAA,gBACP,QAAA,EAAU,CAAA,EAAG,IAAI,CAAA,IAAA,EAAO,CAAC,CAAA,CAAA;AAAA,gBACzB,GAAG,0BAAA;AAAA,gBACH,QAAA,EAAU,iBAAC,GAAA,CAAC,UAAA,EAAA,EAAW,SAAQ,IAAA,EAAK,SAAA,EAAU,MAAK,CAAE;AAAA,eACvD;AAAA,cACA,MAAA,EAAQ;AAAA;AAAA;AACV,SAAA,EAAA,EAjBa,CAkBf,CAAA;AAAA,MAEJ,CAAC;AAAA,KAAA,EAAA,EA5BO,CAAA,EAAG,IAAI,CAAA,KAAA,CA6BjB,CAAA;AAAA,oBAEF,IAAA,CAAC,GAAA,EAAA,EAAI,EAAA,EAAI,CAAA,EACP,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,cAAW,OAAA,EAAQ,IAAA,EAAK,WAAU,IAAA,EAChC,QAAA,EAAA,CAAA,CAAE,sDAAsD,CAAA,EAC3D,CAAA;AAAA,sBACA,GAAA;AAAA,QAAC,YAAA;AAAA,QAAA;AAAA,UACC,QAAA,EAAS,MAAA;AAAA,UACT,OAAA,EAAS;AAAA,YACP,QAAA,EAAU,GAAG,IAAI,CAAA,OAAA,CAAA;AAAA,YACjB,GAAG;AAAA,WACL;AAAA,UACA,MAAA,EAAQ,MAAA,EAAQ,MAAA,IAAU;AAAC;AAAA;AAC7B,KAAA,EACF,CAAA;AAAA,IACC,EAAA,CAAG,QAAA,oBACF,IAAA,CAAC,SAAA,EAAA,EACC,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,gBAAA,EAAA,EAAiB,UAAA,kBAAY,GAAA,CAAC,cAAA,EAAA,EAAe,GAC5C,QAAA,kBAAA,GAAA,CAAC,UAAA,EAAA,EAAW,OAAA,EAAQ,IAAA,EAAK,SAAA,EAAU,IAAA,EAChC,QAAA,EAAA,CAAA,CAAE,iDAAiD,GACtD,CAAA,EACF,CAAA;AAAA,sBACA,GAAA,CAAC,gBAAA,EAAA,EACC,QAAA,kBAAA,GAAA,CAAC,GAAA,EAAA,EAAI,EAAA,EAAI,CAAA,EACP,QAAA,kBAAA,GAAA,CAAC,4BAAA,EAAA,EAA6B,QAAA,EAAU,EAAA,CAAG,QAAA,EAAU,CAAA,EACvD,CAAA,EACF;AAAA,KAAA,EACF;AAAA,GAAA,EAAA,EA3DW,CAAA,EAAG,IAAI,CAAA,OAAA,CA6DtB,CAAA;AAEJ,CAAA;AAEO,MAAM,0BAA0B,CAAC;AAAA,EACtC,OAAA;AAAA,EACA,SAAA;AAAA,EACA,CAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAAA,KAMM;AACJ,EAAA,IAAI,YAAA,IAAgB,YAAA,CAAa,IAAA,KAAS,UAAA,EAAY;AACpD,IAAA,uBAAO,GAAA,CAAA,QAAA,EAAA,EAAE,CAAA;AAAA,EACX;AACA,EAAA,IAAI,CAAC,MAAA,CAAO,IAAA,CAAK,SAAS,EAAE,MAAA,EAAQ;AAClC,IAAA,2BACG,KAAA,EAAA,EAAI,aAAA,EAAY,cAAA,EACd,QAAA,EAAA,CAAA,CAAE,qDAAqD,CAAA,EAC1D,CAAA;AAAA,EAEJ;AACA,EAAA,uBACE,GAAA,CAAC,KAAA,EAAA,EAAI,aAAA,EAAY,WAAA,EACd,QAAA,EAAA,MAAA,CAAO,OAAA;AAAA,IACN,YAAA,GACI,EAAE,CAAC,YAAA,CAAa,IAAI,GAAG,SAAA,CAAU,YAAA,CAAa,IAAI,CAAA,EAAE,GACpD;AAAA,IACJ,GAAA,CAAI,CAAC,CAAC,IAAA,EAAM,EAAE,CAAA,KAAM;AACpB,IAAA,MAAM,WAAW,cAAA,CAAe,EAAE,IAAA,EAAM,UAAA,EAAY,MAAM,CAAA;AAC1D,IAAA,uBACE,IAAA,CAAC,GAAA,EAAA,EAAI,EAAA,EAAI,CAAA,EAAc,eAAa,IAAA,EAClC,QAAA,EAAA;AAAA,sBAAA,GAAA;AAAA,QAAC,UAAA;AAAA,QAAA;AAAA,UACC,EAAA,EAAI,QAAA;AAAA,UACJ,OAAA,EAAQ,IAAA;AAAA,UACR,SAAA,EAAU,IAAA;AAAA,UACV,WAAW,OAAA,CAAQ,IAAA;AAAA,UAElB,QAAA,EAAA;AAAA;AAAA,OACH;AAAA,MACC,aAAa,QAAA,EAAU;AAAA,QACtB,IAAI,CAAA,EAAG,QAAA,CAAS,KAAA,CAAM,EAAE,IAAI,QAAQ,CAAA;AAAA,OACrC,CAAA;AAAA,sBACD,GAAA,CAAC,yBAAuB,GAAG,EAAE,SAAS,IAAA,EAAM,EAAA,EAAI,GAAE,EAAG;AAAA,KAAA,EAAA,EAZtC,IAajB,CAAA;AAAA,EAEJ,CAAC,CAAA,EACH,CAAA;AAEJ;AAEO,MAAM,uBAAuB,CAAC;AAAA,EACnC,OAAA;AAAA,EACA,CAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAAA,KAMM;AACJ,EAAA,IAAI,YAAA,IAAgB,YAAA,CAAa,IAAA,KAAS,OAAA,EAAS;AACjD,IAAA,uBAAO,GAAA,CAAA,QAAA,EAAA,EAAE,CAAA;AAAA,EACX;AACA,EAAA,IAAI,CAAC,MAAA,CAAO,IAAA,CAAK,MAAM,EAAE,MAAA,EAAQ;AAC/B,IAAA,2BACG,KAAA,EAAA,EAAI,aAAA,EAAY,WAAA,EACd,QAAA,EAAA,CAAA,CAAE,kDAAkD,CAAA,EACvD,CAAA;AAAA,EAEJ;AACA,EAAA,uBACE,GAAA,CAAC,KAAA,EAAA,EAAI,aAAA,EAAY,QAAA,EACd,QAAA,EAAA,MAAA,CAAO,OAAA;AAAA,IACN,YAAA,GACI,EAAE,CAAC,YAAA,CAAa,IAAI,GAAG,MAAA,CAAO,YAAA,CAAa,IAAI,CAAA,EAAE,GACjD;AAAA,IACJ,GAAA,CAAI,CAAC,CAAC,IAAA,EAAM,EAAE,CAAA,KAAM;AACpB,IAAA,MAAM,WAAW,cAAA,CAAe,EAAE,IAAA,EAAM,OAAA,EAAS,MAAM,CAAA;AACvD,IAAA,uBACE,IAAA,CAAC,GAAA,EAAA,EAAI,EAAA,EAAI,CAAA,EAAc,eAAa,IAAA,EAClC,QAAA,EAAA;AAAA,sBAAA,GAAA;AAAA,QAAC,UAAA;AAAA,QAAA;AAAA,UACC,EAAA,EAAI,QAAA;AAAA,UACJ,OAAA,EAAQ,IAAA;AAAA,UACR,SAAA,EAAU,IAAA;AAAA,UACV,WAAW,OAAA,CAAQ,IAAA;AAAA,UAElB,QAAA,EAAA;AAAA;AAAA,OACH;AAAA,MACC,aAAa,QAAA,EAAU;AAAA,QACtB,IAAI,CAAA,EAAG,QAAA,CAAS,KAAA,CAAM,EAAE,IAAI,QAAQ,CAAA;AAAA,OACrC,CAAA;AAAA,MACA,GAAG,WAAA,oBAAe,GAAA,CAAC,eAAA,EAAA,EAAgB,OAAA,EAAS,GAAG,WAAA,EAAa,CAAA;AAAA,0BAC5D,GAAA,EAAA,EAAI,OAAA,EAAS,GAAG,aAAA,EAAa,CAAA,EAAG,IAAI,CAAA,MAAA,CAAA,EACnC,QAAA,kBAAA,GAAA;AAAA,QAAC,WAAA;AAAA,QAAA;AAAA,UACC,MAAM,IAAA,CAAK,SAAA,CAAU,EAAA,CAAG,KAAA,EAAO,MAAM,CAAC,CAAA;AAAA,UACtC,kBAAA,EAAkB,IAAA;AAAA,UAClB,QAAA,EAAS;AAAA;AAAA,OACX,EACF;AAAA,KAAA,EAAA,EAnBe,IAoBjB,CAAA;AAAA,EAEJ,CAAC,CAAA,EACH,CAAA;AAEJ;;;;"}