import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { useRouteRef, useApi } from '@backstage/core-plugin-api';
import { editRouteRef, scaffolderListTaskRouteRef, rootRouteRef, actionsRouteRef, templatingExtensionsRouteRef } from '../../routes.esm.js';
import { makeStyles } from '@material-ui/core/styles';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../translation.esm.js';
import { Page, Header, Content, Progress, ErrorPanel, EmptyState, Link } from '@backstage/core-components';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import { ScaffolderPageContextMenu } from '@backstage/plugin-scaffolder-react/alpha';
import Box from '@material-ui/core/Box';
import InputAdornment from '@material-ui/core/InputAdornment';
import ListItemText from '@material-ui/core/ListItemText';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import TextField from '@material-ui/core/TextField';
import AllInclusiveIcon from '@material-ui/icons/AllInclusive';
import FilterListIcon from '@material-ui/icons/FilterList';
import FunctionsIcon from '@material-ui/icons/Functions';
import LinkIcon from '@material-ui/icons/Link';
import SearchIcon from '@material-ui/icons/Search';
import Autocomplete from '@material-ui/lab/Autocomplete';
import { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import useAsync from 'react-use/esm/useAsync';
import { parseFragment, listTemplatingExtensions } from './navigation.esm.js';
import { TemplateFilters } from './TemplateFilters.esm.js';
import { TemplateGlobalFunctions, TemplateGlobalValues } from './TemplateGlobals.esm.js';

const useStyles = makeStyles((theme) => ({
  code: {
    fontFamily: "Menlo, monospace",
    padding: theme.spacing(1),
    backgroundColor: theme.palette.type === "dark" ? theme.palette.grey[700] : theme.palette.grey[300],
    display: "inline-block",
    borderRadius: 5,
    border: `1px solid ${theme.palette.grey[500]}`,
    position: "relative"
  },
  codeRequired: {
    "&::after": {
      position: "absolute",
      content: '"*"',
      top: 0,
      right: theme.spacing(0.5),
      fontWeight: "bolder",
      color: theme.palette.error.light
    }
  },
  argRequired: {
    position: "relative",
    "& > *": {
      display: "inline",
      position: "relative",
      "&::after": {
        position: "absolute",
        content: '"*"',
        top: 0,
        right: theme.spacing(-1),
        fontWeight: "bolder",
        color: theme.palette.error.light
      }
    }
  },
  link: {
    paddingLeft: theme.spacing(1),
    cursor: "pointer"
  },
  tabs: {
    display: "block",
    minHeight: "initial",
    overflow: "initial"
  }
}));
const TemplatingExtensionsPageContent = ({
  linkLocal
}) => {
  const api = useApi(scaffolderApiRef);
  const classes = useStyles();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const { loading, value, error } = useAsync(async () => {
    if (api.listTemplatingExtensions) {
      return api.listTemplatingExtensions();
    }
    console.warn(
      "listTemplatingExtensions is not implemented in the scaffolderApi; please make sure to implement this method."
    );
    return Promise.resolve({
      filters: {},
      globals: { functions: {}, values: {} }
    });
  }, [api]);
  const [tab, selectTab] = useState("filter");
  const [selectedItem, setSelectedItem] = useState(null);
  const [input, setInput] = useState("");
  const handleTab = (_event, kind) => {
    if (selectedItem?.kind !== kind) {
      setSelectedItem(null);
      setInput("");
    }
    selectTab(kind);
  };
  const selectItem = (item) => {
    setSelectedItem(item);
    if (item) {
      selectTab(item.kind);
    }
  };
  useEffect(() => {
    if (value && window.location.hash) {
      try {
        selectTab(parseFragment(window.location.hash.substring(1)).kind);
        document.querySelector(window.location.hash)?.scrollIntoView();
      } catch (e) {
      }
    }
  }, [value]);
  const extensionKinds = useMemo(
    () => ({
      filter: {
        icon: /* @__PURE__ */ jsx(FilterListIcon, {}),
        label: t("templatingExtensions.content.filters.title")
      },
      function: {
        icon: /* @__PURE__ */ jsx(FunctionsIcon, {}),
        label: t("templatingExtensions.content.functions.title")
      },
      value: {
        icon: /* @__PURE__ */ jsx(AllInclusiveIcon, {}),
        label: t("templatingExtensions.content.values.title")
      }
    }),
    [t]
  );
  const templatingExtensionsLink = useRouteRef(templatingExtensionsRouteRef);
  if (loading) {
    return /* @__PURE__ */ jsx(Progress, {});
  }
  if (error || !value) {
    return /* @__PURE__ */ jsxs("div", { "data-testid": "empty", children: [
      error && /* @__PURE__ */ jsx(ErrorPanel, { error }),
      /* @__PURE__ */ jsx(
        EmptyState,
        {
          missing: "info",
          title: t("templatingExtensions.content.emptyState.title"),
          description: t("templatingExtensions.content.emptyState.description")
        }
      )
    ] });
  }
  const { filters, globals } = value;
  const baseLink = /* @__PURE__ */ jsx(
    Link,
    {
      className: classes.link,
      to: templatingExtensionsLink(),
      ...linkLocal ? {} : { target: "_blank", rel: "noopener noreferrer" },
      children: /* @__PURE__ */ jsx(LinkIcon, {})
    }
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      Autocomplete,
      {
        renderInput: (params) => /* @__PURE__ */ jsx(
          TextField,
          {
            ...params,
            "aria-label": t(
              "templatingExtensions.content.searchFieldPlaceholder"
            ),
            placeholder: t(
              "templatingExtensions.content.searchFieldPlaceholder"
            ),
            variant: "outlined",
            InputProps: {
              ...params.InputProps,
              startAdornment: /* @__PURE__ */ jsx(InputAdornment, { position: "start", children: /* @__PURE__ */ jsx(SearchIcon, {}) })
            }
          }
        ),
        getOptionLabel: (option) => option.name,
        getOptionSelected: (lhs, rhs) => lhs === rhs,
        options: listTemplatingExtensions(value),
        groupBy: (option) => option.kind,
        renderGroup: (params) => /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsxs(Box, { display: "flex", alignItems: "center", children: [
            extensionKinds[params.group].icon,
            /* @__PURE__ */ jsx(Box, { sx: { ml: 1 }, children: extensionKinds[params.group].label })
          ] }),
          /* @__PURE__ */ jsx("ul", { children: params.children })
        ] }),
        renderOption: (option) => /* @__PURE__ */ jsx(ListItemText, { primary: option.name }),
        onChange: (_event, option) => {
          selectItem(option);
        },
        inputValue: input,
        onInputChange: (_event, s) => setInput(s),
        loading,
        fullWidth: true,
        clearOnEscape: true
      }
    ),
    /* @__PURE__ */ jsx(Tabs, { value: tab, onChange: handleTab, centered: true, className: classes.tabs, children: Object.entries(extensionKinds).map(([k, v]) => /* @__PURE__ */ jsx(Tab, { value: k, ...v }, k)) }),
    tab === "filter" && /* @__PURE__ */ jsx(TemplateFilters, { ...{ baseLink, t, classes, filters, selectedItem } }),
    tab === "function" && /* @__PURE__ */ jsx(
      TemplateGlobalFunctions,
      {
        functions: globals.functions,
        ...{ baseLink, t, classes, selectedItem }
      }
    ),
    tab === "value" && /* @__PURE__ */ jsx(
      TemplateGlobalValues,
      {
        values: globals.values,
        ...{ baseLink, t, classes, selectedItem }
      }
    )
  ] });
};
const TemplatingExtensionsPage = () => {
  const navigate = useNavigate();
  const editorLink = useRouteRef(editRouteRef);
  const tasksLink = useRouteRef(scaffolderListTaskRouteRef);
  const createLink = useRouteRef(rootRouteRef);
  const actionsLink = useRouteRef(actionsRouteRef);
  const scaffolderPageContextMenuProps = {
    onEditorClicked: () => navigate(editorLink()),
    onActionsClicked: () => navigate(actionsLink()),
    onTasksClicked: () => navigate(tasksLink()),
    onCreateClicked: () => navigate(createLink())
  };
  const { t } = useTranslationRef(scaffolderTranslationRef);
  return /* @__PURE__ */ jsxs(Page, { themeId: "home", children: [
    /* @__PURE__ */ jsx(
      Header,
      {
        pageTitleOverride: t("templatingExtensions.pageTitle"),
        title: t("templatingExtensions.title"),
        subtitle: t("templatingExtensions.subtitle"),
        children: /* @__PURE__ */ jsx(ScaffolderPageContextMenu, { ...scaffolderPageContextMenuProps })
      }
    ),
    /* @__PURE__ */ jsx(Content, { children: /* @__PURE__ */ jsx(TemplatingExtensionsPageContent, { linkLocal: true }) })
  ] });
};

export { TemplatingExtensionsPage, TemplatingExtensionsPageContent };
//# sourceMappingURL=TemplatingExtensionsPage.esm.js.map
