import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { MarkdownContent } from '@backstage/core-components';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import classNames from 'classnames';
import { cloneElement, useState, Fragment as Fragment$1 } from 'react';
import { RenderSchema } from '../RenderSchema/RenderSchema.esm.js';
import { ScaffolderUsageExamplesTable } from '../ScaffolderUsageExamplesTable/ScaffolderUsageExamplesTable.esm.js';
import { inspectFunctionArgSchema } from './functionArgs.esm.js';
import { renderFragment } from './navigation.esm.js';

const FilterDetailContent = ({
  t,
  classes,
  name,
  filter
}) => {
  const expanded = useState({});
  if (!Object.keys(filter).length) {
    return /* @__PURE__ */ jsx(Typography, { style: { fontStyle: "italic" }, children: t("templatingExtensions.content.filters.metadataAbsent") });
  }
  const schema = filter.schema;
  const partialSchemaRenderContext = {
    classes,
    expanded,
    headings: [/* @__PURE__ */ jsx(Typography, { variant: "h6", component: "h4" })]
  };
  return /* @__PURE__ */ jsxs(Fragment$1, { children: [
    filter.description && /* @__PURE__ */ jsx(MarkdownContent, { content: filter.description }),
    /* @__PURE__ */ jsxs(Box, { pb: 2, children: [
      /* @__PURE__ */ jsx(Typography, { variant: "h5", component: "h3", children: t("templatingExtensions.content.filters.schema.input") }),
      /* @__PURE__ */ jsx(
        RenderSchema,
        {
          strategy: "root",
          context: {
            parentId: `${name}.input`,
            ...partialSchemaRenderContext
          },
          schema: schema?.input ?? {}
        }
      )
    ] }),
    schema?.arguments?.length && /* @__PURE__ */ jsxs(Box, { pb: 2, children: [
      /* @__PURE__ */ jsx(Typography, { variant: "h5", component: "h3", children: t("templatingExtensions.content.filters.schema.arguments") }),
      schema.arguments.map((arg, i) => {
        const [argSchema, required] = inspectFunctionArgSchema(arg);
        return /* @__PURE__ */ jsxs(Fragment$1, { children: [
          /* @__PURE__ */ jsx(
            "div",
            {
              className: classNames({ [classes.argRequired]: required }),
              children: /* @__PURE__ */ jsx(Typography, { variant: "h6", component: "h4", children: `[${i}]` })
            }
          ),
          /* @__PURE__ */ jsx(
            RenderSchema,
            {
              strategy: "root",
              context: {
                parentId: `${name}.arg${i}`,
                ...partialSchemaRenderContext,
                headings: [/* @__PURE__ */ jsx(Typography, { variant: "h6", component: "h5" })]
              },
              schema: argSchema
            }
          )
        ] }, i);
      })
    ] }, `${name}.args`),
    /* @__PURE__ */ jsxs(Box, { pb: 2, children: [
      /* @__PURE__ */ jsx(Typography, { variant: "h5", component: "h3", children: t("templatingExtensions.content.filters.schema.output") }),
      /* @__PURE__ */ jsx(
        RenderSchema,
        {
          strategy: "root",
          context: {
            parentId: `${name}.output`,
            ...partialSchemaRenderContext
          },
          schema: schema?.output ?? {}
        }
      )
    ] }),
    filter.examples && /* @__PURE__ */ jsxs(Accordion, { children: [
      /* @__PURE__ */ jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}), children: /* @__PURE__ */ jsx(Typography, { variant: "h5", component: "h3", children: t("templatingExtensions.content.filters.examples") }) }),
      /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsx(Box, { pb: 2, children: /* @__PURE__ */ jsx(ScaffolderUsageExamplesTable, { examples: filter.examples }) }) })
    ] })
  ] }, `${name}.detail`);
};
const TemplateFilters = ({
  t,
  classes,
  filters,
  baseLink,
  selectedItem
}) => {
  if (selectedItem && selectedItem.kind !== "filter") {
    return /* @__PURE__ */ jsx(Fragment, {});
  }
  if (!Object.keys(filters).length) {
    return /* @__PURE__ */ jsx("div", { "data-testid": "no-filters", children: t("templatingExtensions.content.filters.notAvailable") });
  }
  return /* @__PURE__ */ jsx("div", { "data-testid": "filters", children: Object.entries(
    selectedItem ? { [selectedItem.name]: filters[selectedItem.name] } : filters
  ).map(([name, filter]) => {
    const fragment = renderFragment({ kind: "filter", name });
    return /* @__PURE__ */ jsxs(Box, { pb: 4, "data-testid": name, children: [
      /* @__PURE__ */ jsx(
        Typography,
        {
          id: fragment,
          variant: "h4",
          component: "h2",
          className: classes.code,
          children: name
        }
      ),
      cloneElement(baseLink, {
        to: `${baseLink.props.to}#${fragment}`
      }),
      /* @__PURE__ */ jsx(FilterDetailContent, { ...{ t, classes, name, filter } })
    ] }, name);
  }) });
};

export { TemplateFilters };
//# sourceMappingURL=TemplateFilters.esm.js.map
