{"version":3,"file":"RenderSchema.esm.js","sources":["../../../src/components/RenderSchema/RenderSchema.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { MarkdownContent } from '@backstage/core-components';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport WrapText from '@material-ui/icons/WrapText';\nimport classNames from 'classnames';\nimport {\n  JSONSchema7,\n  JSONSchema7Definition,\n  JSONSchema7Type,\n} from 'json-schema';\nimport { FC, JSX, cloneElement, Fragment, ReactElement } from 'react';\nimport { scaffolderTranslationRef } from '../../translation';\nimport { SchemaRenderContext, SchemaRenderStrategy } from './types';\nimport { TranslationMessages } from '../TemplatingExtensionsPage/types';\n\nconst compositeSchemaProperties = ['allOf', 'anyOf', 'not', 'oneOf'] as const;\n\ntype subSchemasType = {\n  [K in (typeof compositeSchemaProperties)[number]]?: JSONSchema7Definition[];\n};\n\nconst getTypes = (schema: JSONSchema7) => {\n  if (!schema.type) {\n    if (\n      Object.getOwnPropertyNames(schema).some(p =>\n        compositeSchemaProperties.includes(p as any),\n      )\n    ) {\n      return undefined;\n    }\n    return ['unknown'];\n  }\n  if (schema.type !== 'array') {\n    return [schema.type].flat();\n  }\n  return [\n    `${schema.type}(${\n      (schema.items as JSONSchema7 | undefined)?.type ?? 'unknown'\n    })`,\n  ];\n};\n\nconst getSubschemas = (schema: JSONSchema7Definition): subSchemasType => {\n  if (typeof schema === 'boolean') {\n    return {};\n  }\n  const base: Omit<JSONSchema7, keyof subSchemasType> = {};\n\n  const subschemas: subSchemasType = {};\n\n  for (const [key, value] of Object.entries(schema) as [\n    keyof JSONSchema7,\n    any,\n  ][]) {\n    if (compositeSchemaProperties.includes(key as keyof subSchemasType)) {\n      let v;\n      if (Array.isArray(value)) {\n        if (!value.length) {\n          continue;\n        }\n        v = value;\n      } else if (value) {\n        v = [value];\n      } else {\n        continue;\n      }\n      subschemas[key as keyof subSchemasType] = v as any;\n    } else {\n      base[key as Exclude<keyof JSONSchema7, keyof subSchemasType>] = value;\n    }\n  }\n  if (!(base?.type === 'object' || 'properties' in base)) {\n    return subschemas;\n  }\n  return Object.fromEntries(\n    Object.entries(subschemas).map(([key, sub]) => {\n      const mergedSubschema = sub.map(alt => {\n        if (typeof alt !== 'boolean' && alt.required) {\n          const properties: JSONSchema7['properties'] = {};\n          if (schema.properties) {\n            for (const k of alt.required) {\n              if (k in schema.properties) {\n                properties[k] = schema.properties[k];\n              }\n            }\n          }\n          Object.assign(properties, alt.properties);\n          return {\n            ...base,\n            ...alt,\n            properties,\n          };\n        }\n        return alt;\n      });\n      return [key, mergedSubschema];\n    }),\n  );\n};\n\nconst useColumnStyles = makeStyles({\n  description: {\n    width: '40%',\n    whiteSpace: 'normal',\n    wordWrap: 'break-word',\n    '&.MuiTableCell-root': {\n      whiteSpace: 'normal',\n    },\n  },\n  standard: {\n    whiteSpace: 'normal',\n  },\n});\n\ntype SchemaRenderElement = {\n  schema: JSONSchema7Definition;\n  key?: string;\n  required?: boolean;\n};\n\ntype RenderColumn = (\n  element: SchemaRenderElement,\n  context: SchemaRenderContext,\n) => JSX.Element;\n\ntype Column = {\n  key: string;\n  title: (t: TranslationMessages<typeof scaffolderTranslationRef>) => string;\n  render: RenderColumn;\n  className?: keyof ReturnType<typeof useColumnStyles>;\n};\n\nconst generateId = (\n  element: SchemaRenderElement,\n  context: SchemaRenderContext,\n) => {\n  return element.key ? `${context.parentId}.${element.key}` : context.parentId;\n};\n\nconst nameColumn = {\n  key: 'name',\n  title: t => t('renderSchema.tableCell.name'),\n  render: (element: SchemaRenderElement, context: SchemaRenderContext) => {\n    return (\n      <div\n        className={classNames(context.classes.code, {\n          [context.classes.codeRequired]: element.required,\n        })}\n      >\n        {element.key}\n      </div>\n    );\n  },\n} as Column;\n\nconst titleColumn = {\n  key: 'title',\n  title: t => t('renderSchema.tableCell.title'),\n  render: (element: SchemaRenderElement) => (\n    <MarkdownContent content={(element.schema as JSONSchema7).title ?? ''} />\n  ),\n} as Column;\n\nconst descriptionColumn = {\n  key: 'description',\n  title: t => t('renderSchema.tableCell.description'),\n  render: (element: SchemaRenderElement) => (\n    <MarkdownContent\n      content={(element.schema as JSONSchema7).description ?? ''}\n    />\n  ),\n  className: 'description',\n} as Column;\n\nconst enumFrom = (schema: JSONSchema7) => {\n  if (schema.type === 'array') {\n    if (schema.items && typeof schema.items !== 'boolean') {\n      if (Array.isArray(schema.items)) {\n        const itemsWithEnum = schema.items\n          .filter(e => typeof e === 'object' && 'enum' in e)\n          .map(e => e as JSONSchema7);\n        if (itemsWithEnum.length) {\n          return itemsWithEnum[0].enum;\n        }\n      } else {\n        return schema.items?.enum;\n      }\n    }\n    return undefined;\n  }\n  return schema.enum;\n};\n\nconst inspectSchema = (\n  schema: JSONSchema7Definition,\n): {\n  canSubschema: boolean;\n  hasEnum: boolean;\n} => {\n  if (typeof schema === 'boolean') {\n    return { canSubschema: false, hasEnum: false };\n  }\n  return {\n    canSubschema:\n      Object.getOwnPropertyNames(schema).some(p =>\n        compositeSchemaProperties.includes(p as any),\n      ) || getTypes(schema)!.some(t => t.includes('object')),\n    hasEnum: !!enumFrom(schema),\n  };\n};\n\nconst typeColumn = {\n  key: 'type',\n  title: t => t('renderSchema.tableCell.type'),\n  render: (element: SchemaRenderElement, context: SchemaRenderContext) => {\n    if (typeof element.schema === 'boolean') {\n      return <Typography>{element.schema ? 'any' : 'none'}</Typography>;\n    }\n    const types = getTypes(element.schema);\n    const [isExpanded, setIsExpanded] = context.expanded;\n    const id = generateId(element, context);\n    const info = inspectSchema(element.schema);\n    return (\n      <>\n        {types?.map((type, index) =>\n          info.canSubschema || (info.hasEnum && index === 0) ? (\n            <Chip\n              data-testid={`expand_${id}`}\n              label={type}\n              key={type}\n              icon={isExpanded[id] ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              variant=\"outlined\"\n              onClick={() =>\n                setIsExpanded(prevState => {\n                  return {\n                    ...prevState,\n                    [id]: !!!prevState[id],\n                  };\n                })\n              }\n            />\n          ) : (\n            <Chip label={type} key={type} variant=\"outlined\" />\n          ),\n        )}\n      </>\n    );\n  },\n} as Column;\n\nexport const RenderEnum: FC<{\n  e: JSONSchema7Type[];\n  classes: ClassNameMap;\n  [key: string]: any;\n}> = ({\n  e,\n  classes,\n  ...props\n}: {\n  e: JSONSchema7Type[];\n  classes: ClassNameMap;\n}) => {\n  return (\n    <List {...props}>\n      {e.map((v, i) => {\n        let inner: JSX.Element = (\n          <Typography\n            data-testid={`enum_el${i}`}\n            className={classNames(classes.code)}\n          >\n            {JSON.stringify(v)}\n          </Typography>\n        );\n        if (v !== null && ['object', 'array'].includes(typeof v)) {\n          inner = (\n            <>\n              {inner}\n              <Tooltip\n                title={\n                  <Typography\n                    data-testid={`pretty_${i}`}\n                    className={classNames(classes.code)}\n                    style={{ whiteSpace: 'pre-wrap' }}\n                  >\n                    {JSON.stringify(v, undefined, 2)}\n                  </Typography>\n                }\n              >\n                <IconButton data-testid={`wrap-text_${i}`}>\n                  <WrapText />\n                </IconButton>\n              </Tooltip>\n            </>\n          );\n        }\n        return <ListItem key={i}>{inner}</ListItem>;\n      })}\n    </List>\n  );\n};\n\nconst useTableStyles = makeStyles({\n  schema: {\n    width: '100%',\n    overflowX: 'hidden',\n    '& table': {\n      width: '100%',\n      tableLayout: 'fixed',\n    },\n  },\n});\n\nexport const RenderSchema = ({\n  strategy,\n  context,\n  schema,\n}: {\n  strategy: SchemaRenderStrategy;\n  context: SchemaRenderContext;\n  schema?: JSONSchema7Definition;\n}) => {\n  const { t } = useTranslationRef(scaffolderTranslationRef);\n  const tableStyles = useTableStyles();\n  const columnStyles = useColumnStyles();\n  const result = (() => {\n    if (typeof schema === 'object') {\n      const subschemas = getSubschemas(schema);\n      let columns: Column[] | undefined;\n      let elements: SchemaRenderElement[] | undefined;\n      if (strategy === 'root') {\n        if ('type' in schema || !Object.keys(subschemas).length) {\n          elements = [{ schema }];\n          columns = [typeColumn];\n          if (schema.description) {\n            columns.unshift(descriptionColumn);\n          }\n          if (schema.title) {\n            columns.unshift(titleColumn);\n          }\n        }\n      } else if (schema.properties) {\n        columns = [nameColumn, titleColumn, descriptionColumn, typeColumn];\n        elements = Object.entries(schema.properties!).map(([key, v]) => ({\n          schema: v,\n          key,\n          required: schema.required?.includes(key),\n        }));\n      } else if (!Object.keys(subschemas).length) {\n        return undefined;\n      }\n      const [isExpanded] = context.expanded;\n\n      return (\n        <>\n          {columns && elements && (\n            <TableContainer component={Paper} className={tableStyles.schema}>\n              <Table\n                data-testid={`${strategy}_${context.parentId}`}\n                size=\"small\"\n              >\n                <TableHead>\n                  <TableRow>\n                    {columns.map((col, index) => (\n                      <TableCell\n                        key={index}\n                        className={columnStyles[col.className ?? 'standard']}\n                      >\n                        {col.title(t)}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {elements.map(el => {\n                    const id = generateId(el, context);\n                    const info = inspectSchema(el.schema);\n                    const rows = [\n                      <TableRow data-testid={`${strategy}-row_${id}`}>\n                        {columns!.map(col => (\n                          <TableCell\n                            key={col.key}\n                            className={\n                              columnStyles[col.className ?? 'standard']\n                            }\n                          >\n                            {col.render(el, context)}\n                          </TableCell>\n                        ))}\n                      </TableRow>,\n                    ];\n                    if (\n                      typeof el.schema !== 'boolean' &&\n                      (info.canSubschema || info.hasEnum)\n                    ) {\n                      let details: ReactElement = (\n                        <Box data-testid={`expansion_${id}`} sx={{ margin: 1 }}>\n                          {info.canSubschema && (\n                            <RenderSchema\n                              strategy=\"properties\"\n                              context={{\n                                ...context,\n                                parentId: id,\n                                parent: context,\n                              }}\n                              schema={\n                                el.schema.type === 'array'\n                                  ? (el.schema.items as JSONSchema7 | undefined)\n                                  : el.schema\n                              }\n                            />\n                          )}\n                          {info.hasEnum && (\n                            <>\n                              {cloneElement(\n                                context.headings[0],\n                                {},\n                                'Valid values:',\n                              )}\n                              <RenderEnum\n                                data-testid={`enum_${id}`}\n                                e={enumFrom(el.schema)!}\n                                classes={context.classes}\n                              />\n                            </>\n                          )}\n                        </Box>\n                      );\n                      if (getTypes(el.schema)) {\n                        details = (\n                          <Collapse\n                            in={isExpanded[id]}\n                            timeout=\"auto\"\n                            unmountOnExit\n                          >\n                            {details}\n                          </Collapse>\n                        );\n                      }\n                      rows.push(\n                        <TableRow>\n                          <TableCell\n                            style={{ paddingBottom: 0, paddingTop: 0 }}\n                            colSpan={columns!.length}\n                          >\n                            {details}\n                          </TableCell>\n                        </TableRow>,\n                      );\n                    }\n                    return <Fragment key={id}>{rows}</Fragment>;\n                  })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n          {(Object.keys(subschemas) as Array<keyof subSchemasType>).map(sk => (\n            <Fragment key={sk}>\n              {cloneElement(context.headings[0], {}, sk)}\n              {subschemas[sk]!.map((sub, index) => (\n                <RenderSchema\n                  key={index}\n                  strategy={\n                    typeof sub !== 'boolean' && 'properties' in sub\n                      ? strategy\n                      : 'root'\n                  }\n                  {...{\n                    context: {\n                      ...context,\n                      parentId: `${context.parentId}_${sk}${index}`,\n                    },\n                    schema: sub,\n                  }}\n                />\n              ))}\n            </Fragment>\n          ))}\n        </>\n      );\n    }\n    return undefined;\n  })();\n  return result ?? <Typography>No schema defined</Typography>;\n};\n"],"names":["Fragment"],"mappings":"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"}