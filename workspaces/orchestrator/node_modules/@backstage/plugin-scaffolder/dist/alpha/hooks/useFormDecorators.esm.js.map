{"version":3,"file":"useFormDecorators.esm.js","sources":["../../../src/alpha/hooks/useFormDecorators.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { errorApiRef, useApi, useApiHolder } from '@backstage/core-plugin-api';\nimport { formDecoratorsApiRef } from '../api/ref';\nimport useAsync from 'react-use/esm/useAsync';\nimport { useCallback, useMemo } from 'react';\nimport { ScaffolderFormDecoratorContext } from '@backstage/plugin-scaffolder-react/alpha';\nimport { OpaqueFormDecorator } from '@internal/scaffolder';\nimport { TemplateParameterSchema } from '@backstage/plugin-scaffolder-react';\nimport { JsonValue } from '@backstage/types';\n\n/** @internal */\ntype BoundFieldDecorator = {\n  decorator: (ctx: ScaffolderFormDecoratorContext) => Promise<void>;\n};\n\nexport const useFormDecorators = () => {\n  const formDecoratorsApi = useApi(formDecoratorsApiRef);\n  const errorApi = useApi(errorApiRef);\n  const { value: decorators } = useAsync(\n    () => formDecoratorsApi.getFormDecorators(),\n    [],\n  );\n  const apiHolder = useApiHolder();\n\n  const boundDecorators = useMemo(() => {\n    const decoratorsMap = new Map<string, BoundFieldDecorator>();\n\n    for (const decorator of decorators ?? []) {\n      try {\n        const { decorator: decoratorFn, deps } =\n          OpaqueFormDecorator.toInternal(decorator);\n\n        const resolvedDeps = Object.entries(deps ?? {}).map(([key, value]) => {\n          const api = apiHolder.get(value);\n          if (!api) {\n            throw new Error(\n              `Failed to resolve apiRef ${value.id} for form decorator ${decorator.id} it will be disabled`,\n            );\n          }\n          return [key, api];\n        });\n\n        decoratorsMap.set(decorator.id, {\n          decorator: ctx => decoratorFn(ctx, Object.fromEntries(resolvedDeps)),\n        });\n      } catch (ex) {\n        errorApi.post(ex);\n        return undefined;\n      }\n    }\n    return decoratorsMap;\n  }, [apiHolder, decorators, errorApi]);\n\n  const run = useCallback(\n    async (opts: {\n      formState: Record<string, JsonValue>;\n      secrets: Record<string, string>;\n      manifest?: TemplateParameterSchema;\n    }) => {\n      let formState: Record<string, JsonValue> = { ...opts.formState };\n      let secrets: Record<string, string> = { ...opts.secrets };\n\n      const formDecorators = opts.manifest?.EXPERIMENTAL_formDecorators;\n      if (formDecorators) {\n        // for each of the form decorators, go and call the decorator with the context\n        await Promise.all(\n          formDecorators.map(async decorator => {\n            const formDecorator = boundDecorators?.get(decorator.id);\n            if (!formDecorator) {\n              errorApi.post(\n                new Error(`Failed to find form decorator ${decorator.id}`),\n              );\n              return;\n            }\n\n            await formDecorator.decorator({\n              setSecrets: (\n                handler: (\n                  oldState: Record<string, string>,\n                ) => Record<string, string>,\n              ) => {\n                secrets = { ...handler(secrets) };\n              },\n              setFormState: (\n                handler: (\n                  oldState: Record<string, JsonValue>,\n                ) => Record<string, JsonValue>,\n              ) => {\n                formState = { ...handler(formState) };\n              },\n              formState,\n              input: decorator.input ?? {},\n            });\n          }),\n        );\n      }\n\n      return { formState, secrets };\n    },\n    [boundDecorators, errorApi],\n  );\n\n  return useMemo(\n    () => ({\n      run,\n    }),\n    [run],\n  );\n};\n"],"names":[],"mappings":"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"}