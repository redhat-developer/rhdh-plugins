import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Divider from '@material-ui/core/Divider';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import ExpandLessIcon from '@material-ui/icons/ExpandLess';
import { usePrevious } from '@react-hookz/web';
import { useState, useEffect } from 'react';
import { useDryRun } from '../DryRunContext.esm.js';
import { DryRunResultsList } from './DryRunResultsList.esm.js';
import { DryRunResultsView } from './DryRunResultsView.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../../translation.esm.js';

const useStyles = makeStyles((theme) => ({
  header: {
    height: 48,
    minHeight: 0,
    "&.Mui-expanded": {
      height: 48,
      minHeight: 0
    }
  },
  content: {
    display: "grid",
    background: theme.palette.background.default,
    gridTemplateColumns: "180px auto 1fr",
    gridTemplateRows: "1fr",
    padding: 0,
    height: 400
  }
}));
function DryRunResults() {
  const classes = useStyles();
  const dryRun = useDryRun();
  const [expanded, setExpanded] = useState(false);
  const [hidden, setHidden] = useState(true);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const resultsLength = dryRun.results.length;
  const prevResultsLength = usePrevious(resultsLength);
  useEffect(() => {
    if (prevResultsLength === 0 && resultsLength === 1) {
      setHidden(false);
      setExpanded(true);
    } else if (prevResultsLength === 1 && resultsLength === 0) {
      setExpanded(false);
    }
  }, [prevResultsLength, resultsLength]);
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs(
    Accordion,
    {
      variant: "outlined",
      expanded,
      hidden: resultsLength === 0 && hidden,
      onChange: (_, exp) => setExpanded(exp),
      onTransitionEnd: () => resultsLength === 0 && setHidden(true),
      children: [
        /* @__PURE__ */ jsx(
          AccordionSummary,
          {
            className: classes.header,
            expandIcon: /* @__PURE__ */ jsx(ExpandLessIcon, {}),
            children: /* @__PURE__ */ jsx(Typography, { children: t("templateEditorPage.dryRunResults.title") })
          }
        ),
        /* @__PURE__ */ jsx(Divider, { orientation: "horizontal" }),
        /* @__PURE__ */ jsxs(AccordionDetails, { className: classes.content, children: [
          /* @__PURE__ */ jsx(DryRunResultsList, {}),
          /* @__PURE__ */ jsx(Divider, { orientation: "horizontal" }),
          /* @__PURE__ */ jsx(DryRunResultsView, {})
        ] })
      ]
    }
  ) });
}

export { DryRunResults };
//# sourceMappingURL=DryRunResults.esm.js.map
