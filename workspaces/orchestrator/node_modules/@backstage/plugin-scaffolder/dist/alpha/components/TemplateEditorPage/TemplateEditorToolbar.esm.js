import { jsx, jsxs } from 'react/jsx-runtime';
import { useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Tooltip from '@material-ui/core/Tooltip';
import ButtonGroup from '@material-ui/core/ButtonGroup';
import Button from '@material-ui/core/Button';
import Drawer from '@material-ui/core/Drawer';
import Dialog from '@material-ui/core/Dialog';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogContent from '@material-ui/core/DialogContent';
import DialogContentText from '@material-ui/core/DialogContentText';
import DialogActions from '@material-ui/core/DialogActions';
import ExtensionIcon from '@material-ui/icons/Extension';
import DescriptionIcon from '@material-ui/icons/Description';
import FunctionsIcon from '@material-ui/icons/Functions';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { ActionPageContent } from '../../../components/ActionsPage/ActionsPage.esm.js';
import { scaffolderTranslationRef } from '../../../translation.esm.js';
import { CustomFieldPlayground } from './CustomFieldPlayground.esm.js';
import { TemplatingExtensionsPageContent } from '../../../components/TemplatingExtensionsPage/TemplatingExtensionsPage.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    paper: {
      width: "90%",
      padding: theme.spacing(2),
      backgroundColor: theme.palette.background.default,
      [theme.breakpoints.up("sm")]: {
        width: "70%"
      },
      [theme.breakpoints.up("md")]: {
        width: "50%"
      }
    },
    appbar: {
      zIndex: 1
    },
    toolbar: {
      display: "grid",
      gridTemplateColumns: "auto 1fr",
      gridGap: theme.spacing(1),
      padding: theme.spacing(0, 1),
      backgroundColor: theme.palette.background.paper
    },
    toolbarCustomActions: {
      display: "grid",
      alignItems: "center",
      gridAutoFlow: "Column",
      gridGap: theme.spacing(1)
    },
    toolbarDefaultActions: {
      justifySelf: "end"
    }
  }),
  { name: "ScaffolderTemplateEditorToolbar" }
);
function TemplateEditorToolbar(props) {
  const { children, fieldExtensions } = props;
  const classes = useStyles();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const [showFieldsDrawer, setShowFieldsDrawer] = useState(false);
  const [showActionsDrawer, setShowActionsDrawer] = useState(false);
  const [showExtensionsDrawer, setShowExtensionsDrawer] = useState(false);
  const [showPublishModal, setShowPublishModal] = useState(false);
  return /* @__PURE__ */ jsx(AppBar, { className: classes.appbar, position: "relative", children: /* @__PURE__ */ jsxs(Toolbar, { className: classes.toolbar, children: [
    /* @__PURE__ */ jsx("div", { className: classes.toolbarCustomActions, children }),
    /* @__PURE__ */ jsxs(ButtonGroup, { className: classes.toolbarDefaultActions, variant: "text", children: [
      /* @__PURE__ */ jsx(
        Tooltip,
        {
          title: t("templateEditorToolbar.customFieldExplorerTooltip"),
          children: /* @__PURE__ */ jsx(Button, { onClick: () => setShowFieldsDrawer(true), children: /* @__PURE__ */ jsx(ExtensionIcon, {}) })
        }
      ),
      /* @__PURE__ */ jsx(
        Tooltip,
        {
          title: t(
            "templateEditorToolbar.installedActionsDocumentationTooltip"
          ),
          children: /* @__PURE__ */ jsx(Button, { onClick: () => setShowActionsDrawer(true), children: /* @__PURE__ */ jsx(DescriptionIcon, {}) })
        }
      ),
      /* @__PURE__ */ jsx(
        Tooltip,
        {
          title: t(
            "templateEditorToolbar.templatingExtensionsDocumentationTooltip"
          ),
          children: /* @__PURE__ */ jsx(Button, { onClick: () => setShowExtensionsDrawer(true), children: /* @__PURE__ */ jsx(FunctionsIcon, {}) })
        }
      ),
      /* @__PURE__ */ jsx(Button, { onClick: () => setShowPublishModal(true), children: t("templateEditorToolbar.addToCatalogButton") })
    ] }),
    /* @__PURE__ */ jsx(
      Drawer,
      {
        classes: { paper: classes.paper },
        anchor: "right",
        open: showFieldsDrawer,
        onClose: () => setShowFieldsDrawer(false),
        children: /* @__PURE__ */ jsx(CustomFieldPlayground, { fieldExtensions })
      }
    ),
    /* @__PURE__ */ jsx(
      Drawer,
      {
        classes: { paper: classes.paper },
        anchor: "right",
        open: showActionsDrawer,
        onClose: () => setShowActionsDrawer(false),
        children: /* @__PURE__ */ jsx(ActionPageContent, {})
      }
    ),
    /* @__PURE__ */ jsx(
      Drawer,
      {
        classes: { paper: classes.paper },
        anchor: "right",
        open: showExtensionsDrawer,
        onClose: () => setShowExtensionsDrawer(false),
        children: /* @__PURE__ */ jsx(TemplatingExtensionsPageContent, {})
      }
    ),
    /* @__PURE__ */ jsxs(
      Dialog,
      {
        onClose: () => setShowPublishModal(false),
        open: showPublishModal,
        "aria-labelledby": "publish-dialog-title",
        "aria-describedby": "publish-dialog-description",
        children: [
          /* @__PURE__ */ jsx(DialogTitle, { id: "publish-dialog-title", children: t("templateEditorToolbar.addToCatalogDialogTitle") }),
          /* @__PURE__ */ jsx(DialogContent, { dividers: true, children: /* @__PURE__ */ jsxs(DialogContentText, { id: "publish-dialog-slide-description", children: [
            t(
              "templateEditorToolbar.addToCatalogDialogContent.stepsIntroduction"
            ),
            /* @__PURE__ */ jsx("ul", { children: t(
              "templateEditorToolbar.addToCatalogDialogContent.stepsListItems"
            ).split("\n").map((step, index) => /* @__PURE__ */ jsx("li", { children: step }, index)) })
          ] }) }),
          /* @__PURE__ */ jsx(DialogActions, { children: /* @__PURE__ */ jsx(
            Button,
            {
              color: "primary",
              href: t(
                "templateEditorToolbar.addToCatalogDialogActions.documentationUrl"
              ),
              target: "_blank",
              children: t(
                "templateEditorToolbar.addToCatalogDialogActions.documentationButton"
              )
            }
          ) })
        ]
      }
    )
  ] }) });
}

export { TemplateEditorToolbar };
//# sourceMappingURL=TemplateEditorToolbar.esm.js.map
