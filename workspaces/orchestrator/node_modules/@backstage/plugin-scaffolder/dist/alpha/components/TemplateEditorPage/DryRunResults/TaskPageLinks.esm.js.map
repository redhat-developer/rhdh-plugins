{"version":3,"file":"TaskPageLinks.esm.js","sources":["../../../../../src/alpha/components/TemplateEditorPage/DryRunResults/TaskPageLinks.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { parseEntityRef } from '@backstage/catalog-model';\nimport { entityRouteRef } from '@backstage/plugin-catalog-react';\nimport Box from '@material-ui/core/Box';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport { ScaffolderTaskOutput } from '@backstage/plugin-scaffolder-react';\nimport { IconLink } from './IconLink';\nimport { IconComponent, useApp, useRouteRef } from '@backstage/core-plugin-api';\n\ntype TaskPageLinksProps = {\n  output: ScaffolderTaskOutput;\n};\n\nexport const TaskPageLinks = ({ output }: TaskPageLinksProps) => {\n  const { links = [] } = output;\n  const app = useApp();\n  const entityRoute = useRouteRef(entityRouteRef);\n\n  const iconResolver = (key?: string): IconComponent =>\n    key ? app.getSystemIcon(key) ?? LanguageIcon : LanguageIcon;\n\n  return (\n    <Box px={3} pb={3}>\n      {links\n        .filter(({ url, entityRef }) => url || entityRef)\n        .map(({ url, entityRef, title, icon }) => {\n          if (entityRef) {\n            const entityName = parseEntityRef(entityRef, {\n              defaultKind: '<unknown>',\n              defaultNamespace: '<unknown>',\n            });\n            const target = entityRoute(entityName);\n            return { title, icon, url: target };\n          }\n          return { title, icon, url: url! };\n        })\n        .map(({ url, title, icon }, i) => (\n          <IconLink\n            key={`output-link-${i}`}\n            href={url}\n            text={title ?? url}\n            Icon={iconResolver(icon)}\n            target=\"_blank\"\n          />\n        ))}\n    </Box>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;AA4BO,MAAM,aAAA,GAAgB,CAAC,EAAE,MAAA,EAAO,KAA0B;AAC/D,EAAA,MAAM,EAAE,KAAA,GAAQ,EAAC,EAAE,GAAI,MAAA;AACvB,EAAA,MAAM,MAAM,MAAA,EAAO;AACnB,EAAA,MAAM,WAAA,GAAc,YAAY,cAAc,CAAA;AAE9C,EAAA,MAAM,YAAA,GAAe,CAAC,GAAA,KACpB,GAAA,GAAM,IAAI,aAAA,CAAc,GAAG,KAAK,YAAA,GAAe,YAAA;AAEjD,EAAA,uBACE,GAAA,CAAC,OAAI,EAAA,EAAI,CAAA,EAAG,IAAI,CAAA,EACb,QAAA,EAAA,KAAA,CACE,MAAA,CAAO,CAAC,EAAE,GAAA,EAAK,WAAU,KAAM,GAAA,IAAO,SAAS,CAAA,CAC/C,GAAA,CAAI,CAAC,EAAE,GAAA,EAAK,SAAA,EAAW,KAAA,EAAO,IAAA,EAAK,KAAM;AACxC,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,MAAM,UAAA,GAAa,eAAe,SAAA,EAAW;AAAA,QAC3C,WAAA,EAAa,WAAA;AAAA,QACb,gBAAA,EAAkB;AAAA,OACnB,CAAA;AACD,MAAA,MAAM,MAAA,GAAS,YAAY,UAAU,CAAA;AACrC,MAAA,OAAO,EAAE,KAAA,EAAO,IAAA,EAAM,GAAA,EAAK,MAAA,EAAO;AAAA,IACpC;AACA,IAAA,OAAO,EAAE,KAAA,EAAO,IAAA,EAAM,GAAA,EAAU;AAAA,EAClC,CAAC,EACA,GAAA,CAAI,CAAC,EAAE,GAAA,EAAK,KAAA,EAAO,IAAA,EAAK,EAAG,CAAA,qBAC1B,GAAA;AAAA,IAAC,QAAA;AAAA,IAAA;AAAA,MAEC,IAAA,EAAM,GAAA;AAAA,MACN,MAAM,KAAA,IAAS,GAAA;AAAA,MACf,IAAA,EAAM,aAAa,IAAI,CAAA;AAAA,MACvB,MAAA,EAAO;AAAA,KAAA;AAAA,IAJF,eAAe,CAAC,CAAA;AAAA,GAMxB,CAAA,EACL,CAAA;AAEJ;;;;"}