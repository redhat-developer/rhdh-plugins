{"version":3,"file":"DirectoryEditorContext.esm.js","sources":["../../../../src/alpha/components/TemplateEditorPage/DirectoryEditorContext.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorPanel } from '@backstage/core-components';\nimport { useAsync, useRerender } from '@react-hookz/web';\nimport { createContext, ReactNode, useContext, useEffect } from 'react';\nimport {\n  TemplateDirectoryAccess,\n  TemplateFileAccess,\n} from '../../../lib/filesystem';\n\nconst MAX_SIZE = 1024 * 1024;\nconst MAX_SIZE_MESSAGE = 'This file is too large to be displayed';\n\ninterface DirectoryEditorFile {\n  /** The path of the file relative to the root directory */\n  path: string;\n  /** The staged content of the file */\n  content: string;\n  /** Whether the staged content matches what is on disk */\n  dirty: boolean;\n\n  /** Update the staged content of the file without saving */\n  updateContent(content: string): void;\n  /** Save the staged content of the file to disk */\n  save(): Promise<void>;\n  /** Reload the staged content of the file from disk */\n  reload(): Promise<void>;\n}\n\ninterface DirectoryEditor {\n  /** A list of all files in the edited directory */\n  files: Array<DirectoryEditorFile>;\n\n  /** The currently selected file */\n  selectedFile: DirectoryEditorFile | undefined;\n  /** Switch the selected file */\n  setSelectedFile(path: string | undefined): void;\n\n  /** Save all files to disk */\n  save(): Promise<void>;\n  /** Reload all files from disk */\n  reload(): Promise<void>;\n\n  subscribe(listener: () => void): () => void;\n}\n\nclass DirectoryEditorFileManager implements DirectoryEditorFile {\n  readonly #access: TemplateFileAccess;\n  readonly #signalUpdate: () => void;\n\n  #content?: string;\n  #savedContent?: string;\n\n  constructor(access: TemplateFileAccess, signalUpdate: () => void) {\n    this.#access = access;\n    this.#signalUpdate = signalUpdate;\n  }\n\n  get path() {\n    return this.#access.path;\n  }\n\n  get content() {\n    return this.#content ?? MAX_SIZE_MESSAGE;\n  }\n\n  updateContent(content: string): void {\n    if (this.#content === undefined) {\n      return;\n    }\n    this.#content = content;\n    this.#signalUpdate();\n  }\n\n  get dirty() {\n    return this.#content !== this.#savedContent;\n  }\n\n  async save(): Promise<void> {\n    if (this.#content !== undefined) {\n      await this.#access.save(this.#content);\n      this.#savedContent = this.#content;\n      this.#signalUpdate();\n    }\n  }\n\n  async reload(): Promise<void> {\n    const file = await this.#access.file();\n    if (file.size > MAX_SIZE) {\n      if (this.#content !== undefined) {\n        this.#content = undefined;\n        this.#savedContent = undefined;\n        this.#signalUpdate();\n      }\n      return;\n    }\n\n    const content = await file.text();\n    if (this.#content !== content) {\n      this.#content = content;\n      this.#savedContent = content;\n      this.#signalUpdate();\n    }\n  }\n}\n\nclass DirectoryEditorManager implements DirectoryEditor {\n  readonly #access: TemplateDirectoryAccess;\n  readonly #listeners = new Set<() => void>();\n\n  #files: DirectoryEditorFile[] = [];\n  #selectedFile: DirectoryEditorFile | undefined;\n\n  constructor(access: TemplateDirectoryAccess) {\n    this.#access = access;\n  }\n\n  get files() {\n    return this.#files;\n  }\n\n  get selectedFile() {\n    return this.#selectedFile;\n  }\n\n  setSelectedFile = (path: string | undefined): void => {\n    const prev = this.#selectedFile;\n    const next = this.#files.find(file => file.path === path);\n    if (prev !== next) {\n      this.#selectedFile = next;\n      this.#signalUpdate();\n    }\n  };\n\n  get dirty() {\n    return this.#files.some(file => file.dirty);\n  }\n\n  async save(): Promise<void> {\n    await Promise.all(this.#files.map(file => file.save()));\n  }\n\n  async reload(): Promise<void> {\n    const selectedPath = this.#selectedFile?.path;\n\n    const files = await this.#access.listFiles();\n    const fileManagers = await Promise.all(\n      files.map(async file => {\n        const manager = new DirectoryEditorFileManager(\n          file,\n          this.#signalUpdate,\n        );\n        await manager.reload();\n        return manager;\n      }),\n    );\n    this.#files.length = 0;\n    this.#files.push(...fileManagers);\n\n    this.setSelectedFile(selectedPath);\n    this.#signalUpdate();\n  }\n\n  subscribe(listener: () => void): () => void {\n    this.#listeners.add(listener);\n    return () => {\n      this.#listeners.delete(listener);\n    };\n  }\n\n  #signalUpdate = () => {\n    this.#listeners.forEach(listener => listener());\n  };\n}\n\nconst DirectoryEditorContext = createContext<DirectoryEditor | undefined>(\n  undefined,\n);\n\nexport function useDirectoryEditor(): DirectoryEditor | undefined {\n  const value = useContext(DirectoryEditorContext);\n  const rerender = useRerender();\n\n  useEffect(() => value?.subscribe(rerender), [value, rerender]);\n\n  return value;\n}\n\ninterface DirectoryEditorProviderProps {\n  directory?: TemplateDirectoryAccess;\n  children?: ReactNode;\n}\n\nexport function DirectoryEditorProvider(props: DirectoryEditorProviderProps) {\n  const { directory } = props;\n\n  const [{ result, error }, { execute }] = useAsync(\n    async (dir?: TemplateDirectoryAccess) => {\n      if (!dir) {\n        return undefined;\n      }\n\n      const manager = new DirectoryEditorManager(dir);\n      await manager.reload();\n\n      const firstYaml = manager.files.find(file => file.path.match(/\\.ya?ml$/));\n      if (firstYaml) {\n        manager.setSelectedFile(firstYaml.path);\n      }\n\n      return manager;\n    },\n  );\n\n  useEffect(() => {\n    execute(directory);\n  }, [execute, directory]);\n\n  if (error) {\n    return <ErrorPanel error={error} />;\n  }\n\n  return (\n    <DirectoryEditorContext.Provider value={result}>\n      {props.children}\n    </DirectoryEditorContext.Provider>\n  );\n}\n"],"names":[],"mappings":"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"}