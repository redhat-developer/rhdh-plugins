import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import Grid from '@material-ui/core/Grid';
import Divider from '@material-ui/core/Divider';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';
import { makeStyles } from '@material-ui/core/styles';
import CloseIcon from '@material-ui/icons/Close';
import RefreshIcon from '@material-ui/icons/Refresh';
import SaveIcon from '@material-ui/icons/Save';
import { useDirectoryEditor } from './DirectoryEditorContext.esm.js';
import { FileBrowser } from '../../../components/FileBrowser/FileBrowser.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    grid: {
      "& svg": {
        margin: theme.spacing(1)
      }
    },
    closeButton: {
      marginLeft: "auto"
    }
  }),
  { name: "ScaffolderTemplateEditorBrowser" }
);
function TemplateEditorBrowser(props) {
  const classes = useStyles();
  const directoryEditor = useDirectoryEditor();
  const changedFiles = directoryEditor?.files.filter((file) => file.dirty);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const handleClose = () => {
    if (!props.onClose) {
      return;
    }
    if (changedFiles?.length) {
      const accepted = window.confirm(
        t("templateEditorPage.templateEditorBrowser.closeConfirmMessage")
      );
      if (!accepted) {
        return;
      }
    }
    props.onClose();
  };
  if (!directoryEditor) {
    return null;
  }
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs(Grid, { className: classes.grid, container: true, spacing: 0, alignItems: "center", children: [
      /* @__PURE__ */ jsx(
        Tooltip,
        {
          title: t("templateEditorPage.templateEditorBrowser.saveIconTooltip"),
          children: /* @__PURE__ */ jsx(
            IconButton,
            {
              size: "small",
              disabled: directoryEditor.files.every((file) => !file.dirty),
              onClick: () => directoryEditor.save(),
              children: /* @__PURE__ */ jsx(SaveIcon, {})
            }
          )
        }
      ),
      /* @__PURE__ */ jsx(
        Tooltip,
        {
          title: t(
            "templateEditorPage.templateEditorBrowser.reloadIconTooltip"
          ),
          children: /* @__PURE__ */ jsx(IconButton, { size: "small", onClick: () => directoryEditor.reload(), children: /* @__PURE__ */ jsx(RefreshIcon, {}) })
        }
      ),
      /* @__PURE__ */ jsx(
        Tooltip,
        {
          title: t("templateEditorPage.templateEditorBrowser.closeIconTooltip"),
          children: /* @__PURE__ */ jsx(
            IconButton,
            {
              size: "small",
              className: classes.closeButton,
              onClick: handleClose,
              children: /* @__PURE__ */ jsx(CloseIcon, {})
            }
          )
        }
      )
    ] }),
    /* @__PURE__ */ jsx(Divider, {}),
    /* @__PURE__ */ jsx(
      FileBrowser,
      {
        selected: directoryEditor.selectedFile?.path ?? "",
        onSelect: directoryEditor.setSelectedFile,
        filePaths: directoryEditor.files.map((file) => file.path) ?? []
      }
    )
  ] });
}

export { TemplateEditorBrowser };
//# sourceMappingURL=TemplateEditorBrowser.esm.js.map
