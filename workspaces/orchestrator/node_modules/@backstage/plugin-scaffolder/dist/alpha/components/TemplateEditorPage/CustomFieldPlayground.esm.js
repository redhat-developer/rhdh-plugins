import { jsxs, jsx } from 'react/jsx-runtime';
import { useState, useMemo, useCallback } from 'react';
import yaml from 'yaml';
import validator from '@rjsf/validator-ajv8';
import CodeMirror from '@uiw/react-codemirror';
import { StreamLanguage } from '@codemirror/language';
import { yaml as yaml$1 } from '@codemirror/legacy-modes/mode/yaml';
import { makeStyles } from '@material-ui/core/styles';
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import Autocomplete from '@material-ui/lab/Autocomplete';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import InputAdornment from '@material-ui/core/InputAdornment';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import SearchIcon from '@material-ui/icons/Search';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { Form } from '@backstage/plugin-scaffolder-react/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';
import { TemplateEditorForm } from './TemplateEditorForm.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      gridArea: "pageContent",
      display: "grid",
      gridTemplateRows: "auto 1fr"
    },
    controls: {
      marginBottom: theme.spacing(3)
    },
    code: {
      width: "100%"
    }
  }),
  { name: "ScaffolderCustomFieldExtensionsPlaygroud" }
);
const CustomFieldPlayground = ({
  fieldExtensions = []
}) => {
  const classes = useStyles();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const fieldOptions = fieldExtensions.filter((field) => !!field.schema);
  const [refreshKey, setRefreshKey] = useState(Date.now());
  const [fieldFormState, setFieldFormState] = useState({});
  const [selectedField, setSelectedField] = useState(fieldOptions[0]);
  const sampleFieldTemplate = useMemo(
    () => yaml.stringify({
      parameters: [
        {
          title: `${selectedField.name} Example`,
          properties: {
            [selectedField.name]: {
              type: selectedField.schema?.returnValue?.type,
              "ui:field": selectedField.name,
              "ui:options": fieldFormState
            }
          }
        }
      ]
    }),
    [fieldFormState, selectedField]
  );
  const fieldComponents = useMemo(() => {
    return Object.fromEntries(
      fieldExtensions.map(({ name, component }) => [name, component])
    );
  }, [fieldExtensions]);
  const handleSelectionChange = useCallback(
    (selection) => {
      setSelectedField(selection);
      setFieldFormState({});
    },
    [setFieldFormState, setSelectedField]
  );
  const handleFieldConfigChange = useCallback(
    (state) => {
      setFieldFormState(state);
      setRefreshKey(Date.now());
    },
    [setFieldFormState, setRefreshKey]
  );
  return /* @__PURE__ */ jsxs("main", { className: classes.root, children: [
    /* @__PURE__ */ jsx("div", { className: classes.controls, children: /* @__PURE__ */ jsx(
      Autocomplete,
      {
        id: "custom-fields-autocomplete",
        value: selectedField,
        options: fieldOptions,
        getOptionLabel: (option) => option.name,
        renderInput: (params) => /* @__PURE__ */ jsx(
          TextField,
          {
            ...params,
            "aria-label": t(
              "templateEditorPage.customFieldExplorer.selectFieldLabel"
            ),
            placeholder: t(
              "templateEditorPage.customFieldExplorer.selectFieldLabel"
            ),
            variant: "outlined",
            InputProps: {
              ...params.InputProps,
              startAdornment: /* @__PURE__ */ jsx(InputAdornment, { position: "start", children: /* @__PURE__ */ jsx(SearchIcon, {}) })
            }
          }
        ),
        onChange: (_event, option) => {
          if (option) {
            handleSelectionChange(option);
          }
        },
        disableClearable: true,
        fullWidth: true
      }
    ) }),
    /* @__PURE__ */ jsxs("div", { children: [
      /* @__PURE__ */ jsxs(Accordion, { defaultExpanded: true, children: [
        /* @__PURE__ */ jsx(
          AccordionSummary,
          {
            expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}),
            "aria-controls": "panel-code-content",
            id: "panel-code-header",
            children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: t("templateEditorPage.customFieldExplorer.preview.title") })
          }
        ),
        /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsx("div", { className: classes.code, children: /* @__PURE__ */ jsx(
          CodeMirror,
          {
            readOnly: true,
            theme: "dark",
            height: "100%",
            width: "100%",
            extensions: [StreamLanguage.define(yaml$1)],
            value: sampleFieldTemplate
          }
        ) }) })
      ] }),
      /* @__PURE__ */ jsxs(Accordion, { defaultExpanded: true, children: [
        /* @__PURE__ */ jsx(
          AccordionSummary,
          {
            expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}),
            "aria-controls": "panel-preview-content",
            id: "panel-preview-header",
            children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: t("templateEditorPage.customFieldExplorer.fieldPreview.title") })
          }
        ),
        /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsx(
          TemplateEditorForm,
          {
            content: sampleFieldTemplate,
            contentIsSpec: true,
            fieldExtensions,
            setErrorText: () => null
          },
          refreshKey
        ) })
      ] }),
      /* @__PURE__ */ jsxs(Accordion, { defaultExpanded: true, children: [
        /* @__PURE__ */ jsx(
          AccordionSummary,
          {
            expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}),
            "aria-controls": "panel-options-content",
            id: "panel-options-header",
            children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: t("templateEditorPage.customFieldExplorer.fieldForm.title") })
          }
        ),
        /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsx(
          Form,
          {
            showErrorList: false,
            fields: { ...fieldComponents },
            noHtml5Validate: true,
            formData: fieldFormState,
            formContext: { fieldFormState },
            onSubmit: (e) => handleFieldConfigChange(e.formData),
            validator,
            schema: selectedField.schema?.uiOptions || {},
            experimental_defaultFormStateBehavior: {
              allOf: "populateDefaults"
            },
            children: /* @__PURE__ */ jsx(
              Button,
              {
                variant: "contained",
                color: "primary",
                type: "submit",
                disabled: !selectedField.schema?.uiOptions,
                children: t(
                  "templateEditorPage.customFieldExplorer.fieldForm.applyButtonTitle"
                )
              }
            )
          }
        ) })
      ] })
    ] })
  ] });
};

export { CustomFieldPlayground };
//# sourceMappingURL=CustomFieldPlayground.esm.js.map
