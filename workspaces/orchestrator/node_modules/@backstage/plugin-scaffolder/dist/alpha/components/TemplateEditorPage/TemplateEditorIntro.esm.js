import { jsxs, jsx } from 'react/jsx-runtime';
import Card from '@material-ui/core/Card';
import CardActionArea from '@material-ui/core/CardActionArea';
import CardContent from '@material-ui/core/CardContent';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import 'idb-keyval';
import { WebFileSystemAccess } from '../../../lib/filesystem/WebFileSystemAccess.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';
import CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder';
import ListAltIcon from '@material-ui/icons/ListAlt';
import FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';
import InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';
import CardMedia from '@material-ui/core/CardMedia';
import PublishIcon from '@material-ui/icons/Publish';
import Tooltip from '@material-ui/core/Tooltip';

const useStyles = makeStyles((theme) => ({
  gridRoot: {
    display: "flex",
    flex: 1,
    alignItems: "center",
    justifyContent: "center"
  },
  cardGrid: {
    maxWidth: 1e3,
    display: "grid",
    gridGap: theme.spacing(2),
    gridAutoFlow: "row",
    [theme.breakpoints.up("md")]: {
      gridTemplateRows: "1fr 1fr",
      gridTemplateColumns: "1fr 1fr"
    }
  },
  card: {
    display: "grid",
    gridTemplateColumns: "auto 1fr",
    gridTemplateRows: "1fr",
    alignItems: "center",
    margin: theme.spacing(0, 1),
    marginTop: theme.spacing(2),
    padding: theme.spacing(2)
  },
  icon: {
    justifySelf: "center",
    paddingTop: theme.spacing(1),
    fontSize: 48
  },
  introText: {
    textAlign: "center",
    marginTop: theme.spacing(2)
  },
  infoIcon: {
    position: "absolute",
    top: theme.spacing(1),
    right: theme.spacing(1)
  },
  cardContent: {
    padding: theme.spacing(1)
  }
}));
function ActionCard(props) {
  const supportsLoad = props.requireLoad ? WebFileSystemAccess.isSupported() : true;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const classes = useStyles();
  const { Icon, title, description, action } = props;
  return /* @__PURE__ */ jsxs(Card, { className: classes.card, children: [
    !supportsLoad && /* @__PURE__ */ jsx(
      Tooltip,
      {
        placement: "top",
        title: t(
          "templateEditorPage.templateEditorIntro.loadLocal.unsupportedTooltip"
        ),
        children: /* @__PURE__ */ jsx(InfoOutlinedIcon, {})
      }
    ),
    /* @__PURE__ */ jsxs(CardActionArea, { onClick: action, children: [
      /* @__PURE__ */ jsx(CardMedia, { children: /* @__PURE__ */ jsx(
        Icon,
        {
          className: classes.icon,
          color: supportsLoad ? void 0 : "disabled"
        }
      ) }),
      /* @__PURE__ */ jsxs(CardContent, { className: classes.cardContent, children: [
        /* @__PURE__ */ jsx(
          Typography,
          {
            gutterBottom: true,
            variant: "h5",
            component: "h2",
            color: supportsLoad ? void 0 : "textSecondary",
            children: title
          }
        ),
        /* @__PURE__ */ jsx(Typography, { variant: "body2", color: "textSecondary", component: "p", children: description })
      ] })
    ] })
  ] });
}
function TemplateEditorIntro(props) {
  const classes = useStyles();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  return /* @__PURE__ */ jsxs("div", { style: props.style, children: [
    /* @__PURE__ */ jsx(Typography, { variant: "h4", component: "h2", className: classes.introText, children: t("templateEditorPage.templateEditorIntro.title") }),
    /* @__PURE__ */ jsx("div", { className: classes.gridRoot, children: /* @__PURE__ */ jsxs("div", { className: classes.cardGrid, children: [
      /* @__PURE__ */ jsx(
        ActionCard,
        {
          title: t("templateEditorPage.templateEditorIntro.loadLocal.title"),
          description: t(
            "templateEditorPage.templateEditorIntro.loadLocal.description"
          ),
          requireLoad: true,
          Icon: PublishIcon,
          action: () => props.onSelect?.("local")
        }
      ),
      /* @__PURE__ */ jsx(
        ActionCard,
        {
          title: t(
            "templateEditorPage.templateEditorIntro.createLocal.title"
          ),
          description: t(
            "templateEditorPage.templateEditorIntro.createLocal.description"
          ),
          requireLoad: true,
          action: () => props.onSelect?.("create-template"),
          Icon: CreateNewFolderIcon
        }
      ),
      /* @__PURE__ */ jsx(
        ActionCard,
        {
          title: t("templateEditorPage.templateEditorIntro.formEditor.title"),
          description: t(
            "templateEditorPage.templateEditorIntro.formEditor.description"
          ),
          Icon: ListAltIcon,
          action: () => props.onSelect?.("form")
        }
      ),
      /* @__PURE__ */ jsx(
        ActionCard,
        {
          title: t(
            "templateEditorPage.templateEditorIntro.fieldExplorer.title"
          ),
          description: t(
            "templateEditorPage.templateEditorIntro.fieldExplorer.description"
          ),
          Icon: FormatListBulletedIcon,
          action: () => props.onSelect?.("field-explorer")
        }
      )
    ] }) })
  ] });
}

export { TemplateEditorIntro };
//# sourceMappingURL=TemplateEditorIntro.esm.js.map
