import { jsx, jsxs } from 'react/jsx-runtime';
import { useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useRouteRef, useApp } from '@backstage/core-plugin-api';
import { DocsIcon, Page, Header, Content, ContentHeader, SupportButton } from '@backstage/core-components';
import { EntityListProvider, CatalogFilterLayout, EntitySearchBar, EntityKindPicker, UserListPicker, EntityTagPicker, EntityOwnerPicker } from '@backstage/plugin-catalog-react';
import { ScaffolderPageContextMenu, TemplateCategoryPicker, TemplateGroups } from '@backstage/plugin-scaffolder-react/alpha';
import { RegisterExistingButton } from './RegisterExistingButton.esm.js';
import { registerComponentRouteRef, editRouteRef, actionsRouteRef, scaffolderListTaskRouteRef, viewTechDocRouteRef, selectedTemplateRouteRef, templatingExtensionsRouteRef } from '../../../routes.esm.js';
import { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';
import { buildTechDocsURL } from '@backstage/plugin-techdocs-react';
import { TECHDOCS_ANNOTATION, TECHDOCS_EXTERNAL_ANNOTATION } from '@backstage/plugin-techdocs-common';

const createGroupsWithOther = (groups, t) => [
  ...groups,
  {
    title: t("templateListPage.templateGroups.otherTitle"),
    filter: (e) => ![...groups].some(({ filter }) => filter(e))
  }
];
const TemplateListPage = (props) => {
  const registerComponentLink = useRouteRef(registerComponentRouteRef);
  const {
    TemplateCardComponent,
    groups: givenGroups = [],
    templateFilter,
    headerOptions
  } = props;
  const navigate = useNavigate();
  const editorLink = useRouteRef(editRouteRef);
  const actionsLink = useRouteRef(actionsRouteRef);
  const tasksLink = useRouteRef(scaffolderListTaskRouteRef);
  const viewTechDocsLink = useRouteRef(viewTechDocRouteRef);
  const templateRoute = useRouteRef(selectedTemplateRouteRef);
  const templatingExtensionsLink = useRouteRef(templatingExtensionsRouteRef);
  const app = useApp();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const groups = givenGroups.length ? createGroupsWithOther(givenGroups, t) : [
    {
      title: t("templateListPage.templateGroups.defaultTitle"),
      filter: () => true
    }
  ];
  const scaffolderPageContextMenuProps = {
    onEditorClicked: props?.contextMenu?.editor !== false ? () => navigate(editorLink()) : void 0,
    onActionsClicked: props?.contextMenu?.actions !== false ? () => navigate(actionsLink()) : void 0,
    onTasksClicked: props?.contextMenu?.tasks !== false ? () => navigate(tasksLink()) : void 0,
    onTemplatingExtensionsClicked: props?.contextMenu?.templatingExtensions !== false ? () => navigate(templatingExtensionsLink()) : void 0
  };
  const additionalLinksForEntity = useCallback(
    (template) => {
      if (!(template.metadata.annotations?.[TECHDOCS_ANNOTATION] || template.metadata.annotations?.[TECHDOCS_EXTERNAL_ANNOTATION]) || !viewTechDocsLink) {
        return [];
      }
      const url = buildTechDocsURL(template, viewTechDocsLink);
      return url ? [
        {
          icon: app.getSystemIcon("docs") ?? DocsIcon,
          text: t(
            "templateListPage.additionalLinksForEntity.viewTechDocsTitle"
          ),
          url
        }
      ] : [];
    },
    [app, viewTechDocsLink, t]
  );
  const onTemplateSelected = useCallback(
    (template) => {
      const { namespace, name } = parseEntityRef(stringifyEntityRef(template));
      navigate(templateRoute({ namespace, templateName: name }));
    },
    [navigate, templateRoute]
  );
  return /* @__PURE__ */ jsx(EntityListProvider, { children: /* @__PURE__ */ jsxs(Page, { themeId: "home", children: [
    /* @__PURE__ */ jsx(
      Header,
      {
        pageTitleOverride: t("templateListPage.pageTitle"),
        title: t("templateListPage.title"),
        subtitle: t("templateListPage.subtitle"),
        ...headerOptions,
        children: /* @__PURE__ */ jsx(ScaffolderPageContextMenu, { ...scaffolderPageContextMenuProps })
      }
    ),
    /* @__PURE__ */ jsxs(Content, { children: [
      /* @__PURE__ */ jsxs(ContentHeader, { children: [
        /* @__PURE__ */ jsx(
          RegisterExistingButton,
          {
            title: t(
              "templateListPage.contentHeader.registerExistingButtonTitle"
            ),
            to: registerComponentLink && registerComponentLink()
          }
        ),
        /* @__PURE__ */ jsx(SupportButton, { children: t("templateListPage.contentHeader.supportButtonTitle") })
      ] }),
      /* @__PURE__ */ jsxs(CatalogFilterLayout, { children: [
        /* @__PURE__ */ jsxs(CatalogFilterLayout.Filters, { children: [
          /* @__PURE__ */ jsx(EntitySearchBar, {}),
          /* @__PURE__ */ jsx(EntityKindPicker, { initialFilter: "template", hidden: true }),
          /* @__PURE__ */ jsx(
            UserListPicker,
            {
              initialFilter: "all",
              availableFilters: ["all", "starred"]
            }
          ),
          /* @__PURE__ */ jsx(TemplateCategoryPicker, {}),
          /* @__PURE__ */ jsx(EntityTagPicker, {}),
          /* @__PURE__ */ jsx(EntityOwnerPicker, {})
        ] }),
        /* @__PURE__ */ jsx(CatalogFilterLayout.Content, { children: /* @__PURE__ */ jsx(
          TemplateGroups,
          {
            groups,
            templateFilter,
            TemplateCardComponent,
            onTemplateSelected,
            additionalLinksForEntity
          }
        ) })
      ] })
    ] })
  ] }) });
};

export { TemplateListPage };
//# sourceMappingURL=TemplateListPage.esm.js.map
