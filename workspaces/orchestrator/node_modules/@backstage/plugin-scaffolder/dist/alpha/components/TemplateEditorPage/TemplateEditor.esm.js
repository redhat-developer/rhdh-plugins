import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useRouteRef } from '@backstage/core-plugin-api';
import { editRouteRef } from '../../../routes.esm.js';
import { useTemplateDirectory } from './useTemplateDirectory.esm.js';
import { DirectoryEditorProvider } from './DirectoryEditorContext.esm.js';
import { TemplateEditorLayout, TemplateEditorLayoutToolbar, TemplateEditorLayoutBrowser, TemplateEditorPanels, TemplateEditorLayoutPreview, TemplateEditorLayoutFiles, TemplateEditorLayoutConsole } from './TemplateEditorLayout.esm.js';
import { TemplateEditorToolbar } from './TemplateEditorToolbar.esm.js';
import { TemplateEditorToolbarFileMenu } from './TemplateEditorToolbarFileMenu.esm.js';
import { TemplateEditorBrowser } from './TemplateEditorBrowser.esm.js';
import { TemplateEditorTextArea } from './TemplateEditorTextArea.esm.js';
import { TemplateEditorForm } from './TemplateEditorForm.esm.js';
import { DryRunProvider } from './DryRunContext.esm.js';
import { DryRunResults } from './DryRunResults/DryRunResults.esm.js';

const TemplateEditor = (props) => {
  const { layouts, formProps, fieldExtensions } = props;
  const [errorText, setErrorText] = useState();
  const navigate = useNavigate();
  const editLink = useRouteRef(editRouteRef);
  const {
    directory,
    openDirectory: handleOpenDirectory,
    createDirectory: handleCreateDirectory,
    closeDirectory
  } = useTemplateDirectory();
  const handleCloseDirectory = useCallback(() => {
    closeDirectory().then(() => navigate(editLink()));
  }, [closeDirectory, navigate, editLink]);
  return /* @__PURE__ */ jsx(DirectoryEditorProvider, { directory, children: /* @__PURE__ */ jsx(DryRunProvider, { children: /* @__PURE__ */ jsxs(TemplateEditorLayout, { children: [
    /* @__PURE__ */ jsx(TemplateEditorLayoutToolbar, { children: /* @__PURE__ */ jsx(TemplateEditorToolbar, { fieldExtensions, children: /* @__PURE__ */ jsx(
      TemplateEditorToolbarFileMenu,
      {
        onOpenDirectory: handleOpenDirectory,
        onCreateDirectory: handleCreateDirectory,
        onCloseDirectory: handleCloseDirectory
      }
    ) }) }),
    /* @__PURE__ */ jsx(TemplateEditorLayoutBrowser, { children: /* @__PURE__ */ jsx(TemplateEditorBrowser, { onClose: closeDirectory }) }),
    /* @__PURE__ */ jsx(
      TemplateEditorPanels,
      {
        autoSaveId: "template-editor",
        files: /* @__PURE__ */ jsx(TemplateEditorLayoutFiles, { children: /* @__PURE__ */ jsx(TemplateEditorTextArea.DirectoryEditor, { errorText }) }),
        preview: /* @__PURE__ */ jsx(TemplateEditorLayoutPreview, { children: /* @__PURE__ */ jsx(
          TemplateEditorForm.DirectoryEditorDryRun,
          {
            setErrorText,
            fieldExtensions,
            layouts,
            formProps
          }
        ) })
      }
    ),
    /* @__PURE__ */ jsx(TemplateEditorLayoutConsole, { children: /* @__PURE__ */ jsx(DryRunResults, {}) })
  ] }) }) });
};

export { TemplateEditor };
//# sourceMappingURL=TemplateEditor.esm.js.map
