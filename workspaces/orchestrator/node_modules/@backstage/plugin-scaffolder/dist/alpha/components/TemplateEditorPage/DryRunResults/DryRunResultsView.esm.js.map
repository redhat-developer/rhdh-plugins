{"version":3,"file":"DryRunResultsView.esm.js","sources":["../../../../../src/alpha/components/TemplateEditorPage/DryRunResults/DryRunResultsView.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogViewer } from '@backstage/core-components';\nimport { StreamLanguage } from '@codemirror/language';\nimport { yaml as yamlSupport } from '@codemirror/legacy-modes/mode/yaml';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDryRun } from '../DryRunContext';\nimport { DryRunResultsSplitView } from './DryRunResultsSplitView';\nimport { FileBrowser } from '../../../../components/FileBrowser';\nimport { TaskPageLinks } from './TaskPageLinks';\nimport { TaskStatusStepper } from './TaskStatusStepper';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\nimport { scaffolderTranslationRef } from '../../../../translation';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n  },\n  contentWrapper: {\n    flex: 1,\n    position: 'relative',\n  },\n  content: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n\n    display: 'flex',\n    '& > *': {\n      flex: 1,\n    },\n  },\n  codeMirror: {\n    height: '100%',\n    overflowY: 'auto',\n  },\n});\n\nfunction FilesContent() {\n  const classes = useStyles();\n  const { selectedResult } = useDryRun();\n  const [selectedPath, setSelectedPath] = useState<string>('');\n  const selectedFile = selectedResult?.directoryContents.find(\n    f => f.path === selectedPath,\n  );\n\n  useEffect(() => {\n    if (selectedResult) {\n      const [firstFile] = selectedResult.directoryContents;\n      if (firstFile) {\n        setSelectedPath(firstFile.path);\n      } else {\n        setSelectedPath('');\n      }\n    }\n    return undefined;\n  }, [selectedResult]);\n\n  if (!selectedResult) {\n    return null;\n  }\n  return (\n    <DryRunResultsSplitView>\n      <FileBrowser\n        selected={selectedPath}\n        onSelect={setSelectedPath}\n        filePaths={selectedResult.directoryContents.map(file => file.path)}\n      />\n      <CodeMirror\n        className={classes.codeMirror}\n        theme=\"dark\"\n        height=\"100%\"\n        extensions={[StreamLanguage.define(yamlSupport)]}\n        readOnly\n        value={\n          selectedFile?.base64Content ? atob(selectedFile.base64Content) : ''\n        }\n      />\n    </DryRunResultsSplitView>\n  );\n}\nfunction LogContent() {\n  const { selectedResult } = useDryRun();\n  const [currentStepId, setUserSelectedStepId] = useState<string>();\n\n  const steps = useMemo(() => {\n    if (!selectedResult) {\n      return [];\n    }\n    return (\n      selectedResult.steps.map(step => {\n        const stepLog = selectedResult.log.filter(\n          l => l.body.stepId === step.id,\n        );\n        return {\n          id: step.id,\n          name: step.name,\n          logString: stepLog.map(l => l.body.message).join('\\n'),\n          status: stepLog[stepLog.length - 1]?.body.status ?? 'completed',\n        };\n      }) ?? []\n    );\n  }, [selectedResult]);\n\n  if (!selectedResult) {\n    return null;\n  }\n\n  const selectedStep = steps.find(s => s.id === currentStepId) ?? steps[0];\n\n  return (\n    <DryRunResultsSplitView>\n      <TaskStatusStepper\n        steps={steps}\n        currentStepId={selectedStep.id}\n        onUserStepChange={setUserSelectedStepId}\n      />\n      <LogViewer text={selectedStep?.logString ?? ''} />\n    </DryRunResultsSplitView>\n  );\n}\n\nfunction OutputContent() {\n  const classes = useStyles();\n  const { selectedResult } = useDryRun();\n\n  if (!selectedResult) {\n    return null;\n  }\n\n  return (\n    <DryRunResultsSplitView>\n      <Box pt={2}>\n        {selectedResult.output?.links?.length && (\n          <TaskPageLinks output={selectedResult.output} />\n        )}\n      </Box>\n      <CodeMirror\n        className={classes.codeMirror}\n        theme=\"dark\"\n        height=\"100%\"\n        extensions={[StreamLanguage.define(yamlSupport)]}\n        readOnly\n        value={JSON.stringify(selectedResult.output, null, 2)}\n      />\n    </DryRunResultsSplitView>\n  );\n}\n\nexport function DryRunResultsView() {\n  const classes = useStyles();\n  const [selectedTab, setSelectedTab] = useState<'files' | 'log' | 'output'>(\n    'files',\n  );\n  const { t } = useTranslationRef(scaffolderTranslationRef);\n\n  return (\n    <div className={classes.root}>\n      <Tabs value={selectedTab} onChange={(_, v) => setSelectedTab(v)}>\n        <Tab\n          value=\"files\"\n          label={t('templateEditorPage.dryRunResultsView.tab.files')}\n        />\n        <Tab\n          value=\"log\"\n          label={t('templateEditorPage.dryRunResultsView.tab.log')}\n        />\n        <Tab\n          value=\"output\"\n          label={t('templateEditorPage.dryRunResultsView.tab.output')}\n        />\n      </Tabs>\n      <Divider />\n\n      <div className={classes.contentWrapper}>\n        <div className={classes.content}>\n          {selectedTab === 'files' && <FilesContent />}\n          {selectedTab === 'log' && <LogContent />}\n          {selectedTab === 'output' && <OutputContent />}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["yamlSupport"],"mappings":";;;;;;;;;;;;;;;;;;;AAkCA,MAAM,YAAY,UAAA,CAAW;AAAA,EAC3B,IAAA,EAAM;AAAA,IACJ,OAAA,EAAS,MAAA;AAAA,IACT,QAAA,EAAU;AAAA,GACZ;AAAA,EACA,cAAA,EAAgB;AAAA,IACd,IAAA,EAAM,CAAA;AAAA,IACN,QAAA,EAAU;AAAA,GACZ;AAAA,EACA,OAAA,EAAS;AAAA,IACP,QAAA,EAAU,UAAA;AAAA,IACV,GAAA,EAAK,CAAA;AAAA,IACL,IAAA,EAAM,CAAA;AAAA,IACN,KAAA,EAAO,CAAA;AAAA,IACP,MAAA,EAAQ,CAAA;AAAA,IAER,OAAA,EAAS,MAAA;AAAA,IACT,OAAA,EAAS;AAAA,MACP,IAAA,EAAM;AAAA;AACR,GACF;AAAA,EACA,UAAA,EAAY;AAAA,IACV,MAAA,EAAQ,MAAA;AAAA,IACR,SAAA,EAAW;AAAA;AAEf,CAAC,CAAA;AAED,SAAS,YAAA,GAAe;AACtB,EAAA,MAAM,UAAU,SAAA,EAAU;AAC1B,EAAA,MAAM,EAAE,cAAA,EAAe,GAAI,SAAA,EAAU;AACrC,EAAA,MAAM,CAAC,YAAA,EAAc,eAAe,CAAA,GAAI,SAAiB,EAAE,CAAA;AAC3D,EAAA,MAAM,YAAA,GAAe,gBAAgB,iBAAA,CAAkB,IAAA;AAAA,IACrD,CAAA,CAAA,KAAK,EAAE,IAAA,KAAS;AAAA,GAClB;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,cAAA,EAAgB;AAClB,MAAA,MAAM,CAAC,SAAS,CAAA,GAAI,cAAA,CAAe,iBAAA;AACnC,MAAA,IAAI,SAAA,EAAW;AACb,QAAA,eAAA,CAAgB,UAAU,IAAI,CAAA;AAAA,MAChC,CAAA,MAAO;AACL,QAAA,eAAA,CAAgB,EAAE,CAAA;AAAA,MACpB;AAAA,IACF;AACA,IAAA,OAAO,MAAA;AAAA,EACT,CAAA,EAAG,CAAC,cAAc,CAAC,CAAA;AAEnB,EAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,IAAA,OAAO,IAAA;AAAA,EACT;AACA,EAAA,4BACG,sBAAA,EAAA,EACC,QAAA,EAAA;AAAA,oBAAA,GAAA;AAAA,MAAC,WAAA;AAAA,MAAA;AAAA,QACC,QAAA,EAAU,YAAA;AAAA,QACV,QAAA,EAAU,eAAA;AAAA,QACV,WAAW,cAAA,CAAe,iBAAA,CAAkB,GAAA,CAAI,CAAA,IAAA,KAAQ,KAAK,IAAI;AAAA;AAAA,KACnE;AAAA,oBACA,GAAA;AAAA,MAAC,UAAA;AAAA,MAAA;AAAA,QACC,WAAW,OAAA,CAAQ,UAAA;AAAA,QACnB,KAAA,EAAM,MAAA;AAAA,QACN,MAAA,EAAO,MAAA;AAAA,QACP,UAAA,EAAY,CAAC,cAAA,CAAe,MAAA,CAAOA,IAAW,CAAC,CAAA;AAAA,QAC/C,QAAA,EAAQ,IAAA;AAAA,QACR,OACE,YAAA,EAAc,aAAA,GAAgB,IAAA,CAAK,YAAA,CAAa,aAAa,CAAA,GAAI;AAAA;AAAA;AAErE,GAAA,EACF,CAAA;AAEJ;AACA,SAAS,UAAA,GAAa;AACpB,EAAA,MAAM,EAAE,cAAA,EAAe,GAAI,SAAA,EAAU;AACrC,EAAA,MAAM,CAAC,aAAA,EAAe,qBAAqB,CAAA,GAAI,QAAA,EAAiB;AAEhE,EAAA,MAAM,KAAA,GAAQ,QAAQ,MAAM;AAC1B,IAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,MAAA,OAAO,EAAC;AAAA,IACV;AACA,IAAA,OACE,cAAA,CAAe,KAAA,CAAM,GAAA,CAAI,CAAA,IAAA,KAAQ;AAC/B,MAAA,MAAM,OAAA,GAAU,eAAe,GAAA,CAAI,MAAA;AAAA,QACjC,CAAA,CAAA,KAAK,CAAA,CAAE,IAAA,CAAK,MAAA,KAAW,IAAA,CAAK;AAAA,OAC9B;AACA,MAAA,OAAO;AAAA,QACL,IAAI,IAAA,CAAK,EAAA;AAAA,QACT,MAAM,IAAA,CAAK,IAAA;AAAA,QACX,SAAA,EAAW,QAAQ,GAAA,CAAI,CAAA,CAAA,KAAK,EAAE,IAAA,CAAK,OAAO,CAAA,CAAE,IAAA,CAAK,IAAI,CAAA;AAAA,QACrD,QAAQ,OAAA,CAAQ,OAAA,CAAQ,SAAS,CAAC,CAAA,EAAG,KAAK,MAAA,IAAU;AAAA,OACtD;AAAA,IACF,CAAC,KAAK,EAAC;AAAA,EAEX,CAAA,EAAG,CAAC,cAAc,CAAC,CAAA;AAEnB,EAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,MAAM,YAAA,GAAe,MAAM,IAAA,CAAK,CAAA,CAAA,KAAK,EAAE,EAAA,KAAO,aAAa,CAAA,IAAK,KAAA,CAAM,CAAC,CAAA;AAEvE,EAAA,4BACG,sBAAA,EAAA,EACC,QAAA,EAAA;AAAA,oBAAA,GAAA;AAAA,MAAC,iBAAA;AAAA,MAAA;AAAA,QACC,KAAA;AAAA,QACA,eAAe,YAAA,CAAa,EAAA;AAAA,QAC5B,gBAAA,EAAkB;AAAA;AAAA,KACpB;AAAA,oBACA,GAAA,CAAC,SAAA,EAAA,EAAU,IAAA,EAAM,YAAA,EAAc,aAAa,EAAA,EAAI;AAAA,GAAA,EAClD,CAAA;AAEJ;AAEA,SAAS,aAAA,GAAgB;AACvB,EAAA,MAAM,UAAU,SAAA,EAAU;AAC1B,EAAA,MAAM,EAAE,cAAA,EAAe,GAAI,SAAA,EAAU;AAErC,EAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,4BACG,sBAAA,EAAA,EACC,QAAA,EAAA;AAAA,oBAAA,GAAA,CAAC,GAAA,EAAA,EAAI,EAAA,EAAI,CAAA,EACN,QAAA,EAAA,cAAA,CAAe,MAAA,EAAQ,KAAA,EAAO,MAAA,oBAC7B,GAAA,CAAC,aAAA,EAAA,EAAc,MAAA,EAAQ,cAAA,CAAe,MAAA,EAAQ,CAAA,EAElD,CAAA;AAAA,oBACA,GAAA;AAAA,MAAC,UAAA;AAAA,MAAA;AAAA,QACC,WAAW,OAAA,CAAQ,UAAA;AAAA,QACnB,KAAA,EAAM,MAAA;AAAA,QACN,MAAA,EAAO,MAAA;AAAA,QACP,UAAA,EAAY,CAAC,cAAA,CAAe,MAAA,CAAOA,IAAW,CAAC,CAAA;AAAA,QAC/C,QAAA,EAAQ,IAAA;AAAA,QACR,OAAO,IAAA,CAAK,SAAA,CAAU,cAAA,CAAe,MAAA,EAAQ,MAAM,CAAC;AAAA;AAAA;AACtD,GAAA,EACF,CAAA;AAEJ;AAEO,SAAS,iBAAA,GAAoB;AAClC,EAAA,MAAM,UAAU,SAAA,EAAU;AAC1B,EAAA,MAAM,CAAC,WAAA,EAAa,cAAc,CAAA,GAAI,QAAA;AAAA,IACpC;AAAA,GACF;AACA,EAAA,MAAM,EAAE,CAAA,EAAE,GAAI,iBAAA,CAAkB,wBAAwB,CAAA;AAExD,EAAA,uBACE,IAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAW,OAAA,CAAQ,IAAA,EACtB,QAAA,EAAA;AAAA,oBAAA,IAAA,CAAC,IAAA,EAAA,EAAK,OAAO,WAAA,EAAa,QAAA,EAAU,CAAC,CAAA,EAAG,CAAA,KAAM,cAAA,CAAe,CAAC,CAAA,EAC5D,QAAA,EAAA;AAAA,sBAAA,GAAA;AAAA,QAAC,GAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAM,OAAA;AAAA,UACN,KAAA,EAAO,EAAE,gDAAgD;AAAA;AAAA,OAC3D;AAAA,sBACA,GAAA;AAAA,QAAC,GAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAM,KAAA;AAAA,UACN,KAAA,EAAO,EAAE,8CAA8C;AAAA;AAAA,OACzD;AAAA,sBACA,GAAA;AAAA,QAAC,GAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAM,QAAA;AAAA,UACN,KAAA,EAAO,EAAE,iDAAiD;AAAA;AAAA;AAC5D,KAAA,EACF,CAAA;AAAA,wBACC,OAAA,EAAA,EAAQ,CAAA;AAAA,oBAET,GAAA,CAAC,SAAI,SAAA,EAAW,OAAA,CAAQ,gBACtB,QAAA,kBAAA,IAAA,CAAC,KAAA,EAAA,EAAI,SAAA,EAAW,OAAA,CAAQ,OAAA,EACrB,QAAA,EAAA;AAAA,MAAA,WAAA,KAAgB,OAAA,wBAAY,YAAA,EAAA,EAAa,CAAA;AAAA,MACzC,WAAA,KAAgB,KAAA,oBAAS,GAAA,CAAC,UAAA,EAAA,EAAW,CAAA;AAAA,MACrC,WAAA,KAAgB,QAAA,oBAAY,GAAA,CAAC,aAAA,EAAA,EAAc;AAAA,KAAA,EAC9C,CAAA,EACF;AAAA,GAAA,EACF,CAAA;AAEJ;;;;"}