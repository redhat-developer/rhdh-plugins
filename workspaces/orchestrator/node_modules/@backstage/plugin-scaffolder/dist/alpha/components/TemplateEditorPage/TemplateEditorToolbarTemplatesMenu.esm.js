import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useState, useCallback } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const ITEM_HEIGHT = 48;
const useStyles = makeStyles({
  menu: {
    maxHeight: ITEM_HEIGHT * 5
  }
});
function TemplateEditorToolbarTemplatesMenu(props) {
  const { options, selectedOption, onSelectOption } = props;
  const classes = useStyles();
  const [anchorEl, setAnchorEl] = useState(null);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const isSelectedOption = useCallback(
    (option) => {
      return !!selectedOption && selectedOption.value === option.value;
    },
    [selectedOption]
  );
  const handleOpenMenu = useCallback(
    (event) => {
      setAnchorEl(event.currentTarget);
    },
    [setAnchorEl]
  );
  const handleCloseMenu = useCallback(() => {
    setAnchorEl(null);
  }, [setAnchorEl]);
  const handleSelectOption = useCallback(
    (option) => {
      handleCloseMenu();
      onSelectOption(option);
    },
    [handleCloseMenu, onSelectOption]
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      Button,
      {
        "aria-controls": "templates-menu",
        "aria-haspopup": "true",
        onClick: handleOpenMenu,
        children: t("templateEditorToolbarTemplatesMenu.button")
      }
    ),
    /* @__PURE__ */ jsx(
      Menu,
      {
        id: "templates-menu",
        anchorEl,
        open: Boolean(anchorEl),
        onClose: handleCloseMenu,
        getContentAnchorEl: null,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "left"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "left"
        },
        PaperProps: {
          className: classes.menu
        },
        children: options.map((option, index) => /* @__PURE__ */ jsx(
          MenuItem,
          {
            selected: isSelectedOption(option),
            "aria-selected": isSelectedOption(option),
            onClick: () => handleSelectOption(option),
            children: option.label
          },
          index
        ))
      }
    )
  ] });
}

export { TemplateEditorToolbarTemplatesMenu };
//# sourceMappingURL=TemplateEditorToolbarTemplatesMenu.esm.js.map
