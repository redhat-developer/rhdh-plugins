import { convertLegacyRouteRefs } from '@backstage/core-compat-api';
import { createFrontendPlugin } from '@backstage/frontend-plugin-api';
import { viewTechDocRouteRef, registerComponentRouteRef, templatingExtensionsRouteRef, editRouteRef, scaffolderListTaskRouteRef, actionsRouteRef, scaffolderTaskRouteRef, selectedTemplateRouteRef, rootRouteRef } from '../routes.esm.js';
import { scaffolderApi, scaffolderPage, scaffolderNavItem, repoUrlPickerFormField } from './extensions.esm.js';
import { isTemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import { formFieldsApi } from '@backstage/plugin-scaffolder-react/alpha';
import './api/ref.esm.js';
import { formDecoratorsApi } from './api/FormDecoratorsApi.esm.js';
import { EntityIconLinkBlueprint } from '@backstage/plugin-catalog-react/alpha';
import { useScaffolderTemplateIconLinkProps } from './hooks/useScaffolderTemplateIconLinkProps.esm.js';

const scaffolderEntityIconLink = EntityIconLinkBlueprint.make({
  name: "launch-template",
  params: {
    filter: isTemplateEntityV1beta3,
    useProps: useScaffolderTemplateIconLinkProps
  }
});
var plugin = createFrontendPlugin({
  pluginId: "scaffolder",
  info: { packageJson: () => import('../plugins/scaffolder/package.json.esm.js') },
  routes: convertLegacyRouteRefs({
    root: rootRouteRef,
    selectedTemplate: selectedTemplateRouteRef,
    ongoingTask: scaffolderTaskRouteRef,
    actions: actionsRouteRef,
    listTasks: scaffolderListTaskRouteRef,
    edit: editRouteRef,
    templatingExtensions: templatingExtensionsRouteRef
  }),
  externalRoutes: convertLegacyRouteRefs({
    registerComponent: registerComponentRouteRef,
    viewTechDoc: viewTechDocRouteRef
  }),
  extensions: [
    scaffolderApi,
    scaffolderPage,
    scaffolderNavItem,
    scaffolderEntityIconLink,
    formDecoratorsApi,
    formFieldsApi,
    repoUrlPickerFormField
  ]
});

export { plugin as default };
//# sourceMappingURL=plugin.esm.js.map
