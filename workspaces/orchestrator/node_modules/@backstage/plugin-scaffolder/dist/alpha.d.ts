import * as react from 'react';
import { ComponentType } from 'react';
import { TemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import { TemplateGroupFilter, FieldExtensionOptions, ReviewStepProps, LayoutOptions, FormProps as FormProps$1 } from '@backstage/plugin-scaffolder-react';
import { FormProps as FormProps$2 } from '@rjsf/core';
import * as _backstage_core_plugin_api_alpha from '@backstage/core-plugin-api/alpha';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import * as _backstage_plugin_scaffolder_react_alpha from '@backstage/plugin-scaffolder-react/alpha';
import { ScaffolderFormDecorator } from '@backstage/plugin-scaffolder-react/alpha';
export { ScaffolderFormFieldsApi, formFieldsApiRef } from '@backstage/plugin-scaffolder-react/alpha';
import * as _backstage_core_components from '@backstage/core-components';
import * as _backstage_catalog_model from '@backstage/catalog-model';
import * as _backstage_plugin_catalog_react_alpha from '@backstage/plugin-catalog-react/alpha';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';

/** @public */
type ScaffolderCustomFieldExplorerClassKey = 'root' | 'controls' | 'fieldForm' | 'preview';

/** @public */
type ScaffolderTemplateEditorClassKey = 'root' | 'toolbar' | 'browser' | 'editor' | 'preview' | 'results';

/** @public */
type ScaffolderTemplateFormPreviewerClassKey = 'root' | 'toolbar' | 'controls' | 'textArea' | 'preview';

/**
 * @alpha
 */
type TemplateListPageProps = {
    TemplateCardComponent?: ComponentType<{
        template: TemplateEntityV1beta3;
    }>;
    groups?: TemplateGroupFilter[];
    templateFilter?: (entity: TemplateEntityV1beta3) => boolean;
    contextMenu?: {
        editor?: boolean;
        actions?: boolean;
        tasks?: boolean;
        templatingExtensions?: boolean;
    };
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
};

/**
 * @alpha
 */
type TemplateWizardPageProps = {
    customFieldExtensions: FieldExtensionOptions<any, any>[];
    components?: {
        ReviewStepComponent?: ComponentType<ReviewStepProps>;
    };
    layouts?: LayoutOptions[];
    formProps?: FormProps$1;
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
};

/**
 * These types will be replaced eventually by the one in the scaffolder-react plugin.
 * It is a temporary solution to avoid the `/alpha` types being re-exported and that not being supported right now.
 * It exists already in the `scaffolder-react` plugin, so you may have to update both files.
 */

/**
 * Any `@rjsf/core` form properties that are publicly exposed to the `NextScaffolderPage`
 *
 * @alpha
 * @deprecated use the import from {@link @backstage/plugin-scaffolder-react/alpha#FormProps} instead
 */
type FormProps = Pick<FormProps$2, 'transformErrors' | 'noHtml5Validate'>;

/** @alpha */
declare const scaffolderTranslationRef: _backstage_core_plugin_api_alpha.TranslationRef<"scaffolder", {
    readonly "fields.entityNamePicker.title": "Name";
    readonly "fields.entityNamePicker.description": "Unique name of the component";
    readonly "fields.entityPicker.title": "Entity";
    readonly "fields.entityPicker.description": "An entity from the catalog";
    readonly "fields.entityTagsPicker.title": "Tags";
    readonly "fields.entityTagsPicker.description": "Add any relevant tags, hit 'Enter' to add new tags. Valid format: [a-z0-9+#] separated by [-], at most 63 characters";
    readonly "fields.multiEntityPicker.title": "Entity";
    readonly "fields.multiEntityPicker.description": "An entity from the catalog";
    readonly "fields.myGroupsPicker.title": "Entity";
    readonly "fields.myGroupsPicker.description": "An entity from the catalog";
    readonly "fields.ownedEntityPicker.title": "Entity";
    readonly "fields.ownedEntityPicker.description": "An entity from the catalog";
    readonly "fields.ownerPicker.title": "Owner";
    readonly "fields.ownerPicker.description": "The owner of the component";
    readonly "fields.azureRepoPicker.organization.title": "Organization";
    readonly "fields.azureRepoPicker.organization.description": "The Organization that this repo will belong to";
    readonly "fields.azureRepoPicker.project.title": "Project";
    readonly "fields.azureRepoPicker.project.description": "The Project that this repo will belong to";
    readonly "fields.bitbucketRepoPicker.project.title": "Allowed Projects";
    readonly "fields.bitbucketRepoPicker.project.description": "The Project that this repo will belong to";
    readonly "fields.bitbucketRepoPicker.project.inputTitle": "Projects";
    readonly "fields.bitbucketRepoPicker.workspaces.title": "Allowed Workspaces";
    readonly "fields.bitbucketRepoPicker.workspaces.description": "The Workspace that this repo will belong to";
    readonly "fields.bitbucketRepoPicker.workspaces.inputTitle": "Workspaces";
    readonly "fields.gerritRepoPicker.parent.title": "Parent";
    readonly "fields.gerritRepoPicker.parent.description": "The project parent that the repo will belong to";
    readonly "fields.gerritRepoPicker.owner.title": "Owner";
    readonly "fields.gerritRepoPicker.owner.description": "The owner of the project (optional)";
    readonly "fields.giteaRepoPicker.owner.title": "Owner Available";
    readonly "fields.giteaRepoPicker.owner.description": "Gitea namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project.";
    readonly "fields.giteaRepoPicker.owner.inputTitle": "Owner";
    readonly "fields.githubRepoPicker.owner.title": "Owner Available";
    readonly "fields.githubRepoPicker.owner.description": "The organization, user or project that this repo will belong to";
    readonly "fields.githubRepoPicker.owner.inputTitle": "Owner";
    readonly "fields.gitlabRepoPicker.owner.title": "Owner Available";
    readonly "fields.gitlabRepoPicker.owner.description": "GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project.";
    readonly "fields.gitlabRepoPicker.owner.inputTitle": "Owner";
    readonly "fields.repoUrlPicker.host.title": "Host";
    readonly "fields.repoUrlPicker.host.description": "The host where the repository will be created";
    readonly "fields.repoUrlPicker.repository.title": "Repositories Available";
    readonly "fields.repoUrlPicker.repository.description": "The name of the repository";
    readonly "fields.repoUrlPicker.repository.inputTitle": "Repository";
    readonly "aboutCard.launchTemplate": "Launch Template";
    readonly "actionsPage.content.emptyState.title": "No information to display";
    readonly "actionsPage.content.emptyState.description": "There are no actions installed or there was an issue communicating with backend.";
    readonly "actionsPage.content.searchFieldPlaceholder": "Search for an action";
    readonly "actionsPage.title": "Installed actions";
    readonly "actionsPage.action.input": "Input";
    readonly "actionsPage.action.output": "Output";
    readonly "actionsPage.action.examples": "Examples";
    readonly "actionsPage.subtitle": "This is the collection of all installed actions";
    readonly "actionsPage.pageTitle": "Create a New Component";
    readonly "listTaskPage.content.emptyState.title": "No information to display";
    readonly "listTaskPage.content.emptyState.description": "There are no tasks or there was an issue communicating with backend.";
    readonly "listTaskPage.content.tableCell.template": "Template";
    readonly "listTaskPage.content.tableCell.status": "Status";
    readonly "listTaskPage.content.tableCell.owner": "Owner";
    readonly "listTaskPage.content.tableCell.created": "Created";
    readonly "listTaskPage.content.tableCell.taskID": "Task ID";
    readonly "listTaskPage.content.tableTitle": "Tasks";
    readonly "listTaskPage.title": "List template tasks";
    readonly "listTaskPage.subtitle": "All tasks that have been started";
    readonly "listTaskPage.pageTitle": "Templates Tasks";
    readonly "ownerListPicker.title": "Task Owner";
    readonly "ownerListPicker.options.all": "All";
    readonly "ownerListPicker.options.owned": "Owned";
    readonly "ongoingTask.title": "Run of";
    readonly "ongoingTask.contextMenu.cancel": "Cancel";
    readonly "ongoingTask.contextMenu.startOver": "Start Over";
    readonly "ongoingTask.contextMenu.retry": "Retry";
    readonly "ongoingTask.contextMenu.hideLogs": "Hide Logs";
    readonly "ongoingTask.contextMenu.showLogs": "Show Logs";
    readonly "ongoingTask.contextMenu.hideButtonBar": "Hide Button Bar";
    readonly "ongoingTask.contextMenu.showButtonBar": "Show Button Bar";
    readonly "ongoingTask.subtitle": "Task {{taskId}}";
    readonly "ongoingTask.pageTitle.hasTemplateName": "Run of {{templateName}}";
    readonly "ongoingTask.pageTitle.noTemplateName": "Scaffolder Run";
    readonly "ongoingTask.cancelButtonTitle": "Cancel";
    readonly "ongoingTask.retryButtonTitle": "Retry";
    readonly "ongoingTask.startOverButtonTitle": "Start Over";
    readonly "ongoingTask.hideLogsButtonTitle": "Hide Logs";
    readonly "ongoingTask.showLogsButtonTitle": "Show Logs";
    readonly "templateEditorForm.stepper.emptyText": "There are no spec parameters in the template to preview.";
    readonly "renderSchema.undefined": "No schema defined";
    readonly "renderSchema.tableCell.name": "Name";
    readonly "renderSchema.tableCell.type": "Type";
    readonly "renderSchema.tableCell.title": "Title";
    readonly "renderSchema.tableCell.description": "Description";
    readonly "templatingExtensions.content.values.title": "Values";
    readonly "templatingExtensions.content.values.notAvailable": "There are no global template values defined.";
    readonly "templatingExtensions.content.emptyState.title": "No information to display";
    readonly "templatingExtensions.content.emptyState.description": "There are no templating extensions available or there was an issue communicating with the backend.";
    readonly "templatingExtensions.content.filters.title": "Filters";
    readonly "templatingExtensions.content.filters.schema.input": "Input";
    readonly "templatingExtensions.content.filters.schema.output": "Output";
    readonly "templatingExtensions.content.filters.schema.arguments": "Arguments";
    readonly "templatingExtensions.content.filters.examples": "Examples";
    readonly "templatingExtensions.content.filters.notAvailable": "There are no template filters defined.";
    readonly "templatingExtensions.content.filters.metadataAbsent": "Filter metadata unavailable";
    readonly "templatingExtensions.content.searchFieldPlaceholder": "Search for an extension";
    readonly "templatingExtensions.content.functions.title": "Functions";
    readonly "templatingExtensions.content.functions.schema.output": "Output";
    readonly "templatingExtensions.content.functions.schema.arguments": "Arguments";
    readonly "templatingExtensions.content.functions.examples": "Examples";
    readonly "templatingExtensions.content.functions.notAvailable": "There are no global template functions defined.";
    readonly "templatingExtensions.content.functions.metadataAbsent": "Function metadata unavailable";
    readonly "templatingExtensions.title": "Templating Extensions";
    readonly "templatingExtensions.subtitle": "This is the collection of available templating extensions";
    readonly "templatingExtensions.pageTitle": "Templating Extensions";
    readonly "templateTypePicker.title": "Categories";
    readonly "templateIntroPage.title": "Manage Templates";
    readonly "templateIntroPage.subtitle": "Edit, preview, and try out templates, forms, and custom fields";
    readonly "templateFormPage.title": "Template Editor";
    readonly "templateFormPage.subtitle": "Edit, preview, and try out templates forms";
    readonly "templateCustomFieldPage.title": "Custom Field Explorer";
    readonly "templateCustomFieldPage.subtitle": "Edit, preview, and try out custom fields";
    readonly "templateEditorPage.title": "Template Editor";
    readonly "templateEditorPage.subtitle": "Edit, preview, and try out templates and template forms";
    readonly "templateEditorPage.dryRunResults.title": "Dry-run results";
    readonly "templateEditorPage.dryRunResultsList.title": "Result {{resultId}}";
    readonly "templateEditorPage.dryRunResultsList.deleteButtonTitle": "Delete result";
    readonly "templateEditorPage.dryRunResultsList.downloadButtonTitle": "Download as .zip";
    readonly "templateEditorPage.dryRunResultsView.tab.output": "Output";
    readonly "templateEditorPage.dryRunResultsView.tab.log": "Log";
    readonly "templateEditorPage.dryRunResultsView.tab.files": "Files";
    readonly "templateEditorPage.taskStatusStepper.skippedStepTitle": "Skipped";
    readonly "templateEditorPage.customFieldExplorer.preview.title": "Template Spec";
    readonly "templateEditorPage.customFieldExplorer.fieldForm.title": "Field Options";
    readonly "templateEditorPage.customFieldExplorer.fieldForm.applyButtonTitle": "Apply";
    readonly "templateEditorPage.customFieldExplorer.selectFieldLabel": "Choose Custom Field Extension";
    readonly "templateEditorPage.customFieldExplorer.fieldPreview.title": "Field Preview";
    readonly "templateEditorPage.templateEditorBrowser.closeConfirmMessage": "Are you sure? Unsaved changes will be lost";
    readonly "templateEditorPage.templateEditorBrowser.saveIconTooltip": "Save all files";
    readonly "templateEditorPage.templateEditorBrowser.reloadIconTooltip": "Reload directory";
    readonly "templateEditorPage.templateEditorBrowser.closeIconTooltip": "Close directory";
    readonly "templateEditorPage.templateEditorIntro.title": "Get started by choosing one of the options below";
    readonly "templateEditorPage.templateEditorIntro.loadLocal.title": "Load Template Directory";
    readonly "templateEditorPage.templateEditorIntro.loadLocal.description": "Load a local template directory, allowing you to both edit and try executing your own template.";
    readonly "templateEditorPage.templateEditorIntro.loadLocal.unsupportedTooltip": "Only supported in some Chromium-based browsers with the page loaded over HTTPS";
    readonly "templateEditorPage.templateEditorIntro.createLocal.title": "Create New Template";
    readonly "templateEditorPage.templateEditorIntro.createLocal.description": "Create a local template directory, allowing you to both edit and try executing your own template.";
    readonly "templateEditorPage.templateEditorIntro.createLocal.unsupportedTooltip": "Only supported in some Chromium-based browsers with the page loaded over HTTPS";
    readonly "templateEditorPage.templateEditorIntro.formEditor.title": "Template Form Playground";
    readonly "templateEditorPage.templateEditorIntro.formEditor.description": "Preview and edit a template form, either using a sample template or by loading a template from the catalog.";
    readonly "templateEditorPage.templateEditorIntro.fieldExplorer.title": "Custom Field Explorer";
    readonly "templateEditorPage.templateEditorIntro.fieldExplorer.description": "View and play around with available installed custom field extensions.";
    readonly "templateEditorPage.templateEditorTextArea.saveIconTooltip": "Save file";
    readonly "templateEditorPage.templateEditorTextArea.refreshIconTooltip": "Reload file";
    readonly "templateEditorPage.templateEditorTextArea.emptyStateParagraph": "Please select an action on the file menu.";
    readonly "templateEditorPage.templateFormPreviewer.title": "Load Existing Template";
    readonly "templateListPage.title": "Create a new component";
    readonly "templateListPage.subtitle": "Create new software components using standard templates in your organization";
    readonly "templateListPage.pageTitle": "Create a new component";
    readonly "templateListPage.templateGroups.defaultTitle": "Templates";
    readonly "templateListPage.templateGroups.otherTitle": "Other Templates";
    readonly "templateListPage.contentHeader.supportButtonTitle": "Create new software components using standard templates. Different templates create different kinds of components (services, websites, documentation, ...).";
    readonly "templateListPage.contentHeader.registerExistingButtonTitle": "Register Existing Component";
    readonly "templateListPage.additionalLinksForEntity.viewTechDocsTitle": "View TechDocs";
    readonly "templateWizardPage.title": "Create a new component";
    readonly "templateWizardPage.subtitle": "Create new software components using standard templates in your organization";
    readonly "templateWizardPage.pageTitle": "Create a new component";
    readonly "templateWizardPage.pageContextMenu.editConfigurationTitle": "Edit Configuration";
    readonly "templateEditorToolbar.customFieldExplorerTooltip": "Custom Fields Explorer";
    readonly "templateEditorToolbar.installedActionsDocumentationTooltip": "Installed Actions Documentation";
    readonly "templateEditorToolbar.templatingExtensionsDocumentationTooltip": "Templating Extensions Documentation";
    readonly "templateEditorToolbar.addToCatalogButton": "Publish";
    readonly "templateEditorToolbar.addToCatalogDialogTitle": "Publish changes";
    readonly "templateEditorToolbar.addToCatalogDialogContent.stepsIntroduction": "Follow the instructions below to create or update a template:";
    readonly "templateEditorToolbar.addToCatalogDialogContent.stepsListItems": "Save the template files in a local directory\nCreate a pull request to a new or existing git repository\nIf the template already exists, the changes will be reflected in the software catalog once the pull request gets merged\nBut if you are creating a new template, follow the documentation linked below to register the new template repository in software catalog";
    readonly "templateEditorToolbar.addToCatalogDialogActions.documentationUrl": "https://backstage.io/docs/features/software-templates/adding-templates/";
    readonly "templateEditorToolbar.addToCatalogDialogActions.documentationButton": "Go to the documentation";
    readonly "templateEditorToolbarFileMenu.button": "File";
    readonly "templateEditorToolbarFileMenu.options.openDirectory": "Open template directory";
    readonly "templateEditorToolbarFileMenu.options.createDirectory": "Create template directory";
    readonly "templateEditorToolbarFileMenu.options.closeEditor": "Close template editor";
    readonly "templateEditorToolbarTemplatesMenu.button": "Templates";
}>;

/** @alpha */
interface ScaffolderFormDecoratorsApi {
    getFormDecorators(): Promise<ScaffolderFormDecorator[]>;
}

/** @alpha */
declare const formDecoratorsApiRef: _backstage_frontend_plugin_api.ApiRef<ScaffolderFormDecoratorsApi>;

/** @alpha */
declare class DefaultScaffolderFormDecoratorsApi implements ScaffolderFormDecoratorsApi {
    private readonly options;
    private constructor();
    static create(options?: {
        decorators: ScaffolderFormDecorator[];
    }): DefaultScaffolderFormDecoratorsApi;
    getFormDecorators(): Promise<ScaffolderFormDecorator[]>;
}
/** @alpha */
declare const formDecoratorsApi: _backstage_frontend_plugin_api.ExtensionDefinition<{
    config: {};
    configInput: {};
    output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
    inputs: {
        formDecorators: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<ScaffolderFormDecorator, "scaffolder.form-decorator-loader", {}>, {
            singleton: false;
            optional: false;
        }>;
    };
    kind: "api";
    name: "form-decorators";
    params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
}>;

/** @alpha */
declare const _default: _backstage_frontend_plugin_api.OverridableFrontendPlugin<{
    root: _backstage_frontend_plugin_api.RouteRef<undefined>;
    selectedTemplate: _backstage_frontend_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/templates/:namespace/:templateName">>;
    ongoingTask: _backstage_frontend_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/tasks/:taskId">>;
    actions: _backstage_frontend_plugin_api.SubRouteRef<undefined>;
    listTasks: _backstage_frontend_plugin_api.SubRouteRef<undefined>;
    edit: _backstage_frontend_plugin_api.SubRouteRef<undefined>;
    templatingExtensions: _backstage_frontend_plugin_api.SubRouteRef<undefined>;
}, {
    registerComponent: _backstage_frontend_plugin_api.ExternalRouteRef<undefined>;
    viewTechDoc: _backstage_frontend_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }>;
}, {
    "api:scaffolder": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:scaffolder/form-decorators": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {
            formDecorators: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_plugin_scaffolder_react_alpha.ScaffolderFormDecorator, "scaffolder.form-decorator-loader", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "api";
        name: "form-decorators";
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:scaffolder/form-fields": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {
            formFields: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<() => Promise<_backstage_plugin_scaffolder_react_alpha.FormField>, "scaffolder.form-field-loader", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "api";
        name: "form-fields";
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "entity-icon-link:scaffolder/launch-template": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-icon-link";
        name: "launch-template";
        config: {
            label: string | undefined;
            title: string | undefined;
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            label?: string | undefined;
            title?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<() => _backstage_core_components.IconLinkVerticalProps, "entity-icon-link-props", {}>;
        inputs: {};
        params: {
            useProps: () => Omit<_backstage_core_components.IconLinkVerticalProps, "color">;
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
        };
    }>;
    "nav-item:scaffolder": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "nav-item";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<{
            title: string;
            icon: _backstage_core_plugin_api.IconComponent;
            routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
        }, "core.nav-item.target", {}>;
        inputs: {};
        params: {
            title: string;
            icon: _backstage_core_plugin_api.IconComponent;
            routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
        };
    }>;
    "page:scaffolder": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            path: string | undefined;
        };
        configInput: {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {
            formFields: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<() => Promise<_backstage_plugin_scaffolder_react_alpha.FormField>, "scaffolder.form-field-loader", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "page";
        name: undefined;
        params: {
            defaultPath?: [Error: `Use the 'path' param instead`];
            path: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef;
        };
    }>;
    "scaffolder-form-field:scaffolder/repo-url-picker": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "scaffolder-form-field";
        name: "repo-url-picker";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<() => Promise<_backstage_plugin_scaffolder_react_alpha.FormField>, "scaffolder.form-field-loader", {}>;
        inputs: {};
        params: {
            field: () => Promise<_backstage_plugin_scaffolder_react_alpha.FormField>;
        };
    }>;
}>;

export { DefaultScaffolderFormDecoratorsApi, type FormProps, type ScaffolderCustomFieldExplorerClassKey, type ScaffolderFormDecoratorsApi, type ScaffolderTemplateEditorClassKey, type ScaffolderTemplateFormPreviewerClassKey, type TemplateListPageProps, type TemplateWizardPageProps, _default as default, formDecoratorsApi, formDecoratorsApiRef, scaffolderTranslationRef };
