import { ScaffolderClient as ScaffolderClient$1, TemplateEntityV1beta3, ScaffolderApi as ScaffolderApi$1, TemplateParameterSchema as TemplateParameterSchema$1, ListActionsResponse as ListActionsResponse$1, LogEvent as LogEvent$1, ScaffolderDryRunOptions as ScaffolderDryRunOptions$1, ScaffolderDryRunResponse as ScaffolderDryRunResponse$1, ScaffolderGetIntegrationsListOptions as ScaffolderGetIntegrationsListOptions$1, ScaffolderGetIntegrationsListResponse as ScaffolderGetIntegrationsListResponse$1, ScaffolderOutputLink, ScaffolderScaffoldOptions as ScaffolderScaffoldOptions$1, ScaffolderScaffoldResponse as ScaffolderScaffoldResponse$1, ScaffolderStreamLogsOptions as ScaffolderStreamLogsOptions$1, ScaffolderTask as ScaffolderTask$1, ScaffolderTaskOutput as ScaffolderTaskOutput$2, ScaffolderTaskStatus as ScaffolderTaskStatus$1 } from '@backstage/plugin-scaffolder-common';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';
import { ComponentType, PropsWithChildren } from 'react';
import * as _backstage_plugin_scaffolder_react from '@backstage/plugin-scaffolder-react';
import { ReviewStepProps, ScaffolderTaskOutput as ScaffolderTaskOutput$1, TemplateGroupFilter, FormProps, FieldSchema as FieldSchema$1, createScaffolderFieldExtension as createScaffolderFieldExtension$1, ScaffolderUseTemplateSecrets as ScaffolderUseTemplateSecrets$1, CustomFieldExtensionSchema as CustomFieldExtensionSchema$1, CustomFieldValidator as CustomFieldValidator$1, FieldExtensionOptions as FieldExtensionOptions$1, FieldExtensionComponentProps as FieldExtensionComponentProps$1, FieldExtensionComponent as FieldExtensionComponent$1, createScaffolderLayout as createScaffolderLayout$1, LayoutTemplate as LayoutTemplate$1, LayoutOptions as LayoutOptions$1 } from '@backstage/plugin-scaffolder-react';
export { ReviewStepProps } from '@backstage/plugin-scaffolder-react';
import { TemplateListPageProps, TemplateWizardPageProps } from '@backstage/plugin-scaffolder/alpha';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { ApiHolder } from '@backstage/core-plugin-api';
import { FieldValidation } from '@rjsf/utils';
import { z } from 'zod';

/**
 * An API to interact with the scaffolder backend.
 *
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderClient} instead as this has now been moved.
 */
declare class ScaffolderClient extends ScaffolderClient$1 {
}

/**
 * The Props for the Scaffolder Router
 *
 * @public
 */
type RouterProps = {
    components?: {
        ReviewStepComponent?: ComponentType<ReviewStepProps>;
        TemplateCardComponent?: ComponentType<{
            template: TemplateEntityV1beta3;
        }>;
        TaskPageComponent?: ComponentType<PropsWithChildren<{}>>;
        EXPERIMENTAL_TemplateOutputsComponent?: ComponentType<{
            output?: ScaffolderTaskOutput$1;
        }>;
        EXPERIMENTAL_TemplateListPageComponent?: ComponentType<TemplateListPageProps>;
        EXPERIMENTAL_TemplateWizardPageComponent?: ComponentType<TemplateWizardPageProps>;
    };
    groups?: TemplateGroupFilter[];
    templateFilter?: (entity: TemplateEntityV1beta3) => boolean;
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
    defaultPreviewTemplate?: string;
    formProps?: FormProps;
    contextMenu?: {
        /** Whether to show a link to the template editor */
        editor?: boolean;
        /** Whether to show a link to the actions documentation */
        actions?: boolean;
        /** Whether to show a link to the tasks page */
        tasks?: boolean;
        /** Whether to show a link to the create page (on /create subroutes) */
        create?: boolean;
    };
};

/**
 * The main plugin export for the scaffolder.
 * @public
 */
declare const scaffolderPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
    selectedTemplate: _backstage_core_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/templates/:namespace/:templateName">>;
    ongoingTask: _backstage_core_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/tasks/:taskId">>;
    actions: _backstage_core_plugin_api.SubRouteRef<undefined>;
    listTasks: _backstage_core_plugin_api.SubRouteRef<undefined>;
    edit: _backstage_core_plugin_api.SubRouteRef<undefined>;
    editor: _backstage_core_plugin_api.SubRouteRef<undefined>;
    customFields: _backstage_core_plugin_api.SubRouteRef<undefined>;
    templateForm: _backstage_core_plugin_api.SubRouteRef<undefined>;
    templatingExtensions: _backstage_core_plugin_api.SubRouteRef<undefined>;
}, {
    registerComponent: _backstage_core_plugin_api.ExternalRouteRef<undefined, true>;
    viewTechDoc: _backstage_core_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }, true>;
}>;
/**
 * A field extension for selecting an Entity that exists in the Catalog.
 *
 * @public
 */
declare const EntityPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * The field extension for selecting a name for a new Entity in the Catalog.
 *
 * @public
 */
declare const EntityNamePickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, any>;
/**
 * A field extension for selecting multiple entities that exists in the Catalog.
 *
 * @public
 */
declare const MultiEntityPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string[], {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * The field extension which provides the ability to select a RepositoryUrl.
 * Currently, this is an encoded URL that looks something like the following `github.com?repo=myRepoName&owner=backstage`.
 *
 * @public
 */
declare const RepoUrlPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    allowedHosts?: string[] | undefined;
    allowedOrganizations?: string[] | undefined;
    allowedOwners?: string[] | undefined;
    allowedProjects?: string[] | undefined;
    allowedRepos?: string[] | undefined;
    requestUserCredentials?: {
        secretsKey: string;
        additionalScopes?: {
            azure?: string[] | undefined;
            github?: string[] | undefined;
            gitlab?: string[] | undefined;
            bitbucket?: string[] | undefined;
            gerrit?: string[] | undefined;
            gitea?: string[] | undefined;
        } | undefined;
    } | undefined;
}>;
/**
 * A field extension for picking users and groups out of the Catalog.
 *
 * @public
 */
declare const OwnerPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * A field extension for picking groups a user belongs to out of the catalog.
 *
 * @public
 */
declare const MyGroupsPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, any>;
/**
 * The Router and main entrypoint to the Scaffolder plugin.
 *
 * @public
 */
declare const ScaffolderPage: (props: react.PropsWithChildren<RouterProps>) => react_jsx_runtime.JSX.Element;
/**
 * A field extension to show all the Entities that are owned by the current logged-in User for use in templates.
 *
 * @public
 */
declare const OwnedEntityPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * EntityTagsPickerFieldExtension
 * @public
 */
declare const EntityTagsPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string[], {
    helperText?: string | undefined;
    showCounts?: boolean | undefined;
    kinds?: string[] | undefined;
}>;
/**
 * A field extension to select a branch from a repository.
 *
 * @public
 */
declare const RepoBranchPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    requestUserCredentials?: {
        secretsKey: string;
        additionalScopes?: {
            azure?: string[] | undefined;
            github?: string[] | undefined;
            gitlab?: string[] | undefined;
            bitbucket?: string[] | undefined;
            gerrit?: string[] | undefined;
            gitea?: string[] | undefined;
        } | undefined;
    } | undefined;
}>;

/**
 * @public
 */
declare const EntityPickerFieldSchema: _backstage_plugin_scaffolder_react.FieldSchema<string, {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `EntityPicker` field extension.
 *
 * @public
 */
type EntityPickerUiOptions = NonNullable<(typeof EntityPickerFieldSchema.TProps.uiSchema)['ui:options']>;

/**
 * @public
 */
declare const OwnerPickerFieldSchema: _backstage_plugin_scaffolder_react.FieldSchema<string, {
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `OwnerPicker` field extension.
 *
 * @public
 */
type OwnerPickerUiOptions = NonNullable<(typeof OwnerPickerFieldSchema.TProps.uiSchema)['ui:options']>;

/**
 * @public
 */
declare const RepoUrlPickerFieldSchema: _backstage_plugin_scaffolder_react.FieldSchema<string, {
    allowedHosts?: string[] | undefined;
    allowedOrganizations?: string[] | undefined;
    allowedOwners?: string[] | undefined;
    allowedProjects?: string[] | undefined;
    allowedRepos?: string[] | undefined;
    requestUserCredentials?: {
        secretsKey: string;
        additionalScopes?: {
            azure?: string[] | undefined;
            github?: string[] | undefined;
            gitlab?: string[] | undefined;
            bitbucket?: string[] | undefined;
            gerrit?: string[] | undefined;
            gitea?: string[] | undefined;
        } | undefined;
    } | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `RepoUrlPicker` field extension.
 *
 * @public
 * @deprecated this will be removed as it's no longer used
 */
type RepoUrlPickerUiOptions = NonNullable<(typeof RepoUrlPickerFieldSchema.TProps.uiSchema)['ui:options']>;

/**
 * The validation function for the `repoUrl` that is returned from the
 * field extension. Ensures that you have all the required fields filled for
 * the different providers that exist.
 *
 * @public
 */
declare const repoPickerValidation: (value: string, validation: FieldValidation, context: {
    apiHolder: ApiHolder;
}) => void;

/**
 * @public
 */
declare const OwnedEntityPickerFieldSchema: _backstage_plugin_scaffolder_react.FieldSchema<string, {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    catalogFilter?: Record<string, string | string[] | {
        exists?: boolean | undefined;
    }> | Record<string, string | string[] | {
        exists?: boolean | undefined;
    }>[] | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `OwnedEntityPicker` field extension.
 *
 * @public
 */
type OwnedEntityPickerUiOptions = NonNullable<(typeof OwnedEntityPickerFieldSchema.TProps.uiSchema)['ui:options']>;

/**
 * @public
 */
declare const EntityTagsPickerFieldSchema: _backstage_plugin_scaffolder_react.FieldSchema<string[], {
    helperText?: string | undefined;
    showCounts?: boolean | undefined;
    kinds?: string[] | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `EntityTagsPicker` field extension.
 *
 * @public
 */
type EntityTagsPickerUiOptions = NonNullable<(typeof EntityTagsPickerFieldSchema.TProps.uiSchema)['ui:options']>;

/**
 * Field schema for the MyGroupsPicker.
 * @public
 */
declare const MyGroupsPickerFieldSchema: _backstage_plugin_scaffolder_react.FieldSchema<string, any>;
/**
 * UI options for the MyGroupsPicker.
 * @public
 */
type MyGroupsPickerUiOptions = NonNullable<(typeof MyGroupsPickerFieldSchema.TProps.uiSchema)['ui:options']>;
/**
 * Schema for the MyGroupsPicker.
 * @public
 */
declare const MyGroupsPickerSchema: _backstage_plugin_scaffolder_react.CustomFieldExtensionSchema;

/**
 * @public
 * @deprecated - import from {@link @backstage/plugin-scaffolder-react#FieldSchema} instead
 */
interface FieldSchema<T, P> extends FieldSchema$1<T, P> {
}
/**
 * @public
 * @deprecated use `makeFieldSchema` instead
 * Utility function to convert zod return and UI options schemas to a
 * CustomFieldExtensionSchema with FieldExtensionComponentProps type inference
 */
declare function makeFieldSchemaFromZod<TReturnSchema extends z.ZodType, TUiOptionsSchema extends z.ZodType = z.ZodType<any, any, {}>>(returnSchema: TReturnSchema, uiOptionsSchema?: TUiOptionsSchema): FieldSchema<TReturnSchema extends z.ZodType<any, any, infer IReturn> ? IReturn : never, TUiOptionsSchema extends z.ZodType<any, any, infer IUiOptions> ? IUiOptions : never>;

/**
 * The component to select the `type` of `Template` that you will see in the table.
 *
 * @public
 */
declare const TemplateTypePicker: () => react_jsx_runtime.JSX.Element | null;

/**
 * @public
 */
declare const OngoingTask: (props: {
    TemplateOutputsComponent?: ComponentType<{
        output?: ScaffolderTaskOutput$1;
    }>;
}) => react_jsx_runtime.JSX.Element;

/**
 * @public
 * @deprecated use import from `{@link @backstage/plugin-scaffolder#scaffolderPlugin}.routes.root` instead.
 */
declare const rootRouteRef: _backstage_core_plugin_api.RouteRef<undefined>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#createScaffolderFieldExtension} instead as this has now been moved.
 */
declare const createScaffolderFieldExtension: typeof createScaffolderFieldExtension$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderFieldExtensions} instead as this has now been moved.
 */
declare const ScaffolderFieldExtensions: react.ComponentType<{
    children?: react.ReactNode | undefined;
}>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#useTemplateSecrets} instead as this has now been moved.
 */
declare const useTemplateSecrets: () => ScaffolderUseTemplateSecrets$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#scaffolderApiRef} instead as this has now been moved.
 */
declare const scaffolderApiRef: _backstage_core_plugin_api.ApiRef<ScaffolderApi$1>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderApi} instead as this has now been moved.
 */
type ScaffolderApi = ScaffolderApi$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderUseTemplateSecrets} instead as this has now been moved.
 */
type ScaffolderUseTemplateSecrets = ScaffolderUseTemplateSecrets$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#TemplateParameterSchema} instead as this has now been moved.
 */
type TemplateParameterSchema = TemplateParameterSchema$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#CustomFieldExtensionSchema} instead as this has now been moved.
 */
type CustomFieldExtensionSchema = CustomFieldExtensionSchema$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#CustomFieldValidator} instead as this has now been moved.
 */
type CustomFieldValidator<TReturnFieldData> = CustomFieldValidator$1<TReturnFieldData>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionOptions} instead as this has now been moved.
 */
type FieldExtensionOptions = FieldExtensionOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionComponentProps} instead as this has now been moved.
 */
type FieldExtensionComponentProps<TFieldReturnValue, TUiOptions extends {} = {}> = FieldExtensionComponentProps$1<TFieldReturnValue, TUiOptions>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionComponent} instead as this has now been moved.
 */
type FieldExtensionComponent<_TReturnValue, _TInputProps> = FieldExtensionComponent$1<_TReturnValue, _TInputProps>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ListActionsResponse} instead as this has now been moved.
 */
type ListActionsResponse = ListActionsResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#LogEvent} instead as this has now been moved.
 */
type LogEvent = LogEvent$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderDryRunOptions} instead as this has now been moved.
 */
type ScaffolderDryRunOptions = ScaffolderDryRunOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderDryRunResponse} instead as this has now been moved.
 */
type ScaffolderDryRunResponse = ScaffolderDryRunResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderGetIntegrationsListOptions} instead as this has now been moved.
 */
type ScaffolderGetIntegrationsListOptions = ScaffolderGetIntegrationsListOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderGetIntegrationsListResponse} instead as this has now been moved.
 */
type ScaffolderGetIntegrationsListResponse = ScaffolderGetIntegrationsListResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderOutputlink} instead as this has now been moved.
 */
type ScaffolderOutputlink = ScaffolderOutputLink;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderScaffoldOptions} instead as this has now been moved.
 */
type ScaffolderScaffoldOptions = ScaffolderScaffoldOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderScaffoldResponse} instead as this has now been moved.
 */
type ScaffolderScaffoldResponse = ScaffolderScaffoldResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderStreamLogsOptions} instead as this has now been moved.
 */
type ScaffolderStreamLogsOptions = ScaffolderStreamLogsOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderTask} instead as this has now been moved.
 */
type ScaffolderTask = ScaffolderTask$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderTaskOutput} instead as this has now been moved.
 */
type ScaffolderTaskOutput = ScaffolderTaskOutput$2;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-common#ScaffolderTaskStatus} instead as this has now been moved.
 */
type ScaffolderTaskStatus = ScaffolderTaskStatus$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#createScaffolderLayout} instead as this has now been moved.
 */
declare const createScaffolderLayout: typeof createScaffolderLayout$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderLayouts} instead as this has now been moved.
 */
declare const ScaffolderLayouts: react.ComponentType<{
    children?: react.ReactNode | undefined;
}>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LayoutTemplate} instead as this has now been moved.
 */
type LayoutTemplate = LayoutTemplate$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LayoutOptions} instead as this has now been moved.
 */
type LayoutOptions = LayoutOptions$1;
/**
 * TaskPageProps for constructing a TaskPage
 * @public
 * @deprecated - this is a useless type that is no longer used.
 */
type TaskPageProps = {
    loadingText?: string;
};

export { type CustomFieldExtensionSchema, type CustomFieldValidator, EntityNamePickerFieldExtension, EntityPickerFieldExtension, EntityPickerFieldSchema, type EntityPickerUiOptions, EntityTagsPickerFieldExtension, EntityTagsPickerFieldSchema, type EntityTagsPickerUiOptions, type FieldExtensionComponent, type FieldExtensionComponentProps, type FieldExtensionOptions, type FieldSchema, type LayoutOptions, type LayoutTemplate, type ListActionsResponse, type LogEvent, MultiEntityPickerFieldExtension, MyGroupsPickerFieldExtension, MyGroupsPickerFieldSchema, MyGroupsPickerSchema, type MyGroupsPickerUiOptions, OwnedEntityPickerFieldExtension, OwnedEntityPickerFieldSchema, type OwnedEntityPickerUiOptions, OwnerPickerFieldExtension, OwnerPickerFieldSchema, type OwnerPickerUiOptions, RepoBranchPickerFieldExtension, RepoUrlPickerFieldExtension, RepoUrlPickerFieldSchema, type RepoUrlPickerUiOptions, type RouterProps, type ScaffolderApi, ScaffolderClient, type ScaffolderDryRunOptions, type ScaffolderDryRunResponse, ScaffolderFieldExtensions, type ScaffolderGetIntegrationsListOptions, type ScaffolderGetIntegrationsListResponse, ScaffolderLayouts, type ScaffolderOutputlink, ScaffolderPage, type ScaffolderScaffoldOptions, type ScaffolderScaffoldResponse, type ScaffolderStreamLogsOptions, type ScaffolderTask, type ScaffolderTaskOutput, type ScaffolderTaskStatus, type ScaffolderUseTemplateSecrets, OngoingTask as TaskPage, type TaskPageProps, type TemplateParameterSchema, TemplateTypePicker, createScaffolderFieldExtension, createScaffolderLayout, makeFieldSchemaFromZod, repoPickerValidation, rootRouteRef, scaffolderApiRef, scaffolderPlugin, useTemplateSecrets };
