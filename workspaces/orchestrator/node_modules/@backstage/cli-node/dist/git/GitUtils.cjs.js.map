{"version":3,"file":"GitUtils.cjs.js","sources":["../../src/git/GitUtils.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport { execFile, paths } from '../util';\n\n/**\n * Run a git command, trimming the output splitting it into lines.\n */\nexport async function runGit(...args: string[]) {\n  try {\n    const { stdout } = await execFile('git', args, {\n      shell: true,\n      cwd: paths.targetRoot,\n    });\n    return stdout.trim().split(/\\r\\n|\\r|\\n/);\n  } catch (error) {\n    assertError(error);\n    if (error.stderr || typeof error.code === 'number') {\n      const stderr = (error.stderr as undefined | Buffer)?.toString('utf8');\n      const msg = stderr?.trim() ?? `with exit code ${error.code}`;\n      throw new Error(`git ${args[0]} failed, ${msg}`);\n    }\n    throw new ForwardedError('Unknown execution error', error);\n  }\n}\n\n/**\n * Utilities for working with git.\n *\n * @public\n */\nexport class GitUtils {\n  /**\n   * Returns a sorted list of all files that have changed since the merge base\n   * of the provided `ref` and HEAD, as well as all files that are not tracked by git.\n   */\n  static async listChangedFiles(ref: string) {\n    if (!ref) {\n      throw new Error('ref is required');\n    }\n\n    let diffRef = ref;\n    try {\n      const [base] = await runGit('merge-base', 'HEAD', ref);\n      diffRef = base;\n    } catch {\n      // silently fall back to using the ref directly if merge base is not available\n    }\n\n    const tracked = await runGit('diff', '--name-only', diffRef);\n    const untracked = await runGit(\n      'ls-files',\n      '--others',\n      '--exclude-standard',\n    );\n\n    return Array.from(new Set([...tracked, ...untracked]));\n  }\n\n  /**\n   * Returns the contents of a file at a specific ref.\n   */\n  static async readFileAtRef(path: string, ref: string) {\n    let showRef = ref;\n    try {\n      const [base] = await runGit('merge-base', 'HEAD', ref);\n      showRef = base;\n    } catch {\n      // silently fall back to using the ref directly if merge base is not available\n    }\n\n    const { stdout } = await execFile('git', ['show', `${showRef}:${path}`], {\n      shell: true,\n      cwd: paths.targetRoot,\n      maxBuffer: 1024 * 1024 * 50,\n    });\n    return stdout;\n  }\n}\n"],"names":["execFile","paths","assertError","ForwardedError"],"mappings":";;;;;AAsBA,eAAsB,UAAU,IAAA,EAAgB;AAC9C,EAAA,IAAI;AACF,IAAA,MAAM,EAAE,MAAA,EAAO,GAAI,MAAMA,aAAA,CAAS,OAAO,IAAA,EAAM;AAAA,MAC7C,KAAA,EAAO,IAAA;AAAA,MACP,KAAKC,UAAA,CAAM;AAAA,KACZ,CAAA;AACD,IAAA,OAAO,MAAA,CAAO,IAAA,EAAK,CAAE,KAAA,CAAM,YAAY,CAAA;AAAA,EACzC,SAAS,KAAA,EAAO;AACd,IAAAC,kBAAA,CAAY,KAAK,CAAA;AACjB,IAAA,IAAI,KAAA,CAAM,MAAA,IAAU,OAAO,KAAA,CAAM,SAAS,QAAA,EAAU;AAClD,MAAA,MAAM,MAAA,GAAU,KAAA,CAAM,MAAA,EAA+B,QAAA,CAAS,MAAM,CAAA;AACpE,MAAA,MAAM,MAAM,MAAA,EAAQ,IAAA,EAAK,IAAK,CAAA,eAAA,EAAkB,MAAM,IAAI,CAAA,CAAA;AAC1D,MAAA,MAAM,IAAI,MAAM,CAAA,IAAA,EAAO,IAAA,CAAK,CAAC,CAAC,CAAA,SAAA,EAAY,GAAG,CAAA,CAAE,CAAA;AAAA,IACjD;AACA,IAAA,MAAM,IAAIC,qBAAA,CAAe,yBAAA,EAA2B,KAAK,CAAA;AAAA,EAC3D;AACF;AAOO,MAAM,QAAA,CAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,aAAa,iBAAiB,GAAA,EAAa;AACzC,IAAA,IAAI,CAAC,GAAA,EAAK;AACR,MAAA,MAAM,IAAI,MAAM,iBAAiB,CAAA;AAAA,IACnC;AAEA,IAAA,IAAI,OAAA,GAAU,GAAA;AACd,IAAA,IAAI;AACF,MAAA,MAAM,CAAC,IAAI,CAAA,GAAI,MAAM,MAAA,CAAO,YAAA,EAAc,QAAQ,GAAG,CAAA;AACrD,MAAA,OAAA,GAAU,IAAA;AAAA,IACZ,CAAA,CAAA,MAAQ;AAAA,IAER;AAEA,IAAA,MAAM,OAAA,GAAU,MAAM,MAAA,CAAO,MAAA,EAAQ,eAAe,OAAO,CAAA;AAC3D,IAAA,MAAM,YAAY,MAAM,MAAA;AAAA,MACtB,UAAA;AAAA,MACA,UAAA;AAAA,MACA;AAAA,KACF;AAEA,IAAA,OAAO,KAAA,CAAM,IAAA,iBAAK,IAAI,GAAA,CAAI,CAAC,GAAG,OAAA,EAAS,GAAG,SAAS,CAAC,CAAC,CAAA;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,aAAA,CAAc,IAAA,EAAc,GAAA,EAAa;AACpD,IAAA,IAAI,OAAA,GAAU,GAAA;AACd,IAAA,IAAI;AACF,MAAA,MAAM,CAAC,IAAI,CAAA,GAAI,MAAM,MAAA,CAAO,YAAA,EAAc,QAAQ,GAAG,CAAA;AACrD,MAAA,OAAA,GAAU,IAAA;AAAA,IACZ,CAAA,CAAA,MAAQ;AAAA,IAER;AAEA,IAAA,MAAM,EAAE,MAAA,EAAO,GAAI,MAAMH,aAAA,CAAS,KAAA,EAAO,CAAC,MAAA,EAAQ,CAAA,EAAG,OAAO,CAAA,CAAA,EAAI,IAAI,EAAE,CAAA,EAAG;AAAA,MACvE,KAAA,EAAO,IAAA;AAAA,MACP,KAAKC,UAAA,CAAM,UAAA;AAAA,MACX,SAAA,EAAW,OAAO,IAAA,GAAO;AAAA,KAC1B,CAAA;AACD,IAAA,OAAO,MAAA;AAAA,EACT;AACF;;;;;"}