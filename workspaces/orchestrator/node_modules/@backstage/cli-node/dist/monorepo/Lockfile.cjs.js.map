{"version":3,"file":"Lockfile.cjs.js","sources":["../../src/monorepo/Lockfile.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { parseSyml } from '@yarnpkg/parsers';\nimport crypto from 'node:crypto';\nimport fs from 'fs-extra';\n\nconst ENTRY_PATTERN = /^((?:@[^/]+\\/)?[^@/]+)@(.+)$/;\n\n/** @internal */\ntype LockfileData = {\n  [entry: string]: {\n    version: string;\n    resolved?: string;\n    integrity?: string /* old */;\n    checksum?: string /* new */;\n    dependencies?: { [name: string]: string };\n    peerDependencies?: { [name: string]: string };\n  };\n};\n\n/**\n * A single entry in a {@link Lockfile}.\n *\n * @public\n */\nexport type LockfileQueryEntry = {\n  range: string;\n  version: string;\n  dataKey: string;\n};\n\n/**\n * An entry for a single difference between two {@link Lockfile}s.\n *\n * @public\n */\nexport type LockfileDiffEntry = {\n  name: string;\n  range: string;\n};\n\n/**\n * Represents the difference between two {@link Lockfile}s.\n *\n * @public\n */\nexport type LockfileDiff = {\n  added: LockfileDiffEntry[];\n  changed: LockfileDiffEntry[];\n  removed: LockfileDiffEntry[];\n};\n\n// these are special top level yarn keys.\n// https://github.com/yarnpkg/berry/blob/9bd61fbffb83d0b8166a9cc26bec3a58743aa453/packages/yarnpkg-parsers/sources/syml.ts#L9\nconst SPECIAL_OBJECT_KEYS = [\n  `__metadata`,\n  `version`,\n  `resolution`,\n  `dependencies`,\n  `peerDependencies`,\n  `dependenciesMeta`,\n  `peerDependenciesMeta`,\n  `binaries`,\n];\n\n/**\n * Represents a package manager lockfile.\n *\n * @public\n */\nexport class Lockfile {\n  /**\n   * Load a {@link Lockfile} from a file path.\n   */\n  static async load(path: string): Promise<Lockfile> {\n    const lockfileContents = await fs.readFile(path, 'utf8');\n    return Lockfile.parse(lockfileContents);\n  }\n\n  /**\n   * Parse lockfile contents into a {@link Lockfile}.\n   *\n   * @public\n   */\n  static parse(content: string): Lockfile {\n    let data: LockfileData;\n    try {\n      data = parseSyml(content);\n    } catch (err) {\n      throw new Error(`Failed yarn.lock parse, ${err}`);\n    }\n\n    const packages = new Map<string, LockfileQueryEntry[]>();\n\n    for (const [key, value] of Object.entries(data)) {\n      if (SPECIAL_OBJECT_KEYS.includes(key)) continue;\n\n      const [, name, ranges] = ENTRY_PATTERN.exec(key) ?? [];\n      if (!name) {\n        throw new Error(`Failed to parse yarn.lock entry '${key}'`);\n      }\n\n      let queries = packages.get(name);\n      if (!queries) {\n        queries = [];\n        packages.set(name, queries);\n      }\n      for (let range of ranges.split(/\\s*,\\s*/)) {\n        if (range.startsWith(`${name}@`)) {\n          range = range.slice(`${name}@`.length);\n        }\n        if (range.startsWith('npm:')) {\n          range = range.slice('npm:'.length);\n        }\n        queries.push({ range, version: value.version, dataKey: key });\n      }\n    }\n\n    return new Lockfile(packages, data);\n  }\n\n  private constructor(\n    private readonly packages: Map<string, LockfileQueryEntry[]>,\n    private readonly data: LockfileData,\n  ) {}\n\n  /** Returns the name of all packages available in the lockfile */\n  get(name: string): LockfileQueryEntry[] | undefined {\n    return this.packages.get(name);\n  }\n\n  /** Get the entries for a single package in the lockfile */\n  keys(): IterableIterator<string> {\n    return this.packages.keys();\n  }\n\n  /**\n   * Creates a simplified dependency graph from the lockfile data, where each\n   * key is a package, and the value is a set of all packages that it depends on\n   * across all versions.\n   */\n  createSimplifiedDependencyGraph(): Map<string, Set<string>> {\n    const graph = new Map<string, Set<string>>();\n\n    for (const [name, entries] of this.packages) {\n      const dependencies = new Set(\n        entries.flatMap(e => {\n          const data = this.data[e.dataKey];\n          return [\n            ...Object.keys(data?.dependencies ?? {}),\n            ...Object.keys(data?.peerDependencies ?? {}),\n          ];\n        }),\n      );\n      graph.set(name, dependencies);\n    }\n\n    return graph;\n  }\n\n  /**\n   * Diff with another lockfile, returning entries that have been\n   * added, changed, and removed compared to the other lockfile.\n   */\n  diff(otherLockfile: Lockfile): LockfileDiff {\n    const diff = {\n      added: new Array<{ name: string; range: string }>(),\n      changed: new Array<{ name: string; range: string }>(),\n      removed: new Array<{ name: string; range: string }>(),\n    };\n\n    // Keeps track of packages that only exist in this lockfile\n    const remainingOldNames = new Set(this.packages.keys());\n\n    for (const [name, otherQueries] of otherLockfile.packages) {\n      remainingOldNames.delete(name);\n\n      const thisQueries = this.packages.get(name);\n      // If the packages doesn't exist in this lockfile, add all entries\n      if (!thisQueries) {\n        diff.removed.push(...otherQueries.map(q => ({ name, range: q.range })));\n        continue;\n      }\n\n      const remainingOldRanges = new Set(thisQueries.map(q => q.range));\n\n      for (const otherQuery of otherQueries) {\n        remainingOldRanges.delete(otherQuery.range);\n\n        const thisQuery = thisQueries.find(q => q.range === otherQuery.range);\n        if (!thisQuery) {\n          diff.removed.push({ name, range: otherQuery.range });\n          continue;\n        }\n\n        const otherPkg = otherLockfile.data[otherQuery.dataKey];\n        const thisPkg = this.data[thisQuery.dataKey];\n        if (otherPkg && thisPkg) {\n          const thisCheck = thisPkg.integrity || thisPkg.checksum;\n          const otherCheck = otherPkg.integrity || otherPkg.checksum;\n          if (thisCheck !== otherCheck) {\n            diff.changed.push({ name, range: otherQuery.range });\n          }\n        }\n      }\n\n      for (const thisRange of remainingOldRanges) {\n        diff.added.push({ name, range: thisRange });\n      }\n    }\n\n    for (const name of remainingOldNames) {\n      const queries = this.packages.get(name) ?? [];\n      diff.added.push(...queries.map(q => ({ name, range: q.range })));\n    }\n\n    return diff;\n  }\n\n  /**\n   * Generates a sha1 hex hash of the dependency graph for a package.\n   */\n  getDependencyTreeHash(startName: string): string {\n    if (!this.packages.has(startName)) {\n      throw new Error(`Package '${startName}' not found in lockfile`);\n    }\n\n    const hash = crypto.createHash('sha1');\n\n    const queue = [startName];\n    const seen = new Set<string>();\n\n    while (queue.length > 0) {\n      const name = queue.pop()!;\n\n      if (seen.has(name)) {\n        continue;\n      }\n      seen.add(name);\n\n      const entries = this.packages.get(name);\n      if (!entries) {\n        continue; // In case of missing optional peer dependencies\n      }\n\n      hash.update(`pkg:${name}`);\n      hash.update('\\0');\n\n      // TODO(Rugvip): This uses the same simplified lookup as createSimplifiedDependencyGraph()\n      //               we could match version queries to make the resulting tree a bit smaller.\n      const deps = new Array<string>();\n      for (const entry of entries) {\n        // We're not being particular about stable ordering here. If the lockfile ordering changes, so will likely hash.\n        hash.update(entry.version);\n\n        const data = this.data[entry.dataKey];\n        if (!data) {\n          continue;\n        }\n\n        const checksum = data.checksum || data.integrity;\n        if (checksum) {\n          hash.update('#');\n          hash.update(checksum);\n        }\n\n        hash.update(' ');\n\n        deps.push(...Object.keys(data.dependencies ?? {}));\n        deps.push(...Object.keys(data.peerDependencies ?? {}));\n      }\n\n      queue.push(...new Set(deps));\n    }\n\n    return hash.digest('hex');\n  }\n}\n"],"names":["fs","parseSyml","crypto"],"mappings":"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"}