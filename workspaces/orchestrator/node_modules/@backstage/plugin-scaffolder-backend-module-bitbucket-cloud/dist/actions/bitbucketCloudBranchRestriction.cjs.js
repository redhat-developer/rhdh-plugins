'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var errors = require('@backstage/errors');
var helpers = require('./helpers.cjs.js');
var inputProperties = require('./inputProperties.cjs.js');
var bitbucketCloudBranchRestriction_examples = require('./bitbucketCloudBranchRestriction.examples.cjs.js');

const createBitbucketCloudBranchRestriction = async (opts) => {
  const {
    workspace,
    repo,
    kind,
    branchMatchKind,
    branchType,
    pattern,
    value,
    users,
    groups,
    authorization
  } = opts;
  const bitbucket = helpers.getBitbucketClient(authorization);
  return await bitbucket.branchrestrictions.create({
    _body: {
      groups,
      users,
      branch_match_kind: branchMatchKind,
      kind,
      type: "branchrestriction",
      value: kind === "push" ? null : value,
      pattern: branchMatchKind === "glob" ? pattern : void 0,
      branch_type: branchMatchKind === "branching_model" ? branchType : void 0
    },
    repo_slug: repo,
    workspace
  });
};
function createBitbucketCloudBranchRestrictionAction(options) {
  const { integrations } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "bitbucketCloud:branchRestriction:create",
    examples: bitbucketCloudBranchRestriction_examples.examples,
    description: "Creates branch restrictions for a Bitbucket Cloud repository.",
    schema: {
      input: {
        repoUrl: inputProperties.repoUrl,
        kind: inputProperties.restriction.kind,
        branchMatchKind: inputProperties.restriction.branchMatchKind,
        branchType: inputProperties.restriction.branchType,
        pattern: inputProperties.restriction.pattern,
        value: inputProperties.restriction.value,
        users: inputProperties.restriction.users,
        groups: inputProperties.restriction.groups,
        token: inputProperties.token
      },
      output: {
        json: (z) => z.string({
          description: "The response from bitbucket cloud"
        }).optional(),
        statusCode: (z) => z.number({
          description: "The status code of the response"
        }).optional()
      }
    },
    async handler(ctx) {
      const {
        repoUrl,
        kind,
        branchMatchKind = "branching_model",
        branchType = "development",
        pattern = "",
        value = 1,
        users = [],
        groups = [],
        token = ""
      } = ctx.input;
      const { workspace, repo, host } = pluginScaffolderNode.parseRepoUrl(repoUrl, integrations);
      if (!workspace) {
        throw new errors.InputError(
          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`
        );
      }
      const integrationConfig = integrations.bitbucketCloud.byHost(host);
      if (!integrationConfig) {
        throw new errors.InputError(
          `No matching integration configuration for host ${host}, please check your integrations config`
        );
      }
      const authorization = token ? { token } : integrationConfig.config;
      const response = await createBitbucketCloudBranchRestriction({
        workspace,
        repo,
        kind,
        branchMatchKind,
        branchType,
        pattern,
        value,
        users: users.map((user) => ({ uuid: user.uuid, type: "user" })),
        groups: groups.map((group) => ({ slug: group.slug, type: "group" })),
        authorization
      });
      if (response.data.errors) {
        ctx.logger.error(
          `Error from Bitbucket Cloud Branch Restrictions: ${JSON.stringify(
            response.data.errors
          )}`
        );
      }
      ctx.logger.info(
        `Response from Bitbucket Cloud: ${JSON.stringify(response)}`
      );
      ctx.output("statusCode", response.status);
      ctx.output("json", JSON.stringify(response));
    }
  });
}

exports.createBitbucketCloudBranchRestrictionAction = createBitbucketCloudBranchRestrictionAction;
//# sourceMappingURL=bitbucketCloudBranchRestriction.cjs.js.map
