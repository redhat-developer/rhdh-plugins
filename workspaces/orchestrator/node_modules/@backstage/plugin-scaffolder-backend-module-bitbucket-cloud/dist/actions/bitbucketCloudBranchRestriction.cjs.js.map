{"version":3,"file":"bitbucketCloudBranchRestriction.cjs.js","sources":["../../src/actions/bitbucketCloudBranchRestriction.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { InputError } from '@backstage/errors';\nimport { getBitbucketClient } from './helpers';\nimport * as inputProps from './inputProperties';\nimport { examples } from './bitbucketCloudBranchRestriction.examples';\n\nconst createBitbucketCloudBranchRestriction = async (opts: {\n  workspace: string;\n  repo: string;\n  kind: string;\n  branchMatchKind?: string;\n  branchType?: string;\n  pattern?: string;\n  value?: number | null;\n  users?: { uuid: string; type: string }[];\n  groups?: { slug: string; type: string }[];\n  authorization: {\n    token?: string;\n    username?: string;\n    appPassword?: string;\n  };\n}) => {\n  const {\n    workspace,\n    repo,\n    kind,\n    branchMatchKind,\n    branchType,\n    pattern,\n    value,\n    users,\n    groups,\n    authorization,\n  } = opts;\n\n  const bitbucket = getBitbucketClient(authorization);\n  return await bitbucket.branchrestrictions.create({\n    _body: {\n      groups: groups,\n      users: users,\n      branch_match_kind: branchMatchKind,\n      kind: kind,\n      type: 'branchrestriction',\n      value: kind === 'push' ? null : value,\n      pattern: branchMatchKind === 'glob' ? pattern : undefined,\n      branch_type:\n        branchMatchKind === 'branching_model' ? branchType : undefined,\n    },\n    repo_slug: repo,\n    workspace: workspace,\n  });\n};\n\n/**\n * Creates a new action that adds a branch restriction to a Bitbucket Cloud repository.\n * @public\n */\nexport function createBitbucketCloudBranchRestrictionAction(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'bitbucketCloud:branchRestriction:create',\n    examples,\n    description:\n      'Creates branch restrictions for a Bitbucket Cloud repository.',\n    schema: {\n      input: {\n        repoUrl: inputProps.repoUrl,\n        kind: inputProps.restriction.kind,\n        branchMatchKind: inputProps.restriction.branchMatchKind,\n        branchType: inputProps.restriction.branchType,\n        pattern: inputProps.restriction.pattern,\n        value: inputProps.restriction.value,\n        users: inputProps.restriction.users,\n        groups: inputProps.restriction.groups,\n        token: inputProps.token,\n      },\n      output: {\n        json: z =>\n          z\n            .string({\n              description: 'The response from bitbucket cloud',\n            })\n            .optional(),\n        statusCode: z =>\n          z\n            .number({\n              description: 'The status code of the response',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        kind,\n        branchMatchKind = 'branching_model',\n        branchType = 'development',\n        pattern = '',\n        value = 1,\n        users = [],\n        groups = [],\n        token = '',\n      } = ctx.input;\n\n      const { workspace, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!workspace) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketCloud.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const authorization = token ? { token: token } : integrationConfig.config;\n\n      const response = await createBitbucketCloudBranchRestriction({\n        workspace: workspace,\n        repo,\n        kind: kind,\n        branchMatchKind: branchMatchKind,\n        branchType: branchType,\n        pattern: pattern,\n        value: value,\n        users: users.map(user => ({ uuid: user.uuid, type: 'user' })),\n        groups: groups.map(group => ({ slug: group.slug, type: 'group' })),\n        authorization,\n      });\n      if (response.data.errors) {\n        ctx.logger.error(\n          `Error from Bitbucket Cloud Branch Restrictions: ${JSON.stringify(\n            response.data.errors,\n          )}`,\n        );\n      }\n      ctx.logger.info(\n        `Response from Bitbucket Cloud: ${JSON.stringify(response)}`,\n      );\n      ctx.output('statusCode', response.status);\n      ctx.output('json', JSON.stringify(response));\n    },\n  });\n}\n"],"names":["getBitbucketClient","createTemplateAction","examples","inputProps.repoUrl","inputProps.restriction","inputProps.token","parseRepoUrl","InputError"],"mappings":"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"}