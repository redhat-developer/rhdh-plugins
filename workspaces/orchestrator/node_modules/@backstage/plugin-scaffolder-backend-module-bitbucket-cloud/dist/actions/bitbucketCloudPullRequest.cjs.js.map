{"version":3,"file":"bitbucketCloudPullRequest.cjs.js","sources":["../../src/actions/bitbucketCloudPullRequest.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  commitAndPushBranch,\n  addFiles,\n  cloneRepo,\n  parseRepoUrl,\n  isNotGitDirectoryOrContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { Config } from '@backstage/config';\nimport fs from 'fs-extra';\nimport { getAuthorizationHeader } from './helpers';\nimport { examples } from './bitbucketCloudPullRequest.examples';\n\nconst createPullRequest = async (opts: {\n  workspace: string;\n  repo: string;\n  title: string;\n  description?: string;\n  targetBranch: string;\n  sourceBranch: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    workspace,\n    repo,\n    title,\n    description,\n    targetBranch,\n    sourceBranch,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const data: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      title: title,\n      summary: {\n        raw: description,\n      },\n      state: 'OPEN',\n      source: {\n        branch: {\n          name: sourceBranch,\n        },\n      },\n      destination: {\n        branch: {\n          name: targetBranch,\n        },\n      },\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}/pullrequests`,\n      data,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create pull-requests, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create pull requests, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  return r.links.html.href;\n};\n\nconst findBranches = async (opts: {\n  workspace: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const { workspace, repo, branchName, authorization, apiBaseUrl } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}/refs/branches?q=${encodeURIComponent(\n        `name = \"${branchName}\"`,\n      )}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to get branches, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to get branches, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n\n  return r.values[0];\n};\n\nconst createBranch = async (opts: {\n  workspace: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n  startBranch: string;\n}) => {\n  const {\n    workspace,\n    repo,\n    branchName,\n    authorization,\n    apiBaseUrl,\n    startBranch,\n  } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: branchName,\n      target: {\n        hash: startBranch,\n      },\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}/refs/branches`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create branch, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create branch, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  return await response.json();\n};\n\nconst getDefaultBranch = async (opts: {\n  workspace: string;\n  repo: string;\n  authorization: string;\n  apiBaseUrl: string;\n}): Promise<string> => {\n  const { workspace, repo, authorization, apiBaseUrl } = opts;\n  let response: Response;\n\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}`,\n      options,\n    );\n  } catch (error) {\n    throw error;\n  }\n\n  const { mainbranch } = await response.json();\n  const defaultBranch = mainbranch.name;\n  if (!defaultBranch) {\n    throw new Error(`Could not fetch default branch for ${workspace}/${repo}`);\n  }\n  return defaultBranch;\n};\n/**\n * Creates a Bitbucket Cloud Pull Request action.\n * @public\n */\nexport function createPublishBitbucketCloudPullRequestAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:bitbucketCloud:pull-request',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        title: z =>\n          z.string({\n            description: 'The title for the pull request',\n          }),\n        description: z =>\n          z\n            .string({\n              description: 'The description of the pull request',\n            })\n            .optional(),\n        targetBranch: z =>\n          z\n            .string({\n              description: `Branch of repository to apply changes to. The default value is 'master'`,\n            })\n            .optional(),\n        sourceBranch: z =>\n          z.string({\n            description: 'Branch of repository to copy changes from',\n          }),\n        token: z =>\n          z\n            .string({\n              description:\n                'The token to use for authorization to BitBucket Cloud',\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the author email for the commit.`,\n            })\n            .optional(),\n      },\n      output: {\n        pullRequestUrl: z =>\n          z.string({\n            description: 'A URL to the pull request with the provider',\n          }),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        title,\n        description,\n        targetBranch,\n        sourceBranch,\n        gitAuthorName,\n        gitAuthorEmail,\n      } = ctx.input;\n\n      const { workspace, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!workspace) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketCloud.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const authorization = getAuthorizationHeader(\n        ctx.input.token ? { token: ctx.input.token } : integrationConfig.config,\n      );\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      let finalTargetBranch = targetBranch;\n      if (!finalTargetBranch) {\n        finalTargetBranch = await getDefaultBranch({\n          workspace,\n          repo,\n          authorization,\n          apiBaseUrl,\n        });\n      }\n\n      const sourceBranchRef = await findBranches({\n        workspace,\n        repo,\n        branchName: sourceBranch,\n        authorization,\n        apiBaseUrl,\n      });\n\n      if (!sourceBranchRef) {\n        // create branch\n        ctx.logger.info(\n          `source branch not found -> creating branch named: ${sourceBranch}`,\n        );\n\n        await createBranch({\n          workspace,\n          repo,\n          branchName: sourceBranch,\n          authorization,\n          apiBaseUrl,\n          startBranch: finalTargetBranch,\n        });\n\n        const remoteUrl = `https://${host}/${workspace}/${repo}.git`;\n\n        let auth;\n\n        if (ctx.input.token) {\n          auth = {\n            username: 'x-token-auth',\n            password: ctx.input.token,\n          };\n        } else {\n          if (\n            !integrationConfig.config.username ||\n            !integrationConfig.config.appPassword\n          ) {\n            throw new Error(\n              'Credentials for Bitbucket Cloud integration required for this action.',\n            );\n          }\n\n          auth = {\n            username: integrationConfig.config.username,\n            password: integrationConfig.config.appPassword,\n          };\n        }\n\n        const gitAuthorInfo = {\n          name:\n            gitAuthorName ||\n            config.getOptionalString('scaffolder.defaultAuthor.name'),\n          email:\n            gitAuthorEmail ||\n            config.getOptionalString('scaffolder.defaultAuthor.email'),\n        };\n\n        const tempDir = await ctx.createTemporaryDirectory();\n        const sourceDir = getRepoSourceDirectory(ctx.workspacePath, undefined);\n        await cloneRepo({\n          url: remoteUrl,\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          ref: sourceBranch,\n        });\n\n        // copy files\n        fs.cpSync(sourceDir, tempDir, {\n          recursive: true,\n          filter: isNotGitDirectoryOrContents,\n        });\n\n        await addFiles({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          filepath: '.',\n        });\n\n        await commitAndPushBranch({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          commitMessage:\n            description ??\n            config.getOptionalString('scaffolder.defaultCommitMessage') ??\n            '',\n          gitAuthorInfo,\n          branch: sourceBranch,\n        });\n      }\n\n      const pullRequestUrl = await createPullRequest({\n        workspace,\n        repo,\n        title,\n        description,\n        targetBranch: finalTargetBranch,\n        sourceBranch,\n        authorization,\n        apiBaseUrl,\n      });\n\n      ctx.output('pullRequestUrl', pullRequestUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getAuthorizationHeader","getRepoSourceDirectory","cloneRepo","fs","isNotGitDirectoryOrContents","addFiles","commitAndPushBranch"],"mappings":"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"}