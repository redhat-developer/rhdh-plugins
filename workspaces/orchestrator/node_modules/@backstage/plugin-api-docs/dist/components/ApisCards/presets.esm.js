import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { EntityTable } from '@backstage/plugin-catalog-react';
import ExtensionIcon from '@material-ui/icons/Extension';
import ToggleButton from '@material-ui/lab/ToggleButton';
import { useState } from 'react';
import '@material-ui/lab/Alert';
import '../../config.esm.js';
import '@backstage/core-components';
import '@backstage/core-plugin-api';
import '../AsyncApiDefinitionWidget/AsyncApiDefinitionWidget.esm.js';
import '../GraphQlDefinitionWidget/GraphQlDefinitionWidget.esm.js';
import '../OpenApiDefinitionWidget/OpenApiDefinitionWidget.esm.js';
import '@material-ui/core/styles';
import { ApiTypeTitle } from '../ApiDefinitionCard/ApiTypeTitle.esm.js';
import { ApiDefinitionDialog } from '../ApiDefinitionDialog/ApiDefinitionDialog.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { apiDocsTranslationRef } from '../../translation.esm.js';

function createSpecApiTypeColumn(t) {
  return {
    title: t("apiEntityColumns.typeTitle"),
    field: "spec.type",
    render: (entity) => /* @__PURE__ */ jsx(ApiTypeTitle, { apiEntity: entity })
  };
}
const ApiDefinitionButton = ({ apiEntity }) => {
  const [dialogOpen, setDialogOpen] = useState(false);
  const { t } = useTranslationRef(apiDocsTranslationRef);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      ToggleButton,
      {
        "aria-label": t("apiDefinitionDialog.toggleButtonAriaLabel"),
        onClick: () => setDialogOpen(!dialogOpen),
        value: dialogOpen,
        children: /* @__PURE__ */ jsx(ExtensionIcon, {})
      }
    ),
    /* @__PURE__ */ jsx(
      ApiDefinitionDialog,
      {
        entity: apiEntity,
        open: dialogOpen,
        onClose: () => setDialogOpen(false)
      }
    )
  ] });
};
function createApiDefinitionColumn(t) {
  return {
    title: t("apiEntityColumns.apiDefinitionTitle"),
    render: (entity) => /* @__PURE__ */ jsx(ApiDefinitionButton, { apiEntity: entity })
  };
}
const getApiEntityColumns = (t) => {
  return [
    EntityTable.columns.createEntityRefColumn({ defaultKind: "API" }),
    EntityTable.columns.createSystemColumn(),
    EntityTable.columns.createOwnerColumn(),
    createSpecApiTypeColumn(t),
    EntityTable.columns.createSpecLifecycleColumn(),
    EntityTable.columns.createMetadataDescriptionColumn(),
    createApiDefinitionColumn(t)
  ];
};

export { createSpecApiTypeColumn, getApiEntityColumns };
//# sourceMappingURL=presets.esm.js.map
