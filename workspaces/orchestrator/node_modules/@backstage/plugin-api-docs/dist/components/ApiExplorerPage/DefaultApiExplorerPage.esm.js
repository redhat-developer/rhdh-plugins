import { jsx, jsxs } from 'react/jsx-runtime';
import { PageWithHeader, Content, ContentHeader, CreateButton, SupportButton } from '@backstage/core-components';
import { useApi, configApiRef, useRouteRef } from '@backstage/core-plugin-api';
import { CatalogTable } from '@backstage/plugin-catalog';
import { EntityListProvider, CatalogFilterLayout, EntityKindPicker, EntityTypePicker, UserListPicker, EntityOwnerPicker, EntityLifecyclePicker, EntityTagPicker } from '@backstage/plugin-catalog-react';
import { registerComponentRouteRef } from '../../routes.esm.js';
import { usePermission } from '@backstage/plugin-permission-react';
import { catalogEntityCreatePermission } from '@backstage/plugin-catalog-common/alpha';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { apiDocsTranslationRef } from '../../translation.esm.js';

const defaultColumns = [
  CatalogTable.columns.createTitleColumn({ hidden: true }),
  CatalogTable.columns.createNameColumn({ defaultKind: "API" }),
  CatalogTable.columns.createSystemColumn(),
  CatalogTable.columns.createOwnerColumn(),
  CatalogTable.columns.createSpecTypeColumn(),
  CatalogTable.columns.createSpecLifecycleColumn(),
  CatalogTable.columns.createMetadataDescriptionColumn(),
  CatalogTable.columns.createTagsColumn()
];
const DefaultApiExplorerPage = (props) => {
  const {
    initiallySelectedFilter = "all",
    columns,
    actions,
    ownerPickerMode,
    pagination
  } = props;
  const configApi = useApi(configApiRef);
  const { t } = useTranslationRef(apiDocsTranslationRef);
  const generatedSubtitle = t("defaultApiExplorerPage.subtitle", {
    orgName: configApi.getOptionalString("organization.name") ?? "Backstage"
  });
  const registerComponentLink = useRouteRef(registerComponentRouteRef);
  const { allowed } = usePermission({
    permission: catalogEntityCreatePermission
  });
  return /* @__PURE__ */ jsx(
    PageWithHeader,
    {
      themeId: "apis",
      title: t("defaultApiExplorerPage.title"),
      subtitle: generatedSubtitle,
      pageTitleOverride: t("defaultApiExplorerPage.pageTitleOverride"),
      children: /* @__PURE__ */ jsxs(Content, { children: [
        /* @__PURE__ */ jsxs(ContentHeader, { title: "", children: [
          allowed && /* @__PURE__ */ jsx(
            CreateButton,
            {
              title: t("defaultApiExplorerPage.createButtonTitle"),
              to: registerComponentLink?.()
            }
          ),
          /* @__PURE__ */ jsx(SupportButton, { children: t("defaultApiExplorerPage.supportButtonTitle") })
        ] }),
        /* @__PURE__ */ jsx(EntityListProvider, { pagination, children: /* @__PURE__ */ jsxs(CatalogFilterLayout, { children: [
          /* @__PURE__ */ jsxs(CatalogFilterLayout.Filters, { children: [
            /* @__PURE__ */ jsx(EntityKindPicker, { initialFilter: "api", hidden: true }),
            /* @__PURE__ */ jsx(EntityTypePicker, {}),
            /* @__PURE__ */ jsx(UserListPicker, { initialFilter: initiallySelectedFilter }),
            /* @__PURE__ */ jsx(EntityOwnerPicker, { mode: ownerPickerMode }),
            /* @__PURE__ */ jsx(EntityLifecyclePicker, {}),
            /* @__PURE__ */ jsx(EntityTagPicker, {})
          ] }),
          /* @__PURE__ */ jsx(CatalogFilterLayout.Content, { children: /* @__PURE__ */ jsx(
            CatalogTable,
            {
              columns: columns || defaultColumns,
              actions
            }
          ) })
        ] }) })
      ] })
    }
  );
};

export { DefaultApiExplorerPage };
//# sourceMappingURL=DefaultApiExplorerPage.esm.js.map
