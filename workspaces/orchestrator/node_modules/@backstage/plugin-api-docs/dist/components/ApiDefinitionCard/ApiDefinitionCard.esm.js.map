{"version":3,"file":"ApiDefinitionCard.esm.js","sources":["../../../src/components/ApiDefinitionCard/ApiDefinitionCard.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiEntity } from '@backstage/catalog-model';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport Alert from '@material-ui/lab/Alert';\nimport { apiDocsConfigRef } from '../../config';\nimport { PlainApiDefinitionWidget } from '../PlainApiDefinitionWidget';\n\nimport { CardTab, TabbedCard } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\n\n/** @public */\nexport const ApiDefinitionCard = () => {\n  const { entity } = useEntity<ApiEntity>();\n  const config = useApi(apiDocsConfigRef);\n  const { getApiDefinitionWidget } = config;\n\n  if (!entity) {\n    return <Alert severity=\"error\">Could not fetch the API</Alert>;\n  }\n\n  const definitionWidget = getApiDefinitionWidget(entity);\n  const entityTitle = entity.metadata.title ?? entity.metadata.name;\n\n  if (definitionWidget) {\n    return (\n      <TabbedCard title={entityTitle}>\n        <CardTab label={definitionWidget.title} key=\"widget\">\n          {definitionWidget.component(entity.spec.definition)}\n        </CardTab>\n        <CardTab label=\"Raw\" key=\"raw\">\n          <PlainApiDefinitionWidget\n            definition={entity.spec.definition}\n            language={definitionWidget.rawLanguage || entity.spec.type}\n          />\n        </CardTab>\n      </TabbedCard>\n    );\n  }\n\n  return (\n    <TabbedCard\n      title={entityTitle}\n      children={[\n        // Has to be an array, otherwise typescript doesn't like that this has only a single child\n        <CardTab label={entity.spec.type} key=\"raw\">\n          <PlainApiDefinitionWidget\n            definition={entity.spec.definition}\n            language={entity.spec.type}\n          />\n        </CardTab>,\n      ]}\n    />\n  );\n};\n"],"names":[],"mappings":";;;;;;;;AA0BO,MAAM,oBAAoB,MAAM;AACrC,EAAA,MAAM,EAAE,MAAA,EAAO,GAAI,SAAA,EAAqB;AACxC,EAAA,MAAM,MAAA,GAAS,OAAO,gBAAgB,CAAA;AACtC,EAAA,MAAM,EAAE,wBAAuB,GAAI,MAAA;AAEnC,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,uBAAO,GAAA,CAAC,KAAA,EAAA,EAAM,QAAA,EAAS,OAAA,EAAQ,QAAA,EAAA,yBAAA,EAAuB,CAAA;AAAA,EACxD;AAEA,EAAA,MAAM,gBAAA,GAAmB,uBAAuB,MAAM,CAAA;AACtD,EAAA,MAAM,WAAA,GAAc,MAAA,CAAO,QAAA,CAAS,KAAA,IAAS,OAAO,QAAA,CAAS,IAAA;AAE7D,EAAA,IAAI,gBAAA,EAAkB;AACpB,IAAA,uBACE,IAAA,CAAC,UAAA,EAAA,EAAW,KAAA,EAAO,WAAA,EACjB,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,OAAA,EAAA,EAAQ,KAAA,EAAO,gBAAA,CAAiB,KAAA,EAC9B,QAAA,EAAA,gBAAA,CAAiB,UAAU,MAAA,CAAO,IAAA,CAAK,UAAU,CAAA,EAAA,EADR,QAE5C,CAAA;AAAA,sBACA,GAAA,CAAC,OAAA,EAAA,EAAQ,KAAA,EAAM,KAAA,EACb,QAAA,kBAAA,GAAA;AAAA,QAAC,wBAAA;AAAA,QAAA;AAAA,UACC,UAAA,EAAY,OAAO,IAAA,CAAK,UAAA;AAAA,UACxB,QAAA,EAAU,gBAAA,CAAiB,WAAA,IAAe,MAAA,CAAO,IAAA,CAAK;AAAA;AAAA,WAHjC,KAKzB;AAAA,KAAA,EACF,CAAA;AAAA,EAEJ;AAEA,EAAA,uBACE,GAAA;AAAA,IAAC,UAAA;AAAA,IAAA;AAAA,MACC,KAAA,EAAO,WAAA;AAAA,MACP,QAAA,EAAU;AAAA;AAAA,wBAER,GAAA,CAAC,OAAA,EAAA,EAAQ,KAAA,EAAO,MAAA,CAAO,KAAK,IAAA,EAC1B,QAAA,kBAAA,GAAA;AAAA,UAAC,wBAAA;AAAA,UAAA;AAAA,YACC,UAAA,EAAY,OAAO,IAAA,CAAK,UAAA;AAAA,YACxB,QAAA,EAAU,OAAO,IAAA,CAAK;AAAA;AAAA,aAHY,KAKtC;AAAA;AACF;AAAA,GACF;AAEJ;;;;"}