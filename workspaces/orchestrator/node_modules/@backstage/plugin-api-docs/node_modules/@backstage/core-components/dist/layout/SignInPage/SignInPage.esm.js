import { jsx, jsxs } from 'react/jsx-runtime';
import { useApi, configApiRef, useAnalytics } from '@backstage/core-plugin-api';
import { UserIdentity } from './UserIdentity.esm.js';
import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { useState } from 'react';
import { useMountEffect } from '@react-hookz/web';
import { Progress } from '../../components/Progress/Progress.esm.js';
import { Content } from '../Content/Content.esm.js';
import { ContentHeader } from '../ContentHeader/ContentHeader.esm.js';
import { Header } from '../Header/Header.esm.js';
import { InfoCard } from '../InfoCard/InfoCard.esm.js';
import { Page } from '../Page/Page.esm.js';
import { getSignInProviders, useSignInProviders } from './providers.esm.js';
import { useStyles, GridItem } from './styles.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { useSearchParams } from 'react-router-dom';

const MultiSignInPage = ({
  onSignInSuccess,
  providers = [],
  title,
  titleComponent,
  align = "left"
}) => {
  const configApi = useApi(configApiRef);
  const classes = useStyles();
  const signInProviders = getSignInProviders(providers);
  const [loading, providerElements] = useSignInProviders(
    signInProviders,
    onSignInSuccess
  );
  if (loading) {
    return /* @__PURE__ */ jsx(Progress, {});
  }
  return /* @__PURE__ */ jsxs(Page, { themeId: "home", children: [
    /* @__PURE__ */ jsx(Header, { title: configApi.getString("app.title") }),
    /* @__PURE__ */ jsxs(Content, { children: [
      (title || titleComponent) && /* @__PURE__ */ jsx(
        ContentHeader,
        {
          title,
          titleComponent,
          textAlign: align
        }
      ),
      /* @__PURE__ */ jsx(
        Grid,
        {
          container: true,
          justifyContent: align === "center" ? align : "flex-start",
          spacing: 2,
          component: "ul",
          classes,
          children: providerElements
        }
      )
    ] })
  ] });
};
const SingleSignInPage = ({
  provider,
  auto,
  onSignInSuccess,
  ErrorComponent
}) => {
  const classes = useStyles();
  const authApi = useApi(provider.apiRef);
  const configApi = useApi(configApiRef);
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const analytics = useAnalytics();
  const [error, setError] = useState();
  const [showLoginPage, setShowLoginPage] = useState(false);
  const [searchParams, _setSearchParams] = useSearchParams();
  const errorParam = searchParams.get("error");
  const login = async ({ checkExisting, showPopup }) => {
    try {
      let identityResponse;
      if (checkExisting) {
        identityResponse = await authApi.getBackstageIdentity({
          optional: true
        });
      }
      if (!identityResponse && (showPopup || auto) && !errorParam) {
        setShowLoginPage(true);
        identityResponse = await authApi.getBackstageIdentity({
          instantPopup: true
        });
        if (!identityResponse) {
          throw new Error(
            `The ${provider.title} provider is not configured to support sign-in`
          );
        }
      }
      if (!identityResponse) {
        setShowLoginPage(true);
        return;
      }
      const profile = await authApi.getProfile();
      onSignInSuccess(
        UserIdentity.create({
          identity: identityResponse.identity,
          authApi,
          profile
        })
      );
      analytics.captureEvent("signIn", "success");
    } catch (err) {
      setError(err);
      setShowLoginPage(true);
    }
  };
  useMountEffect(() => {
    if (errorParam) {
      setError(new Error(errorParam));
    }
    login({ checkExisting: true });
  });
  return showLoginPage ? /* @__PURE__ */ jsxs(Page, { themeId: "home", children: [
    /* @__PURE__ */ jsx(Header, { title: configApi.getString("app.title") }),
    /* @__PURE__ */ jsx(Content, { children: /* @__PURE__ */ jsx(
      Grid,
      {
        container: true,
        justifyContent: "center",
        spacing: 2,
        component: "ul",
        classes,
        children: /* @__PURE__ */ jsx(GridItem, { children: /* @__PURE__ */ jsxs(
          InfoCard,
          {
            variant: "fullHeight",
            title: provider.title,
            actions: /* @__PURE__ */ jsx(
              Button,
              {
                color: "primary",
                variant: "outlined",
                onClick: () => {
                  login({ showPopup: true });
                },
                children: t("signIn.title")
              }
            ),
            children: [
              /* @__PURE__ */ jsx(Typography, { variant: "body1", children: provider.message }),
              error && error.name !== "PopupRejectedError" && (ErrorComponent ? /* @__PURE__ */ jsx(ErrorComponent, { error }) : /* @__PURE__ */ jsx(Typography, { variant: "body1", color: "error", children: error.message }))
            ]
          }
        ) })
      }
    ) })
  ] }) : /* @__PURE__ */ jsx(Progress, {});
};
function SignInPage(props) {
  if ("provider" in props) {
    return /* @__PURE__ */ jsx(SingleSignInPage, { ...props });
  }
  return /* @__PURE__ */ jsx(MultiSignInPage, { ...props });
}

export { MultiSignInPage, SignInPage, SingleSignInPage };
//# sourceMappingURL=SignInPage.esm.js.map
