import { jsx, Fragment } from 'react/jsx-runtime';
import BottomNavigationAction from '@material-ui/core/BottomNavigationAction';
import { makeStyles } from '@material-ui/core/styles';
import { useContext } from 'react';
import { useLocation } from 'react-router-dom';
import { Link } from '../../components/Link/Link.esm.js';
import { SidebarConfigContext } from './config.esm.js';
import { MobileSidebarContext } from './MobileSidebarContext.esm.js';
import { useSidebarPinState } from './SidebarPinStateContext.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      flexGrow: 0,
      margin: theme.spacing(0, 2),
      color: theme.palette.navigation.color
    },
    selected: (props) => ({
      color: `${theme.palette.navigation.selectedColor}!important`,
      borderTop: `solid ${props.sidebarConfig.selectedIndicatorWidth}px ${theme.palette.navigation.indicator}`,
      marginTop: "-1px"
    }),
    label: {
      display: "none"
    }
  })
);
const MobileSidebarGroup = (props) => {
  const { to, label, icon, value } = props;
  const { sidebarConfig } = useContext(SidebarConfigContext);
  const classes = useStyles({ sidebarConfig });
  const location = useLocation();
  const { selectedMenuItemIndex, setSelectedMenuItemIndex } = useContext(MobileSidebarContext);
  const onChange = (_, value2) => {
    if (value2 === selectedMenuItemIndex) {
      setSelectedMenuItemIndex(-1);
    } else {
      setSelectedMenuItemIndex(value2);
    }
  };
  const selected = value === selectedMenuItemIndex && selectedMenuItemIndex >= 0 || !(value === selectedMenuItemIndex) && !(selectedMenuItemIndex >= 0) && to === location.pathname;
  return (
    // Material UI issue: https://github.com/mui-org/material-ui/issues/27820
    /* @__PURE__ */ jsx(
      BottomNavigationAction,
      {
        "aria-label": label,
        label,
        icon,
        component: Link,
        to: to ? to : location.pathname,
        onChange,
        value,
        selected,
        classes
      }
    )
  );
};
const SidebarGroup = (props) => {
  const { children, to, label, icon, value } = props;
  const { isMobile } = useSidebarPinState();
  return isMobile ? /* @__PURE__ */ jsx(MobileSidebarGroup, { to, label, icon, value }) : /* @__PURE__ */ jsx(Fragment, { children });
};

export { SidebarGroup };
//# sourceMappingURL=SidebarGroup.esm.js.map
