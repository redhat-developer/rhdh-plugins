{"version":3,"file":"DefaultAzureCredentialsProvider.esm.js","sources":["../../src/azureBlobStorage/DefaultAzureCredentialsProvider.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DefaultAzureCredential,\n  ClientSecretCredential,\n  TokenCredential,\n} from '@azure/identity';\nimport { AzureBlobStorageIntegrationConfig } from './config';\nimport { AzureCredentialsManager } from './types';\nimport { ScmIntegrationRegistry } from '../registry';\n\n/**\n * Default implementation of AzureCredentialsManager that supports multiple Azure Blob Storage integrations.\n * @public\n */\nexport class DefaultAzureCredentialsManager implements AzureCredentialsManager {\n  private cachedCredentials: Map<string, TokenCredential>;\n\n  private constructor(\n    private readonly configProviders: Map<\n      string,\n      AzureBlobStorageIntegrationConfig\n    >,\n  ) {\n    this.cachedCredentials = new Map<string, TokenCredential>();\n  }\n\n  /**\n   * Creates an instance of DefaultAzureCredentialsManager from a Backstage integration registry.\n   */\n  static fromIntegrations(\n    integrations: ScmIntegrationRegistry,\n  ): DefaultAzureCredentialsManager {\n    const configProviders = integrations.azureBlobStorage\n      .list()\n      .reduce((acc, integration) => {\n        acc.set(\n          integration.config.accountName || 'default',\n          integration.config,\n        );\n        return acc;\n      }, new Map<string, AzureBlobStorageIntegrationConfig>());\n\n    return new DefaultAzureCredentialsManager(configProviders);\n  }\n\n  private createCredential(\n    config: AzureBlobStorageIntegrationConfig,\n  ): TokenCredential {\n    if (\n      config.aadCredential &&\n      config.aadCredential.clientId &&\n      config.aadCredential.clientSecret &&\n      config.aadCredential.tenantId\n    ) {\n      return new ClientSecretCredential(\n        config.aadCredential.tenantId,\n        config.aadCredential.clientId,\n        config.aadCredential.clientSecret,\n      );\n    }\n\n    return new DefaultAzureCredential();\n  }\n\n  async getCredentials(accountName: string): Promise<TokenCredential> {\n    if (this.cachedCredentials.has(accountName)) {\n      return this.cachedCredentials.get(accountName)!;\n    }\n\n    const config = this.configProviders.get(accountName);\n    if (!config) {\n      throw new Error(`No configuration found for account: ${accountName}`);\n    }\n\n    const credential = this.createCredential(config);\n\n    // Cache the credentials for future use\n    this.cachedCredentials.set(accountName, credential);\n\n    return credential;\n  }\n}\n"],"names":[],"mappings":";;AA6BO,MAAM,8BAAA,CAAkE;AAAA,EAGrE,YACW,eAAA,EAIjB;AAJiB,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA;AAKjB,IAAA,IAAA,CAAK,iBAAA,uBAAwB,GAAA,EAA6B;AAAA,EAC5D;AAAA,EATQ,iBAAA;AAAA;AAAA;AAAA;AAAA,EAcR,OAAO,iBACL,YAAA,EACgC;AAChC,IAAA,MAAM,eAAA,GAAkB,aAAa,gBAAA,CAClC,IAAA,GACA,MAAA,CAAO,CAAC,KAAK,WAAA,KAAgB;AAC5B,MAAA,GAAA,CAAI,GAAA;AAAA,QACF,WAAA,CAAY,OAAO,WAAA,IAAe,SAAA;AAAA,QAClC,WAAA,CAAY;AAAA,OACd;AACA,MAAA,OAAO,GAAA;AAAA,IACT,CAAA,kBAAG,IAAI,GAAA,EAAgD,CAAA;AAEzD,IAAA,OAAO,IAAI,+BAA+B,eAAe,CAAA;AAAA,EAC3D;AAAA,EAEQ,iBACN,MAAA,EACiB;AACjB,IAAA,IACE,MAAA,CAAO,aAAA,IACP,MAAA,CAAO,aAAA,CAAc,QAAA,IACrB,OAAO,aAAA,CAAc,YAAA,IACrB,MAAA,CAAO,aAAA,CAAc,QAAA,EACrB;AACA,MAAA,OAAO,IAAI,sBAAA;AAAA,QACT,OAAO,aAAA,CAAc,QAAA;AAAA,QACrB,OAAO,aAAA,CAAc,QAAA;AAAA,QACrB,OAAO,aAAA,CAAc;AAAA,OACvB;AAAA,IACF;AAEA,IAAA,OAAO,IAAI,sBAAA,EAAuB;AAAA,EACpC;AAAA,EAEA,MAAM,eAAe,WAAA,EAA+C;AAClE,IAAA,IAAI,IAAA,CAAK,iBAAA,CAAkB,GAAA,CAAI,WAAW,CAAA,EAAG;AAC3C,MAAA,OAAO,IAAA,CAAK,iBAAA,CAAkB,GAAA,CAAI,WAAW,CAAA;AAAA,IAC/C;AAEA,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,eAAA,CAAgB,GAAA,CAAI,WAAW,CAAA;AACnD,IAAA,IAAI,CAAC,MAAA,EAAQ;AACX,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,oCAAA,EAAuC,WAAW,CAAA,CAAE,CAAA;AAAA,IACtE;AAEA,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,gBAAA,CAAiB,MAAM,CAAA;AAG/C,IAAA,IAAA,CAAK,iBAAA,CAAkB,GAAA,CAAI,WAAA,EAAa,UAAU,CAAA;AAElD,IAAA,OAAO,UAAA;AAAA,EACT;AACF;;;;"}