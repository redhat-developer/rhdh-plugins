{"version":3,"file":"AwsCodeCommitIntegration.esm.js","sources":["../../src/awsCodeCommit/AwsCodeCommitIntegration.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  AwsCodeCommitIntegrationConfig,\n  readAwsCodeCommitIntegrationConfigs,\n} from './config';\n\n/**\n * Integrates with AWS CodeCommit.\n *\n * @public\n */\nexport class AwsCodeCommitIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AwsCodeCommitIntegration> = ({\n    config,\n  }) => {\n    const configs = readAwsCodeCommitIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.awsCodeCommit') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new AwsCodeCommitIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  get type(): string {\n    return 'awsCodeCommit';\n  }\n\n  get config(): AwsCodeCommitIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  constructor(\n    private readonly integrationConfig: AwsCodeCommitIntegrationConfig,\n  ) {}\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number | undefined;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    return resolved;\n  }\n  resolveEditUrl(url: string): string {\n    const parsedUrl = new URL(url);\n    const pathMatch = parsedUrl.pathname.match(\n      /^\\/codesuite\\/codecommit\\/repositories\\/([^\\/]+)\\//,\n    );\n    if (!pathMatch) {\n      throw new Error(``);\n    }\n    const [, repositoryName] = pathMatch;\n    return replaceCodeCommitUrlType(url, repositoryName, 'edit');\n  }\n}\n\n/**\n * Takes a CodeCommit URL and replaces the type part (blob, tree etc).\n *\n * @param url - The original URL\n * @param type - The desired type, e.g. 'blob', 'edit'\n * @public\n */\nexport function replaceCodeCommitUrlType(\n  url: string,\n  repositoryName: string,\n  type: 'browse' | 'edit',\n): string {\n  const newString = type === 'edit' ? `files/edit` : type;\n  return url.replace(\n    new RegExp(\n      `\\/codesuite\\/codecommit\\/repositories\\/${repositoryName}\\/(browse|files\\/edit)\\/`,\n    ),\n    `/codesuite/codecommit/repositories/${repositoryName}/${newString}/`,\n  );\n}\n"],"names":[],"mappings":";;;AA4BO,MAAM,wBAAA,CAAmD;AAAA,EAyB9D,YACmB,iBAAA,EACjB;AADiB,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA;AAAA,EAChB;AAAA,EA1BH,OAAO,UAA4D,CAAC;AAAA,IAClE;AAAA,GACF,KAAM;AACJ,IAAA,MAAM,OAAA,GAAU,mCAAA;AAAA,MACd,MAAA,CAAO,sBAAA,CAAuB,4BAA4B,CAAA,IAAK;AAAC,KAClE;AACA,IAAA,OAAO,iBAAA;AAAA,MACL,QAAQ,GAAA,CAAI,CAAA,CAAA,KAAK,IAAI,wBAAA,CAAyB,CAAC,CAAC,CAAA;AAAA,MAChD,CAAA,CAAA,KAAK,EAAE,MAAA,CAAO;AAAA,KAChB;AAAA,EACF,CAAA;AAAA,EAEA,IAAI,IAAA,GAAe;AACjB,IAAA,OAAO,eAAA;AAAA,EACT;AAAA,EAEA,IAAI,MAAA,GAAyC;AAC3C,IAAA,OAAO,IAAA,CAAK,iBAAA;AAAA,EACd;AAAA,EAEA,IAAI,KAAA,GAAgB;AAClB,IAAA,OAAO,KAAK,iBAAA,CAAkB,IAAA;AAAA,EAChC;AAAA,EAMA,WAAW,OAAA,EAIA;AACT,IAAA,MAAM,QAAA,GAAW,qBAAqB,OAAO,CAAA;AAC7C,IAAA,OAAO,QAAA;AAAA,EACT;AAAA,EACA,eAAe,GAAA,EAAqB;AAClC,IAAA,MAAM,SAAA,GAAY,IAAI,GAAA,CAAI,GAAG,CAAA;AAC7B,IAAA,MAAM,SAAA,GAAY,UAAU,QAAA,CAAS,KAAA;AAAA,MACnC;AAAA,KACF;AACA,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,MAAM,CAAA,CAAE,CAAA;AAAA,IACpB;AACA,IAAA,MAAM,GAAG,cAAc,CAAA,GAAI,SAAA;AAC3B,IAAA,OAAO,wBAAA,CAAyB,GAAA,EAAK,cAAsB,CAAA;AAAA,EAC7D;AACF;AASO,SAAS,wBAAA,CACd,GAAA,EACA,cAAA,EACA,IAAA,EACQ;AACR,EAAA,MAAM,SAAA,GAA8B,CAAA,UAAA,CAAA,CAAe;AACnD,EAAA,OAAO,GAAA,CAAI,OAAA;AAAA,IACT,IAAI,MAAA;AAAA,MACF,sCAA0C,cAAc,CAAA,qBAAA;AAAA,KAC1D;AAAA,IACA,CAAA,mCAAA,EAAsC,cAAc,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA;AAAA,GACnE;AACF;;;;"}