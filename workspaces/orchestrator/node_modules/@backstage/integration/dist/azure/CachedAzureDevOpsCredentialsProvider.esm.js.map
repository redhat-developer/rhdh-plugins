{"version":3,"file":"CachedAzureDevOpsCredentialsProvider.esm.js","sources":["../../src/azure/CachedAzureDevOpsCredentialsProvider.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AzureDevOpsCredential, PersonalAccessTokenCredential } from './config';\nimport {\n  ClientAssertionCredential,\n  ClientSecretCredential,\n  ManagedIdentityCredential,\n  TokenCredential,\n} from '@azure/identity';\nimport {\n  AzureDevOpsCredentials,\n  AzureDevOpsCredentialsProvider,\n} from './types';\nimport { ManagedIdentityClientAssertion } from './ManagedIdentityClientAssertion';\n\ntype CachedAzureDevOpsCredentials = AzureDevOpsCredentials & {\n  expiresAt?: number;\n};\n\nfunction exhaustiveCheck(_param: never) {}\n\nconst tenMinutes = 1000 * 60 * 10;\n\n/**\n * A credentials provider that caches the credentials for as long as it is valid.\n *\n * @public\n */\nexport class CachedAzureDevOpsCredentialsProvider\n  implements AzureDevOpsCredentialsProvider\n{\n  azureDevOpsScope = '499b84ac-1321-427f-aa17-267ca6975798/.default';\n  cached: CachedAzureDevOpsCredentials | undefined;\n\n  static fromAzureDevOpsCredential(\n    credential: AzureDevOpsCredential,\n  ): CachedAzureDevOpsCredentialsProvider {\n    switch (credential.kind) {\n      case 'PersonalAccessToken':\n        return CachedAzureDevOpsCredentialsProvider.fromPersonalAccessTokenCredential(\n          credential,\n        );\n      case 'ClientSecret':\n        return CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n          new ClientSecretCredential(\n            credential.tenantId,\n            credential.clientId,\n            credential.clientSecret,\n          ),\n        );\n\n      case 'ManagedIdentityClientAssertion': {\n        const clientAssertion = new ManagedIdentityClientAssertion({\n          clientId: credential.managedIdentityClientId,\n        });\n\n        return CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n          new ClientAssertionCredential(\n            credential.tenantId,\n            credential.clientId,\n            () => clientAssertion.getSignedAssertion(),\n          ),\n        );\n      }\n\n      case 'ManagedIdentity':\n        return CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n          credential.clientId === 'system-assigned'\n            ? new ManagedIdentityCredential()\n            : new ManagedIdentityCredential(credential.clientId),\n        );\n      default:\n        exhaustiveCheck(credential);\n\n        throw new Error(\n          `Credential kind '${(credential as any).kind}' not supported`,\n        );\n    }\n  }\n\n  static fromTokenCredential(\n    credential: TokenCredential,\n  ): CachedAzureDevOpsCredentialsProvider {\n    return new CachedAzureDevOpsCredentialsProvider(credential);\n  }\n\n  static fromPersonalAccessTokenCredential(\n    credential: PersonalAccessTokenCredential,\n  ) {\n    return new CachedAzureDevOpsCredentialsProvider(\n      credential.personalAccessToken,\n    );\n  }\n\n  private constructor(private readonly credential: TokenCredential | string) {}\n\n  async getCredentials(): Promise<AzureDevOpsCredentials> {\n    if (\n      this.cached === undefined ||\n      (this.cached.expiresAt !== undefined &&\n        Date.now() > this.cached.expiresAt)\n    ) {\n      if (typeof this.credential === 'string') {\n        this.cached = {\n          headers: {\n            Authorization: `Basic ${btoa(`:${this.credential}`)}`,\n          },\n          type: 'pat',\n          token: this.credential,\n        };\n      } else {\n        const accessToken = await this.credential.getToken(\n          this.azureDevOpsScope,\n        );\n\n        if (!accessToken) {\n          throw new Error('Failed to retrieve access token');\n        }\n\n        this.cached = {\n          expiresAt: accessToken.expiresOnTimestamp - tenMinutes,\n          headers: {\n            Authorization: `Bearer ${accessToken.token}`,\n          },\n          type: 'bearer',\n          token: accessToken.token,\n        };\n      }\n    }\n\n    return this.cached;\n  }\n}\n"],"names":[],"mappings":";;;AAkCA,MAAM,UAAA,GAAa,MAAO,EAAA,GAAK,EAAA;AAOxB,MAAM,oCAAA,CAEb;AAAA,EAgEU,YAA6B,UAAA,EAAsC;AAAtC,IAAA,IAAA,CAAA,UAAA,GAAA,UAAA;AAAA,EAAuC;AAAA,EA/D5E,gBAAA,GAAmB,+CAAA;AAAA,EACnB,MAAA;AAAA,EAEA,OAAO,0BACL,UAAA,EACsC;AACtC,IAAA,QAAQ,WAAW,IAAA;AAAM,MACvB,KAAK,qBAAA;AACH,QAAA,OAAO,oCAAA,CAAqC,iCAAA;AAAA,UAC1C;AAAA,SACF;AAAA,MACF,KAAK,cAAA;AACH,QAAA,OAAO,oCAAA,CAAqC,mBAAA;AAAA,UAC1C,IAAI,sBAAA;AAAA,YACF,UAAA,CAAW,QAAA;AAAA,YACX,UAAA,CAAW,QAAA;AAAA,YACX,UAAA,CAAW;AAAA;AACb,SACF;AAAA,MAEF,KAAK,gCAAA,EAAkC;AACrC,QAAA,MAAM,eAAA,GAAkB,IAAI,8BAAA,CAA+B;AAAA,UACzD,UAAU,UAAA,CAAW;AAAA,SACtB,CAAA;AAED,QAAA,OAAO,oCAAA,CAAqC,mBAAA;AAAA,UAC1C,IAAI,yBAAA;AAAA,YACF,UAAA,CAAW,QAAA;AAAA,YACX,UAAA,CAAW,QAAA;AAAA,YACX,MAAM,gBAAgB,kBAAA;AAAmB;AAC3C,SACF;AAAA,MACF;AAAA,MAEA,KAAK,iBAAA;AACH,QAAA,OAAO,oCAAA,CAAqC,mBAAA;AAAA,UAC1C,UAAA,CAAW,aAAa,iBAAA,GACpB,IAAI,2BAA0B,GAC9B,IAAI,yBAAA,CAA0B,UAAA,CAAW,QAAQ;AAAA,SACvD;AAAA,MACF;AAGE,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,iBAAA,EAAqB,WAAmB,IAAI,CAAA,eAAA;AAAA,SAC9C;AAAA;AACJ,EACF;AAAA,EAEA,OAAO,oBACL,UAAA,EACsC;AACtC,IAAA,OAAO,IAAI,qCAAqC,UAAU,CAAA;AAAA,EAC5D;AAAA,EAEA,OAAO,kCACL,UAAA,EACA;AACA,IAAA,OAAO,IAAI,oCAAA;AAAA,MACT,UAAA,CAAW;AAAA,KACb;AAAA,EACF;AAAA,EAIA,MAAM,cAAA,GAAkD;AACtD,IAAA,IACE,IAAA,CAAK,MAAA,KAAW,MAAA,IACf,IAAA,CAAK,MAAA,CAAO,SAAA,KAAc,MAAA,IACzB,IAAA,CAAK,GAAA,EAAI,GAAI,IAAA,CAAK,MAAA,CAAO,SAAA,EAC3B;AACA,MAAA,IAAI,OAAO,IAAA,CAAK,UAAA,KAAe,QAAA,EAAU;AACvC,QAAA,IAAA,CAAK,MAAA,GAAS;AAAA,UACZ,OAAA,EAAS;AAAA,YACP,eAAe,CAAA,MAAA,EAAS,IAAA,CAAK,IAAI,IAAA,CAAK,UAAU,EAAE,CAAC,CAAA;AAAA,WACrD;AAAA,UACA,IAAA,EAAM,KAAA;AAAA,UACN,OAAO,IAAA,CAAK;AAAA,SACd;AAAA,MACF,CAAA,MAAO;AACL,QAAA,MAAM,WAAA,GAAc,MAAM,IAAA,CAAK,UAAA,CAAW,QAAA;AAAA,UACxC,IAAA,CAAK;AAAA,SACP;AAEA,QAAA,IAAI,CAAC,WAAA,EAAa;AAChB,UAAA,MAAM,IAAI,MAAM,iCAAiC,CAAA;AAAA,QACnD;AAEA,QAAA,IAAA,CAAK,MAAA,GAAS;AAAA,UACZ,SAAA,EAAW,YAAY,kBAAA,GAAqB,UAAA;AAAA,UAC5C,OAAA,EAAS;AAAA,YACP,aAAA,EAAe,CAAA,OAAA,EAAU,WAAA,CAAY,KAAK,CAAA;AAAA,WAC5C;AAAA,UACA,IAAA,EAAM,QAAA;AAAA,UACN,OAAO,WAAA,CAAY;AAAA,SACrB;AAAA,MACF;AAAA,IACF;AAEA,IAAA,OAAO,IAAA,CAAK,MAAA;AAAA,EACd;AACF;;;;"}