{"version":3,"file":"DefaultAzureDevOpsCredentialsProvider.esm.js","sources":["../../src/azure/DefaultAzureDevOpsCredentialsProvider.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AzureDevOpsCredentials,\n  AzureDevOpsCredentialsProvider,\n} from './types';\nimport { CachedAzureDevOpsCredentialsProvider } from './CachedAzureDevOpsCredentialsProvider';\nimport { ScmIntegrationRegistry } from '../registry';\nimport { DefaultAzureCredential } from '@azure/identity';\n\n/**\n * Default implementation of AzureDevOpsCredentialsProvider.\n * @public\n */\nexport class DefaultAzureDevOpsCredentialsProvider\n  implements AzureDevOpsCredentialsProvider\n{\n  static fromIntegrations(\n    integrations: ScmIntegrationRegistry,\n  ): DefaultAzureDevOpsCredentialsProvider {\n    const providers = integrations.azure.list().reduce((acc, integration) => {\n      integration.config.credentials?.forEach(credential => {\n        if (\n          credential.organizations === undefined ||\n          credential.organizations.length === 0\n        ) {\n          if (acc.get(integration.config.host) === undefined) {\n            acc.set(\n              integration.config.host,\n              CachedAzureDevOpsCredentialsProvider.fromAzureDevOpsCredential(\n                credential,\n              ),\n            );\n          }\n        } else {\n          const provider =\n            CachedAzureDevOpsCredentialsProvider.fromAzureDevOpsCredential(\n              credential,\n            );\n          credential.organizations?.forEach(organization => {\n            acc.set(`${integration.config.host}/${organization}`, provider);\n          });\n        }\n      });\n\n      if (\n        integration.config.host === 'dev.azure.com' &&\n        acc.get(integration.config.host) === undefined\n      ) {\n        acc.set(\n          integration.config.host,\n          CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n            new DefaultAzureCredential(),\n          ),\n        );\n      }\n\n      return acc;\n    }, new Map<string, CachedAzureDevOpsCredentialsProvider>());\n\n    return new DefaultAzureDevOpsCredentialsProvider(providers);\n  }\n\n  private constructor(\n    private readonly providers: Map<\n      string,\n      CachedAzureDevOpsCredentialsProvider\n    >,\n  ) {}\n\n  private forAzureDevOpsServerOrganization(\n    url: URL,\n  ): AzureDevOpsCredentialsProvider | undefined {\n    const parts = url.pathname.split('/').filter(part => part !== '');\n    if (url.host !== 'dev.azure.com' && parts.length > 0) {\n      if (parts[0] !== 'tfs') {\n        // url format: https://{host}/{organization}\n        return this.providers.get(`${url.host}/${parts[0]}`);\n      } else if (parts[0] === 'tfs' && parts.length > 1) {\n        // url format: https://{host}/tfs/{organization}\n        return this.providers.get(`${url.host}/${parts[1]}`);\n      }\n    }\n\n    return undefined;\n  }\n\n  private forAzureDevOpsOrganization(\n    url: URL,\n  ): AzureDevOpsCredentialsProvider | undefined {\n    const parts = url.pathname.split('/').filter(part => part !== '');\n    if (url.host === 'dev.azure.com' && parts.length > 0) {\n      // url format: https://{host}/{organization}\n      return this.providers.get(`${url.host}/${parts[0]}`);\n    }\n\n    return undefined;\n  }\n\n  private forHost(url: URL): AzureDevOpsCredentialsProvider | undefined {\n    return this.providers.get(url.host);\n  }\n\n  async getCredentials(opts: {\n    url: string;\n  }): Promise<AzureDevOpsCredentials | undefined> {\n    const url = new URL(opts.url);\n    const provider =\n      this.forAzureDevOpsOrganization(url) ??\n      this.forAzureDevOpsServerOrganization(url) ??\n      this.forHost(url);\n\n    if (provider === undefined) {\n      return undefined;\n    }\n\n    return provider.getCredentials(opts);\n  }\n}\n"],"names":[],"mappings":"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"}