{"version":3,"file":"AzureIntegration.esm.js","sources":["../../src/azure/AzureIntegration.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, isValidUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AzureUrl } from './AzureUrl';\nimport { AzureIntegrationConfig, readAzureIntegrationConfigs } from './config';\n\n/**\n * Microsoft Azure based integration.\n *\n * @public\n */\nexport class AzureIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AzureIntegration> = ({ config }) => {\n    const configs = readAzureIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.azure') ?? [],\n    );\n\n    return basicIntegrations(\n      configs.map(c => new AzureIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: AzureIntegrationConfig) {}\n\n  get type(): string {\n    return 'azure';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AzureIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  /*\n   * Azure repo URLs on the form with a `path` query param are treated specially.\n   *\n   * Example base URL: https://dev.azure.com/organization/project/_git/repository?path=%2Fcatalog-info.yaml\n   */\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base } = options;\n\n    // If we can parse the url, it is absolute - then return it verbatim\n    if (isValidUrl(url)) {\n      return url;\n    }\n\n    try {\n      const azureUrl = AzureUrl.fromRepoUrl(base);\n      const newUrl = new URL(base);\n\n      // We lean on the URL path resolution logic to resolve the path param\n      const mockBaseUrl = new URL(`https://a.com${azureUrl.getPath() ?? ''}`);\n      const updatedPath = new URL(url, mockBaseUrl).pathname;\n      newUrl.searchParams.set('path', updatedPath);\n\n      if (options.lineNumber) {\n        newUrl.searchParams.set('line', String(options.lineNumber));\n        newUrl.searchParams.set('lineEnd', String(options.lineNumber + 1));\n        newUrl.searchParams.set('lineStartColumn', '1');\n        newUrl.searchParams.set('lineEndColumn', '1');\n      }\n\n      return newUrl.toString();\n    } catch {\n      // If not an actual file path within a repo, treat the URL as raw\n      return new URL(url, base).toString();\n    }\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for Azure, fallback to view url as I don't know\n    // how azure works.\n    return url;\n  }\n}\n"],"names":[],"mappings":";;;;AA0BO,MAAM,gBAAA,CAA2C;AAAA,EAYtD,YAA6B,iBAAA,EAA2C;AAA3C,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA;AAAA,EAA4C;AAAA,EAXzE,OAAO,OAAA,GAAoD,CAAC,EAAE,QAAO,KAAM;AACzE,IAAA,MAAM,OAAA,GAAU,2BAAA;AAAA,MACd,MAAA,CAAO,sBAAA,CAAuB,oBAAoB,CAAA,IAAK;AAAC,KAC1D;AAEA,IAAA,OAAO,iBAAA;AAAA,MACL,QAAQ,GAAA,CAAI,CAAA,CAAA,KAAK,IAAI,gBAAA,CAAiB,CAAC,CAAC,CAAA;AAAA,MACxC,CAAA,CAAA,KAAK,EAAE,MAAA,CAAO;AAAA,KAChB;AAAA,EACF,CAAA;AAAA,EAIA,IAAI,IAAA,GAAe;AACjB,IAAA,OAAO,OAAA;AAAA,EACT;AAAA,EAEA,IAAI,KAAA,GAAgB;AAClB,IAAA,OAAO,KAAK,iBAAA,CAAkB,IAAA;AAAA,EAChC;AAAA,EAEA,IAAI,MAAA,GAAiC;AACnC,IAAA,OAAO,IAAA,CAAK,iBAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,OAAA,EAIA;AACT,IAAA,MAAM,EAAE,GAAA,EAAK,IAAA,EAAK,GAAI,OAAA;AAGtB,IAAA,IAAI,UAAA,CAAW,GAAG,CAAA,EAAG;AACnB,MAAA,OAAO,GAAA;AAAA,IACT;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,QAAA,GAAW,QAAA,CAAS,WAAA,CAAY,IAAI,CAAA;AAC1C,MAAA,MAAM,MAAA,GAAS,IAAI,GAAA,CAAI,IAAI,CAAA;AAG3B,MAAA,MAAM,WAAA,GAAc,IAAI,GAAA,CAAI,CAAA,aAAA,EAAgB,SAAS,OAAA,EAAQ,IAAK,EAAE,CAAA,CAAE,CAAA;AACtE,MAAA,MAAM,WAAA,GAAc,IAAI,GAAA,CAAI,GAAA,EAAK,WAAW,CAAA,CAAE,QAAA;AAC9C,MAAA,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,MAAA,EAAQ,WAAW,CAAA;AAE3C,MAAA,IAAI,QAAQ,UAAA,EAAY;AACtB,QAAA,MAAA,CAAO,aAAa,GAAA,CAAI,MAAA,EAAQ,MAAA,CAAO,OAAA,CAAQ,UAAU,CAAC,CAAA;AAC1D,QAAA,MAAA,CAAO,aAAa,GAAA,CAAI,SAAA,EAAW,OAAO,OAAA,CAAQ,UAAA,GAAa,CAAC,CAAC,CAAA;AACjE,QAAA,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,iBAAA,EAAmB,GAAG,CAAA;AAC9C,QAAA,MAAA,CAAO,YAAA,CAAa,GAAA,CAAI,eAAA,EAAiB,GAAG,CAAA;AAAA,MAC9C;AAEA,MAAA,OAAO,OAAO,QAAA,EAAS;AAAA,IACzB,CAAA,CAAA,MAAQ;AAEN,MAAA,OAAO,IAAI,GAAA,CAAI,GAAA,EAAK,IAAI,EAAE,QAAA,EAAS;AAAA,IACrC;AAAA,EACF;AAAA,EAEA,eAAe,GAAA,EAAqB;AAGlC,IAAA,OAAO,GAAA;AAAA,EACT;AACF;;;;"}