{"version":3,"file":"ManagedIdentityClientAssertion.cjs.js","sources":["../../src/azure/ManagedIdentityClientAssertion.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ManagedIdentityCredential } from '@azure/identity';\nimport { ClientAssertion } from './ClientAssertion';\n\nexport type ManagedIdentityClientAssertionOptions = {\n  clientId?: string;\n};\n\nconst fiveMinutes = 5 * 60 * 1000; // 5 minutes in milliseconds\nconst expiresWithinFiveMinutes = (clientAssertion: ClientAssertion) =>\n  clientAssertion.expiresOnTimestamp - Date.now() <= fiveMinutes;\n\n/**\n * Class representing a Managed Identity Client Assertion.\n * This class is responsible for obtaining a signed client assertion using Azure Managed Identity.\n */\nexport class ManagedIdentityClientAssertion {\n  private credential: ManagedIdentityCredential;\n  private clientAssertion?: ClientAssertion;\n\n  /**\n   * Creates an instance of ManagedIdentityClientAssertion.\n   * @param options - Optional parameters for the ManagedIdentityClientAssertion.\n   *                  - clientId: The client ID of the managed identity. If not provided, 'system-assigned' is used.\n   */\n  constructor(options?: ManagedIdentityClientAssertionOptions) {\n    let { clientId } = options || {};\n    clientId ??= 'system-assigned';\n\n    this.credential =\n      clientId === 'system-assigned'\n        ? new ManagedIdentityCredential()\n        : new ManagedIdentityCredential(clientId);\n  }\n\n  /**\n   * Gets a signed client assertion.\n   * If a valid client assertion is already cached which doesn't expire soon, it returns the cached assertion.\n   * Otherwise, it obtains a new access token and creates a new client assertion.\n   * @returns A promise that resolves to the signed client assertion.\n   */\n  public async getSignedAssertion(): Promise<string> {\n    if (\n      this.clientAssertion !== undefined &&\n      !expiresWithinFiveMinutes(this.clientAssertion)\n    ) {\n      return this.clientAssertion.signedAssertion;\n    }\n\n    const accessToken = await this.credential.getToken(\n      'api://AzureADTokenExchange',\n    );\n\n    this.clientAssertion = {\n      signedAssertion: accessToken.token,\n      expiresOnTimestamp: accessToken.expiresOnTimestamp,\n    };\n\n    return accessToken.token;\n  }\n}\n"],"names":["ManagedIdentityCredential"],"mappings":";;;;AAsBA,MAAM,WAAA,GAAc,IAAI,EAAA,GAAK,GAAA;AAC7B,MAAM,2BAA2B,CAAC,eAAA,KAChC,gBAAgB,kBAAA,GAAqB,IAAA,CAAK,KAAI,IAAK,WAAA;AAM9C,MAAM,8BAAA,CAA+B;AAAA,EAClC,UAAA;AAAA,EACA,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOR,YAAY,OAAA,EAAiD;AAC3D,IAAA,IAAI,EAAE,QAAA,EAAS,GAAI,OAAA,IAAW,EAAC;AAC/B,IAAA,QAAA,KAAa,iBAAA;AAEb,IAAA,IAAA,CAAK,UAAA,GACH,aAAa,iBAAA,GACT,IAAIA,oCAA0B,GAC9B,IAAIA,mCAA0B,QAAQ,CAAA;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,kBAAA,GAAsC;AACjD,IAAA,IACE,KAAK,eAAA,KAAoB,MAAA,IACzB,CAAC,wBAAA,CAAyB,IAAA,CAAK,eAAe,CAAA,EAC9C;AACA,MAAA,OAAO,KAAK,eAAA,CAAgB,eAAA;AAAA,IAC9B;AAEA,IAAA,MAAM,WAAA,GAAc,MAAM,IAAA,CAAK,UAAA,CAAW,QAAA;AAAA,MACxC;AAAA,KACF;AAEA,IAAA,IAAA,CAAK,eAAA,GAAkB;AAAA,MACrB,iBAAiB,WAAA,CAAY,KAAA;AAAA,MAC7B,oBAAoB,WAAA,CAAY;AAAA,KAClC;AAEA,IAAA,OAAO,WAAA,CAAY,KAAA;AAAA,EACrB;AACF;;;;"}