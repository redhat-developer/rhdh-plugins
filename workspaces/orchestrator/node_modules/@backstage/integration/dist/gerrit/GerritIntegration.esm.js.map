{"version":3,"file":"GerritIntegration.esm.js","sources":["../../src/gerrit/GerritIntegration.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GerritIntegrationConfig,\n  readGerritIntegrationConfigs,\n} from './config';\nimport { buildGerritEditUrl, parseGitilesUrlRef } from './core';\n\n/**\n * A Gerrit based integration.\n *\n * @public\n */\nexport class GerritIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GerritIntegration> = ({ config }) => {\n    const configs = readGerritIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gerrit') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GerritIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GerritIntegrationConfig) {}\n\n  get type(): string {\n    return 'gerrit';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GerritIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base, lineNumber } = options;\n    let updated;\n    if (url.startsWith('/')) {\n      const { basePath } = parseGitilesUrlRef(this.config, base);\n      return basePath + url;\n    }\n    if (url) {\n      updated = new URL(url, base);\n    } else {\n      updated = new URL(base);\n    }\n    if (lineNumber) {\n      updated.hash = lineNumber.toString();\n    }\n    return updated.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    if (this.config.disableEditUrl) {\n      return url;\n    }\n\n    const parsed = parseGitilesUrlRef(this.config, url);\n    return buildGerritEditUrl(\n      this.config,\n      parsed.project,\n      parsed.ref,\n      parsed.path,\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AA6BO,MAAM,iBAAA,CAA4C;AAAA,EAWvD,YAA6B,iBAAA,EAA4C;AAA5C,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA;AAAA,EAA6C;AAAA,EAV1E,OAAO,OAAA,GAAqD,CAAC,EAAE,QAAO,KAAM;AAC1E,IAAA,MAAM,OAAA,GAAU,4BAAA;AAAA,MACd,MAAA,CAAO,sBAAA,CAAuB,qBAAqB,CAAA,IAAK;AAAC,KAC3D;AACA,IAAA,OAAO,iBAAA;AAAA,MACL,QAAQ,GAAA,CAAI,CAAA,CAAA,KAAK,IAAI,iBAAA,CAAkB,CAAC,CAAC,CAAA;AAAA,MACzC,CAAA,CAAA,KAAK,EAAE,MAAA,CAAO;AAAA,KAChB;AAAA,EACF,CAAA;AAAA,EAIA,IAAI,IAAA,GAAe;AACjB,IAAA,OAAO,QAAA;AAAA,EACT;AAAA,EAEA,IAAI,KAAA,GAAgB;AAClB,IAAA,OAAO,KAAK,iBAAA,CAAkB,IAAA;AAAA,EAChC;AAAA,EAEA,IAAI,MAAA,GAAkC;AACpC,IAAA,OAAO,IAAA,CAAK,iBAAA;AAAA,EACd;AAAA,EAEA,WAAW,OAAA,EAIA;AACT,IAAA,MAAM,EAAE,GAAA,EAAK,IAAA,EAAM,UAAA,EAAW,GAAI,OAAA;AAClC,IAAA,IAAI,OAAA;AACJ,IAAA,IAAI,GAAA,CAAI,UAAA,CAAW,GAAG,CAAA,EAAG;AACvB,MAAA,MAAM,EAAE,QAAA,EAAS,GAAI,kBAAA,CAAmB,IAAA,CAAK,QAAQ,IAAI,CAAA;AACzD,MAAA,OAAO,QAAA,GAAW,GAAA;AAAA,IACpB;AACA,IAAA,IAAI,GAAA,EAAK;AACP,MAAA,OAAA,GAAU,IAAI,GAAA,CAAI,GAAA,EAAK,IAAI,CAAA;AAAA,IAC7B,CAAA,MAAO;AACL,MAAA,OAAA,GAAU,IAAI,IAAI,IAAI,CAAA;AAAA,IACxB;AACA,IAAA,IAAI,UAAA,EAAY;AACd,MAAA,OAAA,CAAQ,IAAA,GAAO,WAAW,QAAA,EAAS;AAAA,IACrC;AACA,IAAA,OAAO,QAAQ,QAAA,EAAS;AAAA,EAC1B;AAAA,EAEA,eAAe,GAAA,EAAqB;AAClC,IAAA,IAAI,IAAA,CAAK,OAAO,cAAA,EAAgB;AAC9B,MAAA,OAAO,GAAA;AAAA,IACT;AAEA,IAAA,MAAM,MAAA,GAAS,kBAAA,CAAmB,IAAA,CAAK,MAAA,EAAQ,GAAG,CAAA;AAClD,IAAA,OAAO,kBAAA;AAAA,MACL,IAAA,CAAK,MAAA;AAAA,MACL,MAAA,CAAO,OAAA;AAAA,MACP,MAAA,CAAO,GAAA;AAAA,MACP,MAAA,CAAO;AAAA,KACT;AAAA,EACF;AACF;;;;"}