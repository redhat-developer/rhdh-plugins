{"version":3,"file":"core.esm.js","sources":["../../src/gerrit/core.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { join, takeWhile, trimEnd, trimStart } from 'lodash';\nimport { GerritIntegrationConfig } from './config';\n\nconst GERRIT_BODY_PREFIX = \")]}'\";\n\n/**\n * Parse a Gitiles URL and return branch, file path and project.\n *\n * @remarks\n *\n * Gerrit only handles code reviews so it does not have a native way to browse\n * or showing the content of gits. Image if Github only had the \"pull requests\"\n * tab.\n *\n * Any source code browsing is instead handled by optional services outside\n * Gerrit. The url format chosen for the Gerrit url reader is the one used by\n * the Gitiles project. Gerrit will work perfectly with Backstage without\n * having Gitiles installed but there are some places in the Backstage GUI\n * with links to the url used by the url reader. These will not work unless\n * the urls point to an actual Gitiles installation.\n *\n * Gitiles url:\n * https://g.com/optional_path/\\{project\\}/+/refs/heads/\\{branch\\}/\\{filePath\\}\n * https://g.com/a/optional_path/\\{project\\}/+/refs/heads/\\{branch\\}/\\{filePath\\}\n *\n *\n * @param url - An URL pointing to a file stored in git.\n * @public\n * @deprecated `parseGerritGitilesUrl` is deprecated. Use\n *  {@link parseGitilesUrlRef} instead.\n */\nexport function parseGerritGitilesUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n): { branch: string; filePath: string; project: string } {\n  const baseUrlParse = new URL(config.gitilesBaseUrl!);\n  const urlParse = new URL(url);\n\n  // Remove the gerrit authentication prefix '/a/' from the url\n  // In case of the gitilesBaseUrl is https://review.gerrit.com/plugins/gitiles\n  // and the url provided is https://review.gerrit.com/a/plugins/gitiles/...\n  // remove the prefix only if the pathname start with '/a/'\n  const urlPath = urlParse.pathname\n    .substring(urlParse.pathname.startsWith('/a/') ? 2 : 0)\n    .replace(baseUrlParse.pathname, '');\n\n  const parts = urlPath.split('/').filter(p => !!p);\n\n  const projectEndIndex = parts.indexOf('+');\n\n  if (projectEndIndex <= 0) {\n    throw new Error(`Unable to parse project from url: ${url}`);\n  }\n  const project = trimStart(parts.slice(0, projectEndIndex).join('/'), '/');\n\n  const branchIndex = parts.indexOf('heads');\n  if (branchIndex <= 0) {\n    throw new Error(`Unable to parse branch from url: ${url}`);\n  }\n  const branch = parts[branchIndex + 1];\n  const filePath = parts.slice(branchIndex + 2).join('/');\n\n  return {\n    branch,\n    filePath: filePath === '' ? '/' : filePath,\n    project,\n  };\n}\n\n/**\n * Parses Gitiles urls and returns the following:\n *\n * - The project\n * - The type of ref. I.e: branch name, SHA, HEAD or tag.\n * - The file path from the repo root.\n * - The base path as the path that points to the repo root.\n *\n * Supported types of gitiles urls that point to:\n *\n * - Branches\n * - Tags\n * - A commit SHA\n * - HEAD\n *\n * @param config - A Gerrit provider config.\n * @param url - An url to a file or folder in Gitiles.\n * @public\n */\nexport function parseGitilesUrlRef(\n  config: GerritIntegrationConfig,\n  url: string,\n): {\n  project: string;\n  path: string;\n  ref: string;\n  refType: 'sha' | 'branch' | 'tag' | 'head';\n  basePath: string;\n} {\n  const baseUrlParse = new URL(config.gitilesBaseUrl!);\n  const urlParse = new URL(url);\n  // Remove the gerrit authentication prefix '/a/' from the url\n  // In case of the gitilesBaseUrl is https://review.gerrit.com/plugins/gitiles\n  // and the url provided is https://review.gerrit.com/a/plugins/gitiles/...\n  // remove the prefix only if the pathname start with '/a/'\n  const urlPath = trimStart(\n    urlParse.pathname\n      .substring(urlParse.pathname.startsWith('/a/') ? 2 : 0)\n      .replace(baseUrlParse.pathname, ''),\n    '/',\n  );\n\n  // Find the project by taking everything up to \"/+/\".\n  const parts = urlPath.split('/').filter(p => !!p);\n  const projectParts = takeWhile(parts, p => p !== '+');\n  if (projectParts.length === 0) {\n    throw new Error(`Unable to parse gitiles url: ${url}`);\n  }\n  // Also remove the \"+\" after the project.\n  const rest = parts.slice(projectParts.length + 1);\n  const project = join(projectParts, '/');\n\n  // match <project>/+/HEAD/<path>\n  if (rest.length > 0 && rest[0] === 'HEAD') {\n    const ref = rest.shift()!;\n    const path = join(rest, '/');\n    return {\n      project,\n      ref,\n      refType: 'head' as const,\n      path: path || '/',\n      basePath: trimEnd(url.replace(path, ''), '/'),\n    };\n  }\n  // match <project>/+/<sha>/<path>\n  if (rest.length > 0 && rest[0].length === 40) {\n    const ref = rest.shift()!;\n    const path = join(rest, '/');\n    return {\n      project,\n      ref,\n      refType: 'sha' as const,\n      path: path || '/',\n      basePath: trimEnd(url.replace(path, ''), '/'),\n    };\n  }\n  const remainingPath = join(rest, '/');\n  // Regexp for matching \"refs/tags/<tag>\" or \"refs/heads/<branch>/\"\n  const refsRegexp = /^refs\\/(?<refsReference>heads|tags)\\/(?<ref>.*?)(\\/|$)/;\n  const result = refsRegexp.exec(remainingPath);\n  if (result) {\n    const matchString = result[0];\n    let refType;\n    const { refsReference, ref } = result.groups || {};\n    const path = remainingPath.replace(matchString, '');\n    switch (refsReference) {\n      case 'heads':\n        refType = 'branch' as const;\n        break;\n      case 'tags':\n        refType = 'tag' as const;\n        break;\n      default:\n        throw new Error(`Unable to parse gitiles url: ${url}`);\n    }\n    return {\n      project,\n      ref,\n      refType,\n      path: path || '/',\n      basePath: trimEnd(url.replace(path, ''), '/'),\n    };\n  }\n  throw new Error(`Unable to parse gitiles : ${url}`);\n}\n\n/**\n * Build a Gerrit Gitiles url that targets a specific path.\n *\n * @param config - A Gerrit provider config.\n * @param project - The name of the git project\n * @param branch - The branch we will target.\n * @param filePath - The absolute file path.\n * @public\n */\nexport function buildGerritGitilesUrl(\n  config: GerritIntegrationConfig,\n  project: string,\n  branch: string,\n  filePath: string,\n): string {\n  return `${\n    config.gitilesBaseUrl\n  }/${project}/+/refs/heads/${branch}/${trimStart(filePath, '/')}`;\n}\n\n/**\n * Build a Gerrit Gitiles url that targets a specific path.\n *\n * @param config - A Gerrit provider config.\n * @param project - The name of the git project\n * @param branch - The branch we will target.\n * @param filePath - The absolute file path.\n * @public\n */\nexport function buildGerritEditUrl(\n  config: GerritIntegrationConfig,\n  project: string,\n  branch: string,\n  filePath: string,\n): string {\n  return `${\n    config.baseUrl\n  }/admin/repos/edit/repo/${project}/branch/refs/heads/${branch}/file/${trimStart(\n    filePath,\n    '/',\n  )}`;\n}\n\n/**\n * Build a Gerrit Gitiles archive url that targets a specific branch and path\n *\n * @param config - A Gerrit provider config.\n * @param project - The name of the git project\n * @param branch - The branch we will target.\n * @param filePath - The absolute file path.\n * @public\n * @deprecated `buildGerritGitilesArchiveUrl` is deprecated. Use\n *  {@link buildGerritGitilesArchiveUrlFromLocation} instead.\n */\nexport function buildGerritGitilesArchiveUrl(\n  config: GerritIntegrationConfig,\n  project: string,\n  branch: string,\n  filePath: string,\n): string {\n  const archiveName =\n    filePath === '/' || filePath === '' ? '.tar.gz' : `/${filePath}.tar.gz`;\n  return `${getGitilesAuthenticationUrl(\n    config,\n  )}/${project}/+archive/refs/heads/${branch}${archiveName}`;\n}\n\n/**\n * Build a Gerrit Gitiles archive url from a Gitiles url.\n *\n * @param config - A Gerrit provider config.\n * @param url - The gitiles url\n * @public\n */\nexport function buildGerritGitilesArchiveUrlFromLocation(\n  config: GerritIntegrationConfig,\n  url: string,\n): string {\n  const {\n    path: filePath,\n    ref,\n    project,\n    refType,\n  } = parseGitilesUrlRef(config, url);\n  const archiveName =\n    filePath === '/' || filePath === '' ? '.tar.gz' : `/${filePath}.tar.gz`;\n  if (refType === 'branch') {\n    return `${getGitilesAuthenticationUrl(\n      config,\n    )}/${project}/+archive/refs/heads/${ref}${archiveName}`;\n  }\n  if (refType === 'sha') {\n    return `${getGitilesAuthenticationUrl(\n      config,\n    )}/${project}/+archive/${ref}${archiveName}`;\n  }\n  throw new Error(`Unsupported gitiles ref type: ${refType}`);\n}\n\n/**\n * Return the authentication prefix.\n *\n * @remarks\n *\n * To authenticate with a password the API url must be prefixed with \"/a/\".\n * If no password is set anonymous access (without the prefix) will\n * be used.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getAuthenticationPrefix(\n  config: GerritIntegrationConfig,\n): string {\n  return config.password ? '/a/' : '/';\n}\n\n/**\n * Return the authentication gitiles url.\n *\n * @remarks\n *\n * To authenticate with a password the API url must be prefixed with \"/a/\".\n * If no password is set anonymous access (without the prefix) will\n * be used.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getGitilesAuthenticationUrl(\n  config: GerritIntegrationConfig,\n): string {\n  if (!config.baseUrl || !config.gitilesBaseUrl) {\n    throw new Error(\n      'Unexpected Gerrit config values. baseUrl or gitilesBaseUrl not set.',\n    );\n  }\n  if (config.gitilesBaseUrl.startsWith(config.baseUrl)) {\n    return config.gitilesBaseUrl.replace(\n      config.baseUrl.concat('/'),\n      config.baseUrl.concat(getAuthenticationPrefix(config)),\n    );\n  }\n  if (config.password) {\n    throw new Error(\n      'Since the baseUrl (Gerrit) is not part of the gitilesBaseUrl, an authentication URL could not be constructed.',\n    );\n  }\n  return config.gitilesBaseUrl!;\n}\n\n/**\n * Return the url to get branch info from the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritBranchApiUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { branch, project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.baseUrl}${getAuthenticationPrefix(\n    config,\n  )}projects/${encodeURIComponent(project)}/branches/${branch}`;\n}\n\n/**\n * Return the url to clone the repo that is referenced by the url.\n *\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritCloneRepoUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.cloneUrl}${getAuthenticationPrefix(config)}${project}`;\n}\n\n/**\n * Return the url to fetch the contents of a file using the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritFileContentsApiUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { ref, refType, path, project } = parseGitilesUrlRef(config, url);\n\n  // https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#get-content\n  if (refType === 'branch') {\n    return `${config.baseUrl}${getAuthenticationPrefix(\n      config,\n    )}projects/${encodeURIComponent(\n      project,\n    )}/branches/${ref}/files/${encodeURIComponent(path)}/content`;\n  }\n  // https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#get-content-from-commit\n  if (refType === 'sha') {\n    return `${config.baseUrl}${getAuthenticationPrefix(\n      config,\n    )}projects/${encodeURIComponent(\n      project,\n    )}/commits/${ref}/files/${encodeURIComponent(path)}/content`;\n  }\n  throw new Error(`Unsupported gitiles ref type: ${refType}`);\n}\n\n/**\n * Return the url to query available projects using the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getGerritProjectsApiUrl(config: GerritIntegrationConfig) {\n  return `${config.baseUrl}${getAuthenticationPrefix(config)}projects/`;\n}\n\n/**\n * Return request headers for a Gerrit provider.\n *\n * @param config - A Gerrit provider config\n * @public\n */\nexport function getGerritRequestOptions(config: GerritIntegrationConfig): {\n  headers?: Record<string, string>;\n} {\n  const headers: Record<string, string> = {};\n\n  if (!config.password) {\n    return headers;\n  }\n  const buffer = Buffer.from(`${config.username}:${config.password}`, 'utf8');\n  headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  return {\n    headers,\n  };\n}\n\n/**\n * Parse the json response from Gerrit and strip the magic prefix.\n *\n * @remarks\n *\n * To prevent against XSSI attacks the JSON response body from Gerrit starts\n * with a magic prefix that must be stripped before it can be fed to a JSON\n * parser.\n *\n * @param response - An API response.\n * @public\n */\nexport async function parseGerritJsonResponse(\n  response: Response,\n): Promise<unknown> {\n  const responseBody = await response.text();\n  if (responseBody.startsWith(GERRIT_BODY_PREFIX)) {\n    try {\n      return JSON.parse(responseBody.slice(GERRIT_BODY_PREFIX.length));\n    } catch (ex) {\n      throw new Error(\n        `Invalid response from Gerrit: ${responseBody.slice(0, 10)} - ${ex}`,\n      );\n    }\n  }\n  throw new Error(\n    `Gerrit JSON body prefix missing. Found: ${responseBody.slice(0, 10)}`,\n  );\n}\n"],"names":[],"mappings":"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"}