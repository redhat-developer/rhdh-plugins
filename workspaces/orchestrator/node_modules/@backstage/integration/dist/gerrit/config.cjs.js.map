{"version":3,"file":"config.cjs.js","sources":["../../src/gerrit/config.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\n/**\n * The configuration parameters for a single Gerrit API provider.\n *\n * @public\n */\nexport type GerritIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"gerrit-review.com\"\n   */\n  host: string;\n\n  /**\n   * The optional base URL of the Gerrit instance. It is assumed that https\n   * is used and that the base path is \"/\" on the host. If that is not the\n   * case set the complete base url to the gerrit instance, e.g.\n   * \"https://gerrit-review.com/gerrit\". This is the url that you would open\n   * in a browser.\n   */\n  baseUrl?: string;\n\n  /**\n   * The optional base url to use for cloning a repository. If not set the\n   * baseUrl will be used.\n   */\n  cloneUrl?: string;\n\n  /**\n   * Disable the edit url feature for Gerrit version less than 3.9.\n   */\n  disableEditUrl?: boolean;\n\n  /**\n   * Base url for Gitiles. This is needed for creating a valid\n   * user-friendly url that can be used for browsing the content of the\n   * provider.\n   */\n  gitilesBaseUrl: string;\n\n  /**\n   * The username to use for requests to gerrit.\n   */\n  username?: string;\n\n  /**\n   * The password or http token to use for authentication.\n   */\n  password?: string;\n\n  /**\n   * The signing key to use for signing commits.\n   */\n  commitSigningKey?: string;\n};\n\n/**\n * Reads a single Gerrit integration config.\n *\n * @param config - The config object of a single integration\n *\n * @public\n */\nexport function readGerritIntegrationConfig(\n  config: Config,\n): GerritIntegrationConfig {\n  const host = config.getString('host');\n  let baseUrl = config.getOptionalString('baseUrl');\n  let cloneUrl = config.getOptionalString('cloneUrl');\n  const disableEditUrl = config.getOptionalBoolean('disableEditUrl');\n  let gitilesBaseUrl = config.getString('gitilesBaseUrl');\n  const username = config.getOptionalString('username');\n  const password = config.getOptionalString('password')?.trim();\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${host}' is not a valid host`,\n    );\n  } else if (baseUrl && !isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  } else if (cloneUrl && !isValidUrl(cloneUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${cloneUrl}' is not a valid cloneUrl`,\n    );\n  } else if (!isValidUrl(gitilesBaseUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${gitilesBaseUrl}' is not a valid gitilesBaseUrl`,\n    );\n  }\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n  if (cloneUrl) {\n    cloneUrl = trimEnd(cloneUrl, '/');\n  } else {\n    cloneUrl = baseUrl;\n  }\n\n  gitilesBaseUrl = trimEnd(gitilesBaseUrl, '/');\n\n  return {\n    host,\n    baseUrl,\n    cloneUrl,\n    disableEditUrl,\n    gitilesBaseUrl,\n    username,\n    password,\n    commitSigningKey: config.getOptionalString('commitSigningKey'),\n  };\n}\n\n/**\n * Reads a set of Gerrit integration configs.\n *\n * @param configs - All of the integration config objects\n *\n * @public\n */\nexport function readGerritIntegrationConfigs(\n  configs: Config[],\n): GerritIntegrationConfig[] {\n  return configs.map(readGerritIntegrationConfig);\n}\n"],"names":["isValidHost","isValidUrl","trimEnd"],"mappings":";;;;;AAiFO,SAAS,4BACd,MAAA,EACyB;AACzB,EAAA,MAAM,IAAA,GAAO,MAAA,CAAO,SAAA,CAAU,MAAM,CAAA;AACpC,EAAA,IAAI,OAAA,GAAU,MAAA,CAAO,iBAAA,CAAkB,SAAS,CAAA;AAChD,EAAA,IAAI,QAAA,GAAW,MAAA,CAAO,iBAAA,CAAkB,UAAU,CAAA;AAClD,EAAA,MAAM,cAAA,GAAiB,MAAA,CAAO,kBAAA,CAAmB,gBAAgB,CAAA;AACjE,EAAA,IAAI,cAAA,GAAiB,MAAA,CAAO,SAAA,CAAU,gBAAgB,CAAA;AACtD,EAAA,MAAM,QAAA,GAAW,MAAA,CAAO,iBAAA,CAAkB,UAAU,CAAA;AACpD,EAAA,MAAM,QAAA,GAAW,MAAA,CAAO,iBAAA,CAAkB,UAAU,GAAG,IAAA,EAAK;AAE5D,EAAA,IAAI,CAACA,mBAAA,CAAY,IAAI,CAAA,EAAG;AACtB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uCAAuC,IAAI,CAAA,qBAAA;AAAA,KAC7C;AAAA,EACF,CAAA,MAAA,IAAW,OAAA,IAAW,CAACC,kBAAA,CAAW,OAAO,CAAA,EAAG;AAC1C,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uCAAuC,OAAO,CAAA,wBAAA;AAAA,KAChD;AAAA,EACF,CAAA,MAAA,IAAW,QAAA,IAAY,CAACA,kBAAA,CAAW,QAAQ,CAAA,EAAG;AAC5C,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uCAAuC,QAAQ,CAAA,yBAAA;AAAA,KACjD;AAAA,EACF,CAAA,MAAA,IAAW,CAACA,kBAAA,CAAW,cAAc,CAAA,EAAG;AACtC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uCAAuC,cAAc,CAAA,+BAAA;AAAA,KACvD;AAAA,EACF;AACA,EAAA,IAAI,OAAA,EAAS;AACX,IAAA,OAAA,GAAUC,cAAA,CAAQ,SAAS,GAAG,CAAA;AAAA,EAChC,CAAA,MAAO;AACL,IAAA,OAAA,GAAU,WAAW,IAAI,CAAA,CAAA;AAAA,EAC3B;AACA,EAAA,IAAI,QAAA,EAAU;AACZ,IAAA,QAAA,GAAWA,cAAA,CAAQ,UAAU,GAAG,CAAA;AAAA,EAClC,CAAA,MAAO;AACL,IAAA,QAAA,GAAW,OAAA;AAAA,EACb;AAEA,EAAA,cAAA,GAAiBA,cAAA,CAAQ,gBAAgB,GAAG,CAAA;AAE5C,EAAA,OAAO;AAAA,IACL,IAAA;AAAA,IACA,OAAA;AAAA,IACA,QAAA;AAAA,IACA,cAAA;AAAA,IACA,cAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA,gBAAA,EAAkB,MAAA,CAAO,iBAAA,CAAkB,kBAAkB;AAAA,GAC/D;AACF;AASO,SAAS,6BACd,OAAA,EAC2B;AAC3B,EAAA,OAAO,OAAA,CAAQ,IAAI,2BAA2B,CAAA;AAChD;;;;;"}