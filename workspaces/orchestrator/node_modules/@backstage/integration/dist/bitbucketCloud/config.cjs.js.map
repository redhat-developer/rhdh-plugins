{"version":3,"file":"config.cjs.js","sources":["../../src/bitbucketCloud/config.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst BITBUCKET_CLOUD_HOST = 'bitbucket.org';\nconst BITBUCKET_CLOUD_API_BASE_URL = 'https://api.bitbucket.org/2.0';\n\n/**\n * The configuration parameters for a single Bitbucket Cloud API provider.\n *\n * @public\n */\nexport type BitbucketCloudIntegrationConfig = {\n  /**\n   * Constant. bitbucket.org\n   */\n  host: string;\n\n  /**\n   * Constant. https://api.bitbucket.org/2.0\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The username to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  username?: string;\n\n  /**\n   * Authentication with Bitbucket Cloud (bitbucket.org) is done using app passwords.\n   *\n   * See https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/\n   */\n  appPassword?: string;\n\n  /**\n   * The access token to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  token?: string;\n\n  /** PGP private key for signing commits. */\n  commitSigningKey?: string;\n};\n\n/**\n * Reads a single Bitbucket Cloud integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readBitbucketCloudIntegrationConfig(\n  config: Config,\n): BitbucketCloudIntegrationConfig {\n  const host = BITBUCKET_CLOUD_HOST;\n  const apiBaseUrl = BITBUCKET_CLOUD_API_BASE_URL;\n  // If config is provided, we assume authenticated access is desired\n  // (as the anonymous one is provided by default).\n  const username = config.getString('username');\n  const appPassword = config.getString('appPassword')?.trim();\n\n  return {\n    host,\n    apiBaseUrl,\n    username,\n    appPassword,\n    commitSigningKey: config.getOptionalString('commitSigningKey'),\n  };\n}\n\n/**\n * Reads a set of Bitbucket Cloud integration configs,\n * and inserts one for public Bitbucket Cloud if none specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readBitbucketCloudIntegrationConfigs(\n  configs: Config[],\n): BitbucketCloudIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readBitbucketCloudIntegrationConfig);\n\n  // If no explicit bitbucket.org integration was added,\n  // put one in the list as a convenience\n  if (result.length === 0) {\n    result.push({\n      host: BITBUCKET_CLOUD_HOST,\n      apiBaseUrl: BITBUCKET_CLOUD_API_BASE_URL,\n    });\n  }\n\n  return result;\n}\n"],"names":[],"mappings":";;AAkBA,MAAM,oBAAA,GAAuB,eAAA;AAC7B,MAAM,4BAAA,GAA+B,+BAAA;AA6C9B,SAAS,oCACd,MAAA,EACiC;AACjC,EAAA,MAAM,IAAA,GAAO,oBAAA;AACb,EAAA,MAAM,UAAA,GAAa,4BAAA;AAGnB,EAAA,MAAM,QAAA,GAAW,MAAA,CAAO,SAAA,CAAU,UAAU,CAAA;AAC5C,EAAA,MAAM,WAAA,GAAc,MAAA,CAAO,SAAA,CAAU,aAAa,GAAG,IAAA,EAAK;AAE1D,EAAA,OAAO;AAAA,IACL,IAAA;AAAA,IACA,UAAA;AAAA,IACA,QAAA;AAAA,IACA,WAAA;AAAA,IACA,gBAAA,EAAkB,MAAA,CAAO,iBAAA,CAAkB,kBAAkB;AAAA,GAC/D;AACF;AASO,SAAS,qCACd,OAAA,EACmC;AAEnC,EAAA,MAAM,MAAA,GAAS,OAAA,CAAQ,GAAA,CAAI,mCAAmC,CAAA;AAI9D,EAAA,IAAI,MAAA,CAAO,WAAW,CAAA,EAAG;AACvB,IAAA,MAAA,CAAO,IAAA,CAAK;AAAA,MACV,IAAA,EAAM,oBAAA;AAAA,MACN,UAAA,EAAY;AAAA,KACb,CAAA;AAAA,EACH;AAEA,EAAA,OAAO,MAAA;AACT;;;;;"}