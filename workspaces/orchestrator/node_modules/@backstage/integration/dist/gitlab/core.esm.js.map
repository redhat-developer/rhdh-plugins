{"version":3,"file":"core.esm.js","sources":["../../src/gitlab/core.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport {\n  getGitLabIntegrationRelativePath,\n  GitLabIntegrationConfig,\n} from './config';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitlab.example.com/a/b/blob/master/c.yaml\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/c.yaml?ref=master\n * -or-\n * from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport async function getGitLabFileFetchUrl(\n  url: string,\n  config: GitLabIntegrationConfig,\n  token?: string,\n): Promise<string> {\n  const projectID = await getProjectId(url, config, token);\n  return buildProjectUrl(url, projectID, config).toString();\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @param token - An optional auth token to use for communicating with GitLab. By default uses the integration token\n * @public\n */\nexport function getGitLabRequestOptions(\n  config: GitLabIntegrationConfig,\n  token?: string,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  const accessToken = token || config.token;\n  if (accessToken) {\n    // OAuth, Personal, Project, and Group access tokens can all be passed via\n    // a bearer authorization header\n    // https://docs.gitlab.com/api/rest/authentication/#personalprojectgroup-access-tokens\n    headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  return { headers };\n}\n\n// Converts\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\nexport function buildProjectUrl(\n  target: string,\n  projectID: Number,\n  config: GitLabIntegrationConfig,\n): URL {\n  try {\n    const url = new URL(target);\n\n    const branchAndFilePath = url.pathname\n      .split('/blob/')\n      .slice(1)\n      .join('/blob/');\n    const [branch, ...filePath] = branchAndFilePath.split('/');\n    const relativePath = getGitLabIntegrationRelativePath(config);\n\n    url.pathname = [\n      ...(relativePath ? [relativePath] : []),\n      'api/v4/projects',\n      projectID,\n      'repository/files',\n      encodeURIComponent(decodeURIComponent(filePath.join('/'))),\n      'raw',\n    ].join('/');\n\n    url.search = `?ref=${branch}`;\n\n    return url;\n  } catch (e) {\n    throw new Error(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Convert\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   The project ID that corresponds to the URL\nexport async function getProjectId(\n  target: string,\n  config: GitLabIntegrationConfig,\n  token?: string,\n): Promise<number> {\n  const url = new URL(target);\n\n  if (!url.pathname.includes('/blob/')) {\n    throw new Error(\n      `Failed converting ${url.pathname} to a project id. Url path must include /blob/.`,\n    );\n  }\n\n  try {\n    let repo = url.pathname.split('/-/blob/')[0].split('/blob/')[0];\n\n    // Get gitlab relative path\n    const relativePath = getGitLabIntegrationRelativePath(config);\n\n    // Check relative path exist and replace it if it's the case.\n    if (relativePath) {\n      repo = repo.replace(relativePath, '');\n    }\n\n    // Convert\n    // to: https://gitlab.com/api/v4/projects/groupA%2Fteams%2FsubgroupA%2FteamA%2Frepo\n    const repoIDLookup = new URL(\n      `${url.origin}${relativePath}/api/v4/projects/${encodeURIComponent(\n        repo.replace(/^\\//, ''),\n      )}`,\n    );\n\n    const response = await fetch(\n      repoIDLookup.toString(),\n      getGitLabRequestOptions(config, token),\n    );\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        throw new Error(\n          'GitLab Error: 401 - Unauthorized. The access token used is either expired, or does not have permission to read the project',\n        );\n      }\n\n      throw new Error(\n        `GitLab Error '${data.error}', ${data.error_description}`,\n      );\n    }\n\n    return Number(data.id);\n  } catch (e) {\n    throw new Error(`Could not get GitLab project ID for: ${target}, ${e}`);\n  }\n}\n"],"names":[],"mappings":"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"}