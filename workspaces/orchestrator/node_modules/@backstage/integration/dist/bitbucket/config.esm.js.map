{"version":3,"file":"config.esm.js","sources":["../../src/bitbucket/config.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\nconst BITBUCKET_HOST = 'bitbucket.org';\nconst BITBUCKET_API_BASE_URL = 'https://api.bitbucket.org/2.0';\n\n/**\n * The configuration parameters for a single Bitbucket API provider.\n *\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport type BitbucketIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"bitbucket.org\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.bitbucket.org/2.0\",\n   * with no trailing slash.\n   *\n   * Values omitted at the optional property at the app-config will be deduced\n   * from the \"host\" value.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to a Bitbucket Server provider.\n   *\n   * See https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The username to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  username?: string;\n\n  /**\n   * Authentication with Bitbucket Cloud (bitbucket.org) is done using app passwords.\n   *\n   * See https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/\n   */\n  appPassword?: string;\n\n  /**\n   * Signing key for commits\n   */\n  commitSigningKey?: string;\n};\n\n/**\n * Reads a single Bitbucket integration config.\n *\n * @param config - The config object of a single integration\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function readBitbucketIntegrationConfig(\n  config: Config,\n): BitbucketIntegrationConfig {\n  const host = config.getOptionalString('host') ?? BITBUCKET_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token')?.trim();\n  const username = config.getOptionalString('username');\n  const appPassword = config.getOptionalString('appPassword')?.trim();\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Bitbucket integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === BITBUCKET_HOST) {\n    apiBaseUrl = BITBUCKET_API_BASE_URL;\n  } else {\n    apiBaseUrl = `https://${host}/rest/api/1.0`;\n  }\n\n  return {\n    host,\n    apiBaseUrl,\n    token,\n    username,\n    appPassword,\n    commitSigningKey: config.getOptionalString('commitSigningKey'),\n  };\n}\n\n/**\n * Reads a set of Bitbucket integration configs, and inserts some defaults for\n * public Bitbucket if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function readBitbucketIntegrationConfigs(\n  configs: Config[],\n): BitbucketIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readBitbucketIntegrationConfig);\n\n  // If no explicit bitbucket.org integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === BITBUCKET_HOST)) {\n    result.push({\n      host: BITBUCKET_HOST,\n      apiBaseUrl: BITBUCKET_API_BASE_URL,\n    });\n  }\n\n  return result;\n}\n"],"names":[],"mappings":";;;AAoBA,MAAM,cAAA,GAAiB,eAAA;AACvB,MAAM,sBAAA,GAAyB,+BAAA;AAyDxB,SAAS,+BACd,MAAA,EAC4B;AAC5B,EAAA,MAAM,IAAA,GAAO,MAAA,CAAO,iBAAA,CAAkB,MAAM,CAAA,IAAK,cAAA;AACjD,EAAA,IAAI,UAAA,GAAa,MAAA,CAAO,iBAAA,CAAkB,YAAY,CAAA;AACtD,EAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,iBAAA,CAAkB,OAAO,GAAG,IAAA,EAAK;AACtD,EAAA,MAAM,QAAA,GAAW,MAAA,CAAO,iBAAA,CAAkB,UAAU,CAAA;AACpD,EAAA,MAAM,WAAA,GAAc,MAAA,CAAO,iBAAA,CAAkB,aAAa,GAAG,IAAA,EAAK;AAElE,EAAA,IAAI,CAAC,WAAA,CAAY,IAAI,CAAA,EAAG;AACtB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,0CAA0C,IAAI,CAAA,qBAAA;AAAA,KAChD;AAAA,EACF;AAEA,EAAA,IAAI,UAAA,EAAY;AACd,IAAA,UAAA,GAAa,OAAA,CAAQ,YAAY,GAAG,CAAA;AAAA,EACtC,CAAA,MAAA,IAAW,SAAS,cAAA,EAAgB;AAClC,IAAA,UAAA,GAAa,sBAAA;AAAA,EACf,CAAA,MAAO;AACL,IAAA,UAAA,GAAa,WAAW,IAAI,CAAA,aAAA,CAAA;AAAA,EAC9B;AAEA,EAAA,OAAO;AAAA,IACL,IAAA;AAAA,IACA,UAAA;AAAA,IACA,KAAA;AAAA,IACA,QAAA;AAAA,IACA,WAAA;AAAA,IACA,gBAAA,EAAkB,MAAA,CAAO,iBAAA,CAAkB,kBAAkB;AAAA,GAC/D;AACF;AAUO,SAAS,gCACd,OAAA,EAC8B;AAE9B,EAAA,MAAM,MAAA,GAAS,OAAA,CAAQ,GAAA,CAAI,8BAA8B,CAAA;AAIzD,EAAA,IAAI,CAAC,MAAA,CAAO,IAAA,CAAK,OAAK,CAAA,CAAE,IAAA,KAAS,cAAc,CAAA,EAAG;AAChD,IAAA,MAAA,CAAO,IAAA,CAAK;AAAA,MACV,IAAA,EAAM,cAAA;AAAA,MACN,UAAA,EAAY;AAAA,KACb,CAAA;AAAA,EACH;AAEA,EAAA,OAAO,MAAA;AACT;;;;"}