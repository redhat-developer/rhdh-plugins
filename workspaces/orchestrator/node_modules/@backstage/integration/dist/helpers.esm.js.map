{"version":3,"file":"helpers.esm.js","sources":["../src/helpers.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\n\n/** Checks whether the given argument is a valid URL hostname */\nexport function isValidHost(host: string): boolean {\n  const check = new URL('http://example.com');\n  check.host = host;\n  return check.host === host;\n}\n\n/** Checks whether the given argument is a valid URL */\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function basicIntegrations<T extends ScmIntegration>(\n  integrations: T[],\n  getHost: (integration: T) => string,\n): ScmIntegrationsGroup<T> {\n  return {\n    list(): T[] {\n      return integrations;\n    },\n    byUrl(url: string | URL): T | undefined {\n      try {\n        const parsed = typeof url === 'string' ? new URL(url) : url;\n        return integrations.find(i => getHost(i) === parsed.host);\n      } catch {\n        return undefined;\n      }\n    },\n    byHost(host: string): T | undefined {\n      return integrations.find(i => getHost(i) === host);\n    },\n  };\n}\n\n/**\n * Default implementation of {@link ScmIntegration} `resolveUrl`, that only\n * works with URL pathname based providers.\n *\n * @public\n */\nexport function defaultScmResolveUrl(options: {\n  url: string;\n  base: string;\n  lineNumber?: number;\n}): string {\n  const { url, base, lineNumber } = options;\n\n  // If it is a fully qualified URL - then return it verbatim\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return url;\n  } catch {\n    // ignore intentionally\n  }\n\n  let updated: URL;\n\n  if (url.startsWith('/')) {\n    // If it is an absolute path, move relative to the repo root\n    const { href, filepath } = parseGitUrl(base);\n\n    updated = new URL(href);\n\n    const repoRootPath = trimEnd(\n      updated.pathname.substring(0, updated.pathname.length - filepath.length),\n      '/',\n    );\n    updated.pathname = `${repoRootPath}${url}`;\n  } else {\n    // For relative URLs, just let the default URL constructor handle the\n    // resolving. Note that this essentially will treat the last segment of the\n    // base as a file - NOT a folder - unless the url ends in a slash.\n    updated = new URL(url, base);\n  }\n\n  updated.search = new URL(base).search;\n  if (lineNumber) {\n    updated.hash = `L${lineNumber}`;\n  }\n  return updated.toString();\n}\n\n/**\n * Sets up handlers for request mocking\n *\n * Copied from test-utils, as that is a frontend-only package\n *\n * @param worker - service worker\n */\nexport function registerMswTestHooks(worker: {\n  listen: (t: any) => void;\n  close: () => void;\n  resetHandlers: () => void;\n}) {\n  beforeAll(() => worker.listen({ onUnhandledRequest: 'error' }));\n  afterAll(() => worker.close());\n  afterEach(() => worker.resetHandlers());\n}\n"],"names":[],"mappings":";;;AAqBO,SAAS,YAAY,IAAA,EAAuB;AACjD,EAAA,MAAM,KAAA,GAAQ,IAAI,GAAA,CAAI,oBAAoB,CAAA;AAC1C,EAAA,KAAA,CAAM,IAAA,GAAO,IAAA;AACb,EAAA,OAAO,MAAM,IAAA,KAAS,IAAA;AACxB;AAGO,SAAS,WAAW,GAAA,EAAsB;AAC/C,EAAA,IAAI;AAEF,IAAA,IAAI,IAAI,GAAG,CAAA;AACX,IAAA,OAAO,IAAA;AAAA,EACT,CAAA,CAAA,MAAQ;AACN,IAAA,OAAO,KAAA;AAAA,EACT;AACF;AAEO,SAAS,iBAAA,CACd,cACA,OAAA,EACyB;AACzB,EAAA,OAAO;AAAA,IACL,IAAA,GAAY;AACV,MAAA,OAAO,YAAA;AAAA,IACT,CAAA;AAAA,IACA,MAAM,GAAA,EAAkC;AACtC,MAAA,IAAI;AACF,QAAA,MAAM,SAAS,OAAO,GAAA,KAAQ,WAAW,IAAI,GAAA,CAAI,GAAG,CAAA,GAAI,GAAA;AACxD,QAAA,OAAO,aAAa,IAAA,CAAK,CAAA,CAAA,KAAK,QAAQ,CAAC,CAAA,KAAM,OAAO,IAAI,CAAA;AAAA,MAC1D,CAAA,CAAA,MAAQ;AACN,QAAA,OAAO,MAAA;AAAA,MACT;AAAA,IACF,CAAA;AAAA,IACA,OAAO,IAAA,EAA6B;AAClC,MAAA,OAAO,aAAa,IAAA,CAAK,CAAA,CAAA,KAAK,OAAA,CAAQ,CAAC,MAAM,IAAI,CAAA;AAAA,IACnD;AAAA,GACF;AACF;AAQO,SAAS,qBAAqB,OAAA,EAI1B;AACT,EAAA,MAAM,EAAE,GAAA,EAAK,IAAA,EAAM,UAAA,EAAW,GAAI,OAAA;AAGlC,EAAA,IAAI;AAEF,IAAA,IAAI,IAAI,GAAG,CAAA;AACX,IAAA,OAAO,GAAA;AAAA,EACT,CAAA,CAAA,MAAQ;AAAA,EAER;AAEA,EAAA,IAAI,OAAA;AAEJ,EAAA,IAAI,GAAA,CAAI,UAAA,CAAW,GAAG,CAAA,EAAG;AAEvB,IAAA,MAAM,EAAE,IAAA,EAAM,QAAA,EAAS,GAAI,YAAY,IAAI,CAAA;AAE3C,IAAA,OAAA,GAAU,IAAI,IAAI,IAAI,CAAA;AAEtB,IAAA,MAAM,YAAA,GAAe,OAAA;AAAA,MACnB,OAAA,CAAQ,SAAS,SAAA,CAAU,CAAA,EAAG,QAAQ,QAAA,CAAS,MAAA,GAAS,SAAS,MAAM,CAAA;AAAA,MACvE;AAAA,KACF;AACA,IAAA,OAAA,CAAQ,QAAA,GAAW,CAAA,EAAG,YAAY,CAAA,EAAG,GAAG,CAAA,CAAA;AAAA,EAC1C,CAAA,MAAO;AAIL,IAAA,OAAA,GAAU,IAAI,GAAA,CAAI,GAAA,EAAK,IAAI,CAAA;AAAA,EAC7B;AAEA,EAAA,OAAA,CAAQ,MAAA,GAAS,IAAI,GAAA,CAAI,IAAI,CAAA,CAAE,MAAA;AAC/B,EAAA,IAAI,UAAA,EAAY;AACd,IAAA,OAAA,CAAQ,IAAA,GAAO,IAAI,UAAU,CAAA,CAAA;AAAA,EAC/B;AACA,EAAA,OAAO,QAAQ,QAAA,EAAS;AAC1B;;;;"}