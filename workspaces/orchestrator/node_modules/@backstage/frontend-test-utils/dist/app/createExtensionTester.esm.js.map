{"version":3,"file":"createExtensionTester.esm.js","sources":["../../src/app/createExtensionTester.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppNode,\n  AppTree,\n  Extension,\n  ExtensionDataRef,\n  ExtensionDefinition,\n  ExtensionDefinitionParameters,\n  coreExtensionData,\n} from '@backstage/frontend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonArray, JsonObject, JsonValue } from '@backstage/types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { resolveExtensionDefinition } from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { resolveAppTree } from '../../../frontend-app-api/src/tree/resolveAppTree';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { resolveAppNodeSpecs } from '../../../frontend-app-api/src/tree/resolveAppNodeSpecs';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { instantiateAppNodeTree } from '../../../frontend-app-api/src/tree/instantiateAppNodeTree';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { readAppExtensionsConfig } from '../../../frontend-app-api/src/tree/readAppExtensionsConfig';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { createErrorCollector } from '../../../frontend-app-api/src/wiring/createErrorCollector';\nimport { TestApiRegistry } from '@backstage/test-utils';\nimport { OpaqueExtensionDefinition } from '@internal/frontend';\n\n/** @public */\nexport class ExtensionQuery<UOutput extends ExtensionDataRef> {\n  #node: AppNode;\n\n  constructor(node: AppNode) {\n    this.#node = node;\n  }\n\n  get node() {\n    return this.#node;\n  }\n\n  get instance() {\n    const instance = this.#node.instance;\n    if (!instance) {\n      throw new Error(\n        `Unable to access the instance of extension with ID '${\n          this.#node.spec.id\n        }'`,\n      );\n    }\n    return instance;\n  }\n\n  get<TId extends UOutput['id']>(\n    ref: ExtensionDataRef<any, TId, any>,\n  ): UOutput extends ExtensionDataRef<infer IData, TId, infer IConfig>\n    ? IConfig['optional'] extends true\n      ? IData | undefined\n      : IData\n    : never {\n    return this.instance.getData(ref);\n  }\n}\n\n/** @public */\nexport class ExtensionTester<UOutput extends ExtensionDataRef> {\n  /** @internal */\n  static forSubject<T extends ExtensionDefinitionParameters>(\n    subject: ExtensionDefinition<T>,\n    options?: { config?: T['configInput'] },\n  ): ExtensionTester<NonNullable<T['output']>> {\n    const tester = new ExtensionTester();\n    tester.add(subject, options as T['configInput'] & {});\n    return tester;\n  }\n\n  #tree?: AppTree;\n\n  readonly #extensions = new Array<{\n    id: string;\n    extension: Extension<any>;\n    definition: ExtensionDefinition;\n    config?: JsonValue;\n  }>();\n\n  add<T extends ExtensionDefinitionParameters>(\n    extension: ExtensionDefinition<T>,\n    options?: { config?: T['configInput'] },\n  ): ExtensionTester<UOutput> {\n    if (this.#tree) {\n      throw new Error(\n        'Cannot add more extensions accessing the extension tree',\n      );\n    }\n\n    const { name, namespace } = OpaqueExtensionDefinition.toInternal(extension);\n\n    const definition = {\n      ...extension,\n      // setting name \"test\" as fallback\n      name: !namespace && !name ? 'test' : name,\n    };\n\n    const resolvedExtension = resolveExtensionDefinition(definition);\n\n    this.#extensions.push({\n      id: resolvedExtension.id,\n      extension: resolvedExtension,\n      definition,\n      config: options?.config as JsonValue,\n    });\n\n    return this;\n  }\n\n  get<TId extends UOutput['id']>(\n    ref: ExtensionDataRef<any, TId, any>,\n  ): UOutput extends ExtensionDataRef<infer IData, TId, infer IConfig>\n    ? IConfig['optional'] extends true\n      ? IData | undefined\n      : IData\n    : never {\n    const tree = this.#resolveTree();\n\n    return new ExtensionQuery(tree.root).get(ref);\n  }\n\n  query<T extends ExtensionDefinitionParameters>(\n    extension: ExtensionDefinition<T>,\n  ): ExtensionQuery<NonNullable<T['output']>> {\n    const tree = this.#resolveTree();\n\n    // Same fallback logic as in .add\n    const { name, namespace } = OpaqueExtensionDefinition.toInternal(extension);\n    const definition = {\n      ...extension,\n      name: !namespace && !name ? 'test' : name,\n    };\n    const actualId = resolveExtensionDefinition(definition).id;\n\n    const node = tree.nodes.get(actualId);\n\n    if (!node) {\n      throw new Error(\n        `Extension with ID '${actualId}' not found, please make sure it's added to the tester.`,\n      );\n    } else if (!node.instance) {\n      throw new Error(\n        `Extension with ID '${actualId}' has not been instantiated, because it is not part of the test subject's extension tree.`,\n      );\n    }\n    return new ExtensionQuery(node);\n  }\n\n  reactElement(): JSX.Element {\n    const tree = this.#resolveTree();\n\n    const element = new ExtensionQuery(tree.root).get(\n      coreExtensionData.reactElement,\n    );\n\n    if (!element) {\n      throw new Error(\n        'No element found. Make sure the extension has a `coreExtensionData.reactElement` output, or use the `.get(...)` to access output data directly instead',\n      );\n    }\n\n    return element;\n  }\n\n  #resolveTree() {\n    if (this.#tree) {\n      return this.#tree;\n    }\n\n    const [subject] = this.#extensions;\n    if (!subject) {\n      throw new Error(\n        'No subject found. At least one extension should be added to the tester.',\n      );\n    }\n\n    const collector = createErrorCollector();\n\n    const tree = resolveAppTree(\n      subject.id,\n      resolveAppNodeSpecs({\n        features: [],\n        builtinExtensions: this.#extensions.map(_ => _.extension),\n        parameters: readAppExtensionsConfig(this.#getConfig()),\n        collector,\n      }),\n      collector,\n    );\n\n    instantiateAppNodeTree(tree.root, TestApiRegistry.from(), collector);\n\n    const errors = collector.collectErrors();\n    if (errors) {\n      throw new Error(\n        `Failed to resolve the extension tree: ${errors\n          .map(e => e.message)\n          .join(', ')}`,\n      );\n    }\n\n    this.#tree = tree;\n\n    return tree;\n  }\n\n  #getConfig(additionalConfig?: JsonObject): Config {\n    const [subject, ...rest] = this.#extensions;\n\n    const extensionsConfig: JsonArray = [\n      ...rest.flatMap(extension =>\n        extension.config\n          ? [\n              {\n                [extension.id]: {\n                  config: extension.config,\n                },\n              },\n            ]\n          : [],\n      ),\n      {\n        [subject.id]: {\n          config: subject.config,\n          disabled: false,\n        },\n      },\n    ];\n\n    return ConfigReader.fromConfigs([\n      { context: 'render-config', data: additionalConfig ?? {} },\n      {\n        context: 'test',\n        data: {\n          app: {\n            extensions: extensionsConfig,\n          },\n        },\n      },\n    ]);\n  }\n}\n\n/** @public */\nexport function createExtensionTester<T extends ExtensionDefinitionParameters>(\n  subject: ExtensionDefinition<T>,\n  options?: { config?: T['configInput'] },\n): ExtensionTester<NonNullable<T['output']>> {\n  return ExtensionTester.forSubject(subject, options);\n}\n"],"names":[],"mappings":"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"}