import { jsx, jsxs } from 'react/jsx-runtime';
import { Fragment } from 'react';
import { Link, MemoryRouter } from 'react-router-dom';
import { createSpecializedApp } from '@backstage/frontend-app-api';
import { render } from '@testing-library/react';
import { ConfigReader } from '@backstage/config';
import { coreExtensionData, NavItemBlueprint, useRouteRef, createExtension, RouterBlueprint, createFrontendPlugin } from '@backstage/frontend-plugin-api';
import appPlugin from '@backstage/plugin-app';

const DEFAULT_MOCK_CONFIG = {
  app: { baseUrl: "http://localhost:3000" },
  backend: { baseUrl: "http://localhost:7007" }
};
const NavItem = (props) => {
  const { routeRef, title, icon: Icon } = props;
  const link = useRouteRef(routeRef);
  if (!link) {
    return null;
  }
  return /* @__PURE__ */ jsx("li", { children: /* @__PURE__ */ jsxs(Link, { to: link(), children: [
    /* @__PURE__ */ jsx(Icon, {}),
    " ",
    title
  ] }) });
};
const appPluginOverride = appPlugin.withOverrides({
  extensions: [
    appPlugin.getExtension("sign-in-page:app").override({
      disabled: true
    }),
    appPlugin.getExtension("app/nav").override({
      output: [coreExtensionData.reactElement],
      factory(_originalFactory, { inputs }) {
        return [
          coreExtensionData.reactElement(
            /* @__PURE__ */ jsx("nav", { children: /* @__PURE__ */ jsx("ul", { children: inputs.items.map((item, index) => {
              const { icon, title, routeRef } = item.get(
                NavItemBlueprint.dataRefs.target
              );
              return /* @__PURE__ */ jsx(
                NavItem,
                {
                  icon,
                  title,
                  routeRef
                },
                index
              );
            }) }) })
          )
        ];
      }
    })
  ]
});
function renderInTestApp(element, options) {
  const extensions = [
    createExtension({
      attachTo: { id: "app/routes", input: "routes" },
      output: [coreExtensionData.reactElement, coreExtensionData.routePath],
      factory: () => {
        return [
          coreExtensionData.reactElement(element),
          coreExtensionData.routePath("/")
        ];
      }
    }),
    RouterBlueprint.make({
      params: {
        component: ({ children }) => /* @__PURE__ */ jsx(MemoryRouter, { initialEntries: options?.initialRouteEntries, children })
      }
    })
  ];
  if (options?.mountedRoutes) {
    for (const [path, routeRef] of Object.entries(options.mountedRoutes)) {
      extensions.push(
        createExtension({
          kind: "test-route",
          name: path,
          attachTo: { id: "app/root", input: "elements" },
          output: [
            coreExtensionData.reactElement,
            coreExtensionData.routePath,
            coreExtensionData.routeRef
          ],
          factory: () => [
            coreExtensionData.reactElement(/* @__PURE__ */ jsx(Fragment, {})),
            coreExtensionData.routePath(path),
            coreExtensionData.routeRef(routeRef)
          ]
        })
      );
    }
  }
  if (options?.extensions) {
    extensions.push(...options.extensions);
  }
  const features = [
    createFrontendPlugin({
      pluginId: "test",
      extensions
    }),
    appPluginOverride
  ];
  if (options?.features) {
    features.push(...options.features);
  }
  const app = createSpecializedApp({
    features,
    config: ConfigReader.fromConfigs([
      {
        context: "render-config",
        data: options?.config ?? DEFAULT_MOCK_CONFIG
      }
    ])
  });
  return render(
    app.tree.root.instance.getData(coreExtensionData.reactElement)
  );
}

export { renderInTestApp };
//# sourceMappingURL=renderInTestApp.esm.js.map
