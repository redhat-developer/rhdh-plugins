{"version":3,"file":"renderInTestApp.esm.js","sources":["../../src/app/renderInTestApp.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Fragment } from 'react';\nimport { Link, MemoryRouter } from 'react-router-dom';\nimport { createSpecializedApp } from '@backstage/frontend-app-api';\nimport { RenderResult, render } from '@testing-library/react';\nimport { ConfigReader } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport {\n  createExtension,\n  ExtensionDefinition,\n  coreExtensionData,\n  RouteRef,\n  useRouteRef,\n  IconComponent,\n  RouterBlueprint,\n  NavItemBlueprint,\n  createFrontendPlugin,\n  FrontendFeature,\n} from '@backstage/frontend-plugin-api';\nimport appPlugin from '@backstage/plugin-app';\n\nconst DEFAULT_MOCK_CONFIG = {\n  app: { baseUrl: 'http://localhost:3000' },\n  backend: { baseUrl: 'http://localhost:7007' },\n};\n\n/**\n * Options to customize the behavior of the test app.\n * @public\n */\nexport type TestAppOptions = {\n  /**\n   * An object of paths to mount route ref on, with the key being the path and the value\n   * being the RouteRef that the path will be bound to. This allows the route refs to be\n   * used by `useRouteRef` in the rendered elements.\n   *\n   * @example\n   * ```ts\n   * renderInTestApp(<MyComponent />, {\n   *   mountedRoutes: {\n   *     '/my-path': myRouteRef,\n   *   }\n   * })\n   * // ...\n   * const link = useRouteRef(myRouteRef)\n   * ```\n   */\n  mountedRoutes?: { [path: string]: RouteRef };\n\n  /**\n   * Additional configuration passed to the app when rendering elements inside it.\n   */\n  config?: JsonObject;\n\n  /**\n   * Additional extensions to add to the test app.\n   */\n  extensions?: ExtensionDefinition<any>[];\n\n  /**\n   * Additional features to add to the test app.\n   */\n  features?: FrontendFeature[];\n\n  /**\n   * Initial route entries to use for the router.\n   */\n  initialRouteEntries?: string[];\n};\n\nconst NavItem = (props: {\n  routeRef: RouteRef<undefined>;\n  title: string;\n  icon: IconComponent;\n}) => {\n  const { routeRef, title, icon: Icon } = props;\n  const link = useRouteRef(routeRef);\n  if (!link) {\n    return null;\n  }\n  return (\n    <li>\n      <Link to={link()}>\n        <Icon /> {title}\n      </Link>\n    </li>\n  );\n};\n\nconst appPluginOverride = appPlugin.withOverrides({\n  extensions: [\n    appPlugin.getExtension('sign-in-page:app').override({\n      disabled: true,\n    }),\n    appPlugin.getExtension('app/nav').override({\n      output: [coreExtensionData.reactElement],\n      factory(_originalFactory, { inputs }) {\n        return [\n          coreExtensionData.reactElement(\n            <nav>\n              <ul>\n                {inputs.items.map((item, index) => {\n                  const { icon, title, routeRef } = item.get(\n                    NavItemBlueprint.dataRefs.target,\n                  );\n\n                  return (\n                    <NavItem\n                      key={index}\n                      icon={icon}\n                      title={title}\n                      routeRef={routeRef}\n                    />\n                  );\n                })}\n              </ul>\n            </nav>,\n          ),\n        ];\n      },\n    }),\n  ],\n});\n\n/**\n * @public\n * Renders the given element in a test app, for use in unit tests.\n */\nexport function renderInTestApp(\n  element: JSX.Element,\n  options?: TestAppOptions,\n): RenderResult {\n  const extensions: Array<ExtensionDefinition> = [\n    createExtension({\n      attachTo: { id: 'app/routes', input: 'routes' },\n      output: [coreExtensionData.reactElement, coreExtensionData.routePath],\n      factory: () => {\n        return [\n          coreExtensionData.reactElement(element),\n          coreExtensionData.routePath('/'),\n        ];\n      },\n    }),\n    RouterBlueprint.make({\n      params: {\n        component: ({ children }) => (\n          <MemoryRouter initialEntries={options?.initialRouteEntries}>\n            {children}\n          </MemoryRouter>\n        ),\n      },\n    }),\n  ];\n\n  if (options?.mountedRoutes) {\n    for (const [path, routeRef] of Object.entries(options.mountedRoutes)) {\n      // TODO(Rugvip): add support for external route refs\n      extensions.push(\n        createExtension({\n          kind: 'test-route',\n          name: path,\n          attachTo: { id: 'app/root', input: 'elements' },\n          output: [\n            coreExtensionData.reactElement,\n            coreExtensionData.routePath,\n            coreExtensionData.routeRef,\n          ],\n          factory: () => [\n            coreExtensionData.reactElement(<Fragment />),\n            coreExtensionData.routePath(path),\n            coreExtensionData.routeRef(routeRef),\n          ],\n        }),\n      );\n    }\n  }\n\n  if (options?.extensions) {\n    extensions.push(...options.extensions);\n  }\n\n  const features: FrontendFeature[] = [\n    createFrontendPlugin({\n      pluginId: 'test',\n      extensions,\n    }),\n    appPluginOverride,\n  ];\n\n  if (options?.features) {\n    features.push(...options.features);\n  }\n\n  const app = createSpecializedApp({\n    features,\n    config: ConfigReader.fromConfigs([\n      {\n        context: 'render-config',\n        data: options?.config ?? DEFAULT_MOCK_CONFIG,\n      },\n    ]),\n  });\n\n  return render(\n    app.tree.root.instance!.getData(coreExtensionData.reactElement),\n  );\n}\n"],"names":[],"mappings":"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"}