{"version":3,"file":"resolveAppNodeSpecs.esm.js","sources":["../../../../../frontend-app-api/src/tree/resolveAppNodeSpecs.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createFrontendPlugin,\n  Extension,\n  FrontendFeature,\n  FrontendPlugin,\n} from '@backstage/frontend-plugin-api';\nimport { ExtensionParameters } from './readAppExtensionsConfig';\nimport { AppNodeSpec } from '@backstage/frontend-plugin-api';\nimport { OpaqueFrontendPlugin } from '@internal/frontend';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  isInternalFrontendModule,\n  toInternalFrontendModule,\n} from '../../../frontend-plugin-api/src/wiring/createFrontendModule';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExtension } from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\nimport { ErrorCollector } from '../wiring/createErrorCollector';\n\n/** @internal */\nexport function resolveAppNodeSpecs(options: {\n  features?: FrontendFeature[];\n  builtinExtensions?: Extension<any, any>[];\n  parameters?: Array<ExtensionParameters>;\n  forbidden?: Set<string>;\n  collector: ErrorCollector;\n}): AppNodeSpec[] {\n  const {\n    builtinExtensions = [],\n    parameters = [],\n    forbidden = new Set(),\n    features = [],\n    collector,\n  } = options;\n\n  const plugins = features.filter(OpaqueFrontendPlugin.isType);\n  const modules = features.filter(isInternalFrontendModule);\n\n  const filterForbidden = (\n    extension: Extension<any, any> & { plugin: FrontendPlugin },\n  ) => {\n    if (forbidden.has(extension.id)) {\n      collector.report({\n        code: 'EXTENSION_IGNORED',\n        message: `It is forbidden to override the '${extension.id}' extension, attempted by the '${extension.plugin.id}' plugin`,\n        context: {\n          plugin: extension.plugin,\n          extensionId: extension.id,\n        },\n      });\n      return false;\n    }\n    return true;\n  };\n\n  const pluginExtensions = plugins.flatMap(plugin => {\n    return OpaqueFrontendPlugin.toInternal(plugin)\n      .extensions.map(extension => ({\n        ...extension,\n        plugin,\n      }))\n      .filter(filterForbidden);\n  });\n  const moduleExtensions = modules.flatMap(mod =>\n    toInternalFrontendModule(mod)\n      .extensions.flatMap(extension => {\n        // Modules for plugins that are not installed are ignored\n        const plugin = plugins.find(p => p.id === mod.pluginId);\n        if (!plugin) {\n          return [];\n        }\n\n        return [{ ...extension, plugin }];\n      })\n      .filter(filterForbidden),\n  );\n\n  const appPlugin =\n    plugins.find(plugin => plugin.id === 'app') ??\n    createFrontendPlugin({\n      pluginId: 'app',\n    });\n\n  const configuredExtensions = [\n    ...pluginExtensions.map(({ plugin, ...extension }) => {\n      const internalExtension = toInternalExtension(extension);\n      return {\n        extension: internalExtension,\n        params: {\n          plugin,\n          source: plugin,\n          attachTo: internalExtension.attachTo,\n          disabled: internalExtension.disabled,\n          config: undefined as unknown,\n        },\n      };\n    }),\n    ...builtinExtensions.map(extension => {\n      const internalExtension = toInternalExtension(extension);\n      return {\n        extension: internalExtension,\n        params: {\n          source: appPlugin,\n          plugin: appPlugin,\n          attachTo: internalExtension.attachTo,\n          disabled: internalExtension.disabled,\n          config: undefined as unknown,\n        },\n      };\n    }),\n  ];\n\n  // Install all module overrides\n  for (const extension of moduleExtensions) {\n    const internalExtension = toInternalExtension(extension);\n\n    // Check if our override is overriding an extension that already exists\n    const index = configuredExtensions.findIndex(\n      e => e.extension.id === extension.id,\n    );\n    if (index !== -1) {\n      // Only implementation, attachment point and default disabled status are overridden, the source is kept\n      configuredExtensions[index].extension = internalExtension;\n      configuredExtensions[index].params.attachTo = internalExtension.attachTo;\n      configuredExtensions[index].params.disabled = internalExtension.disabled;\n    } else {\n      // Add the extension as a new one when not overriding an existing one\n      configuredExtensions.push({\n        extension: internalExtension,\n        params: {\n          plugin: extension.plugin,\n          source: extension.plugin,\n          attachTo: internalExtension.attachTo,\n          disabled: internalExtension.disabled,\n          config: undefined,\n        },\n      });\n    }\n  }\n\n  const seenExtensionIds = new Set<string>();\n  const deduplicatedExtensions = configuredExtensions.filter(\n    ({ extension, params }) => {\n      if (seenExtensionIds.has(extension.id)) {\n        collector.report({\n          code: 'EXTENSION_IGNORED',\n          message: `The '${extension.id}' extension from the '${params.plugin.id}' plugin is a duplicate and will be ignored`,\n          context: {\n            plugin: params.plugin,\n            extensionId: extension.id,\n          },\n        });\n        return false;\n      }\n      seenExtensionIds.add(extension.id);\n      return true;\n    },\n  );\n\n  const order = new Map<string, (typeof deduplicatedExtensions)[number]>();\n  for (const overrideParam of parameters) {\n    const extensionId = overrideParam.id;\n\n    if (forbidden.has(extensionId)) {\n      collector.report({\n        code: 'INVALID_EXTENSION_CONFIG_KEY',\n        message: `Configuration of the '${extensionId}' extension is forbidden`,\n        context: {\n          extensionId,\n        },\n      });\n      continue;\n    }\n\n    const existing = deduplicatedExtensions.find(\n      e => e.extension.id === extensionId,\n    );\n    if (existing) {\n      if (overrideParam.attachTo) {\n        existing.params.attachTo = overrideParam.attachTo;\n      }\n      if (overrideParam.config) {\n        // TODO: merge config?\n        existing.params.config = overrideParam.config;\n      }\n      if (\n        Boolean(existing.params.disabled) !== Boolean(overrideParam.disabled)\n      ) {\n        existing.params.disabled = Boolean(overrideParam.disabled);\n      }\n      order.set(extensionId, existing);\n    } else {\n      collector.report({\n        code: 'INVALID_EXTENSION_CONFIG_KEY',\n        message: `Extension ${extensionId} does not exist`,\n        context: {\n          extensionId,\n        },\n      });\n    }\n  }\n\n  const orderedExtensions = [\n    ...order.values(),\n    ...deduplicatedExtensions.filter(e => !order.has(e.extension.id)),\n  ];\n\n  return orderedExtensions.map(param => ({\n    id: param.extension.id,\n    attachTo: param.params.attachTo,\n    extension: param.extension,\n    disabled: param.params.disabled,\n    plugin: param.params.plugin,\n    source: param.params.source,\n    config: param.params.config,\n  }));\n}\n"],"names":[],"mappings":"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"}