{"version":3,"file":"resolveAppTree.esm.js","sources":["../../../../../frontend-app-api/src/tree/resolveAppTree.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppTree,\n  AppNode,\n  AppNodeInstance,\n  AppNodeSpec,\n} from '@backstage/frontend-plugin-api';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExtension } from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\nimport { ErrorCollector } from '../wiring/createErrorCollector';\n\nfunction indent(str: string) {\n  return str.replace(/^/gm, '  ');\n}\n\n/** @internal */\nclass SerializableAppNode implements AppNode {\n  public readonly spec: AppNodeSpec;\n  public readonly edges = {\n    attachedTo: undefined as { node: AppNode; input: string } | undefined,\n    attachments: new Map<string, SerializableAppNode[]>(),\n  };\n  public readonly instance?: AppNodeInstance;\n\n  constructor(spec: AppNodeSpec) {\n    this.spec = spec;\n  }\n\n  setParent(parent: SerializableAppNode, input: string) {\n    this.edges.attachedTo = { node: parent, input };\n\n    const parentInputEdges = parent.edges.attachments.get(input);\n    if (parentInputEdges) {\n      parentInputEdges.push(this);\n    } else {\n      parent.edges.attachments.set(input, [this]);\n    }\n  }\n\n  toJSON() {\n    const dataRefs = this.instance && [...this.instance.getDataRefs()];\n    return {\n      id: this.spec.id,\n      output:\n        dataRefs && dataRefs.length > 0\n          ? dataRefs.map(ref => ref.id)\n          : undefined,\n      attachments:\n        this.edges.attachments.size > 0\n          ? Object.fromEntries(this.edges.attachments)\n          : undefined,\n    };\n  }\n\n  toString(): string {\n    const dataRefs = this.instance && [...this.instance.getDataRefs()];\n    const out =\n      dataRefs && dataRefs.length > 0\n        ? ` out=[${[...dataRefs].map(r => r.id).join(', ')}]`\n        : '';\n\n    if (this.edges.attachments.size === 0) {\n      return `<${this.spec.id}${out} />`;\n    }\n\n    return [\n      `<${this.spec.id}${out}>`,\n      ...[...this.edges.attachments.entries()].map(([k, v]) =>\n        indent([`${k} [`, ...v.map(e => indent(e.toString())), `]`].join('\\n')),\n      ),\n      `</${this.spec.id}>`,\n    ].join('\\n');\n  }\n}\n\nfunction makeRedirectKey(attachTo: { id: string; input: string }) {\n  return `${attachTo.id}%${attachTo.input}`;\n}\n\nconst isValidAttachmentPoint = (\n  attachTo: { id: string; input: string },\n  nodes: Map<string, SerializableAppNode>,\n) => {\n  if (!nodes.has(attachTo.id)) {\n    return false;\n  }\n\n  return (\n    attachTo.input in\n    toInternalExtension(nodes.get(attachTo.id)!.spec.extension).inputs\n  );\n};\n\n/**\n * Build the app tree by iterating through all node specs and constructing the app\n * tree with all attachments in the same order as they appear in the input specs array.\n * @internal\n */\nexport function resolveAppTree(\n  rootNodeId: string,\n  specs: AppNodeSpec[],\n  errorCollector: ErrorCollector,\n): AppTree {\n  const nodes = new Map<string, SerializableAppNode>();\n\n  const redirectTargetsByKey = new Map<string, { id: string; input: string }>();\n\n  for (const spec of specs) {\n    // The main check with a helpful error message happens in resolveAppNodeSpecs\n    if (nodes.has(spec.id)) {\n      continue;\n    }\n\n    const node = new SerializableAppNode(spec);\n    nodes.set(spec.id, node);\n\n    const internal = toInternalExtension(spec.extension);\n    for (const [inputName, input] of Object.entries(internal.inputs)) {\n      if (input.replaces) {\n        for (const replace of input.replaces) {\n          const key = makeRedirectKey(replace);\n          if (redirectTargetsByKey.has(key)) {\n            errorCollector.report({\n              code: 'EXTENSION_INPUT_REDIRECT_CONFLICT',\n              message: `Duplicate redirect target for input '${inputName}' in extension '${spec.id}'`,\n              context: {\n                node,\n                inputName,\n              },\n            });\n            continue;\n          }\n          redirectTargetsByKey.set(key, { id: spec.id, input: inputName });\n        }\n      }\n    }\n  }\n\n  const orphans = new Array<SerializableAppNode>();\n  const clones = new Map<string, Array<SerializableAppNode>>();\n\n  // A node with the provided rootNodeId must be found in the tree, and it must not be attached to anything\n  let rootNode: AppNode | undefined = undefined;\n\n  for (const node of nodes.values()) {\n    const spec = node.spec;\n\n    // TODO: For now we simply ignore the attachTo spec of the root node, but it'd be cleaner if we could avoid defining it\n    if (spec.id === rootNodeId) {\n      rootNode = node;\n    } else if (Array.isArray(spec.attachTo)) {\n      let foundFirstParent = false;\n      for (const origAttachTo of spec.attachTo) {\n        let attachTo = origAttachTo;\n\n        if (!isValidAttachmentPoint(attachTo, nodes)) {\n          attachTo =\n            redirectTargetsByKey.get(makeRedirectKey(attachTo)) ?? attachTo;\n        }\n\n        const parent = nodes.get(attachTo.id);\n        if (parent) {\n          const cloneParents = clones.get(attachTo.id) ?? [];\n\n          if (!foundFirstParent) {\n            foundFirstParent = true;\n            node.setParent(parent, attachTo.input);\n          } else {\n            cloneParents.unshift(parent);\n          }\n\n          for (const extraParent of cloneParents) {\n            const clonedNode = new SerializableAppNode(spec);\n            clonedNode.setParent(extraParent, attachTo.input);\n            clones.set(\n              spec.id,\n              clones.get(spec.id)?.concat(clonedNode) ?? [clonedNode],\n            );\n          }\n        }\n      }\n      if (!foundFirstParent) {\n        orphans.push(node);\n      }\n    } else {\n      let attachTo = spec.attachTo;\n      if (!isValidAttachmentPoint(attachTo, nodes)) {\n        attachTo =\n          redirectTargetsByKey.get(makeRedirectKey(attachTo)) ?? attachTo;\n      }\n\n      const parent = nodes.get(attachTo.id);\n      if (parent) {\n        node.setParent(parent, attachTo.input);\n      } else {\n        orphans.push(node);\n      }\n    }\n  }\n\n  if (!rootNode) {\n    throw new Error(`No root node with id '${rootNodeId}' found in app tree`);\n  }\n\n  return {\n    root: rootNode,\n    nodes,\n    orphans,\n  };\n}\n"],"names":[],"mappings":"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"}