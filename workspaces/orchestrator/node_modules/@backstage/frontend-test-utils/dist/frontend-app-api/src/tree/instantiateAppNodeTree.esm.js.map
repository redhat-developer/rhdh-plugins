{"version":3,"file":"instantiateAppNodeTree.esm.js","sources":["../../../../../frontend-app-api/src/tree/instantiateAppNodeTree.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiHolder,\n  ExtensionDataContainer,\n  ExtensionDataRef,\n  ExtensionFactoryMiddleware,\n  ExtensionInput,\n  ResolvedExtensionInputs,\n} from '@backstage/frontend-plugin-api';\nimport mapValues from 'lodash/mapValues';\nimport { AppNode, AppNodeInstance } from '@backstage/frontend-plugin-api';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExtension } from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\nimport { createExtensionDataContainer } from '@internal/frontend';\nimport { ErrorCollector } from '../wiring/createErrorCollector';\n\nconst INSTANTIATION_FAILED = new Error('Instantiation failed');\n\n/**\n * Like `array.map`, but if `INSTANTIATION_FAILED` is thrown, the iteration will continue but afterwards re-throw `INSTANTIATION_FAILED`\n * @returns\n */\nfunction mapWithFailures<T, U>(\n  iterable: Iterable<T>,\n  callback: (item: T) => U,\n): U[] {\n  let failed = false;\n  const results = Array.from(iterable).map(item => {\n    try {\n      return callback(item);\n    } catch (error) {\n      if (error === INSTANTIATION_FAILED) {\n        failed = true;\n      } else {\n        throw error;\n      }\n      return null as any;\n    }\n  });\n  if (failed) {\n    throw INSTANTIATION_FAILED;\n  }\n  return results;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\nfunction resolveV1InputDataMap(\n  dataMap: {\n    [name in string]: ExtensionDataRef;\n  },\n  attachment: AppNode,\n  inputName: string,\n) {\n  return Object.fromEntries(\n    mapWithFailures(Object.entries(dataMap), ([key, ref]) => {\n      const value = attachment.instance?.getData(ref);\n      if (value === undefined && !ref.config.optional) {\n        const expected = Object.values(dataMap)\n          .filter(r => !r.config.optional)\n          .map(r => `'${r.id}'`)\n          .join(', ');\n\n        const provided = [...(attachment.instance?.getDataRefs() ?? [])]\n          .map(r => `'${r.id}'`)\n          .join(', ');\n\n        throw new Error(\n          `extension '${attachment.spec.id}' could not be attached because its output data (${provided}) does not match what the input '${inputName}' requires (${expected})`,\n        );\n      }\n      return [key, value];\n    }),\n  );\n}\n\nfunction resolveInputDataContainer(\n  extensionData: Array<ExtensionDataRef>,\n  attachment: AppNode,\n  inputName: string,\n  collector: ErrorCollector<{ node: AppNode; inputName: string }>,\n): { node: AppNode } & ExtensionDataContainer<ExtensionDataRef> {\n  const dataMap = new Map<string, unknown>();\n\n  mapWithFailures(extensionData, ref => {\n    if (dataMap.has(ref.id)) {\n      collector.report({\n        code: 'EXTENSION_INPUT_DATA_IGNORED',\n        message: `Unexpected duplicate input data '${ref.id}'`,\n      });\n      return;\n    }\n\n    const value = attachment.instance?.getData(ref);\n    if (value === undefined && !ref.config.optional) {\n      const expected = extensionData\n        .filter(r => !r.config.optional)\n        .map(r => `'${r.id}'`)\n        .join(', ');\n\n      const provided = [...(attachment.instance?.getDataRefs() ?? [])]\n        .map(r => `'${r.id}'`)\n        .join(', ');\n\n      collector.report({\n        code: 'EXTENSION_INPUT_DATA_MISSING',\n        message: `extension '${attachment.spec.id}' could not be attached because its output data (${provided}) does not match what the input '${inputName}' requires (${expected})`,\n      });\n      throw INSTANTIATION_FAILED;\n    }\n\n    dataMap.set(ref.id, value);\n  });\n\n  return {\n    node: attachment,\n    get(ref) {\n      return dataMap.get(ref.id);\n    },\n    *[Symbol.iterator]() {\n      for (const [id, value] of dataMap) {\n        // TODO: Would be better to be able to create a new instance using the ref here instead\n        yield {\n          $$type: '@backstage/ExtensionDataValue',\n          id,\n          value,\n        };\n      }\n    },\n  } as { node: AppNode } & ExtensionDataContainer<ExtensionDataRef>;\n}\n\nfunction reportUndeclaredAttachments(\n  id: string,\n  inputMap: { [name in string]: unknown },\n  attachments: ReadonlyMap<string, AppNode[]>,\n) {\n  const undeclaredAttachments = Array.from(attachments.entries()).filter(\n    ([inputName]) => inputMap[inputName] === undefined,\n  );\n\n  const inputNames = Object.keys(inputMap);\n\n  for (const [name, nodes] of undeclaredAttachments) {\n    const pl = nodes.length > 1;\n    // eslint-disable-next-line no-console\n    console.warn(\n      [\n        `The extension${pl ? 's' : ''} '${nodes\n          .map(n => n.spec.id)\n          .join(\"', '\")}' ${pl ? 'are' : 'is'}`,\n        `attached to the input '${name}' of the extension '${id}', but it`,\n        inputNames.length === 0\n          ? 'has no inputs'\n          : `has no such input (candidates are '${inputNames.join(\"', '\")}')`,\n      ].join(' '),\n    );\n  }\n}\n\nfunction resolveV1Inputs(\n  inputMap: {\n    [inputName in string]: {\n      $$type: '@backstage/ExtensionInput';\n      extensionData: {\n        [name in string]: ExtensionDataRef;\n      };\n      config: { optional: boolean; singleton: boolean };\n    };\n  },\n  attachments: ReadonlyMap<string, AppNode[]>,\n) {\n  return Object.fromEntries(\n    mapWithFailures(Object.entries(inputMap), ([inputName, input]) => {\n      const attachedNodes = attachments.get(inputName) ?? [];\n\n      if (input.config.singleton) {\n        if (attachedNodes.length > 1) {\n          const attachedNodeIds = attachedNodes.map(e => e.spec.id);\n          throw Error(\n            `expected ${\n              input.config.optional ? 'at most' : 'exactly'\n            } one '${inputName}' input but received multiple: '${attachedNodeIds.join(\n              \"', '\",\n            )}'`,\n          );\n        } else if (attachedNodes.length === 0) {\n          if (input.config.optional) {\n            return [inputName, undefined];\n          }\n          throw Error(`input '${inputName}' is required but was not received`);\n        }\n        return [\n          inputName,\n          {\n            node: attachedNodes[0],\n            output: resolveV1InputDataMap(\n              input.extensionData,\n              attachedNodes[0],\n              inputName,\n            ),\n          },\n        ];\n      }\n\n      return [\n        inputName,\n        attachedNodes.map(attachment => ({\n          node: attachment,\n          output: resolveV1InputDataMap(\n            input.extensionData,\n            attachment,\n            inputName,\n          ),\n        })),\n      ];\n    }),\n  ) as {\n    [inputName in string]: {\n      node: AppNode;\n      output: {\n        [name in string]: unknown;\n      };\n    };\n  };\n}\n\nfunction resolveV2Inputs(\n  inputMap: {\n    [inputName in string]: ExtensionInput<\n      ExtensionDataRef,\n      { optional: boolean; singleton: boolean }\n    >;\n  },\n  attachments: ReadonlyMap<string, AppNode[]>,\n  parentCollector: ErrorCollector<{ node: AppNode }>,\n): ResolvedExtensionInputs<{\n  [inputName in string]: ExtensionInput<\n    ExtensionDataRef,\n    { optional: boolean; singleton: boolean }\n  >;\n}> {\n  return mapValues(inputMap, (input, inputName) => {\n    const attachedNodes = attachments.get(inputName) ?? [];\n    const collector = parentCollector.child({ inputName });\n\n    if (input.config.singleton) {\n      if (attachedNodes.length > 1) {\n        const attachedNodeIds = attachedNodes.map(e => e.spec.id).join(\"', '\");\n        collector.report({\n          code: 'EXTENSION_ATTACHMENT_CONFLICT',\n          message: `expected ${\n            input.config.optional ? 'at most' : 'exactly'\n          } one '${inputName}' input but received multiple: '${attachedNodeIds}'`,\n        });\n        throw INSTANTIATION_FAILED;\n      } else if (attachedNodes.length === 0) {\n        if (!input.config.optional) {\n          collector.report({\n            code: 'EXTENSION_ATTACHMENT_MISSING',\n            message: `input '${inputName}' is required but was not received`,\n          });\n          throw INSTANTIATION_FAILED;\n        }\n        return undefined;\n      }\n      return resolveInputDataContainer(\n        input.extensionData,\n        attachedNodes[0],\n        inputName,\n        collector,\n      );\n    }\n\n    return mapWithFailures(attachedNodes, attachment =>\n      resolveInputDataContainer(\n        input.extensionData,\n        attachment,\n        inputName,\n        collector,\n      ),\n    );\n  }) as ResolvedExtensionInputs<{\n    [inputName in string]: ExtensionInput<\n      ExtensionDataRef,\n      { optional: boolean; singleton: boolean }\n    >;\n  }>;\n}\n\n/** @internal */\nexport function createAppNodeInstance(options: {\n  extensionFactoryMiddleware?: ExtensionFactoryMiddleware;\n  node: AppNode;\n  apis: ApiHolder;\n  attachments: ReadonlyMap<string, AppNode[]>;\n  collector: ErrorCollector;\n}): AppNodeInstance | undefined {\n  const { node, apis, attachments } = options;\n  const collector = options.collector.child({ node });\n  const { id, extension, config } = node.spec;\n  const extensionData = new Map<string, unknown>();\n  const extensionDataRefs = new Set<ExtensionDataRef<unknown>>();\n\n  let parsedConfig: { [x: string]: any };\n  try {\n    parsedConfig = extension.configSchema?.parse(config ?? {}) as {\n      [x: string]: any;\n    };\n  } catch (e) {\n    collector.report({\n      code: 'EXTENSION_CONFIGURATION_INVALID',\n      message: `Invalid configuration for extension '${id}'; caused by ${e}`,\n    });\n    return undefined;\n  }\n\n  try {\n    const internalExtension = toInternalExtension(extension);\n\n    if (process.env.NODE_ENV !== 'production') {\n      reportUndeclaredAttachments(id, internalExtension.inputs, attachments);\n    }\n\n    if (internalExtension.version === 'v1') {\n      const namedOutputs = internalExtension.factory({\n        node,\n        apis,\n        config: parsedConfig,\n        inputs: resolveV1Inputs(internalExtension.inputs, attachments),\n      });\n\n      for (const [name, output] of Object.entries(namedOutputs)) {\n        const ref = internalExtension.output[name];\n        if (!ref) {\n          throw new Error(`unknown output provided via '${name}'`);\n        }\n        if (extensionData.has(ref.id)) {\n          throw new Error(\n            `duplicate extension data '${ref.id}' received via output '${name}'`,\n          );\n        }\n        extensionData.set(ref.id, output);\n        extensionDataRefs.add(ref);\n      }\n    } else if (internalExtension.version === 'v2') {\n      const context = {\n        node,\n        apis,\n        config: parsedConfig,\n        inputs: resolveV2Inputs(\n          internalExtension.inputs,\n          attachments,\n          collector,\n        ),\n      };\n      const outputDataValues = options.extensionFactoryMiddleware\n        ? createExtensionDataContainer(\n            options.extensionFactoryMiddleware(overrideContext => {\n              return createExtensionDataContainer(\n                internalExtension.factory({\n                  node: context.node,\n                  apis: context.apis,\n                  inputs: context.inputs,\n                  config: overrideContext?.config ?? context.config,\n                }),\n                'extension factory',\n              );\n            }, context),\n            'extension factory middleware',\n          )\n        : internalExtension.factory(context);\n\n      if (\n        typeof outputDataValues !== 'object' ||\n        !outputDataValues?.[Symbol.iterator]\n      ) {\n        throw new Error('extension factory did not provide an iterable object');\n      }\n\n      const outputDataMap = new Map<string, unknown>();\n      mapWithFailures(outputDataValues, value => {\n        if (outputDataMap.has(value.id)) {\n          collector.report({\n            code: 'EXTENSION_OUTPUT_CONFLICT',\n            message: `extension factory output duplicate data '${value.id}'`,\n            context: {\n              dataRefId: value.id,\n            },\n          });\n          throw INSTANTIATION_FAILED;\n        } else {\n          outputDataMap.set(value.id, value.value);\n        }\n      });\n\n      for (const ref of internalExtension.output) {\n        const value = outputDataMap.get(ref.id);\n        outputDataMap.delete(ref.id);\n        if (value === undefined) {\n          if (!ref.config.optional) {\n            collector.report({\n              code: 'EXTENSION_OUTPUT_MISSING',\n              message: `missing required extension data output '${ref.id}'`,\n              context: {\n                dataRefId: ref.id,\n              },\n            });\n            throw INSTANTIATION_FAILED;\n          }\n        } else {\n          extensionData.set(ref.id, value);\n          extensionDataRefs.add(ref);\n        }\n      }\n\n      if (outputDataMap.size > 0) {\n        for (const dataRefId of outputDataMap.keys()) {\n          // TODO: Make this a warning\n          collector.report({\n            code: 'EXTENSION_OUTPUT_IGNORED',\n            message: `unexpected output '${dataRefId}'`,\n            context: {\n              dataRefId: dataRefId,\n            },\n          });\n        }\n      }\n    } else {\n      collector.report({\n        code: 'EXTENSION_INVALID',\n        message: `unexpected extension version '${\n          (internalExtension as any).version\n        }'`,\n      });\n      throw INSTANTIATION_FAILED;\n    }\n  } catch (e) {\n    if (e !== INSTANTIATION_FAILED) {\n      collector.report({\n        code: 'EXTENSION_FACTORY_ERROR',\n        message: `Failed to instantiate extension '${id}'${\n          e.name === 'Error' ? `, ${e.message}` : `; caused by ${e}`\n        }`,\n      });\n    }\n    return undefined;\n  }\n\n  return {\n    getDataRefs() {\n      return extensionDataRefs.values();\n    },\n    getData<T>(ref: ExtensionDataRef<T>): T | undefined {\n      return extensionData.get(ref.id) as T | undefined;\n    },\n  };\n}\n\n/**\n * Starting at the provided node, instantiate all reachable nodes in the tree that have not been disabled.\n * @internal\n */\nexport function instantiateAppNodeTree(\n  rootNode: AppNode,\n  apis: ApiHolder,\n  collector: ErrorCollector,\n  extensionFactoryMiddleware?: ExtensionFactoryMiddleware,\n): boolean {\n  function createInstance(node: AppNode): AppNodeInstance | undefined {\n    if (node.instance) {\n      return node.instance;\n    }\n    if (node.spec.disabled) {\n      return undefined;\n    }\n\n    const instantiatedAttachments = new Map<string, AppNode[]>();\n\n    for (const [input, children] of node.edges.attachments) {\n      const instantiatedChildren = children.flatMap(child => {\n        const childInstance = createInstance(child);\n        if (!childInstance) {\n          return [];\n        }\n        return [child];\n      });\n      if (instantiatedChildren.length > 0) {\n        instantiatedAttachments.set(input, instantiatedChildren);\n      }\n    }\n\n    (node as Mutable<AppNode>).instance = createAppNodeInstance({\n      extensionFactoryMiddleware,\n      node,\n      apis,\n      attachments: instantiatedAttachments,\n      collector,\n    });\n\n    return node.instance;\n  }\n\n  return createInstance(rootNode) !== undefined;\n}\n"],"names":[],"mappings":"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"}