'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var alpha$1 = require('@backstage/plugin-catalog-node/alpha');
var alpha = require('@backstage/plugin-search-backend-node/alpha');
var DefaultTechDocsCollatorFactory = require('./collators/DefaultTechDocsCollatorFactory.cjs.js');

const techdocsCollatorEntityTransformerExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.techdocsCollator.transformer"
});
const techDocsCollatorEntityFilterExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.techdocsCollator.entityFilter"
});
var feature = backendPluginApi.createBackendModule({
  pluginId: "search",
  moduleId: "techdocs-collator",
  register(env) {
    let entityTransformer;
    let documentTransformer;
    let entityFilterFunction;
    let customCatalogApiFilters;
    env.registerExtensionPoint(
      techdocsCollatorEntityTransformerExtensionPoint,
      {
        setTransformer(newTransformer) {
          if (entityTransformer) {
            throw new Error(
              "TechDocs collator entity transformer may only be set once"
            );
          }
          entityTransformer = newTransformer;
        },
        setDocumentTransformer(newTransformer) {
          if (documentTransformer) {
            throw new Error(
              "TechDocs collator document transformer may only be set once"
            );
          }
          documentTransformer = newTransformer;
        }
      }
    );
    env.registerExtensionPoint(techDocsCollatorEntityFilterExtensionPoint, {
      setEntityFilterFunction(newEntityFilterFunction) {
        if (entityFilterFunction) {
          throw new Error(
            "TechDocs entity filter functions may only be set once"
          );
        }
        entityFilterFunction = newEntityFilterFunction;
      },
      setCustomCatalogApiFilters(newCatalogApiFilters) {
        if (customCatalogApiFilters) {
          throw new Error(
            "TechDocs catalog entity filters may only be set once"
          );
        }
        customCatalogApiFilters = newCatalogApiFilters;
      }
    });
    env.registerInit({
      deps: {
        config: backendPluginApi.coreServices.rootConfig,
        logger: backendPluginApi.coreServices.logger,
        auth: backendPluginApi.coreServices.auth,
        discovery: backendPluginApi.coreServices.discovery,
        scheduler: backendPluginApi.coreServices.scheduler,
        catalog: alpha$1.catalogServiceRef,
        indexRegistry: alpha.searchIndexRegistryExtensionPoint
      },
      async init({
        config,
        logger,
        auth,
        discovery,
        scheduler,
        catalog,
        indexRegistry
      }) {
        const defaultSchedule = {
          frequency: { minutes: 10 },
          timeout: { minutes: 15 },
          initialDelay: { seconds: 3 }
        };
        const schedule = config.has("search.collators.techdocs.schedule") ? backendPluginApi.readSchedulerServiceTaskScheduleDefinitionFromConfig(
          config.getConfig("search.collators.techdocs.schedule")
        ) : defaultSchedule;
        indexRegistry.addCollator({
          schedule: scheduler.createScheduledTaskRunner(schedule),
          factory: DefaultTechDocsCollatorFactory.DefaultTechDocsCollatorFactory.fromConfig(config, {
            discovery,
            auth,
            logger,
            catalogClient: catalog,
            entityTransformer,
            documentTransformer,
            customCatalogApiFilters,
            entityFilterFunction
          })
        });
      }
    });
  }
});

exports.default = feature;
exports.techDocsCollatorEntityFilterExtensionPoint = techDocsCollatorEntityFilterExtensionPoint;
exports.techdocsCollatorEntityTransformerExtensionPoint = techdocsCollatorEntityTransformerExtensionPoint;
//# sourceMappingURL=module.cjs.js.map
