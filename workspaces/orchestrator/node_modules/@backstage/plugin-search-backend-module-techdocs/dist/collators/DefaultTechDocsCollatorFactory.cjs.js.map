{"version":3,"file":"DefaultTechDocsCollatorFactory.cjs.js","sources":["../../src/collators/DefaultTechDocsCollatorFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CATALOG_FILTER_EXISTS,\n  CatalogApi,\n  CatalogClient,\n  EntityFilterQuery,\n} from '@backstage/catalog-client';\nimport {\n  Entity,\n  parseEntityRef,\n  RELATION_OWNED_BY,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { catalogEntityReadPermission } from '@backstage/plugin-catalog-common/alpha';\nimport { Permission } from '@backstage/plugin-permission-common';\nimport { DocumentCollatorFactory } from '@backstage/plugin-search-common';\nimport { TechDocsDocument } from '@backstage/plugin-techdocs-node';\nimport pLimit from 'p-limit';\nimport { Readable } from 'stream';\nimport { TechDocsCollatorEntityTransformer } from './TechDocsCollatorEntityTransformer';\nimport {\n  MkSearchIndexDoc,\n  TechDocsCollatorDocumentTransformer,\n} from './TechDocsCollatorDocumentTransformer';\nimport { defaultTechDocsCollatorEntityTransformer } from './defaultTechDocsCollatorEntityTransformer';\nimport { defaultTechDocsCollatorDocumentTransformer } from './defaultTechDocsCollatorDocumentTransformer';\nimport {\n  AuthService,\n  DiscoveryService,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\n\n/**\n * Options to configure the TechDocs collator factory\n *\n * @internal\n */\nexport type TechDocsCollatorFactoryOptions = {\n  discovery: DiscoveryService;\n  logger: LoggerService;\n  auth: AuthService;\n  locationTemplate?: string;\n  catalogClient?: CatalogApi;\n  parallelismLimit?: number;\n  legacyPathCasing?: boolean;\n  entityTransformer?: TechDocsCollatorEntityTransformer;\n  documentTransformer?: TechDocsCollatorDocumentTransformer;\n  entityFilterFunction?: (entity: Entity[]) => Entity[];\n  customCatalogApiFilters?: EntityFilterQuery;\n};\n\ntype EntityInfo = {\n  name: string;\n  namespace: string;\n  kind: string;\n};\n\n/**\n * A search collator factory responsible for gathering and transforming\n * TechDocs documents.\n *\n * @internal\n */\nexport class DefaultTechDocsCollatorFactory implements DocumentCollatorFactory {\n  public readonly type: string = 'techdocs';\n  public readonly visibilityPermission: Permission =\n    catalogEntityReadPermission;\n\n  private discovery: DiscoveryService;\n  private locationTemplate: string;\n  private readonly logger: LoggerService;\n  private readonly auth: AuthService;\n  private readonly catalogClient: CatalogApi;\n  private readonly parallelismLimit: number;\n  private readonly legacyPathCasing: boolean;\n  private entityTransformer: TechDocsCollatorEntityTransformer;\n  private documentTransformer: TechDocsCollatorDocumentTransformer;\n  private entityFilterFunction: Function | undefined;\n  private customCatalogApiFilters: EntityFilterQuery | undefined;\n\n  private constructor(options: TechDocsCollatorFactoryOptions) {\n    this.discovery = options.discovery;\n    this.locationTemplate =\n      options.locationTemplate || '/docs/:namespace/:kind/:name/:path';\n    this.logger = options.logger.child({ documentType: this.type });\n    this.catalogClient =\n      options.catalogClient ||\n      new CatalogClient({ discoveryApi: options.discovery });\n    this.parallelismLimit = options.parallelismLimit ?? 10;\n    this.legacyPathCasing = options.legacyPathCasing ?? false;\n    this.entityTransformer = options.entityTransformer ?? (() => ({}));\n    this.documentTransformer = options.documentTransformer ?? (() => ({}));\n    this.entityFilterFunction = options.entityFilterFunction;\n    this.customCatalogApiFilters = options.customCatalogApiFilters;\n    this.auth = options.auth;\n  }\n\n  static fromConfig(config: Config, options: TechDocsCollatorFactoryOptions) {\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n    const locationTemplate = config.getOptionalString(\n      'search.collators.techdocs.locationTemplate',\n    );\n    const parallelismLimit = config.getOptionalNumber(\n      'search.collators.techdocs.parallelismLimit',\n    );\n    return new DefaultTechDocsCollatorFactory({\n      ...options,\n      locationTemplate,\n      parallelismLimit,\n      legacyPathCasing,\n    });\n  }\n\n  async getCollator(): Promise<Readable> {\n    return Readable.from(this.execute());\n  }\n\n  private async *execute(): AsyncGenerator<TechDocsDocument, void, undefined> {\n    const limit = pLimit(this.parallelismLimit);\n    const techDocsBaseUrl = await this.discovery.getBaseUrl('techdocs');\n\n    let entitiesRetrieved = 0;\n    let moreEntitiesToGet = true;\n\n    // Offset/limit pagination is used on the Catalog Client in order to\n    // limit (and allow some control over) memory used by the search backend\n    // at index-time. The batchSize is calculated as a factor of the given\n    // parallelism limit to simplify configuration.\n    const batchSize = this.parallelismLimit * 50;\n    while (moreEntitiesToGet) {\n      const { token: catalogToken } = await this.auth.getPluginRequestToken({\n        onBehalfOf: await this.auth.getOwnServiceCredentials(),\n        targetPluginId: 'catalog',\n      });\n\n      const entities = (\n        await this.catalogClient.getEntities(\n          {\n            filter: {\n              'metadata.annotations.backstage.io/techdocs-ref':\n                CATALOG_FILTER_EXISTS,\n              ...this.customCatalogApiFilters,\n            },\n            limit: batchSize,\n            offset: entitiesRetrieved,\n          },\n          { token: catalogToken },\n        )\n      ).items;\n\n      // Control looping through entity batches.\n      moreEntitiesToGet = entities.length === batchSize;\n      entitiesRetrieved += entities.length;\n\n      const filteredEntities = this.entityFilterFunction\n        ? this.entityFilterFunction(entities)\n        : this.defaultFilteringFunction(entities);\n\n      const docPromises = filteredEntities.map((entity: Entity) =>\n        limit(async (): Promise<TechDocsDocument[]> => {\n          const entityInfo =\n            DefaultTechDocsCollatorFactory.handleEntityInfoCasing(\n              this.legacyPathCasing,\n              {\n                kind: entity.kind,\n                namespace: entity.metadata.namespace || 'default',\n                name: entity.metadata.name,\n              },\n            );\n\n          try {\n            const { token: techdocsToken } =\n              await this.auth.getPluginRequestToken({\n                onBehalfOf: await this.auth.getOwnServiceCredentials(),\n                targetPluginId: 'techdocs',\n              });\n\n            const searchIndex = await fetch(\n              DefaultTechDocsCollatorFactory.constructDocsIndexUrl(\n                techDocsBaseUrl,\n                entityInfo,\n              ),\n              {\n                headers: {\n                  Authorization: `Bearer ${techdocsToken}`,\n                },\n              },\n            ).then(res => res.json());\n\n            return searchIndex.docs.map((doc: MkSearchIndexDoc) => ({\n              ...defaultTechDocsCollatorEntityTransformer(entity),\n              ...defaultTechDocsCollatorDocumentTransformer(doc),\n              ...this.entityTransformer(entity),\n              ...this.documentTransformer(doc),\n              location: this.applyArgsToFormat(\n                this.locationTemplate || '/docs/:namespace/:kind/:name/:path',\n                {\n                  ...entityInfo,\n                  path: doc.location,\n                },\n              ),\n              ...entityInfo,\n              entityTitle: entity.metadata.title,\n              componentType: entity.spec?.type?.toString() || 'other',\n              lifecycle: (entity.spec?.lifecycle as string) || '',\n              owner: getSimpleEntityOwnerString(entity),\n              authorization: {\n                resourceRef: stringifyEntityRef(entity),\n              },\n            }));\n          } catch (e) {\n            this.logger.debug(\n              `Failed to retrieve tech docs search index for entity ${entityInfo.namespace}/${entityInfo.kind}/${entityInfo.name}`,\n              e,\n            );\n            return [];\n          }\n        }),\n      );\n      yield* (await Promise.all(docPromises)).flat();\n    }\n  }\n\n  private applyArgsToFormat(\n    format: string,\n    args: Record<string, string>,\n  ): string {\n    let formatted = format;\n    for (const [key, value] of Object.entries(args)) {\n      formatted = formatted.replace(`:${key}`, value);\n    }\n    return formatted;\n  }\n\n  private defaultFilteringFunction(entities: Entity[]): Entity[] {\n    return entities.filter(\n      entity => entity.metadata?.annotations?.['backstage.io/techdocs-ref'],\n    );\n  }\n\n  private static constructDocsIndexUrl(\n    techDocsBaseUrl: string,\n    entityInfo: { kind: string; namespace: string; name: string },\n  ) {\n    return `${techDocsBaseUrl}/static/docs/${entityInfo.namespace}/${entityInfo.kind}/${entityInfo.name}/search/search_index.json`;\n  }\n\n  private static handleEntityInfoCasing(\n    legacyPaths: boolean,\n    entityInfo: EntityInfo,\n  ): EntityInfo {\n    return legacyPaths\n      ? entityInfo\n      : Object.entries(entityInfo).reduce((acc, [key, value]) => {\n          return { ...acc, [key]: value.toLocaleLowerCase('en-US') };\n        }, {} as EntityInfo);\n  }\n}\n\nfunction getSimpleEntityOwnerString(entity: Entity): string {\n  if (entity.relations) {\n    const owner = entity.relations.find(r => r.type === RELATION_OWNED_BY);\n    if (owner) {\n      const { name } = parseEntityRef(owner.targetRef);\n      return name;\n    }\n  }\n  return '';\n}\n"],"names":["catalogEntityReadPermission","CatalogClient","Readable","pLimit","CATALOG_FILTER_EXISTS","defaultTechDocsCollatorEntityTransformer","defaultTechDocsCollatorDocumentTransformer","stringifyEntityRef","RELATION_OWNED_BY","parseEntityRef"],"mappings":"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"}