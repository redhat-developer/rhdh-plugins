{"version":3,"file":"bitbucketServerPullRequest.cjs.js","sources":["../../src/actions/bitbucketServerPullRequest.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  getBitbucketServerRequestOptions,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  commitAndPushBranch,\n  addFiles,\n  cloneRepo,\n  parseRepoUrl,\n  isNotGitDirectoryOrContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { Config } from '@backstage/config';\nimport fs from 'fs-extra';\nimport { examples } from './bitbucketServerPullRequest.examples';\n\nconst createPullRequest = async (opts: {\n  project: string;\n  repo: string;\n  title: string;\n  description?: string;\n  toRef: {\n    id: string;\n    displayId: string;\n    type: string;\n    latestCommit: string;\n    latestChangeset: string;\n    isDefault: boolean;\n  };\n  fromRef: {\n    id: string;\n    displayId: string;\n    type: string;\n    latestCommit: string;\n    latestChangeset: string;\n    isDefault: boolean;\n  };\n  reviewers?: string[];\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    project,\n    repo,\n    title,\n    description,\n    toRef,\n    fromRef,\n    reviewers,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const data: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      title: title,\n      description: description,\n      state: 'OPEN',\n      open: true,\n      closed: false,\n      locked: true,\n      toRef: toRef,\n      fromRef: fromRef,\n      reviewers: reviewers?.map(reviewer => ({ user: { name: reviewer } })),\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(repo)}/pull-requests`,\n      data,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create pull-requests, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create pull requests, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  return `${r.links.self[0].href}`;\n};\nconst findBranches = async (opts: {\n  project: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const { project, repo, branchName, authorization, apiBaseUrl } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(\n        repo,\n      )}/branches?boostMatches=true&filterText=${encodeURIComponent(\n        branchName,\n      )}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to get branches, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to get branches, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  for (const object of r.values) {\n    if (object.displayId === branchName) {\n      return object;\n    }\n  }\n\n  return undefined;\n};\nconst createBranch = async (opts: {\n  project: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n  startPoint: string;\n}) => {\n  const { project, repo, branchName, authorization, apiBaseUrl, startPoint } =\n    opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: branchName,\n      startPoint,\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(repo)}/branches`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create branch, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to create branch, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  return await response.json();\n};\nconst getDefaultBranch = async (opts: {\n  project: string;\n  repo: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const { project, repo, authorization, apiBaseUrl } = opts;\n  let response: Response;\n\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${project}/repos/${repo}/default-branch`,\n      options,\n    );\n  } catch (error) {\n    throw error;\n  }\n\n  const { displayId } = await response.json();\n  const defaultBranch = displayId;\n  if (!defaultBranch) {\n    throw new Error(`Could not fetch default branch for ${project}/${repo}`);\n  }\n  return defaultBranch;\n};\nconst isApiBaseUrlHttps = (apiBaseUrl: string): boolean => {\n  const url = new URL(apiBaseUrl);\n  return url.protocol === 'https:';\n};\n/**\n * Creates a BitbucketServer Pull Request action.\n * @public\n */\nexport function createPublishBitbucketServerPullRequestAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:bitbucketServer:pull-request',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        title: z =>\n          z.string({\n            description: 'The title for the pull request',\n          }),\n        description: z =>\n          z\n            .string({\n              description: 'The description of the pull request',\n            })\n            .optional(),\n        targetBranch: z =>\n          z\n            .string({\n              description: `Branch of repository to apply changes to. The default value is 'master'`,\n            })\n            .optional(),\n        sourceBranch: z =>\n          z.string({\n            description: 'Branch of repository to copy changes from',\n          }),\n        reviewers: z =>\n          z\n            .array(z.string(), {\n              description:\n                'The usernames of reviewers that will be added to the pull request',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description:\n                'The token to use for authorization to BitBucket Server',\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the author email for the commit.`,\n            })\n            .optional(),\n      },\n      output: {\n        pullRequestUrl: z =>\n          z\n            .string({\n              description: 'A URL to the pull request with the provider',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        title,\n        description,\n        targetBranch,\n        sourceBranch,\n        reviewers,\n        gitAuthorName,\n        gitAuthorEmail,\n      } = ctx.input;\n\n      const { project, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketServer.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const token = ctx.input.token ?? integrationConfig.config.token;\n\n      const authConfig = {\n        ...integrationConfig.config,\n        ...{ token },\n      };\n\n      const reqOpts = getBitbucketServerRequestOptions(authConfig);\n      const authorization = reqOpts.headers.Authorization;\n      if (!authorization) {\n        throw new Error(\n          `Authorization has not been provided for ${integrationConfig.config.host}. Please add either (a) a user login auth token, or (b) a token input from the template or (c) username + password to the integration config.`,\n        );\n      }\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      let finalTargetBranch = targetBranch;\n      if (!finalTargetBranch) {\n        finalTargetBranch = await getDefaultBranch({\n          project,\n          repo,\n          authorization,\n          apiBaseUrl,\n        });\n      }\n\n      const toRef = await findBranches({\n        project,\n        repo,\n        branchName: finalTargetBranch!,\n        authorization,\n        apiBaseUrl,\n      });\n\n      let fromRef = await findBranches({\n        project,\n        repo,\n        branchName: sourceBranch,\n        authorization,\n        apiBaseUrl,\n      });\n\n      if (!fromRef) {\n        // create branch\n        ctx.logger.info(\n          `source branch not found -> creating branch named: ${sourceBranch} lastCommit: ${toRef.latestCommit}`,\n        );\n        const latestCommit = toRef.latestCommit;\n\n        fromRef = await createBranch({\n          project,\n          repo,\n          branchName: sourceBranch,\n          authorization,\n          apiBaseUrl,\n          startPoint: latestCommit,\n        });\n\n        const isHttps: boolean = isApiBaseUrlHttps(apiBaseUrl);\n        const remoteUrl = `${\n          isHttps ? 'https' : 'http'\n        }://${host}/scm/${project}/${repo}.git`;\n\n        const auth = authConfig.token\n          ? {\n              token: token!,\n            }\n          : {\n              username: authConfig.username!,\n              password: authConfig.password!,\n            };\n\n        const gitAuthorInfo = {\n          name:\n            gitAuthorName ||\n            config.getOptionalString('scaffolder.defaultAuthor.name'),\n          email:\n            gitAuthorEmail ||\n            config.getOptionalString('scaffolder.defaultAuthor.email'),\n        };\n\n        const tempDir = await ctx.createTemporaryDirectory();\n        const sourceDir = getRepoSourceDirectory(ctx.workspacePath, undefined);\n        await cloneRepo({\n          url: remoteUrl,\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          ref: sourceBranch,\n        });\n\n        // copy files\n        fs.cpSync(sourceDir, tempDir, {\n          recursive: true,\n          filter: isNotGitDirectoryOrContents,\n        });\n\n        await addFiles({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          filepath: '.',\n        });\n\n        await commitAndPushBranch({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          commitMessage:\n            description ??\n            config.getOptionalString('scaffolder.defaultCommitMessage') ??\n            '',\n          gitAuthorInfo,\n          branch: sourceBranch,\n        });\n      }\n\n      const pullRequestUrl = await createPullRequest({\n        project,\n        repo,\n        title,\n        description,\n        toRef,\n        fromRef,\n        reviewers,\n        authorization,\n        apiBaseUrl,\n      });\n\n      ctx.output('pullRequestUrl', pullRequestUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getBitbucketServerRequestOptions","getRepoSourceDirectory","cloneRepo","fs","isNotGitDirectoryOrContents","addFiles","commitAndPushBranch"],"mappings":"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"}