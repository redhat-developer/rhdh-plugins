{"version":3,"file":"bitbucketServer.cjs.js","sources":["../../src/actions/bitbucketServer.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  getBitbucketServerRequestOptions,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  initRepoAndPush,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\n\nimport { Config } from '@backstage/config';\nimport { examples } from './bitbucketServer.examples';\n\nconst createRepository = async (opts: {\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  defaultBranch: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    project,\n    repo,\n    description,\n    authorization,\n    repoVisibility,\n    defaultBranch,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: repo,\n      description: description,\n      defaultBranch: defaultBranch,\n      public: repoVisibility === 'public',\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(`${apiBaseUrl}/projects/${project}/repos`, options);\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'http') {\n      remoteUrl = link.href;\n    }\n  }\n\n  const repoContentsUrl = `${r.links.self[0].href}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\nconst performEnableLFS = async (opts: {\n  authorization: string;\n  host: string;\n  project: string;\n  repo: string;\n}) => {\n  const { authorization, host, project, repo } = opts;\n\n  const options: RequestInit = {\n    method: 'PUT',\n    headers: {\n      Authorization: authorization,\n    },\n  };\n\n  const { ok, status, statusText } = await fetch(\n    `https://${host}/rest/git-lfs/admin/projects/${project}/repos/${repo}/enabled`,\n    options,\n  );\n\n  if (!ok)\n    throw new Error(\n      `Failed to enable LFS in the repository, ${status}: ${statusText}`,\n    );\n};\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Bitbucket Server.\n * @public\n */\nexport function createPublishBitbucketServerAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:bitbucketServer',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Bitbucket Server.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        description: z =>\n          z\n            .string({\n              description: 'Repository Description',\n            })\n            .optional(),\n        repoVisibility: z =>\n          z\n            .enum(['private', 'public'], {\n              description: 'Repository Visibility',\n            })\n            .optional(),\n        defaultBranch: z =>\n          z\n            .string({\n              description: `Sets the default branch on the repository. The default value is 'master'`,\n            })\n            .optional(),\n        sourcePath: z =>\n          z\n            .string({\n              description:\n                'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            })\n            .optional(),\n        enableLFS: z =>\n          z\n            .boolean({\n              description: 'Enable LFS for the repository.',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description:\n                'The token to use for authorization to BitBucket Server',\n            })\n            .optional(),\n        gitCommitMessage: z =>\n          z\n            .string({\n              description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the author email for the commit.`,\n            })\n            .optional(),\n        signCommit: z =>\n          z\n            .boolean({\n              description: 'Sign commit with configured PGP private key',\n            })\n            .optional(),\n      },\n      output: {\n        remoteUrl: z =>\n          z\n            .string({\n              description: 'A URL to the repository with the provider',\n            })\n            .optional(),\n        repoContentsUrl: z =>\n          z\n            .string({\n              description: 'A URL to the root of the repository',\n            })\n            .optional(),\n        commitHash: z =>\n          z\n            .string({\n              description: 'The git commit hash of the initial commit',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'master',\n        repoVisibility = 'private',\n        enableLFS = false,\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n        signCommit,\n      } = ctx.input;\n\n      const { project, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketServer.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const token = ctx.input.token ?? integrationConfig.config.token;\n\n      const authConfig = {\n        ...integrationConfig.config,\n        ...{ token },\n      };\n      const reqOpts = getBitbucketServerRequestOptions(authConfig);\n      const authorization = reqOpts.headers.Authorization;\n      if (!authorization) {\n        throw new Error(\n          `Authorization has not been provided for ${integrationConfig.config.host}. Please add either (a) a user login auth token, or (b) a token or (c) username + password to the integration config.`,\n        );\n      }\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      const { remoteUrl, repoContentsUrl } = await createRepository({\n        authorization,\n        project,\n        repo,\n        repoVisibility,\n        defaultBranch,\n        description,\n        apiBaseUrl,\n      });\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      const signingKey =\n        integrationConfig.config.commitSigningKey ??\n        config.getOptionalString('scaffolder.defaultCommitSigningKey');\n      if (signCommit && !signingKey) {\n        throw new Error(\n          'Signing commits is enabled but no signing key is provided in the configuration',\n        );\n      }\n\n      const auth = authConfig.token\n        ? {\n            token: token!,\n          }\n        : {\n            username: authConfig.username!,\n            password: authConfig.password!,\n          };\n\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl,\n        auth,\n        defaultBranch,\n        logger: ctx.logger,\n        commitMessage: gitCommitMessage\n          ? gitCommitMessage\n          : config.getOptionalString('scaffolder.defaultCommitMessage'),\n        gitAuthorInfo,\n        signingKey: signCommit ? signingKey : undefined,\n      });\n\n      if (enableLFS) {\n        await performEnableLFS({ authorization, host, project, repo });\n      }\n\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getBitbucketServerRequestOptions","initRepoAndPush","getRepoSourceDirectory"],"mappings":"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"}