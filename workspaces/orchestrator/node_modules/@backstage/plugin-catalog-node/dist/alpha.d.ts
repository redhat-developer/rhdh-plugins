import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import * as _backstage_plugin_permission_node from '@backstage/plugin-permission-node';
import { PermissionRule } from '@backstage/plugin-permission-node';
import { CatalogApi } from '@backstage/catalog-client';
import { Entity, Validators } from '@backstage/catalog-model';
import { CatalogProcessor, EntityProvider, PlaceholderResolver, LocationAnalyzer, ScmLocationAnalyzer, EntitiesSearchFilter, CatalogProcessorParser } from '@backstage/plugin-catalog-node';
import { PermissionRuleParams, Permission } from '@backstage/plugin-permission-common';

/**
 * @alpha
 */
interface CatalogLocationsExtensionPoint {
    /**
     * Allows setting custom location types, such as showcased in: https://backstage.io/docs/features/software-catalog/external-integrations/#creating-a-catalog-data-reader-processor
     * @param locationTypes - List of location types to allow, default is "url" and "file"
     */
    setAllowedLocationTypes(locationTypes: Array<string>): void;
}
/**
 * @alpha
 */
declare const catalogLocationsExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<CatalogLocationsExtensionPoint>;
/**
 * @alpha
 */
interface CatalogProcessingExtensionPoint {
    /**
     * Adds entity processors. These are responsible for reading, parsing, and
     * processing entities before they are persisted in the catalog.
     *
     * This function also can replace a Default processor if the provided processor
     * matches the processor name.
     *
     * @param processors - One or more processors
     */
    addProcessor(...processors: Array<CatalogProcessor | Array<CatalogProcessor>>): void;
    /**
     * Adds or replaces entity providers. These are responsible for bootstrapping
     * the list of entities out of original data sources. For example, there is
     * one entity source for the config locations, and one for the database
     * stored locations. If you ingest entities out of a third party system, you
     * may want to implement that in terms of an entity provider as well.
     *
     * @param providers - One or more entity providers
     */
    addEntityProvider(...providers: Array<EntityProvider | Array<EntityProvider>>): void;
    /**
     * Adds, or overwrites, a handler for placeholders (e.g. $file) in entity
     * definition files.
     *
     * @param key - The key that identifies the placeholder, e.g. "file"
     * @param resolver - The resolver that gets values for this placeholder
     */
    addPlaceholderResolver(key: string, resolver: PlaceholderResolver): void;
    setOnProcessingErrorHandler(handler: (event: {
        unprocessedEntity: Entity;
        errors: Error[];
    }) => Promise<void> | void): void;
}
/** @alpha */
interface CatalogModelExtensionPoint {
    /**
     * Sets the validator function to use for one or more special fields of an
     * entity. This is useful if the default rules for formatting of fields are
     * not sufficient.
     *
     * @param validators - The (subset of) validators to set
     */
    setFieldValidators(validators: Partial<Validators>): void;
    /**
     * Sets the entity data parser which is used to read raw data from locations
     * @param parser - Parser which will used to extract entities from raw data
     */
    setEntityDataParser(parser: CatalogProcessorParser): void;
}
/**
 * @alpha
 */
declare const catalogProcessingExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<CatalogProcessingExtensionPoint>;
/**
 * @alpha
 */
interface CatalogAnalysisExtensionPoint {
    /**
     * Replaces the entire location analyzer with a new one.
     *
     * @remarks
     *
     * By providing a factory function you can access all the SCM analyzers that
     * have been added through `addScmLocationAnalyzer`. If you provide a
     * `LocationAnalyzer` directly, the SCM analyzers will be ignored.
     */
    setLocationAnalyzer(analyzerOrFactory: LocationAnalyzer | ((options: {
        scmLocationAnalyzers: ScmLocationAnalyzer[];
    }) => Promise<{
        locationAnalyzer: LocationAnalyzer;
    }>)): void;
    /**
     * Adds an analyzer for a specific SCM type to the default location analyzer.
     */
    addScmLocationAnalyzer(analyzer: ScmLocationAnalyzer): void;
}
/**
 * @alpha
 */
declare const catalogAnalysisExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<CatalogAnalysisExtensionPoint>;
/** @alpha */
declare const catalogModelExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<CatalogModelExtensionPoint>;
/**
 * @alpha
 * @deprecated Use the `coreServices.permissionsRegistry` instead.
 */
type CatalogPermissionRuleInput<TParams extends PermissionRuleParams = PermissionRuleParams> = PermissionRule<Entity, EntitiesSearchFilter, 'catalog-entity', TParams>;
/**
 * @alpha
 * @deprecated Use the `coreServices.permissionsRegistry` instead.
 */
interface CatalogPermissionExtensionPoint {
    addPermissions(...permissions: Array<Permission | Array<Permission>>): void;
    addPermissionRules(...rules: Array<CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>>): void;
}
/**
 * @alpha
 * @deprecated Use the `coreServices.permissionsRegistry` instead.
 */
declare const catalogPermissionExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<CatalogPermissionExtensionPoint>;

/** @alpha */
declare const catalogEntityPermissionResourceRef: _backstage_plugin_permission_node.PermissionResourceRef<Entity, EntitiesSearchFilter, "catalog-entity", "catalog">;
/**
 * @alpha
 * @deprecated Use {@link @backstage/plugin-catalog-node#catalogServiceRef} instead
 */
declare const catalogServiceRef: _backstage_backend_plugin_api.ServiceRef<CatalogApi, "plugin", "singleton">;

export { type CatalogAnalysisExtensionPoint, type CatalogLocationsExtensionPoint, type CatalogModelExtensionPoint, type CatalogPermissionExtensionPoint, type CatalogPermissionRuleInput, type CatalogProcessingExtensionPoint, catalogAnalysisExtensionPoint, catalogEntityPermissionResourceRef, catalogLocationsExtensionPoint, catalogModelExtensionPoint, catalogPermissionExtensionPoint, catalogProcessingExtensionPoint, catalogServiceRef };
