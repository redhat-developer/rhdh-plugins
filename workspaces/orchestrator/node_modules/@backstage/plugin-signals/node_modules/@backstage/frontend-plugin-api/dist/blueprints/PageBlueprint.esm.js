import { coreExtensionData } from '../wiring/coreExtensionData.esm.js';
import 'zod';
import 'zod-to-json-schema';
import { createExtensionBlueprint } from '../wiring/createExtensionBlueprint.esm.js';
import { ExtensionBoundary } from '../components/ExtensionBoundary.esm.js';
import 'react/jsx-runtime';
import '../apis/definitions/AppTreeApi.esm.js';
import '@backstage/core-plugin-api';
import '../apis/definitions/SwappableComponentsApi.esm.js';
import '../apis/definitions/IconsApi.esm.js';
import '../apis/definitions/DialogApi.esm.js';
import '../apis/definitions/RouteResolutionApi.esm.js';
import '../apis/definitions/AnalyticsApi.esm.js';
import 'react';
import '../components/AppNodeProvider.esm.js';
import '../components/DefaultSwappableComponents.esm.js';

const PageBlueprint = createExtensionBlueprint({
  kind: "page",
  attachTo: { id: "app/routes", input: "routes" },
  output: [
    coreExtensionData.routePath,
    coreExtensionData.reactElement,
    coreExtensionData.routeRef.optional()
  ],
  config: {
    schema: {
      path: (z) => z.string().optional()
    }
  },
  *factory(params, { config, node }) {
    yield coreExtensionData.routePath(config.path ?? params.path);
    yield coreExtensionData.reactElement(
      ExtensionBoundary.lazy(node, params.loader)
    );
    if (params.routeRef) {
      yield coreExtensionData.routeRef(params.routeRef);
    }
  }
});

export { PageBlueprint };
//# sourceMappingURL=PageBlueprint.esm.js.map
