import { createExtensionBlueprint, coreExtensionData, ExtensionBoundary } from '@backstage/frontend-plugin-api';
import { entityCardTypeDataRef, entityFilterExpressionDataRef, entityFilterFunctionDataRef, entityCardTypes } from './extensionData.esm.js';
import { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema.esm.js';
import { resolveEntityFilterData } from './resolveEntityFilterData.esm.js';

const EntityCardBlueprint = createExtensionBlueprint({
  kind: "entity-card",
  attachTo: { id: "entity-content:catalog/overview", input: "cards" },
  output: [
    coreExtensionData.reactElement,
    entityFilterFunctionDataRef.optional(),
    entityFilterExpressionDataRef.optional(),
    entityCardTypeDataRef.optional()
  ],
  dataRefs: {
    filterFunction: entityFilterFunctionDataRef,
    filterExpression: entityFilterExpressionDataRef,
    type: entityCardTypeDataRef
  },
  config: {
    schema: {
      filter: (z) => z.union([z.string(), createEntityPredicateSchema(z)]).optional(),
      type: (z) => z.enum(entityCardTypes).optional()
    }
  },
  *factory({
    loader,
    filter,
    type
  }, { node, config }) {
    yield coreExtensionData.reactElement(ExtensionBoundary.lazy(node, loader));
    yield* resolveEntityFilterData(filter, config, node);
    const finalType = config.type ?? type;
    if (finalType) {
      yield entityCardTypeDataRef(finalType);
    }
  }
});

export { EntityCardBlueprint };
//# sourceMappingURL=EntityCardBlueprint.esm.js.map
