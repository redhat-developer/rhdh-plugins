import { createExtensionDataRef, createExtensionBlueprint, ExtensionBoundary } from '@backstage/frontend-plugin-api';
import { entityFilterExpressionDataRef, entityFilterFunctionDataRef } from './extensionData.esm.js';
import { resolveEntityFilterData } from './resolveEntityFilterData.esm.js';
import { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema.esm.js';

const entityCardLayoutComponentDataRef = createExtensionDataRef().with({
  id: "catalog.entity-content-layout.component"
});
const EntityContentLayoutBlueprint = createExtensionBlueprint({
  kind: "entity-content-layout",
  attachTo: { id: "entity-content:catalog/overview", input: "layouts" },
  output: [
    entityFilterFunctionDataRef.optional(),
    entityFilterExpressionDataRef.optional(),
    entityCardLayoutComponentDataRef
  ],
  dataRefs: {
    filterFunction: entityFilterFunctionDataRef,
    filterExpression: entityFilterExpressionDataRef,
    component: entityCardLayoutComponentDataRef
  },
  config: {
    schema: {
      type: (z) => z.string().optional(),
      filter: (z) => z.union([z.string(), createEntityPredicateSchema(z)]).optional()
    }
  },
  *factory({
    loader,
    filter
  }, { node, config }) {
    yield* resolveEntityFilterData(filter, config, node);
    yield entityCardLayoutComponentDataRef(
      ExtensionBoundary.lazyComponent(node, loader)
    );
  }
});

export { EntityContentLayoutBlueprint };
//# sourceMappingURL=EntityContentLayoutBlueprint.esm.js.map
