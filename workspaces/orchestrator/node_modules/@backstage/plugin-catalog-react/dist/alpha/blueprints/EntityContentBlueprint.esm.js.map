{"version":3,"file":"EntityContentBlueprint.esm.js","sources":["../../../src/alpha/blueprints/EntityContentBlueprint.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreExtensionData,\n  createExtensionBlueprint,\n  ExtensionBoundary,\n  RouteRef,\n} from '@backstage/frontend-plugin-api';\nimport {\n  entityContentTitleDataRef,\n  entityFilterFunctionDataRef,\n  entityFilterExpressionDataRef,\n  entityContentGroupDataRef,\n  defaultEntityContentGroups,\n} from './extensionData';\nimport { EntityPredicate } from '../predicates/types';\nimport { resolveEntityFilterData } from './resolveEntityFilterData';\nimport { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema';\nimport { Entity } from '@backstage/catalog-model';\n\n/**\n * @alpha\n * Creates an EntityContent extension.\n */\nexport const EntityContentBlueprint = createExtensionBlueprint({\n  kind: 'entity-content',\n  attachTo: { id: 'page:catalog/entity', input: 'contents' },\n  output: [\n    coreExtensionData.reactElement,\n    coreExtensionData.routePath,\n    entityContentTitleDataRef,\n    coreExtensionData.routeRef.optional(),\n    entityFilterFunctionDataRef.optional(),\n    entityFilterExpressionDataRef.optional(),\n    entityContentGroupDataRef.optional(),\n  ],\n  dataRefs: {\n    title: entityContentTitleDataRef,\n    filterFunction: entityFilterFunctionDataRef,\n    filterExpression: entityFilterExpressionDataRef,\n    group: entityContentGroupDataRef,\n  },\n  config: {\n    schema: {\n      path: z => z.string().optional(),\n      title: z => z.string().optional(),\n      filter: z =>\n        z.union([z.string(), createEntityPredicateSchema(z)]).optional(),\n      group: z => z.literal(false).or(z.string()).optional(),\n    },\n  },\n  *factory(\n    params: {\n      /**\n       * @deprecated Use the `path` param instead.\n       */\n      defaultPath?: [Error: `Use the 'path' param instead`];\n      path: string;\n      /**\n       * @deprecated Use the `path` param instead.\n       */\n      defaultTitle?: [Error: `Use the 'title' param instead`];\n      title: string;\n      /**\n       * @deprecated Use the `path` param instead.\n       */\n      defaultGroup?: [Error: `Use the 'group' param instead`];\n      group?: keyof typeof defaultEntityContentGroups | (string & {});\n      loader: () => Promise<JSX.Element>;\n      routeRef?: RouteRef;\n      filter?: string | EntityPredicate | ((entity: Entity) => boolean);\n    },\n    { node, config },\n  ) {\n    // TODO(blam): Remove support for all the `default*` props in the future, this breaks backwards compatibility without it\n    // As this is marked as BREAKING ALPHA, it doesn't affect the public API so it falls in range and gets picked\n    // up by packages that depend on `catalog-react`.\n    const path = config.path ?? params.path ?? params.defaultPath;\n    const title = config.title ?? params.title ?? params.defaultTitle;\n    const group = config.group ?? params.group ?? params.defaultGroup;\n\n    yield coreExtensionData.reactElement(\n      ExtensionBoundary.lazy(node, params.loader),\n    );\n\n    yield coreExtensionData.routePath(path);\n\n    yield entityContentTitleDataRef(title);\n\n    if (params.routeRef) {\n      yield coreExtensionData.routeRef(params.routeRef);\n    }\n\n    yield* resolveEntityFilterData(params.filter, config, node);\n\n    if (group && typeof group === 'string') {\n      yield entityContentGroupDataRef(group);\n    }\n  },\n});\n"],"names":[],"mappings":";;;;;AAsCO,MAAM,yBAAyB,wBAAA,CAAyB;AAAA,EAC7D,IAAA,EAAM,gBAAA;AAAA,EACN,QAAA,EAAU,EAAE,EAAA,EAAI,qBAAA,EAAuB,OAAO,UAAA,EAAW;AAAA,EACzD,MAAA,EAAQ;AAAA,IACN,iBAAA,CAAkB,YAAA;AAAA,IAClB,iBAAA,CAAkB,SAAA;AAAA,IAClB,yBAAA;AAAA,IACA,iBAAA,CAAkB,SAAS,QAAA,EAAS;AAAA,IACpC,4BAA4B,QAAA,EAAS;AAAA,IACrC,8BAA8B,QAAA,EAAS;AAAA,IACvC,0BAA0B,QAAA;AAAS,GACrC;AAAA,EACA,QAAA,EAAU;AAAA,IACR,KAAA,EAAO,yBAAA;AAAA,IACP,cAAA,EAAgB,2BAAA;AAAA,IAChB,gBAAA,EAAkB,6BAAA;AAAA,IAClB,KAAA,EAAO;AAAA,GACT;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,MAAA,EAAQ;AAAA,MACN,IAAA,EAAM,CAAA,CAAA,KAAK,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS;AAAA,MAC/B,KAAA,EAAO,CAAA,CAAA,KAAK,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS;AAAA,MAChC,MAAA,EAAQ,CAAA,CAAA,KACN,CAAA,CAAE,KAAA,CAAM,CAAC,CAAA,CAAE,MAAA,EAAO,EAAG,2BAAA,CAA4B,CAAC,CAAC,CAAC,EAAE,QAAA,EAAS;AAAA,MACjE,KAAA,EAAO,CAAA,CAAA,KAAK,CAAA,CAAE,OAAA,CAAQ,KAAK,CAAA,CAAE,EAAA,CAAG,CAAA,CAAE,MAAA,EAAQ,CAAA,CAAE,QAAA;AAAS;AACvD,GACF;AAAA,EACA,CAAC,OAAA,CACC,MAAA,EAoBA,EAAE,IAAA,EAAM,QAAO,EACf;AAIA,IAAA,MAAM,IAAA,GAAO,MAAA,CAAO,IAAA,IAAQ,MAAA,CAAO,QAAQ,MAAA,CAAO,WAAA;AAClD,IAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,KAAA,IAAS,MAAA,CAAO,SAAS,MAAA,CAAO,YAAA;AACrD,IAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,KAAA,IAAS,MAAA,CAAO,SAAS,MAAA,CAAO,YAAA;AAErD,IAAA,MAAM,iBAAA,CAAkB,YAAA;AAAA,MACtB,iBAAA,CAAkB,IAAA,CAAK,IAAA,EAAM,MAAA,CAAO,MAAM;AAAA,KAC5C;AAEA,IAAA,MAAM,iBAAA,CAAkB,UAAU,IAAI,CAAA;AAEtC,IAAA,MAAM,0BAA0B,KAAK,CAAA;AAErC,IAAA,IAAI,OAAO,QAAA,EAAU;AACnB,MAAA,MAAM,iBAAA,CAAkB,QAAA,CAAS,MAAA,CAAO,QAAQ,CAAA;AAAA,IAClD;AAEA,IAAA,OAAO,uBAAA,CAAwB,MAAA,CAAO,MAAA,EAAQ,MAAA,EAAQ,IAAI,CAAA;AAE1D,IAAA,IAAI,KAAA,IAAS,OAAO,KAAA,KAAU,QAAA,EAAU;AACtC,MAAA,MAAM,0BAA0B,KAAK,CAAA;AAAA,IACvC;AAAA,EACF;AACF,CAAC;;;;"}