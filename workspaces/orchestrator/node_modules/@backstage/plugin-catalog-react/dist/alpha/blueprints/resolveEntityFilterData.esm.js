import { entityFilterExpressionDataRef, entityFilterFunctionDataRef } from './extensionData.esm.js';
import { entityPredicateToFilterFunction } from '../predicates/entityPredicateToFilterFunction.esm.js';

function* resolveEntityFilterData(filter, config, node) {
  if (typeof config.filter === "string") {
    console.warn(
      `DEPRECATION WARNING: Using a string-based filter in the configuration for '${node.spec.id}' is deprecated. Use an entity predicate object instead.`
    );
    yield entityFilterExpressionDataRef(config.filter);
  } else if (config.filter) {
    yield entityFilterFunctionDataRef(
      entityPredicateToFilterFunction(config.filter)
    );
  } else if (typeof filter === "function") {
    yield entityFilterFunctionDataRef(filter);
  } else if (typeof filter === "string") {
    console.warn(
      `DEPRECATION WARNING: Using a string as the default filter for '${node.spec.id}' is deprecated. Use an entity predicate object instead.`
    );
    yield entityFilterExpressionDataRef(filter);
  } else if (filter) {
    yield entityFilterFunctionDataRef(entityPredicateToFilterFunction(filter));
  }
}

export { resolveEntityFilterData };
//# sourceMappingURL=resolveEntityFilterData.esm.js.map
