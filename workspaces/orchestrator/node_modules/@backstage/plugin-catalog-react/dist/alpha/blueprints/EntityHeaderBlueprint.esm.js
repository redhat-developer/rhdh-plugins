import { createExtensionBlueprint, coreExtensionData, ExtensionBoundary } from '@backstage/frontend-plugin-api';
import { resolveEntityFilterData } from './resolveEntityFilterData.esm.js';
import { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema.esm.js';
import { entityFilterFunctionDataRef, entityFilterExpressionDataRef } from './extensionData.esm.js';

const EntityHeaderBlueprint = createExtensionBlueprint({
  kind: "entity-header",
  attachTo: { id: "page:catalog/entity", input: "headers" },
  dataRefs: {
    filterFunction: entityFilterFunctionDataRef,
    element: coreExtensionData.reactElement
  },
  config: {
    schema: {
      filter: (z) => createEntityPredicateSchema(z).optional()
    }
  },
  output: [
    entityFilterFunctionDataRef.optional(),
    entityFilterExpressionDataRef.optional(),
    coreExtensionData.reactElement.optional()
  ],
  *factory(params, { node, config }) {
    const { loader, filter } = params;
    yield* resolveEntityFilterData(filter, config, node);
    if (loader) {
      yield coreExtensionData.reactElement(
        ExtensionBoundary.lazy(node, loader)
      );
    }
  }
});

export { EntityHeaderBlueprint };
//# sourceMappingURL=EntityHeaderBlueprint.esm.js.map
