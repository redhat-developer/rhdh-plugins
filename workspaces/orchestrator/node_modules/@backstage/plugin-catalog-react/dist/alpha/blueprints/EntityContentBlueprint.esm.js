import { createExtensionBlueprint, coreExtensionData, ExtensionBoundary } from '@backstage/frontend-plugin-api';
import { entityContentGroupDataRef, entityFilterExpressionDataRef, entityFilterFunctionDataRef, entityContentTitleDataRef } from './extensionData.esm.js';
import { resolveEntityFilterData } from './resolveEntityFilterData.esm.js';
import { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema.esm.js';

const EntityContentBlueprint = createExtensionBlueprint({
  kind: "entity-content",
  attachTo: { id: "page:catalog/entity", input: "contents" },
  output: [
    coreExtensionData.reactElement,
    coreExtensionData.routePath,
    entityContentTitleDataRef,
    coreExtensionData.routeRef.optional(),
    entityFilterFunctionDataRef.optional(),
    entityFilterExpressionDataRef.optional(),
    entityContentGroupDataRef.optional()
  ],
  dataRefs: {
    title: entityContentTitleDataRef,
    filterFunction: entityFilterFunctionDataRef,
    filterExpression: entityFilterExpressionDataRef,
    group: entityContentGroupDataRef
  },
  config: {
    schema: {
      path: (z) => z.string().optional(),
      title: (z) => z.string().optional(),
      filter: (z) => z.union([z.string(), createEntityPredicateSchema(z)]).optional(),
      group: (z) => z.literal(false).or(z.string()).optional()
    }
  },
  *factory(params, { node, config }) {
    const path = config.path ?? params.path ?? params.defaultPath;
    const title = config.title ?? params.title ?? params.defaultTitle;
    const group = config.group ?? params.group ?? params.defaultGroup;
    yield coreExtensionData.reactElement(
      ExtensionBoundary.lazy(node, params.loader)
    );
    yield coreExtensionData.routePath(path);
    yield entityContentTitleDataRef(title);
    if (params.routeRef) {
      yield coreExtensionData.routeRef(params.routeRef);
    }
    yield* resolveEntityFilterData(params.filter, config, node);
    if (group && typeof group === "string") {
      yield entityContentGroupDataRef(group);
    }
  }
});

export { EntityContentBlueprint };
//# sourceMappingURL=EntityContentBlueprint.esm.js.map
