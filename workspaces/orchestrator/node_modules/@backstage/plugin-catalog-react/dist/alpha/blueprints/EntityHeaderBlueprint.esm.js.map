{"version":3,"file":"EntityHeaderBlueprint.esm.js","sources":["../../../src/alpha/blueprints/EntityHeaderBlueprint.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createExtensionBlueprint,\n  coreExtensionData,\n  ExtensionBoundary,\n} from '@backstage/frontend-plugin-api';\nimport { EntityPredicate } from '../predicates/types';\nimport { Entity } from '@backstage/catalog-model';\nimport { resolveEntityFilterData } from './resolveEntityFilterData';\nimport { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema';\nimport {\n  entityFilterExpressionDataRef,\n  entityFilterFunctionDataRef,\n} from './extensionData';\n\n/** @alpha */\nexport const EntityHeaderBlueprint = createExtensionBlueprint({\n  kind: 'entity-header',\n  attachTo: { id: 'page:catalog/entity', input: 'headers' },\n  dataRefs: {\n    filterFunction: entityFilterFunctionDataRef,\n    element: coreExtensionData.reactElement,\n  },\n  config: {\n    schema: {\n      filter: z => createEntityPredicateSchema(z).optional(),\n    },\n  },\n  output: [\n    entityFilterFunctionDataRef.optional(),\n    entityFilterExpressionDataRef.optional(),\n    coreExtensionData.reactElement.optional(),\n  ],\n  *factory(\n    params: {\n      loader: () => Promise<JSX.Element>;\n      filter?: EntityPredicate | ((entity: Entity) => boolean);\n    },\n    { node, config },\n  ) {\n    const { loader, filter } = params;\n\n    yield* resolveEntityFilterData(filter, config, node);\n\n    if (loader) {\n      yield coreExtensionData.reactElement(\n        ExtensionBoundary.lazy(node, loader),\n      );\n    }\n  },\n});\n"],"names":[],"mappings":";;;;;AA+BO,MAAM,wBAAwB,wBAAA,CAAyB;AAAA,EAC5D,IAAA,EAAM,eAAA;AAAA,EACN,QAAA,EAAU,EAAE,EAAA,EAAI,qBAAA,EAAuB,OAAO,SAAA,EAAU;AAAA,EACxD,QAAA,EAAU;AAAA,IACR,cAAA,EAAgB,2BAAA;AAAA,IAChB,SAAS,iBAAA,CAAkB;AAAA,GAC7B;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,MAAA,EAAQ;AAAA,MACN,MAAA,EAAQ,CAAA,CAAA,KAAK,2BAAA,CAA4B,CAAC,EAAE,QAAA;AAAS;AACvD,GACF;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,4BAA4B,QAAA,EAAS;AAAA,IACrC,8BAA8B,QAAA,EAAS;AAAA,IACvC,iBAAA,CAAkB,aAAa,QAAA;AAAS,GAC1C;AAAA,EACA,CAAC,OAAA,CACC,MAAA,EAIA,EAAE,IAAA,EAAM,QAAO,EACf;AACA,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAA,EAAO,GAAI,MAAA;AAE3B,IAAA,OAAO,uBAAA,CAAwB,MAAA,EAAQ,MAAA,EAAQ,IAAI,CAAA;AAEnD,IAAA,IAAI,MAAA,EAAQ;AACV,MAAA,MAAM,iBAAA,CAAkB,YAAA;AAAA,QACtB,iBAAA,CAAkB,IAAA,CAAK,IAAA,EAAM,MAAM;AAAA,OACrC;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;;"}