{"version":3,"file":"EntityIconLinkBlueprint.esm.js","sources":["../../../src/alpha/blueprints/EntityIconLinkBlueprint.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IconLinkVerticalProps } from '@backstage/core-components';\nimport {\n  createExtensionBlueprint,\n  createExtensionDataRef,\n} from '@backstage/frontend-plugin-api';\n\nimport { EntityPredicate } from '../predicates/types';\nimport { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema';\n\nimport {\n  entityFilterExpressionDataRef,\n  entityFilterFunctionDataRef,\n} from './extensionData';\nimport { Entity } from '@backstage/catalog-model';\nimport { resolveEntityFilterData } from './resolveEntityFilterData';\n\nconst entityIconLinkPropsDataRef = createExtensionDataRef<\n  () => IconLinkVerticalProps\n>().with({\n  id: 'entity-icon-link-props',\n});\n\n/** @alpha */\nexport const EntityIconLinkBlueprint = createExtensionBlueprint({\n  kind: 'entity-icon-link',\n  attachTo: { id: 'entity-card:catalog/about', input: 'iconLinks' },\n  output: [\n    entityFilterFunctionDataRef.optional(),\n    entityFilterExpressionDataRef.optional(),\n    entityIconLinkPropsDataRef,\n  ],\n  dataRefs: {\n    useProps: entityIconLinkPropsDataRef,\n    filterFunction: entityFilterFunctionDataRef,\n    filterExpression: entityFilterExpressionDataRef,\n  },\n  config: {\n    schema: {\n      label: z => z.string().optional(),\n      title: z => z.string().optional(),\n      filter: z => createEntityPredicateSchema(z).optional(),\n    },\n  },\n  *factory(\n    params: {\n      useProps: () => Omit<IconLinkVerticalProps, 'color'>;\n      filter?: EntityPredicate | ((entity: Entity) => boolean);\n    },\n    { config, node },\n  ) {\n    const { filter, useProps } = params;\n    yield* resolveEntityFilterData(filter, config, node);\n    // Only include properties that are defined in the config\n    // to avoid overriding defaults with undefined values\n    const configProps = Object.entries(config).reduce(\n      (rest, [key, value]) =>\n        value !== undefined\n          ? {\n              ...rest,\n              [key]: value,\n            }\n          : rest,\n      {},\n    );\n    yield entityIconLinkPropsDataRef(() => ({ ...useProps(), ...configProps }));\n  },\n});\n"],"names":[],"mappings":";;;;;AAgCA,MAAM,0BAAA,GAA6B,sBAAA,EAEjC,CAAE,IAAA,CAAK;AAAA,EACP,EAAA,EAAI;AACN,CAAC,CAAA;AAGM,MAAM,0BAA0B,wBAAA,CAAyB;AAAA,EAC9D,IAAA,EAAM,kBAAA;AAAA,EACN,QAAA,EAAU,EAAE,EAAA,EAAI,2BAAA,EAA6B,OAAO,WAAA,EAAY;AAAA,EAChE,MAAA,EAAQ;AAAA,IACN,4BAA4B,QAAA,EAAS;AAAA,IACrC,8BAA8B,QAAA,EAAS;AAAA,IACvC;AAAA,GACF;AAAA,EACA,QAAA,EAAU;AAAA,IACR,QAAA,EAAU,0BAAA;AAAA,IACV,cAAA,EAAgB,2BAAA;AAAA,IAChB,gBAAA,EAAkB;AAAA,GACpB;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,MAAA,EAAQ;AAAA,MACN,KAAA,EAAO,CAAA,CAAA,KAAK,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS;AAAA,MAChC,KAAA,EAAO,CAAA,CAAA,KAAK,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS;AAAA,MAChC,MAAA,EAAQ,CAAA,CAAA,KAAK,2BAAA,CAA4B,CAAC,EAAE,QAAA;AAAS;AACvD,GACF;AAAA,EACA,CAAC,OAAA,CACC,MAAA,EAIA,EAAE,MAAA,EAAQ,MAAK,EACf;AACA,IAAA,MAAM,EAAE,MAAA,EAAQ,QAAA,EAAS,GAAI,MAAA;AAC7B,IAAA,OAAO,uBAAA,CAAwB,MAAA,EAAQ,MAAA,EAAQ,IAAI,CAAA;AAGnD,IAAA,MAAM,WAAA,GAAc,MAAA,CAAO,OAAA,CAAQ,MAAM,CAAA,CAAE,MAAA;AAAA,MACzC,CAAC,IAAA,EAAM,CAAC,KAAK,KAAK,CAAA,KAChB,UAAU,MAAA,GACN;AAAA,QACE,GAAG,IAAA;AAAA,QACH,CAAC,GAAG,GAAG;AAAA,OACT,GACA,IAAA;AAAA,MACN;AAAC,KACH;AACA,IAAA,MAAM,0BAAA,CAA2B,OAAO,EAAE,GAAG,UAAS,EAAG,GAAG,aAAY,CAAE,CAAA;AAAA,EAC5E;AACF,CAAC;;;;"}