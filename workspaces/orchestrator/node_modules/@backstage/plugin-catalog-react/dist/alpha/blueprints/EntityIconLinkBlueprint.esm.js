import { createExtensionDataRef, createExtensionBlueprint } from '@backstage/frontend-plugin-api';
import { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema.esm.js';
import { entityFilterExpressionDataRef, entityFilterFunctionDataRef } from './extensionData.esm.js';
import { resolveEntityFilterData } from './resolveEntityFilterData.esm.js';

const entityIconLinkPropsDataRef = createExtensionDataRef().with({
  id: "entity-icon-link-props"
});
const EntityIconLinkBlueprint = createExtensionBlueprint({
  kind: "entity-icon-link",
  attachTo: { id: "entity-card:catalog/about", input: "iconLinks" },
  output: [
    entityFilterFunctionDataRef.optional(),
    entityFilterExpressionDataRef.optional(),
    entityIconLinkPropsDataRef
  ],
  dataRefs: {
    useProps: entityIconLinkPropsDataRef,
    filterFunction: entityFilterFunctionDataRef,
    filterExpression: entityFilterExpressionDataRef
  },
  config: {
    schema: {
      label: (z) => z.string().optional(),
      title: (z) => z.string().optional(),
      filter: (z) => createEntityPredicateSchema(z).optional()
    }
  },
  *factory(params, { config, node }) {
    const { filter, useProps } = params;
    yield* resolveEntityFilterData(filter, config, node);
    const configProps = Object.entries(config).reduce(
      (rest, [key, value]) => value !== void 0 ? {
        ...rest,
        [key]: value
      } : rest,
      {}
    );
    yield entityIconLinkPropsDataRef(() => ({ ...useProps(), ...configProps }));
  }
});

export { EntityIconLinkBlueprint };
//# sourceMappingURL=EntityIconLinkBlueprint.esm.js.map
