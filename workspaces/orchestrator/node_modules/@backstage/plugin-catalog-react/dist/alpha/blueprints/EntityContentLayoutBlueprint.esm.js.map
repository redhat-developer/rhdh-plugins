{"version":3,"file":"EntityContentLayoutBlueprint.esm.js","sources":["../../../src/alpha/blueprints/EntityContentLayoutBlueprint.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createExtensionDataRef,\n  createExtensionBlueprint,\n  ExtensionBoundary,\n} from '@backstage/frontend-plugin-api';\nimport {\n  entityFilterExpressionDataRef,\n  entityFilterFunctionDataRef,\n  EntityCardType,\n} from './extensionData';\nimport { JSX } from 'react';\nimport { EntityPredicate } from '../predicates/types';\nimport { resolveEntityFilterData } from './resolveEntityFilterData';\nimport { createEntityPredicateSchema } from '../predicates/createEntityPredicateSchema';\nimport { Entity } from '@backstage/catalog-model';\n\n/** @alpha */\nexport interface EntityContentLayoutProps {\n  cards: Array<{\n    type?: EntityCardType;\n    element: JSX.Element;\n  }>;\n}\n\nconst entityCardLayoutComponentDataRef = createExtensionDataRef<\n  (props: EntityContentLayoutProps) => React.JSX.Element\n>().with({\n  id: 'catalog.entity-content-layout.component',\n});\n\n/** @alpha */\nexport const EntityContentLayoutBlueprint = createExtensionBlueprint({\n  kind: 'entity-content-layout',\n  attachTo: { id: 'entity-content:catalog/overview', input: 'layouts' },\n  output: [\n    entityFilterFunctionDataRef.optional(),\n    entityFilterExpressionDataRef.optional(),\n    entityCardLayoutComponentDataRef,\n  ],\n  dataRefs: {\n    filterFunction: entityFilterFunctionDataRef,\n    filterExpression: entityFilterExpressionDataRef,\n    component: entityCardLayoutComponentDataRef,\n  },\n  config: {\n    schema: {\n      type: z => z.string().optional(),\n      filter: z =>\n        z.union([z.string(), createEntityPredicateSchema(z)]).optional(),\n    },\n  },\n  *factory(\n    {\n      loader,\n      filter,\n    }: {\n      filter?: string | EntityPredicate | ((entity: Entity) => boolean);\n      loader: () => Promise<(props: EntityContentLayoutProps) => JSX.Element>;\n    },\n    { node, config },\n  ) {\n    yield* resolveEntityFilterData(filter, config, node);\n\n    yield entityCardLayoutComponentDataRef(\n      ExtensionBoundary.lazyComponent(node, loader),\n    );\n  },\n});\n"],"names":[],"mappings":";;;;;AAwCA,MAAM,gCAAA,GAAmC,sBAAA,EAEvC,CAAE,IAAA,CAAK;AAAA,EACP,EAAA,EAAI;AACN,CAAC,CAAA;AAGM,MAAM,+BAA+B,wBAAA,CAAyB;AAAA,EACnE,IAAA,EAAM,uBAAA;AAAA,EACN,QAAA,EAAU,EAAE,EAAA,EAAI,iCAAA,EAAmC,OAAO,SAAA,EAAU;AAAA,EACpE,MAAA,EAAQ;AAAA,IACN,4BAA4B,QAAA,EAAS;AAAA,IACrC,8BAA8B,QAAA,EAAS;AAAA,IACvC;AAAA,GACF;AAAA,EACA,QAAA,EAAU;AAAA,IACR,cAAA,EAAgB,2BAAA;AAAA,IAChB,gBAAA,EAAkB,6BAAA;AAAA,IAClB,SAAA,EAAW;AAAA,GACb;AAAA,EACA,MAAA,EAAQ;AAAA,IACN,MAAA,EAAQ;AAAA,MACN,IAAA,EAAM,CAAA,CAAA,KAAK,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS;AAAA,MAC/B,MAAA,EAAQ,CAAA,CAAA,KACN,CAAA,CAAE,KAAA,CAAM,CAAC,CAAA,CAAE,MAAA,EAAO,EAAG,2BAAA,CAA4B,CAAC,CAAC,CAAC,EAAE,QAAA;AAAS;AACnE,GACF;AAAA,EACA,CAAC,OAAA,CACC;AAAA,IACE,MAAA;AAAA,IACA;AAAA,GACF,EAIA,EAAE,IAAA,EAAM,MAAA,EAAO,EACf;AACA,IAAA,OAAO,uBAAA,CAAwB,MAAA,EAAQ,MAAA,EAAQ,IAAI,CAAA;AAEnD,IAAA,MAAM,gCAAA;AAAA,MACJ,iBAAA,CAAkB,aAAA,CAAc,IAAA,EAAM,MAAM;AAAA,KAC9C;AAAA,EACF;AACF,CAAC;;;;"}