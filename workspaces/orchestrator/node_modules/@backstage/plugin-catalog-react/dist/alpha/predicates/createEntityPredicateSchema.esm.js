function createEntityPredicateSchema(z) {
  const primitiveSchema = z.union([z.string(), z.number(), z.boolean()]);
  const comparableValueSchema = z.union([
    primitiveSchema,
    z.array(primitiveSchema)
  ]);
  let valuePredicateSchema;
  const predicateSchema = z.lazy(
    () => z.union([
      comparableValueSchema,
      z.object({ $all: z.array(predicateSchema) }),
      z.object({ $any: z.array(predicateSchema) }),
      z.object({ $not: predicateSchema }),
      z.record(z.string().regex(/^(?!\$).*$/), valuePredicateSchema)
    ])
  );
  valuePredicateSchema = z.union([
    comparableValueSchema,
    z.object({ $exists: z.boolean() }),
    z.object({ $in: z.array(primitiveSchema) }),
    z.object({ $contains: predicateSchema })
  ]);
  return predicateSchema;
}

export { createEntityPredicateSchema };
//# sourceMappingURL=createEntityPredicateSchema.esm.js.map
