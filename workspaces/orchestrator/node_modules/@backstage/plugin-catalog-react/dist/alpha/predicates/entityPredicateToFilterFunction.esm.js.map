{"version":3,"file":"entityPredicateToFilterFunction.esm.js","sources":["../../../src/alpha/predicates/entityPredicateToFilterFunction.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonValue } from '@backstage/types';\nimport { EntityPredicate, EntityPredicateValue } from './types';\nimport { valueAtPath } from './valueAtPath';\n\n/**\n * Convert an entity predicate to a filter function that can be used to filter entities.\n * @alpha\n */\nexport function entityPredicateToFilterFunction<T extends JsonValue>(\n  entityPredicate: EntityPredicate,\n): (value: T) => boolean {\n  return value => evaluateEntityPredicate(entityPredicate, value);\n}\n\n/**\n * Evaluate a entity predicate against a value, typically an entity.\n *\n * @internal\n */\nfunction evaluateEntityPredicate(\n  filter: EntityPredicate,\n  value: JsonValue,\n): boolean {\n  if (typeof filter !== 'object' || filter === null || Array.isArray(filter)) {\n    return valuesAreEqual(value, filter);\n  }\n\n  if ('$all' in filter) {\n    return filter.$all.every(f => evaluateEntityPredicate(f, value));\n  }\n  if ('$any' in filter) {\n    return filter.$any.some(f => evaluateEntityPredicate(f, value));\n  }\n  if ('$not' in filter) {\n    return !evaluateEntityPredicate(filter.$not, value);\n  }\n\n  for (const filterKey in filter) {\n    if (!Object.hasOwn(filter, filterKey)) {\n      continue;\n    }\n    if (filterKey.startsWith('$')) {\n      return false;\n    }\n    if (\n      !evaluatePredicateValue(filter[filterKey], valueAtPath(value, filterKey))\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Evaluate a single value against a predicate value.\n *\n * @internal\n */\nfunction evaluatePredicateValue(\n  filter: EntityPredicateValue,\n  value: JsonValue | undefined,\n): boolean {\n  if (typeof filter !== 'object' || filter === null || Array.isArray(filter)) {\n    return valuesAreEqual(value, filter);\n  }\n\n  if ('$contains' in filter) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n    return value.some(v => evaluateEntityPredicate(filter.$contains, v));\n  }\n  if ('$in' in filter) {\n    return filter.$in.some(search => valuesAreEqual(value, search));\n  }\n  if ('$exists' in filter) {\n    if (filter.$exists === true) {\n      return value !== undefined;\n    }\n    return value === undefined;\n  }\n\n  return false;\n}\n\nfunction valuesAreEqual(\n  a: JsonValue | undefined,\n  b: JsonValue | undefined,\n): boolean {\n  if (a === null || b === null) {\n    return false;\n  }\n  if (a === b) {\n    return true;\n  }\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a.toLocaleUpperCase('en-US') === b.toLocaleUpperCase('en-US');\n  }\n  if (typeof a === 'number' || typeof b === 'number') {\n    return String(a) === String(b);\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every((v, i) => valuesAreEqual(v, b[i]));\n  }\n  return false;\n}\n"],"names":[],"mappings":"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"}