import { valueAtPath } from './valueAtPath.esm.js';

function entityPredicateToFilterFunction(entityPredicate) {
  return (value) => evaluateEntityPredicate(entityPredicate, value);
}
function evaluateEntityPredicate(filter, value) {
  if (typeof filter !== "object" || filter === null || Array.isArray(filter)) {
    return valuesAreEqual(value, filter);
  }
  if ("$all" in filter) {
    return filter.$all.every((f) => evaluateEntityPredicate(f, value));
  }
  if ("$any" in filter) {
    return filter.$any.some((f) => evaluateEntityPredicate(f, value));
  }
  if ("$not" in filter) {
    return !evaluateEntityPredicate(filter.$not, value);
  }
  for (const filterKey in filter) {
    if (!Object.hasOwn(filter, filterKey)) {
      continue;
    }
    if (filterKey.startsWith("$")) {
      return false;
    }
    if (!evaluatePredicateValue(filter[filterKey], valueAtPath(value, filterKey))) {
      return false;
    }
  }
  return true;
}
function evaluatePredicateValue(filter, value) {
  if (typeof filter !== "object" || filter === null || Array.isArray(filter)) {
    return valuesAreEqual(value, filter);
  }
  if ("$contains" in filter) {
    if (!Array.isArray(value)) {
      return false;
    }
    return value.some((v) => evaluateEntityPredicate(filter.$contains, v));
  }
  if ("$in" in filter) {
    return filter.$in.some((search) => valuesAreEqual(value, search));
  }
  if ("$exists" in filter) {
    if (filter.$exists === true) {
      return value !== void 0;
    }
    return value === void 0;
  }
  return false;
}
function valuesAreEqual(a, b) {
  if (a === null || b === null) {
    return false;
  }
  if (a === b) {
    return true;
  }
  if (typeof a === "string" && typeof b === "string") {
    return a.toLocaleUpperCase("en-US") === b.toLocaleUpperCase("en-US");
  }
  if (typeof a === "number" || typeof b === "number") {
    return String(a) === String(b);
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    return a.length === b.length && a.every((v, i) => valuesAreEqual(v, b[i]));
  }
  return false;
}

export { entityPredicateToFilterFunction };
//# sourceMappingURL=entityPredicateToFilterFunction.esm.js.map
