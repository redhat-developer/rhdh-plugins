{"version":3,"file":"filters.esm.js","sources":["../src/filters.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  parseEntityRef,\n  RELATION_OWNED_BY,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { AlphaEntity } from '@backstage/catalog-model/alpha';\nimport { EntityFilter, UserListFilterKind } from './types';\nimport { getEntityRelations } from './utils/getEntityRelations';\nimport { EntityOrderQuery } from '@backstage/catalog-client';\n\n/**\n * Filter entities based on Kind.\n * @public\n */\nexport class EntityKindFilter implements EntityFilter {\n  constructor(readonly value: string, readonly label: string) {}\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { kind: this.value };\n  }\n\n  toQueryValue(): string {\n    return this.value;\n  }\n}\n\n/**\n * Filters entities based on type\n * @public\n */\nexport class EntityTypeFilter implements EntityFilter {\n  constructor(readonly value: string | string[]) {}\n\n  // Simplify `string | string[]` for consumers, always returns an array\n  getTypes(): string[] {\n    return Array.isArray(this.value) ? this.value : [this.value];\n  }\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'spec.type': this.getTypes() };\n  }\n\n  toQueryValue(): string[] {\n    return this.getTypes();\n  }\n}\n\n/**\n * Filters entities based on tag.\n * @public\n */\nexport class EntityTagFilter implements EntityFilter {\n  constructor(readonly values: string[]) {}\n\n  filterEntity(entity: Entity): boolean {\n    return this.values.every(v => (entity.metadata.tags ?? []).includes(v));\n  }\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'metadata.tags': this.values };\n  }\n\n  toQueryValue(): string[] {\n    return this.values;\n  }\n}\n\n/**\n * Filters entities where the text matches spec, title or tags.\n * @public\n */\nexport class EntityTextFilter implements EntityFilter {\n  constructor(readonly value: string) {}\n\n  filterEntity(entity: Entity): boolean {\n    const words = this.toUpperArray(this.value.split(/\\s/));\n    const exactMatch = this.toUpperArray([entity.metadata.tags]);\n    const partialMatch = this.toUpperArray([\n      entity.metadata.name,\n      entity.metadata.title,\n      (entity.spec?.profile as { displayName?: string })?.displayName,\n    ]);\n\n    for (const word of words) {\n      if (\n        exactMatch.every(m => m !== word) &&\n        partialMatch.every(m => !m.includes(word))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getFullTextFilters() {\n    return {\n      term: this.value,\n      // Update this to be more dynamic based on table columns.\n      fields: ['metadata.name', 'metadata.title', 'spec.profile.displayName'],\n    };\n  }\n\n  toQueryValue() {\n    return this.value;\n  }\n\n  private toUpperArray(\n    value: Array<string | string[] | undefined>,\n  ): Array<string> {\n    return value\n      .flat()\n      .filter((m): m is string => Boolean(m))\n      .map(m => m.toLocaleUpperCase('en-US'));\n  }\n}\n\n/**\n * Filter matching entities that are owned by group.\n * @public\n *\n * CAUTION: This class may contain both full and partial entity refs.\n */\nexport class EntityOwnerFilter implements EntityFilter {\n  readonly values: string[];\n  constructor(values: string[]) {\n    this.values = values.reduce((fullRefs, ref) => {\n      // Attempt to remove bad entity references here.\n      try {\n        fullRefs.push(\n          stringifyEntityRef(parseEntityRef(ref, { defaultKind: 'Group' })),\n        );\n        return fullRefs;\n      } catch (err) {\n        return fullRefs;\n      }\n    }, [] as string[]);\n  }\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'relations.ownedBy': this.values };\n  }\n\n  filterEntity(entity: Entity): boolean {\n    return this.values.some(v =>\n      getEntityRelations(entity, RELATION_OWNED_BY).some(\n        o => stringifyEntityRef(o) === v,\n      ),\n    );\n  }\n\n  /**\n   * Get the URL query parameter value. May be a mix of full and humanized entity refs.\n   * @returns list of entity refs.\n   */\n  toQueryValue(): string[] {\n    return this.values;\n  }\n}\n\n/**\n * Filters entities on lifecycle.\n * @public\n */\nexport class EntityLifecycleFilter implements EntityFilter {\n  constructor(readonly values: string[]) {}\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'spec.lifecycle': this.values };\n  }\n\n  filterEntity(entity: Entity): boolean {\n    return this.values.some(v => entity.spec?.lifecycle === v);\n  }\n\n  toQueryValue(): string[] {\n    return this.values;\n  }\n}\n\n/**\n * Filters entities to those within the given namespace(s).\n * @public\n */\nexport class EntityNamespaceFilter implements EntityFilter {\n  constructor(readonly values: string[]) {}\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'metadata.namespace': this.values };\n  }\n  filterEntity(entity: Entity): boolean {\n    return this.values.some(v => entity.metadata.namespace === v);\n  }\n\n  toQueryValue(): string[] {\n    return this.values;\n  }\n}\n\n/**\n * @public\n */\nexport class EntityUserFilter implements EntityFilter {\n  private constructor(\n    readonly value: UserListFilterKind,\n    readonly refs?: string[],\n  ) {}\n\n  static owned(ownershipEntityRefs: string[]) {\n    return new EntityUserFilter('owned', ownershipEntityRefs);\n  }\n\n  static all() {\n    return new EntityUserFilter('all');\n  }\n\n  static starred(starredEntityRefs: string[]) {\n    return new EntityUserFilter('starred', starredEntityRefs);\n  }\n\n  getCatalogFilters(): Record<string, string[]> {\n    if (this.value === 'owned') {\n      return { 'relations.ownedBy': this.refs ?? [] };\n    }\n    if (this.value === 'starred') {\n      return {\n        'metadata.name': this.refs?.map(e => parseEntityRef(e).name) ?? [],\n      };\n    }\n    return {};\n  }\n\n  filterEntity(entity: Entity) {\n    if (this.value === 'starred') {\n      return this.refs?.includes(stringifyEntityRef(entity)) ?? true;\n    }\n    // used only for retro-compatibility with non paginated data.\n    // This is supposed to return always true for paginated\n    // owned entities, since the filters are applied server side.\n    if (this.value === 'owned') {\n      const relations = getEntityRelations(entity, RELATION_OWNED_BY);\n\n      return (\n        this.refs?.some(v =>\n          relations.some(o => stringifyEntityRef(o) === v),\n        ) ?? false\n      );\n    }\n    return true;\n  }\n\n  toQueryValue(): string {\n    return this.value;\n  }\n}\n\n/**\n * Filters entities based on whatever the user has starred or owns them.\n * @deprecated use EntityUserFilter\n * @public\n */\nexport class UserListFilter implements EntityFilter {\n  constructor(\n    readonly value: UserListFilterKind,\n    readonly isOwnedEntity: (entity: Entity) => boolean,\n    readonly isStarredEntity: (entity: Entity) => boolean,\n  ) {}\n\n  filterEntity(entity: Entity): boolean {\n    switch (this.value) {\n      case 'owned':\n        return this.isOwnedEntity(entity);\n      case 'starred':\n        return this.isStarredEntity(entity);\n      default:\n        return true;\n    }\n  }\n\n  toQueryValue(): string {\n    return this.value;\n  }\n}\n\n/**\n * Filters entities based if it is an orphan or not.\n * @public\n */\nexport class EntityOrphanFilter implements EntityFilter {\n  constructor(readonly value: boolean) {}\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    if (this.value) {\n      return { 'metadata.annotations.backstage.io/orphan': String(this.value) };\n    }\n    return {};\n  }\n\n  filterEntity(entity: Entity): boolean {\n    const orphan = entity.metadata.annotations?.['backstage.io/orphan'];\n    return orphan !== undefined && this.value.toString() === orphan;\n  }\n}\n\n/**\n * Filters entities based on if it has errors or not.\n * @public\n */\nexport class EntityErrorFilter implements EntityFilter {\n  constructor(readonly value: boolean) {}\n\n  filterEntity(entity: Entity): boolean {\n    const error =\n      ((entity as AlphaEntity)?.status?.items?.length as number) > 0;\n    return error !== undefined && this.value === error;\n  }\n}\n\n/**\n * Sort entities by a given field/column.\n * @public\n */\nexport class EntityOrderFilter implements EntityFilter {\n  constructor(readonly values: [string, 'asc' | 'desc'][]) {}\n\n  getOrderFilters(): EntityOrderQuery {\n    return this.values.map(([field, order]) => ({ field, order }));\n  }\n\n  toQueryValue(): string[] {\n    return this.values.flat();\n  }\n}\n"],"names":[],"mappings":"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"}