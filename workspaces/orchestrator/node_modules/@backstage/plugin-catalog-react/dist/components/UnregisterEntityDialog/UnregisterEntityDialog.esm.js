import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { EntityRefLink } from '../EntityRefLink/EntityRefLink.esm.js';
import '@backstage/catalog-model';
import { useState, useCallback } from 'react';
import 'lodash/get';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogContentText from '@material-ui/core/DialogContentText';
import DialogTitle from '@material-ui/core/DialogTitle';
import Divider from '@material-ui/core/Divider';
import { makeStyles } from '@material-ui/core/styles';
import Alert from '@material-ui/lab/Alert';
import { useUnregisterEntityDialogState } from './useUnregisterEntityDialogState.esm.js';
import { useApi, alertApiRef, configApiRef } from '@backstage/core-plugin-api';
import { Progress, ResponseErrorPanel } from '@backstage/core-components';
import { assertError } from '@backstage/errors';
import { catalogReactTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles({
  advancedButton: {
    fontSize: "0.7em"
  },
  dialogActions: {
    display: "inline-block"
  }
});
const Contents = ({
  entity,
  onConfirm,
  onClose
}) => {
  const alertApi = useApi(alertApiRef);
  const configApi = useApi(configApiRef);
  const classes = useStyles();
  const state = useUnregisterEntityDialogState(entity);
  const [showDelete, setShowDelete] = useState(false);
  const [busy, setBusy] = useState(false);
  const appTitle = configApi.getOptionalString("app.title") ?? "Backstage";
  const { t } = useTranslationRef(catalogReactTranslationRef);
  const onUnregister = useCallback(
    async function onUnregisterFn() {
      if ("unregisterLocation" in state) {
        setBusy(true);
        try {
          await state.unregisterLocation();
          onConfirm();
        } catch (err) {
          assertError(err);
          alertApi.post({ message: err.message });
        } finally {
          setBusy(false);
        }
      }
    },
    [alertApi, onConfirm, state]
  );
  const onDelete = useCallback(
    async function onDeleteFn() {
      if ("deleteEntity" in state) {
        setBusy(true);
        try {
          await state.deleteEntity();
          const entityName = entity.metadata.title ?? entity.metadata.name;
          onConfirm();
          alertApi.post({
            message: t("unregisterEntityDialog.deleteEntitySuccessMessage", {
              entityName
            }),
            severity: "success",
            display: "transient"
          });
        } catch (err) {
          assertError(err);
          alertApi.post({ message: err.message });
        } finally {
          setBusy(false);
        }
      }
    },
    [alertApi, onConfirm, state, entity, t]
  );
  const DialogActionsPanel = () => /* @__PURE__ */ jsx(DialogActions, { className: classes.dialogActions, children: /* @__PURE__ */ jsx(Button, { onClick: onClose, color: "primary", children: t("unregisterEntityDialog.cancelButtonTitle") }) });
  if (state.type === "loading") {
    return /* @__PURE__ */ jsx(Progress, {});
  }
  if (state.type === "error") {
    return /* @__PURE__ */ jsx(ResponseErrorPanel, { error: state.error });
  }
  if (state.type === "bootstrap") {
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(Alert, { severity: "info", children: t("unregisterEntityDialog.bootstrapState.title", {
        appTitle,
        location: state.location
      }) }),
      /* @__PURE__ */ jsxs(Box, { marginTop: 2, children: [
        !showDelete && /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(
            Button,
            {
              variant: "text",
              size: "small",
              color: "primary",
              className: classes.advancedButton,
              onClick: () => setShowDelete(true),
              children: t("unregisterEntityDialog.bootstrapState.advancedOptions")
            }
          ),
          /* @__PURE__ */ jsx(DialogActionsPanel, {})
        ] }),
        showDelete && /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(DialogContentText, { children: t("unregisterEntityDialog.bootstrapState.advancedDescription") }),
          /* @__PURE__ */ jsx(
            Button,
            {
              variant: "contained",
              color: "secondary",
              disabled: busy,
              onClick: onDelete,
              children: t("unregisterEntityDialog.deleteButtonTitle")
            }
          ),
          /* @__PURE__ */ jsx(DialogActionsPanel, {})
        ] })
      ] })
    ] });
  }
  if (state.type === "only-delete") {
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(DialogContentText, { children: t("unregisterEntityDialog.onlyDeleteStateTitle") }),
      /* @__PURE__ */ jsx(
        Button,
        {
          variant: "contained",
          color: "secondary",
          disabled: busy,
          onClick: onDelete,
          children: t("unregisterEntityDialog.deleteButtonTitle")
        }
      ),
      /* @__PURE__ */ jsx(DialogActionsPanel, {})
    ] });
  }
  if (state.type === "unregister") {
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(DialogContentText, { children: t("unregisterEntityDialog.unregisterState.title") }),
      /* @__PURE__ */ jsx(DialogContentText, { component: "ul", children: state.colocatedEntities.map((e) => /* @__PURE__ */ jsx("li", { children: /* @__PURE__ */ jsx(EntityRefLink, { entityRef: e }) }, `${e.kind}:${e.namespace}/${e.name}`)) }),
      /* @__PURE__ */ jsx(DialogContentText, { children: t("unregisterEntityDialog.unregisterState.subTitle") }),
      /* @__PURE__ */ jsx(DialogContentText, { component: "ul", children: /* @__PURE__ */ jsx("li", { children: state.location }) }),
      /* @__PURE__ */ jsx(DialogContentText, { children: t("unregisterEntityDialog.unregisterState.description", {
        appTitle
      }) }),
      /* @__PURE__ */ jsxs(Box, { marginTop: 2, children: [
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "contained",
            color: "secondary",
            disabled: busy,
            onClick: onUnregister,
            children: t("unregisterEntityDialog.unregisterState.unregisterButtonTitle")
          }
        ),
        !showDelete && /* @__PURE__ */ jsx(Box, { component: "span", marginLeft: 2, children: /* @__PURE__ */ jsx(
          Button,
          {
            variant: "text",
            size: "small",
            color: "primary",
            className: classes.advancedButton,
            onClick: () => setShowDelete(true),
            children: t("unregisterEntityDialog.unregisterState.advancedOptions")
          }
        ) })
      ] }),
      showDelete && /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(Box, { paddingTop: 4, paddingBottom: 4, children: /* @__PURE__ */ jsx(Divider, {}) }),
        /* @__PURE__ */ jsx(DialogContentText, { children: t("unregisterEntityDialog.unregisterState.advancedDescription") }),
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "contained",
            color: "secondary",
            disabled: busy,
            onClick: onDelete,
            children: t("unregisterEntityDialog.deleteButtonTitle")
          }
        )
      ] })
    ] });
  }
  return /* @__PURE__ */ jsx(Alert, { severity: "error", children: t("unregisterEntityDialog.errorStateTitle") });
};
const UnregisterEntityDialog = (props) => {
  const { open, onConfirm, onClose, entity } = props;
  const { t } = useTranslationRef(catalogReactTranslationRef);
  return /* @__PURE__ */ jsxs(Dialog, { open, onClose, children: [
    /* @__PURE__ */ jsx(DialogTitle, { id: "responsive-dialog-title", children: t("unregisterEntityDialog.title") }),
    /* @__PURE__ */ jsx(DialogContent, { children: /* @__PURE__ */ jsx(Contents, { entity, onConfirm, onClose }) })
  ] });
};

export { UnregisterEntityDialog };
//# sourceMappingURL=UnregisterEntityDialog.esm.js.map
