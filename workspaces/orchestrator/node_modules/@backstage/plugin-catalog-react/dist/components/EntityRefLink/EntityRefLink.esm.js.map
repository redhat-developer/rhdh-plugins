{"version":3,"file":"EntityRefLink.esm.js","sources":["../../../src/components/EntityRefLink/EntityRefLink.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CompoundEntityRef, Entity } from '@backstage/catalog-model';\nimport { Link, LinkProps } from '@backstage/core-components';\nimport { useRouteRef } from '@backstage/core-plugin-api';\nimport { ReactNode, forwardRef } from 'react';\nimport { entityRouteParams, entityRouteRef } from '../../routes';\nimport { EntityDisplayName } from '../EntityDisplayName';\n\n/**\n * Props for {@link EntityRefLink}.\n *\n * @public\n */\nexport type EntityRefLinkProps = {\n  entityRef: Entity | CompoundEntityRef | string;\n  defaultKind?: string;\n  defaultNamespace?: string;\n  /** @deprecated This option should no longer be used; presentation is requested through the {@link entityPresentationApiRef} instead */\n  title?: string;\n  children?: ReactNode;\n  hideIcon?: boolean;\n  disableTooltip?: boolean;\n} & Omit<LinkProps, 'to'>;\n\n/**\n * Shows a clickable link to an entity.\n *\n * @public\n */\nexport const EntityRefLink = forwardRef<any, EntityRefLinkProps>(\n  (props, ref) => {\n    const {\n      entityRef,\n      defaultKind,\n      defaultNamespace,\n      title,\n      children,\n      hideIcon,\n      disableTooltip,\n      ...linkProps\n    } = props;\n    const entityRoute = useEntityRoute(props.entityRef);\n\n    const content = children ?? title ?? (\n      <EntityDisplayName\n        entityRef={entityRef}\n        defaultKind={defaultKind}\n        defaultNamespace={defaultNamespace}\n        hideIcon={hideIcon}\n        disableTooltip={disableTooltip}\n      />\n    );\n\n    return (\n      <Link {...linkProps} ref={ref} to={entityRoute}>\n        {content}\n      </Link>\n    );\n  },\n) as (props: EntityRefLinkProps) => JSX.Element;\n\n// Hook that computes the route to a given entity / ref. This is a bit\n// contrived, because it tries to retain the casing of the entity name if\n// present, but not of other parts. This is in an attempt to make slightly more\n// nice-looking URLs.\nfunction useEntityRoute(\n  entityRef: Entity | CompoundEntityRef | string,\n): string {\n  const entityRoute = useRouteRef(entityRouteRef);\n\n  const routeParams = entityRouteParams(entityRef, { encodeParams: true });\n\n  return entityRoute(routeParams);\n}\n"],"names":[],"mappings":";;;;;;;AA4CO,MAAM,aAAA,GAAgB,UAAA;AAAA,EAC3B,CAAC,OAAO,GAAA,KAAQ;AACd,IAAA,MAAM;AAAA,MACJ,SAAA;AAAA,MACA,WAAA;AAAA,MACA,gBAAA;AAAA,MACA,KAAA;AAAA,MACA,QAAA;AAAA,MACA,QAAA;AAAA,MACA,cAAA;AAAA,MACA,GAAG;AAAA,KACL,GAAI,KAAA;AACJ,IAAA,MAAM,WAAA,GAAc,cAAA,CAAe,KAAA,CAAM,SAAS,CAAA;AAElD,IAAA,MAAM,OAAA,GAAU,YAAY,KAAA,oBAC1B,GAAA;AAAA,MAAC,iBAAA;AAAA,MAAA;AAAA,QACC,SAAA;AAAA,QACA,WAAA;AAAA,QACA,gBAAA;AAAA,QACA,QAAA;AAAA,QACA;AAAA;AAAA,KACF;AAGF,IAAA,2BACG,IAAA,EAAA,EAAM,GAAG,WAAW,GAAA,EAAU,EAAA,EAAI,aAChC,QAAA,EAAA,OAAA,EACH,CAAA;AAAA,EAEJ;AACF;AAMA,SAAS,eACP,SAAA,EACQ;AACR,EAAA,MAAM,WAAA,GAAc,YAAY,cAAc,CAAA;AAE9C,EAAA,MAAM,cAAc,iBAAA,CAAkB,SAAA,EAAW,EAAE,YAAA,EAAc,MAAM,CAAA;AAEvE,EAAA,OAAO,YAAY,WAAW,CAAA;AAChC;;;;"}