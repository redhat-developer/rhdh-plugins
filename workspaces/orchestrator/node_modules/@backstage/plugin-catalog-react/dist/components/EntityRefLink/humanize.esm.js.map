{"version":3,"file":"humanize.esm.js","sources":["../../../src/components/EntityRefLink/humanize.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  CompoundEntityRef,\n  DEFAULT_NAMESPACE,\n} from '@backstage/catalog-model';\nimport get from 'lodash/get';\n\n/**\n * @param defaultNamespace - if set to false then namespace is never omitted,\n * if set to string which matches namespace of entity then omitted\n *\n * @public\n **/\nexport function humanizeEntityRef(\n  entityRef: Entity | CompoundEntityRef,\n  opts?: {\n    defaultKind?: string;\n    defaultNamespace?: string | false;\n  },\n) {\n  const defaultKind = opts?.defaultKind;\n  let kind;\n  let namespace;\n  let name;\n\n  if ('metadata' in entityRef) {\n    kind = entityRef.kind;\n    namespace = entityRef.metadata.namespace;\n    name = entityRef.metadata.name;\n  } else {\n    kind = entityRef.kind;\n    namespace = entityRef.namespace;\n    name = entityRef.name;\n  }\n\n  if (namespace === undefined || namespace === '') {\n    namespace = DEFAULT_NAMESPACE;\n  }\n  if (opts?.defaultNamespace !== undefined) {\n    if (opts?.defaultNamespace === namespace) {\n      namespace = undefined;\n    }\n  } else if (namespace === DEFAULT_NAMESPACE) {\n    namespace = undefined;\n  }\n\n  kind = kind.toLocaleLowerCase('en-US');\n  kind =\n    defaultKind && defaultKind.toLocaleLowerCase('en-US') === kind\n      ? undefined\n      : kind;\n  return `${kind ? `${kind}:` : ''}${namespace ? `${namespace}/` : ''}${name}`;\n}\n\n/**\n * Convert an entity to its more readable name if available.\n *\n * If an entity is either User or Group, this will be its `spec.profile.displayName`.\n * Otherwise, this is `metadata.title`.\n *\n * If neither of those are found or populated, fallback to `defaultName`.\n *\n * @param entity - Entity to convert.\n * @param defaultName - If entity readable name is not available, `defaultName` will be returned.\n * @returns Readable name, defaults to `defaultName`.\n *\n */\nexport function humanizeEntity(entity: Entity, defaultName: string) {\n  for (const path of ['spec.profile.displayName', 'metadata.title']) {\n    const value = get(entity, path);\n    if (value && typeof value === 'string') {\n      return value;\n    }\n  }\n  return defaultName;\n}\n"],"names":[],"mappings":";;;AA6BO,SAAS,iBAAA,CACd,WACA,IAAA,EAIA;AACA,EAAA,MAAM,cAAc,IAAA,EAAM,WAAA;AAC1B,EAAA,IAAI,IAAA;AACJ,EAAA,IAAI,SAAA;AACJ,EAAA,IAAI,IAAA;AAEJ,EAAA,IAAI,cAAc,SAAA,EAAW;AAC3B,IAAA,IAAA,GAAO,SAAA,CAAU,IAAA;AACjB,IAAA,SAAA,GAAY,UAAU,QAAA,CAAS,SAAA;AAC/B,IAAA,IAAA,GAAO,UAAU,QAAA,CAAS,IAAA;AAAA,EAC5B,CAAA,MAAO;AACL,IAAA,IAAA,GAAO,SAAA,CAAU,IAAA;AACjB,IAAA,SAAA,GAAY,SAAA,CAAU,SAAA;AACtB,IAAA,IAAA,GAAO,SAAA,CAAU,IAAA;AAAA,EACnB;AAEA,EAAA,IAAI,SAAA,KAAc,MAAA,IAAa,SAAA,KAAc,EAAA,EAAI;AAC/C,IAAA,SAAA,GAAY,iBAAA;AAAA,EACd;AACA,EAAA,IAAI,IAAA,EAAM,qBAAqB,MAAA,EAAW;AACxC,IAAA,IAAI,IAAA,EAAM,qBAAqB,SAAA,EAAW;AACxC,MAAA,SAAA,GAAY,MAAA;AAAA,IACd;AAAA,EACF,CAAA,MAAA,IAAW,cAAc,iBAAA,EAAmB;AAC1C,IAAA,SAAA,GAAY,MAAA;AAAA,EACd;AAEA,EAAA,IAAA,GAAO,IAAA,CAAK,kBAAkB,OAAO,CAAA;AACrC,EAAA,IAAA,GACE,eAAe,WAAA,CAAY,iBAAA,CAAkB,OAAO,CAAA,KAAM,OACtD,MAAA,GACA,IAAA;AACN,EAAA,OAAO,CAAA,EAAG,IAAA,GAAO,CAAA,EAAG,IAAI,CAAA,CAAA,CAAA,GAAM,EAAE,CAAA,EAAG,SAAA,GAAY,CAAA,EAAG,SAAS,CAAA,CAAA,CAAA,GAAM,EAAE,GAAG,IAAI,CAAA,CAAA;AAC5E;AAeO,SAAS,cAAA,CAAe,QAAgB,WAAA,EAAqB;AAClE,EAAA,KAAA,MAAW,IAAA,IAAQ,CAAC,0BAAA,EAA4B,gBAAgB,CAAA,EAAG;AACjE,IAAA,MAAM,KAAA,GAAQ,GAAA,CAAI,MAAA,EAAQ,IAAI,CAAA;AAC9B,IAAA,IAAI,KAAA,IAAS,OAAO,KAAA,KAAU,QAAA,EAAU;AACtC,MAAA,OAAO,KAAA;AAAA,IACT;AAAA,EACF;AACA,EAAA,OAAO,WAAA;AACT;;;;"}