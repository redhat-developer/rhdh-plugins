import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import useAsyncFn from 'react-use/esm/useAsyncFn';
import { catalogApiRef } from '../../api.esm.js';
import { useState, useMemo, useEffect } from 'react';
import HoverPopover from 'material-ui-popup-state/HoverPopover';
import { usePopupState, bindHover, bindPopover } from 'material-ui-popup-state/hooks';
import Box from '@material-ui/core/Box';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import Chip from '@material-ui/core/Chip';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import { useApiHolder } from '@backstage/core-plugin-api';
import { isUserEntity, isGroupEntity } from '@backstage/catalog-model';
import { ResponseErrorPanel, Progress } from '@backstage/core-components';
import { EntityCardActions } from './CardActionComponents/EntityCardActions.esm.js';
import { GroupCardActions } from './CardActionComponents/GroupCardActions.esm.js';
import { UserCardActions } from './CardActionComponents/UserCardActions.esm.js';
import { debounce } from 'lodash';
import { catalogReactTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles(() => {
  return {
    popoverPaper: {
      width: "30em"
    },
    descriptionTypography: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitLineClamp: 2,
      WebkitBoxOrient: "vertical"
    }
  };
});
const maxTagChips = 4;
const EntityPeekAheadPopover = (props) => {
  const { entityRef, children, delayTime = 500 } = props;
  const { t } = useTranslationRef(catalogReactTranslationRef);
  const classes = useStyles();
  const apiHolder = useApiHolder();
  const popupState = usePopupState({
    variant: "popover",
    popupId: "entity-peek-ahead"
  });
  const [isHovered, setIsHovered] = useState(false);
  const debouncedHandleMouseEnter = useMemo(
    () => debounce(() => setIsHovered(true), delayTime),
    [delayTime]
  );
  const [{ loading, error, value: entity }, load] = useAsyncFn(async () => {
    const catalogApi = apiHolder.get(catalogApiRef);
    if (catalogApi) {
      const retrievedEntity = await catalogApi.getEntityByRef(entityRef);
      if (!retrievedEntity) {
        throw new Error(`${entityRef} not found`);
      }
      return retrievedEntity;
    }
    return void 0;
  }, [apiHolder, entityRef]);
  const handleOnMouseLeave = () => {
    setIsHovered(false);
    debouncedHandleMouseEnter.cancel();
  };
  useEffect(() => {
    if (popupState.isOpen && !entity && !error && !loading) {
      load();
    }
  }, [popupState.isOpen, load, entity, error, loading]);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Typography, { component: "span", onMouseEnter: debouncedHandleMouseEnter, children: /* @__PURE__ */ jsx(
      Typography,
      {
        component: "span",
        "data-testid": "trigger",
        ...bindHover(popupState),
        children
      }
    ) }),
    isHovered && /* @__PURE__ */ jsx(
      HoverPopover,
      {
        PaperProps: {
          className: classes.popoverPaper
        },
        ...bindPopover(popupState),
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        },
        onMouseLeave: handleOnMouseLeave,
        children: /* @__PURE__ */ jsxs(Card, { children: [
          /* @__PURE__ */ jsxs(CardContent, { children: [
            error && /* @__PURE__ */ jsx(ResponseErrorPanel, { error }),
            loading && /* @__PURE__ */ jsx(Progress, {}),
            entity && /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsx(Typography, { color: "textSecondary", children: entity.metadata.namespace }),
              /* @__PURE__ */ jsx(Typography, { variant: "h5", component: "div", children: entity.metadata.name }),
              /* @__PURE__ */ jsx(Typography, { color: "textSecondary", gutterBottom: true, children: entity.kind }),
              entity.metadata.description && /* @__PURE__ */ jsx(
                Typography,
                {
                  className: classes.descriptionTypography,
                  paragraph: true,
                  children: entity.metadata.description
                }
              ),
              /* @__PURE__ */ jsx(Typography, { children: entity.spec?.type?.toString() }),
              /* @__PURE__ */ jsxs(Box, { marginTop: "0.5em", children: [
                (entity.metadata.tags || []).slice(0, maxTagChips).map((tag) => {
                  return /* @__PURE__ */ jsx(Chip, { size: "small", label: tag }, tag);
                }),
                entity.metadata.tags?.length && entity.metadata.tags?.length > maxTagChips && /* @__PURE__ */ jsx(Tooltip, { title: t("entityPeekAheadPopover.title"), children: /* @__PURE__ */ jsx(Chip, { size: "small", label: "..." }, "other-tags") })
              ] })
            ] })
          ] }),
          !error && entity && /* @__PURE__ */ jsx(CardActions, { children: /* @__PURE__ */ jsxs(Fragment, { children: [
            isUserEntity(entity) && /* @__PURE__ */ jsx(UserCardActions, { entity }),
            isGroupEntity(entity) && /* @__PURE__ */ jsx(GroupCardActions, { entity }),
            /* @__PURE__ */ jsx(EntityCardActions, { entity })
          ] }) })
        ] })
      }
    )
  ] });
};

export { EntityPeekAheadPopover };
//# sourceMappingURL=EntityPeekAheadPopover.esm.js.map
