import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import Box from '@material-ui/core/Box';
import Tooltip from '@material-ui/core/Tooltip';
import { makeStyles } from '@material-ui/core/styles';
import '../../apis/EntityPresentationApi/EntityPresentationApi.esm.js';
import '@backstage/catalog-model';
import 'lodash/get';
import { useEntityPresentation } from '../../apis/EntityPresentationApi/useEntityPresentation.esm.js';
import '../../apis/StarredEntitiesApi/StarredEntitiesApi.esm.js';
import 'zen-observable';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      display: "inline-flex",
      alignItems: "center",
      textDecoration: "inherit"
    },
    icon: {
      marginRight: theme.spacing(0.5),
      color: theme.palette.text.secondary,
      "& svg": {
        verticalAlign: "middle"
      }
    }
  }),
  { name: "CatalogReactEntityDisplayName" }
);
const EntityDisplayName = (props) => {
  const { entityRef, hideIcon, disableTooltip, defaultKind, defaultNamespace } = props;
  const classes = useStyles();
  const { primaryTitle, secondaryTitle, Icon } = useEntityPresentation(
    entityRef,
    { defaultKind, defaultNamespace }
  );
  let content = /* @__PURE__ */ jsx(Fragment, { children: primaryTitle });
  content = /* @__PURE__ */ jsxs(Box, { component: "span", className: classes.root, children: [
    Icon && !hideIcon ? /* @__PURE__ */ jsx(Box, { component: "span", className: classes.icon, children: /* @__PURE__ */ jsx(Icon, { fontSize: "inherit" }) }) : null,
    content
  ] });
  if (secondaryTitle && !disableTooltip) {
    content = /* @__PURE__ */ jsx(Tooltip, { enterDelay: 1500, title: secondaryTitle, children: content });
  }
  return content;
};

export { EntityDisplayName };
//# sourceMappingURL=EntityDisplayName.esm.js.map
