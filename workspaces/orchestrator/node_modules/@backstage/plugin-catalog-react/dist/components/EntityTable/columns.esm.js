import { jsx } from 'react/jsx-runtime';
import { RELATION_PART_OF, RELATION_OWNED_BY } from '@backstage/catalog-model';
import { OverflowTooltip } from '@backstage/core-components';
import { getEntityRelations } from '../../utils/getEntityRelations.esm.js';
import { EntityRefLink } from '../EntityRefLink/EntityRefLink.esm.js';
import { EntityRefLinks } from '../EntityRefLink/EntityRefLinks.esm.js';
import { humanizeEntityRef } from '../EntityRefLink/humanize.esm.js';
import { EntityTableColumnTitle } from './TitleColumn.esm.js';

const columnFactories = Object.freeze({
  createEntityRefColumn(options) {
    const { defaultKind } = options;
    function formatContent(entity) {
      return entity.metadata?.title || humanizeEntityRef(entity, {
        defaultKind
      });
    }
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "name" }),
      highlight: true,
      customFilterAndSearch(filter, entity) {
        return formatContent(entity).includes(filter);
      },
      customSort(entity1, entity2) {
        return formatContent(entity1).localeCompare(formatContent(entity2));
      },
      render: (entity) => /* @__PURE__ */ jsx(
        EntityRefLink,
        {
          entityRef: entity,
          defaultKind,
          title: entity.metadata?.title
        }
      )
    };
  },
  createEntityRelationColumn(options) {
    const { title, relation, defaultKind, filter: entityFilter } = options;
    function getRelations(entity) {
      return getEntityRelations(entity, relation, entityFilter);
    }
    function formatContent(entity) {
      return getRelations(entity).map((r) => humanizeEntityRef(r, { defaultKind })).join(", ");
    }
    return {
      title,
      customFilterAndSearch(filter, entity) {
        return formatContent(entity).includes(filter);
      },
      customSort(entity1, entity2) {
        return formatContent(entity1).localeCompare(formatContent(entity2));
      },
      render: (entity) => {
        return /* @__PURE__ */ jsx(
          EntityRefLinks,
          {
            entityRefs: getRelations(entity),
            defaultKind
          }
        );
      }
    };
  },
  createOwnerColumn() {
    return this.createEntityRelationColumn({
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "owner" }),
      relation: RELATION_OWNED_BY,
      defaultKind: "group"
    });
  },
  createDomainColumn() {
    return this.createEntityRelationColumn({
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "domain" }),
      relation: RELATION_PART_OF,
      defaultKind: "domain",
      filter: {
        kind: "domain"
      }
    });
  },
  createSystemColumn() {
    return this.createEntityRelationColumn({
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "system" }),
      relation: RELATION_PART_OF,
      defaultKind: "system",
      filter: {
        kind: "system"
      }
    });
  },
  createMetadataDescriptionColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "description" }),
      field: "metadata.description",
      render: (entity) => /* @__PURE__ */ jsx(
        OverflowTooltip,
        {
          text: entity.metadata.description,
          placement: "bottom-start",
          line: 2
        }
      )
    };
  },
  createSpecLifecycleColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "lifecycle" }),
      field: "spec.lifecycle"
    };
  },
  createSpecTypeColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "type" }),
      field: "spec.type"
    };
  }
});

export { columnFactories };
//# sourceMappingURL=columns.esm.js.map
