{"version":3,"file":"columns.esm.js","sources":["../../../src/components/EntityTable/columns.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  CompoundEntityRef,\n  RELATION_OWNED_BY,\n  RELATION_PART_OF,\n} from '@backstage/catalog-model';\nimport { OverflowTooltip, TableColumn } from '@backstage/core-components';\nimport { getEntityRelations } from '../../utils';\nimport {\n  EntityRefLink,\n  EntityRefLinks,\n  humanizeEntityRef,\n} from '../EntityRefLink';\nimport { EntityTableColumnTitle } from './TitleColumn';\n\n/** @public */\nexport const columnFactories = Object.freeze({\n  createEntityRefColumn<T extends Entity>(options: {\n    defaultKind?: string;\n  }): TableColumn<T> {\n    const { defaultKind } = options;\n    function formatContent(entity: T): string {\n      return (\n        entity.metadata?.title ||\n        humanizeEntityRef(entity, {\n          defaultKind,\n        })\n      );\n    }\n\n    return {\n      title: <EntityTableColumnTitle translationKey=\"name\" />,\n      highlight: true,\n      customFilterAndSearch(filter, entity) {\n        // TODO: We could implement this more efficiently, like searching over\n        // each field that is displayed individually (kind, namespace, name).\n        // but that might confuse the user as it will behave different than a\n        // simple text search.\n        // Another alternative would be to cache the values. But writing them\n        // into the entity feels bad too.\n        return formatContent(entity).includes(filter);\n      },\n      customSort(entity1, entity2) {\n        // TODO: We could implement this more efficiently by comparing field by field.\n        // This has similar issues as above.\n        return formatContent(entity1).localeCompare(formatContent(entity2));\n      },\n      render: entity => (\n        <EntityRefLink\n          entityRef={entity}\n          defaultKind={defaultKind}\n          title={entity.metadata?.title}\n        />\n      ),\n    };\n  },\n  createEntityRelationColumn<T extends Entity>(options: {\n    title: string | JSX.Element;\n    relation: string;\n    defaultKind?: string;\n    filter?: { kind: string };\n  }): TableColumn<T> {\n    const { title, relation, defaultKind, filter: entityFilter } = options;\n\n    function getRelations(entity: T): CompoundEntityRef[] {\n      return getEntityRelations(entity, relation, entityFilter);\n    }\n\n    function formatContent(entity: T): string {\n      return getRelations(entity)\n        .map(r => humanizeEntityRef(r, { defaultKind }))\n        .join(', ');\n    }\n\n    return {\n      title,\n      customFilterAndSearch(filter, entity) {\n        return formatContent(entity).includes(filter);\n      },\n      customSort(entity1, entity2) {\n        return formatContent(entity1).localeCompare(formatContent(entity2));\n      },\n      render: entity => {\n        return (\n          <EntityRefLinks\n            entityRefs={getRelations(entity)}\n            defaultKind={defaultKind}\n          />\n        );\n      },\n    };\n  },\n  createOwnerColumn<T extends Entity>(): TableColumn<T> {\n    return this.createEntityRelationColumn({\n      title: <EntityTableColumnTitle translationKey=\"owner\" />,\n      relation: RELATION_OWNED_BY,\n      defaultKind: 'group',\n    });\n  },\n  createDomainColumn<T extends Entity>(): TableColumn<T> {\n    return this.createEntityRelationColumn({\n      title: <EntityTableColumnTitle translationKey=\"domain\" />,\n      relation: RELATION_PART_OF,\n      defaultKind: 'domain',\n      filter: {\n        kind: 'domain',\n      },\n    });\n  },\n  createSystemColumn<T extends Entity>(): TableColumn<T> {\n    return this.createEntityRelationColumn({\n      title: <EntityTableColumnTitle translationKey=\"system\" />,\n      relation: RELATION_PART_OF,\n      defaultKind: 'system',\n      filter: {\n        kind: 'system',\n      },\n    });\n  },\n  createMetadataDescriptionColumn<T extends Entity>(): TableColumn<T> {\n    return {\n      title: <EntityTableColumnTitle translationKey=\"description\" />,\n      field: 'metadata.description',\n      render: entity => (\n        <OverflowTooltip\n          text={entity.metadata.description}\n          placement=\"bottom-start\"\n          line={2}\n        />\n      ),\n    };\n  },\n  createSpecLifecycleColumn<T extends Entity>(): TableColumn<T> {\n    return {\n      title: <EntityTableColumnTitle translationKey=\"lifecycle\" />,\n      field: 'spec.lifecycle',\n    };\n  },\n  createSpecTypeColumn<T extends Entity>(): TableColumn<T> {\n    return {\n      title: <EntityTableColumnTitle translationKey=\"type\" />,\n      field: 'spec.type',\n    };\n  },\n});\n"],"names":[],"mappings":";;;;;;;;;AAgCO,MAAM,eAAA,GAAkB,OAAO,MAAA,CAAO;AAAA,EAC3C,sBAAwC,OAAA,EAErB;AACjB,IAAA,MAAM,EAAE,aAAY,GAAI,OAAA;AACxB,IAAA,SAAS,cAAc,MAAA,EAAmB;AACxC,MAAA,OACE,MAAA,CAAO,QAAA,EAAU,KAAA,IACjB,iBAAA,CAAkB,MAAA,EAAQ;AAAA,QACxB;AAAA,OACD,CAAA;AAAA,IAEL;AAEA,IAAA,OAAO;AAAA,MACL,KAAA,kBAAO,GAAA,CAAC,sBAAA,EAAA,EAAuB,cAAA,EAAe,MAAA,EAAO,CAAA;AAAA,MACrD,SAAA,EAAW,IAAA;AAAA,MACX,qBAAA,CAAsB,QAAQ,MAAA,EAAQ;AAOpC,QAAA,OAAO,aAAA,CAAc,MAAM,CAAA,CAAE,QAAA,CAAS,MAAM,CAAA;AAAA,MAC9C,CAAA;AAAA,MACA,UAAA,CAAW,SAAS,OAAA,EAAS;AAG3B,QAAA,OAAO,cAAc,OAAO,CAAA,CAAE,aAAA,CAAc,aAAA,CAAc,OAAO,CAAC,CAAA;AAAA,MACpE,CAAA;AAAA,MACA,QAAQ,CAAA,MAAA,qBACN,GAAA;AAAA,QAAC,aAAA;AAAA,QAAA;AAAA,UACC,SAAA,EAAW,MAAA;AAAA,UACX,WAAA;AAAA,UACA,KAAA,EAAO,OAAO,QAAA,EAAU;AAAA;AAAA;AAC1B,KAEJ;AAAA,EACF,CAAA;AAAA,EACA,2BAA6C,OAAA,EAK1B;AACjB,IAAA,MAAM,EAAE,KAAA,EAAO,QAAA,EAAU,WAAA,EAAa,MAAA,EAAQ,cAAa,GAAI,OAAA;AAE/D,IAAA,SAAS,aAAa,MAAA,EAAgC;AACpD,MAAA,OAAO,kBAAA,CAAmB,MAAA,EAAQ,QAAA,EAAU,YAAY,CAAA;AAAA,IAC1D;AAEA,IAAA,SAAS,cAAc,MAAA,EAAmB;AACxC,MAAA,OAAO,YAAA,CAAa,MAAM,CAAA,CACvB,GAAA,CAAI,CAAA,CAAA,KAAK,iBAAA,CAAkB,CAAA,EAAG,EAAE,WAAA,EAAa,CAAC,CAAA,CAC9C,KAAK,IAAI,CAAA;AAAA,IACd;AAEA,IAAA,OAAO;AAAA,MACL,KAAA;AAAA,MACA,qBAAA,CAAsB,QAAQ,MAAA,EAAQ;AACpC,QAAA,OAAO,aAAA,CAAc,MAAM,CAAA,CAAE,QAAA,CAAS,MAAM,CAAA;AAAA,MAC9C,CAAA;AAAA,MACA,UAAA,CAAW,SAAS,OAAA,EAAS;AAC3B,QAAA,OAAO,cAAc,OAAO,CAAA,CAAE,aAAA,CAAc,aAAA,CAAc,OAAO,CAAC,CAAA;AAAA,MACpE,CAAA;AAAA,MACA,QAAQ,CAAA,MAAA,KAAU;AAChB,QAAA,uBACE,GAAA;AAAA,UAAC,cAAA;AAAA,UAAA;AAAA,YACC,UAAA,EAAY,aAAa,MAAM,CAAA;AAAA,YAC/B;AAAA;AAAA,SACF;AAAA,MAEJ;AAAA,KACF;AAAA,EACF,CAAA;AAAA,EACA,iBAAA,GAAsD;AACpD,IAAA,OAAO,KAAK,0BAAA,CAA2B;AAAA,MACrC,KAAA,kBAAO,GAAA,CAAC,sBAAA,EAAA,EAAuB,cAAA,EAAe,OAAA,EAAQ,CAAA;AAAA,MACtD,QAAA,EAAU,iBAAA;AAAA,MACV,WAAA,EAAa;AAAA,KACd,CAAA;AAAA,EACH,CAAA;AAAA,EACA,kBAAA,GAAuD;AACrD,IAAA,OAAO,KAAK,0BAAA,CAA2B;AAAA,MACrC,KAAA,kBAAO,GAAA,CAAC,sBAAA,EAAA,EAAuB,cAAA,EAAe,QAAA,EAAS,CAAA;AAAA,MACvD,QAAA,EAAU,gBAAA;AAAA,MACV,WAAA,EAAa,QAAA;AAAA,MACb,MAAA,EAAQ;AAAA,QACN,IAAA,EAAM;AAAA;AACR,KACD,CAAA;AAAA,EACH,CAAA;AAAA,EACA,kBAAA,GAAuD;AACrD,IAAA,OAAO,KAAK,0BAAA,CAA2B;AAAA,MACrC,KAAA,kBAAO,GAAA,CAAC,sBAAA,EAAA,EAAuB,cAAA,EAAe,QAAA,EAAS,CAAA;AAAA,MACvD,QAAA,EAAU,gBAAA;AAAA,MACV,WAAA,EAAa,QAAA;AAAA,MACb,MAAA,EAAQ;AAAA,QACN,IAAA,EAAM;AAAA;AACR,KACD,CAAA;AAAA,EACH,CAAA;AAAA,EACA,+BAAA,GAAoE;AAClE,IAAA,OAAO;AAAA,MACL,KAAA,kBAAO,GAAA,CAAC,sBAAA,EAAA,EAAuB,cAAA,EAAe,aAAA,EAAc,CAAA;AAAA,MAC5D,KAAA,EAAO,sBAAA;AAAA,MACP,QAAQ,CAAA,MAAA,qBACN,GAAA;AAAA,QAAC,eAAA;AAAA,QAAA;AAAA,UACC,IAAA,EAAM,OAAO,QAAA,CAAS,WAAA;AAAA,UACtB,SAAA,EAAU,cAAA;AAAA,UACV,IAAA,EAAM;AAAA;AAAA;AACR,KAEJ;AAAA,EACF,CAAA;AAAA,EACA,yBAAA,GAA8D;AAC5D,IAAA,OAAO;AAAA,MACL,KAAA,kBAAO,GAAA,CAAC,sBAAA,EAAA,EAAuB,cAAA,EAAe,WAAA,EAAY,CAAA;AAAA,MAC1D,KAAA,EAAO;AAAA,KACT;AAAA,EACF,CAAA;AAAA,EACA,oBAAA,GAAyD;AACvD,IAAA,OAAO;AAAA,MACL,KAAA,kBAAO,GAAA,CAAC,sBAAA,EAAA,EAAuB,cAAA,EAAe,MAAA,EAAO,CAAA;AAAA,MACrD,KAAA,EAAO;AAAA,KACT;AAAA,EACF;AACF,CAAC;;;;"}