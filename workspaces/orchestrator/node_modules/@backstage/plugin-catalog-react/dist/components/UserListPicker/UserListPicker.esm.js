import { jsx, jsxs } from 'react/jsx-runtime';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import Card from '@material-ui/core/Card';
import List from '@material-ui/core/List';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import SettingsIcon from '@material-ui/icons/Settings';
import { StarIcon } from '@backstage/core-components';
import { useMemo, useState, useEffect, Fragment } from 'react';
import { EntityUserFilter } from '../../filters.esm.js';
import '../../hooks/useEntity.esm.js';
import { useEntityList } from '../../hooks/useEntityListProvider.esm.js';
import 'react-use/esm/useAsync';
import 'lodash/isEqual';
import 'lodash/sortBy';
import '../../api.esm.js';
import '@backstage/catalog-model';
import 'react-use/esm/useObservable';
import '../../apis/EntityPresentationApi/EntityPresentationApi.esm.js';
import 'lodash/get';
import '../../apis/StarredEntitiesApi/StarredEntitiesApi.esm.js';
import 'zen-observable';
import { useOwnedEntitiesCount } from './useOwnedEntitiesCount.esm.js';
import { useAllEntitiesCount } from './useAllEntitiesCount.esm.js';
import { useStarredEntitiesCount } from './useStarredEntitiesCount.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { catalogReactTranslationRef } from '../../translation.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      backgroundColor: "rgba(0, 0, 0, .11)",
      boxShadow: "none",
      margin: theme.spacing(1, 0, 1, 0)
    },
    title: {
      margin: theme.spacing(1, 0, 0, 1),
      textTransform: "uppercase",
      fontSize: 12,
      fontWeight: "bold"
    },
    listIcon: {
      minWidth: 30,
      color: theme.palette.text.primary
    },
    menuItem: {
      minHeight: theme.spacing(6)
    },
    groupWrapper: {
      margin: theme.spacing(1, 1, 2, 1)
    }
  }),
  { name: "CatalogReactUserListPicker" }
);
function getFilterGroups(orgName, t) {
  return [
    {
      name: t("userListPicker.personalFilter.title"),
      items: [
        {
          id: "owned",
          label: t("userListPicker.personalFilter.ownedLabel"),
          icon: SettingsIcon
        },
        {
          id: "starred",
          label: t("userListPicker.personalFilter.starredLabel"),
          icon: StarIcon
        }
      ]
    },
    {
      name: orgName,
      items: [
        {
          id: "all",
          label: t("userListPicker.orgFilterAllLabel")
        }
      ]
    }
  ];
}
const UserListPicker = (props) => {
  const { initialFilter, availableFilters, hidden, alwaysKeepFilters } = props;
  const classes = useStyles();
  const configApi = useApi(configApiRef);
  const { t } = useTranslationRef(catalogReactTranslationRef);
  const orgName = configApi.getOptionalString("organization.name") ?? t("userListPicker.defaultOrgName");
  const {
    filters,
    updateFilters,
    queryParameters: { kind: kindParameter, user: userParameter }
  } = useEntityList();
  const userAndGroupFilterIds = ["starred", "all"];
  const filterGroups = getFilterGroups(orgName, t).map((filterGroup) => ({
    ...filterGroup,
    items: filterGroup.items.filter(
      ({ id }) => (
        // TODO: avoid hardcoding kinds here
        ["group", "user"].some((kind) => kind === kindParameter) ? userAndGroupFilterIds.includes(id) : !availableFilters || availableFilters.includes(id)
      )
    )
  })).filter(({ items }) => !!items.length);
  const {
    count: ownedEntitiesCount,
    loading: loadingOwnedEntities,
    filter: ownedEntitiesFilter
  } = useOwnedEntitiesCount();
  const { count: allCount } = useAllEntitiesCount();
  const {
    count: starredEntitiesCount,
    filter: starredEntitiesFilter,
    loading: loadingStarredEntities
  } = useStarredEntitiesCount();
  const queryParamUserFilter = useMemo(
    () => [userParameter].flat()[0],
    [userParameter]
  );
  const [selectedUserFilter, setSelectedUserFilter] = useState(
    queryParamUserFilter ?? initialFilter
  );
  const filterCounts = useMemo(() => {
    return {
      all: allCount,
      starred: starredEntitiesCount,
      owned: ownedEntitiesCount
    };
  }, [starredEntitiesCount, ownedEntitiesCount, allCount]);
  useEffect(() => {
    if (queryParamUserFilter) {
      setSelectedUserFilter(queryParamUserFilter);
    }
  }, [queryParamUserFilter]);
  const loading = loadingOwnedEntities || loadingStarredEntities;
  useEffect(() => {
    if (!loading && !!selectedUserFilter && selectedUserFilter !== "all" && filterCounts[selectedUserFilter] === 0 && !alwaysKeepFilters) {
      setSelectedUserFilter("all");
    }
  }, [
    loading,
    filterCounts,
    selectedUserFilter,
    setSelectedUserFilter,
    alwaysKeepFilters
  ]);
  useEffect(() => {
    if (!selectedUserFilter) {
      return;
    }
    if (loading) {
      return;
    }
    const getFilter = () => {
      if (selectedUserFilter === "owned") {
        return ownedEntitiesFilter;
      }
      if (selectedUserFilter === "starred") {
        return starredEntitiesFilter;
      }
      return EntityUserFilter.all();
    };
    updateFilters({ user: getFilter() });
  }, [
    selectedUserFilter,
    starredEntitiesFilter,
    ownedEntitiesFilter,
    updateFilters,
    loading
  ]);
  return hidden ? null : /* @__PURE__ */ jsx(Card, { className: classes.root, children: filterGroups.map((group) => /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      Typography,
      {
        variant: "subtitle2",
        component: "span",
        className: classes.title,
        children: group.name
      }
    ),
    /* @__PURE__ */ jsx(Card, { className: classes.groupWrapper, children: /* @__PURE__ */ jsx(List, { disablePadding: true, dense: true, role: "menu", "aria-label": group.name, children: group.items.map((item, index) => /* @__PURE__ */ jsxs(
      MenuItem,
      {
        role: "none presentation",
        divider: index !== group.items.length - 1,
        onClick: () => setSelectedUserFilter(item.id),
        selected: item.id === filters.user?.value,
        className: classes.menuItem,
        disabled: filterCounts[item.id] === 0,
        "data-testid": `user-picker-${item.id}`,
        tabIndex: 0,
        ContainerProps: { role: "menuitem" },
        children: [
          item.icon && /* @__PURE__ */ jsx(ListItemIcon, { className: classes.listIcon, children: /* @__PURE__ */ jsx(item.icon, { fontSize: "small" }) }),
          /* @__PURE__ */ jsx(ListItemText, { children: /* @__PURE__ */ jsxs(Typography, { variant: "body1", children: [
            item.label,
            " "
          ] }) }),
          /* @__PURE__ */ jsx(ListItemSecondaryAction, { children: filterCounts[item.id] ?? "-" })
        ]
      },
      item.id
    )) }) })
  ] }, group.name)) });
};

export { UserListPicker };
//# sourceMappingURL=UserListPicker.esm.js.map
