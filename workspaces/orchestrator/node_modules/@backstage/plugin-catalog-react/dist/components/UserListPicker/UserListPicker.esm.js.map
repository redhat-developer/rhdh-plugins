{"version":3,"file":"UserListPicker.esm.js","sources":["../../../src/components/UserListPicker/UserListPicker.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  configApiRef,\n  IconComponent,\n  useApi,\n} from '@backstage/core-plugin-api';\nimport Card from '@material-ui/core/Card';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { StarIcon } from '@backstage/core-components';\nimport { Fragment, useEffect, useMemo, useState } from 'react';\nimport { EntityUserFilter } from '../../filters';\nimport { useEntityList } from '../../hooks';\nimport { UserListFilterKind } from '../../types';\nimport { useOwnedEntitiesCount } from './useOwnedEntitiesCount';\nimport { useAllEntitiesCount } from './useAllEntitiesCount';\nimport { useStarredEntitiesCount } from './useStarredEntitiesCount';\nimport {\n  TranslationFunction,\n  useTranslationRef,\n} from '@backstage/core-plugin-api/alpha';\nimport { catalogReactTranslationRef } from '../../translation';\n\n/** @public */\nexport type CatalogReactUserListPickerClassKey =\n  | 'root'\n  | 'title'\n  | 'listIcon'\n  | 'menuItem'\n  | 'groupWrapper';\n\nconst useStyles = makeStyles(\n  theme => ({\n    root: {\n      backgroundColor: 'rgba(0, 0, 0, .11)',\n      boxShadow: 'none',\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    title: {\n      margin: theme.spacing(1, 0, 0, 1),\n      textTransform: 'uppercase',\n      fontSize: 12,\n      fontWeight: 'bold',\n    },\n    listIcon: {\n      minWidth: 30,\n      color: theme.palette.text.primary,\n    },\n    menuItem: {\n      minHeight: theme.spacing(6),\n    },\n    groupWrapper: {\n      margin: theme.spacing(1, 1, 2, 1),\n    },\n  }),\n  { name: 'CatalogReactUserListPicker' },\n);\n\nexport type ButtonGroup = {\n  name: string;\n  items: {\n    id: 'owned' | 'starred' | 'all';\n    label: string;\n    icon?: IconComponent;\n  }[];\n};\n\nfunction getFilterGroups(\n  orgName: string,\n  t: TranslationFunction<typeof catalogReactTranslationRef.T>,\n): ButtonGroup[] {\n  return [\n    {\n      name: t('userListPicker.personalFilter.title'),\n      items: [\n        {\n          id: 'owned',\n          label: t('userListPicker.personalFilter.ownedLabel'),\n          icon: SettingsIcon,\n        },\n        {\n          id: 'starred',\n          label: t('userListPicker.personalFilter.starredLabel'),\n          icon: StarIcon,\n        },\n      ],\n    },\n    {\n      name: orgName,\n      items: [\n        {\n          id: 'all',\n          label: t('userListPicker.orgFilterAllLabel'),\n        },\n      ],\n    },\n  ];\n}\n\n/** @public */\nexport type UserListPickerProps = {\n  initialFilter?: UserListFilterKind;\n  availableFilters?: UserListFilterKind[];\n  hidden?: boolean;\n  alwaysKeepFilters?: boolean;\n};\n\n/** @public */\nexport const UserListPicker = (props: UserListPickerProps) => {\n  const { initialFilter, availableFilters, hidden, alwaysKeepFilters } = props;\n  const classes = useStyles();\n  const configApi = useApi(configApiRef);\n  const { t } = useTranslationRef(catalogReactTranslationRef);\n  const orgName =\n    configApi.getOptionalString('organization.name') ??\n    t('userListPicker.defaultOrgName');\n  const {\n    filters,\n    updateFilters,\n    queryParameters: { kind: kindParameter, user: userParameter },\n  } = useEntityList();\n\n  // Remove group items that aren't in availableFilters and exclude\n  // any now-empty groups.\n  const userAndGroupFilterIds = ['starred', 'all'];\n  const filterGroups = getFilterGroups(orgName, t)\n    .map(filterGroup => ({\n      ...filterGroup,\n      items: filterGroup.items.filter(({ id }) =>\n        // TODO: avoid hardcoding kinds here\n        ['group', 'user'].some(kind => kind === kindParameter)\n          ? userAndGroupFilterIds.includes(id)\n          : !availableFilters || availableFilters.includes(id),\n      ),\n    }))\n    .filter(({ items }) => !!items.length);\n\n  const {\n    count: ownedEntitiesCount,\n    loading: loadingOwnedEntities,\n    filter: ownedEntitiesFilter,\n  } = useOwnedEntitiesCount();\n  const { count: allCount } = useAllEntitiesCount();\n  const {\n    count: starredEntitiesCount,\n    filter: starredEntitiesFilter,\n    loading: loadingStarredEntities,\n  } = useStarredEntitiesCount();\n\n  const queryParamUserFilter = useMemo(\n    () => [userParameter].flat()[0],\n    [userParameter],\n  );\n\n  const [selectedUserFilter, setSelectedUserFilter] = useState(\n    (queryParamUserFilter as UserListFilterKind) ?? initialFilter,\n  );\n\n  const filterCounts = useMemo(() => {\n    return {\n      all: allCount,\n      starred: starredEntitiesCount,\n      owned: ownedEntitiesCount,\n    };\n  }, [starredEntitiesCount, ownedEntitiesCount, allCount]);\n\n  // Set selected user filter on query parameter updates; this happens at initial page load and from\n  // external updates to the page location.\n  useEffect(() => {\n    if (queryParamUserFilter) {\n      setSelectedUserFilter(queryParamUserFilter as UserListFilterKind);\n    }\n  }, [queryParamUserFilter]);\n\n  const loading = loadingOwnedEntities || loadingStarredEntities;\n\n  useEffect(() => {\n    if (\n      !loading &&\n      !!selectedUserFilter &&\n      selectedUserFilter !== 'all' &&\n      filterCounts[selectedUserFilter] === 0 &&\n      !alwaysKeepFilters\n    ) {\n      setSelectedUserFilter('all');\n    }\n  }, [\n    loading,\n    filterCounts,\n    selectedUserFilter,\n    setSelectedUserFilter,\n    alwaysKeepFilters,\n  ]);\n\n  useEffect(() => {\n    if (!selectedUserFilter) {\n      return;\n    }\n    if (loading) {\n      return;\n    }\n\n    const getFilter = () => {\n      if (selectedUserFilter === 'owned') {\n        return ownedEntitiesFilter;\n      }\n      if (selectedUserFilter === 'starred') {\n        return starredEntitiesFilter;\n      }\n      return EntityUserFilter.all();\n    };\n\n    updateFilters({ user: getFilter() });\n  }, [\n    selectedUserFilter,\n    starredEntitiesFilter,\n    ownedEntitiesFilter,\n    updateFilters,\n\n    loading,\n  ]);\n\n  return hidden ? null : (\n    <Card className={classes.root}>\n      {filterGroups.map(group => (\n        <Fragment key={group.name}>\n          <Typography\n            variant=\"subtitle2\"\n            component=\"span\"\n            className={classes.title}\n          >\n            {group.name}\n          </Typography>\n          <Card className={classes.groupWrapper}>\n            <List disablePadding dense role=\"menu\" aria-label={group.name}>\n              {group.items.map((item, index) => (\n                <MenuItem\n                  role=\"none presentation\"\n                  key={item.id}\n                  divider={index !== group.items.length - 1}\n                  onClick={() => setSelectedUserFilter(item.id)}\n                  selected={item.id === filters.user?.value}\n                  className={classes.menuItem}\n                  disabled={filterCounts[item.id] === 0}\n                  data-testid={`user-picker-${item.id}`}\n                  tabIndex={0}\n                  ContainerProps={{ role: 'menuitem' }}\n                >\n                  {item.icon && (\n                    <ListItemIcon className={classes.listIcon}>\n                      <item.icon fontSize=\"small\" />\n                    </ListItemIcon>\n                  )}\n                  <ListItemText>\n                    <Typography variant=\"body1\">{item.label} </Typography>\n                  </ListItemText>\n                  <ListItemSecondaryAction>\n                    {filterCounts[item.id] ?? '-'}\n                  </ListItemSecondaryAction>\n                </MenuItem>\n              ))}\n            </List>\n          </Card>\n        </Fragment>\n      ))}\n    </Card>\n  );\n};\n"],"names":[],"mappings":"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"}