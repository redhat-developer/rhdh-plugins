import { jsx } from 'react/jsx-runtime';
import { EntityOrphanFilter, EntityErrorFilter } from '../../filters.esm.js';
import Box from '@material-ui/core/Box';
import Checkbox from '@material-ui/core/Checkbox';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import { makeStyles } from '@material-ui/core/styles';
import CheckBoxIcon from '@material-ui/icons/CheckBox';
import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';
import { useState } from 'react';
import '../../hooks/useEntity.esm.js';
import { useEntityList } from '../../hooks/useEntityListProvider.esm.js';
import 'react-use/esm/useAsync';
import 'lodash/isEqual';
import 'lodash/sortBy';
import '@backstage/core-plugin-api';
import '../../api.esm.js';
import '@backstage/catalog-model';
import 'react-use/esm/useObservable';
import '../../apis/EntityPresentationApi/EntityPresentationApi.esm.js';
import 'lodash/get';
import '../../apis/StarredEntitiesApi/StarredEntitiesApi.esm.js';
import 'zen-observable';
import { catalogReactTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { CatalogAutocomplete } from '../CatalogAutocomplete/CatalogAutocomplete.esm.js';

const useStyles = makeStyles(
  {
    root: {},
    input: {},
    label: {}
  },
  { name: "CatalogReactEntityProcessingStatusPickerPicker" }
);
const icon = /* @__PURE__ */ jsx(CheckBoxOutlineBlankIcon, { fontSize: "small" });
const checkedIcon = /* @__PURE__ */ jsx(CheckBoxIcon, { fontSize: "small" });
const EntityProcessingStatusPicker = () => {
  const classes = useStyles();
  const { updateFilters } = useEntityList();
  const { t } = useTranslationRef(catalogReactTranslationRef);
  const [selectedAdvancedItems, setSelectedAdvancedItems] = useState(
    []
  );
  function orphanChange(value) {
    updateFilters({
      orphan: value ? new EntityOrphanFilter(value) : void 0
    });
  }
  function errorChange(value) {
    updateFilters({
      error: value ? new EntityErrorFilter(value) : void 0
    });
  }
  const availableAdvancedItems = ["Is Orphan", "Has Error"];
  return /* @__PURE__ */ jsx(Box, { className: classes.root, pb: 1, pt: 1, children: /* @__PURE__ */ jsx(
    CatalogAutocomplete,
    {
      label: t("entityProcessingStatusPicker.title"),
      multiple: true,
      disableCloseOnSelect: true,
      options: availableAdvancedItems,
      value: selectedAdvancedItems,
      onChange: (_, value) => {
        setSelectedAdvancedItems(value);
        orphanChange(value.includes("Is Orphan"));
        errorChange(value.includes("Has Error"));
      },
      renderOption: (option, { selected }) => /* @__PURE__ */ jsx(
        FormControlLabel,
        {
          control: /* @__PURE__ */ jsx(
            Checkbox,
            {
              icon,
              checkedIcon,
              checked: selected
            }
          ),
          onClick: (event) => event.preventDefault(),
          label: option
        }
      ),
      name: "processing-status-picker",
      LabelProps: { className: classes.label },
      TextFieldProps: { className: classes.input }
    }
  ) });
};

export { EntityProcessingStatusPicker };
//# sourceMappingURL=EntityProcessingStatusPicker.esm.js.map
