{"version":3,"file":"EntityKindPicker.esm.js","sources":["../../../src/components/EntityKindPicker/EntityKindPicker.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Select } from '@backstage/core-components';\nimport { alertApiRef, useApi } from '@backstage/core-plugin-api';\nimport Box from '@material-ui/core/Box';\nimport { useEffect, useMemo, useState } from 'react';\nimport { EntityKindFilter } from '../../filters';\nimport { useEntityList } from '../../hooks';\nimport { filterKinds, useAllKinds } from './kindFilterUtils';\nimport { catalogReactTranslationRef } from '../../translation';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\n\nfunction useEntityKindFilter(opts: { initialFilter: string }): {\n  loading: boolean;\n  error?: Error;\n  allKinds: Map<string, string>;\n  selectedKind: string;\n  setSelectedKind: (kind: string) => void;\n} {\n  const {\n    filters,\n    queryParameters: { kind: kindParameter },\n    updateFilters,\n  } = useEntityList();\n\n  const queryParamKind = useMemo(\n    () => [kindParameter].flat()[0],\n    [kindParameter],\n  );\n\n  const [selectedKind, setSelectedKind] = useState(\n    queryParamKind ?? filters.kind?.value ?? opts.initialFilter,\n  );\n\n  // Set selected kinds on query parameter updates; this happens at initial page load and from\n  // external updates to the page location.\n  useEffect(() => {\n    if (queryParamKind) {\n      setSelectedKind(queryParamKind);\n    }\n  }, [queryParamKind]);\n\n  // Set selected kind from filters; this happens when the kind filter is\n  // updated from another component\n  useEffect(() => {\n    if (filters.kind?.value) {\n      setSelectedKind(filters.kind?.value);\n    }\n  }, [filters.kind]);\n\n  const { allKinds, loading, error } = useAllKinds();\n  const selectedKindLabel = allKinds.get(selectedKind) || selectedKind;\n\n  useEffect(() => {\n    updateFilters({\n      kind: selectedKind\n        ? new EntityKindFilter(selectedKind, selectedKindLabel)\n        : undefined,\n    });\n  }, [selectedKind, selectedKindLabel, updateFilters]);\n\n  return {\n    loading,\n    error,\n    allKinds,\n    selectedKind,\n    setSelectedKind,\n  };\n}\n\n/**\n * Props for {@link EntityKindPicker}.\n *\n * @public\n */\nexport interface EntityKindPickerProps {\n  /**\n   * Entity kinds to show in the dropdown; by default all kinds are fetched from the catalog and\n   * displayed.\n   */\n  allowedKinds?: string[];\n  initialFilter?: string;\n  hidden?: boolean;\n}\n\n/** @public */\nexport const EntityKindPicker = (props: EntityKindPickerProps) => {\n  const { allowedKinds, hidden, initialFilter = 'component' } = props;\n  const { t } = useTranslationRef(catalogReactTranslationRef);\n\n  const alertApi = useApi(alertApiRef);\n\n  const { error, allKinds, selectedKind, setSelectedKind } =\n    useEntityKindFilter({\n      initialFilter: initialFilter,\n    });\n\n  useEffect(() => {\n    if (error) {\n      alertApi.post({\n        message: t('entityKindPicker.errorMessage'),\n        severity: 'error',\n      });\n    }\n  }, [error, alertApi, t]);\n\n  if (error) return null;\n\n  const options = filterKinds(allKinds, allowedKinds, selectedKind);\n\n  const items = [...options.entries()].map(([key, value]) => ({\n    label: value,\n    value: key,\n  }));\n\n  return hidden ? null : (\n    <Box pb={1} pt={1}>\n      <Select\n        label={t('entityKindPicker.title')}\n        items={items}\n        selected={selectedKind.toLocaleLowerCase('en-US')}\n        onChange={value => setSelectedKind(String(value))}\n      />\n    </Box>\n  );\n};\n"],"names":[],"mappings":"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"}