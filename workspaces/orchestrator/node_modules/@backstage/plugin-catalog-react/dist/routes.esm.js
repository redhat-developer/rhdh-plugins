import { parseEntityRef, DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import { createRouteRef } from '@backstage/core-plugin-api';
import { getOrCreateGlobalSingleton } from '@backstage/version-bridge';

const entityRouteRef = getOrCreateGlobalSingleton(
  "catalog:entity-route-ref",
  () => createRouteRef({
    id: "catalog:entity",
    params: ["namespace", "kind", "name"]
  })
);
function entityRouteParams(entityOrRef, options) {
  let kind;
  let namespace;
  let name;
  if (typeof entityOrRef === "string") {
    const parsed = parseEntityRef(entityOrRef);
    kind = parsed.kind;
    namespace = parsed.namespace;
    name = parsed.name;
  } else if ("metadata" in entityOrRef) {
    kind = entityOrRef.kind;
    namespace = entityOrRef.metadata.namespace;
    name = entityOrRef.metadata.name;
  } else {
    kind = entityOrRef.kind;
    namespace = entityOrRef.namespace;
    name = entityOrRef.name;
  }
  kind = kind.toLocaleLowerCase("en-US");
  namespace = namespace?.toLocaleLowerCase("en-US") ?? DEFAULT_NAMESPACE;
  const { encodeParams = false } = options || {};
  if (encodeParams) {
    kind = encodeURIComponent(kind);
    namespace = encodeURIComponent(namespace);
    name = encodeURIComponent(name);
  }
  return {
    kind,
    namespace,
    name
  };
}

export { entityRouteParams, entityRouteRef };
//# sourceMappingURL=routes.esm.js.map
