{"version":3,"file":"azure.cjs.js","sources":["../../src/actions/azure.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  initRepoAndPush,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { GitRepositoryCreateOptions } from 'azure-devops-node-api/interfaces/GitInterfaces';\nimport {\n  getBearerHandler,\n  getPersonalAccessTokenHandler,\n  WebApi,\n} from 'azure-devops-node-api';\nimport { Config } from '@backstage/config';\nimport { examples } from './azure.examples';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Azure.\n * @public\n */\nexport function createPublishAzureAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:azure',\n    examples,\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Azure.',\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        description: z =>\n          z\n            .string({\n              description: 'Repository Description',\n            })\n            .optional(),\n        defaultBranch: z =>\n          z\n            .string({\n              description: `Sets the default branch on the repository. The default value is 'master'`,\n            })\n            .optional(),\n        sourcePath: z =>\n          z\n            .string({\n              description:\n                'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to Azure',\n            })\n            .optional(),\n        gitCommitMessage: z =>\n          z\n            .string({\n              description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the default author email for the commit.`,\n            })\n            .optional(),\n        signCommit: z =>\n          z\n            .boolean({\n              description: 'Sign commit with configured PGP private key',\n            })\n            .optional(),\n      },\n      output: {\n        remoteUrl: z =>\n          z\n            .string({\n              description: 'A URL to the repository with the provider',\n            })\n            .optional(),\n        repoContentsUrl: z =>\n          z\n            .string({\n              description: 'A URL to the root of the repository',\n            })\n            .optional(),\n        repositoryId: z =>\n          z\n            .string({\n              description: 'The Id of the created repository',\n            })\n            .optional(),\n        commitHash: z =>\n          z\n            .string({\n              description: 'The git commit hash of the initial commit',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        defaultBranch = 'master',\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n        signCommit,\n      } = ctx.input;\n\n      const { project, repo, host, organization } = parseRepoUrl(\n        repoUrl,\n        integrations,\n      );\n\n      if (!organization) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing organization`,\n        );\n      }\n\n      const url = `https://${host}/${organization}`;\n      const credentialProvider =\n        DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n      const credentials = await credentialProvider.getCredentials({ url: url });\n      const integrationConfig = integrations.azure.byHost(host);\n\n      if (credentials === undefined && ctx.input.token === undefined) {\n        throw new InputError(\n          `No credentials provided ${url}, please check your integrations config`,\n        );\n      }\n\n      const authHandler =\n        ctx.input.token || credentials?.type === 'pat'\n          ? getPersonalAccessTokenHandler(ctx.input.token ?? credentials!.token)\n          : getBearerHandler(credentials!.token);\n\n      const webApi = new WebApi(url, authHandler);\n      const client = await webApi.getGitApi();\n      const createOptions: GitRepositoryCreateOptions = { name: repo };\n\n      const { remoteUrl, repositoryId, repoContentsUrl } = await ctx.checkpoint(\n        {\n          key: `create.repo.${repo}`,\n          fn: async () => {\n            const returnedRepo = await client.createRepository(\n              createOptions,\n              project,\n            );\n\n            if (!returnedRepo) {\n              throw new InputError(\n                `Unable to create the repository with Organization ${organization}, Project ${project} and Repo ${repo}.\n          Please make sure that both the Org and Project are typed corrected and exist.`,\n              );\n            }\n\n            if (!returnedRepo.remoteUrl) {\n              throw new InputError(\n                'No remote URL returned from create repository for Azure',\n              );\n            }\n\n            if (!returnedRepo.id) {\n              throw new InputError(\n                'No Id returned from create repository for Azure',\n              );\n            }\n\n            if (!returnedRepo.webUrl) {\n              throw new InputError(\n                'No web URL returned from create repository for Azure',\n              );\n            }\n\n            return {\n              remoteUrl: returnedRepo.remoteUrl,\n              repositoryId: returnedRepo.id,\n              repoContentsUrl: returnedRepo.webUrl,\n            };\n          },\n        },\n      );\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      const auth = {\n        username: 'notempty',\n        password: ctx.input.token ?? credentials!.token,\n      };\n\n      const signingKey =\n        integrationConfig?.config.commitSigningKey ??\n        config.getOptionalString('scaffolder.defaultCommitSigningKey');\n      if (signCommit && !signingKey) {\n        throw new Error(\n          'Signing commits is enabled but no signing key is provided in the configuration',\n        );\n      }\n\n      const commitHash = await ctx.checkpoint({\n        key: `init.repo.and.push.${remoteUrl}`,\n        fn: async () => {\n          const commitResult = await initRepoAndPush({\n            dir: getRepoSourceDirectory(\n              ctx.workspacePath,\n              ctx.input.sourcePath,\n            ),\n            remoteUrl,\n            defaultBranch,\n            auth: auth,\n            logger: ctx.logger,\n            commitMessage: gitCommitMessage\n              ? gitCommitMessage\n              : config.getOptionalString('scaffolder.defaultCommitMessage'),\n            gitAuthorInfo,\n            signingKey: signCommit ? signingKey : undefined,\n          });\n\n          return commitResult?.commitHash;\n        },\n      });\n\n      ctx.output('commitHash', commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('repositoryId', repositoryId);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","DefaultAzureDevOpsCredentialsProvider","getPersonalAccessTokenHandler","getBearerHandler","WebApi","initRepoAndPush","getRepoSourceDirectory"],"mappings":"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"}