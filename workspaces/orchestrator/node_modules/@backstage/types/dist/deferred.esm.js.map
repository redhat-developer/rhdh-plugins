{"version":3,"file":"deferred.esm.js","sources":["../src/deferred.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A deferred promise that can be resolved or rejected later.\n *\n * @public\n */\nexport type DeferredPromise<\n  TResolved = void,\n  TRejected = Error,\n> = Promise<TResolved> & {\n  resolve(value: TResolved | PromiseLike<TResolved>): void;\n  reject(reason?: TRejected): void;\n};\n\nclass Deferred<TResolved, TRejected>\n  implements DeferredPromise<TResolved, TRejected>\n{\n  #resolve?: (value: TResolved | PromiseLike<TResolved>) => void;\n  #reject?: (reason?: TRejected) => void;\n\n  public get resolve() {\n    return this.#resolve!;\n  }\n  public get reject() {\n    return this.#reject!;\n  }\n\n  public then: Promise<TResolved>['then'];\n  public catch: Promise<TResolved>['catch'];\n  public finally: Promise<TResolved>['finally'];\n\n  public constructor() {\n    const promise = new Promise<TResolved>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n    });\n\n    this.then = promise.then.bind(promise);\n    this.catch = promise.catch.bind(promise);\n    this.finally = promise.finally.bind(promise);\n  }\n\n  [Symbol.toStringTag]: 'DeferredPromise' = 'DeferredPromise';\n}\n\n/**\n * Creates a deferred promise that can be resolved or rejected later.\n *\n * @public\n */\nexport function createDeferred<\n  TResolved = void,\n  TRejected = Error,\n>(): DeferredPromise<TResolved, TRejected> {\n  return new Deferred();\n}\n"],"names":[],"mappings":"AA6BA,MAAM,QAAA,CAEN;AAAA,EACE,QAAA;AAAA,EACA,OAAA;AAAA,EAEA,IAAW,OAAA,GAAU;AACnB,IAAA,OAAO,IAAA,CAAK,QAAA;AAAA,EACd;AAAA,EACA,IAAW,MAAA,GAAS;AAClB,IAAA,OAAO,IAAA,CAAK,OAAA;AAAA,EACd;AAAA,EAEO,IAAA;AAAA,EACA,KAAA;AAAA,EACA,OAAA;AAAA,EAEA,WAAA,GAAc;AACnB,IAAA,MAAM,OAAA,GAAU,IAAI,OAAA,CAAmB,CAAC,SAAS,MAAA,KAAW;AAC1D,MAAA,IAAA,CAAK,QAAA,GAAW,OAAA;AAChB,MAAA,IAAA,CAAK,OAAA,GAAU,MAAA;AAAA,IACjB,CAAC,CAAA;AAED,IAAA,IAAA,CAAK,IAAA,GAAO,OAAA,CAAQ,IAAA,CAAK,IAAA,CAAK,OAAO,CAAA;AACrC,IAAA,IAAA,CAAK,KAAA,GAAQ,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAK,OAAO,CAAA;AACvC,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA,CAAQ,OAAA,CAAQ,IAAA,CAAK,OAAO,CAAA;AAAA,EAC7C;AAAA,EAEA,CAAC,MAAA,CAAO,WAAW,IAAuB,iBAAA;AAC5C;AAOO,SAAS,cAAA,GAG2B;AACzC,EAAA,OAAO,IAAI,QAAA,EAAS;AACtB;;;;"}