import { jsx } from 'react/jsx-runtime';
import { ApiBlueprint, IconBundleBlueprint, createExtension, ThemeBlueprint, RouterBlueprint, SignInPageBlueprint, SwappableComponentBlueprint, Progress, NotFoundErrorPage, ErrorDisplay, createFrontendModule } from '@backstage/frontend-plugin-api';
import { toLegacyPlugin } from './compatWrapper/BackwardsCompatProvider.esm.js';
import { compatWrapper } from './compatWrapper/compatWrapper.esm.js';

function componentCompatWrapper(Component) {
  return (props) => compatWrapper(/* @__PURE__ */ jsx(Component, { ...props }));
}
function convertLegacyAppOptions(options = {}) {
  const { apis, icons, plugins, components, themes, featureFlags } = options;
  const allApis = [
    ...plugins?.flatMap((plugin) => [...plugin.getApis()]) ?? [],
    ...apis ?? []
  ];
  const deduplicatedApis = Array.from(
    new Map(allApis.map((api) => [api.api.id, api])).values()
  );
  const extensions = deduplicatedApis.map(
    (factory) => ApiBlueprint.make({
      name: factory.api.id,
      params: (defineParams) => defineParams(factory)
    })
  );
  if (icons) {
    extensions.push(
      IconBundleBlueprint.make({
        name: "app-options",
        params: { icons }
      })
    );
  }
  if (themes) {
    for (const id of ["light", "dark"]) {
      if (!themes.some((theme) => theme.id === id)) {
        extensions.push(
          createExtension({
            kind: "theme",
            name: id,
            attachTo: { id: "api:app/app-theme", input: "themes" },
            disabled: true,
            output: [],
            factory: () => []
          })
        );
      }
    }
    extensions.push(
      ...themes.map(
        (theme) => ThemeBlueprint.make({
          name: theme.id,
          params: { theme }
        })
      )
    );
  }
  if (components) {
    const {
      BootErrorPage,
      ErrorBoundaryFallback,
      NotFoundErrorPage: NotFoundErrorPage$1,
      Progress: Progress$1,
      Router,
      SignInPage,
      ThemeProvider
    } = components;
    if (BootErrorPage) {
      throw new Error(
        "components.BootErrorPage is not supported by convertLegacyAppOptions"
      );
    }
    if (ThemeProvider) {
      throw new Error(
        "components.ThemeProvider is not supported by convertLegacyAppOptions"
      );
    }
    if (Router) {
      extensions.push(
        RouterBlueprint.make({
          params: { component: componentCompatWrapper(Router) }
        })
      );
    }
    if (SignInPage) {
      extensions.push(
        SignInPageBlueprint.make({
          params: {
            loader: () => Promise.resolve(componentCompatWrapper(SignInPage))
          }
        })
      );
    }
    if (Progress$1) {
      extensions.push(
        SwappableComponentBlueprint.make({
          params: (define) => define({
            component: Progress,
            loader: () => componentCompatWrapper(Progress$1)
          })
        })
      );
    }
    if (NotFoundErrorPage$1) {
      extensions.push(
        SwappableComponentBlueprint.make({
          params: (define) => define({
            component: NotFoundErrorPage,
            loader: () => componentCompatWrapper(NotFoundErrorPage$1)
          })
        })
      );
    }
    if (ErrorBoundaryFallback) {
      const WrappedErrorBoundaryFallback = (props) => compatWrapper(
        /* @__PURE__ */ jsx(
          ErrorBoundaryFallback,
          {
            ...props,
            plugin: props.plugin && toLegacyPlugin(props.plugin)
          }
        )
      );
      extensions.push(
        SwappableComponentBlueprint.make({
          params: (define) => define({
            component: ErrorDisplay,
            loader: () => componentCompatWrapper(WrappedErrorBoundaryFallback)
          })
        })
      );
    }
  }
  return createFrontendModule({
    pluginId: "app",
    extensions,
    featureFlags
  });
}

export { convertLegacyAppOptions };
//# sourceMappingURL=convertLegacyAppOptions.esm.js.map
