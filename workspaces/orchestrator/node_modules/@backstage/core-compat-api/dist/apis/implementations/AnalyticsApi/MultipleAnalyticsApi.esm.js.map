{"version":3,"file":"MultipleAnalyticsApi.esm.js","sources":["../../../../src/apis/implementations/AnalyticsApi/MultipleAnalyticsApi.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AnalyticsApi, AnalyticsEvent } from '@backstage/core-plugin-api';\nimport {\n  AnalyticsApi as NewAnalyicsApi,\n  AnalyticsEvent as NewAnalyicsEvent,\n} from '@backstage/frontend-plugin-api';\n\n/**\n * An implementation of the AnalyticsApi that can be used to forward analytics\n * events to multiple concrete implementations.\n *\n * @public\n *\n * @example\n *\n * ```jsx\n * createApiFactory({\n *   api: analyticsApiRef,\n *   deps: { configApi: configApiRef, identityApi: identityApiRef, storageApi: storageApiRef },\n *   factory: ({ configApi, identityApi, storageApi }) =>\n *     MultipleAnalyticsApi.fromApis([\n *       VendorAnalyticsApi.fromConfig(configApi, { identityApi }),\n *       CustomAnalyticsApi.fromConfig(configApi, { identityApi, storageApi }),\n *     ]),\n * });\n * ```\n */\nexport class MultipleAnalyticsApi implements AnalyticsApi, NewAnalyicsApi {\n  private constructor(\n    private readonly actualApis: (AnalyticsApi | NewAnalyicsApi)[],\n  ) {}\n\n  /**\n   * Create an AnalyticsApi implementation from an array of concrete\n   * implementations.\n   *\n   * @example\n   *\n   * ```jsx\n   * MultipleAnalyticsApi.fromApis([\n   *   SomeAnalyticsApi.fromConfig(configApi),\n   *   new CustomAnalyticsApi(),\n   * ]);\n   * ```\n   */\n  static fromApis(actualApis: (AnalyticsApi | NewAnalyicsApi)[]) {\n    return new MultipleAnalyticsApi(actualApis);\n  }\n\n  /**\n   * Forward the event to all configured analytics API implementations.\n   */\n  captureEvent(event: AnalyticsEvent | NewAnalyicsEvent): void {\n    this.actualApis.forEach(analyticsApi => {\n      try {\n        analyticsApi.captureEvent(event as AnalyticsEvent & NewAnalyicsEvent);\n      } catch {\n        /* ignored */\n      }\n    });\n  }\n}\n"],"names":[],"mappings":"AAyCO,MAAM,oBAAA,CAA6D;AAAA,EAChE,YACW,UAAA,EACjB;AADiB,IAAA,IAAA,CAAA,UAAA,GAAA,UAAA;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeH,OAAO,SAAS,UAAA,EAA+C;AAC7D,IAAA,OAAO,IAAI,qBAAqB,UAAU,CAAA;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,KAAA,EAAgD;AAC3D,IAAA,IAAA,CAAK,UAAA,CAAW,QAAQ,CAAA,YAAA,KAAgB;AACtC,MAAA,IAAI;AACF,QAAA,YAAA,CAAa,aAAa,KAA0C,CAAA;AAAA,MACtE,CAAA,CAAA,MAAQ;AAAA,MAER;AAAA,IACF,CAAC,CAAA;AAAA,EACH;AACF;;;;"}