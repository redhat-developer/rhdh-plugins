{"version":3,"file":"convertLegacyRouteRef.esm.js","sources":["../src/convertLegacyRouteRef.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RouteRef as LegacyRouteRef,\n  SubRouteRef as LegacySubRouteRef,\n  ExternalRouteRef as LegacyExternalRouteRef,\n  AnyRouteRefParams,\n} from '@backstage/core-plugin-api';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { routeRefType } from '../../core-plugin-api/src/routing/types';\n\nimport {\n  RouteRef,\n  SubRouteRef,\n  ExternalRouteRef,\n  createRouteRef,\n  createSubRouteRef,\n  createExternalRouteRef,\n} from '@backstage/frontend-plugin-api';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalRouteRef } from '../../frontend-plugin-api/src/routing/RouteRef';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalSubRouteRef } from '../../frontend-plugin-api/src/routing/SubRouteRef';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExternalRouteRef } from '../../frontend-plugin-api/src/routing/ExternalRouteRef';\n\n/**\n * Converts a legacy route ref type to the new system.\n *\n * @public\n */\nexport type ToNewRouteRef<\n  T extends LegacyRouteRef | LegacySubRouteRef | LegacyExternalRouteRef,\n> = T extends LegacyRouteRef<infer IParams>\n  ? RouteRef<IParams>\n  : T extends LegacySubRouteRef<infer IParams>\n  ? SubRouteRef<IParams>\n  : T extends LegacyExternalRouteRef<infer IParams>\n  ? ExternalRouteRef<IParams>\n  : never;\n\n/**\n * Converts a collection of legacy route refs to the new system.\n * This is particularly useful when defining plugin `routes` and `externalRoutes`.\n *\n * @public\n */\nexport function convertLegacyRouteRefs<\n  TRefs extends {\n    [name in string]:\n      | LegacyRouteRef\n      | LegacySubRouteRef\n      | LegacyExternalRouteRef;\n  },\n>(refs: TRefs): { [KName in keyof TRefs]: ToNewRouteRef<TRefs[KName]> } {\n  return Object.fromEntries(\n    Object.entries(refs).map(([name, ref]) => [\n      name,\n      convertLegacyRouteRef(ref as LegacyRouteRef),\n    ]),\n  ) as { [KName in keyof TRefs]: ToNewRouteRef<TRefs[KName]> };\n}\n\n/**\n * A temporary helper to convert a legacy route ref to the new system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(\n  ref: LegacyRouteRef<TParams>,\n): RouteRef<TParams>;\n\n/**\n * A temporary helper to convert a legacy sub route ref to the new system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createSubRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(\n  ref: LegacySubRouteRef<TParams>,\n): SubRouteRef<TParams>;\n\n/**\n * A temporary helper to convert a legacy external route ref to the new system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createExternalRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(\n  ref: LegacyExternalRouteRef<TParams>,\n): ExternalRouteRef<TParams>;\n\n/**\n * A temporary helper to convert a new route ref to the legacy system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(\n  ref: RouteRef<TParams>,\n): LegacyRouteRef<TParams>;\n\n/**\n * A temporary helper to convert a new sub route ref to the legacy system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createSubRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(\n  ref: SubRouteRef<TParams>,\n): LegacySubRouteRef<TParams>;\n\n/**\n * A temporary helper to convert a new external route ref to the legacy system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createExternalRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(\n  ref: ExternalRouteRef<TParams>,\n): LegacyExternalRouteRef<TParams, true>;\nexport function convertLegacyRouteRef(\n  ref:\n    | LegacyRouteRef\n    | LegacySubRouteRef\n    | LegacyExternalRouteRef\n    | RouteRef\n    | SubRouteRef\n    | ExternalRouteRef,\n):\n  | RouteRef\n  | SubRouteRef\n  | ExternalRouteRef\n  | LegacyRouteRef\n  | LegacySubRouteRef\n  | LegacyExternalRouteRef {\n  const isNew = '$$type' in ref;\n  const oldType = (ref as unknown as { [routeRefType]: unknown })[routeRefType];\n\n  // Ref has already been converted\n  if (isNew && oldType) {\n    return ref as any;\n  }\n\n  if (isNew) {\n    return convertNewToOld(\n      ref as unknown as RouteRef | SubRouteRef | ExternalRouteRef,\n    );\n  }\n\n  return convertOldToNew(ref, oldType);\n}\n\nfunction convertNewToOld(\n  ref: RouteRef | SubRouteRef | ExternalRouteRef,\n): LegacyRouteRef | LegacySubRouteRef | LegacyExternalRouteRef {\n  if (ref.$$type === '@backstage/RouteRef') {\n    const newRef = toInternalRouteRef(ref);\n    return Object.assign(ref, {\n      [routeRefType]: 'absolute',\n      params: newRef.getParams(),\n      title: newRef.getDescription(),\n    } as Omit<LegacyRouteRef, '$$routeRefType'>) as unknown as LegacyRouteRef;\n  }\n  if (ref.$$type === '@backstage/SubRouteRef') {\n    const newRef = toInternalSubRouteRef(ref);\n    return Object.assign(ref, {\n      [routeRefType]: 'sub',\n      parent: convertLegacyRouteRef(newRef.getParent()),\n      params: newRef.getParams(),\n    } as Omit<LegacySubRouteRef, '$$routeRefType' | 'path'>) as unknown as LegacySubRouteRef;\n  }\n  if (ref.$$type === '@backstage/ExternalRouteRef') {\n    const newRef = toInternalExternalRouteRef(ref);\n    return Object.assign(ref, {\n      [routeRefType]: 'external',\n      optional: true,\n      params: newRef.getParams(),\n      defaultTarget: newRef.getDefaultTarget(),\n    } as Omit<LegacyExternalRouteRef, '$$routeRefType' | 'optional'>) as unknown as LegacyExternalRouteRef;\n  }\n\n  throw new Error(\n    `Failed to convert route ref, unknown type '${(ref as any).$$type}'`,\n  );\n}\n\nfunction convertOldToNew(\n  ref: LegacyRouteRef | LegacySubRouteRef | LegacyExternalRouteRef,\n  type: unknown,\n): RouteRef | SubRouteRef | ExternalRouteRef {\n  if (type === 'absolute') {\n    const legacyRef = ref as LegacyRouteRef;\n    const legacyRefStr = String(legacyRef);\n    const newRef = toInternalRouteRef(\n      createRouteRef<{ [key in string]: string }>({\n        params: legacyRef.params as string[],\n      }),\n    );\n    return Object.assign(legacyRef, {\n      $$type: '@backstage/RouteRef' as const,\n      version: 'v1',\n      T: newRef.T,\n      getParams() {\n        return newRef.getParams();\n      },\n      getDescription() {\n        return legacyRefStr;\n      },\n      setId(id: string) {\n        newRef.setId(id);\n      },\n      toString() {\n        return legacyRefStr;\n      },\n    });\n  }\n  if (type === 'sub') {\n    const legacyRef = ref as LegacySubRouteRef;\n    const legacyRefStr = String(legacyRef);\n    const newRef = toInternalSubRouteRef(\n      createSubRouteRef({\n        path: legacyRef.path,\n        parent: convertLegacyRouteRef(legacyRef.parent),\n      }),\n    );\n    return Object.assign(legacyRef, {\n      $$type: '@backstage/SubRouteRef' as const,\n      version: 'v1',\n      T: newRef.T,\n      getParams() {\n        return newRef.getParams();\n      },\n      getParent() {\n        return newRef.getParent();\n      },\n      getDescription() {\n        return legacyRefStr;\n      },\n      toString() {\n        return legacyRefStr;\n      },\n    });\n  }\n  if (type === 'external') {\n    const legacyRef = ref as LegacyExternalRouteRef;\n    const legacyRefStr = String(legacyRef);\n    const newRef = toInternalExternalRouteRef(\n      createExternalRouteRef<{ [key in string]: string }>({\n        params: legacyRef.params as string[],\n        defaultTarget:\n          'getDefaultTarget' in legacyRef\n            ? (legacyRef.getDefaultTarget as () => string | undefined)()\n            : undefined,\n      }),\n    );\n    return Object.assign(legacyRef, {\n      $$type: '@backstage/ExternalRouteRef' as const,\n      version: 'v1',\n      T: newRef.T,\n      getParams() {\n        return newRef.getParams();\n      },\n      getDescription() {\n        return legacyRefStr;\n      },\n      // This might already be implemented in the legacy ref, but we override it just to be sure\n      getDefaultTarget() {\n        return newRef.getDefaultTarget();\n      },\n      setId(id: string) {\n        newRef.setId(id);\n      },\n      toString() {\n        return legacyRefStr;\n      },\n    });\n  }\n\n  throw new Error(`Failed to convert legacy route ref, unknown type '${type}'`);\n}\n"],"names":[],"mappings":"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"}