{"version":3,"file":"plugin.cjs.js","sources":["../src/plugin.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { createRouter } from './service/router';\nimport { signalsServiceRef } from '@backstage/plugin-signals-node';\nimport {\n  NotificationProcessor,\n  NotificationRecipientResolver,\n  notificationsProcessingExtensionPoint,\n  NotificationsProcessingExtensionPoint,\n} from '@backstage/plugin-notifications-node';\nimport { catalogServiceRef } from '@backstage/plugin-catalog-node';\nimport { DatabaseNotificationsStore } from './database';\nimport { NotificationCleaner } from './service/NotificationCleaner.ts';\n\nclass NotificationsProcessingExtensionPointImpl\n  implements NotificationsProcessingExtensionPoint\n{\n  #processors = new Array<NotificationProcessor>();\n  #recipientResolver: NotificationRecipientResolver | undefined = undefined;\n\n  addProcessor(\n    ...processors: Array<NotificationProcessor | Array<NotificationProcessor>>\n  ): void {\n    this.#processors.push(...processors.flat());\n  }\n\n  get processors() {\n    return this.#processors;\n  }\n\n  setNotificationRecipientResolver(\n    resolver: NotificationRecipientResolver,\n  ): void {\n    if (this.#recipientResolver) {\n      throw new Error(\n        'Notification recipient resolver is already set. You can only set it once.',\n      );\n    }\n    this.#recipientResolver = resolver;\n  }\n\n  get recipientResolver() {\n    return this.#recipientResolver;\n  }\n}\n\n/**\n * Notifications backend plugin\n *\n * @public\n */\nexport const notificationsPlugin = createBackendPlugin({\n  pluginId: 'notifications',\n  register(env) {\n    const processingExtensions =\n      new NotificationsProcessingExtensionPointImpl();\n    env.registerExtensionPoint(\n      notificationsProcessingExtensionPoint,\n      processingExtensions,\n    );\n\n    env.registerInit({\n      deps: {\n        auth: coreServices.auth,\n        httpAuth: coreServices.httpAuth,\n        userInfo: coreServices.userInfo,\n        httpRouter: coreServices.httpRouter,\n        logger: coreServices.logger,\n        database: coreServices.database,\n        signals: signalsServiceRef,\n        config: coreServices.rootConfig,\n        catalog: catalogServiceRef,\n        scheduler: coreServices.scheduler,\n      },\n      async init({\n        auth,\n        httpAuth,\n        userInfo,\n        httpRouter,\n        logger,\n        database,\n        signals,\n        config,\n        catalog,\n        scheduler,\n      }) {\n        const store = await DatabaseNotificationsStore.create({ database });\n\n        httpRouter.use(\n          await createRouter({\n            auth,\n            httpAuth,\n            userInfo,\n            logger,\n            config,\n            store,\n            catalog,\n            signals,\n            processors: processingExtensions.processors,\n            recipientResolver: processingExtensions.recipientResolver,\n          }),\n        );\n        httpRouter.addAuthPolicy({\n          path: '/health',\n          allow: 'unauthenticated',\n        });\n\n        const cleaner = new NotificationCleaner(\n          config,\n          scheduler,\n          logger,\n          store,\n        );\n        await cleaner.initTaskRunner();\n      },\n    });\n  },\n});\n"],"names":["createBackendPlugin","notificationsProcessingExtensionPoint","coreServices","signalsServiceRef","catalogServiceRef","DatabaseNotificationsStore","createRouter","NotificationCleaner"],"mappings":";;;;;;;;;;AAgCA,MAAM,yCAAA,CAEN;AAAA,EACE,WAAA,GAAc,IAAI,KAAA,EAA6B;AAAA,EAC/C,kBAAA,GAAgE,MAAA;AAAA,EAEhE,gBACK,UAAA,EACG;AACN,IAAA,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,GAAG,UAAA,CAAW,MAAM,CAAA;AAAA,EAC5C;AAAA,EAEA,IAAI,UAAA,GAAa;AACf,IAAA,OAAO,IAAA,CAAK,WAAA;AAAA,EACd;AAAA,EAEA,iCACE,QAAA,EACM;AACN,IAAA,IAAI,KAAK,kBAAA,EAAoB;AAC3B,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA,IACF;AACA,IAAA,IAAA,CAAK,kBAAA,GAAqB,QAAA;AAAA,EAC5B;AAAA,EAEA,IAAI,iBAAA,GAAoB;AACtB,IAAA,OAAO,IAAA,CAAK,kBAAA;AAAA,EACd;AACF;AAOO,MAAM,sBAAsBA,oCAAA,CAAoB;AAAA,EACrD,QAAA,EAAU,eAAA;AAAA,EACV,SAAS,GAAA,EAAK;AACZ,IAAA,MAAM,oBAAA,GACJ,IAAI,yCAAA,EAA0C;AAChD,IAAA,GAAA,CAAI,sBAAA;AAAA,MACFC,6DAAA;AAAA,MACA;AAAA,KACF;AAEA,IAAA,GAAA,CAAI,YAAA,CAAa;AAAA,MACf,IAAA,EAAM;AAAA,QACJ,MAAMC,6BAAA,CAAa,IAAA;AAAA,QACnB,UAAUA,6BAAA,CAAa,QAAA;AAAA,QACvB,UAAUA,6BAAA,CAAa,QAAA;AAAA,QACvB,YAAYA,6BAAA,CAAa,UAAA;AAAA,QACzB,QAAQA,6BAAA,CAAa,MAAA;AAAA,QACrB,UAAUA,6BAAA,CAAa,QAAA;AAAA,QACvB,OAAA,EAASC,mCAAA;AAAA,QACT,QAAQD,6BAAA,CAAa,UAAA;AAAA,QACrB,OAAA,EAASE,mCAAA;AAAA,QACT,WAAWF,6BAAA,CAAa;AAAA,OAC1B;AAAA,MACA,MAAM,IAAA,CAAK;AAAA,QACT,IAAA;AAAA,QACA,QAAA;AAAA,QACA,QAAA;AAAA,QACA,UAAA;AAAA,QACA,MAAA;AAAA,QACA,QAAA;AAAA,QACA,OAAA;AAAA,QACA,MAAA;AAAA,QACA,OAAA;AAAA,QACA;AAAA,OACF,EAAG;AACD,QAAA,MAAM,QAAQ,MAAMG,qDAAA,CAA2B,MAAA,CAAO,EAAE,UAAU,CAAA;AAElE,QAAA,UAAA,CAAW,GAAA;AAAA,UACT,MAAMC,mBAAA,CAAa;AAAA,YACjB,IAAA;AAAA,YACA,QAAA;AAAA,YACA,QAAA;AAAA,YACA,MAAA;AAAA,YACA,MAAA;AAAA,YACA,KAAA;AAAA,YACA,OAAA;AAAA,YACA,OAAA;AAAA,YACA,YAAY,oBAAA,CAAqB,UAAA;AAAA,YACjC,mBAAmB,oBAAA,CAAqB;AAAA,WACzC;AAAA,SACH;AACA,QAAA,UAAA,CAAW,aAAA,CAAc;AAAA,UACvB,IAAA,EAAM,SAAA;AAAA,UACN,KAAA,EAAO;AAAA,SACR,CAAA;AAED,QAAA,MAAM,UAAU,IAAIC,uCAAA;AAAA,UAClB,MAAA;AAAA,UACA,SAAA;AAAA,UACA,MAAA;AAAA,UACA;AAAA,SACF;AACA,QAAA,MAAM,QAAQ,cAAA,EAAe;AAAA,MAC/B;AAAA,KACD,CAAA;AAAA,EACH;AACF,CAAC;;;;"}