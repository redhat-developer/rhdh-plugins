'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var router = require('./service/router.cjs.js');
var pluginSignalsNode = require('@backstage/plugin-signals-node');
var pluginNotificationsNode = require('@backstage/plugin-notifications-node');
var pluginCatalogNode = require('@backstage/plugin-catalog-node');
var DatabaseNotificationsStore = require('./database/DatabaseNotificationsStore.cjs.js');
var NotificationCleaner = require('./service/NotificationCleaner.cjs.js');

class NotificationsProcessingExtensionPointImpl {
  #processors = new Array();
  #recipientResolver = void 0;
  addProcessor(...processors) {
    this.#processors.push(...processors.flat());
  }
  get processors() {
    return this.#processors;
  }
  setNotificationRecipientResolver(resolver) {
    if (this.#recipientResolver) {
      throw new Error(
        "Notification recipient resolver is already set. You can only set it once."
      );
    }
    this.#recipientResolver = resolver;
  }
  get recipientResolver() {
    return this.#recipientResolver;
  }
}
const notificationsPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "notifications",
  register(env) {
    const processingExtensions = new NotificationsProcessingExtensionPointImpl();
    env.registerExtensionPoint(
      pluginNotificationsNode.notificationsProcessingExtensionPoint,
      processingExtensions
    );
    env.registerInit({
      deps: {
        auth: backendPluginApi.coreServices.auth,
        httpAuth: backendPluginApi.coreServices.httpAuth,
        userInfo: backendPluginApi.coreServices.userInfo,
        httpRouter: backendPluginApi.coreServices.httpRouter,
        logger: backendPluginApi.coreServices.logger,
        database: backendPluginApi.coreServices.database,
        signals: pluginSignalsNode.signalsServiceRef,
        config: backendPluginApi.coreServices.rootConfig,
        catalog: pluginCatalogNode.catalogServiceRef,
        scheduler: backendPluginApi.coreServices.scheduler
      },
      async init({
        auth,
        httpAuth,
        userInfo,
        httpRouter,
        logger,
        database,
        signals,
        config,
        catalog,
        scheduler
      }) {
        const store = await DatabaseNotificationsStore.DatabaseNotificationsStore.create({ database });
        httpRouter.use(
          await router.createRouter({
            auth,
            httpAuth,
            userInfo,
            logger,
            config,
            store,
            catalog,
            signals,
            processors: processingExtensions.processors,
            recipientResolver: processingExtensions.recipientResolver
          })
        );
        httpRouter.addAuthPolicy({
          path: "/health",
          allow: "unauthenticated"
        });
        const cleaner = new NotificationCleaner.NotificationCleaner(
          config,
          scheduler,
          logger,
          store
        );
        await cleaner.initTaskRunner();
      }
    });
  }
});

exports.notificationsPlugin = notificationsPlugin;
//# sourceMappingURL=plugin.cjs.js.map
