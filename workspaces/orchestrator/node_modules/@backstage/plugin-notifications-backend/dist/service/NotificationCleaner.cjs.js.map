{"version":3,"file":"NotificationCleaner.cjs.js","sources":["../../src/service/NotificationCleaner.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  LoggerService,\n  SchedulerService,\n  SchedulerServiceTaskScheduleDefinition,\n} from '@backstage/backend-plugin-api';\nimport { Config, readDurationFromConfig } from '@backstage/config';\nimport { NotificationsStore } from '../database';\nimport { HumanDuration } from '@backstage/types';\nimport { ForwardedError } from '@backstage/errors';\n\nexport class NotificationCleaner {\n  private readonly retention: HumanDuration = { years: 1 };\n  private readonly enabled: boolean = true;\n\n  constructor(\n    config: Config,\n    private readonly scheduler: SchedulerService,\n    private readonly logger: LoggerService,\n    private readonly database: NotificationsStore,\n  ) {\n    if (config.has('notifications.retention')) {\n      const retentionConfig = config.get('notifications.retention');\n      if (typeof retentionConfig === 'boolean' && !retentionConfig) {\n        logger.info(\n          'Notification retention is disabled, skipping notification cleaner task',\n        );\n        this.enabled = false;\n        return;\n      }\n      this.retention = readDurationFromConfig(config, {\n        key: 'notifications.retention',\n      });\n    }\n  }\n\n  async initTaskRunner() {\n    if (!this.enabled) {\n      return;\n    }\n\n    const schedule: SchedulerServiceTaskScheduleDefinition = {\n      frequency: { cron: '0 0 * * *' },\n      timeout: { hours: 1 },\n      initialDelay: { hours: 1 },\n      scope: 'global',\n    };\n\n    const taskRunner = this.scheduler.createScheduledTaskRunner(schedule);\n    await taskRunner.run({\n      id: 'notification-cleaner',\n      fn: async () => {\n        await this.clearNotifications(\n          this.logger,\n          this.database,\n          this.retention,\n        );\n      },\n    });\n  }\n\n  private async clearNotifications(\n    logger: LoggerService,\n    database: NotificationsStore,\n    retention: HumanDuration,\n  ) {\n    logger.info('Starting notification cleaner task');\n    try {\n      const result = await database.clearNotifications({ maxAge: retention });\n      logger.info(\n        `Notification cleaner task completed successfully, deleted ${result.deletedCount} notifications`,\n      );\n    } catch (error) {\n      throw new ForwardedError('Notification cleaner task failed', error);\n    }\n  }\n}\n"],"names":["config","readDurationFromConfig","ForwardedError"],"mappings":";;;;;AAyBO,MAAM,mBAAA,CAAoB;AAAA,EAI/B,WAAA,CACEA,QAAA,EACiB,SAAA,EACA,MAAA,EACA,QAAA,EACjB;AAHiB,IAAA,IAAA,CAAA,SAAA,GAAA,SAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,IAAA,CAAA,QAAA,GAAA,QAAA;AAEjB,IAAA,IAAIA,QAAA,CAAO,GAAA,CAAI,yBAAyB,CAAA,EAAG;AACzC,MAAA,MAAM,eAAA,GAAkBA,QAAA,CAAO,GAAA,CAAI,yBAAyB,CAAA;AAC5D,MAAA,IAAI,OAAO,eAAA,KAAoB,SAAA,IAAa,CAAC,eAAA,EAAiB;AAC5D,QAAA,MAAA,CAAO,IAAA;AAAA,UACL;AAAA,SACF;AACA,QAAA,IAAA,CAAK,OAAA,GAAU,KAAA;AACf,QAAA;AAAA,MACF;AACA,MAAA,IAAA,CAAK,SAAA,GAAYC,8BAAuBD,QAAA,EAAQ;AAAA,QAC9C,GAAA,EAAK;AAAA,OACN,CAAA;AAAA,IACH;AAAA,EACF;AAAA,EAtBiB,SAAA,GAA2B,EAAE,KAAA,EAAO,CAAA,EAAE;AAAA,EACtC,OAAA,GAAmB,IAAA;AAAA,EAuBpC,MAAM,cAAA,GAAiB;AACrB,IAAA,IAAI,CAAC,KAAK,OAAA,EAAS;AACjB,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,QAAA,GAAmD;AAAA,MACvD,SAAA,EAAW,EAAE,IAAA,EAAM,WAAA,EAAY;AAAA,MAC/B,OAAA,EAAS,EAAE,KAAA,EAAO,CAAA,EAAE;AAAA,MACpB,YAAA,EAAc,EAAE,KAAA,EAAO,CAAA,EAAE;AAAA,MACzB,KAAA,EAAO;AAAA,KACT;AAEA,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,SAAA,CAAU,yBAAA,CAA0B,QAAQ,CAAA;AACpE,IAAA,MAAM,WAAW,GAAA,CAAI;AAAA,MACnB,EAAA,EAAI,sBAAA;AAAA,MACJ,IAAI,YAAY;AACd,QAAA,MAAM,IAAA,CAAK,kBAAA;AAAA,UACT,IAAA,CAAK,MAAA;AAAA,UACL,IAAA,CAAK,QAAA;AAAA,UACL,IAAA,CAAK;AAAA,SACP;AAAA,MACF;AAAA,KACD,CAAA;AAAA,EACH;AAAA,EAEA,MAAc,kBAAA,CACZ,MAAA,EACA,QAAA,EACA,SAAA,EACA;AACA,IAAA,MAAA,CAAO,KAAK,oCAAoC,CAAA;AAChD,IAAA,IAAI;AACF,MAAA,MAAM,SAAS,MAAM,QAAA,CAAS,mBAAmB,EAAE,MAAA,EAAQ,WAAW,CAAA;AACtE,MAAA,MAAA,CAAO,IAAA;AAAA,QACL,CAAA,0DAAA,EAA6D,OAAO,YAAY,CAAA,cAAA;AAAA,OAClF;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,IAAIE,qBAAA,CAAe,kCAAA,EAAoC,KAAK,CAAA;AAAA,IACpE;AAAA,EACF;AACF;;;;"}