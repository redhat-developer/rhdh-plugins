{"version":3,"file":"parseEntityOrderFieldParams.cjs.js","sources":["../../src/service/parseEntityOrderFieldParams.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is based on the plugins/catalog-backend\n\nimport { InputError } from '@backstage/errors';\nimport { EntityOrder } from '../database';\n\n/**\n * Takes a single unknown parameter and makes sure that it's a single string or\n * an array of strings, and returns as an array.\n */\nexport function parseStringsParam(\n  param: unknown,\n  ctx: string,\n): string[] | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  const array = [param].flat();\n  if (array.some(p => typeof p !== 'string')) {\n    throw new InputError(`Invalid ${ctx}, not a string`);\n  }\n\n  return array as string[];\n}\n\nexport function parseEntityOrderFieldParams(\n  params: Record<string, unknown>,\n): EntityOrder[] | undefined {\n  const orderFieldStrings = parseStringsParam(params.orderField, 'orderField');\n  if (!orderFieldStrings) {\n    return undefined;\n  }\n\n  return orderFieldStrings.map(orderFieldString => {\n    const [field, order] = orderFieldString.split(',');\n\n    if (order !== undefined && !isOrder(order)) {\n      throw new InputError('Invalid order field order, must be asc or desc');\n    }\n    return { field, order };\n  });\n}\n\nexport function isOrder(order: string): order is 'asc' | 'desc' {\n  return ['asc', 'desc'].includes(order);\n}\n"],"names":["InputError"],"mappings":";;;;AAyBO,SAAS,iBAAA,CACd,OACA,GAAA,EACsB;AACtB,EAAA,IAAI,UAAU,MAAA,EAAW;AACvB,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,MAAM,KAAA,GAAQ,CAAC,KAAK,CAAA,CAAE,IAAA,EAAK;AAC3B,EAAA,IAAI,MAAM,IAAA,CAAK,CAAA,CAAA,KAAK,OAAO,CAAA,KAAM,QAAQ,CAAA,EAAG;AAC1C,IAAA,MAAM,IAAIA,iBAAA,CAAW,CAAA,QAAA,EAAW,GAAG,CAAA,cAAA,CAAgB,CAAA;AAAA,EACrD;AAEA,EAAA,OAAO,KAAA;AACT;AAEO,SAAS,4BACd,MAAA,EAC2B;AAC3B,EAAA,MAAM,iBAAA,GAAoB,iBAAA,CAAkB,MAAA,CAAO,UAAA,EAAY,YAAY,CAAA;AAC3E,EAAA,IAAI,CAAC,iBAAA,EAAmB;AACtB,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,OAAO,iBAAA,CAAkB,IAAI,CAAA,gBAAA,KAAoB;AAC/C,IAAA,MAAM,CAAC,KAAA,EAAO,KAAK,CAAA,GAAI,gBAAA,CAAiB,MAAM,GAAG,CAAA;AAEjD,IAAA,IAAI,KAAA,KAAU,MAAA,IAAa,CAAC,OAAA,CAAQ,KAAK,CAAA,EAAG;AAC1C,MAAA,MAAM,IAAIA,kBAAW,gDAAgD,CAAA;AAAA,IACvE;AACA,IAAA,OAAO,EAAE,OAAO,KAAA,EAAM;AAAA,EACxB,CAAC,CAAA;AACH;AAEO,SAAS,QAAQ,KAAA,EAAwC;AAC9D,EAAA,OAAO,CAAC,KAAA,EAAO,MAAM,CAAA,CAAE,SAAS,KAAK,CAAA;AACvC;;;;;;"}