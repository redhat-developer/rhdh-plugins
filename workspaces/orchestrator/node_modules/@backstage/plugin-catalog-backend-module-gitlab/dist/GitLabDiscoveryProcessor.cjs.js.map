{"version":3,"file":"GitLabDiscoveryProcessor.cjs.js","sources":["../src/GitLabDiscoveryProcessor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { GitLabClient, GitLabProject, paginated } from './lib';\nimport { CacheService, LoggerService } from '@backstage/backend-plugin-api';\nimport { CacheManager } from '@backstage/backend-defaults/cache';\n\n/**\n * Extracts repositories out of an GitLab instance.\n * @public\n */\nexport class GitLabDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: LoggerService;\n  private readonly cache: CacheService;\n  private readonly skipReposWithoutExactFileMatch: boolean;\n  private readonly skipForkedRepos: boolean;\n  private readonly includeArchivedRepos: boolean;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: LoggerService;\n      skipReposWithoutExactFileMatch?: boolean;\n      skipForkedRepos?: boolean;\n      includeArchivedRepos?: boolean;\n    },\n  ): GitLabDiscoveryProcessor {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const pluginCache =\n      CacheManager.fromConfig(config).forPlugin('gitlab-discovery');\n\n    return new GitLabDiscoveryProcessor({\n      ...options,\n      integrations,\n      pluginCache,\n    });\n  }\n\n  private constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    pluginCache: CacheService;\n    logger: LoggerService;\n    skipReposWithoutExactFileMatch?: boolean;\n    skipForkedRepos?: boolean;\n    includeArchivedRepos?: boolean;\n  }) {\n    this.integrations = options.integrations;\n    this.cache = options.pluginCache;\n    this.logger = options.logger;\n    this.skipReposWithoutExactFileMatch =\n      options.skipReposWithoutExactFileMatch || false;\n    this.skipForkedRepos = options.skipForkedRepos || false;\n    this.includeArchivedRepos = options.includeArchivedRepos || false;\n  }\n\n  getProcessorName(): string {\n    return 'GitLabDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'gitlab-discovery') {\n      return false;\n    }\n\n    const startTime = new Date();\n    const { group, host, branch, catalogPath } = parseUrl(location.target);\n\n    const integration = this.integrations.gitlab.byUrl(`https://${host}`);\n    if (!integration) {\n      throw new Error(\n        `There is no GitLab integration that matches ${host}. Please add a configuration entry for it under integrations.gitlab`,\n      );\n    }\n\n    const client = new GitLabClient({\n      config: integration.config,\n      logger: this.logger,\n    });\n    this.logger.debug(`Reading GitLab projects from ${location.target}`);\n\n    const lastActivity = (await this.cache.get(this.getCacheKey())) as string;\n    const opts = {\n      group,\n      page: 1,\n      // We check for the existence of lastActivity and only set it if it's present to ensure\n      // that the options doesn't include the key so that the API doesn't receive an empty query parameter.\n      ...(lastActivity && { last_activity_after: lastActivity }),\n      ...(!this.includeArchivedRepos && { archived: false }),\n      // Only use simple=true when we don't need to skip forked repos.\n      // The simple=true parameter reduces response size by returning fewer fields,\n      // but it excludes the 'forked_from_project' field which is required for fork detection.\n      // Therefore, we can only optimize with simple=true when skipForkedRepos is false.\n      ...(!this.skipForkedRepos && { simple: true }),\n    };\n\n    const projects = paginated(options => client.listProjects(options), opts);\n\n    const res: Result = {\n      scanned: 0,\n      matches: [],\n    };\n    for await (const project of projects) {\n      res.scanned++;\n\n      if (branch === '*' && project.default_branch === undefined) {\n        continue;\n      }\n\n      if (this.skipReposWithoutExactFileMatch) {\n        const project_branch = branch === '*' ? project.default_branch : branch;\n\n        const projectHasFile: boolean = await client.hasFile(\n          project.path_with_namespace,\n          project_branch,\n          catalogPath,\n        );\n\n        if (!projectHasFile) {\n          continue;\n        }\n      }\n\n      if (\n        this.skipForkedRepos &&\n        project.hasOwnProperty('forked_from_project')\n      ) {\n        continue;\n      }\n\n      res.matches.push(project);\n    }\n\n    for (const project of res.matches) {\n      const project_branch = branch === '*' ? project.default_branch : branch;\n\n      emit(\n        processingResult.location({\n          type: 'url',\n          // The format expected by the GitLabUrlReader:\n          // https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n          //\n          // This unfortunately will trigger another API call in `getGitLabFileFetchUrl` to get the project ID.\n          // The alternative is using the `buildRawUrl` function, which does not support subgroups, so providing a raw\n          // URL here won't work either.\n          target: `${project.web_url}/-/blob/${project_branch}/${catalogPath}`,\n          presence: 'optional',\n        }),\n      );\n    }\n\n    // Save an ISO formatted string in the cache as that's what GitLab expects in the API request.\n    await this.cache.set(this.getCacheKey(), startTime.toISOString());\n\n    const duration = ((Date.now() - startTime.getTime()) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${res.scanned} GitLab repositories in ${duration} seconds`,\n    );\n\n    return true;\n  }\n\n  private getCacheKey(): string {\n    return `processors/${this.getProcessorName()}/last-activity`;\n  }\n}\n\ntype Result = {\n  scanned: number;\n  matches: GitLabProject[];\n};\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  group?: string;\n  host: string;\n  branch: string;\n  catalogPath: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.slice(1).split('/');\n\n  // (/group/subgroup)/blob/branch|*/filepath\n  const blobIndex = path.findIndex(p => p === 'blob');\n  if (blobIndex !== -1 && path.length > blobIndex + 2) {\n    const group =\n      blobIndex > 0 ? path.slice(0, blobIndex).join('/') : undefined;\n\n    return {\n      group,\n      host: url.host,\n      branch: decodeURIComponent(path[blobIndex + 1]),\n      catalogPath: decodeURIComponent(path.slice(blobIndex + 2).join('/')),\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n"],"names":["ScmIntegrations","CacheManager","client","GitLabClient","paginated","processingResult"],"mappings":"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"}