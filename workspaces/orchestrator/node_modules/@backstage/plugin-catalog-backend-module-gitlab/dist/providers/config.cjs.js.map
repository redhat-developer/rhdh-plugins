{"version":3,"file":"config.cjs.js","sources":["../../src/providers/config.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readSchedulerServiceTaskScheduleDefinitionFromConfig } from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport { GitlabProviderConfig } from '../lib';\n\n/**\n * Extracts the gitlab config from a config object\n *\n * @public\n *\n * @param id - The provider key\n * @param config - The config object to extract from\n */\nfunction readGitlabConfig(id: string, config: Config): GitlabProviderConfig {\n  const group = config.getOptionalString('group') ?? '';\n  const host = config.getString('host');\n  const branch = config.getOptionalString('branch');\n  const fallbackBranch = config.getOptionalString('fallbackBranch') ?? 'master';\n  const catalogFile =\n    config.getOptionalString('entityFilename') ?? 'catalog-info.yaml';\n  const projectPattern = new RegExp(\n    config.getOptionalString('projectPattern') ?? /[\\s\\S]*/,\n  );\n  const userPattern = new RegExp(\n    config.getOptionalString('userPattern') ?? /[\\s\\S]*/,\n  );\n\n  const configValue = config.getOptional('groupPattern');\n  let groupPattern;\n\n  if ((configValue && typeof configValue === 'string') || !configValue) {\n    groupPattern = new RegExp(\n      config.getOptionalString('groupPattern') ?? /[\\s\\S]*/,\n    );\n  } else if (configValue && Array.isArray(configValue)) {\n    const configPattern = config.getOptionalStringArray('groupPattern') ?? [];\n    groupPattern = configPattern.map(pattern => new RegExp(pattern));\n  } else {\n    groupPattern = new RegExp(/[\\s\\S]*/);\n  }\n\n  const orgEnabled: boolean = config.getOptionalBoolean('orgEnabled') ?? false;\n  const allowInherited: boolean =\n    config.getOptionalBoolean('allowInherited') ?? false;\n  const relations: string[] = config.getOptionalStringArray('relations') ?? [];\n\n  const skipForkedRepos: boolean =\n    config.getOptionalBoolean('skipForkedRepos') ?? false;\n\n  const includeArchivedRepos: boolean =\n    config.getOptionalBoolean('includeArchivedRepos') ?? false;\n  const excludeRepos: string[] =\n    config.getOptionalStringArray('excludeRepos') ?? [];\n\n  const schedule = config.has('schedule')\n    ? readSchedulerServiceTaskScheduleDefinitionFromConfig(\n        config.getConfig('schedule'),\n      )\n    : undefined;\n  const restrictUsersToGroup =\n    config.getOptionalBoolean('restrictUsersToGroup') ?? false;\n\n  const includeUsersWithoutSeat =\n    config.getOptionalBoolean('includeUsersWithoutSeat') ?? false;\n\n  const membership = config.getOptionalBoolean('membership');\n\n  const topicsArray = config.getOptionalStringArray('topics');\n  const topics = topicsArray?.length ? topicsArray.join(',') : undefined;\n\n  return {\n    id,\n    group,\n    branch,\n    fallbackBranch,\n    host,\n    catalogFile,\n    projectPattern,\n    userPattern,\n    groupPattern,\n    schedule,\n    orgEnabled,\n    allowInherited,\n    relations,\n    skipForkedRepos,\n    includeArchivedRepos,\n    excludeRepos,\n    restrictUsersToGroup,\n    includeUsersWithoutSeat,\n    membership,\n    topics,\n  };\n}\n\n/**\n * Extracts the gitlab config from a config object array\n *\n * @public\n *\n * @param config - The config object to extract from\n */\nexport function readGitlabConfigs(config: Config): GitlabProviderConfig[] {\n  const configs: GitlabProviderConfig[] = [];\n\n  const providerConfigs = config.getOptionalConfig('catalog.providers.gitlab');\n\n  if (!providerConfigs) {\n    return configs;\n  }\n\n  for (const id of providerConfigs.keys()) {\n    configs.push(readGitlabConfig(id, providerConfigs.getConfig(id)));\n  }\n\n  return configs;\n}\n"],"names":["readSchedulerServiceTaskScheduleDefinitionFromConfig"],"mappings":"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"}