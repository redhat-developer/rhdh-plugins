{"version":3,"file":"GitlabOrgDiscoveryEntityProvider.cjs.js","sources":["../../src/providers/GitlabOrgDiscoveryEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  LoggerService,\n  SchedulerService,\n  SchedulerServiceTaskRunner,\n} from '@backstage/backend-plugin-api';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { GitLabIntegration, ScmIntegrations } from '@backstage/integration';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { EventsService } from '@backstage/plugin-events-node';\nimport { merge } from 'lodash';\nimport * as uuid from 'uuid';\n\nimport {\n  GitLabClient,\n  GitlabProviderConfig,\n  paginated,\n  readGitlabConfigs,\n} from '../lib';\nimport {\n  defaultGroupEntitiesTransformer,\n  defaultGroupNameTransformer,\n  defaultUserTransformer,\n} from '../lib/defaultTransformers';\nimport {\n  GitLabGroup,\n  GitLabUser,\n  GroupTransformer as GroupEntitiesTransformer,\n  GroupNameTransformer,\n  PagedResponse,\n  SystemHookBaseGroupEventsSchema,\n  SystemHookBaseMembershipEventsSchema,\n  SystemHookBaseUserEventsSchema,\n  UserTransformer,\n} from '../lib/types';\n\ntype UserResult = {\n  scanned: number;\n  matches: GitLabUser[];\n};\n\ntype GroupResult = {\n  scanned: number;\n  matches: GitLabGroup[];\n};\n\ntype SystemHookGroupCreateOrDestroyEventSchema =\n  SystemHookBaseGroupEventsSchema & {\n    event_name: 'group_create' | 'group_destroy';\n  };\n\ntype SystemHookGroupRenameEventSchema = SystemHookBaseGroupEventsSchema & {\n  event_name: 'group_rename';\n  old_path: string;\n  old_full_path: string;\n};\n\ntype SystemHookUserCreateOrDestroyEventSchema =\n  SystemHookBaseUserEventsSchema & {\n    event_name: 'user_create' | 'user_destroy';\n  };\n\ntype SystemHookCreateOrDestroyMembershipEventsSchema =\n  SystemHookBaseMembershipEventsSchema & {\n    event_name: 'user_add_to_group' | 'user_remove_from_group';\n  };\n\n// System level events\nconst TOPIC_GROUP_CREATE = 'gitlab.group_create';\nconst TOPIC_GROUP_DESTROY = 'gitlab.group_destroy';\nconst TOPIC_GROUP_RENAME = 'gitlab.group_rename';\nconst TOPIC_USER_CREATE = 'gitlab.user_create';\nconst TOPIC_USER_DESTROY = 'gitlab.user_destroy';\nconst TOPIC_USER_ADD_GROUP = 'gitlab.user_add_to_group';\nconst TOPIC_USER_REMOVE_GROUP = 'gitlab.user_remove_from_group';\n\n/**\n * Discovers users and groups from a Gitlab instance.\n * @public\n */\nexport class GitlabOrgDiscoveryEntityProvider implements EntityProvider {\n  private readonly config: GitlabProviderConfig;\n  private readonly integration: GitLabIntegration;\n  private readonly logger: LoggerService;\n  private readonly events?: EventsService;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n  private userTransformer: UserTransformer;\n  private groupEntitiesTransformer: GroupEntitiesTransformer;\n  private groupNameTransformer: GroupNameTransformer;\n  private readonly gitLabClient: GitLabClient;\n  private readonly groupPatterns: RegExp[];\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: LoggerService;\n      events?: EventsService;\n      schedule?: SchedulerServiceTaskRunner;\n      scheduler?: SchedulerService;\n      userTransformer?: UserTransformer;\n      groupEntitiesTransformer?: GroupEntitiesTransformer;\n      groupNameTransformer?: GroupNameTransformer;\n    },\n  ): GitlabOrgDiscoveryEntityProvider[] {\n    if (!options.schedule && !options.scheduler) {\n      throw new Error('Either schedule or scheduler must be provided.');\n    }\n\n    const providerConfigs = readGitlabConfigs(config);\n    const integrations = ScmIntegrations.fromConfig(config).gitlab;\n    const providers: GitlabOrgDiscoveryEntityProvider[] = [];\n\n    providerConfigs.forEach(providerConfig => {\n      const integration = integrations.byHost(providerConfig.host);\n\n      if (!providerConfig.orgEnabled) {\n        options.logger.info(`Org not enabled for ${providerConfig.id}.`);\n        return;\n      }\n\n      if (!integration) {\n        throw new Error(\n          `No gitlab integration found that matches host ${providerConfig.host}`,\n        );\n      }\n\n      if (!providerConfig.group && providerConfig.host === 'gitlab.com') {\n        throw new Error(\n          `Missing 'group' value for GitlabOrgDiscoveryEntityProvider:${providerConfig.id}.`,\n        );\n      }\n\n      if (!options.schedule && !providerConfig.schedule) {\n        throw new Error(\n          `No schedule provided neither via code nor config for GitlabOrgDiscoveryEntityProvider:${providerConfig.id}.`,\n        );\n      }\n\n      const taskRunner =\n        options.schedule ??\n        options.scheduler!.createScheduledTaskRunner(providerConfig.schedule!);\n\n      providers.push(\n        new GitlabOrgDiscoveryEntityProvider({\n          ...options,\n          config: providerConfig,\n          integration,\n          taskRunner,\n        }),\n      );\n    });\n    return providers;\n  }\n\n  private constructor(options: {\n    config: GitlabProviderConfig;\n    integration: GitLabIntegration;\n    logger: LoggerService;\n    events?: EventsService;\n    taskRunner: SchedulerServiceTaskRunner;\n    userTransformer?: UserTransformer;\n    groupEntitiesTransformer?: GroupEntitiesTransformer;\n    groupNameTransformer?: GroupNameTransformer;\n  }) {\n    this.config = options.config;\n    this.integration = options.integration;\n    this.logger = options.logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(options.taskRunner);\n    this.events = options.events;\n\n    this.userTransformer = options.userTransformer ?? defaultUserTransformer;\n    this.groupEntitiesTransformer =\n      options.groupEntitiesTransformer ?? defaultGroupEntitiesTransformer;\n    this.groupNameTransformer =\n      options.groupNameTransformer ?? defaultGroupNameTransformer;\n\n    this.groupPatterns = Array.isArray(this.config.groupPattern)\n      ? this.config.groupPattern\n      : [this.config.groupPattern];\n\n    this.gitLabClient = new GitLabClient({\n      config: this.integration.config,\n      logger: this.logger,\n    });\n  }\n\n  getProviderName(): string {\n    return `GitlabOrgDiscoveryEntityProvider:${this.config.id}`;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    await this.scheduleFn();\n\n    // Specifies which topics will be listened to.\n    // The topics from the original GitLab events contain only the string 'gitlab'. These are caught by the GitlabEventRouter Module, who republishes them with a more specific topic 'gitlab.<event_name>'\n    if (this.events) {\n      await this.events.subscribe({\n        id: this.getProviderName(),\n        topics: [\n          TOPIC_GROUP_CREATE,\n          TOPIC_GROUP_DESTROY,\n          TOPIC_GROUP_RENAME,\n          TOPIC_USER_CREATE,\n          TOPIC_USER_DESTROY,\n          TOPIC_USER_ADD_GROUP,\n          TOPIC_USER_REMOVE_GROUP,\n        ],\n        onEvent: async params => {\n          this.logger.info(`Received event from topic ${params.topic}`);\n\n          const addEntitiesOperation = (entities: Entity[]) => ({\n            removed: [],\n            added: entities.map(entity => ({\n              locationKey: this.getProviderName(),\n              entity: this.withLocations(\n                this.integration.config.host,\n                this.integration.config.baseUrl,\n                entity,\n              ),\n            })),\n          });\n\n          const removeEntitiesOperation = (entities: Entity[]) => ({\n            added: [],\n            removed: entities.map(entity => ({\n              locationKey: this.getProviderName(),\n              entity: this.withLocations(\n                this.integration.config.host,\n                this.integration.config.baseUrl,\n                entity,\n              ),\n            })),\n          });\n\n          const replaceEntitiesOperation = (entities: Entity[]) => {\n            const entitiesToReplace = entities.map(entity => ({\n              locationKey: this.getProviderName(),\n              entity: this.withLocations(\n                this.integration.config.host,\n                this.integration.config.baseUrl,\n                entity,\n              ),\n            }));\n\n            return {\n              removed: entitiesToReplace,\n              added: entitiesToReplace,\n            };\n          };\n\n          // handle group change events\n          if (\n            params.topic === TOPIC_GROUP_CREATE ||\n            params.topic === TOPIC_GROUP_DESTROY\n          ) {\n            const payload: SystemHookGroupCreateOrDestroyEventSchema =\n              params.eventPayload as SystemHookGroupCreateOrDestroyEventSchema;\n\n            const createDeltaOperation =\n              params.topic === TOPIC_GROUP_CREATE\n                ? addEntitiesOperation\n                : removeEntitiesOperation;\n\n            await this.onGroupChange(payload, createDeltaOperation);\n          }\n          if (params.topic === TOPIC_GROUP_RENAME) {\n            const payload: SystemHookGroupRenameEventSchema =\n              params.eventPayload as SystemHookGroupRenameEventSchema;\n\n            await this.onGroupEdit(payload, replaceEntitiesOperation);\n          }\n\n          // handle user change events\n          if (\n            params.topic === TOPIC_USER_CREATE ||\n            params.topic === TOPIC_USER_DESTROY\n          ) {\n            const payload: SystemHookUserCreateOrDestroyEventSchema =\n              params.eventPayload as SystemHookUserCreateOrDestroyEventSchema;\n\n            const createDeltaOperation =\n              params.topic === TOPIC_USER_CREATE\n                ? addEntitiesOperation\n                : removeEntitiesOperation;\n\n            await this.onUserChange(payload, createDeltaOperation);\n          }\n\n          // handle user membership changes\n          if (\n            params.topic === TOPIC_USER_ADD_GROUP ||\n            params.topic === TOPIC_USER_REMOVE_GROUP\n          ) {\n            const payload: SystemHookCreateOrDestroyMembershipEventsSchema =\n              params.eventPayload as SystemHookCreateOrDestroyMembershipEventsSchema;\n\n            const createDeltaOperation = addEntitiesOperation;\n\n            await this.onMembershipChange(payload, createDeltaOperation);\n          }\n        },\n      });\n    }\n  }\n\n  private createScheduleFn(\n    taskRunner: SchedulerServiceTaskRunner,\n  ): () => Promise<void> {\n    return async () => {\n      const taskId = `${this.getProviderName()}:refresh`;\n      return taskRunner.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: GitlabOrgDiscoveryEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n\n  private async refresh(logger: LoggerService): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n\n    let groups;\n    const allUsers = [];\n\n    // Self-hosted: Fetch the users either from the defined group (restrictUsersToGroup) or fetch all users from the GitLab instance\n    // SaaS: Fetch the users from the defined group (restrictUsersToGroup) or fetch all users from the root group.\n    if (this.gitLabClient.isSelfManaged() && this.config.restrictUsersToGroup) {\n      groups = (await this.gitLabClient.listDescendantGroups(this.config.group))\n        .items;\n      groups.push(await this.gitLabClient.getGroupByPath(this.config.group)); // adds the parent group for #26554\n      allUsers.push(\n        paginated<GitLabUser>(\n          options =>\n            this.gitLabClient.listGroupMembers(this.config.group, options), // calls /groups/<groupId>/members\n          {\n            page: 1,\n            per_page: 100,\n          },\n        ),\n      );\n    } else if (\n      this.gitLabClient.isSelfManaged() &&\n      !this.config.restrictUsersToGroup\n    ) {\n      groups = paginated<GitLabGroup>(\n        options => this.gitLabClient.listGroups(options),\n        {\n          page: 1,\n          per_page: 100,\n          all_available: true,\n        },\n      );\n      allUsers.push(\n        paginated<GitLabUser>(\n          options => this.gitLabClient.listUsers(options), // calls /users?\n          { page: 1, per_page: 100, active: true },\n        ),\n      );\n    }\n    // SaaS: Fetch the users from the defined group (restrictUsersToGroup) or fetch all users from the root group.\n    else {\n      const descendantGroups = (\n        await this.gitLabClient.listDescendantGroups(this.config.group)\n      ).items;\n      groups = descendantGroups;\n\n      groups.push(await this.gitLabClient.getGroupByPath(this.config.group)); // adds the parent group for #26554\n\n      const rootGroupSplit = this.config.group.split('/');\n\n      const groupPaths = this.config.restrictUsersToGroup\n        ? [this.config.group]\n        : [rootGroupSplit[0], ...descendantGroups.map(g => `${g.id}`)];\n\n      // Fetch users group and descendant groups\n      for (const group of groupPaths) {\n        logger.debug(`Fetching users for group: ${group}`);\n        allUsers.push(\n          paginated<GitLabUser>(\n            options =>\n              this.gitLabClient.listSaaSUsers(\n                group,\n                options,\n                this.config.includeUsersWithoutSeat,\n              ),\n            {\n              page: 1,\n              per_page: 100,\n            },\n          ),\n        );\n      }\n    }\n\n    const idMappedUser: { [userId: number]: GitLabUser } = {};\n\n    const userRes: UserResult = {\n      scanned: 0,\n      matches: [],\n    };\n\n    const groupRes: GroupResult = {\n      scanned: 0,\n      matches: [],\n    };\n\n    for (const users of allUsers) {\n      // Iterate through paginated users\n      for await (const user of users) {\n        // Skip if user already processed and do not count it as scanned\n        if (user.id in idMappedUser) {\n          continue; // Skip if user already processed\n        }\n        userRes.scanned++;\n\n        if (!this.shouldProcessUser(user)) {\n          logger.debug(`Skipped user: ${user.username}`);\n          continue;\n        }\n\n        idMappedUser[user.id] = user;\n        userRes.matches.push(user);\n      }\n    }\n\n    for await (const group of groups) {\n      groupRes.scanned++;\n      if (!this.shouldProcessGroup(group)) {\n        logger.debug(`Skipped group: ${group.full_path}`);\n        continue;\n      }\n      logger.debug(`Processed group: ${group.full_path}`);\n\n      groupRes.matches.push(group);\n\n      let groupUsers: PagedResponse<GitLabUser> = { items: [] };\n      try {\n        const relations = this.getRelations(this.config);\n        groupUsers = await this.gitLabClient.getGroupMembers(\n          group.full_path,\n          relations,\n        );\n      } catch (e) {\n        logger.error(\n          `Failed fetching users for group '${group.full_path}': ${e}`,\n        );\n      }\n      for (const groupUser of groupUsers.items) {\n        const user = idMappedUser[groupUser.id];\n\n        if (user) {\n          user.groups = (user.groups ?? []).concat(group);\n        }\n      }\n    }\n\n    const groupsWithUsers = groupRes.matches.filter(group => {\n      return (\n        userRes.matches.filter(x => {\n          return !!x.groups?.find(y => y.id === group.id);\n        }).length > 0\n      );\n    });\n\n    const userEntities = userRes.matches.map(p =>\n      this.userTransformer({\n        user: p,\n        integrationConfig: this.integration.config,\n        providerConfig: this.config,\n        groupNameTransformer: this.groupNameTransformer,\n      }),\n    );\n\n    const groupEntities = this.groupEntitiesTransformer({\n      groups: groupsWithUsers,\n      providerConfig: this.config,\n      groupNameTransformer: this.groupNameTransformer,\n    });\n\n    logger.info(\n      `Scanned ${userRes.scanned} users and processed ${userEntities.length} users`,\n    );\n    logger.info(\n      `Scanned ${groupRes.scanned} groups and processed ${groupEntities.length} groups`,\n    );\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...userEntities, ...groupEntities].map(entity => ({\n        locationKey: this.getProviderName(),\n        entity: this.withLocations(\n          this.integration.config.host,\n          this.integration.config.baseUrl,\n          entity,\n        ),\n      })),\n    });\n  }\n  private async onGroupChange(\n    event: SystemHookGroupCreateOrDestroyEventSchema,\n    createDeltaOperation: (entities: Entity[]) => {\n      added: any[];\n      removed: any[];\n    },\n  ): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n\n    let group: GitLabGroup | undefined;\n    if (event.event_name === 'group_destroy') {\n      group = {\n        id: event.group_id,\n        full_path: event.full_path,\n        name: event.name,\n        description: '',\n        parent_id: 0,\n      };\n    } else {\n      group = await this.gitLabClient.getGroupById(event.group_id);\n    }\n\n    if (!this.shouldProcessGroup(group)) {\n      this.logger.debug(`Skipped group ${group.full_path}.`);\n      return;\n    }\n\n    // create the group entity\n    const groupEntity = this.groupEntitiesTransformer({\n      groups: [group],\n      providerConfig: this.config,\n      groupNameTransformer: this.groupNameTransformer,\n    });\n\n    // we need to fetch the parent group's object because its representation might be changed by the groupTransformer\n    if (group.parent_id) {\n      const parentGroup = await this.gitLabClient.getGroupById(group.parent_id);\n\n      groupEntity[0].spec.parent = this.groupNameTransformer({\n        group: parentGroup,\n        providerConfig: this.config,\n      });\n    }\n\n    this.logger.debug(`Applying mutation for group ${group.full_path}.`);\n    await this.connection.applyMutation({\n      type: 'delta',\n      ...createDeltaOperation(groupEntity),\n    });\n  }\n\n  // the goal here is to trigger a mutation to remove the old entity and add the new one.\n  private async onGroupEdit(\n    event: SystemHookGroupRenameEventSchema,\n    createDeltaOperation: (entities: Entity[]) => {\n      added: any[];\n      removed: any[];\n    },\n  ): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n\n    const groupToRemove: GitLabGroup = {\n      id: event.group_id,\n      full_path: event.old_full_path,\n      name: event.name,\n      description: '',\n      parent_id: 0,\n    };\n\n    if (!this.shouldProcessGroup(groupToRemove)) {\n      this.logger.debug(`Skipped group ${groupToRemove.full_path}.`);\n      return;\n    }\n\n    const groupEntityToRemove = await this.groupEntitiesTransformer({\n      groups: [groupToRemove],\n      providerConfig: this.config,\n      groupNameTransformer: this.groupNameTransformer,\n    });\n\n    const groupToAdd = await this.gitLabClient.getGroupById(event.group_id);\n\n    if (!this.shouldProcessGroup(groupToAdd)) {\n      this.logger.debug(`Skipped group ${groupToAdd.full_path}.`);\n      return;\n    }\n\n    const groupEntityToAdd = await this.groupEntitiesTransformer({\n      groups: [groupToAdd],\n      providerConfig: this.config,\n      groupNameTransformer: this.groupNameTransformer,\n    });\n\n    if (groupToAdd.parent_id) {\n      const parentGroup = await this.gitLabClient.getGroupById(\n        groupToAdd.parent_id,\n      );\n\n      groupEntityToAdd[0].spec.parent = this.groupNameTransformer({\n        group: parentGroup,\n        providerConfig: this.config,\n      });\n    }\n\n    const { added } = createDeltaOperation(groupEntityToAdd);\n    const { removed } = createDeltaOperation(groupEntityToRemove);\n\n    this.logger.debug(`Applying mutation for group ${groupToAdd.full_path}.`);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onUserChange(\n    event: SystemHookUserCreateOrDestroyEventSchema,\n    createDeltaOperation: (entities: Entity[]) => {\n      added: any[];\n      removed: any[];\n    },\n  ): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n\n    let user: GitLabUser | undefined = undefined;\n\n    // if user destroy event is received, retrieve user data from the event itself\n    if (event.event_name === 'user_destroy') {\n      user = {\n        id: event.user_id,\n        username: event.username,\n        email: event.email,\n        name: event.name,\n        state: 'active', // in the delete case it doesn't really matter if the user is active or not\n        web_url: '',\n        avatar_url: '',\n      };\n    }\n\n    // if user create event received fetch data from gitlab\n    if (event.event_name === 'user_create') {\n      user = await this.gitLabClient.getUserById(event.user_id);\n    }\n\n    if (!user) {\n      this.logger.debug(\n        `Couldn't retrieve user data. Skipped ${event.event_name} event processing for user ${event.username}`,\n      );\n      return;\n    }\n\n    if (!this.shouldProcessUser(user)) {\n      this.logger.debug(`Skipped user ${user.username}.`);\n      return;\n    }\n\n    const userEntity = await this.userTransformer({\n      user: user,\n      integrationConfig: this.integration.config,\n      providerConfig: this.config,\n      groupNameTransformer: this.groupNameTransformer,\n    });\n    const { added, removed } = createDeltaOperation([userEntity]);\n\n    this.logger.debug(`Applying mutation for user ${user.username}.`);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  // the goal here is to reconstruct the group either from which the user was removed or to which the user was added. Specifically, we add/remove the new user to/from the spec.member property array of the group entity. The Processor should take care of updating the relations\n  private async onMembershipChange(\n    event: SystemHookCreateOrDestroyMembershipEventsSchema,\n    createDeltaOperation: (entities: Entity[]) => {\n      added: any[];\n      removed: any[];\n    },\n  ): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n\n    // fetch group data from GitLab\n    const groupToRebuild: GitLabGroup = await this.gitLabClient.getGroupById(\n      event.group_id,\n    );\n\n    if (!groupToRebuild) {\n      this.logger.debug(\n        `Couldn't retrieve group data. Skipped ${event.event_name} event processing.`,\n      );\n      return;\n    }\n\n    // if the group is outside the scope there is no point creating anything related to it.\n    if (!this.shouldProcessGroup(groupToRebuild)) {\n      this.logger.debug(`Skipped group ${groupToRebuild.full_path}.`);\n      return;\n    }\n\n    const relations = this.getRelations(this.config);\n\n    // fetch group members from GitLab\n    const groupMembers = await this.gitLabClient.getGroupMembers(\n      groupToRebuild.full_path,\n      relations,\n    );\n    const usersToBeAdded = groupMembers.items;\n\n    const groupEntityToModify = await this.groupEntitiesTransformer({\n      groups: [groupToRebuild],\n      providerConfig: this.config,\n      groupNameTransformer: this.groupNameTransformer,\n    });\n\n    // we need to fetch the parent group's object because its representation might be changed by the groupTransformer\n    if (groupToRebuild.parent_id) {\n      const parentGroup = await this.gitLabClient.getGroupById(\n        groupToRebuild.parent_id,\n      );\n\n      // update parent of the group entity\n      groupEntityToModify[0].spec.parent = this.groupNameTransformer({\n        group: parentGroup,\n        providerConfig: this.config,\n      });\n    }\n\n    // update members of the group entity\n    groupEntityToModify[0].spec.members =\n      usersToBeAdded.length !== 0 ? usersToBeAdded.map(e => e.username) : [];\n\n    const { added, removed } = createDeltaOperation(groupEntityToModify);\n\n    this.logger.debug(\n      `Applying mutation for group ${groupToRebuild.full_path}.`,\n    );\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private shouldProcessGroup(group: GitLabGroup): boolean {\n    return (\n      this.groupPatterns.some(pattern => pattern.test(group.full_path)) &&\n      (!this.config.group ||\n        group.full_path.startsWith(`${this.config.group}/`) ||\n        group.full_path === this.config.group)\n    );\n  }\n\n  private shouldProcessUser(user: GitLabUser): boolean {\n    return (\n      this.config.userPattern.test(user.email ?? user.username ?? '') &&\n      user.state === 'active'\n    );\n  }\n\n  private withLocations(host: string, baseUrl: string, entity: Entity): Entity {\n    const location =\n      entity.kind === 'Group'\n        ? `url:${baseUrl}/${entity.metadata.annotations?.[`${host}/team-path`]}`\n        : `url:${baseUrl}/${entity.metadata.name}`;\n    return merge(\n      {\n        metadata: {\n          annotations: {\n            [ANNOTATION_LOCATION]: location,\n            [ANNOTATION_ORIGIN_LOCATION]: location,\n          },\n        },\n      },\n      entity,\n    ) as Entity;\n  }\n\n  private getRelations(config: any) {\n    if (Array.isArray(config.relations)) {\n      // filter out duplicates\n      const relationsSet = new Set(['DIRECT', ...config.relations]);\n      return Array.from(relationsSet);\n    }\n\n    // TODO: remove this fallback in the next major version by ensuring the method returns only `['DIRECT']` if no `relations` array is provided.\n    return ['DIRECT', ...(config.allowInherited ? ['INHERITED'] : [])];\n  }\n}\n"],"names":["config","readGitlabConfigs","ScmIntegrations","defaultUserTransformer","defaultGroupEntitiesTransformer","defaultGroupNameTransformer","GitLabClient","uuid","paginated","merge","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA,MAAM,kBAAA,GAAqB,qBAAA;AAC3B,MAAM,mBAAA,GAAsB,sBAAA;AAC5B,MAAM,kBAAA,GAAqB,qBAAA;AAC3B,MAAM,iBAAA,GAAoB,oBAAA;AAC1B,MAAM,kBAAA,GAAqB,qBAAA;AAC3B,MAAM,oBAAA,GAAuB,0BAAA;AAC7B,MAAM,uBAAA,GAA0B,+BAAA;AAMzB,MAAM,gCAAA,CAA2D;AAAA,EACrD,MAAA;AAAA,EACA,WAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,UAAA;AAAA,EACT,UAAA;AAAA,EACA,eAAA;AAAA,EACA,wBAAA;AAAA,EACA,oBAAA;AAAA,EACS,YAAA;AAAA,EACA,aAAA;AAAA,EAEjB,OAAO,UAAA,CACLA,QAAA,EACA,OAAA,EASoC;AACpC,IAAA,IAAI,CAAC,OAAA,CAAQ,QAAA,IAAY,CAAC,QAAQ,SAAA,EAAW;AAC3C,MAAA,MAAM,IAAI,MAAM,gDAAgD,CAAA;AAAA,IAClE;AAEA,IAAA,MAAM,eAAA,GAAkBC,yBAAkBD,QAAM,CAAA;AAChD,IAAA,MAAM,YAAA,GAAeE,2BAAA,CAAgB,UAAA,CAAWF,QAAM,CAAA,CAAE,MAAA;AACxD,IAAA,MAAM,YAAgD,EAAC;AAEvD,IAAA,eAAA,CAAgB,QAAQ,CAAA,cAAA,KAAkB;AACxC,MAAA,MAAM,WAAA,GAAc,YAAA,CAAa,MAAA,CAAO,cAAA,CAAe,IAAI,CAAA;AAE3D,MAAA,IAAI,CAAC,eAAe,UAAA,EAAY;AAC9B,QAAA,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,CAAA,oBAAA,EAAuB,cAAA,CAAe,EAAE,CAAA,CAAA,CAAG,CAAA;AAC/D,QAAA;AAAA,MACF;AAEA,MAAA,IAAI,CAAC,WAAA,EAAa;AAChB,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,8CAAA,EAAiD,eAAe,IAAI,CAAA;AAAA,SACtE;AAAA,MACF;AAEA,MAAA,IAAI,CAAC,cAAA,CAAe,KAAA,IAAS,cAAA,CAAe,SAAS,YAAA,EAAc;AACjE,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,2DAAA,EAA8D,eAAe,EAAE,CAAA,CAAA;AAAA,SACjF;AAAA,MACF;AAEA,MAAA,IAAI,CAAC,OAAA,CAAQ,QAAA,IAAY,CAAC,eAAe,QAAA,EAAU;AACjD,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,sFAAA,EAAyF,eAAe,EAAE,CAAA,CAAA;AAAA,SAC5G;AAAA,MACF;AAEA,MAAA,MAAM,aACJ,OAAA,CAAQ,QAAA,IACR,QAAQ,SAAA,CAAW,yBAAA,CAA0B,eAAe,QAAS,CAAA;AAEvE,MAAA,SAAA,CAAU,IAAA;AAAA,QACR,IAAI,gCAAA,CAAiC;AAAA,UACnC,GAAG,OAAA;AAAA,UACH,MAAA,EAAQ,cAAA;AAAA,UACR,WAAA;AAAA,UACA;AAAA,SACD;AAAA,OACH;AAAA,IACF,CAAC,CAAA;AACD,IAAA,OAAO,SAAA;AAAA,EACT;AAAA,EAEQ,YAAY,OAAA,EASjB;AACD,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,MAAA;AACtB,IAAA,IAAA,CAAK,cAAc,OAAA,CAAQ,WAAA;AAC3B,IAAA,IAAA,CAAK,MAAA,GAAS,OAAA,CAAQ,MAAA,CAAO,KAAA,CAAM;AAAA,MACjC,MAAA,EAAQ,KAAK,eAAA;AAAgB,KAC9B,CAAA;AACD,IAAA,IAAA,CAAK,UAAA,GAAa,IAAA,CAAK,gBAAA,CAAiB,OAAA,CAAQ,UAAU,CAAA;AAC1D,IAAA,IAAA,CAAK,SAAS,OAAA,CAAQ,MAAA;AAEtB,IAAA,IAAA,CAAK,eAAA,GAAkB,QAAQ,eAAA,IAAmBG,0CAAA;AAClD,IAAA,IAAA,CAAK,wBAAA,GACH,QAAQ,wBAAA,IAA4BC,mDAAA;AACtC,IAAA,IAAA,CAAK,oBAAA,GACH,QAAQ,oBAAA,IAAwBC,+CAAA;AAElC,IAAA,IAAA,CAAK,aAAA,GAAgB,KAAA,CAAM,OAAA,CAAQ,IAAA,CAAK,MAAA,CAAO,YAAY,CAAA,GACvD,IAAA,CAAK,MAAA,CAAO,YAAA,GACZ,CAAC,IAAA,CAAK,OAAO,YAAY,CAAA;AAE7B,IAAA,IAAA,CAAK,YAAA,GAAe,IAAIC,mBAAA,CAAa;AAAA,MACnC,MAAA,EAAQ,KAAK,WAAA,CAAY,MAAA;AAAA,MACzB,QAAQ,IAAA,CAAK;AAAA,KACd,CAAA;AAAA,EACH;AAAA,EAEA,eAAA,GAA0B;AACxB,IAAA,OAAO,CAAA,iCAAA,EAAoC,IAAA,CAAK,MAAA,CAAO,EAAE,CAAA,CAAA;AAAA,EAC3D;AAAA,EAEA,MAAM,QAAQ,UAAA,EAAqD;AACjE,IAAA,IAAA,CAAK,UAAA,GAAa,UAAA;AAClB,IAAA,MAAM,KAAK,UAAA,EAAW;AAItB,IAAA,IAAI,KAAK,MAAA,EAAQ;AACf,MAAA,MAAM,IAAA,CAAK,OAAO,SAAA,CAAU;AAAA,QAC1B,EAAA,EAAI,KAAK,eAAA,EAAgB;AAAA,QACzB,MAAA,EAAQ;AAAA,UACN,kBAAA;AAAA,UACA,mBAAA;AAAA,UACA,kBAAA;AAAA,UACA,iBAAA;AAAA,UACA,kBAAA;AAAA,UACA,oBAAA;AAAA,UACA;AAAA,SACF;AAAA,QACA,OAAA,EAAS,OAAM,MAAA,KAAU;AACvB,UAAA,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,CAAA,0BAAA,EAA6B,MAAA,CAAO,KAAK,CAAA,CAAE,CAAA;AAE5D,UAAA,MAAM,oBAAA,GAAuB,CAAC,QAAA,MAAwB;AAAA,YACpD,SAAS,EAAC;AAAA,YACV,KAAA,EAAO,QAAA,CAAS,GAAA,CAAI,CAAA,MAAA,MAAW;AAAA,cAC7B,WAAA,EAAa,KAAK,eAAA,EAAgB;AAAA,cAClC,QAAQ,IAAA,CAAK,aAAA;AAAA,gBACX,IAAA,CAAK,YAAY,MAAA,CAAO,IAAA;AAAA,gBACxB,IAAA,CAAK,YAAY,MAAA,CAAO,OAAA;AAAA,gBACxB;AAAA;AACF,aACF,CAAE;AAAA,WACJ,CAAA;AAEA,UAAA,MAAM,uBAAA,GAA0B,CAAC,QAAA,MAAwB;AAAA,YACvD,OAAO,EAAC;AAAA,YACR,OAAA,EAAS,QAAA,CAAS,GAAA,CAAI,CAAA,MAAA,MAAW;AAAA,cAC/B,WAAA,EAAa,KAAK,eAAA,EAAgB;AAAA,cAClC,QAAQ,IAAA,CAAK,aAAA;AAAA,gBACX,IAAA,CAAK,YAAY,MAAA,CAAO,IAAA;AAAA,gBACxB,IAAA,CAAK,YAAY,MAAA,CAAO,OAAA;AAAA,gBACxB;AAAA;AACF,aACF,CAAE;AAAA,WACJ,CAAA;AAEA,UAAA,MAAM,wBAAA,GAA2B,CAAC,QAAA,KAAuB;AACvD,YAAA,MAAM,iBAAA,GAAoB,QAAA,CAAS,GAAA,CAAI,CAAA,MAAA,MAAW;AAAA,cAChD,WAAA,EAAa,KAAK,eAAA,EAAgB;AAAA,cAClC,QAAQ,IAAA,CAAK,aAAA;AAAA,gBACX,IAAA,CAAK,YAAY,MAAA,CAAO,IAAA;AAAA,gBACxB,IAAA,CAAK,YAAY,MAAA,CAAO,OAAA;AAAA,gBACxB;AAAA;AACF,aACF,CAAE,CAAA;AAEF,YAAA,OAAO;AAAA,cACL,OAAA,EAAS,iBAAA;AAAA,cACT,KAAA,EAAO;AAAA,aACT;AAAA,UACF,CAAA;AAGA,UAAA,IACE,MAAA,CAAO,KAAA,KAAU,kBAAA,IACjB,MAAA,CAAO,UAAU,mBAAA,EACjB;AACA,YAAA,MAAM,UACJ,MAAA,CAAO,YAAA;AAET,YAAA,MAAM,oBAAA,GACJ,MAAA,CAAO,KAAA,KAAU,kBAAA,GACb,oBAAA,GACA,uBAAA;AAEN,YAAA,MAAM,IAAA,CAAK,aAAA,CAAc,OAAA,EAAS,oBAAoB,CAAA;AAAA,UACxD;AACA,UAAA,IAAI,MAAA,CAAO,UAAU,kBAAA,EAAoB;AACvC,YAAA,MAAM,UACJ,MAAA,CAAO,YAAA;AAET,YAAA,MAAM,IAAA,CAAK,WAAA,CAAY,OAAA,EAAS,wBAAwB,CAAA;AAAA,UAC1D;AAGA,UAAA,IACE,MAAA,CAAO,KAAA,KAAU,iBAAA,IACjB,MAAA,CAAO,UAAU,kBAAA,EACjB;AACA,YAAA,MAAM,UACJ,MAAA,CAAO,YAAA;AAET,YAAA,MAAM,oBAAA,GACJ,MAAA,CAAO,KAAA,KAAU,iBAAA,GACb,oBAAA,GACA,uBAAA;AAEN,YAAA,MAAM,IAAA,CAAK,YAAA,CAAa,OAAA,EAAS,oBAAoB,CAAA;AAAA,UACvD;AAGA,UAAA,IACE,MAAA,CAAO,KAAA,KAAU,oBAAA,IACjB,MAAA,CAAO,UAAU,uBAAA,EACjB;AACA,YAAA,MAAM,UACJ,MAAA,CAAO,YAAA;AAET,YAAA,MAAM,oBAAA,GAAuB,oBAAA;AAE7B,YAAA,MAAM,IAAA,CAAK,kBAAA,CAAmB,OAAA,EAAS,oBAAoB,CAAA;AAAA,UAC7D;AAAA,QACF;AAAA,OACD,CAAA;AAAA,IACH;AAAA,EACF;AAAA,EAEQ,iBACN,UAAA,EACqB;AACrB,IAAA,OAAO,YAAY;AACjB,MAAA,MAAM,MAAA,GAAS,CAAA,EAAG,IAAA,CAAK,eAAA,EAAiB,CAAA,QAAA,CAAA;AACxC,MAAA,OAAO,WAAW,GAAA,CAAI;AAAA,QACpB,EAAA,EAAI,MAAA;AAAA,QACJ,IAAI,YAAY;AACd,UAAA,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM;AAAA,YAC/B,KAAA,EAAO,gCAAA,CAAiC,SAAA,CAAU,WAAA,CAAY,IAAA;AAAA,YAC9D,MAAA;AAAA,YACA,cAAA,EAAgBC,gBAAK,EAAA;AAAG,WACzB,CAAA;AAED,UAAA,IAAI;AACF,YAAA,MAAM,IAAA,CAAK,QAAQ,MAAM,CAAA;AAAA,UAC3B,SAAS,KAAA,EAAO;AACd,YAAA,MAAA,CAAO,KAAA;AAAA,cACL,CAAA,EAAG,IAAA,CAAK,eAAA,EAAiB,oBAAoB,KAAK,CAAA,CAAA;AAAA,cAClD;AAAA,aACF;AAAA,UACF;AAAA,QACF;AAAA,OACD,CAAA;AAAA,IACH,CAAA;AAAA,EACF;AAAA,EAEA,MAAc,QAAQ,MAAA,EAAsC;AAC1D,IAAA,IAAI,CAAC,KAAK,UAAA,EAAY;AACpB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,gDAAA,EAAmD,IAAA,CAAK,eAAA,EAAiB,CAAA;AAAA,OAC3E;AAAA,IACF;AAEA,IAAA,IAAI,MAAA;AACJ,IAAA,MAAM,WAAW,EAAC;AAIlB,IAAA,IAAI,KAAK,YAAA,CAAa,aAAA,EAAc,IAAK,IAAA,CAAK,OAAO,oBAAA,EAAsB;AACzE,MAAA,MAAA,GAAA,CAAU,MAAM,IAAA,CAAK,YAAA,CAAa,qBAAqB,IAAA,CAAK,MAAA,CAAO,KAAK,CAAA,EACrE,KAAA;AACH,MAAA,MAAA,CAAO,IAAA,CAAK,MAAM,IAAA,CAAK,YAAA,CAAa,eAAe,IAAA,CAAK,MAAA,CAAO,KAAK,CAAC,CAAA;AACrE,MAAA,QAAA,CAAS,IAAA;AAAA,QACPC,gBAAA;AAAA,UACE,aACE,IAAA,CAAK,YAAA,CAAa,iBAAiB,IAAA,CAAK,MAAA,CAAO,OAAO,OAAO,CAAA;AAAA;AAAA,UAC/D;AAAA,YACE,IAAA,EAAM,CAAA;AAAA,YACN,QAAA,EAAU;AAAA;AACZ;AACF,OACF;AAAA,IACF,CAAA,MAAA,IACE,KAAK,YAAA,CAAa,aAAA,MAClB,CAAC,IAAA,CAAK,OAAO,oBAAA,EACb;AACA,MAAA,MAAA,GAASA,gBAAA;AAAA,QACP,CAAA,OAAA,KAAW,IAAA,CAAK,YAAA,CAAa,UAAA,CAAW,OAAO,CAAA;AAAA,QAC/C;AAAA,UACE,IAAA,EAAM,CAAA;AAAA,UACN,QAAA,EAAU,GAAA;AAAA,UACV,aAAA,EAAe;AAAA;AACjB,OACF;AACA,MAAA,QAAA,CAAS,IAAA;AAAA,QACPA,gBAAA;AAAA,UACE,CAAA,OAAA,KAAW,IAAA,CAAK,YAAA,CAAa,SAAA,CAAU,OAAO,CAAA;AAAA;AAAA,UAC9C,EAAE,IAAA,EAAM,CAAA,EAAG,QAAA,EAAU,GAAA,EAAK,QAAQ,IAAA;AAAK;AACzC,OACF;AAAA,IACF,CAAA,MAEK;AACH,MAAA,MAAM,gBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,YAAA,CAAa,qBAAqB,IAAA,CAAK,MAAA,CAAO,KAAK,CAAA,EAC9D,KAAA;AACF,MAAA,MAAA,GAAS,gBAAA;AAET,MAAA,MAAA,CAAO,IAAA,CAAK,MAAM,IAAA,CAAK,YAAA,CAAa,eAAe,IAAA,CAAK,MAAA,CAAO,KAAK,CAAC,CAAA;AAErE,MAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,MAAM,GAAG,CAAA;AAElD,MAAA,MAAM,UAAA,GAAa,KAAK,MAAA,CAAO,oBAAA,GAC3B,CAAC,IAAA,CAAK,MAAA,CAAO,KAAK,CAAA,GAClB,CAAC,eAAe,CAAC,CAAA,EAAG,GAAG,gBAAA,CAAiB,GAAA,CAAI,OAAK,CAAA,EAAG,CAAA,CAAE,EAAE,CAAA,CAAE,CAAC,CAAA;AAG/D,MAAA,KAAA,MAAW,SAAS,UAAA,EAAY;AAC9B,QAAA,MAAA,CAAO,KAAA,CAAM,CAAA,0BAAA,EAA6B,KAAK,CAAA,CAAE,CAAA;AACjD,QAAA,QAAA,CAAS,IAAA;AAAA,UACPA,gBAAA;AAAA,YACE,CAAA,OAAA,KACE,KAAK,YAAA,CAAa,aAAA;AAAA,cAChB,KAAA;AAAA,cACA,OAAA;AAAA,cACA,KAAK,MAAA,CAAO;AAAA,aACd;AAAA,YACF;AAAA,cACE,IAAA,EAAM,CAAA;AAAA,cACN,QAAA,EAAU;AAAA;AACZ;AACF,SACF;AAAA,MACF;AAAA,IACF;AAEA,IAAA,MAAM,eAAiD,EAAC;AAExD,IAAA,MAAM,OAAA,GAAsB;AAAA,MAC1B,OAAA,EAAS,CAAA;AAAA,MACT,SAAS;AAAC,KACZ;AAEA,IAAA,MAAM,QAAA,GAAwB;AAAA,MAC5B,OAAA,EAAS,CAAA;AAAA,MACT,SAAS;AAAC,KACZ;AAEA,IAAA,KAAA,MAAW,SAAS,QAAA,EAAU;AAE5B,MAAA,WAAA,MAAiB,QAAQ,KAAA,EAAO;AAE9B,QAAA,IAAI,IAAA,CAAK,MAAM,YAAA,EAAc;AAC3B,UAAA;AAAA,QACF;AACA,QAAA,OAAA,CAAQ,OAAA,EAAA;AAER,QAAA,IAAI,CAAC,IAAA,CAAK,iBAAA,CAAkB,IAAI,CAAA,EAAG;AACjC,UAAA,MAAA,CAAO,KAAA,CAAM,CAAA,cAAA,EAAiB,IAAA,CAAK,QAAQ,CAAA,CAAE,CAAA;AAC7C,UAAA;AAAA,QACF;AAEA,QAAA,YAAA,CAAa,IAAA,CAAK,EAAE,CAAA,GAAI,IAAA;AACxB,QAAA,OAAA,CAAQ,OAAA,CAAQ,KAAK,IAAI,CAAA;AAAA,MAC3B;AAAA,IACF;AAEA,IAAA,WAAA,MAAiB,SAAS,MAAA,EAAQ;AAChC,MAAA,QAAA,CAAS,OAAA,EAAA;AACT,MAAA,IAAI,CAAC,IAAA,CAAK,kBAAA,CAAmB,KAAK,CAAA,EAAG;AACnC,QAAA,MAAA,CAAO,KAAA,CAAM,CAAA,eAAA,EAAkB,KAAA,CAAM,SAAS,CAAA,CAAE,CAAA;AAChD,QAAA;AAAA,MACF;AACA,MAAA,MAAA,CAAO,KAAA,CAAM,CAAA,iBAAA,EAAoB,KAAA,CAAM,SAAS,CAAA,CAAE,CAAA;AAElD,MAAA,QAAA,CAAS,OAAA,CAAQ,KAAK,KAAK,CAAA;AAE3B,MAAA,IAAI,UAAA,GAAwC,EAAE,KAAA,EAAO,EAAC,EAAE;AACxD,MAAA,IAAI;AACF,QAAA,MAAM,SAAA,GAAY,IAAA,CAAK,YAAA,CAAa,IAAA,CAAK,MAAM,CAAA;AAC/C,QAAA,UAAA,GAAa,MAAM,KAAK,YAAA,CAAa,eAAA;AAAA,UACnC,KAAA,CAAM,SAAA;AAAA,UACN;AAAA,SACF;AAAA,MACF,SAAS,CAAA,EAAG;AACV,QAAA,MAAA,CAAO,KAAA;AAAA,UACL,CAAA,iCAAA,EAAoC,KAAA,CAAM,SAAS,CAAA,GAAA,EAAM,CAAC,CAAA;AAAA,SAC5D;AAAA,MACF;AACA,MAAA,KAAA,MAAW,SAAA,IAAa,WAAW,KAAA,EAAO;AACxC,QAAA,MAAM,IAAA,GAAO,YAAA,CAAa,SAAA,CAAU,EAAE,CAAA;AAEtC,QAAA,IAAI,IAAA,EAAM;AACR,UAAA,IAAA,CAAK,UAAU,IAAA,CAAK,MAAA,IAAU,EAAC,EAAG,OAAO,KAAK,CAAA;AAAA,QAChD;AAAA,MACF;AAAA,IACF;AAEA,IAAA,MAAM,eAAA,GAAkB,QAAA,CAAS,OAAA,CAAQ,MAAA,CAAO,CAAA,KAAA,KAAS;AACvD,MAAA,OACE,OAAA,CAAQ,OAAA,CAAQ,MAAA,CAAO,CAAA,CAAA,KAAK;AAC1B,QAAA,OAAO,CAAC,CAAC,CAAA,CAAE,MAAA,EAAQ,KAAK,CAAA,CAAA,KAAK,CAAA,CAAE,EAAA,KAAO,KAAA,CAAM,EAAE,CAAA;AAAA,MAChD,CAAC,EAAE,MAAA,GAAS,CAAA;AAAA,IAEhB,CAAC,CAAA;AAED,IAAA,MAAM,YAAA,GAAe,QAAQ,OAAA,CAAQ,GAAA;AAAA,MAAI,CAAA,CAAA,KACvC,KAAK,eAAA,CAAgB;AAAA,QACnB,IAAA,EAAM,CAAA;AAAA,QACN,iBAAA,EAAmB,KAAK,WAAA,CAAY,MAAA;AAAA,QACpC,gBAAgB,IAAA,CAAK,MAAA;AAAA,QACrB,sBAAsB,IAAA,CAAK;AAAA,OAC5B;AAAA,KACH;AAEA,IAAA,MAAM,aAAA,GAAgB,KAAK,wBAAA,CAAyB;AAAA,MAClD,MAAA,EAAQ,eAAA;AAAA,MACR,gBAAgB,IAAA,CAAK,MAAA;AAAA,MACrB,sBAAsB,IAAA,CAAK;AAAA,KAC5B,CAAA;AAED,IAAA,MAAA,CAAO,IAAA;AAAA,MACL,CAAA,QAAA,EAAW,OAAA,CAAQ,OAAO,CAAA,qBAAA,EAAwB,aAAa,MAAM,CAAA,MAAA;AAAA,KACvE;AACA,IAAA,MAAA,CAAO,IAAA;AAAA,MACL,CAAA,QAAA,EAAW,QAAA,CAAS,OAAO,CAAA,sBAAA,EAAyB,cAAc,MAAM,CAAA,OAAA;AAAA,KAC1E;AAEA,IAAA,MAAM,IAAA,CAAK,WAAW,aAAA,CAAc;AAAA,MAClC,IAAA,EAAM,MAAA;AAAA,MACN,QAAA,EAAU,CAAC,GAAG,YAAA,EAAc,GAAG,aAAa,CAAA,CAAE,IAAI,CAAA,MAAA,MAAW;AAAA,QAC3D,WAAA,EAAa,KAAK,eAAA,EAAgB;AAAA,QAClC,QAAQ,IAAA,CAAK,aAAA;AAAA,UACX,IAAA,CAAK,YAAY,MAAA,CAAO,IAAA;AAAA,UACxB,IAAA,CAAK,YAAY,MAAA,CAAO,OAAA;AAAA,UACxB;AAAA;AACF,OACF,CAAE;AAAA,KACH,CAAA;AAAA,EACH;AAAA,EACA,MAAc,aAAA,CACZ,KAAA,EACA,oBAAA,EAIe;AACf,IAAA,IAAI,CAAC,KAAK,UAAA,EAAY;AACpB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,gDAAA,EAAmD,IAAA,CAAK,eAAA,EAAiB,CAAA;AAAA,OAC3E;AAAA,IACF;AAEA,IAAA,IAAI,KAAA;AACJ,IAAA,IAAI,KAAA,CAAM,eAAe,eAAA,EAAiB;AACxC,MAAA,KAAA,GAAQ;AAAA,QACN,IAAI,KAAA,CAAM,QAAA;AAAA,QACV,WAAW,KAAA,CAAM,SAAA;AAAA,QACjB,MAAM,KAAA,CAAM,IAAA;AAAA,QACZ,WAAA,EAAa,EAAA;AAAA,QACb,SAAA,EAAW;AAAA,OACb;AAAA,IACF,CAAA,MAAO;AACL,MAAA,KAAA,GAAQ,MAAM,IAAA,CAAK,YAAA,CAAa,YAAA,CAAa,MAAM,QAAQ,CAAA;AAAA,IAC7D;AAEA,IAAA,IAAI,CAAC,IAAA,CAAK,kBAAA,CAAmB,KAAK,CAAA,EAAG;AACnC,MAAA,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,cAAA,EAAiB,KAAA,CAAM,SAAS,CAAA,CAAA,CAAG,CAAA;AACrD,MAAA;AAAA,IACF;AAGA,IAAA,MAAM,WAAA,GAAc,KAAK,wBAAA,CAAyB;AAAA,MAChD,MAAA,EAAQ,CAAC,KAAK,CAAA;AAAA,MACd,gBAAgB,IAAA,CAAK,MAAA;AAAA,MACrB,sBAAsB,IAAA,CAAK;AAAA,KAC5B,CAAA;AAGD,IAAA,IAAI,MAAM,SAAA,EAAW;AACnB,MAAA,MAAM,cAAc,MAAM,IAAA,CAAK,YAAA,CAAa,YAAA,CAAa,MAAM,SAAS,CAAA;AAExE,MAAA,WAAA,CAAY,CAAC,CAAA,CAAE,IAAA,CAAK,MAAA,GAAS,KAAK,oBAAA,CAAqB;AAAA,QACrD,KAAA,EAAO,WAAA;AAAA,QACP,gBAAgB,IAAA,CAAK;AAAA,OACtB,CAAA;AAAA,IACH;AAEA,IAAA,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,4BAAA,EAA+B,KAAA,CAAM,SAAS,CAAA,CAAA,CAAG,CAAA;AACnE,IAAA,MAAM,IAAA,CAAK,WAAW,aAAA,CAAc;AAAA,MAClC,IAAA,EAAM,OAAA;AAAA,MACN,GAAG,qBAAqB,WAAW;AAAA,KACpC,CAAA;AAAA,EACH;AAAA;AAAA,EAGA,MAAc,WAAA,CACZ,KAAA,EACA,oBAAA,EAIe;AACf,IAAA,IAAI,CAAC,KAAK,UAAA,EAAY;AACpB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,gDAAA,EAAmD,IAAA,CAAK,eAAA,EAAiB,CAAA;AAAA,OAC3E;AAAA,IACF;AAEA,IAAA,MAAM,aAAA,GAA6B;AAAA,MACjC,IAAI,KAAA,CAAM,QAAA;AAAA,MACV,WAAW,KAAA,CAAM,aAAA;AAAA,MACjB,MAAM,KAAA,CAAM,IAAA;AAAA,MACZ,WAAA,EAAa,EAAA;AAAA,MACb,SAAA,EAAW;AAAA,KACb;AAEA,IAAA,IAAI,CAAC,IAAA,CAAK,kBAAA,CAAmB,aAAa,CAAA,EAAG;AAC3C,MAAA,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,cAAA,EAAiB,aAAA,CAAc,SAAS,CAAA,CAAA,CAAG,CAAA;AAC7D,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,mBAAA,GAAsB,MAAM,IAAA,CAAK,wBAAA,CAAyB;AAAA,MAC9D,MAAA,EAAQ,CAAC,aAAa,CAAA;AAAA,MACtB,gBAAgB,IAAA,CAAK,MAAA;AAAA,MACrB,sBAAsB,IAAA,CAAK;AAAA,KAC5B,CAAA;AAED,IAAA,MAAM,aAAa,MAAM,IAAA,CAAK,YAAA,CAAa,YAAA,CAAa,MAAM,QAAQ,CAAA;AAEtE,IAAA,IAAI,CAAC,IAAA,CAAK,kBAAA,CAAmB,UAAU,CAAA,EAAG;AACxC,MAAA,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,cAAA,EAAiB,UAAA,CAAW,SAAS,CAAA,CAAA,CAAG,CAAA;AAC1D,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,gBAAA,GAAmB,MAAM,IAAA,CAAK,wBAAA,CAAyB;AAAA,MAC3D,MAAA,EAAQ,CAAC,UAAU,CAAA;AAAA,MACnB,gBAAgB,IAAA,CAAK,MAAA;AAAA,MACrB,sBAAsB,IAAA,CAAK;AAAA,KAC5B,CAAA;AAED,IAAA,IAAI,WAAW,SAAA,EAAW;AACxB,MAAA,MAAM,WAAA,GAAc,MAAM,IAAA,CAAK,YAAA,CAAa,YAAA;AAAA,QAC1C,UAAA,CAAW;AAAA,OACb;AAEA,MAAA,gBAAA,CAAiB,CAAC,CAAA,CAAE,IAAA,CAAK,MAAA,GAAS,KAAK,oBAAA,CAAqB;AAAA,QAC1D,KAAA,EAAO,WAAA;AAAA,QACP,gBAAgB,IAAA,CAAK;AAAA,OACtB,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,EAAE,KAAA,EAAM,GAAI,oBAAA,CAAqB,gBAAgB,CAAA;AACvD,IAAA,MAAM,EAAE,OAAA,EAAQ,GAAI,oBAAA,CAAqB,mBAAmB,CAAA;AAE5D,IAAA,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,4BAAA,EAA+B,UAAA,CAAW,SAAS,CAAA,CAAA,CAAG,CAAA;AACxE,IAAA,MAAM,IAAA,CAAK,WAAW,aAAA,CAAc;AAAA,MAClC,IAAA,EAAM,OAAA;AAAA,MACN,OAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA,EACH;AAAA,EAEA,MAAc,YAAA,CACZ,KAAA,EACA,oBAAA,EAIe;AACf,IAAA,IAAI,CAAC,KAAK,UAAA,EAAY;AACpB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,gDAAA,EAAmD,IAAA,CAAK,eAAA,EAAiB,CAAA;AAAA,OAC3E;AAAA,IACF;AAEA,IAAA,IAAI,IAAA,GAA+B,MAAA;AAGnC,IAAA,IAAI,KAAA,CAAM,eAAe,cAAA,EAAgB;AACvC,MAAA,IAAA,GAAO;AAAA,QACL,IAAI,KAAA,CAAM,OAAA;AAAA,QACV,UAAU,KAAA,CAAM,QAAA;AAAA,QAChB,OAAO,KAAA,CAAM,KAAA;AAAA,QACb,MAAM,KAAA,CAAM,IAAA;AAAA,QACZ,KAAA,EAAO,QAAA;AAAA;AAAA,QACP,OAAA,EAAS,EAAA;AAAA,QACT,UAAA,EAAY;AAAA,OACd;AAAA,IACF;AAGA,IAAA,IAAI,KAAA,CAAM,eAAe,aAAA,EAAe;AACtC,MAAA,IAAA,GAAO,MAAM,IAAA,CAAK,YAAA,CAAa,WAAA,CAAY,MAAM,OAAO,CAAA;AAAA,IAC1D;AAEA,IAAA,IAAI,CAAC,IAAA,EAAM;AACT,MAAA,IAAA,CAAK,MAAA,CAAO,KAAA;AAAA,QACV,CAAA,qCAAA,EAAwC,KAAA,CAAM,UAAU,CAAA,2BAAA,EAA8B,MAAM,QAAQ,CAAA;AAAA,OACtG;AACA,MAAA;AAAA,IACF;AAEA,IAAA,IAAI,CAAC,IAAA,CAAK,iBAAA,CAAkB,IAAI,CAAA,EAAG;AACjC,MAAA,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,aAAA,EAAgB,IAAA,CAAK,QAAQ,CAAA,CAAA,CAAG,CAAA;AAClD,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,UAAA,GAAa,MAAM,IAAA,CAAK,eAAA,CAAgB;AAAA,MAC5C,IAAA;AAAA,MACA,iBAAA,EAAmB,KAAK,WAAA,CAAY,MAAA;AAAA,MACpC,gBAAgB,IAAA,CAAK,MAAA;AAAA,MACrB,sBAAsB,IAAA,CAAK;AAAA,KAC5B,CAAA;AACD,IAAA,MAAM,EAAE,KAAA,EAAO,OAAA,KAAY,oBAAA,CAAqB,CAAC,UAAU,CAAC,CAAA;AAE5D,IAAA,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,2BAAA,EAA8B,IAAA,CAAK,QAAQ,CAAA,CAAA,CAAG,CAAA;AAChE,IAAA,MAAM,IAAA,CAAK,WAAW,aAAA,CAAc;AAAA,MAClC,IAAA,EAAM,OAAA;AAAA,MACN,OAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA,EACH;AAAA;AAAA,EAGA,MAAc,kBAAA,CACZ,KAAA,EACA,oBAAA,EAIe;AACf,IAAA,IAAI,CAAC,KAAK,UAAA,EAAY;AACpB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,gDAAA,EAAmD,IAAA,CAAK,eAAA,EAAiB,CAAA;AAAA,OAC3E;AAAA,IACF;AAGA,IAAA,MAAM,cAAA,GAA8B,MAAM,IAAA,CAAK,YAAA,CAAa,YAAA;AAAA,MAC1D,KAAA,CAAM;AAAA,KACR;AAEA,IAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,MAAA,IAAA,CAAK,MAAA,CAAO,KAAA;AAAA,QACV,CAAA,sCAAA,EAAyC,MAAM,UAAU,CAAA,kBAAA;AAAA,OAC3D;AACA,MAAA;AAAA,IACF;AAGA,IAAA,IAAI,CAAC,IAAA,CAAK,kBAAA,CAAmB,cAAc,CAAA,EAAG;AAC5C,MAAA,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,cAAA,EAAiB,cAAA,CAAe,SAAS,CAAA,CAAA,CAAG,CAAA;AAC9D,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,SAAA,GAAY,IAAA,CAAK,YAAA,CAAa,IAAA,CAAK,MAAM,CAAA;AAG/C,IAAA,MAAM,YAAA,GAAe,MAAM,IAAA,CAAK,YAAA,CAAa,eAAA;AAAA,MAC3C,cAAA,CAAe,SAAA;AAAA,MACf;AAAA,KACF;AACA,IAAA,MAAM,iBAAiB,YAAA,CAAa,KAAA;AAEpC,IAAA,MAAM,mBAAA,GAAsB,MAAM,IAAA,CAAK,wBAAA,CAAyB;AAAA,MAC9D,MAAA,EAAQ,CAAC,cAAc,CAAA;AAAA,MACvB,gBAAgB,IAAA,CAAK,MAAA;AAAA,MACrB,sBAAsB,IAAA,CAAK;AAAA,KAC5B,CAAA;AAGD,IAAA,IAAI,eAAe,SAAA,EAAW;AAC5B,MAAA,MAAM,WAAA,GAAc,MAAM,IAAA,CAAK,YAAA,CAAa,YAAA;AAAA,QAC1C,cAAA,CAAe;AAAA,OACjB;AAGA,MAAA,mBAAA,CAAoB,CAAC,CAAA,CAAE,IAAA,CAAK,MAAA,GAAS,KAAK,oBAAA,CAAqB;AAAA,QAC7D,KAAA,EAAO,WAAA;AAAA,QACP,gBAAgB,IAAA,CAAK;AAAA,OACtB,CAAA;AAAA,IACH;AAGA,IAAA,mBAAA,CAAoB,CAAC,CAAA,CAAE,IAAA,CAAK,OAAA,GAC1B,cAAA,CAAe,MAAA,KAAW,CAAA,GAAI,cAAA,CAAe,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,QAAQ,IAAI,EAAC;AAEvE,IAAA,MAAM,EAAE,KAAA,EAAO,OAAA,EAAQ,GAAI,qBAAqB,mBAAmB,CAAA;AAEnE,IAAA,IAAA,CAAK,MAAA,CAAO,KAAA;AAAA,MACV,CAAA,4BAAA,EAA+B,eAAe,SAAS,CAAA,CAAA;AAAA,KACzD;AACA,IAAA,MAAM,IAAA,CAAK,WAAW,aAAA,CAAc;AAAA,MAClC,IAAA,EAAM,OAAA;AAAA,MACN,OAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA,EACH;AAAA,EAEQ,mBAAmB,KAAA,EAA6B;AACtD,IAAA,OACE,IAAA,CAAK,aAAA,CAAc,IAAA,CAAK,CAAA,OAAA,KAAW,OAAA,CAAQ,IAAA,CAAK,KAAA,CAAM,SAAS,CAAC,CAAA,KAC/D,CAAC,IAAA,CAAK,MAAA,CAAO,SACZ,KAAA,CAAM,SAAA,CAAU,UAAA,CAAW,CAAA,EAAG,IAAA,CAAK,MAAA,CAAO,KAAK,CAAA,CAAA,CAAG,CAAA,IAClD,KAAA,CAAM,SAAA,KAAc,IAAA,CAAK,MAAA,CAAO,KAAA,CAAA;AAAA,EAEtC;AAAA,EAEQ,kBAAkB,IAAA,EAA2B;AACnD,IAAA,OACE,IAAA,CAAK,MAAA,CAAO,WAAA,CAAY,IAAA,CAAK,IAAA,CAAK,KAAA,IAAS,IAAA,CAAK,QAAA,IAAY,EAAE,CAAA,IAC9D,IAAA,CAAK,KAAA,KAAU,QAAA;AAAA,EAEnB;AAAA,EAEQ,aAAA,CAAc,IAAA,EAAc,OAAA,EAAiB,MAAA,EAAwB;AAC3E,IAAA,MAAM,QAAA,GACJ,OAAO,IAAA,KAAS,OAAA,GACZ,OAAO,OAAO,CAAA,CAAA,EAAI,OAAO,QAAA,CAAS,WAAA,GAAc,GAAG,IAAI,CAAA,UAAA,CAAY,CAAC,CAAA,CAAA,GACpE,CAAA,IAAA,EAAO,OAAO,CAAA,CAAA,EAAI,MAAA,CAAO,SAAS,IAAI,CAAA,CAAA;AAC5C,IAAA,OAAOC,YAAA;AAAA,MACL;AAAA,QACE,QAAA,EAAU;AAAA,UACR,WAAA,EAAa;AAAA,YACX,CAACC,gCAAmB,GAAG,QAAA;AAAA,YACvB,CAACC,uCAA0B,GAAG;AAAA;AAChC;AACF,OACF;AAAA,MACA;AAAA,KACF;AAAA,EACF;AAAA,EAEQ,aAAa,MAAA,EAAa;AAChC,IAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,MAAA,CAAO,SAAS,CAAA,EAAG;AAEnC,MAAA,MAAM,YAAA,uBAAmB,GAAA,CAAI,CAAC,UAAU,GAAG,MAAA,CAAO,SAAS,CAAC,CAAA;AAC5D,MAAA,OAAO,KAAA,CAAM,KAAK,YAAY,CAAA;AAAA,IAChC;AAGA,IAAA,OAAO,CAAC,UAAU,GAAI,MAAA,CAAO,iBAAiB,CAAC,WAAW,CAAA,GAAI,EAAG,CAAA;AAAA,EACnE;AACF;;;;"}