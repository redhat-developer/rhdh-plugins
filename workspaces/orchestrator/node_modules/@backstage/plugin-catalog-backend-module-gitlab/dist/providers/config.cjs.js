'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');

function readGitlabConfig(id, config) {
  const group = config.getOptionalString("group") ?? "";
  const host = config.getString("host");
  const branch = config.getOptionalString("branch");
  const fallbackBranch = config.getOptionalString("fallbackBranch") ?? "master";
  const catalogFile = config.getOptionalString("entityFilename") ?? "catalog-info.yaml";
  const projectPattern = new RegExp(
    config.getOptionalString("projectPattern") ?? /[\s\S]*/
  );
  const userPattern = new RegExp(
    config.getOptionalString("userPattern") ?? /[\s\S]*/
  );
  const configValue = config.getOptional("groupPattern");
  let groupPattern;
  if (configValue && typeof configValue === "string" || !configValue) {
    groupPattern = new RegExp(
      config.getOptionalString("groupPattern") ?? /[\s\S]*/
    );
  } else if (configValue && Array.isArray(configValue)) {
    const configPattern = config.getOptionalStringArray("groupPattern") ?? [];
    groupPattern = configPattern.map((pattern) => new RegExp(pattern));
  } else {
    groupPattern = new RegExp(/[\s\S]*/);
  }
  const orgEnabled = config.getOptionalBoolean("orgEnabled") ?? false;
  const allowInherited = config.getOptionalBoolean("allowInherited") ?? false;
  const relations = config.getOptionalStringArray("relations") ?? [];
  const skipForkedRepos = config.getOptionalBoolean("skipForkedRepos") ?? false;
  const includeArchivedRepos = config.getOptionalBoolean("includeArchivedRepos") ?? false;
  const excludeRepos = config.getOptionalStringArray("excludeRepos") ?? [];
  const schedule = config.has("schedule") ? backendPluginApi.readSchedulerServiceTaskScheduleDefinitionFromConfig(
    config.getConfig("schedule")
  ) : void 0;
  const restrictUsersToGroup = config.getOptionalBoolean("restrictUsersToGroup") ?? false;
  const includeUsersWithoutSeat = config.getOptionalBoolean("includeUsersWithoutSeat") ?? false;
  const membership = config.getOptionalBoolean("membership");
  const topicsArray = config.getOptionalStringArray("topics");
  const topics = topicsArray?.length ? topicsArray.join(",") : void 0;
  return {
    id,
    group,
    branch,
    fallbackBranch,
    host,
    catalogFile,
    projectPattern,
    userPattern,
    groupPattern,
    schedule,
    orgEnabled,
    allowInherited,
    relations,
    skipForkedRepos,
    includeArchivedRepos,
    excludeRepos,
    restrictUsersToGroup,
    includeUsersWithoutSeat,
    membership,
    topics
  };
}
function readGitlabConfigs(config) {
  const configs = [];
  const providerConfigs = config.getOptionalConfig("catalog.providers.gitlab");
  if (!providerConfigs) {
    return configs;
  }
  for (const id of providerConfigs.keys()) {
    configs.push(readGitlabConfig(id, providerConfigs.getConfig(id)));
  }
  return configs;
}

exports.readGitlabConfigs = readGitlabConfigs;
//# sourceMappingURL=config.cjs.js.map
