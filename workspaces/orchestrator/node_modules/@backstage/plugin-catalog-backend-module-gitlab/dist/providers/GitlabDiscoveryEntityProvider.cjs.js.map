{"version":3,"file":"GitlabDiscoveryEntityProvider.cjs.js","sources":["../../src/providers/GitlabDiscoveryEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  SchedulerService,\n  SchedulerServiceTaskRunner,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport { GitLabIntegration, ScmIntegrations } from '@backstage/integration';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  DeferredEntity,\n  EntityProvider,\n  EntityProviderConnection,\n  locationSpecToLocationEntity,\n} from '@backstage/plugin-catalog-node';\nimport { EventsService } from '@backstage/plugin-events-node';\nimport { WebhookProjectSchema, WebhookPushEventSchema } from '@gitbeaker/rest';\nimport * as uuid from 'uuid';\nimport {\n  GitLabClient,\n  GitLabGroup,\n  GitLabProject,\n  GitlabProviderConfig,\n  paginated,\n  readGitlabConfigs,\n} from '../lib';\n\nimport * as path from 'path';\n\nconst TOPIC_REPO_PUSH = 'gitlab.push';\n\ntype Result = {\n  scanned: number;\n  matches: GitLabProject[];\n};\n\n/**\n * Discovers catalog files located in your GitLab instance.\n * The provider will search your GitLab instance's projects and register catalog files matching the configured path\n * as Location entity and via following processing steps add all contained catalog entities.\n * This can be useful as an alternative to static locations or manually adding things to the catalog.\n *\n * @public\n */\n// <<< EventSupportChange: implemented EventSubscriber interface\nexport class GitlabDiscoveryEntityProvider implements EntityProvider {\n  private readonly config: GitlabProviderConfig;\n  private readonly integration: GitLabIntegration;\n  private readonly logger: LoggerService;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n  private readonly events?: EventsService;\n  private readonly gitLabClient: GitLabClient;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: LoggerService;\n      events?: EventsService;\n      schedule?: SchedulerServiceTaskRunner;\n      scheduler?: SchedulerService;\n    },\n  ): GitlabDiscoveryEntityProvider[] {\n    if (!options.schedule && !options.scheduler) {\n      throw new Error('Either schedule or scheduler must be provided.');\n    }\n\n    const providerConfigs = readGitlabConfigs(config);\n    const integrations = ScmIntegrations.fromConfig(config).gitlab;\n    const providers: GitlabDiscoveryEntityProvider[] = [];\n\n    providerConfigs.forEach(providerConfig => {\n      const integration = integrations.byHost(providerConfig.host);\n      if (!integration) {\n        throw new Error(\n          `No gitlab integration found that matches host ${providerConfig.host}`,\n        );\n      }\n\n      if (!options.schedule && !providerConfig.schedule) {\n        throw new Error(\n          `No schedule provided neither via code nor config for GitlabDiscoveryEntityProvider:${providerConfig.id}.`,\n        );\n      }\n\n      const taskRunner =\n        options.schedule ??\n        options.scheduler!.createScheduledTaskRunner(providerConfig.schedule!);\n\n      providers.push(\n        new GitlabDiscoveryEntityProvider({\n          ...options,\n          config: providerConfig,\n          integration,\n          taskRunner,\n        }),\n      );\n    });\n\n    return providers;\n  }\n\n  /**\n   * Constructs a GitlabDiscoveryEntityProvider instance.\n   *\n   * @param options - Configuration options including config, integration, logger, and taskRunner.\n   */\n  private constructor(options: {\n    config: GitlabProviderConfig;\n    integration: GitLabIntegration;\n    logger: LoggerService;\n    events?: EventsService;\n    taskRunner: SchedulerServiceTaskRunner;\n  }) {\n    this.config = options.config;\n    this.integration = options.integration;\n    this.logger = options.logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(options.taskRunner);\n    this.events = options.events;\n    this.gitLabClient = new GitLabClient({\n      config: this.integration.config,\n      logger: this.logger,\n    });\n  }\n\n  getProviderName(): string {\n    return `GitlabDiscoveryEntityProvider:${this.config.id}`;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    await this.scheduleFn();\n\n    if (this.events) {\n      await this.events.subscribe({\n        id: this.getProviderName(),\n        topics: [TOPIC_REPO_PUSH],\n        onEvent: async params => {\n          if (params.topic !== TOPIC_REPO_PUSH) {\n            return;\n          }\n\n          await this.onRepoPush(params.eventPayload as WebhookPushEventSchema);\n        },\n      });\n    }\n  }\n\n  /**\n   * Creates a scheduled task runner for refreshing the entity provider.\n   *\n   * @param taskRunner - The task runner instance.\n   * @returns The scheduled function.\n   */\n  private createScheduleFn(\n    taskRunner: SchedulerServiceTaskRunner,\n  ): () => Promise<void> {\n    return async () => {\n      const taskId = `${this.getProviderName()}:refresh`;\n      return taskRunner.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: GitlabDiscoveryEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n\n  /**\n   * Performs a full scan on the GitLab instance searching for locations to be ingested\n   *\n   * @param logger - The logger instance for logging.\n   */\n  async refresh(logger: LoggerService): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n\n    const locations = await this.getEntities();\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: locations.map(location => ({\n        locationKey: this.getProviderName(),\n        entity: locationSpecToLocationEntity({ location }),\n      })),\n    });\n\n    logger.info(`Processed ${locations.length} locations`);\n  }\n\n  /**\n   * Determine the location on GitLab to be ingested base on configured groups and filters.\n   *\n   * @returns A list of location to be ingested\n   */\n  private async getEntities() {\n    let res: Result = {\n      scanned: 0,\n      matches: [],\n    };\n\n    const groupToProcess = new Map<string, GitLabGroup>();\n    let groupFilters;\n\n    if (this.config.groupPattern !== undefined) {\n      const patterns = Array.isArray(this.config.groupPattern)\n        ? this.config.groupPattern\n        : [this.config.groupPattern];\n\n      if (patterns.length === 1 && patterns[0].source === '[\\\\s\\\\S]*') {\n        // if the pattern is a catch-all, we don't need to filter groups\n        groupFilters = new Array<RegExp>();\n      } else {\n        groupFilters = patterns;\n      }\n    }\n\n    if (groupFilters && groupFilters.length > 0) {\n      const groups = paginated<GitLabGroup>(\n        options => this.gitLabClient.listGroups(options),\n        {\n          page: 1,\n          per_page: 50,\n        },\n      );\n\n      for await (const group of groups) {\n        if (\n          groupFilters.some(groupFilter => groupFilter.test(group.full_path)) &&\n          !groupToProcess.has(group.full_path)\n        ) {\n          groupToProcess.set(group.full_path, group);\n        }\n      }\n\n      for (const group of groupToProcess.values()) {\n        const tmpRes = await this.getProjectsToProcess(group.full_path);\n        res.scanned += tmpRes.scanned;\n        // merge both arrays safely\n        for (const project of tmpRes.matches) {\n          res.matches.push(project);\n        }\n      }\n    } else {\n      res = await this.getProjectsToProcess(this.config.group);\n    }\n\n    const locations = this.deduplicateProjects(res.matches).map(p =>\n      this.createLocationSpec(p),\n    );\n\n    this.logger.info(\n      `Processed ${locations.length} from scanned ${res.scanned} projects.`,\n    );\n\n    return locations;\n  }\n\n  /**\n   * Deduplicate a list of projects based on their id.\n   *\n   * @param projects - a list of projects to be deduplicated\n   * @returns a list of projects with unique id\n   */\n  private deduplicateProjects(projects: GitLabProject[]): GitLabProject[] {\n    const uniqueProjects = new Map<number, GitLabProject>();\n\n    for (const project of projects) {\n      uniqueProjects.set(project.id, project);\n    }\n\n    return Array.from(uniqueProjects.values());\n  }\n\n  /**\n   * Retrieve a list of projects that match configuration.\n   *\n   * @param group - a full path of a GitLab group, can be empty\n   * @returns An array of project to be processed and the number of project scanned\n   */\n  private async getProjectsToProcess(group: string) {\n    const res: Result = {\n      scanned: 0,\n      matches: [],\n    };\n\n    const projects = paginated<GitLabProject>(\n      options => this.gitLabClient.listProjects(options),\n      {\n        group: group,\n        page: 1,\n        per_page: 50,\n        ...(!this.config.includeArchivedRepos && { archived: false }),\n        ...(this.config.membership && { membership: true }),\n        ...(this.config.topics && { topics: this.config.topics }),\n        // Only use simple=true when we don't need to skip forked repos.\n        // The simple=true parameter reduces response size by returning fewer fields,\n        // but it excludes the 'forked_from_project' field which is required for fork detection.\n        // Therefore, we can only optimize with simple=true when skipForkedRepos is false.\n        ...(!this.config.skipForkedRepos && { simple: true }),\n      },\n    );\n\n    for await (const project of projects) {\n      res.scanned++;\n\n      if (await this.shouldProcessProject(project, this.gitLabClient)) {\n        res.matches.push(project);\n      }\n    }\n\n    return res;\n  }\n\n  private createLocationSpec(project: GitLabProject): LocationSpec {\n    const project_branch =\n      this.config.branch ??\n      project.default_branch ??\n      this.config.fallbackBranch;\n\n    return {\n      type: 'url',\n      target: `${project.web_url}/-/blob/${project_branch}/${this.config.catalogFile}`,\n      presence: 'optional',\n    };\n  }\n\n  /**\n   * Handles the \"gitlab.push\" event.\n   *\n   * @param event - The push event payload.\n   */\n  private async onRepoPush(event: WebhookPushEventSchema): Promise<void> {\n    if (!this.connection) {\n      throw new Error(\n        `Gitlab discovery connection not initialized for ${this.getProviderName()}`,\n      );\n    }\n    this.logger.info(\n      `Received push event for ${event.project.path_with_namespace}`,\n    );\n\n    const project = await this.gitLabClient.getProjectById(event.project_id);\n\n    if (!project) {\n      this.logger.debug(\n        `Ignoring push event for ${event.project.path_with_namespace}`,\n      );\n\n      return;\n    }\n\n    if (!(await this.shouldProcessProject(project, this.gitLabClient))) {\n      this.logger.debug(`Skipping event ${event.project.path_with_namespace}`);\n      return;\n    }\n\n    // Get array of added, removed or modified files from the push event\n    const added = this.getFilesMatchingConfig(\n      event,\n      'added',\n      this.config.catalogFile,\n    );\n    const removed = this.getFilesMatchingConfig(\n      event,\n      'removed',\n      this.config.catalogFile,\n    );\n    const modified = this.getFilesMatchingConfig(\n      event,\n      'modified',\n      this.config.catalogFile,\n    );\n\n    // Modified files will be scheduled to a refresh\n    const addedEntities = this.createLocationSpecCommitedFiles(\n      event.project,\n      added,\n    );\n\n    const removedEntities = this.createLocationSpecCommitedFiles(\n      event.project,\n      removed,\n    );\n\n    if (addedEntities.length > 0 || removedEntities.length > 0) {\n      await this.connection.applyMutation({\n        type: 'delta',\n        added: this.toDeferredEntities(\n          addedEntities.map(entity => entity.target),\n        ),\n        removed: this.toDeferredEntities(\n          removedEntities.map(entity => entity.target),\n        ),\n      });\n    }\n\n    if (modified.length > 0) {\n      const projectBranch =\n        this.config.branch ??\n        event.project.default_branch ??\n        this.config.fallbackBranch;\n\n      // scheduling a refresh to both tree and blob (https://git-scm.com/book/en/v2/Git-Internals-Git-Objects)\n      await this.connection.refresh({\n        keys: [\n          ...modified.map(\n            filePath =>\n              `url:${event.project.web_url}/-/tree/${projectBranch}/${filePath}`,\n          ),\n          ...modified.map(\n            filePath =>\n              `url:${event.project.web_url}/-/blob/${projectBranch}/${filePath}`,\n          ),\n        ],\n      });\n    }\n\n    this.logger.info(\n      `Processed GitLab push event from ${event.project.web_url}: added ${added.length} - removed ${removed.length} - modified ${modified.length}`,\n    );\n  }\n\n  /**\n   * Gets files matching the specified commit action and catalog file name.\n   *\n   * @param event - The push event payload.\n   * @param action - The action type ('added', 'removed', or 'modified').\n   * @param catalogFile - The catalog file name.\n   * @returns An array of file paths.\n   */\n  private getFilesMatchingConfig(\n    event: WebhookPushEventSchema,\n    action: 'added' | 'removed' | 'modified',\n    catalogFile: string,\n  ): string[] {\n    if (!event.commits) {\n      return [];\n    }\n\n    const matchingFiles = event.commits.flatMap((element: any) =>\n      element[action].filter(\n        (file: string) => path.basename(file) === catalogFile,\n      ),\n    );\n\n    if (matchingFiles.length === 0) {\n      this.logger.debug(\n        `No files matching '${catalogFile}' found in the commits.`,\n      );\n    }\n\n    return matchingFiles;\n  }\n\n  /**\n   * Creates Backstage location specs for committed files.\n   *\n   * @param project - The GitLab project information.\n   * @param addedFiles - The array of added file paths.\n   * @returns An array of location specs.\n   */\n  private createLocationSpecCommitedFiles(\n    project: WebhookProjectSchema,\n    addedFiles: string[],\n  ): LocationSpec[] {\n    const projectBranch =\n      this.config.branch ??\n      project.default_branch ??\n      this.config.fallbackBranch;\n\n    // Filter added files that match the catalog file pattern\n    const matchingFiles = addedFiles.filter(\n      file => path.basename(file) === this.config.catalogFile,\n    );\n\n    // Create a location spec for each matching file\n    const locationSpecs: LocationSpec[] = matchingFiles.map(file => ({\n      type: 'url',\n      target: `${project.web_url}/-/blob/${projectBranch}/${file}`,\n      presence: 'optional',\n    }));\n\n    return locationSpecs;\n  }\n\n  /**\n   * Converts a target URL to a LocationSpec object.\n   *\n   * @param target - The target URL to be converted.\n   * @returns The LocationSpec object representing the URL.\n   */\n  private toLocationSpec(target: string): LocationSpec {\n    return {\n      type: 'url',\n      target: target,\n      presence: 'optional',\n    };\n  }\n\n  private toDeferredEntities(targets: string[]): DeferredEntity[] {\n    return targets\n      .map(target => {\n        const location = this.toLocationSpec(target);\n\n        return locationSpecToLocationEntity({ location });\n      })\n      .map(entity => {\n        return {\n          locationKey: this.getProviderName(),\n          entity: entity,\n        };\n      });\n  }\n\n  private async shouldProcessProject(\n    project: GitLabProject,\n    client: GitLabClient,\n  ): Promise<boolean> {\n    if (!this.config.projectPattern.test(project.path_with_namespace ?? '')) {\n      this.logger.debug(\n        `Skipping project ${project.path_with_namespace} as it does not match the project pattern ${this.config.projectPattern}.`,\n      );\n      return false;\n    }\n\n    if (\n      this.config.group &&\n      !project.path_with_namespace!.startsWith(`${this.config.group}/`)\n    ) {\n      this.logger.debug(\n        `Skipping project ${project.path_with_namespace} as it does not match the group pattern ${this.config.group}.`,\n      );\n      return false;\n    }\n\n    if (\n      this.config.skipForkedRepos &&\n      project.hasOwnProperty('forked_from_project')\n    ) {\n      this.logger.debug(\n        `Skipping project ${project.path_with_namespace} as it is a forked project.`,\n      );\n      return false;\n    }\n\n    if (this.config.excludeRepos?.includes(project.path_with_namespace ?? '')) {\n      this.logger.debug(\n        `Skipping project ${project.path_with_namespace} as it is excluded.`,\n      );\n      return false;\n    }\n\n    const project_branch =\n      this.config.branch ??\n      project.default_branch ??\n      this.config.fallbackBranch;\n\n    const hasFile = await client.hasFile(\n      project.path_with_namespace ?? '',\n      project_branch,\n      this.config.catalogFile,\n    );\n\n    return hasFile;\n  }\n}\n"],"names":["config","readGitlabConfigs","ScmIntegrations","GitLabClient","uuid","locationSpecToLocationEntity","paginated","path"],"mappings":"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"}