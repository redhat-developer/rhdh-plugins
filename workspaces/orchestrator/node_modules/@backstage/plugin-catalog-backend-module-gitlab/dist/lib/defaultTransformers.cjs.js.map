{"version":3,"file":"defaultTransformers.cjs.js","sources":["../../src/lib/defaultTransformers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { GroupEntity, UserEntity } from '@backstage/catalog-model';\nimport {\n  GitLabGroup,\n  GroupNameTransformerOptions,\n  GroupTransformerOptions,\n  UserTransformerOptions,\n} from './types';\n\nexport function defaultGroupNameTransformer(\n  options: GroupNameTransformerOptions,\n): string {\n  if (\n    options.providerConfig.group &&\n    options.group.full_path.startsWith(`${options.providerConfig.group}/`)\n  ) {\n    return options.group.full_path\n      .replace(`${options.providerConfig.group}/`, '')\n      .replaceAll('/', '-');\n  }\n  return options.group.full_path.replaceAll('/', '-');\n}\n\nexport function defaultGroupEntitiesTransformer(\n  options: GroupTransformerOptions,\n): GroupEntity[] {\n  const idMapped: { [groupId: number]: GitLabGroup } = {};\n  const entities: GroupEntity[] = [];\n\n  for (const group of options.groups) {\n    idMapped[group.id] = group;\n  }\n\n  for (const group of options.groups) {\n    const annotations: { [annotationName: string]: string } = {};\n\n    annotations[`${options.providerConfig.host}/team-path`] = group.full_path;\n    if (group.visibility !== undefined) {\n      annotations[`${options.providerConfig.host}/visibility`] =\n        group.visibility;\n    }\n\n    const entity: GroupEntity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Group',\n      metadata: {\n        name: options.groupNameTransformer({\n          group,\n          providerConfig: options.providerConfig,\n        }),\n        annotations: annotations,\n      },\n      spec: {\n        type: 'team',\n        children: [],\n        profile: {\n          displayName: group.name,\n        },\n      },\n    };\n\n    if (group.description) {\n      entity.metadata.description = group.description;\n    }\n\n    if (group.parent_id && idMapped.hasOwnProperty(group.parent_id)) {\n      entity.spec.parent = options.groupNameTransformer({\n        group: idMapped[group.parent_id],\n        providerConfig: options.providerConfig,\n      });\n    }\n\n    entities.push(entity);\n  }\n\n  return entities;\n}\n\n/**\n * The default implementation of the transformation from a graph user entry to\n * a User entity.\n *\n * @public\n */\nexport function defaultUserTransformer(\n  options: UserTransformerOptions,\n): UserEntity {\n  const annotations: { [annotationName: string]: string } = {};\n\n  annotations[`${options.integrationConfig.host}/user-login`] =\n    options.user.web_url;\n  if (options.user?.group_saml_identity?.extern_uid) {\n    annotations[`${options.integrationConfig.host}/saml-external-uid`] =\n      options.user.group_saml_identity.extern_uid;\n  }\n\n  const entity: UserEntity = {\n    apiVersion: 'backstage.io/v1alpha1',\n    kind: 'User',\n    metadata: {\n      name: options.user.username,\n      annotations: annotations,\n    },\n    spec: {\n      profile: {\n        displayName: options.user.name || undefined,\n        picture: options.user.avatar_url || undefined,\n      },\n      memberOf: [],\n    },\n  };\n\n  if (options.user.email) {\n    if (!entity.spec) {\n      entity.spec = {};\n    }\n\n    if (!entity.spec.profile) {\n      entity.spec.profile = {};\n    }\n\n    entity.spec.profile.email = options.user.email;\n  }\n\n  if (options.user.groups) {\n    for (const group of options.user.groups) {\n      if (!entity.spec.memberOf) {\n        entity.spec.memberOf = [];\n      }\n      entity.spec.memberOf.push(\n        options.groupNameTransformer({\n          group,\n          providerConfig: options.providerConfig,\n        }),\n      );\n    }\n  }\n\n  return entity;\n}\n"],"names":[],"mappings":"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"}