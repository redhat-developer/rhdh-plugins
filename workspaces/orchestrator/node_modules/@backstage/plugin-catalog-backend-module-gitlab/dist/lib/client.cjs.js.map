{"version":3,"file":"client.cjs.js","sources":["../../src/lib/client.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// NOTE(freben): Intentionally uses node-fetch because of https://github.com/backstage/backstage/issues/28190\nimport fetch from 'node-fetch';\n\nimport {\n  getGitLabRequestOptions,\n  GitLabIntegrationConfig,\n} from '@backstage/integration';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport {\n  GitLabDescendantGroupsResponse,\n  GitLabGroup,\n  GitLabGroupMembersResponse,\n  GitLabProject,\n  GitLabUser,\n  PagedResponse,\n} from './types';\n\nexport type CommonListOptions = {\n  [key: string]: string | number | boolean | undefined;\n  per_page?: number | undefined;\n  page?: number | undefined;\n  active?: boolean;\n};\n\ninterface ListProjectOptions extends CommonListOptions {\n  archived?: boolean;\n  group?: string;\n  membership?: boolean;\n  topics?: string;\n  simple?: boolean;\n}\n\ninterface UserListOptions extends CommonListOptions {\n  without_project_bots?: boolean | undefined;\n  exclude_internal?: boolean | undefined;\n}\n\nexport class GitLabClient {\n  private readonly config: GitLabIntegrationConfig;\n  private readonly logger: LoggerService;\n\n  constructor(options: {\n    config: GitLabIntegrationConfig;\n    logger: LoggerService;\n  }) {\n    this.config = options.config;\n    this.logger = options.logger;\n  }\n\n  /**\n   * Indicates whether the client is for a SaaS or self managed GitLab instance.\n   */\n  isSelfManaged(): boolean {\n    return this.config.host !== 'gitlab.com';\n  }\n\n  async listProjects(\n    options?: ListProjectOptions,\n  ): Promise<PagedResponse<any>> {\n    if (options?.group) {\n      return this.pagedRequest(\n        `/groups/${encodeURIComponent(options?.group)}/projects`,\n        {\n          ...options,\n          include_subgroups: true,\n        },\n      );\n    }\n\n    return this.pagedRequest(`/projects`, options);\n  }\n\n  async getProjectById(\n    projectId: number,\n    options?: CommonListOptions,\n  ): Promise<GitLabProject> {\n    // Make the request to the GitLab API\n    const response = await this.nonPagedRequest(\n      `/projects/${projectId}`,\n      options,\n    );\n\n    return response;\n  }\n\n  async getGroupById(\n    groupId: number,\n    options?: CommonListOptions,\n  ): Promise<GitLabGroup> {\n    // Make the request to the GitLab API\n    const response = await this.nonPagedRequest(`/groups/${groupId}`, options);\n\n    return response;\n  }\n\n  async getUserById(\n    userId: number,\n    options?: CommonListOptions,\n  ): Promise<GitLabUser> {\n    // Make the request to the GitLab API\n    const response = await this.nonPagedRequest(`/users/${userId}`, options);\n\n    return response;\n  }\n\n  async listGroupMembers(\n    groupPath: string,\n    options?: CommonListOptions,\n  ): Promise<PagedResponse<GitLabUser>> {\n    return this.pagedRequest(\n      `/groups/${encodeURIComponent(groupPath)}/members/all`,\n      options,\n    );\n  }\n\n  async listUsers(\n    options?: UserListOptions,\n  ): Promise<PagedResponse<GitLabUser>> {\n    return this.pagedRequest(`/users?`, {\n      ...options,\n      without_project_bots: true,\n      exclude_internal: true,\n    });\n  }\n\n  async listSaaSUsers(\n    groupPath: string,\n    options?: CommonListOptions,\n    includeUsersWithoutSeat?: boolean,\n  ): Promise<PagedResponse<GitLabUser>> {\n    const botFilterRegex = /^(?:project|group)_(\\w+)_bot_(\\w+)$/;\n\n    return this.listGroupMembers(groupPath, {\n      ...options,\n      active: true, // Users with seat are always active but for users without seat we need to filter\n      show_seat_info: true,\n    }).then(resp => {\n      // Filter is optional to allow to import Gitlab Free users without seats\n      // https://github.com/backstage/backstage/issues/26438\n      // Filter out API tokens https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#bot-users-for-projects\n      if (includeUsersWithoutSeat) {\n        resp.items = resp.items.filter(user => {\n          return !botFilterRegex.test(user.username);\n        });\n      } else {\n        resp.items = resp.items.filter(user => user.is_using_seat);\n      }\n      return resp;\n    });\n  }\n\n  async listGroups(\n    options?: CommonListOptions,\n  ): Promise<PagedResponse<GitLabGroup>> {\n    return this.pagedRequest(`/groups`, options);\n  }\n\n  // https://docs.gitlab.com/ee/api/groups.html#list-group-details\n  // id can either be group id or encoded full path\n  async getGroupByPath(\n    groupPath: string,\n    options?: CommonListOptions,\n  ): Promise<GitLabGroup> {\n    return this.nonPagedRequest(\n      `/groups/${encodeURIComponent(groupPath)}`,\n      options,\n    );\n  }\n\n  async listDescendantGroups(\n    groupPath: string,\n  ): Promise<PagedResponse<GitLabGroup>> {\n    const items: GitLabGroup[] = [];\n    let hasNextPage: boolean = false;\n    let endCursor: string | null = null;\n\n    do {\n      const response: GitLabDescendantGroupsResponse =\n        await this.fetchWithRetry(`${this.config.baseUrl}/api/graphql`, {\n          method: 'POST',\n          headers: {\n            ...getGitLabRequestOptions(this.config).headers,\n            ['Content-Type']: 'application/json',\n          },\n          body: JSON.stringify({\n            variables: { group: groupPath, endCursor },\n            query: /* GraphQL */ `\n              query listDescendantGroups($group: ID!, $endCursor: String) {\n                group(fullPath: $group) {\n                  descendantGroups(first: 100, after: $endCursor) {\n                    nodes {\n                      id\n                      name\n                      description\n                      fullPath\n                      visibility\n                      parent {\n                        id\n                      }\n                    }\n                    pageInfo {\n                      endCursor\n                      hasNextPage\n                    }\n                  }\n                }\n              }\n            `,\n          }),\n        }).then(r => r.json());\n      if (response.errors) {\n        throw new Error(`GraphQL errors: ${JSON.stringify(response.errors)}`);\n      }\n\n      if (!response.data.group?.descendantGroups?.nodes) {\n        this.logger.warn(\n          `Couldn't get groups under ${groupPath}. The provided token might not have sufficient permissions`,\n        );\n        continue;\n      }\n\n      for (const groupItem of response.data.group.descendantGroups.nodes.filter(\n        group => group?.id,\n      )) {\n        const formattedGroupResponse = {\n          id: Number(groupItem.id.replace(/^gid:\\/\\/gitlab\\/Group\\//, '')),\n          name: groupItem.name,\n          description: groupItem.description,\n          full_path: groupItem.fullPath,\n          visibility: groupItem.visibility,\n          parent_id: Number(\n            groupItem.parent.id.replace(/^gid:\\/\\/gitlab\\/Group\\//, ''),\n          ),\n        };\n\n        items.push(formattedGroupResponse);\n      }\n      ({ hasNextPage, endCursor } =\n        response.data.group.descendantGroups.pageInfo);\n    } while (hasNextPage);\n    return { items };\n  }\n\n  async getGroupMembers(\n    groupPath: string,\n    relations: string[],\n  ): Promise<PagedResponse<GitLabUser>> {\n    const items: GitLabUser[] = [];\n    let hasNextPage: boolean = false;\n    let endCursor: string | null = null;\n    do {\n      const response: GitLabGroupMembersResponse = await this.fetchWithRetry(\n        `${this.config.baseUrl}/api/graphql`,\n        {\n          method: 'POST',\n          headers: {\n            ...getGitLabRequestOptions(this.config).headers,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            variables: { group: groupPath, relations: relations, endCursor },\n            query: /* GraphQL */ `\n              query getGroupMembers(\n                $group: ID!\n                $relations: [GroupMemberRelation!]\n                $endCursor: String\n              ) {\n                group(fullPath: $group) {\n                  groupMembers(\n                    first: 100\n                    relations: $relations\n                    after: $endCursor\n                  ) {\n                    nodes {\n                      user {\n                        id\n                        username\n                        publicEmail\n                        name\n                        state\n                        webUrl\n                        avatarUrl\n                      }\n                    }\n                    pageInfo {\n                      endCursor\n                      hasNextPage\n                    }\n                  }\n                }\n              }\n            `,\n          }),\n        },\n      ).then(r => r.json());\n      if (response.errors) {\n        throw new Error(`GraphQL errors: ${JSON.stringify(response.errors)}`);\n      }\n\n      if (!response.data.group?.groupMembers?.nodes) {\n        this.logger.warn(\n          `Couldn't get members for group ${groupPath}. The provided token might not have sufficient permissions`,\n        );\n        continue;\n      }\n\n      for (const userItem of response.data.group.groupMembers.nodes.filter(\n        user => user.user?.id,\n      )) {\n        const formattedUserResponse = {\n          id: Number(userItem.user.id.replace(/^gid:\\/\\/gitlab\\/User\\//, '')),\n          username: userItem.user.username,\n          email: userItem.user.publicEmail,\n          name: userItem.user.name,\n          state: userItem.user.state,\n          web_url: userItem.user.webUrl,\n          avatar_url: userItem.user.avatarUrl,\n        };\n\n        items.push(formattedUserResponse);\n      }\n      ({ hasNextPage, endCursor } = response.data.group.groupMembers.pageInfo);\n    } while (hasNextPage);\n    return { items };\n  }\n\n  /**\n   * General existence check.\n   *\n   * @param projectPath - The path to the project\n   * @param branch - The branch used to search\n   * @param filePath - The path to the file\n   */\n  async hasFile(\n    projectPath: string,\n    branch: string,\n    filePath: string,\n  ): Promise<boolean> {\n    const endpoint: string = `/projects/${encodeURIComponent(\n      projectPath,\n    )}/repository/files/${encodeURIComponent(filePath)}`;\n    const request = new URL(`${this.config.apiBaseUrl}${endpoint}`);\n    request.searchParams.append('ref', branch);\n\n    const response = await this.fetchWithRetry(request.toString(), {\n      headers: getGitLabRequestOptions(this.config).headers,\n      method: 'HEAD',\n    });\n\n    if (!response.ok) {\n      if (response.status >= 500) {\n        this.logger.debug(\n          `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n            response.status\n          } - ${response.statusText}`,\n        );\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Performs a request against a given paginated GitLab endpoint.\n   *\n   * This method may be used to perform authenticated REST calls against any\n   * paginated GitLab endpoint which uses X-NEXT-PAGE headers. The return value\n   * can be be used with the {@link paginated} async-generator function to yield\n   * each item from the paged request.\n   *\n   * @see {@link paginated}\n   * @param endpoint - The request endpoint, e.g. /projects.\n   * @param options - Request queryString options which may also include page variables.\n   */\n  async pagedRequest<T = any>(\n    endpoint: string,\n    options?: CommonListOptions,\n  ): Promise<PagedResponse<T>> {\n    const request = new URL(`${this.config.apiBaseUrl}${endpoint}`);\n\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const value = options[key];\n        if (value !== undefined && value !== '') {\n          request.searchParams.append(key, value.toString());\n        }\n      }\n    }\n\n    this.logger.debug(`Fetching: ${request.toString()}`);\n    const response = await this.fetchWithRetry(\n      request.toString(),\n      getGitLabRequestOptions(this.config),\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n          response.status\n        } - ${response.statusText}`,\n      );\n    }\n\n    return response.json().then(items => {\n      const nextPage = response.headers.get('x-next-page');\n\n      return {\n        items,\n        nextPage: nextPage ? Number(nextPage) : null,\n      } as PagedResponse<any>;\n    });\n  }\n\n  async nonPagedRequest<T = any>(\n    endpoint: string,\n    options?: CommonListOptions,\n  ): Promise<T> {\n    const request = new URL(`${this.config.apiBaseUrl}${endpoint}`);\n\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const value = options[key];\n        if (value !== undefined && value !== '') {\n          request.searchParams.append(key, value.toString());\n        }\n      }\n    }\n\n    const response = await this.fetchWithRetry(\n      request.toString(),\n      getGitLabRequestOptions(this.config),\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n          response.status\n        } - ${response.statusText}`,\n      );\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Performs a fetch request with retry logic for rate limiting (429 errors)\n   * @param url - The URL to fetch\n   * @param options - Fetch options\n   * @param retries - Maximum number of retries\n   * @param initialBackoff - Initial backoff time in ms\n   */\n  async fetchWithRetry(\n    url: string,\n    options: fetch.RequestInit,\n    retries = 5,\n    initialBackoff = 100,\n  ): Promise<fetch.Response> {\n    let currentRetry = 0;\n    let backoff = initialBackoff;\n\n    for (;;) {\n      const response = await fetch(url, options);\n\n      if (response.status !== 429 || currentRetry >= retries) {\n        return response;\n      }\n\n      // Get retry-after header if available, or use exponential backoff\n      const retryAfter = response.headers.get('Retry-After');\n      const waitTime = retryAfter ? parseInt(retryAfter, 10) * 1000 : backoff;\n\n      this.logger.warn(\n        `GitLab API rate limit exceeded, retrying in ${waitTime}ms (retry ${\n          currentRetry + 1\n        }/${retries})`,\n      );\n\n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, waitTime));\n\n      // Exponential backoff with jitter\n      backoff = backoff * 2 * (0.8 + Math.random() * 0.4);\n      currentRetry++;\n    }\n  }\n}\n\n/**\n * Advances through each page and provides each item from a paginated request.\n *\n * The async generator function yields each item from repeated calls to the\n * provided request function. The generator walks through each available page by\n * setting the page key in the options passed into the request function and\n * making repeated calls until there are no more pages.\n *\n * @see {@link pagedRequest}\n * @param request - Function which returns a PagedResponse to walk through.\n * @param options - Initial ListOptions for the request function.\n */\nexport async function* paginated<T = any>(\n  request: (options: CommonListOptions) => Promise<PagedResponse<T>>,\n  options: CommonListOptions,\n) {\n  let res;\n  do {\n    res = await request(options);\n    options.page = res.nextPage;\n    for (const item of res.items) {\n      yield item;\n    }\n  } while (res.nextPage);\n}\n"],"names":["getGitLabRequestOptions","fetch"],"mappings":"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"}