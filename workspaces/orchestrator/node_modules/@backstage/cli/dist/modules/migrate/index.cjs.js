'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var factory = require('../../wiring/factory.cjs.js');
var commander = require('commander');
var lazy = require('../../lib/lazy.cjs.js');

var index = factory.createCliPlugin({
  pluginId: "migrate",
  init: async (reg) => {
    reg.addCommand({
      path: ["versions:migrate"],
      description: "Migrate any plugins that have been moved to the @backstage-community namespace automatically",
      execute: async ({ args }) => {
        const command = new commander.Command();
        const defaultCommand = command.option(
          "--pattern <glob>",
          "Override glob for matching packages to upgrade"
        ).option(
          "--skip-code-changes",
          "Skip code changes and only update package.json files"
        ).action(lazy.lazy(() => import('./commands/versions/migrate.cjs.js'), "default"));
        await defaultCommand.parseAsync(args, { from: "user" });
      }
    });
    reg.addCommand({
      path: ["versions:bump"],
      description: "Bump Backstage packages to the latest versions",
      execute: async ({ args }) => {
        const command = new commander.Command();
        const defaultCommand = command.option(
          "--pattern <glob>",
          "Override glob for matching packages to upgrade"
        ).option(
          "--release <version|next|main>",
          "Bump to a specific Backstage release line or version",
          "main"
        ).option("--skip-install", "Skips yarn install step").option("--skip-migrate", "Skips migration of any moved packages").action(lazy.lazy(() => import('./commands/versions/bump.cjs.js'), "default"));
        await defaultCommand.parseAsync(args, { from: "user" });
      }
    });
    reg.addCommand({
      path: ["migrate", "package-roles"],
      description: `Add package role field to packages that don't have it`,
      execute: async ({ args }) => {
        const command = new commander.Command();
        const defaultCommand = command.action(
          lazy.lazy(() => import('./commands/packageRole.cjs.js'), "default")
        );
        await defaultCommand.parseAsync(args, { from: "user" });
      }
    });
    reg.addCommand({
      path: ["migrate", "package-scripts"],
      description: "Set package scripts according to each package role",
      execute: async ({ args }) => {
        const command = new commander.Command();
        const defaultCommand = command.action(
          lazy.lazy(() => import('./commands/packageScripts.cjs.js'), "command")
        );
        await defaultCommand.parseAsync(args, { from: "user" });
      }
    });
    reg.addCommand({
      path: ["migrate", "package-exports"],
      description: "Synchronize package subpath export definitions",
      execute: async ({ args }) => {
        const command = new commander.Command();
        const defaultCommand = command.action(
          lazy.lazy(() => import('./commands/packageExports.cjs.js'), "command")
        );
        await defaultCommand.parseAsync(args, { from: "user" });
      }
    });
    reg.addCommand({
      path: ["migrate", "package-lint-configs"],
      description: "Migrates all packages to use @backstage/cli/config/eslint-factory",
      execute: async ({ args }) => {
        const command = new commander.Command();
        const defaultCommand = command.action(
          lazy.lazy(() => import('./commands/packageLintConfigs.cjs.js'), "command")
        );
        await defaultCommand.parseAsync(args, { from: "user" });
      }
    });
    reg.addCommand({
      path: ["migrate", "react-router-deps"],
      description: "Migrates the react-router dependencies for all packages to be peer dependencies",
      execute: async ({ args }) => {
        const command = new commander.Command();
        const defaultCommand = command.action(
          lazy.lazy(() => import('./commands/reactRouterDeps.cjs.js'), "command")
        );
        await defaultCommand.parseAsync(args, { from: "user" });
      }
    });
  }
});

exports.default = index;
//# sourceMappingURL=index.cjs.js.map
