'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var configLoader = require('@backstage/config-loader');
var openBrowser = require('react-dev-utils/openBrowser');
var chalk = require('chalk');
var config = require('../lib/config.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var openBrowser__default = /*#__PURE__*/_interopDefaultCompat(openBrowser);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

const DOCS_URL = "https://config.backstage.io";
var docs = async (opts) => {
  const { schema: appSchemas } = await config.loadCliConfig({
    args: [],
    fromPackage: opts.package,
    mockEnv: true
  });
  const schema = configLoader.mergeConfigSchemas(
    appSchemas.serialize().schemas.map(
      (_) => _.value
    )
  );
  const url = `${DOCS_URL}#schema=${JSON.stringify(schema)}`;
  console.log();
  console.log(
    chalk__default.default.cyan(
      "Opening configuration reference documentation in your browser..."
    )
  );
  console.log(`  ${chalk__default.default.cyan(url)}`);
  console.log();
  const opened = openBrowser__default.default(url);
  if (!opened) {
    console.log(
      chalk__default.default.yellow("\u26A0\uFE0F  WARNING: Unable to open browser automatically.")
    );
    console.log(chalk__default.default.yellow("Please open the URL manually in your browser."));
  }
};

exports.default = docs;
//# sourceMappingURL=docs.cjs.js.map
