'use strict';

var handlebars = require('handlebars');
var camelCase = require('lodash/camelCase');
var kebabCase = require('lodash/kebabCase');
var lowerCase = require('lodash/lowerCase');
var snakeCase = require('lodash/snakeCase');
var startCase = require('lodash/startCase');
var upperCase = require('lodash/upperCase');
var upperFirst = require('lodash/upperFirst');
var lowerFirst = require('lodash/lowerFirst');
var Lockfile = require('../../../../lib/versioning/Lockfile.cjs.js');
require('minimatch');
require('@manypkg/get-packages');
require('../../../../lib/versioning/yarn.cjs.js');
require('../../../../lib/run.cjs.js');
require('@backstage/errors');
var paths = require('../../../../lib/paths.cjs.js');
var version = require('../../../../lib/version.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var handlebars__default = /*#__PURE__*/_interopDefaultCompat(handlebars);
var camelCase__default = /*#__PURE__*/_interopDefaultCompat(camelCase);
var kebabCase__default = /*#__PURE__*/_interopDefaultCompat(kebabCase);
var lowerCase__default = /*#__PURE__*/_interopDefaultCompat(lowerCase);
var snakeCase__default = /*#__PURE__*/_interopDefaultCompat(snakeCase);
var startCase__default = /*#__PURE__*/_interopDefaultCompat(startCase);
var upperCase__default = /*#__PURE__*/_interopDefaultCompat(upperCase);
var upperFirst__default = /*#__PURE__*/_interopDefaultCompat(upperFirst);
var lowerFirst__default = /*#__PURE__*/_interopDefaultCompat(lowerFirst);

const builtInHelpers = {
  camelCase: camelCase__default.default,
  kebabCase: kebabCase__default.default,
  lowerCase: lowerCase__default.default,
  snakeCase: snakeCase__default.default,
  startCase: startCase__default.default,
  upperCase: upperCase__default.default,
  upperFirst: upperFirst__default.default,
  lowerFirst: lowerFirst__default.default
};
class PortableTemplater {
  static async create(options = {}) {
    let lockfile;
    try {
      lockfile = await Lockfile.Lockfile.load(paths.paths.resolveTargetRoot("yarn.lock"));
    } catch {
    }
    const versionProvider = version.createPackageVersionProvider(lockfile);
    const templater = new PortableTemplater(
      {
        versionQuery(name, versionHint) {
          return versionProvider(
            name,
            typeof versionHint === "string" ? versionHint : void 0
          );
        }
      },
      options.values ?? {}
    );
    if (options.templatedValues) {
      templater.appendTemplatedValues(options.templatedValues);
    }
    return templater;
  }
  #templater;
  #values;
  constructor(helpers, values) {
    this.#templater = handlebars__default.default.create();
    this.#templater.registerHelper(builtInHelpers);
    if (helpers) {
      this.#templater.registerHelper(helpers);
    }
    this.#values = values;
  }
  template(content) {
    return this.#templater.compile(content, {
      strict: true
    })(this.#values);
  }
  appendTemplatedValues(record) {
    const newValues = Object.fromEntries(
      Object.entries(record).map(([key, value]) => [key, this.template(value)])
    );
    this.#values = { ...this.#values, ...newValues };
  }
}

exports.PortableTemplater = PortableTemplater;
//# sourceMappingURL=PortableTemplater.cjs.js.map
