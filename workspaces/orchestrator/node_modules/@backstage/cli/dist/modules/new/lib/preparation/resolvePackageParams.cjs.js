'use strict';

var path = require('path');

function resolvePackageParams(options) {
  const baseName = getBaseNameForRole(options.roleParams);
  const isPlugin = options.roleParams.role.includes("plugin");
  const pluginInfix = isPlugin ? options.pluginInfix : "";
  return {
    packageName: `${options.packagePrefix}${pluginInfix}${baseName}`,
    packagePath: path.join(isPlugin ? "plugins" : "packages", baseName)
  };
}
function getBaseNameForRole(roleParams) {
  switch (roleParams.role) {
    case "web-library":
    case "node-library":
    case "common-library":
      return roleParams.name;
    case "plugin-web-library":
      return `${roleParams.pluginId}-react`;
    case "plugin-node-library":
      return `${roleParams.pluginId}-node`;
    case "plugin-common-library":
      return `${roleParams.pluginId}-common`;
    case "frontend-plugin":
      return `${roleParams.pluginId}`;
    case "frontend-plugin-module":
      return `${roleParams.pluginId}-module-${roleParams.moduleId}`;
    case "backend-plugin":
      return `${roleParams.pluginId}-backend`;
    case "backend-plugin-module":
      return `${roleParams.pluginId}-backend-module-${roleParams.moduleId}`;
    default:
      throw new Error(`Unknown role ${roleParams.role}`);
  }
}

exports.resolvePackageParams = resolvePackageParams;
//# sourceMappingURL=resolvePackageParams.cjs.js.map
