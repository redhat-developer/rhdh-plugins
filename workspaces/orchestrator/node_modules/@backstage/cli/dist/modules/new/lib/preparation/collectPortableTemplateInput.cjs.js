'use strict';

var inquirer = require('inquirer');
var codeowners = require('../codeowners/codeowners.cjs.js');
var paths = require('../../../../lib/paths.cjs.js');
var resolvePackageParams = require('./resolvePackageParams.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var inquirer__default = /*#__PURE__*/_interopDefaultCompat(inquirer);

async function collectPortableTemplateInput(options) {
  const { config, template, prefilledParams } = options;
  const codeOwnersFilePath = await codeowners.getCodeownersFilePath(paths.paths.targetRoot);
  const prompts = getPromptsForRole(template.role);
  if (codeOwnersFilePath) {
    prompts.push(ownerPrompt());
  }
  const deprecatedParams = {};
  if (config.isUsingDefaultTemplates && prefilledParams.id) {
    console.warn(
      `DEPRECATION WARNING: The 'id' parameter is deprecated, use 'pluginId' instead`
    );
    deprecatedParams.pluginId = prefilledParams.id;
  }
  const parameters = {
    ...template.values,
    ...prefilledParams,
    ...deprecatedParams
  };
  const needsAnswer = [];
  const prefilledAnswers = {};
  for (const prompt of prompts) {
    if (prompt.name && parameters[prompt.name] !== void 0) {
      prefilledAnswers[prompt.name] = parameters[prompt.name];
    } else {
      needsAnswer.push(prompt);
    }
  }
  const promptAnswers = await inquirer__default.default.prompt(
    needsAnswer
  );
  const answers = {
    ...prefilledAnswers,
    ...promptAnswers
  };
  const roleParams = {
    role: template.role,
    name: answers.name,
    pluginId: answers.pluginId,
    moduleId: answers.moduleId
  };
  const packageParams = resolvePackageParams.resolvePackageParams({
    roleParams,
    packagePrefix: config.packageNamePrefix,
    pluginInfix: config.packageNamePluginInfix
  });
  return {
    roleParams,
    owner: answers.owner,
    license: config.license,
    version: config.version,
    private: config.private,
    publishRegistry: config.publishRegistry,
    packageName: packageParams.packageName,
    packagePath: packageParams.packagePath
  };
}
function namePrompt() {
  return {
    type: "input",
    name: "name",
    message: "Enter the name of the package, without scope [required]",
    validate: (value) => {
      if (!value) {
        return "Please enter the name of the package";
      } else if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(value)) {
        return "Package names must be lowercase and contain only letters, digits, and dashes.";
      }
      return true;
    }
  };
}
function pluginIdPrompt() {
  return {
    type: "input",
    name: "pluginId",
    message: "Enter the ID of the plugin [required]",
    validate: (value) => {
      if (!value) {
        return "Please enter the ID of the plugin";
      } else if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(value)) {
        return "Plugin IDs must be lowercase and contain only letters, digits, and dashes.";
      }
      return true;
    }
  };
}
function moduleIdIdPrompt() {
  return {
    type: "input",
    name: "moduleId",
    message: "Enter the ID of the module [required]",
    validate: (value) => {
      if (!value) {
        return "Please enter the ID of the module";
      } else if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(value)) {
        return "Module IDs must be lowercase and contain only letters, digits, and dashes.";
      }
      return true;
    }
  };
}
function getPromptsForRole(role) {
  switch (role) {
    case "web-library":
    case "node-library":
    case "common-library":
      return [namePrompt()];
    case "plugin-web-library":
    case "plugin-node-library":
    case "plugin-common-library":
    case "frontend-plugin":
    case "backend-plugin":
      return [pluginIdPrompt()];
    case "frontend-plugin-module":
    case "backend-plugin-module":
      return [pluginIdPrompt(), moduleIdIdPrompt()];
    default:
      return [];
  }
}
function ownerPrompt() {
  return {
    type: "input",
    name: "owner",
    message: "Enter an owner to add to CODEOWNERS [optional]",
    validate: (value) => {
      if (!value) {
        return true;
      }
      const ownerIds = codeowners.parseOwnerIds(value);
      if (!ownerIds) {
        return "The owner must be a space separated list of team names (e.g. @org/team-name), usernames (e.g. @username), or the email addresses (e.g. user@example.com).";
      }
      return true;
    }
  };
}

exports.collectPortableTemplateInput = collectPortableTemplateInput;
exports.getPromptsForRole = getPromptsForRole;
exports.moduleIdIdPrompt = moduleIdIdPrompt;
exports.namePrompt = namePrompt;
exports.ownerPrompt = ownerPrompt;
exports.pluginIdPrompt = pluginIdPrompt;
//# sourceMappingURL=collectPortableTemplateInput.cjs.js.map
