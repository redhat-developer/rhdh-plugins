'use strict';

var fs = require('fs-extra');
var path = require('path');
var bundle = require('./bundler/bundle.cjs.js');
var moduleFederation = require('./bundler/moduleFederation.cjs.js');
require('chalk');
require('react-dev-utils/openBrowser');
require('@rspack/core');
require('@rspack/dev-server');
require('../../../lib/paths.cjs.js');
var config = require('../../config/lib/config.cjs.js');
require('eslint-rspack-plugin');
require('ts-checker-rspack-plugin');
require('html-webpack-plugin');
require('react-dev-utils/ModuleScopePlugin');
require('@module-federation/enhanced/rspack');
require('lodash/pickBy');
require('../../../lib/run.cjs.js');
require('../../../lib/version.cjs.js');
require('yn');
require('@manypkg/get-packages');
require('./bundler/packageDetection.cjs.js');
var parallel = require('../../../lib/parallel.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

async function buildFrontend(options) {
  const { targetDir, writeStats, configPaths, webpack } = options;
  const packageJson = await fs__default.default.readJson(
    path.resolve(targetDir, "package.json")
  );
  await bundle.buildBundle({
    targetDir,
    entry: "src/index",
    parallelism: parallel.getEnvironmentParallelism(),
    statsJsonEnabled: writeStats,
    moduleFederation: await moduleFederation.getModuleFederationOptions(
      packageJson,
      path.resolve(targetDir),
      options.isModuleFederationRemote
    ),
    ...await config.loadCliConfig({
      args: configPaths,
      fromPackage: packageJson.name
    }),
    webpack
  });
}

exports.buildFrontend = buildFrontend;
//# sourceMappingURL=buildFrontend.cjs.js.map
