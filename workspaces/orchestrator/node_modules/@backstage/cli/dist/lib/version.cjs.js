'use strict';

var fs = require('fs-extra');
var semver = require('semver');
var paths = require('./paths.cjs.js');
var _package$k = require('../packages/backend-plugin-api/package.json.cjs.js');
var _package$j = require('../packages/backend-test-utils/package.json.cjs.js');
var _package$i = require('../packages/catalog-client/package.json.cjs.js');
var _package$h = require('../packages/cli/package.json.cjs.js');
var _package$g = require('../packages/config/package.json.cjs.js');
var _package$f = require('../packages/core-app-api/package.json.cjs.js');
var _package$e = require('../packages/core-components/package.json.cjs.js');
var _package$d = require('../packages/core-plugin-api/package.json.cjs.js');
var _package$c = require('../packages/dev-utils/package.json.cjs.js');
var _package$b = require('../packages/errors/package.json.cjs.js');
var _package$a = require('../packages/frontend-defaults/package.json.cjs.js');
var _package$9 = require('../packages/frontend-plugin-api/package.json.cjs.js');
var _package$8 = require('../packages/frontend-test-utils/package.json.cjs.js');
var _package$7 = require('../packages/test-utils/package.json.cjs.js');
var _package$4 = require('../plugins/scaffolder-node/package.json.cjs.js');
var _package$3 = require('../plugins/scaffolder-node-test-utils/package.json.cjs.js');
var _package$2 = require('../plugins/auth-backend/package.json.cjs.js');
var _package$1 = require('../plugins/auth-backend-module-guest-provider/package.json.cjs.js');
var _package = require('../plugins/catalog-node/package.json.cjs.js');
var _package$6 = require('../packages/theme/package.json.cjs.js');
var _package$5 = require('../packages/types/package.json.cjs.js');
var _package$l = require('../packages/backend-defaults/package.json.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var semver__default = /*#__PURE__*/_interopDefaultCompat(semver);

const packageVersions = {
  "@backstage/backend-defaults": _package$l.version,
  "@backstage/backend-plugin-api": _package$k.version,
  "@backstage/backend-test-utils": _package$j.version,
  "@backstage/catalog-client": _package$i.version,
  "@backstage/cli": _package$h.version,
  "@backstage/config": _package$g.version,
  "@backstage/core-app-api": _package$f.version,
  "@backstage/core-components": _package$e.version,
  "@backstage/core-plugin-api": _package$d.version,
  "@backstage/dev-utils": _package$c.version,
  "@backstage/errors": _package$b.version,
  "@backstage/frontend-defaults": _package$a.version,
  "@backstage/frontend-plugin-api": _package$9.version,
  "@backstage/frontend-test-utils": _package$8.version,
  "@backstage/test-utils": _package$7.version,
  "@backstage/theme": _package$6.version,
  "@backstage/types": _package$5.version,
  "@backstage/plugin-scaffolder-node": _package$4.version,
  "@backstage/plugin-scaffolder-node-test-utils": _package$3.version,
  "@backstage/plugin-auth-backend": _package$2.version,
  "@backstage/plugin-auth-backend-module-guest-provider": _package$1.version,
  "@backstage/plugin-catalog-node": _package.version
};
function findVersion() {
  const pkgContent = fs__default.default.readFileSync(paths.paths.resolveOwn("package.json"), "utf8");
  return JSON.parse(pkgContent).version;
}
const version = findVersion();
fs__default.default.pathExistsSync(paths.paths.resolveOwn("src"));
function createPackageVersionProvider(lockfile) {
  return (name, versionHint) => {
    const packageVersion = packageVersions[name];
    const targetVersion = versionHint || packageVersion;
    if (!targetVersion) {
      throw new Error(`No version available for package ${name}`);
    }
    const lockfileEntries = lockfile?.get(name);
    for (const specifier of ["^", "~", "*"]) {
      const range = `workspace:${specifier}`;
      if (lockfileEntries?.some((entry) => entry.range === range)) {
        return range;
      }
    }
    const validRanges = lockfileEntries?.filter(
      (entry) => semver__default.default.satisfies(targetVersion, entry.range)
    );
    const highestRange = validRanges?.slice(-1)[0];
    if (highestRange?.range) {
      return highestRange?.range;
    }
    if (packageVersion) {
      return `^${packageVersion}`;
    }
    if (semver__default.default.parse(versionHint)?.prerelease.length) {
      return versionHint;
    }
    return versionHint?.match(/^[\d\.]+$/) ? `^${versionHint}` : versionHint;
  };
}

exports.createPackageVersionProvider = createPackageVersionProvider;
exports.findVersion = findVersion;
exports.packageVersions = packageVersions;
exports.version = version;
//# sourceMappingURL=version.cjs.js.map
