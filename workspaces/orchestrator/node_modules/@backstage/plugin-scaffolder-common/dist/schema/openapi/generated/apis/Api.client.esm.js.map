{"version":3,"file":"Api.client.esm.js","sources":["../../../../../src/schema/openapi/generated/apis/Api.client.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// ******************************************************************\n// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *\n// ******************************************************************\nimport { DiscoveryApi } from '../types/discovery';\nimport { FetchApi } from '../types/fetch';\nimport crossFetch from 'cross-fetch';\nimport { pluginId } from '../pluginId';\nimport * as parser from 'uri-template';\nimport { Action } from '../models/Action.model';\nimport { Autocomplete200Response } from '../models/Autocomplete200Response.model';\nimport { AutocompleteRequest } from '../models/AutocompleteRequest.model';\nimport { CancelTask200Response } from '../models/CancelTask200Response.model';\nimport { DryRun200Response } from '../models/DryRun200Response.model';\nimport { DryRunRequest } from '../models/DryRunRequest.model';\nimport { ListTasksResponse } from '../models/ListTasksResponse.model';\nimport { ListTemplatingExtensionsResponse } from '../models/ListTemplatingExtensionsResponse.model';\nimport { RetryRequest } from '../models/RetryRequest.model';\nimport { Scaffold201Response } from '../models/Scaffold201Response.model';\nimport { ScaffolderScaffoldOptions } from '../models/ScaffolderScaffoldOptions.model';\nimport { SerializedTask } from '../models/SerializedTask.model';\nimport { SerializedTaskEvent } from '../models/SerializedTaskEvent.model';\nimport { TemplateParameterSchema } from '../models/TemplateParameterSchema.model';\n\n/**\n * Wraps the Response type to convey a type on the json call.\n *\n * @public\n */\nexport type TypedResponse<T> = Omit<Response, 'json'> & {\n  json: () => Promise<T>;\n};\n\n/**\n * Options you can pass into a request for additional information.\n *\n * @public\n */\nexport interface RequestOptions {\n  token?: string;\n}\n/**\n * @public\n */\nexport type Autocomplete = {\n  path: {\n    provider: string;\n    resource: string;\n  };\n  body: AutocompleteRequest;\n};\n/**\n * @public\n */\nexport type CancelTask = {\n  path: {\n    taskId: string;\n  };\n};\n/**\n * @public\n */\nexport type DryRun = {\n  body: DryRunRequest;\n};\n/**\n * @public\n */\nexport type GetTask = {\n  path: {\n    taskId: string;\n  };\n};\n/**\n * @public\n */\nexport type GetTemplateParameterSchema = {\n  path: {\n    namespace: string;\n    kind: string;\n    name: string;\n  };\n};\n/**\n * @public\n */\nexport type ListActions = {};\n/**\n * @public\n */\nexport type ListTasks = {\n  query: {\n    createdBy?: Array<string>;\n    limit?: number;\n    offset?: number;\n    order?: Array<string>;\n    status?: Array<string>;\n  };\n};\n/**\n * @public\n */\nexport type ListTemplatingExtensions = {};\n/**\n * @public\n */\nexport type Retry = {\n  path: {\n    taskId: string;\n  };\n  body: RetryRequest;\n};\n/**\n * @public\n */\nexport type Scaffold = {\n  body: ScaffolderScaffoldOptions;\n};\n/**\n * @public\n */\nexport type StreamLogsPolling = {\n  path: {\n    taskId: string;\n  };\n  query: {\n    after?: number;\n  };\n};\n\n/**\n * @public\n */\nexport class DefaultApiClient {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly fetchApi: FetchApi;\n\n  constructor(options: {\n    discoveryApi: { getBaseUrl(pluginId: string): Promise<string> };\n    fetchApi?: { fetch: typeof fetch };\n  }) {\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi || { fetch: crossFetch };\n  }\n\n  /**\n   * Perform an autocomplete for the given provider and resource.\n   * @param provider -\n   * @param resource -\n   * @param autocompleteRequest -\n   */\n  public async autocomplete(\n    // @ts-ignore\n    request: Autocomplete,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Autocomplete200Response>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/autocomplete/{provider}/{resource}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      provider: request.path.provider,\n      resource: request.path.resource,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n\n  /**\n   * Sends a signal to a task broker to cancel the running task by taskId.\n   * @param taskId -\n   */\n  public async cancelTask(\n    // @ts-ignore\n    request: CancelTask,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<CancelTask200Response>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/tasks/{taskId}/cancel`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      taskId: request.path.taskId,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Perform a dry-run of a template\n   * @param dryRunRequest -\n   */\n  public async dryRun(\n    // @ts-ignore\n    request: DryRun,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<DryRun200Response>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/dry-run`;\n\n    const uri = parser.parse(uriTemplate).expand({});\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n\n  /**\n   * Get a task by ID.\n   * @param taskId -\n   */\n  public async getTask(\n    // @ts-ignore\n    request: GetTask,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<SerializedTask>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/tasks/{taskId}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      taskId: request.path.taskId,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Get template parameter schema.\n   * @param namespace -\n   * @param kind -\n   * @param name -\n   */\n  public async getTemplateParameterSchema(\n    // @ts-ignore\n    request: GetTemplateParameterSchema,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<TemplateParameterSchema>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/templates/{namespace}/{kind}/{name}/parameter-schema`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      namespace: request.path.namespace,\n      kind: request.path.kind,\n      name: request.path.name,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Returns a list of all installed actions.\n   */\n  public async listActions(\n    // @ts-ignore\n    request: ListActions,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Array<Action>>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/actions`;\n\n    const uri = parser.parse(uriTemplate).expand({});\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Returns a list of tasks, filtering by ownership and/or status if given.\n   * @param createdBy - Created by\n   * @param limit - Number of records to return in the response.\n   * @param offset - Number of records to skip in the query page.\n   * @param order - Order\n   * @param status - Status\n   */\n  public async listTasks(\n    // @ts-ignore\n    request: ListTasks,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<ListTasksResponse>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/tasks{?createdBy*,limit,offset,order*,status*}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      ...request.query,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Returns a structure describing the available templating extensions.\n   */\n  public async listTemplatingExtensions(\n    // @ts-ignore\n    request: ListTemplatingExtensions,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<ListTemplatingExtensionsResponse>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/templating-extensions`;\n\n    const uri = parser.parse(uriTemplate).expand({});\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Starts the task again from the point where it failed.\n   * @param taskId -\n   * @param retryRequest -\n   */\n  public async retry(\n    // @ts-ignore\n    request: Retry,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Scaffold201Response>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/tasks/{taskId}/retry`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      taskId: request.path.taskId,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n\n  /**\n   * Executes the scaffolding of a component, given a template and its parameter values.\n   * @param scaffolderScaffoldOptions -\n   */\n  public async scaffold(\n    // @ts-ignore\n    request: Scaffold,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Scaffold201Response>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/tasks`;\n\n    const uri = parser.parse(uriTemplate).expand({});\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n\n  /**\n   * Get events for a task by ID.\n   * @param taskId -\n   * @param after - Offset event ID to stream events after.\n   */\n  public async streamLogsPolling(\n    // @ts-ignore\n    request: StreamLogsPolling,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Array<SerializedTaskEvent>>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/v2/tasks/{taskId}/events{?after}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      taskId: request.path.taskId,\n      ...request.query,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n}\n"],"names":[],"mappings":"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"}