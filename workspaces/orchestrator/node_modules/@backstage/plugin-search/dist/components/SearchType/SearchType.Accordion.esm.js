import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, useEffect, Fragment, cloneElement } from 'react';
import { useApi } from '@backstage/core-plugin-api';
import { useSearch, searchApiRef } from '@backstage/plugin-search-react';
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import Box from '@material-ui/core/Box';
import Divider from '@material-ui/core/Divider';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import { makeStyles } from '@material-ui/core/styles';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Typography from '@material-ui/core/Typography';
import AllIcon from '@material-ui/icons/FontDownload';
import useAsync from 'react-use/esm/useAsync';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { searchTranslationRef } from '../../translation.esm.js';

const useStyles = makeStyles((theme) => ({
  icon: {
    color: theme.palette.text.primary
  },
  list: {
    width: "100%"
  },
  listItemIcon: {
    width: "24px",
    height: "24px"
  },
  accordion: {
    backgroundColor: theme.palette.background.paper
  },
  accordionSummary: {
    minHeight: "auto",
    "&.Mui-expanded": {
      minHeight: "auto"
    }
  },
  accordionSummaryContent: {
    margin: theme.spacing(2, 0),
    "&.Mui-expanded": {
      margin: theme.spacing(2, 0)
    }
  },
  accordionDetails: {
    padding: theme.spacing(0, 0, 1)
  }
}));
const SearchTypeAccordion = (props) => {
  const classes = useStyles();
  const { filters, setPageCursor, setTypes, term, types } = useSearch();
  const searchApi = useApi(searchApiRef);
  const [expanded, setExpanded] = useState(true);
  const { defaultValue, name, showCounts, types: givenTypes } = props;
  const { t } = useTranslationRef(searchTranslationRef);
  const toggleExpanded = () => setExpanded((prevState) => !prevState);
  const handleClick = (type) => {
    return () => {
      setTypes(type !== "" ? [type] : []);
      setPageCursor(void 0);
    };
  };
  useEffect(() => {
    if (defaultValue) {
      setTypes([defaultValue]);
    }
  }, []);
  const definedTypes = [
    {
      value: "",
      name: t("searchType.accordion.allTitle"),
      icon: /* @__PURE__ */ jsx(AllIcon, {})
    },
    ...givenTypes
  ];
  const selected = types[0] || "";
  const { value: resultCounts } = useAsync(async () => {
    if (!showCounts) {
      return {};
    }
    const counts = await Promise.all(
      definedTypes.map((type) => type.value).map(async (type) => {
        const { numberOfResults } = await searchApi.query({
          term,
          types: type ? [type] : [],
          filters: types.includes(type) || !types.length && !type ? filters : {},
          pageLimit: 0
        });
        return [
          type,
          numberOfResults !== void 0 ? t("searchType.accordion.numberOfResults", {
            number: numberOfResults >= 1e4 ? `>10000` : `${numberOfResults}`
          }) : " -- "
        ];
      })
    );
    return Object.fromEntries(counts);
  }, [filters, showCounts, term, types]);
  return /* @__PURE__ */ jsxs(Box, { children: [
    /* @__PURE__ */ jsx(Typography, { variant: "body2", component: "h2", children: name }),
    /* @__PURE__ */ jsxs(
      Accordion,
      {
        className: classes.accordion,
        expanded,
        onChange: toggleExpanded,
        children: [
          /* @__PURE__ */ jsx(
            AccordionSummary,
            {
              classes: {
                root: classes.accordionSummary,
                content: classes.accordionSummaryContent
              },
              expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, { className: classes.icon }),
              IconButtonProps: { size: "small" },
              children: expanded ? t("searchType.accordion.collapse") : definedTypes.filter((type) => type.value === selected)[0].name
            }
          ),
          /* @__PURE__ */ jsx(AccordionDetails, { classes: { root: classes.accordionDetails }, children: /* @__PURE__ */ jsx(
            List,
            {
              className: classes.list,
              component: "nav",
              "aria-label": "filter by type",
              disablePadding: true,
              dense: true,
              children: definedTypes.map((type) => /* @__PURE__ */ jsxs(Fragment, { children: [
                /* @__PURE__ */ jsx(Divider, {}),
                /* @__PURE__ */ jsxs(
                  ListItem,
                  {
                    selected: types[0] === type.value || types.length === 0 && type.value === "",
                    onClick: handleClick(type.value),
                    button: true,
                    children: [
                      /* @__PURE__ */ jsx(ListItemIcon, { children: cloneElement(type.icon, {
                        className: classes.listItemIcon
                      }) }),
                      /* @__PURE__ */ jsx(
                        ListItemText,
                        {
                          primary: type.name,
                          secondary: resultCounts && resultCounts[type.value]
                        }
                      )
                    ]
                  }
                )
              ] }, type.value))
            }
          ) })
        ]
      }
    )
  ] });
};

export { SearchTypeAccordion };
//# sourceMappingURL=SearchType.Accordion.esm.js.map
