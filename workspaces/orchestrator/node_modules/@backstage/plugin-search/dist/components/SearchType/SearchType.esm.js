import { jsxs, jsx } from 'react/jsx-runtime';
import Checkbox from '@material-ui/core/Checkbox';
import Chip from '@material-ui/core/Chip';
import FormControl from '@material-ui/core/FormControl';
import InputLabel from '@material-ui/core/InputLabel';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import Select from '@material-ui/core/Select';
import { makeStyles } from '@material-ui/core/styles';
import useEffectOnce from 'react-use/esm/useEffectOnce';
import { SearchTypeAccordion } from './SearchType.Accordion.esm.js';
import { SearchTypeTabs } from './SearchType.Tabs.esm.js';
import { useSearch } from '@backstage/plugin-search-react';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { searchTranslationRef } from '../../translation.esm.js';

const useStyles = makeStyles((theme) => ({
  label: {
    textTransform: "capitalize"
  },
  chips: {
    display: "flex",
    flexWrap: "wrap",
    marginTop: theme.spacing(1)
  },
  chip: {
    margin: 2
  }
}));
const SearchType = (props) => {
  const { className, defaultValue, name, values = [] } = props;
  const classes = useStyles();
  const { types, setTypes } = useSearch();
  const { t } = useTranslationRef(searchTranslationRef);
  useEffectOnce(() => {
    if (!types.length) {
      if (defaultValue && Array.isArray(defaultValue)) {
        setTypes(defaultValue);
      } else if (defaultValue) {
        setTypes([defaultValue]);
      }
    }
  });
  const handleChange = (e) => {
    const value = e.target.value;
    setTypes(value);
  };
  return /* @__PURE__ */ jsxs(
    FormControl,
    {
      className,
      variant: "filled",
      fullWidth: true,
      "data-testid": "search-typefilter-next",
      children: [
        /* @__PURE__ */ jsx(InputLabel, { className: classes.label, margin: "dense", children: name }),
        /* @__PURE__ */ jsx(
          Select,
          {
            multiple: true,
            variant: "outlined",
            value: types,
            onChange: handleChange,
            placeholder: t("searchType.allResults"),
            renderValue: (selected) => /* @__PURE__ */ jsx("div", { className: classes.chips, children: selected.map((value) => /* @__PURE__ */ jsx(
              Chip,
              {
                label: value,
                className: classes.chip,
                size: "small"
              },
              value
            )) }),
            children: values.map((value) => /* @__PURE__ */ jsxs(MenuItem, { value, children: [
              /* @__PURE__ */ jsx(Checkbox, { checked: types.indexOf(value) > -1 }),
              /* @__PURE__ */ jsx(ListItemText, { primary: value })
            ] }, value))
          }
        )
      ]
    }
  );
};
SearchType.Accordion = (props) => {
  return /* @__PURE__ */ jsx(SearchTypeAccordion, { ...props });
};
SearchType.Tabs = (props) => {
  return /* @__PURE__ */ jsx(SearchTypeTabs, { ...props });
};

export { SearchType };
//# sourceMappingURL=SearchType.esm.js.map
