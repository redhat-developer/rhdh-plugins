import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useContent } from '@backstage/core-components';
import { useRouteRef } from '@backstage/core-plugin-api';
import { SearchContextProvider, SearchBar, SearchResult, SearchResultPager } from '@backstage/plugin-search-react';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import Divider from '@material-ui/core/Divider';
import Grid from '@material-ui/core/Grid';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import IconButton from '@material-ui/core/IconButton';
import ArrowForwardIcon from '@material-ui/icons/ArrowForward';
import CloseIcon from '@material-ui/icons/Close';
import { useRef, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { rootRouteRef } from '../../plugin.esm.js';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { searchTranslationRef } from '../../translation.esm.js';

const useStyles = makeStyles((theme) => ({
  dialogTitle: {
    gap: theme.spacing(1),
    display: "grid",
    alignItems: "center",
    gridTemplateColumns: "1fr auto",
    "&> button": {
      marginTop: theme.spacing(1)
    }
  },
  input: {
    flex: 1
  },
  button: {
    "&:hover": {
      background: "none"
    }
  },
  // Reduces default height of the modal, keeping a gap of 128px between the top and bottom of the page.
  paperFullWidth: { height: "calc(100% - 128px)" },
  dialogActionsContainer: { padding: theme.spacing(1, 3) },
  viewResultsLink: { verticalAlign: "0.5em" }
}));
const Modal = ({
  toggleModal,
  resultItemComponents
}) => {
  const classes = useStyles();
  const navigate = useNavigate();
  const { transitions } = useTheme();
  const { focusContent } = useContent();
  const { t } = useTranslationRef(searchTranslationRef);
  const searchRootRoute = useRouteRef(rootRouteRef)();
  const searchBarRef = useRef(null);
  useEffect(() => {
    searchBarRef?.current?.focus();
  });
  const handleSearchResultClick = useCallback(() => {
    setTimeout(focusContent, transitions.duration.leavingScreen);
  }, [focusContent, transitions]);
  const handleSearchBarSubmit = useCallback(() => {
    const query = searchBarRef.current?.value ?? "";
    navigate(`${searchRootRoute}?query=${query}`);
    handleSearchResultClick();
  }, [navigate, handleSearchResultClick, searchRootRoute]);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(DialogTitle, { children: /* @__PURE__ */ jsxs(Box, { className: classes.dialogTitle, children: [
      /* @__PURE__ */ jsx(
        SearchBar,
        {
          className: classes.input,
          inputProps: { ref: searchBarRef },
          onSubmit: handleSearchBarSubmit
        }
      ),
      /* @__PURE__ */ jsx(IconButton, { "aria-label": "close", onClick: toggleModal, children: /* @__PURE__ */ jsx(CloseIcon, {}) })
    ] }) }),
    /* @__PURE__ */ jsxs(DialogContent, { children: [
      /* @__PURE__ */ jsx(
        Grid,
        {
          container: true,
          direction: "row-reverse",
          justifyContent: "flex-start",
          alignItems: "center",
          children: /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(
            Button,
            {
              className: classes.button,
              color: "primary",
              endIcon: /* @__PURE__ */ jsx(ArrowForwardIcon, {}),
              onClick: handleSearchBarSubmit,
              disableRipple: true,
              children: t("searchModal.viewFullResults")
            }
          ) })
        }
      ),
      /* @__PURE__ */ jsx(Divider, {}),
      /* @__PURE__ */ jsx(
        SearchResult,
        {
          onClick: handleSearchResultClick,
          onKeyDown: handleSearchResultClick,
          children: resultItemComponents
        }
      )
    ] }),
    /* @__PURE__ */ jsx(DialogActions, { className: classes.dialogActionsContainer, children: /* @__PURE__ */ jsx(Grid, { container: true, direction: "row", children: /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsx(SearchResultPager, {}) }) }) })
  ] });
};
const SearchModal = (props) => {
  const {
    open = true,
    hidden,
    toggleModal,
    children,
    resultItemComponents
  } = props;
  const classes = useStyles();
  return /* @__PURE__ */ jsx(
    Dialog,
    {
      classes: {
        paperFullWidth: classes.paperFullWidth
      },
      onClose: toggleModal,
      "aria-label": "Search Modal",
      "aria-modal": "true",
      fullWidth: true,
      maxWidth: "lg",
      open,
      hidden,
      children: open && /* @__PURE__ */ jsx(SearchContextProvider, { inheritParentContextIfAvailable: true, children: (children && children({
        toggleModal,
        resultItemComponents: resultItemComponents || []
      })) ?? /* @__PURE__ */ jsx(
        Modal,
        {
          toggleModal,
          resultItemComponents
        }
      ) })
    }
  );
};

export { Modal, SearchModal };
//# sourceMappingURL=SearchModal.esm.js.map
