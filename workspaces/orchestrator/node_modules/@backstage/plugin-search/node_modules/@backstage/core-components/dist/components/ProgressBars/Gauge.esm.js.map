{"version":3,"file":"Gauge.esm.js","sources":["../../../src/components/ProgressBars/Gauge.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackstagePalette } from '@backstage/theme';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Circle } from 'rc-progress';\nimport { ReactNode, useEffect, useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport classNames from 'classnames';\n\n/** @public */\nexport type GaugeClassKey =\n  | 'root'\n  | 'overlay'\n  | 'description'\n  | 'circle'\n  | 'colorUnknown';\n\nconst useStyles = makeStyles(\n  theme => ({\n    root: {\n      position: 'relative',\n      lineHeight: 0,\n    },\n    overlay: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -60%)',\n      fontSize: theme.typography.pxToRem(45),\n      fontWeight: theme.typography.fontWeightBold,\n      color: theme.palette.textContrast,\n    },\n    overlaySmall: {\n      fontSize: theme.typography.pxToRem(25),\n    },\n    description: {\n      fontSize: '100%',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      position: 'absolute',\n      wordBreak: 'break-all',\n      display: 'inline-block',\n    },\n    circle: {\n      width: '80%',\n      transform: 'translate(10%, 0)',\n    },\n    colorUnknown: {},\n  }),\n  { name: 'BackstageGauge' },\n);\n\n/** @public */\nexport type GaugeProps = {\n  value: number;\n  fractional?: boolean;\n  inverse?: boolean;\n  unit?: string;\n  max?: number;\n  size?: 'normal' | 'small';\n  description?: ReactNode;\n  getColor?: GaugePropsGetColor;\n  relativeToMax?: boolean;\n  decimalDigits?: number;\n};\n\n/** @public */\nexport type GaugePropsGetColorOptions = {\n  palette: BackstagePalette;\n  value: number;\n  inverse?: boolean;\n  max?: number;\n};\n\n/** @public */\nexport type GaugePropsGetColor = (args: GaugePropsGetColorOptions) => string;\n\nconst defaultGaugeProps = {\n  fractional: true,\n  inverse: false,\n  unit: '%',\n  max: 100,\n  relativeToMax: false,\n};\n\nexport const getProgressColor: GaugePropsGetColor = ({\n  palette,\n  value,\n  inverse,\n  max,\n}) => {\n  if (isNaN(value)) {\n    return '#ddd';\n  }\n\n  const actualMax = max ? max : defaultGaugeProps.max;\n  const actualValue = inverse ? actualMax - value : value;\n\n  if (actualValue < actualMax / 3) {\n    return palette.status.error;\n  } else if (actualValue < actualMax * (2 / 3)) {\n    return palette.status.warning;\n  }\n\n  return palette.status.ok;\n};\n\n/**\n * Circular Progress Bar\n *\n * @public\n *\n */\n\nexport function Gauge(props: GaugeProps) {\n  const [hoverRef, setHoverRef] = useState<HTMLDivElement | null>(null);\n  const { getColor = getProgressColor, size = 'normal' } = props;\n  const classes = useStyles(props);\n  const { palette } = useTheme();\n  const {\n    value,\n    fractional,\n    inverse,\n    unit,\n    max,\n    description,\n    relativeToMax,\n    decimalDigits,\n  } = {\n    ...defaultGaugeProps,\n    ...props,\n  };\n\n  let asPercentage: number;\n  if (relativeToMax) {\n    asPercentage = (value / max) * 100;\n  } else {\n    asPercentage = fractional ? Math.round(value * max) : value;\n  }\n  let asActual: number;\n  if (relativeToMax) {\n    asActual = value;\n  } else {\n    asActual = max !== 100 ? Math.round(value) : asPercentage;\n  }\n  const asDisplay =\n    decimalDigits === undefined\n      ? asActual.toString()\n      : asActual.toFixed(decimalDigits);\n\n  const [isHovering, setIsHovering] = useState(false);\n\n  useEffect(() => {\n    const node = hoverRef;\n    const handleMouseOver = () => setIsHovering(true);\n    const handleMouseOut = () => setIsHovering(false);\n    if (node && description) {\n      node.addEventListener('mouseenter', handleMouseOver);\n      node.addEventListener('mouseleave', handleMouseOut);\n\n      return () => {\n        node.removeEventListener('mouseenter', handleMouseOver);\n        node.removeEventListener('mouseleave', handleMouseOut);\n      };\n    }\n    return () => {\n      setIsHovering(false);\n    };\n  }, [description, hoverRef]);\n\n  return (\n    <Box {...{ ref: setHoverRef }} className={classes.root}>\n      <Circle\n        strokeLinecap=\"butt\"\n        percent={asPercentage}\n        strokeWidth={12}\n        trailWidth={12}\n        strokeColor={getColor({\n          palette,\n          value: asPercentage,\n          inverse,\n          max: relativeToMax ? 100 : max,\n        })}\n        className={classes.circle}\n      />\n      {description && isHovering ? (\n        <Box className={classes.description}>{description}</Box>\n      ) : (\n        <Box\n          className={classNames(classes.overlay, {\n            [classes.overlaySmall]: size === 'small',\n          })}\n        >\n          {isNaN(value) ? 'N/A' : `${asDisplay}${unit}`}\n        </Box>\n      )}\n    </Box>\n  );\n}\n"],"names":[],"mappings":"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"}