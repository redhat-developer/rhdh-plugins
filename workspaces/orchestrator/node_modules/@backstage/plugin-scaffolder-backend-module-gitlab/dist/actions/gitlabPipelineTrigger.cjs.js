'use strict';

var errors = require('@backstage/errors');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var util = require('../util.cjs.js');
var gitlabPipelineTrigger_examples = require('./gitlabPipelineTrigger.examples.cjs.js');
var helpers = require('./helpers.cjs.js');

const createTriggerGitlabPipelineAction = (options) => {
  const { integrations } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "gitlab:pipeline:trigger",
    description: "Triggers a GitLab Pipeline.",
    examples: gitlabPipelineTrigger_examples.examples,
    schema: {
      input: {
        repoUrl: (z) => z.string({
          description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`
        }),
        token: (z) => z.string({
          description: "The token to use for authorization to GitLab"
        }).optional(),
        projectId: (z) => z.number({
          description: "Project Id"
        }),
        tokenDescription: (z) => z.string({
          description: "Pipeline token description"
        }),
        branch: (z) => z.string({
          description: "Project branch"
        }),
        variables: (z) => z.record(z.string(), z.string(), {
          description: "A object/record of key-valued strings containing the pipeline variables."
        }).optional()
      },
      output: {
        pipelineUrl: (z) => z.string({
          description: "Pipeline Url"
        })
      }
    },
    async handler(ctx) {
      let pipelineTriggerToken = void 0;
      let pipelineTriggerId = void 0;
      const { repoUrl, projectId, tokenDescription, token, branch, variables } = ctx.input;
      const { host } = util.parseRepoUrl(repoUrl, integrations);
      const api = util.getClient({ host, integrations, token });
      try {
        ({ pipelineTriggerToken, pipelineTriggerId } = await ctx.checkpoint({
          key: `create.pipeline.token.${projectId}`,
          fn: async () => {
            const res = await api.PipelineTriggerTokens.create(
              projectId,
              tokenDescription
            );
            return {
              pipelineTriggerToken: res.token,
              pipelineTriggerId: res.id
            };
          }
        }));
        if (!pipelineTriggerToken) {
          ctx.logger.error(
            `Failed to create pipeline token for project ${projectId}.`
          );
          return;
        }
        ctx.logger.info(
          `Pipeline token id ${pipelineTriggerId} created for project ${projectId}.`
        );
        const pipelineTriggerResponse = await api.PipelineTriggerTokens.trigger(
          projectId,
          branch,
          pipelineTriggerToken,
          { variables }
        );
        if (!pipelineTriggerResponse.id) {
          ctx.logger.error(
            `Failed to trigger pipeline for project ${projectId}.`
          );
          return;
        }
        ctx.logger.info(
          `Pipeline id ${pipelineTriggerResponse.id} for project ${projectId} triggered.`
        );
        ctx.output("pipelineUrl", pipelineTriggerResponse.web_url);
      } catch (error) {
        throw new errors.InputError(
          `Failed to trigger Pipeline: ${helpers.getErrorMessage(error)}`
        );
      } finally {
        if (pipelineTriggerId) {
          try {
            await ctx.checkpoint({
              key: `create.delete.token.${projectId}`,
              fn: async () => {
                if (pipelineTriggerId) {
                  await api.PipelineTriggerTokens.remove(
                    projectId,
                    pipelineTriggerId
                  );
                }
              }
            });
            ctx.logger.info(
              // in version 18.0 of gitlab this was also deleting the pipeline
              // this is a problem in gitlab which is fixed in version 18.1
              // https://gitlab.com/gitlab-org/gitlab/-/issues/546669
              `Deleted pipeline trigger token with token id: ${pipelineTriggerId}.`
            );
          } catch (error) {
            ctx.logger.error(
              `Failed to delete pipeline trigger token with token id: ${pipelineTriggerId}.`
            );
          }
        }
      }
    }
  });
};

exports.createTriggerGitlabPipelineAction = createTriggerGitlabPipelineAction;
//# sourceMappingURL=gitlabPipelineTrigger.cjs.js.map
