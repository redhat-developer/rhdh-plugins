{"version":3,"file":"gitlabPipelineTrigger.cjs.js","sources":["../../src/actions/gitlabPipelineTrigger.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport {\n  ExpandedPipelineSchema,\n  PipelineTriggerTokenSchema,\n} from '@gitbeaker/rest';\nimport { getClient, parseRepoUrl } from '../util';\nimport { examples } from './gitlabPipelineTrigger.examples';\nimport { getErrorMessage } from './helpers';\n\n/**\n * Creates a `gitlab:pipeline:trigger` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createTriggerGitlabPipelineAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:pipeline:trigger',\n    description: 'Triggers a GitLab Pipeline.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        projectId: z =>\n          z.number({\n            description: 'Project Id',\n          }),\n        tokenDescription: z =>\n          z.string({\n            description: 'Pipeline token description',\n          }),\n        branch: z =>\n          z.string({\n            description: 'Project branch',\n          }),\n        variables: z =>\n          z\n            .record(z.string(), z.string(), {\n              description:\n                'A object/record of key-valued strings containing the pipeline variables.',\n            })\n            .optional(),\n      },\n      output: {\n        pipelineUrl: z =>\n          z.string({\n            description: 'Pipeline Url',\n          }),\n      },\n    },\n    async handler(ctx) {\n      let pipelineTriggerToken: string | undefined = undefined;\n      let pipelineTriggerId: number | undefined = undefined;\n\n      const { repoUrl, projectId, tokenDescription, token, branch, variables } =\n        ctx.input;\n\n      const { host } = parseRepoUrl(repoUrl, integrations);\n      const api = getClient({ host, integrations, token });\n\n      try {\n        ({ pipelineTriggerToken, pipelineTriggerId } = await ctx.checkpoint({\n          key: `create.pipeline.token.${projectId}`,\n          fn: async () => {\n            const res = (await api.PipelineTriggerTokens.create(\n              projectId,\n              tokenDescription,\n            )) as PipelineTriggerTokenSchema;\n            return {\n              pipelineTriggerToken: res.token,\n              pipelineTriggerId: res.id,\n            };\n          },\n        }));\n\n        if (!pipelineTriggerToken) {\n          ctx.logger.error(\n            `Failed to create pipeline token for project ${projectId}.`,\n          );\n          return;\n        }\n        ctx.logger.info(\n          `Pipeline token id ${pipelineTriggerId} created for project ${projectId}.`,\n        );\n\n        // Use the pipeline token to trigger the pipeline in the project\n        const pipelineTriggerResponse =\n          (await api.PipelineTriggerTokens.trigger(\n            projectId,\n            branch,\n            pipelineTriggerToken,\n            { variables },\n          )) as ExpandedPipelineSchema;\n\n        if (!pipelineTriggerResponse.id) {\n          ctx.logger.error(\n            `Failed to trigger pipeline for project ${projectId}.`,\n          );\n          return;\n        }\n\n        ctx.logger.info(\n          `Pipeline id ${pipelineTriggerResponse.id} for project ${projectId} triggered.`,\n        );\n\n        ctx.output('pipelineUrl', pipelineTriggerResponse.web_url);\n      } catch (error: any) {\n        // Handling other errors\n        throw new InputError(\n          `Failed to trigger Pipeline: ${getErrorMessage(error)}`,\n        );\n      } finally {\n        // Delete the pipeline token if it was created\n        if (pipelineTriggerId) {\n          try {\n            await ctx.checkpoint({\n              key: `create.delete.token.${projectId}`,\n              fn: async () => {\n                if (pipelineTriggerId) {\n                  // to make the current version of TypeScript happy\n                  await api.PipelineTriggerTokens.remove(\n                    projectId,\n                    pipelineTriggerId,\n                  );\n                }\n              },\n            });\n            ctx.logger.info(\n              // in version 18.0 of gitlab this was also deleting the pipeline\n              // this is a problem in gitlab which is fixed in version 18.1\n              // https://gitlab.com/gitlab-org/gitlab/-/issues/546669\n              `Deleted pipeline trigger token with token id: ${pipelineTriggerId}.`,\n            );\n          } catch (error: any) {\n            ctx.logger.error(\n              `Failed to delete pipeline trigger token with token id: ${pipelineTriggerId}.`,\n            );\n          }\n        }\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","parseRepoUrl","getClient","InputError","getErrorMessage"],"mappings":";;;;;;;;AAiCO,MAAM,iCAAA,GAAoC,CAAC,OAAA,KAE5C;AACJ,EAAA,MAAM,EAAE,cAAa,GAAI,OAAA;AACzB,EAAA,OAAOA,yCAAA,CAAqB;AAAA,IAC1B,EAAA,EAAI,yBAAA;AAAA,IACJ,WAAA,EAAa,6BAAA;AAAA,cACbC,uCAAA;AAAA,IACA,MAAA,EAAQ;AAAA,MACN,KAAA,EAAO;AAAA,QACL,OAAA,EAAS,CAAA,CAAA,KACP,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa,CAAA,sJAAA;AAAA,SACd,CAAA;AAAA,QACH,KAAA,EAAO,CAAA,CAAA,KACL,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EAAa;AAAA,SACd,EACA,QAAA,EAAS;AAAA,QACd,SAAA,EAAW,CAAA,CAAA,KACT,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,gBAAA,EAAkB,CAAA,CAAA,KAChB,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,MAAA,EAAQ,CAAA,CAAA,KACN,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,SAAA,EAAW,OACT,CAAA,CACG,MAAA,CAAO,EAAE,MAAA,EAAO,EAAG,CAAA,CAAE,MAAA,EAAO,EAAG;AAAA,UAC9B,WAAA,EACE;AAAA,SACH,EACA,QAAA;AAAS,OAChB;AAAA,MACA,MAAA,EAAQ;AAAA,QACN,WAAA,EAAa,CAAA,CAAA,KACX,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd;AAAA;AACL,KACF;AAAA,IACA,MAAM,QAAQ,GAAA,EAAK;AACjB,MAAA,IAAI,oBAAA,GAA2C,MAAA;AAC/C,MAAA,IAAI,iBAAA,GAAwC,MAAA;AAE5C,MAAA,MAAM,EAAE,SAAS,SAAA,EAAW,gBAAA,EAAkB,OAAO,MAAA,EAAQ,SAAA,KAC3D,GAAA,CAAI,KAAA;AAEN,MAAA,MAAM,EAAE,IAAA,EAAK,GAAIC,iBAAA,CAAa,SAAS,YAAY,CAAA;AACnD,MAAA,MAAM,MAAMC,cAAA,CAAU,EAAE,IAAA,EAAM,YAAA,EAAc,OAAO,CAAA;AAEnD,MAAA,IAAI;AACF,QAAA,CAAC,EAAE,oBAAA,EAAsB,iBAAA,EAAkB,GAAI,MAAM,IAAI,UAAA,CAAW;AAAA,UAClE,GAAA,EAAK,yBAAyB,SAAS,CAAA,CAAA;AAAA,UACvC,IAAI,YAAY;AACd,YAAA,MAAM,GAAA,GAAO,MAAM,GAAA,CAAI,qBAAA,CAAsB,MAAA;AAAA,cAC3C,SAAA;AAAA,cACA;AAAA,aACF;AACA,YAAA,OAAO;AAAA,cACL,sBAAsB,GAAA,CAAI,KAAA;AAAA,cAC1B,mBAAmB,GAAA,CAAI;AAAA,aACzB;AAAA,UACF;AAAA,SACD,CAAA;AAED,QAAA,IAAI,CAAC,oBAAA,EAAsB;AACzB,UAAA,GAAA,CAAI,MAAA,CAAO,KAAA;AAAA,YACT,+CAA+C,SAAS,CAAA,CAAA;AAAA,WAC1D;AACA,UAAA;AAAA,QACF;AACA,QAAA,GAAA,CAAI,MAAA,CAAO,IAAA;AAAA,UACT,CAAA,kBAAA,EAAqB,iBAAiB,CAAA,qBAAA,EAAwB,SAAS,CAAA,CAAA;AAAA,SACzE;AAGA,QAAA,MAAM,uBAAA,GACH,MAAM,GAAA,CAAI,qBAAA,CAAsB,OAAA;AAAA,UAC/B,SAAA;AAAA,UACA,MAAA;AAAA,UACA,oBAAA;AAAA,UACA,EAAE,SAAA;AAAU,SACd;AAEF,QAAA,IAAI,CAAC,wBAAwB,EAAA,EAAI;AAC/B,UAAA,GAAA,CAAI,MAAA,CAAO,KAAA;AAAA,YACT,0CAA0C,SAAS,CAAA,CAAA;AAAA,WACrD;AACA,UAAA;AAAA,QACF;AAEA,QAAA,GAAA,CAAI,MAAA,CAAO,IAAA;AAAA,UACT,CAAA,YAAA,EAAe,uBAAA,CAAwB,EAAE,CAAA,aAAA,EAAgB,SAAS,CAAA,WAAA;AAAA,SACpE;AAEA,QAAA,GAAA,CAAI,MAAA,CAAO,aAAA,EAAe,uBAAA,CAAwB,OAAO,CAAA;AAAA,MAC3D,SAAS,KAAA,EAAY;AAEnB,QAAA,MAAM,IAAIC,iBAAA;AAAA,UACR,CAAA,4BAAA,EAA+BC,uBAAA,CAAgB,KAAK,CAAC,CAAA;AAAA,SACvD;AAAA,MACF,CAAA,SAAE;AAEA,QAAA,IAAI,iBAAA,EAAmB;AACrB,UAAA,IAAI;AACF,YAAA,MAAM,IAAI,UAAA,CAAW;AAAA,cACnB,GAAA,EAAK,uBAAuB,SAAS,CAAA,CAAA;AAAA,cACrC,IAAI,YAAY;AACd,gBAAA,IAAI,iBAAA,EAAmB;AAErB,kBAAA,MAAM,IAAI,qBAAA,CAAsB,MAAA;AAAA,oBAC9B,SAAA;AAAA,oBACA;AAAA,mBACF;AAAA,gBACF;AAAA,cACF;AAAA,aACD,CAAA;AACD,YAAA,GAAA,CAAI,MAAA,CAAO,IAAA;AAAA;AAAA;AAAA;AAAA,cAIT,iDAAiD,iBAAiB,CAAA,CAAA;AAAA,aACpE;AAAA,UACF,SAAS,KAAA,EAAY;AACnB,YAAA,GAAA,CAAI,MAAA,CAAO,KAAA;AAAA,cACT,0DAA0D,iBAAiB,CAAA,CAAA;AAAA,aAC7E;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,GACD,CAAA;AACH;;;;"}