'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var util = require('../util.cjs.js');
var gitlabProjectVariableCreate_examples = require('./gitlabProjectVariableCreate.examples.cjs.js');

const createGitlabProjectVariableAction = (options) => {
  const { integrations } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "gitlab:projectVariable:create",
    examples: gitlabProjectVariableCreate_examples.examples,
    schema: {
      input: {
        repoUrl: (z) => z.string({
          description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`
        }),
        token: (z) => z.string({
          description: "The token to use for authorization to GitLab"
        }).optional(),
        projectId: (z) => z.union([z.number(), z.string()], {
          description: "Project ID"
        }),
        key: (z) => z.string({
          description: "The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed"
        }).regex(/^[A-Za-z0-9_]{1,255}$/),
        value: (z) => z.string({
          description: "The value of a variable"
        }),
        variableType: (z) => z.string({
          description: "Variable Type (env_var or file)"
        }),
        variableProtected: (z) => z.boolean({
          description: "Whether the variable is protected"
        }).default(false).optional(),
        masked: (z) => z.boolean({
          description: "Whether the variable is masked"
        }).default(false).optional(),
        raw: (z) => z.boolean({
          description: "Whether the variable is expandable"
        }).default(false).optional(),
        environmentScope: (z) => z.string({
          description: "The environment_scope of the variable"
        }).default("*").optional()
      }
    },
    async handler(ctx) {
      const {
        repoUrl,
        projectId,
        key,
        value,
        variableType,
        variableProtected = false,
        masked = false,
        raw = false,
        environmentScope = "*",
        token
      } = ctx.input;
      const { host } = util.parseRepoUrl(repoUrl, integrations);
      const api = util.getClient({ host, integrations, token });
      await ctx.checkpoint({
        key: `create.project.variables.${projectId}.${key}.${value}`,
        fn: async () => {
          await api.ProjectVariables.create(projectId, key, value, {
            variableType,
            protected: variableProtected,
            masked,
            raw,
            environmentScope
          });
        }
      });
    }
  });
};

exports.createGitlabProjectVariableAction = createGitlabProjectVariableAction;
//# sourceMappingURL=gitlabProjectVariableCreate.cjs.js.map
