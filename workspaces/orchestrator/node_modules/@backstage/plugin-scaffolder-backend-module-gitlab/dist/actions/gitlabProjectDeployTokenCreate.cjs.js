'use strict';

var errors = require('@backstage/errors');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var rest = require('@gitbeaker/rest');
var util = require('../util.cjs.js');
var gitlabProjectDeployTokenCreate_examples = require('./gitlabProjectDeployTokenCreate.examples.cjs.js');

const createGitlabProjectDeployTokenAction = (options) => {
  const { integrations } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "gitlab:projectDeployToken:create",
    examples: gitlabProjectDeployTokenCreate_examples.examples,
    schema: {
      input: {
        repoUrl: (z) => z.string({
          description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`
        }),
        token: (z) => z.string({
          description: "The token to use for authorization to GitLab"
        }).optional(),
        projectId: (z) => z.union([z.number(), z.string()], {
          description: "Project ID"
        }),
        name: (z) => z.string({
          description: "Deploy Token Name"
        }),
        username: (z) => z.string({
          description: "Deploy Token Username"
        }).optional(),
        scopes: (z) => z.array(z.string(), {
          description: "Scopes"
        })
      },
      output: {
        deploy_token: (z) => z.string({
          description: "Deploy Token"
        }),
        user: (z) => z.string({
          description: "User"
        })
      }
    },
    async handler(ctx) {
      ctx.logger.info(`Creating Token for Project "${ctx.input.projectId}"`);
      const { projectId, name, username, scopes } = ctx.input;
      const { token, integrationConfig } = util.getToken(ctx.input, integrations);
      if (scopes.length === 0) {
        throw new errors.InputError(
          `Could not create token for project "${ctx.input.projectId}": scopes cannot be empty.`
        );
      }
      const api = new rest.Gitlab({
        host: integrationConfig.config.baseUrl,
        token
      });
      const { deployToken, deployUsername } = await ctx.checkpoint({
        key: `create.deploy.token.${projectId}.${name}`,
        fn: async () => {
          const res = await api.DeployTokens.create(
            name,
            scopes,
            {
              projectId,
              username
            }
          );
          if (!res.hasOwnProperty("token")) {
            throw new errors.InputError(`No deploy_token given from gitlab instance`);
          }
          return {
            deployToken: res.token,
            deployUsername: res.username
          };
        }
      });
      ctx.output("deploy_token", deployToken);
      ctx.output("user", deployUsername);
    }
  });
};

exports.createGitlabProjectDeployTokenAction = createGitlabProjectDeployTokenAction;
//# sourceMappingURL=gitlabProjectDeployTokenCreate.cjs.js.map
