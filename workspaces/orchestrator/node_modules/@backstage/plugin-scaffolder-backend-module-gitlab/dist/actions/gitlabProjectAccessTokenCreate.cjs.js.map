{"version":3,"file":"gitlabProjectAccessTokenCreate.cjs.js","sources":["../../src/actions/gitlabProjectAccessTokenCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { AccessTokenScopes, Gitlab } from '@gitbeaker/rest';\nimport { DateTime } from 'luxon';\nimport { getToken } from '../util';\nimport { examples } from './gitlabProjectAccessTokenCreate.examples';\n\n/**\n * Creates a `gitlab:projectAccessToken:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\n\nexport const createGitlabProjectAccessTokenAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectAccessToken:create',\n    examples,\n    schema: {\n      input: {\n        projectId: z =>\n          z.union([z.number(), z.string()], {\n            description: 'Project ID/Name(slug) of the Gitlab Project',\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        name: z =>\n          z\n            .string({\n              description: 'Name of Access Key',\n            })\n            .optional(),\n        repoUrl: z =>\n          z.string({\n            description: 'URL to gitlab instance',\n          }),\n        accessLevel: z =>\n          z\n            .number({\n              description:\n                'Access Level of the Token, 10 (Guest), 20 (Reporter), 30 (Developer), 40 (Maintainer), and 50 (Owner)',\n            })\n            .optional(),\n        scopes: z =>\n          z\n            .string({\n              description: 'Scopes for a project access token',\n            })\n            .array()\n            .optional(),\n        expiresAt: z =>\n          z\n            .string({\n              description:\n                'Expiration date of the access token in ISO format (YYYY-MM-DD). If Empty, it will set to the maximum of 365 days.',\n            })\n            .optional(),\n      },\n      output: {\n        access_token: z =>\n          z.string({\n            description: 'Access Token',\n          }),\n      },\n    },\n    async handler(ctx) {\n      ctx.logger.info(`Creating Token for Project \"${ctx.input.projectId}\"`);\n      const {\n        projectId,\n        name = 'tokenname',\n        accessLevel = 40,\n        scopes = ['read_repository'],\n        expiresAt,\n      } = ctx.input;\n\n      const { token, integrationConfig } = getToken(ctx.input, integrations);\n\n      if (!integrationConfig.config.token && token) {\n        throw new InputError(\n          `No token available for host ${integrationConfig.config.baseUrl}`,\n        );\n      }\n\n      let api;\n\n      if (!ctx.input.token) {\n        api = new Gitlab({\n          host: integrationConfig.config.baseUrl,\n          token: token,\n        });\n      } else {\n        api = new Gitlab({\n          host: integrationConfig.config.baseUrl,\n          oauthToken: token,\n        });\n      }\n\n      const projectAccessToken = await ctx.checkpoint({\n        key: `project.access.token.${projectId}.${name}`,\n        fn: async () => {\n          const response = await api.ProjectAccessTokens.create(\n            projectId,\n            name,\n            scopes as AccessTokenScopes[],\n            expiresAt || DateTime.now().plus({ days: 365 }).toISODate()!,\n            {\n              accessLevel,\n            },\n          );\n          return response.token;\n        },\n      });\n\n      if (!projectAccessToken) {\n        throw new Error('Could not create project access token');\n      }\n\n      ctx.output('access_token', projectAccessToken);\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","getToken","InputError","Gitlab","DateTime"],"mappings":"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"}