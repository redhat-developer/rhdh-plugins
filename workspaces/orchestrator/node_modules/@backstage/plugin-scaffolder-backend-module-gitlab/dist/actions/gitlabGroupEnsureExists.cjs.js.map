{"version":3,"file":"gitlabGroupEnsureExists.cjs.js","sources":["../../src/actions/gitlabGroupEnsureExists.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { GroupSchema } from '@gitbeaker/rest';\nimport { getClient, parseRepoUrl } from '../util';\nimport { examples } from './gitlabGroupEnsureExists.examples';\n\n/**\n * Creates an `gitlab:group:ensureExists` Scaffolder action.\n *\n * @public\n */\nexport const createGitlabGroupEnsureExistsAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction({\n    id: 'gitlab:group:ensureExists',\n    description: 'Ensures a Gitlab group exists',\n    supportsDryRun: true,\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        path: z =>\n          z\n            .array(\n              z.string().or(\n                z.object({\n                  name: z.string(),\n                  slug: z.string(),\n                }),\n              ),\n              {\n                description:\n                  'A path of group names or objects (name and slug) that is ensured to exist',\n              },\n            )\n            .min(1),\n      },\n      output: {\n        groupId: z =>\n          z\n            .number({\n              description: 'The id of the innermost sub-group',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      if (ctx.isDryRun) {\n        ctx.output('groupId', 42);\n        return;\n      }\n\n      const { token, repoUrl, path } = ctx.input;\n\n      const { host } = parseRepoUrl(repoUrl, integrations);\n\n      const api = getClient({ host, integrations, token });\n\n      let currentPath: string | null = null;\n      let parentId: number | null = null;\n      for (const { name, slug } of pathIterator(path)) {\n        const fullPath: string = currentPath ? `${currentPath}/${slug}` : slug;\n        const result = (await api.Groups.search(\n          fullPath,\n        )) as unknown as Array<GroupSchema>; // recast since the return type for search is wrong in the gitbeaker typings\n        const subGroup = result.find(\n          searchPathElem => searchPathElem.full_path === fullPath,\n        );\n        if (!subGroup) {\n          ctx.logger.info(`creating missing group ${fullPath}`);\n\n          parentId = await ctx.checkpoint({\n            key: `ensure.${name}.${slug}.${parentId}`,\n            // eslint-disable-next-line no-loop-func\n            fn: async () => {\n              return (\n                await api.Groups.create(\n                  name,\n                  slug,\n                  parentId\n                    ? {\n                        parentId: parentId,\n                      }\n                    : {},\n                )\n              )?.id;\n            },\n          });\n        } else {\n          parentId = subGroup.id;\n        }\n        currentPath = fullPath;\n      }\n      if (parentId !== null) {\n        ctx.output('groupId', parentId);\n      }\n    },\n  });\n};\n\ntype PathPart = { name: string; slug: string };\ntype PathItem = string | PathPart;\n\nfunction* pathIterator(items: PathItem[]): Generator<PathPart> {\n  for (const item of items) {\n    if (typeof item === 'string') {\n      const parts = item.split('/');\n      for (const part of parts) {\n        yield { name: part, slug: part };\n      }\n    } else {\n      yield item;\n    }\n  }\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","getClient"],"mappings":"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"}