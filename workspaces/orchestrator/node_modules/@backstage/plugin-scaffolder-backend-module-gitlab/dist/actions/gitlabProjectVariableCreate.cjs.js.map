{"version":3,"file":"gitlabProjectVariableCreate.cjs.js","sources":["../../src/actions/gitlabProjectVariableCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { VariableType } from '@gitbeaker/rest';\nimport { getClient, parseRepoUrl } from '../util';\nimport { examples } from './gitlabProjectVariableCreate.examples';\n\n/**\n * Creates a `gitlab:projectVariable:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabProjectVariableAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectVariable:create',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        projectId: z =>\n          z.union([z.number(), z.string()], {\n            description: 'Project ID',\n          }),\n        key: z =>\n          z\n            .string({\n              description:\n                'The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed',\n            })\n            .regex(/^[A-Za-z0-9_]{1,255}$/),\n        value: z =>\n          z.string({\n            description: 'The value of a variable',\n          }),\n        variableType: z =>\n          z.string({\n            description: 'Variable Type (env_var or file)',\n          }),\n        variableProtected: z =>\n          z\n            .boolean({\n              description: 'Whether the variable is protected',\n            })\n            .default(false)\n            .optional(),\n        masked: z =>\n          z\n            .boolean({\n              description: 'Whether the variable is masked',\n            })\n            .default(false)\n            .optional(),\n        raw: z =>\n          z\n            .boolean({\n              description: 'Whether the variable is expandable',\n            })\n            .default(false)\n            .optional(),\n        environmentScope: z =>\n          z\n            .string({\n              description: 'The environment_scope of the variable',\n            })\n            .default('*')\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        projectId,\n        key,\n        value,\n        variableType,\n        variableProtected = false,\n        masked = false,\n        raw = false,\n        environmentScope = '*',\n        token,\n      } = ctx.input;\n\n      const { host } = parseRepoUrl(repoUrl, integrations);\n\n      const api = getClient({ host, integrations, token });\n\n      await ctx.checkpoint({\n        key: `create.project.variables.${projectId}.${key}.${value}`,\n        fn: async () => {\n          await api.ProjectVariables.create(projectId, key, value, {\n            variableType: variableType as VariableType,\n            protected: variableProtected,\n            masked,\n            raw,\n            environmentScope,\n          });\n        },\n      });\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","parseRepoUrl","getClient"],"mappings":"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"}