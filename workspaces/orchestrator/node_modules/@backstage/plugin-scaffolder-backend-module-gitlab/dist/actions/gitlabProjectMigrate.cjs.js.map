{"version":3,"file":"gitlabProjectMigrate.cjs.js","sources":["../../src/actions/gitlabProjectMigrate.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { InputError } from '@backstage/errors';\nimport { createGitlabApi } from './helpers';\nimport { examples } from './gitlabRepoPush.examples';\nimport { MigrationEntityOptions } from '@gitbeaker/rest';\n\n/**\n * Create a new action that imports a gitlab project into another gitlab project (potentially from another gitlab instance).\n *\n * @public\n */\nexport const createGitlabProjectMigrateAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction({\n    id: 'gitlab:group:migrate',\n    examples,\n    schema: {\n      input: {\n        destinationAccessToken: z =>\n          z.string({\n            description: `The token to use for authorization to the target GitLab'`,\n          }),\n        destinationUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        sourceAccessToken: z =>\n          z.string({\n            description: `The token to use for authorization to the source GitLab'`,\n          }),\n        sourceFullPath: z =>\n          z.string({\n            description:\n              'Full path to the project in the source Gitlab instance',\n          }),\n        sourceUrl: z =>\n          z.string({\n            description: `Accepts the format 'https://gitlab.com/'`,\n          }),\n      },\n      output: {\n        importedRepoUrl: z =>\n          z.string({\n            description: 'URL to the newly imported repo',\n          }),\n        migrationId: z =>\n          z.number({\n            description: 'Id of the migration that imports the project',\n          }),\n      },\n    },\n\n    async handler(ctx) {\n      const {\n        destinationAccessToken,\n        destinationUrl,\n        sourceAccessToken,\n        sourceFullPath,\n        sourceUrl,\n      } = ctx.input;\n\n      const {\n        host: destinationHost,\n        repo: destinationSlug,\n        owner: destinationNamespace,\n      } = parseRepoUrl(destinationUrl, integrations);\n\n      if (!destinationNamespace) {\n        throw new InputError(\n          `Failed to determine target repository to migrate to. Make sure destinationUrl matches the format 'gitlab.myorg.com?repo=project_name&owner=group_name'`,\n        );\n      }\n\n      const api = createGitlabApi({\n        integrations,\n        token: destinationAccessToken,\n        repoUrl: destinationUrl,\n      });\n\n      const migrationEntity: MigrationEntityOptions[] = [\n        {\n          sourceType: 'project_entity',\n          sourceFullPath: sourceFullPath,\n          destinationSlug: destinationSlug,\n          destinationNamespace: destinationNamespace,\n        },\n      ];\n\n      const sourceConfig = {\n        url: sourceUrl,\n        access_token: sourceAccessToken,\n      };\n\n      try {\n        const migrationId = await ctx.checkpoint({\n          key: `create.migration.${sourceUrl}`,\n          fn: async () => {\n            const migrationStatus = await api.Migrations.create(\n              sourceConfig,\n              migrationEntity,\n            );\n            return migrationStatus.id;\n          },\n        });\n\n        ctx.output(\n          'importedRepoUrl',\n          `${destinationHost}/${destinationNamespace}/${destinationSlug}`,\n        );\n        ctx.output('migrationId', migrationId);\n      } catch (e: any) {\n        throw new InputError(\n          `Failed to transfer repo ${sourceFullPath}. Make sure that ${sourceFullPath} exists in ${sourceUrl}, and token has enough rights.\\nError: ${e}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","createGitlabApi"],"mappings":"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"}