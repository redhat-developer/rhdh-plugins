{"version":3,"file":"gitlabRepoPush.cjs.js","sources":["../../src/actions/gitlabRepoPush.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { InputError } from '@backstage/errors';\nimport { resolveSafeChildPath } from '@backstage/backend-plugin-api';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n  serializeDirectoryContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { CommitAction } from '@gitbeaker/rest';\nimport { createGitlabApi, getErrorMessage } from './helpers';\nimport { examples } from './gitlabRepoPush.examples';\n\n/**\n * Create a new action that commits into a gitlab repository.\n *\n * @public\n */\nexport const createGitlabRepoPushAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction({\n    id: 'gitlab:repo:push',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        branchName: z =>\n          z.string({\n            description: 'The branch name for the commit',\n          }),\n        commitMessage: z =>\n          z.string({\n            description: `The commit message`,\n          }),\n        sourcePath: z =>\n          z\n            .string({\n              description:\n                'Subdirectory of working directory to copy changes from',\n            })\n            .optional(),\n        targetPath: z =>\n          z\n            .string({\n              description: 'Subdirectory of repository to apply changes to',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        commitAction: z =>\n          z\n            .enum(['create', 'update', 'delete'], {\n              description:\n                'The action to be used for git commit. Defaults to create, but can be set to update or delete',\n            })\n            .optional(),\n      },\n      output: {\n        projectid: z =>\n          z.string({\n            description: 'Gitlab Project id/Name(slug)',\n          }),\n        projectPath: z =>\n          z.string({\n            description: 'Gitlab Project path',\n          }),\n        commitHash: z =>\n          z.string({\n            description: 'The git commit hash of the commit',\n          }),\n      },\n    },\n    async handler(ctx) {\n      const {\n        branchName,\n        repoUrl,\n        targetPath,\n        sourcePath,\n        token,\n        commitAction,\n      } = ctx.input;\n\n      const { owner, repo, project } = parseRepoUrl(repoUrl, integrations);\n      const repoID = project ? project : `${owner}/${repo}`;\n\n      const api = createGitlabApi({\n        integrations,\n        token,\n        repoUrl,\n      });\n\n      let fileRoot: string;\n      if (sourcePath) {\n        fileRoot = resolveSafeChildPath(ctx.workspacePath, sourcePath);\n      } else {\n        fileRoot = ctx.workspacePath;\n      }\n\n      const fileContents = await serializeDirectoryContents(fileRoot, {\n        gitignore: true,\n      });\n\n      const actions: CommitAction[] = fileContents.map(file => ({\n        action: commitAction ?? 'create',\n        filePath: targetPath\n          ? path.posix.join(targetPath, file.path)\n          : file.path,\n        encoding: 'base64',\n        content: file.content.toString('base64'),\n        execute_filemode: file.executable,\n      }));\n\n      const branchExists = await ctx.checkpoint({\n        key: `branch.exists.${repoID}.${branchName}`,\n        fn: async () => {\n          try {\n            await api.Branches.show(repoID, branchName);\n            return true;\n          } catch (e: any) {\n            if (e.cause?.response?.status !== 404) {\n              throw new InputError(\n                `Failed to check status of branch '${branchName}'. Please make sure that branch already exists or Backstage has permissions to create one. ${getErrorMessage(\n                  e,\n                )}`,\n              );\n            }\n          }\n          return false;\n        },\n      });\n\n      if (!branchExists) {\n        // create a branch using the default branch as ref\n        try {\n          const projects = await api.Projects.show(repoID);\n          const { default_branch: defaultBranch } = projects;\n          await api.Branches.create(repoID, branchName, String(defaultBranch));\n        } catch (e) {\n          throw new InputError(\n            `The branch '${branchName}' was not found and creation failed with error. Please make sure that branch already exists or Backstage has permissions to create one. ${getErrorMessage(\n              e,\n            )}`,\n          );\n        }\n      }\n\n      try {\n        const commitId = await ctx.checkpoint({\n          key: `commit.create.${repoID}.${branchName}`,\n          fn: async () => {\n            const commit = await api.Commits.create(\n              repoID,\n              branchName,\n              ctx.input.commitMessage,\n              actions,\n            );\n            return commit.id;\n          },\n        });\n\n        ctx.output('projectid', repoID);\n        ctx.output('projectPath', repoID);\n        ctx.output('commitHash', commitId);\n      } catch (e) {\n        if (commitAction !== 'create') {\n          throw new InputError(\n            `Committing the changes to ${branchName} failed. Please verify that all files you're trying to modify exist in the repository. ${getErrorMessage(\n              e,\n            )}`,\n          );\n        }\n        throw new InputError(\n          `Committing the changes to ${branchName} failed. Please check that none of the files created by the template already exists. ${getErrorMessage(\n            e,\n          )}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","parseRepoUrl","createGitlabApi","resolveSafeChildPath","serializeDirectoryContents","path","InputError","getErrorMessage"],"mappings":"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"}