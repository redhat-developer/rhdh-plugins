{"version":3,"file":"gitlabIssueCreate.cjs.js","sources":["../../src/actions/gitlabIssueCreate.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { IssueType } from '../commonGitlabConfig';\nimport { examples } from './gitlabIssueCreate.examples';\nimport { checkEpicScope, convertDate, getClient, parseRepoUrl } from '../util';\nimport { CreateIssueOptions, IssueSchema } from '@gitbeaker/rest';\nimport { getErrorMessage } from './helpers';\n\n/**\n * Creates a `gitlab:issues:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabIssueAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:issues:create',\n    description: 'Creates a Gitlab issue.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        projectId: z =>\n          z.number({\n            description: 'Project Id',\n          }),\n        title: z =>\n          z.string({\n            description: 'Title of the issue',\n          }),\n        assignees: z =>\n          z\n            .array(z.number(), {\n              description: 'IDs of the users to assign the issue to.',\n            })\n            .optional(),\n        confidential: z =>\n          z\n            .boolean({\n              description: 'Issue Confidentiality',\n            })\n            .optional(),\n        description: z =>\n          z\n            .string({\n              description: 'Issue description',\n            })\n            .max(1048576)\n            .optional(),\n        createdAt: z =>\n          z\n            .string({\n              description: 'Creation date/time',\n            })\n            .regex(\n              /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n              'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n            )\n            .optional(),\n        dueDate: z =>\n          z\n            .string({\n              description: 'Due date/time',\n            })\n            .regex(\n              /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n              'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n            )\n            .optional(),\n        discussionToResolve: z =>\n          z\n            .string({\n              description:\n                'Id of a discussion to resolve. Use in combination with \"merge_request_to_resolve_discussions_of\"',\n            })\n            .optional(),\n        epicId: z =>\n          z\n            .number({\n              description: 'Id of the linked Epic',\n            })\n            .min(0, 'Valid values should be equal or greater than zero')\n            .optional(),\n        labels: z =>\n          z\n            .string({\n              description: 'Labels to apply',\n            })\n            .optional(),\n        issueType: z =>\n          z\n            .nativeEnum(IssueType, {\n              description: 'Type of the issue',\n            })\n            .optional(),\n        mergeRequestToResolveDiscussionsOf: z =>\n          z\n            .number({\n              description:\n                'IID of a merge request in which to resolve all issues',\n            })\n            .optional(),\n        milestoneId: z =>\n          z\n            .number({\n              description: 'Global ID of a milestone to assign the issue',\n            })\n            .optional(),\n        weight: z =>\n          z\n            .number({\n              description: 'The issue weight',\n            })\n            .min(0)\n            .refine(\n              value => {\n                return value >= 0;\n              },\n              {\n                message: 'Valid values should be equal or greater than zero',\n              },\n            )\n            .optional(),\n      },\n      output: {\n        issueUrl: z =>\n          z.string({\n            description: 'Issue Url',\n          }),\n        issueId: z =>\n          z.number({\n            description: 'Issue Id',\n          }),\n        issueIid: z =>\n          z.number({\n            description: 'Issue Iid',\n          }),\n      },\n    },\n    async handler(ctx) {\n      try {\n        const {\n          repoUrl,\n          projectId,\n          title,\n          description = '',\n          confidential = false,\n          assignees = [],\n          createdAt = '',\n          dueDate,\n          discussionToResolve = '',\n          epicId,\n          labels = '',\n          issueType,\n          mergeRequestToResolveDiscussionsOf,\n          milestoneId,\n          weight,\n          token,\n        } = ctx.input;\n\n        const { host } = parseRepoUrl(repoUrl, integrations);\n        const api = getClient({ host, integrations, token });\n\n        let isEpicScoped = false;\n\n        isEpicScoped = await ctx.checkpoint({\n          key: `is.epic.scoped.${projectId}.${title}`,\n          fn: async () => {\n            if (epicId) {\n              isEpicScoped = await checkEpicScope(api, projectId, epicId);\n\n              if (isEpicScoped) {\n                ctx.logger.info('Epic is within Project Scope');\n              } else {\n                ctx.logger.warn(\n                  'Chosen epic is not within the Project Scope. The issue will be created without an associated epic.',\n                );\n              }\n            }\n            return isEpicScoped;\n          },\n        });\n\n        const mappedCreatedAt = convertDate(\n          String(createdAt),\n          new Date().toISOString(),\n        );\n        const mappedDueDate = dueDate\n          ? convertDate(String(dueDate), new Date().toISOString())\n          : undefined;\n\n        const issueOptions: CreateIssueOptions = {\n          description,\n          assigneeIds: assignees,\n          confidential,\n          epicId: isEpicScoped ? epicId : undefined,\n          labels,\n          createdAt: mappedCreatedAt,\n          dueDate: mappedDueDate,\n          discussionToResolve,\n          issueType,\n          mergeRequestToResolveDiscussionsOf,\n          milestoneId,\n          weight,\n        };\n\n        const response = await ctx.checkpoint({\n          key: `issue.${projectId}.${title}`,\n          fn: async () => {\n            const issue = (await api.Issues.create(\n              projectId,\n              title,\n              issueOptions,\n            )) as IssueSchema;\n\n            return {\n              id: issue.id,\n              web_url: issue.web_url,\n              iid: issue.iid,\n            };\n          },\n        });\n\n        ctx.output('issueId', response.id);\n        ctx.output('issueUrl', response.web_url);\n        ctx.output('issueIid', response.iid);\n      } catch (error: any) {\n        // Handling other errors\n        throw new InputError(\n          `Failed to create GitLab issue: ${getErrorMessage(error)}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","IssueType","parseRepoUrl","getClient","checkEpicScope","convertDate","InputError","getErrorMessage"],"mappings":"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"}