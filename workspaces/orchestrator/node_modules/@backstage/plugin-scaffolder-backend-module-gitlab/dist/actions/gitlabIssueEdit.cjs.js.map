{"version":3,"file":"gitlabIssueEdit.cjs.js","sources":["../../src/actions/gitlabIssueEdit.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { IssueStateEvent, IssueType } from '../commonGitlabConfig';\nimport { examples } from './gitlabIssueEdit.examples';\nimport { checkEpicScope, convertDate, getClient, parseRepoUrl } from '../util';\nimport { EditIssueOptions, IssueSchema } from '@gitbeaker/rest';\nimport { getErrorMessage } from './helpers';\n\n/**\n * Creates a `gitlab:issue:edit` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const editGitlabIssueAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:issue:edit',\n    description: 'Edit a Gitlab issue.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        projectId: z =>\n          z.number({\n            description:\n              'The global ID or URL-encoded path of the project owned by the authenticated user.',\n          }),\n        issueIid: z =>\n          z.number({\n            description: \"The internal ID of a project's issue\",\n          }),\n        addLabels: z =>\n          z\n            .string({\n              description:\n                'Comma-separated label names to add to an issue. If a label does not already exist, this creates a new project label and assigns it to the issue.',\n            })\n            .optional(),\n        assignees: z =>\n          z\n            .array(z.number(), {\n              description: 'IDs of the users to assign the issue to.',\n            })\n            .optional(),\n        confidential: z =>\n          z\n            .boolean({\n              description: 'Updates an issue to be confidential.',\n            })\n            .optional(),\n        description: z =>\n          z\n            .string({\n              description:\n                'The description of an issue. Limited to 1,048,576 characters.',\n            })\n            .max(1048576)\n            .optional(),\n        discussionLocked: z =>\n          z\n            .boolean({\n              description:\n                'Flag indicating if the issue discussion is locked. If the discussion is locked only project members can add or edit comments.',\n            })\n            .optional(),\n        dueDate: z =>\n          z\n            .string({\n              description:\n                'The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.',\n            })\n            .regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Invalid date format. Use YYYY-MM-DD')\n            .optional(),\n        epicId: z =>\n          z\n            .number({\n              description:\n                'ID of the epic to add the issue to. Valid values are greater than or equal to 0.',\n            })\n            .min(0, 'Valid values should be equal or greater than zero')\n            .optional(),\n        issueType: z =>\n          z\n            .nativeEnum(IssueType, {\n              description:\n                'Updates the type of issue. One of issue, incident, test_case or task.',\n            })\n            .optional(),\n        labels: z =>\n          z\n            .string({\n              description:\n                'Comma-separated label names for an issue. Set to an empty string to unassign all labels. If a label does not already exist, this creates a new project label and assigns it to the issue.',\n            })\n            .optional(),\n        milestoneId: z =>\n          z\n            .number({\n              description:\n                'The global ID of a milestone to assign the issue to. Set to 0 or provide an empty value to unassign a milestone',\n            })\n            .optional(),\n        removeLabels: z =>\n          z\n            .string({\n              description:\n                'Comma-separated label names to remove from an issue.',\n            })\n            .optional(),\n        stateEvent: z =>\n          z\n            .nativeEnum(IssueStateEvent, {\n              description:\n                'The state event of an issue. To close the issue, use close, and to reopen it, use reopen.',\n            })\n            .optional(),\n        title: z =>\n          z\n            .string({\n              description: 'The title of an issue.',\n            })\n            .optional(),\n        updatedAt: z =>\n          z\n            .string({\n              description:\n                'When the issue was updated. Date time string, ISO 8601 formatted',\n            })\n            .regex(\n              /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n              'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n            )\n            .optional(),\n        weight: z =>\n          z\n            .number({\n              description: 'The issue weight',\n            })\n            .min(0, 'Valid values should be equal or greater than zero')\n            .max(10, 'Valid values should be equal or less than 10')\n            .optional(),\n      },\n      output: {\n        issueUrl: z =>\n          z.string({\n            description: 'Issue WebUrl',\n          }),\n        projectId: z =>\n          z.number({\n            description: 'The project id the issue belongs to WebUrl',\n          }),\n        issueId: z =>\n          z.number({\n            description: 'The issues Id',\n          }),\n        issueIid: z =>\n          z.number({\n            description: \"The issues internal ID of a project's issue\",\n          }),\n        state: z =>\n          z.string({\n            description: 'The state event of an issue',\n          }),\n        title: z =>\n          z.string({\n            description: 'The title of an issue.',\n          }),\n        updatedAt: z =>\n          z.string({\n            description: 'The last updated time of the issue.',\n          }),\n      },\n    },\n    async handler(ctx) {\n      try {\n        const {\n          repoUrl,\n          projectId,\n          title,\n          addLabels,\n          removeLabels,\n          issueIid,\n          description,\n          confidential = false,\n          assignees = [],\n          updatedAt = '',\n          dueDate,\n          discussionLocked = false,\n          epicId,\n          labels,\n          issueType,\n          milestoneId,\n          stateEvent,\n          weight,\n          token,\n        } = ctx.input;\n\n        const { host } = parseRepoUrl(repoUrl, integrations);\n        const api = getClient({ host, integrations, token });\n\n        let isEpicScoped = false;\n\n        isEpicScoped = await ctx.checkpoint({\n          key: `issue.edit.is.scoped.${projectId}.${epicId}`,\n          fn: async () => {\n            if (epicId) {\n              const scoped = await checkEpicScope(api, projectId, epicId);\n\n              if (scoped) {\n                ctx.logger.info('Epic is within Project Scope');\n              } else {\n                ctx.logger.warn(\n                  'Chosen epic is not within the Project Scope. The issue will be created without an associated epic.',\n                );\n              }\n              return scoped;\n            }\n            return false;\n          },\n        });\n\n        const mappedUpdatedAt = convertDate(\n          String(updatedAt),\n          new Date().toISOString(),\n        );\n\n        const editIssueOptions: EditIssueOptions = {\n          addLabels,\n          assigneeIds: assignees,\n          confidential,\n          description,\n          discussionLocked,\n          dueDate,\n          epicId: isEpicScoped ? epicId : undefined,\n          issueType,\n          labels,\n          milestoneId,\n          removeLabels,\n          stateEvent,\n          title,\n          updatedAt: mappedUpdatedAt,\n          weight,\n        };\n\n        const editedIssue = await ctx.checkpoint({\n          key: `issue.edit.${projectId}.${issueIid}`,\n          fn: async () => {\n            const response = (await api.Issues.edit(\n              projectId,\n              issueIid,\n              editIssueOptions,\n            )) as IssueSchema;\n\n            return {\n              issueId: response.id,\n              issueUrl: response.web_url,\n              projectId: response.project_id,\n              issueIid: response.iid,\n              title: response.title,\n              state: response.state,\n              updatedAt: response.updated_at,\n            };\n          },\n        });\n\n        ctx.output('issueId', editedIssue.issueId);\n        ctx.output('projectId', editedIssue.projectId);\n        ctx.output('issueUrl', editedIssue.issueUrl);\n        ctx.output('issueIid', editedIssue.issueIid);\n        ctx.output('title', editedIssue.title);\n        ctx.output('state', editedIssue.state);\n        ctx.output('updatedAt', editedIssue.updatedAt);\n      } catch (error: any) {\n        // Handling other errors\n        throw new InputError(\n          `Failed to edit/modify GitLab issue: ${getErrorMessage(error)}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","IssueType","IssueStateEvent","parseRepoUrl","getClient","checkEpicScope","convertDate","InputError","getErrorMessage"],"mappings":";;;;;;;;;AA+BO,MAAM,qBAAA,GAAwB,CAAC,OAAA,KAEhC;AACJ,EAAA,MAAM,EAAE,cAAa,GAAI,OAAA;AACzB,EAAA,OAAOA,yCAAA,CAAqB;AAAA,IAC1B,EAAA,EAAI,mBAAA;AAAA,IACJ,WAAA,EAAa,sBAAA;AAAA,cACbC,iCAAA;AAAA,IACA,MAAA,EAAQ;AAAA,MACN,KAAA,EAAO;AAAA,QACL,OAAA,EAAS,CAAA,CAAA,KACP,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa,CAAA,sJAAA;AAAA,SACd,CAAA;AAAA,QACH,KAAA,EAAO,CAAA,CAAA,KACL,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EAAa;AAAA,SACd,EACA,QAAA,EAAS;AAAA,QACd,SAAA,EAAW,CAAA,CAAA,KACT,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EACE;AAAA,SACH,CAAA;AAAA,QACH,QAAA,EAAU,CAAA,CAAA,KACR,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,SAAA,EAAW,CAAA,CAAA,KACT,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EACE;AAAA,SACH,EACA,QAAA,EAAS;AAAA,QACd,WAAW,CAAA,CAAA,KACT,CAAA,CACG,KAAA,CAAM,CAAA,CAAE,QAAO,EAAG;AAAA,UACjB,WAAA,EAAa;AAAA,SACd,EACA,QAAA,EAAS;AAAA,QACd,YAAA,EAAc,CAAA,CAAA,KACZ,CAAA,CACG,OAAA,CAAQ;AAAA,UACP,WAAA,EAAa;AAAA,SACd,EACA,QAAA,EAAS;AAAA,QACd,WAAA,EAAa,CAAA,CAAA,KACX,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EACE;AAAA,SACH,CAAA,CACA,GAAA,CAAI,OAAO,EACX,QAAA,EAAS;AAAA,QACd,gBAAA,EAAkB,CAAA,CAAA,KAChB,CAAA,CACG,OAAA,CAAQ;AAAA,UACP,WAAA,EACE;AAAA,SACH,EACA,QAAA,EAAS;AAAA,QACd,OAAA,EAAS,CAAA,CAAA,KACP,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EACE;AAAA,SACH,CAAA,CACA,KAAA,CAAM,qBAAA,EAAuB,qCAAqC,EAClE,QAAA,EAAS;AAAA,QACd,MAAA,EAAQ,CAAA,CAAA,KACN,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EACE;AAAA,SACH,CAAA,CACA,GAAA,CAAI,CAAA,EAAG,mDAAmD,EAC1D,QAAA,EAAS;AAAA,QACd,SAAA,EAAW,CAAA,CAAA,KACT,CAAA,CACG,UAAA,CAAWC,4BAAA,EAAW;AAAA,UACrB,WAAA,EACE;AAAA,SACH,EACA,QAAA,EAAS;AAAA,QACd,MAAA,EAAQ,CAAA,CAAA,KACN,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EACE;AAAA,SACH,EACA,QAAA,EAAS;AAAA,QACd,WAAA,EAAa,CAAA,CAAA,KACX,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EACE;AAAA,SACH,EACA,QAAA,EAAS;AAAA,QACd,YAAA,EAAc,CAAA,CAAA,KACZ,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EACE;AAAA,SACH,EACA,QAAA,EAAS;AAAA,QACd,UAAA,EAAY,CAAA,CAAA,KACV,CAAA,CACG,UAAA,CAAWC,kCAAA,EAAiB;AAAA,UAC3B,WAAA,EACE;AAAA,SACH,EACA,QAAA,EAAS;AAAA,QACd,KAAA,EAAO,CAAA,CAAA,KACL,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EAAa;AAAA,SACd,EACA,QAAA,EAAS;AAAA,QACd,SAAA,EAAW,CAAA,CAAA,KACT,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EACE;AAAA,SACH,CAAA,CACA,KAAA;AAAA,UACC,oDAAA;AAAA,UACA;AAAA,UAED,QAAA,EAAS;AAAA,QACd,MAAA,EAAQ,CAAA,CAAA,KACN,CAAA,CACG,MAAA,CAAO;AAAA,UACN,WAAA,EAAa;AAAA,SACd,CAAA,CACA,GAAA,CAAI,CAAA,EAAG,mDAAmD,EAC1D,GAAA,CAAI,EAAA,EAAI,8CAA8C,CAAA,CACtD,QAAA;AAAS,OAChB;AAAA,MACA,MAAA,EAAQ;AAAA,QACN,QAAA,EAAU,CAAA,CAAA,KACR,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,SAAA,EAAW,CAAA,CAAA,KACT,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,OAAA,EAAS,CAAA,CAAA,KACP,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,QAAA,EAAU,CAAA,CAAA,KACR,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,KAAA,EAAO,CAAA,CAAA,KACL,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,KAAA,EAAO,CAAA,CAAA,KACL,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd,CAAA;AAAA,QACH,SAAA,EAAW,CAAA,CAAA,KACT,CAAA,CAAE,MAAA,CAAO;AAAA,UACP,WAAA,EAAa;AAAA,SACd;AAAA;AACL,KACF;AAAA,IACA,MAAM,QAAQ,GAAA,EAAK;AACjB,MAAA,IAAI;AACF,QAAA,MAAM;AAAA,UACJ,OAAA;AAAA,UACA,SAAA;AAAA,UACA,KAAA;AAAA,UACA,SAAA;AAAA,UACA,YAAA;AAAA,UACA,QAAA;AAAA,UACA,WAAA;AAAA,UACA,YAAA,GAAe,KAAA;AAAA,UACf,YAAY,EAAC;AAAA,UACb,SAAA,GAAY,EAAA;AAAA,UACZ,OAAA;AAAA,UACA,gBAAA,GAAmB,KAAA;AAAA,UACnB,MAAA;AAAA,UACA,MAAA;AAAA,UACA,SAAA;AAAA,UACA,WAAA;AAAA,UACA,UAAA;AAAA,UACA,MAAA;AAAA,UACA;AAAA,YACE,GAAA,CAAI,KAAA;AAER,QAAA,MAAM,EAAE,IAAA,EAAK,GAAIC,iBAAA,CAAa,SAAS,YAAY,CAAA;AACnD,QAAA,MAAM,MAAMC,cAAA,CAAU,EAAE,IAAA,EAAM,YAAA,EAAc,OAAO,CAAA;AAEnD,QAAA,IAAI,YAAA,GAAe,KAAA;AAEnB,QAAA,YAAA,GAAe,MAAM,IAAI,UAAA,CAAW;AAAA,UAClC,GAAA,EAAK,CAAA,qBAAA,EAAwB,SAAS,CAAA,CAAA,EAAI,MAAM,CAAA,CAAA;AAAA,UAChD,IAAI,YAAY;AACd,YAAA,IAAI,MAAA,EAAQ;AACV,cAAA,MAAM,MAAA,GAAS,MAAMC,mBAAA,CAAe,GAAA,EAAK,WAAW,MAAM,CAAA;AAE1D,cAAA,IAAI,MAAA,EAAQ;AACV,gBAAA,GAAA,CAAI,MAAA,CAAO,KAAK,8BAA8B,CAAA;AAAA,cAChD,CAAA,MAAO;AACL,gBAAA,GAAA,CAAI,MAAA,CAAO,IAAA;AAAA,kBACT;AAAA,iBACF;AAAA,cACF;AACA,cAAA,OAAO,MAAA;AAAA,YACT;AACA,YAAA,OAAO,KAAA;AAAA,UACT;AAAA,SACD,CAAA;AAED,QAAA,MAAM,eAAA,GAAkBC,gBAAA;AAAA,UACtB,OAAO,SAAS,CAAA;AAAA,UAAA,iBAChB,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY,SACzB;AAEA,QAAA,MAAM,gBAAA,GAAqC;AAAA,UACzC,SAAA;AAAA,UACA,WAAA,EAAa,SAAA;AAAA,UACb,YAAA;AAAA,UACA,WAAA;AAAA,UACA,gBAAA;AAAA,UACA,OAAA;AAAA,UACA,MAAA,EAAQ,eAAe,MAAA,GAAS,KAAA,CAAA;AAAA,UAChC,SAAA;AAAA,UACA,MAAA;AAAA,UACA,WAAA;AAAA,UACA,YAAA;AAAA,UACA,UAAA;AAAA,UACA,KAAA;AAAA,UACA,SAAA,EAAW,eAAA;AAAA,UACX;AAAA,SACF;AAEA,QAAA,MAAM,WAAA,GAAc,MAAM,GAAA,CAAI,UAAA,CAAW;AAAA,UACvC,GAAA,EAAK,CAAA,WAAA,EAAc,SAAS,CAAA,CAAA,EAAI,QAAQ,CAAA,CAAA;AAAA,UACxC,IAAI,YAAY;AACd,YAAA,MAAM,QAAA,GAAY,MAAM,GAAA,CAAI,MAAA,CAAO,IAAA;AAAA,cACjC,SAAA;AAAA,cACA,QAAA;AAAA,cACA;AAAA,aACF;AAEA,YAAA,OAAO;AAAA,cACL,SAAS,QAAA,CAAS,EAAA;AAAA,cAClB,UAAU,QAAA,CAAS,OAAA;AAAA,cACnB,WAAW,QAAA,CAAS,UAAA;AAAA,cACpB,UAAU,QAAA,CAAS,GAAA;AAAA,cACnB,OAAO,QAAA,CAAS,KAAA;AAAA,cAChB,OAAO,QAAA,CAAS,KAAA;AAAA,cAChB,WAAW,QAAA,CAAS;AAAA,aACtB;AAAA,UACF;AAAA,SACD,CAAA;AAED,QAAA,GAAA,CAAI,MAAA,CAAO,SAAA,EAAW,WAAA,CAAY,OAAO,CAAA;AACzC,QAAA,GAAA,CAAI,MAAA,CAAO,WAAA,EAAa,WAAA,CAAY,SAAS,CAAA;AAC7C,QAAA,GAAA,CAAI,MAAA,CAAO,UAAA,EAAY,WAAA,CAAY,QAAQ,CAAA;AAC3C,QAAA,GAAA,CAAI,MAAA,CAAO,UAAA,EAAY,WAAA,CAAY,QAAQ,CAAA;AAC3C,QAAA,GAAA,CAAI,MAAA,CAAO,OAAA,EAAS,WAAA,CAAY,KAAK,CAAA;AACrC,QAAA,GAAA,CAAI,MAAA,CAAO,OAAA,EAAS,WAAA,CAAY,KAAK,CAAA;AACrC,QAAA,GAAA,CAAI,MAAA,CAAO,WAAA,EAAa,WAAA,CAAY,SAAS,CAAA;AAAA,MAC/C,SAAS,KAAA,EAAY;AAEnB,QAAA,MAAM,IAAIC,iBAAA;AAAA,UACR,CAAA,oCAAA,EAAuCC,uBAAA,CAAgB,KAAK,CAAC,CAAA;AAAA,SAC/D;AAAA,MACF;AAAA,IACF;AAAA,GACD,CAAA;AACH;;;;"}