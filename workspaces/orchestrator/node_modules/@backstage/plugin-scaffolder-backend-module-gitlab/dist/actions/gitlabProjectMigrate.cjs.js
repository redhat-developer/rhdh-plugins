'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var errors = require('@backstage/errors');
var helpers = require('./helpers.cjs.js');
var gitlabRepoPush_examples = require('./gitlabRepoPush.examples.cjs.js');

const createGitlabProjectMigrateAction = (options) => {
  const { integrations } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "gitlab:group:migrate",
    examples: gitlabRepoPush_examples.examples,
    schema: {
      input: {
        destinationAccessToken: (z) => z.string({
          description: `The token to use for authorization to the target GitLab'`
        }),
        destinationUrl: (z) => z.string({
          description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`
        }),
        sourceAccessToken: (z) => z.string({
          description: `The token to use for authorization to the source GitLab'`
        }),
        sourceFullPath: (z) => z.string({
          description: "Full path to the project in the source Gitlab instance"
        }),
        sourceUrl: (z) => z.string({
          description: `Accepts the format 'https://gitlab.com/'`
        })
      },
      output: {
        importedRepoUrl: (z) => z.string({
          description: "URL to the newly imported repo"
        }),
        migrationId: (z) => z.number({
          description: "Id of the migration that imports the project"
        })
      }
    },
    async handler(ctx) {
      const {
        destinationAccessToken,
        destinationUrl,
        sourceAccessToken,
        sourceFullPath,
        sourceUrl
      } = ctx.input;
      const {
        host: destinationHost,
        repo: destinationSlug,
        owner: destinationNamespace
      } = pluginScaffolderNode.parseRepoUrl(destinationUrl, integrations);
      if (!destinationNamespace) {
        throw new errors.InputError(
          `Failed to determine target repository to migrate to. Make sure destinationUrl matches the format 'gitlab.myorg.com?repo=project_name&owner=group_name'`
        );
      }
      const api = helpers.createGitlabApi({
        integrations,
        token: destinationAccessToken,
        repoUrl: destinationUrl
      });
      const migrationEntity = [
        {
          sourceType: "project_entity",
          sourceFullPath,
          destinationSlug,
          destinationNamespace
        }
      ];
      const sourceConfig = {
        url: sourceUrl,
        access_token: sourceAccessToken
      };
      try {
        const migrationId = await ctx.checkpoint({
          key: `create.migration.${sourceUrl}`,
          fn: async () => {
            const migrationStatus = await api.Migrations.create(
              sourceConfig,
              migrationEntity
            );
            return migrationStatus.id;
          }
        });
        ctx.output(
          "importedRepoUrl",
          `${destinationHost}/${destinationNamespace}/${destinationSlug}`
        );
        ctx.output("migrationId", migrationId);
      } catch (e) {
        throw new errors.InputError(
          `Failed to transfer repo ${sourceFullPath}. Make sure that ${sourceFullPath} exists in ${sourceUrl}, and token has enough rights.
Error: ${e}`
        );
      }
    }
  });
};

exports.createGitlabProjectMigrateAction = createGitlabProjectMigrateAction;
//# sourceMappingURL=gitlabProjectMigrate.cjs.js.map
