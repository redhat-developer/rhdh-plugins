{"version":3,"file":"autocomplete.cjs.js","sources":["../../src/autocomplete/autocomplete.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getClient } from '../util';\n\nexport function createHandleAutocompleteRequest(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  return async function handleAutocompleteRequest({\n    resource,\n    token,\n    context,\n  }: {\n    resource: string;\n    token: string;\n    context: Record<string, string>;\n  }): Promise<{\n    results: {\n      title?: string;\n      id: string;\n    }[];\n  }> {\n    const { integrations } = options;\n    const client = getClient({\n      host: context.host ?? 'gitlab.com',\n      integrations,\n      token,\n    });\n\n    switch (resource) {\n      case 'groups': {\n        let groups: any[] = [];\n        let page = 1;\n        const perPage = 100;\n        let response = [];\n        let continueFetch = true;\n        while (continueFetch) {\n          response = await client.Groups.all({\n            pagination: 'offset',\n            page,\n            perPage,\n          });\n\n          groups = groups.concat(response);\n          if (response.length < perPage) continueFetch = false;\n          page++;\n        }\n\n        const result: {\n          results: {\n            title: string;\n            id: string;\n          }[];\n        } = {\n          results: groups.map(group => ({\n            title: group.full_path,\n            id: group.id.toString(),\n          })),\n        };\n        // append also user context\n        const user = await client.Users.showCurrentUser();\n        result.results.push({\n          title: user.username,\n          id: user.id.toString(),\n        });\n\n        return result;\n      }\n      case 'repositories': {\n        if (!context.id)\n          throw new InputError('Missing groupId and userId context parameter');\n\n        let response;\n        if (\n          context.id === (await client.Users.showCurrentUser())?.id.toString()\n        ) {\n          response = await client.Users.allProjects(context.id);\n        } else {\n          response = await client.Groups.allProjects(context.id);\n        }\n\n        return {\n          results: response.map(project => ({\n            title: project.name.trim(),\n            id: project.path,\n          })),\n        };\n      }\n      default:\n        throw new InputError(`Invalid resource: ${resource}`);\n    }\n  };\n}\n"],"names":["getClient","InputError"],"mappings":";;;;;AAoBO,SAAS,gCAAgC,OAAA,EAE7C;AACD,EAAA,OAAO,eAAe,yBAAA,CAA0B;AAAA,IAC9C,QAAA;AAAA,IACA,KAAA;AAAA,IACA;AAAA,GACF,EASG;AACD,IAAA,MAAM,EAAE,cAAa,GAAI,OAAA;AACzB,IAAA,MAAM,SAASA,cAAA,CAAU;AAAA,MACvB,IAAA,EAAM,QAAQ,IAAA,IAAQ,YAAA;AAAA,MACtB,YAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,QAAQ,QAAA;AAAU,MAChB,KAAK,QAAA,EAAU;AACb,QAAA,IAAI,SAAgB,EAAC;AACrB,QAAA,IAAI,IAAA,GAAO,CAAA;AACX,QAAA,MAAM,OAAA,GAAU,GAAA;AAChB,QAAA,IAAI,WAAW,EAAC;AAChB,QAAA,IAAI,aAAA,GAAgB,IAAA;AACpB,QAAA,OAAO,aAAA,EAAe;AACpB,UAAA,QAAA,GAAW,MAAM,MAAA,CAAO,MAAA,CAAO,GAAA,CAAI;AAAA,YACjC,UAAA,EAAY,QAAA;AAAA,YACZ,IAAA;AAAA,YACA;AAAA,WACD,CAAA;AAED,UAAA,MAAA,GAAS,MAAA,CAAO,OAAO,QAAQ,CAAA;AAC/B,UAAA,IAAI,QAAA,CAAS,MAAA,GAAS,OAAA,EAAS,aAAA,GAAgB,KAAA;AAC/C,UAAA,IAAA,EAAA;AAAA,QACF;AAEA,QAAA,MAAM,MAAA,GAKF;AAAA,UACF,OAAA,EAAS,MAAA,CAAO,GAAA,CAAI,CAAA,KAAA,MAAU;AAAA,YAC5B,OAAO,KAAA,CAAM,SAAA;AAAA,YACb,EAAA,EAAI,KAAA,CAAM,EAAA,CAAG,QAAA;AAAS,WACxB,CAAE;AAAA,SACJ;AAEA,QAAA,MAAM,IAAA,GAAO,MAAM,MAAA,CAAO,KAAA,CAAM,eAAA,EAAgB;AAChD,QAAA,MAAA,CAAO,QAAQ,IAAA,CAAK;AAAA,UAClB,OAAO,IAAA,CAAK,QAAA;AAAA,UACZ,EAAA,EAAI,IAAA,CAAK,EAAA,CAAG,QAAA;AAAS,SACtB,CAAA;AAED,QAAA,OAAO,MAAA;AAAA,MACT;AAAA,MACA,KAAK,cAAA,EAAgB;AACnB,QAAA,IAAI,CAAC,OAAA,CAAQ,EAAA;AACX,UAAA,MAAM,IAAIC,kBAAW,8CAA8C,CAAA;AAErE,QAAA,IAAI,QAAA;AACJ,QAAA,IACE,OAAA,CAAQ,QAAQ,MAAM,MAAA,CAAO,MAAM,eAAA,EAAgB,GAAI,EAAA,CAAG,QAAA,EAAS,EACnE;AACA,UAAA,QAAA,GAAW,MAAM,MAAA,CAAO,KAAA,CAAM,WAAA,CAAY,QAAQ,EAAE,CAAA;AAAA,QACtD,CAAA,MAAO;AACL,UAAA,QAAA,GAAW,MAAM,MAAA,CAAO,MAAA,CAAO,WAAA,CAAY,QAAQ,EAAE,CAAA;AAAA,QACvD;AAEA,QAAA,OAAO;AAAA,UACL,OAAA,EAAS,QAAA,CAAS,GAAA,CAAI,CAAA,OAAA,MAAY;AAAA,YAChC,KAAA,EAAO,OAAA,CAAQ,IAAA,CAAK,IAAA,EAAK;AAAA,YACzB,IAAI,OAAA,CAAQ;AAAA,WACd,CAAE;AAAA,SACJ;AAAA,MACF;AAAA,MACA;AACE,QAAA,MAAM,IAAIA,iBAAA,CAAW,CAAA,kBAAA,EAAqB,QAAQ,CAAA,CAAE,CAAA;AAAA;AACxD,EACF,CAAA;AACF;;;;"}