{"version":3,"file":"GaugeCard.esm.js","sources":["../../../src/components/ProgressBars/GaugeCard.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ReactNode } from 'react';\n\nimport { BottomLinkProps } from '../../layout/BottomLink';\nimport { InfoCard, InfoCardVariants } from '../../layout/InfoCard';\nimport { Gauge, GaugePropsGetColor } from './Gauge';\n\ntype Props = {\n  title: string;\n  subheader?: string;\n  variant?: InfoCardVariants;\n  /** Progress in % specified as decimal, e.g. \"0.23\" */\n  progress: number;\n  alignGauge?: 'normal' | 'bottom';\n  size?: 'normal' | 'small';\n  description?: ReactNode;\n  icon?: ReactNode;\n  inverse?: boolean;\n  deepLink?: BottomLinkProps;\n  getColor?: GaugePropsGetColor;\n};\n\n/** @public */\nexport type GaugeCardClassKey = 'root';\n\nconst useStyles = makeStyles(\n  {\n    root: {\n      height: '100%',\n      width: 250,\n    },\n    rootSmall: {\n      height: '100%',\n      width: 160,\n    },\n  },\n  { name: 'BackstageGaugeCard' },\n);\n\n/**\n * {@link Gauge} with header, subheader and footer\n *\n * @public\n *\n */\nexport function GaugeCard(props: Props) {\n  const classes = useStyles(props);\n  const {\n    title,\n    subheader,\n    progress,\n    inverse,\n    deepLink,\n    description,\n    icon,\n    variant,\n    alignGauge = 'normal',\n    size = 'normal',\n    getColor,\n  } = props;\n\n  const gaugeProps = {\n    inverse,\n    description,\n    getColor,\n    value: progress,\n  };\n\n  return (\n    <Box className={size === 'small' ? classes.rootSmall : classes.root}>\n      <InfoCard\n        title={title}\n        subheader={subheader}\n        deepLink={deepLink}\n        variant={variant}\n        alignContent={alignGauge}\n        icon={icon}\n        titleTypographyProps={{\n          ...(size === 'small' ? { variant: 'subtitle2' } : undefined),\n        }}\n        subheaderTypographyProps={{\n          ...(size === 'small' ? { variant: 'body2' } : undefined),\n        }}\n      >\n        <Gauge {...gaugeProps} size={size} />\n      </InfoCard>\n    </Box>\n  );\n}\n"],"names":[],"mappings":";;;;;;AAyCA,MAAM,SAAA,GAAY,UAAA;AAAA,EAChB;AAAA,IACE,IAAA,EAAM;AAAA,MACJ,MAAA,EAAQ,MAAA;AAAA,MACR,KAAA,EAAO;AAAA,KACT;AAAA,IACA,SAAA,EAAW;AAAA,MACT,MAAA,EAAQ,MAAA;AAAA,MACR,KAAA,EAAO;AAAA;AACT,GACF;AAAA,EACA,EAAE,MAAM,oBAAA;AACV,CAAA;AAQO,SAAS,UAAU,KAAA,EAAc;AACtC,EAAA,MAAM,OAAA,GAAU,UAAU,KAAK,CAAA;AAC/B,EAAA,MAAM;AAAA,IACJ,KAAA;AAAA,IACA,SAAA;AAAA,IACA,QAAA;AAAA,IACA,OAAA;AAAA,IACA,QAAA;AAAA,IACA,WAAA;AAAA,IACA,IAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAA,GAAa,QAAA;AAAA,IACb,IAAA,GAAO,QAAA;AAAA,IACP;AAAA,GACF,GAAI,KAAA;AAEJ,EAAA,MAAM,UAAA,GAAa;AAAA,IACjB,OAAA;AAAA,IACA,WAAA;AAAA,IACA,QAAA;AAAA,IACA,KAAA,EAAO;AAAA,GACT;AAEA,EAAA,uBACE,GAAA,CAAC,OAAI,SAAA,EAAW,IAAA,KAAS,UAAU,OAAA,CAAQ,SAAA,GAAY,QAAQ,IAAA,EAC7D,QAAA,kBAAA,GAAA;AAAA,IAAC,QAAA;AAAA,IAAA;AAAA,MACC,KAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MACA,OAAA;AAAA,MACA,YAAA,EAAc,UAAA;AAAA,MACd,IAAA;AAAA,MACA,oBAAA,EAAsB;AAAA,QACpB,GAAI,IAAA,KAAS,OAAA,GAAU,EAAE,OAAA,EAAS,aAAY,GAAI;AAAA,OACpD;AAAA,MACA,wBAAA,EAA0B;AAAA,QACxB,GAAI,IAAA,KAAS,OAAA,GAAU,EAAE,OAAA,EAAS,SAAQ,GAAI;AAAA,OAChD;AAAA,MAEA,QAAA,kBAAA,GAAA,CAAC,KAAA,EAAA,EAAO,GAAG,UAAA,EAAY,IAAA,EAAY;AAAA;AAAA,GACrC,EACF,CAAA;AAEJ;;;;"}