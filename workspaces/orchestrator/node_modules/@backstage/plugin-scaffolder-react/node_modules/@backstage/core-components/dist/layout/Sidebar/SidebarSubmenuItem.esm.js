import { jsxs, jsx } from 'react/jsx-runtime';
import { useContext, useState } from 'react';
import { useResolvedPath, useLocation, resolvePath } from 'react-router-dom';
import { makeStyles } from '@material-ui/core/styles';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import { Link } from '../../components/Link/Link.esm.js';
import classNames from 'classnames';
import ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';
import ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';
import { SidebarItemWithSubmenuContext } from './config.esm.js';
import { isLocationMatch } from './utils.esm.js';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';

const useStyles = makeStyles(
  (theme) => ({
    item: {
      height: 48,
      width: "100%",
      "&:hover": {
        background: theme.palette.navigation.navItem?.hoverBackground || "#6f6f6f",
        color: theme.palette.navigation.selectedColor
      },
      display: "flex",
      alignItems: "center",
      color: theme.palette.navigation.color,
      padding: theme.spacing(2.5),
      cursor: "pointer",
      position: "relative",
      background: "none",
      border: "none"
    },
    itemContainer: {
      width: "100%"
    },
    selected: {
      background: "#6f6f6f",
      color: theme.palette.common.white
    },
    label: {
      margin: theme.spacing(1.75),
      marginLeft: theme.spacing(1),
      fontSize: theme.typography.body2.fontSize,
      whiteSpace: "nowrap",
      overflow: "hidden",
      "text-overflow": "ellipsis",
      lineHeight: 1
    },
    subtitle: {
      fontSize: 10,
      whiteSpace: "nowrap",
      overflow: "hidden",
      "text-overflow": "ellipsis"
    },
    dropdownArrow: {
      position: "absolute",
      right: 21
    },
    dropdown: {
      display: "flex",
      flexDirection: "column",
      alignItems: "end"
    },
    dropdownItem: {
      width: "100%",
      padding: "10px 0 10px 0",
      "&:hover": {
        background: theme.palette.navigation.navItem?.hoverBackground || "#6f6f6f",
        color: theme.palette.navigation.selectedColor
      }
    },
    dropdownButton: {
      textTransform: "none",
      justifyContent: "flex-start"
    },
    textContent: {
      color: theme.palette.navigation.color,
      paddingLeft: theme.spacing(4),
      paddingRight: theme.spacing(1),
      fontSize: theme.typography.body2.fontSize,
      whiteSpace: "nowrap",
      overflow: "hidden",
      "text-overflow": "ellipsis"
    }
  }),
  { name: "BackstageSidebarSubmenuItem" }
);
const SidebarSubmenuItem = (props) => {
  const { title, subtitle, to, icon: Icon, dropdownItems, exact } = props;
  const classes = useStyles();
  const { setIsHoveredOn } = useContext(SidebarItemWithSubmenuContext);
  const closeSubmenu = () => {
    setIsHoveredOn(false);
  };
  const toLocation = useResolvedPath(to ?? "");
  const currentLocation = useLocation();
  let isActive = isLocationMatch(currentLocation, toLocation, exact);
  const [showDropDown, setShowDropDown] = useState(
    props.initialShowDropdown ?? false
  );
  const handleClickDropdown = () => {
    setShowDropDown(!showDropDown);
  };
  if (dropdownItems !== void 0) {
    dropdownItems.some((item) => {
      const resolvedPath = resolvePath(item.to);
      isActive = isLocationMatch(currentLocation, resolvedPath, exact);
      return isActive;
    });
    return /* @__PURE__ */ jsxs(Box, { className: classes.itemContainer, children: [
      /* @__PURE__ */ jsx(Tooltip, { title, enterDelay: 500, enterNextDelay: 500, children: /* @__PURE__ */ jsxs(
        Button,
        {
          role: "button",
          onClick: handleClickDropdown,
          onTouchStart: (e) => e.stopPropagation(),
          className: classNames(
            classes.item,
            classes.dropdownButton,
            isActive ? classes.selected : void 0
          ),
          children: [
            Icon && /* @__PURE__ */ jsx(Icon, { fontSize: "small" }),
            /* @__PURE__ */ jsxs(
              Typography,
              {
                variant: "subtitle1",
                component: "span",
                className: classes.label,
                children: [
                  title,
                  /* @__PURE__ */ jsx("br", {}),
                  subtitle && /* @__PURE__ */ jsx(
                    Typography,
                    {
                      variant: "caption",
                      component: "span",
                      className: classes.subtitle,
                      children: subtitle
                    }
                  )
                ]
              }
            ),
            showDropDown ? /* @__PURE__ */ jsx(ArrowDropUpIcon, { className: classes.dropdownArrow }) : /* @__PURE__ */ jsx(ArrowDropDownIcon, { className: classes.dropdownArrow })
          ]
        }
      ) }),
      dropdownItems && showDropDown && /* @__PURE__ */ jsx(Box, { className: classes.dropdown, children: dropdownItems.map((object, key) => /* @__PURE__ */ jsx(
        Tooltip,
        {
          title: object.title,
          enterDelay: 500,
          enterNextDelay: 500,
          children: /* @__PURE__ */ jsx(
            Link,
            {
              to: object.to,
              underline: "none",
              className: classes.dropdownItem,
              onClick: closeSubmenu,
              onTouchStart: (e) => e.stopPropagation(),
              children: /* @__PURE__ */ jsx(Typography, { component: "span", className: classes.textContent, children: object.title })
            }
          )
        },
        key
      )) })
    ] });
  }
  return /* @__PURE__ */ jsx(Box, { className: classes.itemContainer, children: /* @__PURE__ */ jsx(Tooltip, { title, enterDelay: 500, enterNextDelay: 500, children: /* @__PURE__ */ jsxs(
    Link,
    {
      to,
      underline: "none",
      className: classNames(
        classes.item,
        isActive ? classes.selected : void 0
      ),
      onClick: closeSubmenu,
      onTouchStart: (e) => e.stopPropagation(),
      children: [
        Icon && /* @__PURE__ */ jsx(Icon, { fontSize: "small" }),
        /* @__PURE__ */ jsxs(
          Typography,
          {
            variant: "subtitle1",
            component: "span",
            className: classes.label,
            children: [
              title,
              /* @__PURE__ */ jsx("br", {}),
              subtitle && /* @__PURE__ */ jsx(
                Typography,
                {
                  variant: "caption",
                  component: "span",
                  className: classes.subtitle,
                  children: subtitle
                }
              )
            ]
          }
        )
      ]
    }
  ) }) });
};

export { SidebarSubmenuItem };
//# sourceMappingURL=SidebarSubmenuItem.esm.js.map
