{"version":3,"file":"OpaqueType.esm.js","sources":["../../../../../../packages/opaque-internal/src/OpaqueType.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO(Rugvip): This lives here temporarily, but should be moved to a more\n// central location. It's useful for backend packages too so we'll need to have\n// it in a common package, but it might also be that we want to make it\n// available publicly too in which case it would make sense to have this be part\n// of @backstage/version-bridge. The problem with exporting it from there is\n// that it would need to be very stable at that point, so it might be a bit\n// early to put it there already.\n\n/**\n * A helper for working with opaque types.\n */\nexport class OpaqueType<\n  T extends {\n    public: { $$type: string };\n    versions: { version: string | undefined };\n  },\n> {\n  /**\n   * Creates a new opaque type.\n   *\n   * @param options.type The type identifier of the opaque type\n   * @param options.versions The available versions of the opaque type\n   * @returns A new opaque type helper\n   */\n  static create<\n    T extends {\n      public: { $$type: string };\n      versions: { version: string | undefined };\n    },\n  >(options: {\n    type: T['public']['$$type'];\n    versions: Array<T['versions']['version']>;\n  }) {\n    return new OpaqueType<T>(options.type, new Set(options.versions));\n  }\n\n  #type: string;\n  #versions: Set<string | undefined>;\n\n  private constructor(type: string, versions: Set<string | undefined>) {\n    this.#type = type;\n    this.#versions = versions;\n  }\n\n  /**\n   * The internal version of the opaque type, used like this: `typeof MyOpaqueType.TPublic`\n   *\n   * @remarks\n   *\n   * This property is only useful for type checking, its runtime value is `undefined`.\n   */\n  TPublic: T['public'] = undefined as any;\n\n  /**\n   * The internal version of the opaque type, used like this: `typeof MyOpaqueType.TInternal`\n   *\n   * @remarks\n   *\n   * This property is only useful for type checking, its runtime value is `undefined`.\n   */\n  TInternal: T['public'] & T['versions'] = undefined as any;\n\n  /**\n   * @param value Input value expected to be an instance of this opaque type\n   * @returns True if the value matches this opaque type\n   */\n  isType = (value: unknown): value is T['public'] => {\n    return this.#isThisInternalType(value);\n  };\n\n  /**\n   * @param value Input value expected to be an instance of this opaque type\n   * @throws If the value is not an instance of this opaque type or is of an unsupported version\n   * @returns The internal version of the opaque type\n   */\n  toInternal = (value: unknown): T['public'] & T['versions'] => {\n    if (!this.#isThisInternalType(value)) {\n      throw new TypeError(\n        `Invalid opaque type, expected '${\n          this.#type\n        }', but got '${this.#stringifyUnknown(value)}'`,\n      );\n    }\n\n    if (!this.#versions.has(value.version)) {\n      const versions = Array.from(this.#versions).map(this.#stringifyVersion);\n      if (versions.length > 1) {\n        versions[versions.length - 1] = `or ${versions[versions.length - 1]}`;\n      }\n      const expected =\n        versions.length > 2 ? versions.join(', ') : versions.join(' ');\n      throw new TypeError(\n        `Invalid opaque type instance, got version ${this.#stringifyVersion(\n          value.version,\n        )}, expected ${expected}`,\n      );\n    }\n\n    return value;\n  };\n\n  /**\n   * Creates an instance of the opaque type, returning the public type.\n   *\n   * @param version The version of the instance to create\n   * @param value The remaining public and internal properties of the instance\n   * @returns An instance of the opaque type\n   */\n  createInstance<\n    TVersion extends T['versions']['version'],\n    TPublic extends T['public'],\n  >(\n    version: TVersion,\n    props: Omit<T['public'], '$$type'> &\n      (T['versions'] extends infer UVersion\n        ? UVersion extends { version: TVersion }\n          ? Omit<UVersion, 'version'>\n          : never\n        : never) &\n      Object, // & Object to allow for object properties too, e.g. toString()\n  ): TPublic {\n    return Object.assign(props as object, {\n      $$type: this.#type,\n      ...(version && { version }),\n    }) as unknown as TPublic;\n  }\n\n  #isThisInternalType(value: unknown): value is T['public'] & T['versions'] {\n    if (value === null || typeof value !== 'object') {\n      return false;\n    }\n    return (value as T['public']).$$type === this.#type;\n  }\n\n  #stringifyUnknown(value: unknown) {\n    if (typeof value !== 'object') {\n      return `<${typeof value}>`;\n    }\n    if (value === null) {\n      return '<null>';\n    }\n    if ('$$type' in value) {\n      return String(value.$$type);\n    }\n    return String(value);\n  }\n\n  #stringifyVersion = (version: string | undefined) => {\n    return version ? `'${version}'` : 'undefined';\n  };\n}\n"],"names":[],"mappings":"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"}