import { jsx } from 'react/jsx-runtime';
import { createVersionedContext, createVersionedValueMap } from '@backstage/version-bridge';
import { useContext, useCallback, useState } from 'react';

const SecretsContext = createVersionedContext("secrets-context");
const SecretsContextProvider = (props) => {
  const { initialSecrets = {} } = props;
  const [secrets, setSecrets] = useState({
    ...initialSecrets
  });
  return /* @__PURE__ */ jsx(
    SecretsContext.Provider,
    {
      value: createVersionedValueMap({ 1: { secrets, setSecrets } }),
      children: props.children
    }
  );
};
const useTemplateSecrets = () => {
  const value = useContext(SecretsContext)?.atVersion(1);
  if (!value) {
    throw new Error(
      "useTemplateSecrets must be used within a SecretsContextProvider"
    );
  }
  const { setSecrets: updateSecrets, secrets = {} } = value;
  const setSecrets = useCallback(
    (input) => {
      updateSecrets((currentSecrets) => ({ ...currentSecrets, ...input }));
    },
    [updateSecrets]
  );
  return { setSecrets, secrets };
};

export { SecretsContextProvider, useTemplateSecrets };
//# sourceMappingURL=SecretsContext.esm.js.map
