import { ApiBlueprint, createExtensionInput } from '@backstage/frontend-plugin-api';
import { formFieldsApiRef } from './ref.esm.js';
import '../blueprints/FormDecoratorBlueprint.esm.js';
import { FormFieldBlueprint } from '../blueprints/FormFieldBlueprint.esm.js';
import { OpaqueFormField } from '../../packages/scaffolder-internal/src/wiring/InternalFormField.esm.js';

class DefaultScaffolderFormFieldsApi {
  constructor(formFieldLoaders = []) {
    this.formFieldLoaders = formFieldLoaders;
  }
  async getFormFields() {
    const formFields = await Promise.all(
      this.formFieldLoaders.map((loader) => loader())
    );
    const internalFormFields = formFields.map(OpaqueFormField.toInternal);
    return internalFormFields;
  }
}
const formFieldsApi = ApiBlueprint.makeWithOverrides({
  name: "form-fields",
  inputs: {
    formFields: createExtensionInput([
      FormFieldBlueprint.dataRefs.formFieldLoader
    ])
  },
  factory(originalFactory, { inputs }) {
    const formFieldLoaders = inputs.formFields.map(
      (e) => e.get(FormFieldBlueprint.dataRefs.formFieldLoader)
    );
    return originalFactory(
      (defineParams) => defineParams({
        api: formFieldsApiRef,
        deps: {},
        factory: () => new DefaultScaffolderFormFieldsApi(formFieldLoaders)
      })
    );
  }
});

export { formFieldsApi };
//# sourceMappingURL=FormFieldsApi.esm.js.map
