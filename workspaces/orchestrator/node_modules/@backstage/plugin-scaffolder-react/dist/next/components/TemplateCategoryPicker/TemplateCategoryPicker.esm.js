import { jsx, jsxs } from 'react/jsx-runtime';
import { Progress } from '@backstage/core-components';
import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { useEntityTypeFilter } from '@backstage/plugin-catalog-react';
import Box from '@material-ui/core/Box';
import Checkbox from '@material-ui/core/Checkbox';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import CheckBoxIcon from '@material-ui/icons/CheckBox';
import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Autocomplete from '@material-ui/lab/Autocomplete';
import capitalize from 'lodash/capitalize';
import { scaffolderReactTranslationRef } from '../../../translation.esm.js';

const icon = /* @__PURE__ */ jsx(CheckBoxOutlineBlankIcon, { fontSize: "small" });
const checkedIcon = /* @__PURE__ */ jsx(CheckBoxIcon, { fontSize: "small" });
const useStyles = makeStyles(
  {
    root: {},
    label: {}
  },
  { name: "ScaffolderReactTemplateCategoryPicker" }
);
const TemplateCategoryPicker = () => {
  const { t } = useTranslationRef(scaffolderReactTranslationRef);
  const classes = useStyles();
  const alertApi = useApi(alertApiRef);
  const { error, loading, availableTypes, selectedTypes, setSelectedTypes } = useEntityTypeFilter();
  if (loading) return /* @__PURE__ */ jsx(Progress, {});
  if (error) {
    alertApi.post({
      message: `Failed to load entity types with error: ${error}`,
      severity: "error"
    });
    return null;
  }
  if (!availableTypes) return null;
  return /* @__PURE__ */ jsxs(Box, { className: classes.root, pb: 1, pt: 1, children: [
    /* @__PURE__ */ jsx(
      Typography,
      {
        className: classes.label,
        variant: "button",
        component: "label",
        htmlFor: "categories-picker",
        children: t("templateCategoryPicker.title")
      }
    ),
    /* @__PURE__ */ jsx(
      Autocomplete,
      {
        PopperComponent: (popperProps) => /* @__PURE__ */ jsx("div", { ...popperProps, children: popperProps.children }),
        multiple: true,
        id: "categories-picker",
        options: availableTypes,
        value: selectedTypes,
        onChange: (_, value) => setSelectedTypes(value),
        renderOption: (option, { selected }) => /* @__PURE__ */ jsx(
          FormControlLabel,
          {
            control: /* @__PURE__ */ jsx(
              Checkbox,
              {
                icon,
                checkedIcon,
                checked: selected
              }
            ),
            label: capitalize(option)
          }
        ),
        size: "small",
        popupIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}),
        renderInput: (params) => /* @__PURE__ */ jsx(TextField, { ...params, variant: "outlined" })
      }
    )
  ] });
};

export { TemplateCategoryPicker };
//# sourceMappingURL=TemplateCategoryPicker.esm.js.map
