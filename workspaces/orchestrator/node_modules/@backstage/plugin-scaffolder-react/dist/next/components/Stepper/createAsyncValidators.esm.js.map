{"version":3,"file":"createAsyncValidators.esm.js","sources":["../../../../src/next/components/Stepper/createAsyncValidators.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldValidation } from '@rjsf/utils';\nimport type { JsonObject, JsonValue } from '@backstage/types';\nimport { ApiHolder } from '@backstage/core-plugin-api';\nimport {\n  Draft07 as JSONSchema,\n  JsonError,\n  JsonSchema,\n} from 'json-schema-library';\nimport { createFieldValidation, extractSchemaFromStep } from '../../lib';\nimport {\n  CustomFieldValidator,\n  FieldExtensionUiSchema,\n} from '@backstage/plugin-scaffolder-react';\nimport { isObject } from './utils';\n\n/** @alpha */\nexport type FormValidation = {\n  [name: string]: FieldValidation | FormValidation;\n};\n\nconst isJsonError = (\n  value: JsonError | JsonSchema,\n): value is { type: 'error'; message: string } =>\n  'type' in value && value.type === 'error';\n\n/** @alpha */\nexport const createAsyncValidators = (\n  rootSchema: JsonObject,\n  validators: Record<\n    string,\n    undefined | CustomFieldValidator<unknown, unknown>\n  >,\n  context: {\n    apiHolder: ApiHolder;\n  },\n) => {\n  async function validate(\n    formData: JsonObject,\n    pathPrefix: string = '#',\n    current: JsonObject = formData,\n  ): Promise<FormValidation> {\n    const parsedSchema = new JSONSchema(rootSchema);\n    const formValidation: FormValidation = {};\n\n    const validateForm = async (\n      validatorName: string,\n      key: string,\n      value: JsonValue | undefined,\n      schema: JsonObject,\n      uiSchema: FieldExtensionUiSchema<unknown, unknown>,\n    ) => {\n      const validator = validators[validatorName];\n      if (validator) {\n        const fieldValidation = createFieldValidation();\n        try {\n          await validator(value, fieldValidation, {\n            ...context,\n            formData,\n            schema,\n            uiSchema,\n          });\n        } catch (ex) {\n          fieldValidation.addError(ex.message);\n        }\n        formValidation[key] = fieldValidation;\n      }\n    };\n\n    for (const [key, value] of Object.entries(current)) {\n      const pointer = `${pathPrefix}/${key}`;\n      const definitionInSchema = parsedSchema.getSchema({\n        pointer,\n        data: formData,\n      });\n\n      if (!definitionInSchema) {\n        continue;\n      }\n\n      if (isJsonError(definitionInSchema)) {\n        throw new Error(definitionInSchema.message);\n      }\n\n      const { schema, uiSchema } = extractSchemaFromStep(\n        definitionInSchema as JsonObject,\n      );\n\n      const hasItems = definitionInSchema && definitionInSchema.items;\n\n      const doValidateItem = async (\n        propValue: JsonObject,\n        itemSchema: JsonObject,\n        itemUiSchema: FieldExtensionUiSchema<unknown, unknown>,\n      ) => {\n        await validateForm(\n          propValue['ui:field'] as string,\n          key,\n          value,\n          itemSchema,\n          itemUiSchema,\n        );\n      };\n\n      const doValidate = async (propValue: JsonObject) => {\n        if ('ui:field' in propValue) {\n          const { schema: itemsSchema, uiSchema: itemsUiSchema } =\n            extractSchemaFromStep(definitionInSchema.items);\n          await doValidateItem(propValue, itemsSchema, itemsUiSchema);\n        }\n      };\n\n      const doValidateDependency = async (propValue: JsonObject) => {\n        const { schema: itemsSchema, uiSchema: itemsUiSchema } =\n          extractSchemaFromStep(propValue);\n        await doValidateItem(propValue, itemsSchema, itemsUiSchema);\n\n        const iterable = Array.isArray(value) ? value : [value];\n        for (const item of iterable) {\n          if (item && isObject(item)) {\n            const keys = Object.keys(item);\n            for (const k of keys) {\n              if (itemsUiSchema[k] && 'ui:field' in itemsUiSchema[k]) {\n                await validateForm(\n                  itemsUiSchema[k]['ui:field'],\n                  k,\n                  item[k],\n                  itemsSchema,\n                  itemsUiSchema,\n                );\n              }\n            }\n          }\n        }\n      };\n\n      if ('ui:field' in definitionInSchema) {\n        await doValidateItem(definitionInSchema, schema, uiSchema);\n      } else if (hasItems && 'ui:field' in definitionInSchema.items) {\n        await doValidate(definitionInSchema.items);\n      } else if (hasItems && definitionInSchema.items.type === 'object') {\n        const properties = (definitionInSchema.items?.properties ??\n          []) as JsonObject[];\n        for (const [, propValue] of Object.entries(properties)) {\n          await doValidate(propValue);\n        }\n\n        const dependencies = (definitionInSchema.items?.dependencies ??\n          []) as JsonObject[];\n        for (const [, propValue] of Object.entries(dependencies)) {\n          await doValidateDependency(propValue);\n        }\n      } else if (isObject(value)) {\n        formValidation[key] = await validate(formData, pointer, value);\n      }\n    }\n\n    return formValidation;\n  }\n\n  return async (formData: JsonObject) => {\n    return await validate(formData);\n  };\n};\n"],"names":["JSONSchema"],"mappings":"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"}