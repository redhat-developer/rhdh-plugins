import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import IconButton from '@material-ui/core/IconButton';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import MenuList from '@material-ui/core/MenuList';
import Popover from '@material-ui/core/Popover';
import { makeStyles } from '@material-ui/core/styles';
import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
import DescriptionIcon from '@material-ui/icons/Description';
import Edit from '@material-ui/icons/Edit';
import List from '@material-ui/icons/List';
import Functions from '@material-ui/icons/Functions';
import MoreVert from '@material-ui/icons/MoreVert';
import { useState } from 'react';
import { usePermission } from '@backstage/plugin-permission-react';
import { templateManagementPermission } from '@backstage/plugin-scaffolder-common/alpha';
import { scaffolderReactTranslationRef } from '../../../translation.esm.js';

const useStyles = makeStyles((theme) => ({
  button: {
    color: theme.page.fontColor
  }
}));
function ScaffolderPageContextMenu(props) {
  const { t } = useTranslationRef(scaffolderReactTranslationRef);
  const {
    onEditorClicked,
    onActionsClicked,
    onTasksClicked,
    onCreateClicked,
    onTemplatingExtensionsClicked
  } = props;
  const classes = useStyles();
  const [anchorEl, setAnchorEl] = useState();
  const { allowed: canManageTemplates } = usePermission({
    permission: templateManagementPermission
  });
  if (!(onEditorClicked || onActionsClicked || onTasksClicked || onCreateClicked || onTemplatingExtensionsClicked)) {
    return null;
  }
  const onOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const onClose = () => {
    setAnchorEl(void 0);
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      IconButton,
      {
        id: "long-menu",
        "aria-label": t("scaffolderPageContextMenu.moreLabel"),
        "aria-controls": "long-menu",
        "aria-expanded": !!anchorEl,
        "aria-haspopup": "true",
        role: "button",
        onClick: onOpen,
        "data-testid": "menu-button",
        color: "inherit",
        className: classes.button,
        children: /* @__PURE__ */ jsx(MoreVert, {})
      }
    ),
    /* @__PURE__ */ jsx(
      Popover,
      {
        "aria-labelledby": "long-menu",
        open: Boolean(anchorEl),
        onClose,
        anchorEl,
        anchorOrigin: { vertical: "bottom", horizontal: "right" },
        transformOrigin: { vertical: "top", horizontal: "right" },
        children: /* @__PURE__ */ jsxs(MenuList, { children: [
          onCreateClicked && /* @__PURE__ */ jsxs(MenuItem, { onClick: onCreateClicked, children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(CreateComponentIcon, { fontSize: "small" }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: t("scaffolderPageContextMenu.createLabel")
              }
            )
          ] }),
          onEditorClicked && canManageTemplates && /* @__PURE__ */ jsxs(MenuItem, { onClick: onEditorClicked, children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Edit, { fontSize: "small" }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: t("scaffolderPageContextMenu.editorLabel")
              }
            )
          ] }),
          onTemplatingExtensionsClicked && /* @__PURE__ */ jsxs(MenuItem, { onClick: onTemplatingExtensionsClicked, children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Functions, { fontSize: "small" }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: t(
                  "scaffolderPageContextMenu.templatingExtensionsLabel"
                )
              }
            )
          ] }),
          onActionsClicked && /* @__PURE__ */ jsxs(MenuItem, { onClick: onActionsClicked, children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(DescriptionIcon, { fontSize: "small" }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: t("scaffolderPageContextMenu.actionsLabel")
              }
            )
          ] }),
          onTasksClicked && /* @__PURE__ */ jsxs(MenuItem, { onClick: onTasksClicked, children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(List, { fontSize: "small" }) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: t("scaffolderPageContextMenu.tasksLabel")
              }
            )
          ] })
        ] })
      }
    )
  ] });
}

export { ScaffolderPageContextMenu };
//# sourceMappingURL=ScaffolderPageContextMenu.esm.js.map
