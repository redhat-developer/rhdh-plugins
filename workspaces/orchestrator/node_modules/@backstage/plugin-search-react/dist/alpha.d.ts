import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import { ListItemProps } from '@material-ui/core/ListItem';
import { SearchDocument, SearchResult } from '@backstage/plugin-search-common';
import * as _backstage_core_plugin_api_alpha from '@backstage/core-plugin-api/alpha';

/** @alpha */
type BaseSearchResultListItemProps<T = {}> = T & {
    rank?: number;
    result?: SearchDocument;
} & Omit<ListItemProps, 'button'>;
/** @alpha */
type SearchResultItemExtensionComponent = <P extends BaseSearchResultListItemProps>(props: P) => JSX.Element | null;
/** @alpha */
type SearchResultItemExtensionPredicate = (result: SearchResult) => boolean;
/** @alpha */
type SearchFilterExtensionComponentProps = {
    className: string;
};
/** @alpha */
type SearchFilterExtensionComponent = (props: SearchFilterExtensionComponentProps) => JSX.Element;

/** @alpha */
interface SearchResultListItemBlueprintParams {
    /**
     * The extension component.
     */
    component: (options: {
        config: {
            noTrack?: boolean;
        };
    }) => Promise<SearchResultItemExtensionComponent>;
    /**
     * When an extension defines a predicate, it returns true if the result should be rendered by that extension.
     * Defaults to a predicate that returns true, which means it renders all sorts of results.
     */
    predicate?: SearchResultItemExtensionPredicate;
}
/**
 * @alpha
 * Creates SearchResultListItem extensions
 */
declare const SearchResultListItemBlueprint: _backstage_frontend_plugin_api.ExtensionBlueprint<{
    kind: "search-result-list-item";
    params: SearchResultListItemBlueprintParams;
    output: _backstage_frontend_plugin_api.ExtensionDataRef<{
        predicate?: SearchResultItemExtensionPredicate;
        component: SearchResultItemExtensionComponent;
    }, "search.search-result-list-item.item", {}>;
    inputs: {};
    config: {
        noTrack: boolean;
    };
    configInput: {
        noTrack?: boolean | undefined;
    };
    dataRefs: {
        item: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
            predicate?: SearchResultItemExtensionPredicate;
            component: SearchResultItemExtensionComponent;
        }, "search.search-result-list-item.item", {}>;
    };
}>;

/** @alpha */
interface SearchFilterResultTypeBlueprintParams {
    /**
     * The value of the result type.
     */
    value: string;
    /**
     * The name of the result type.
     */
    name: string;
    /**
     * The icon of the result type.
     */
    icon: JSX.Element;
}
/**
 * @alpha
 */
declare const SearchFilterResultTypeBlueprint: _backstage_frontend_plugin_api.ExtensionBlueprint<{
    kind: "search-filter-result-type";
    params: SearchFilterResultTypeBlueprintParams;
    output: _backstage_frontend_plugin_api.ExtensionDataRef<{
        value: string;
        name: string;
        icon: JSX.Element;
    }, "search.filters.result-types.type", {}>;
    inputs: {};
    config: {};
    configInput: {};
    dataRefs: {
        resultType: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
            value: string;
            name: string;
            icon: JSX.Element;
        }, "search.filters.result-types.type", {}>;
    };
}>;

/** @alpha */
interface SearchFilterBlueprintParams {
    component: SearchFilterExtensionComponent;
}
/**
 * @alpha
 */
declare const SearchFilterBlueprint: _backstage_frontend_plugin_api.ExtensionBlueprint<{
    kind: "search-filter";
    params: SearchFilterBlueprintParams;
    output: _backstage_frontend_plugin_api.ExtensionDataRef<{
        component: SearchFilterExtensionComponent;
    }, "search.filters.filter", {}>;
    inputs: {};
    config: {};
    configInput: {};
    dataRefs: {
        searchFilters: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
            component: SearchFilterExtensionComponent;
        }, "search.filters.filter", {}>;
    };
}>;

/**
 * @alpha
 */
declare const searchReactTranslationRef: _backstage_core_plugin_api_alpha.TranslationRef<"search-react", {
    readonly "searchBar.title": "Search";
    readonly "searchBar.placeholder": "Search in {{org}}";
    readonly "searchBar.clearButtonTitle": "Clear";
    readonly "searchFilter.allOptionTitle": "All";
    readonly "searchPagination.limitLabel": "Results per page:";
    readonly "searchPagination.limitText": "of {{num}}";
    readonly noResultsDescription: "Sorry, no results were found";
    readonly "searchResultGroup.linkTitle": "See All";
    readonly "searchResultGroup.addFilterButtonTitle": "Add filter";
    readonly "searchResultPager.next": "Next";
    readonly "searchResultPager.previous": "Previous";
}>;

export { type BaseSearchResultListItemProps, SearchFilterBlueprint, type SearchFilterBlueprintParams, type SearchFilterExtensionComponent, type SearchFilterExtensionComponentProps, SearchFilterResultTypeBlueprint, type SearchFilterResultTypeBlueprintParams, type SearchResultItemExtensionComponent, type SearchResultItemExtensionPredicate, SearchResultListItemBlueprint, type SearchResultListItemBlueprintParams, searchReactTranslationRef };
