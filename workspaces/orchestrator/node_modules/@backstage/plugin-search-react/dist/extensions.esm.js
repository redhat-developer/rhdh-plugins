import { jsx } from 'react/jsx-runtime';
import { useCallback, createElement, Fragment, isValidElement, cloneElement } from 'react';
import { useAnalytics, createReactExtension, useElementFilter, getComponentData } from '@backstage/core-plugin-api';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import { DefaultResultListItem as HigherOrderDefaultResultListItem } from './components/DefaultResultListItem/DefaultResultListItem.esm.js';

const SEARCH_RESULT_LIST_ITEM_EXTENSION = "search.results.list.items.extensions.v1";
const findSearchResultListItemExtensionElement = (elements, result) => {
  for (const element of elements) {
    if (!isValidElement(element)) continue;
    const predicate = getComponentData(
      element,
      SEARCH_RESULT_LIST_ITEM_EXTENSION
    );
    if (!predicate?.(result)) continue;
    return cloneElement(element, {
      rank: result.rank,
      highlight: result.highlight,
      result: result.document,
      // Use props in situations where a consumer is manually rendering the extension
      ...element.props
    });
  }
  return null;
};
const SearchResultListItemExtension = (props) => {
  const {
    rank,
    result,
    noTrack,
    children,
    alignItems = "flex-start",
    ...rest
  } = props;
  const analytics = useAnalytics();
  const handleClickCapture = useCallback(() => {
    if (noTrack) return;
    if (!result) return;
    analytics.captureEvent("discover", result.title, {
      attributes: { to: result.location },
      value: rank
    });
  }, [rank, result, noTrack, analytics]);
  return /* @__PURE__ */ jsx(
    ListItem,
    {
      divider: true,
      alignItems,
      onClickCapture: handleClickCapture,
      ...rest,
      children
    }
  );
};
const createSearchResultListItemExtension = (options) => {
  const { name, component, predicate = () => true } = options;
  return createReactExtension({
    name,
    component: {
      lazy: () => component().then(
        (type) => (props) => /* @__PURE__ */ jsx(
          SearchResultListItemExtension,
          {
            rank: props.rank,
            result: props.result,
            noTrack: props.noTrack,
            children: createElement(type, props)
          }
        )
      )
    },
    data: {
      [SEARCH_RESULT_LIST_ITEM_EXTENSION]: predicate
    }
  });
};
const useSearchResultListItemExtensions = (children) => {
  const elements = useElementFilter(
    children,
    (collection) => {
      return collection.selectByComponentData({
        key: SEARCH_RESULT_LIST_ITEM_EXTENSION
      }).getElements();
    },
    [children]
  );
  return useCallback(
    (result, key) => {
      const element = findSearchResultListItemExtensionElement(
        elements,
        result
      );
      return /* @__PURE__ */ jsx(Fragment, { children: element ?? /* @__PURE__ */ jsx(
        SearchResultListItemExtension,
        {
          rank: result.rank,
          result: result.document,
          children: /* @__PURE__ */ jsx(
            HigherOrderDefaultResultListItem,
            {
              rank: result.rank,
              highlight: result.highlight,
              result: result.document
            }
          )
        }
      ) }, key);
    },
    [elements]
  );
};
const SearchResultListItemExtensions = (props) => {
  const { results, children, ...rest } = props;
  const render = useSearchResultListItemExtensions(children);
  return /* @__PURE__ */ jsx(List, { ...rest, children: results.map(render) });
};

export { SearchResultListItemExtension, SearchResultListItemExtensions, createSearchResultListItemExtension, useSearchResultListItemExtensions };
//# sourceMappingURL=extensions.esm.js.map
