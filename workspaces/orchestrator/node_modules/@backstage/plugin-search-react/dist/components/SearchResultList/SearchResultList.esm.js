import { jsx, Fragment } from 'react/jsx-runtime';
import List from '@material-ui/core/List';
import { EmptyState, Progress, ResponseErrorPanel } from '@backstage/core-components';
import { AnalyticsContext } from '@backstage/core-plugin-api';
import { useSearchResultListItemExtensions } from '../../extensions.esm.js';
import { DefaultResultListItem as HigherOrderDefaultResultListItem } from '../DefaultResultListItem/DefaultResultListItem.esm.js';
import { SearchResultState } from '../SearchResult/SearchResult.esm.js';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { searchReactTranslationRef } from '../../translation.esm.js';

const SearchResultListLayout = (props) => {
  const { t } = useTranslationRef(searchReactTranslationRef);
  const {
    error,
    loading,
    resultItems,
    renderResultItem = (resultItem) => /* @__PURE__ */ jsx(
      HigherOrderDefaultResultListItem,
      {
        result: resultItem.document
      },
      resultItem.document.location
    ),
    disableRenderingWithNoResults,
    noResultsComponent = disableRenderingWithNoResults ? null : /* @__PURE__ */ jsx(EmptyState, { missing: "data", title: t("noResultsDescription") }),
    ...rest
  } = props;
  if (loading) {
    return /* @__PURE__ */ jsx(Progress, {});
  }
  if (error) {
    return /* @__PURE__ */ jsx(
      ResponseErrorPanel,
      {
        title: "Error encountered while fetching search results",
        error
      }
    );
  }
  if (!resultItems?.length) {
    return /* @__PURE__ */ jsx(Fragment, { children: noResultsComponent });
  }
  return /* @__PURE__ */ jsx(List, { ...rest, children: resultItems.map(renderResultItem) });
};
const SearchResultList = (props) => {
  const { query, renderResultItem, children, ...rest } = props;
  const defaultRenderResultItem = useSearchResultListItemExtensions(children);
  return /* @__PURE__ */ jsx(
    AnalyticsContext,
    {
      attributes: {
        pluginId: "search",
        extension: "SearchResultList"
      },
      children: /* @__PURE__ */ jsx(SearchResultState, { query, children: ({ loading, error, value }) => /* @__PURE__ */ jsx(
        SearchResultListLayout,
        {
          ...rest,
          error,
          loading,
          resultItems: value?.results,
          renderResultItem: renderResultItem ?? defaultRenderResultItem
        }
      ) })
    }
  );
};

export { SearchResultList, SearchResultListLayout };
//# sourceMappingURL=SearchResultList.esm.js.map
