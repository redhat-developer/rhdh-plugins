import { jsx } from 'react/jsx-runtime';
import { useState, useMemo } from 'react';
import Chip from '@material-ui/core/Chip';
import TextField from '@material-ui/core/TextField';
import Autocomplete from '@material-ui/lab/Autocomplete';
import { useSearch } from '../../context/SearchContext.esm.js';
import { useDefaultFilterValue, useAsyncFilterValues } from './hooks.esm.js';
import { ensureFilterValueWithLabel } from './types.esm.js';

const AutocompleteFilter = (props) => {
  const {
    className,
    defaultValue,
    name,
    values: givenValues,
    valuesDebounceMs,
    label,
    filterSelectedOptions,
    limitTags,
    multiple
  } = props;
  const [inputValue, setInputValue] = useState("");
  useDefaultFilterValue(name, defaultValue);
  const asyncValues = typeof givenValues === "function" ? givenValues : void 0;
  const defaultValues = typeof givenValues === "function" ? void 0 : givenValues?.map((v) => ensureFilterValueWithLabel(v));
  const { value: values, loading } = useAsyncFilterValues(
    asyncValues,
    inputValue,
    defaultValues,
    valuesDebounceMs
  );
  const { filters, setFilters } = useSearch();
  const filterValueWithLabel = ensureFilterValueWithLabel(
    filters[name]
  );
  const filterValue = useMemo(
    () => filterValueWithLabel || (multiple ? [] : null),
    [filterValueWithLabel, multiple]
  );
  const handleChange = (_, newValue) => {
    setFilters((prevState) => {
      const { [name]: filter, ...others } = prevState;
      if (newValue) {
        return {
          ...others,
          [name]: Array.isArray(newValue) ? newValue.map((v) => v.value) : newValue.value
        };
      }
      return { ...others };
    });
  };
  const renderInput = (params) => /* @__PURE__ */ jsx(
    TextField,
    {
      ...params,
      name: "search",
      variant: "outlined",
      label,
      fullWidth: true
    }
  );
  const renderTags = (tagValue, getTagProps) => tagValue.map((option, index) => /* @__PURE__ */ jsx(Chip, { label: option.label, color: "primary", ...getTagProps({ index }) }));
  return /* @__PURE__ */ jsx(
    Autocomplete,
    {
      filterSelectedOptions,
      limitTags,
      multiple,
      className,
      id: `${multiple ? "multi-" : ""}select-filter-${name}--select`,
      options: values || [],
      loading,
      value: filterValue,
      onChange: handleChange,
      onInputChange: (_, newValue) => setInputValue(newValue),
      getOptionLabel: (option) => option.label,
      renderInput,
      renderTags
    }
  );
};

export { AutocompleteFilter };
//# sourceMappingURL=SearchFilter.Autocomplete.esm.js.map
