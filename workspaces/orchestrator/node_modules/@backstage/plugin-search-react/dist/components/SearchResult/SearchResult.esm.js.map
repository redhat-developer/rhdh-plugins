{"version":3,"file":"SearchResult.esm.js","sources":["../../../src/components/SearchResult/SearchResult.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReactNode } from 'react';\nimport useAsync, { AsyncState } from 'react-use/esm/useAsync';\nimport { isFunction } from 'lodash';\n\nimport {\n  Progress,\n  EmptyState,\n  ResponseErrorPanel,\n} from '@backstage/core-components';\nimport { useApi, AnalyticsContext } from '@backstage/core-plugin-api';\nimport { SearchQuery, SearchResultSet } from '@backstage/plugin-search-common';\n\nimport { searchApiRef } from '../../api';\nimport { useSearch } from '../../context';\nimport {\n  SearchResultListItemExtensions,\n  SearchResultListItemExtensionsProps,\n} from '../../extensions';\nimport { useTranslationRef } from '@backstage/frontend-plugin-api';\nimport { searchReactTranslationRef } from '../../translation';\n\n/**\n * Props for {@link SearchResultContext}\n * @public\n */\nexport type SearchResultContextProps = {\n  /**\n   * A child function that receives an asynchronous result set and returns a react element.\n   */\n  children: (\n    state: AsyncState<SearchResultSet>,\n    query: Partial<SearchQuery>,\n  ) => JSX.Element | null;\n};\n\n/**\n * Provides context-based results to a child function.\n * @param props - see {@link SearchResultContextProps}.\n * @example\n * ```\n * <SearchResultContext>\n *   {({ loading, error, value }) => (\n *     <List>\n *       {value?.map(({ document }) => (\n *         <DefaultSearchResultListItem\n *           key={document.location}\n *           result={document}\n *         />\n *       ))}\n *     </List>\n *   )}\n * </SearchResultContext>\n * ```\n * @public\n */\nexport const SearchResultContext = (props: SearchResultContextProps) => {\n  const { children } = props;\n  const context = useSearch();\n  const { result: state, ...query } = context;\n  return children(state, query);\n};\n\n/**\n * Props for {@link SearchResultApi}\n * @public\n */\nexport type SearchResultApiProps = SearchResultContextProps & {\n  query: Partial<SearchQuery>;\n};\n\n/**\n * Request results through the search api and provide them to a child function.\n * @param props - see {@link SearchResultApiProps}.\n * @example\n * ```\n * <SearchResultApi>\n *   {({ loading, error, value }) => (\n *     <List>\n *       {value?.map(({ document }) => (\n *         <DefaultSearchResultListItem\n *           key={document.location}\n *           result={document}\n *         />\n *       ))}\n *     </List>\n *   )}\n * </SearchResultApi>\n * ```\n * @public\n */\nexport const SearchResultApi = (props: SearchResultApiProps) => {\n  const { query, children } = props;\n  const searchApi = useApi(searchApiRef);\n\n  const state = useAsync(() => {\n    const { term = '', types = [], filters = {}, ...rest } = query;\n    return searchApi.query({ ...rest, term, types, filters });\n  }, [query]);\n\n  return children(state, query);\n};\n\n/**\n * Props for {@link SearchResultState}\n * @public\n */\nexport type SearchResultStateProps = SearchResultContextProps &\n  Partial<SearchResultApiProps>;\n\n/**\n * Call a child render function passing a search state as an argument.\n * @remarks By default, results are taken from context, but when a \"query\" prop is set, results are requested from the search api.\n * @param props - see {@link SearchResultStateProps}.\n * @example\n * Consuming results from context:\n * ```\n * <SearchResultState>\n *   {({ loading, error, value }) => (\n *     <List>\n *       {value?.map(({ document }) => (\n *         <DefaultSearchResultListItem\n *           key={document.location}\n *           result={document}\n *         />\n *       ))}\n *     </List>\n *   )}\n * </SearchResultState>\n * ```\n * @example\n * Requesting results using the search api:\n * ```\n * <SearchResultState query={{ term: 'documentation' }}>\n *   {({ loading, error, value }) => (\n *     <List>\n *       {value?.map(({ document }) => (\n *         <DefaultSearchResultListItem\n *           key={document.location}\n *           result={document}\n *         />\n *       ))}\n *     </List>\n *   )}\n * </SearchResultState>\n * ```\n * @public\n */\nexport const SearchResultState = (props: SearchResultStateProps) => {\n  const { query, children } = props;\n\n  return query ? (\n    <SearchResultApi query={query}>{children}</SearchResultApi>\n  ) : (\n    <SearchResultContext>{children}</SearchResultContext>\n  );\n};\n\n/**\n * Props for {@link SearchResult}\n * @public\n */\nexport type SearchResultProps = Pick<SearchResultStateProps, 'query'> &\n  Omit<SearchResultListItemExtensionsProps, 'results' | 'children'> & {\n    children?: ReactNode | ((resultSet: SearchResultSet) => JSX.Element);\n    noResultsComponent?: JSX.Element;\n  };\n\n/**\n * Renders results from a parent search context or api.\n * @remarks default components for loading, error and empty variants are returned.\n * @param props - see {@link SearchResultProps}.\n * @public\n */\nexport const SearchResultComponent = (props: SearchResultProps) => {\n  const { t } = useTranslationRef(searchReactTranslationRef);\n  const {\n    query,\n    children,\n    noResultsComponent = (\n      <EmptyState missing=\"data\" title={t('noResultsDescription')} />\n    ),\n    ...rest\n  } = props;\n\n  return (\n    <SearchResultState query={query}>\n      {({ loading, error, value }) => {\n        if (loading) {\n          return <Progress />;\n        }\n\n        if (error) {\n          return (\n            <ResponseErrorPanel\n              title=\"Error encountered while fetching search results\"\n              error={error}\n            />\n          );\n        }\n\n        if (!value?.results.length) {\n          return noResultsComponent;\n        }\n\n        if (isFunction(children)) {\n          return children(value);\n        }\n\n        return (\n          <SearchResultListItemExtensions {...rest} results={value.results}>\n            {children}\n          </SearchResultListItemExtensions>\n        );\n      }}\n    </SearchResultState>\n  );\n};\n\n/**\n * A component returning the search result from a parent search context or api.\n * @param props - see {@link SearchResultProps}.\n * @public\n */\nexport const SearchResult = (props: SearchResultProps) => (\n  <AnalyticsContext\n    attributes={{\n      pluginId: 'search',\n      extension: 'SearchResult',\n    }}\n  >\n    <SearchResultComponent {...props} />\n  </AnalyticsContext>\n);\n"],"names":[],"mappings":";;;;;;;;;;;AAuEO,MAAM,mBAAA,GAAsB,CAAC,KAAA,KAAoC;AACtE,EAAA,MAAM,EAAE,UAAS,GAAI,KAAA;AACrB,EAAA,MAAM,UAAU,SAAA,EAAU;AAC1B,EAAA,MAAM,EAAE,MAAA,EAAQ,KAAA,EAAO,GAAG,OAAM,GAAI,OAAA;AACpC,EAAA,OAAO,QAAA,CAAS,OAAO,KAAK,CAAA;AAC9B;AA8BO,MAAM,eAAA,GAAkB,CAAC,KAAA,KAAgC;AAC9D,EAAA,MAAM,EAAE,KAAA,EAAO,QAAA,EAAS,GAAI,KAAA;AAC5B,EAAA,MAAM,SAAA,GAAY,OAAO,YAAY,CAAA;AAErC,EAAA,MAAM,KAAA,GAAQ,SAAS,MAAM;AAC3B,IAAA,MAAM,EAAE,IAAA,GAAO,EAAA,EAAI,KAAA,GAAQ,EAAC,EAAG,OAAA,GAAU,EAAC,EAAG,GAAG,IAAA,EAAK,GAAI,KAAA;AACzD,IAAA,OAAO,SAAA,CAAU,MAAM,EAAE,GAAG,MAAM,IAAA,EAAM,KAAA,EAAO,SAAS,CAAA;AAAA,EAC1D,CAAA,EAAG,CAAC,KAAK,CAAC,CAAA;AAEV,EAAA,OAAO,QAAA,CAAS,OAAO,KAAK,CAAA;AAC9B;AA+CO,MAAM,iBAAA,GAAoB,CAAC,KAAA,KAAkC;AAClE,EAAA,MAAM,EAAE,KAAA,EAAO,QAAA,EAAS,GAAI,KAAA;AAE5B,EAAA,OAAO,KAAA,uBACJ,eAAA,EAAA,EAAgB,KAAA,EAAe,UAAS,CAAA,mBAEzC,GAAA,CAAC,uBAAqB,QAAA,EAAS,CAAA;AAEnC;AAkBO,MAAM,qBAAA,GAAwB,CAAC,KAAA,KAA6B;AACjE,EAAA,MAAM,EAAE,CAAA,EAAE,GAAI,iBAAA,CAAkB,yBAAyB,CAAA;AACzD,EAAA,MAAM;AAAA,IACJ,KAAA;AAAA,IACA,QAAA;AAAA,IACA,kBAAA,uBACG,UAAA,EAAA,EAAW,OAAA,EAAQ,QAAO,KAAA,EAAO,CAAA,CAAE,sBAAsB,CAAA,EAAG,CAAA;AAAA,IAE/D,GAAG;AAAA,GACL,GAAI,KAAA;AAEJ,EAAA,uBACE,GAAA,CAAC,qBAAkB,KAAA,EAChB,QAAA,EAAA,CAAC,EAAE,OAAA,EAAS,KAAA,EAAO,OAAM,KAAM;AAC9B,IAAA,IAAI,OAAA,EAAS;AACX,MAAA,2BAAQ,QAAA,EAAA,EAAS,CAAA;AAAA,IACnB;AAEA,IAAA,IAAI,KAAA,EAAO;AACT,MAAA,uBACE,GAAA;AAAA,QAAC,kBAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAM,iDAAA;AAAA,UACN;AAAA;AAAA,OACF;AAAA,IAEJ;AAEA,IAAA,IAAI,CAAC,KAAA,EAAO,OAAA,CAAQ,MAAA,EAAQ;AAC1B,MAAA,OAAO,kBAAA;AAAA,IACT;AAEA,IAAA,IAAI,UAAA,CAAW,QAAQ,CAAA,EAAG;AACxB,MAAA,OAAO,SAAS,KAAK,CAAA;AAAA,IACvB;AAEA,IAAA,2BACG,8BAAA,EAAA,EAAgC,GAAG,MAAM,OAAA,EAAS,KAAA,CAAM,SACtD,QAAA,EACH,CAAA;AAAA,EAEJ,CAAA,EACF,CAAA;AAEJ;AAOO,MAAM,YAAA,GAAe,CAAC,KAAA,qBAC3B,GAAA;AAAA,EAAC,gBAAA;AAAA,EAAA;AAAA,IACC,UAAA,EAAY;AAAA,MACV,QAAA,EAAU,QAAA;AAAA,MACV,SAAA,EAAW;AAAA,KACb;AAAA,IAEA,QAAA,kBAAA,GAAA,CAAC,qBAAA,EAAA,EAAuB,GAAG,KAAA,EAAO;AAAA;AACpC;;;;"}