{"version":3,"file":"LunrSearchEngineIndexer.cjs.js","sources":["../../src/engines/LunrSearchEngineIndexer.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexableDocument } from '@backstage/plugin-search-common';\nimport lunr from 'lunr';\nimport { BatchSearchEngineIndexer } from '../indexing';\n\n/**\n * Lunr specific search engine indexer\n * @public\n */\nexport class LunrSearchEngineIndexer extends BatchSearchEngineIndexer {\n  private schemaInitialized = false;\n  private builder: lunr.Builder;\n  private docStore: Record<string, IndexableDocument> = {};\n\n  constructor() {\n    super({ batchSize: 1000 });\n\n    this.builder = new lunr.Builder();\n    this.builder.pipeline.add(lunr.trimmer, lunr.stopWordFilter, lunr.stemmer);\n    this.builder.searchPipeline.add(lunr.stemmer);\n    this.builder.metadataWhitelist = ['position'];\n  }\n\n  // No async initialization required.\n  async initialize(): Promise<void> {}\n  async finalize(): Promise<void> {}\n\n  async index(documents: IndexableDocument[]): Promise<void> {\n    if (!this.schemaInitialized) {\n      // Make this lunr index aware of all relevant fields.\n      Object.keys(documents[0]).forEach(field => {\n        this.builder.field(field);\n      });\n\n      // Set \"location\" field as reference field\n      this.builder.ref('location');\n\n      this.schemaInitialized = true;\n    }\n\n    documents.forEach(document => {\n      // Add document to Lunar index\n      this.builder.add(document);\n\n      // Store documents in memory to be able to look up document using the ref during query time\n      // This is not how you should implement your SearchEngine implementation! Do not copy!\n      this.docStore[document.location] = document;\n    });\n  }\n\n  buildIndex() {\n    return this.builder.build();\n  }\n\n  getDocumentStore() {\n    return this.docStore;\n  }\n}\n"],"names":["BatchSearchEngineIndexer","lunr"],"mappings":";;;;;;;;;;;AAwBO,MAAM,gCAAgCA,iDAAA,CAAyB;AAAA,EAC5D,iBAAA,GAAoB,KAAA;AAAA,EACpB,OAAA;AAAA,EACA,WAA8C,EAAC;AAAA,EAEvD,WAAA,GAAc;AACZ,IAAA,KAAA,CAAM,EAAE,SAAA,EAAW,GAAA,EAAM,CAAA;AAEzB,IAAA,IAAA,CAAK,OAAA,GAAU,IAAIC,qBAAA,CAAK,OAAA,EAAQ;AAChC,IAAA,IAAA,CAAK,OAAA,CAAQ,SAAS,GAAA,CAAIA,qBAAA,CAAK,SAASA,qBAAA,CAAK,cAAA,EAAgBA,sBAAK,OAAO,CAAA;AACzE,IAAA,IAAA,CAAK,OAAA,CAAQ,cAAA,CAAe,GAAA,CAAIA,qBAAA,CAAK,OAAO,CAAA;AAC5C,IAAA,IAAA,CAAK,OAAA,CAAQ,iBAAA,GAAoB,CAAC,UAAU,CAAA;AAAA,EAC9C;AAAA;AAAA,EAGA,MAAM,UAAA,GAA4B;AAAA,EAAC;AAAA,EACnC,MAAM,QAAA,GAA0B;AAAA,EAAC;AAAA,EAEjC,MAAM,MAAM,SAAA,EAA+C;AACzD,IAAA,IAAI,CAAC,KAAK,iBAAA,EAAmB;AAE3B,MAAA,MAAA,CAAO,KAAK,SAAA,CAAU,CAAC,CAAC,CAAA,CAAE,QAAQ,CAAA,KAAA,KAAS;AACzC,QAAA,IAAA,CAAK,OAAA,CAAQ,MAAM,KAAK,CAAA;AAAA,MAC1B,CAAC,CAAA;AAGD,MAAA,IAAA,CAAK,OAAA,CAAQ,IAAI,UAAU,CAAA;AAE3B,MAAA,IAAA,CAAK,iBAAA,GAAoB,IAAA;AAAA,IAC3B;AAEA,IAAA,SAAA,CAAU,QAAQ,CAAA,QAAA,KAAY;AAE5B,MAAA,IAAA,CAAK,OAAA,CAAQ,IAAI,QAAQ,CAAA;AAIzB,MAAA,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,QAAQ,CAAA,GAAI,QAAA;AAAA,IACrC,CAAC,CAAA;AAAA,EACH;AAAA,EAEA,UAAA,GAAa;AACX,IAAA,OAAO,IAAA,CAAK,QAAQ,KAAA,EAAM;AAAA,EAC5B;AAAA,EAEA,gBAAA,GAAmB;AACjB,IAAA,OAAO,IAAA,CAAK,QAAA;AAAA,EACd;AACF;;;;"}