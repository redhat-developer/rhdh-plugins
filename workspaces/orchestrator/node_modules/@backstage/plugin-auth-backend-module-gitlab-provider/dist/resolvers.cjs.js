'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');
var zod = require('zod');

exports.gitlabSignInResolvers = void 0;
((gitlabSignInResolvers2) => {
  gitlabSignInResolvers2.usernameMatchingUserEntityName = pluginAuthNode.createSignInResolverFactory({
    optionsSchema: zod.z.object({
      dangerouslyAllowSignInWithoutUserInCatalog: zod.z.boolean().optional()
    }).optional(),
    create(options = {}) {
      return async (info, ctx) => {
        const { result } = info;
        const id = result.fullProfile.username;
        if (!id) {
          throw new Error(`GitLab user profile does not contain a username`);
        }
        return ctx.signInWithCatalogUser(
          {
            entityRef: { name: id }
          },
          {
            dangerousEntityRefFallback: options?.dangerouslyAllowSignInWithoutUserInCatalog ? { entityRef: { name: id } } : void 0
          }
        );
      };
    }
  });
})(exports.gitlabSignInResolvers || (exports.gitlabSignInResolvers = {}));
//# sourceMappingURL=resolvers.cjs.js.map
