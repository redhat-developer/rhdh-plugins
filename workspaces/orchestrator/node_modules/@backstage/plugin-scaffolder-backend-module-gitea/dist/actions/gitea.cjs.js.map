{"version":3,"file":"gitea.cjs.js","sources":["../../src/actions/gitea.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { Config } from '@backstage/config';\nimport {\n  getGiteaRequestOptions,\n  GiteaIntegrationConfig,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  ActionContext,\n  createTemplateAction,\n  getRepoSourceDirectory,\n  initRepoAndPush,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { examples } from './gitea.examples';\nimport crypto from 'crypto';\n\nconst checkGiteaContentUrl = async (\n  config: GiteaIntegrationConfig,\n  options: {\n    owner?: string;\n    repo: string;\n    defaultBranch?: string;\n  },\n): Promise<Response> => {\n  const { owner, repo, defaultBranch } = options;\n  let response: Response;\n  const getOptions: RequestInit = {\n    method: 'GET',\n  };\n\n  try {\n    response = await fetch(\n      `${config.baseUrl}/${owner}/${repo}/src/branch/${defaultBranch}`,\n      getOptions,\n    );\n  } catch (e) {\n    throw new Error(\n      `Unable to get the repository: ${owner}/${repo} metadata , ${e}`,\n    );\n  }\n  return response;\n};\n\nconst checkGiteaOrg = async (\n  config: GiteaIntegrationConfig,\n  options: {\n    owner: string;\n  },\n): Promise<void> => {\n  const { owner } = options;\n  let response: Response;\n  // check first if the org = owner exists\n  const getOptions: RequestInit = {\n    method: 'GET',\n    headers: {\n      ...getGiteaRequestOptions(config).headers,\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    response = await fetch(\n      `${config.baseUrl}/api/v1/orgs/${owner}`,\n      getOptions,\n    );\n  } catch (e) {\n    throw new Error(\n      `Unable to get the Organization: ${owner}; Error cause: ${e.message}, code: ${e.cause.code}`,\n    );\n  }\n  if (response.status !== 200) {\n    throw new Error(\n      `Organization ${owner} do not exist. Please create it first !`,\n    );\n  }\n};\n\nconst createGiteaProject = async (\n  config: GiteaIntegrationConfig,\n  options: {\n    projectName: string;\n    owner?: string;\n    repoVisibility?: string;\n    description: string;\n  },\n): Promise<void> => {\n  const { projectName, description, owner, repoVisibility } = options;\n\n  /*\n    Several options exist to create a repository using either the user or organisation\n    User: https://gitea.com/api/swagger#/user/createCurrentUserRepo\n    Api: URL/api/v1/user/repos\n    Remark: The user is the username defined part of the backstage integration config for the gitea URL !\n\n    Org: https://gitea.com/api/swagger#/organization/createOrgRepo\n    Api: URL/api/v1/orgs/${org_owner}/repos\n    This is the default scenario that we support currently\n  */\n  let response: Response;\n  let isPrivate: boolean;\n\n  if (repoVisibility === 'private') {\n    isPrivate = true;\n  } else if (repoVisibility === 'public') {\n    isPrivate = false;\n  } else {\n    // Provide a default value if repoVisibility is neither \"private\" nor \"public\"\n    isPrivate = false;\n  }\n\n  const postOptions: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: projectName,\n      description,\n      private: isPrivate,\n    }),\n    headers: {\n      ...getGiteaRequestOptions(config).headers,\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    response = await fetch(\n      `${config.baseUrl}/api/v1/orgs/${owner}/repos`,\n      postOptions,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n};\n\nconst generateCommitMessage = (\n  config: Config,\n  commitSubject?: string,\n): string => {\n  const changeId = crypto.randomBytes(20).toString('hex');\n  const msg = `${\n    config.getOptionalString('scaffolder.defaultCommitMessage') || commitSubject\n  }\\n\\nChange-Id: I${changeId}`;\n  return msg;\n};\n\nasync function checkAvailabilityGiteaRepository(\n  maxDuration: number,\n  integrationConfig: GiteaIntegrationConfig,\n  options: {\n    owner?: string;\n    repo: string;\n    defaultBranch: string;\n    ctx: ActionContext<any, any, any>;\n  },\n) {\n  const startTimestamp = Date.now();\n\n  const { owner, repo, defaultBranch, ctx } = options;\n  const sleep = (ms: number | undefined) => new Promise(r => setTimeout(r, ms));\n  let response: Response;\n\n  while (Date.now() - startTimestamp < maxDuration) {\n    if (ctx.signal?.aborted) return;\n\n    response = await checkGiteaContentUrl(integrationConfig, {\n      owner,\n      repo,\n      defaultBranch,\n    });\n\n    if (response.status !== 200) {\n      // Repository is not yet available/accessible ...\n      await sleep(1000);\n    } else {\n      // Gitea repository exists !\n      break;\n    }\n  }\n}\n\n/**\n * Creates a new action that initializes a git repository using the content of the workspace.\n * and publishes it to a Gitea instance.\n * @public\n */\nexport function createPublishGiteaAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:gitea',\n    description:\n      'Initializes a git repository using the content of the workspace, and publishes it to Gitea.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        description: z =>\n          z.string({\n            description: 'Repository Description',\n          }),\n        defaultBranch: z =>\n          z\n            .string({\n              description: `Sets the default branch on the repository. The default value is 'main'`,\n            })\n            .optional(),\n        repoVisibility: z =>\n          z\n            .enum(['private', 'public'], {\n              description: `Sets the visibility of the repository. The default value is 'public'.`,\n            })\n            .optional(),\n        gitCommitMessage: z =>\n          z\n            .string({\n              description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the default author email for the commit.`,\n            })\n            .optional(),\n        sourcePath: z =>\n          z\n            .string({\n              description: `Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.`,\n            })\n            .optional(),\n        signCommit: z =>\n          z\n            .boolean({\n              description: 'Sign commit with configured PGP private key',\n            })\n            .optional(),\n      },\n      output: {\n        remoteUrl: z =>\n          z\n            .string({\n              description: 'A URL to the repository with the provider',\n            })\n            .optional(),\n        repoContentsUrl: z =>\n          z\n            .string({\n              description: 'A URL to the root of the repository',\n            })\n            .optional(),\n        commitHash: z =>\n          z\n            .string({\n              description: 'The git commit hash of the initial commit',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'main',\n        repoVisibility = 'public',\n        gitAuthorName,\n        gitAuthorEmail,\n        gitCommitMessage = 'initial commit',\n        sourcePath,\n        signCommit,\n      } = ctx.input;\n\n      const { repo, host, owner } = parseRepoUrl(repoUrl, integrations);\n\n      const integrationConfig = integrations.gitea.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n      const { username, password } = integrationConfig.config;\n\n      if (!username || !password) {\n        throw new Error('Credentials for the gitea ${host} required.');\n      }\n\n      // check if the org exists within the gitea server\n      if (owner) {\n        await checkGiteaOrg(integrationConfig.config, { owner });\n      }\n\n      await createGiteaProject(integrationConfig.config, {\n        description,\n        repoVisibility,\n        owner: owner,\n        projectName: repo,\n      });\n\n      const auth = {\n        username: username,\n        password: password,\n      };\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      const signingKey =\n        integrationConfig.config.commitSigningKey ??\n        config.getOptionalString('scaffolder.defaultCommitSigningKey');\n      if (signCommit && !signingKey) {\n        throw new Error(\n          'Signing commits is enabled but no signing key is provided in the configuration',\n        );\n      }\n\n      // The owner to be used should be either the org name or user authenticated with the gitea server\n      const remoteUrl = `${integrationConfig.config.baseUrl}/${owner}/${repo}.git`;\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, sourcePath),\n        remoteUrl,\n        auth,\n        defaultBranch,\n        logger: ctx.logger,\n        commitMessage: generateCommitMessage(config, gitCommitMessage),\n        gitAuthorInfo,\n      });\n\n      // Check if the gitea repo URL is available before to exit\n      const maxDuration = 20000; // 20 seconds\n      await checkAvailabilityGiteaRepository(\n        maxDuration,\n        integrationConfig.config,\n        {\n          owner,\n          repo,\n          defaultBranch,\n          ctx,\n        },\n      );\n\n      const repoContentsUrl = `${integrationConfig.config.baseUrl}/${owner}/${repo}/src/branch/${defaultBranch}/`;\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n"],"names":["getGiteaRequestOptions","crypto","createTemplateAction","examples","parseRepoUrl","InputError","initRepoAndPush","getRepoSourceDirectory"],"mappings":"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"}