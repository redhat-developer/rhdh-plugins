{"version":3,"file":"router.cjs.js","sources":["../../../../src/schema/openapi/generated/router.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// ******************************************************************\n// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *\n// ******************************************************************\nimport { createValidatedOpenApiRouterFromGeneratedEndpointMap } from '@backstage/backend-openapi-utils';\nimport { EndpointMap } from './apis';\n\nexport const spec = {\n  openapi: '3.0.3',\n  info: {\n    title: 'catalog',\n    version: '1',\n    description:\n      'The API surface consists of a few distinct groups of functionality. Each has a\\ndedicated section below.\\n\\n:::note Note \\n  This page only describes some of the most commonly used parts of the API, and is a work in progress.\\n:::\\n\\nAll of the URL paths in this article are assumed to be on top of some base URL\\npointing at your catalog installation. For example, if the path given in a\\nsection below is `/entities`, and the catalog is located at\\n`http://localhost:7007/api/catalog` during local development, the full URL would\\nbe `http://localhost:7007/api/catalog/entities`. The actual URL may vary from\\none organization to the other, especially in production, but is commonly your\\n`backend.baseUrl` in your app config, plus `/api/catalog` at the end.\\n\\nSome or all of the endpoints may accept or require an `Authorization` header\\nwith a `Bearer` token, which should then be the Backstage token returned by the\\n[`identity API`](https://backstage.io/docs/reference/core-plugin-api.identityapiref).\\n',\n    license: {\n      name: 'Apache-2.0',\n      url: 'http://www.apache.org/licenses/LICENSE-2.0.html',\n    },\n    contact: {},\n  },\n  servers: [\n    {\n      url: '/',\n    },\n  ],\n  components: {\n    examples: {},\n    headers: {},\n    parameters: {\n      kind: {\n        name: 'kind',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      namespace: {\n        name: 'namespace',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      name: {\n        name: 'name',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      uid: {\n        name: 'uid',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      cursor: {\n        name: 'cursor',\n        in: 'query',\n        description:\n          'You may pass the `cursor` query parameters to perform cursor based pagination\\nthrough the set of entities. The value of `cursor` will be returned in the response, under the `pageInfo` property:\\n\\n```json\\n  \"pageInfo\": {\\n    \"nextCursor\": \"a-cursor\",\\n    \"prevCursor\": \"another-cursor\"\\n  }\\n```\\n\\nIf `nextCursor` exists, it can be used to retrieve the next batch of entities. Following the same approach,\\nif `prevCursor` exists, it can be used to retrieve the previous batch of entities.\\n\\n- [`filter`](#filtering), for selecting only a subset of all entities\\n- [`fields`](#field-selection), for selecting only parts of the full data\\n  structure of each entity\\n- `limit` for limiting the number of entities returned (20 is the default)\\n- [`orderField`](#ordering), for deciding the order of the entities\\n- `fullTextFilter`\\n  **NOTE**: [`filter`, `orderField`, `fullTextFilter`] and `cursor` are mutually exclusive. This means that,\\n  it isn\\'t possible to change any of [`filter`, `orderField`, `fullTextFilter`] when passing `cursor` as query parameters,\\n  as changing any of these properties will affect pagination. If any of `filter`, `orderField`, `fullTextFilter` is specified together with `cursor`, only the latter is taken into consideration.\\n',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n          minLength: 1,\n        },\n      },\n      after: {\n        name: 'after',\n        in: 'query',\n        description: 'Pointer to the previous page of results.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n          minLength: 1,\n        },\n      },\n      fields: {\n        name: 'fields',\n        in: 'query',\n        description:\n          \"By default the full entities are returned, but you can pass in a `fields` query\\nparameter which selects what parts of the entity data to retain. This makes the\\nresponse smaller and faster to transfer, and may allow the catalog to perform\\nmore efficient queries.\\n\\nThe query parameter value is a comma separated list of simplified JSON paths\\nlike above. Each path corresponds to the key of either a value, or of a subtree\\nroot that you want to keep in the output. The rest is pruned away. For example,\\nspecifying `?fields=metadata.name,metadata.annotations,spec` retains only the\\n`name` and `annotations` fields of the `metadata` of each entity (it'll be an\\nobject with at most two keys), keeps the entire `spec` unchanged, and cuts out\\nall other roots such as `relations`.\\n\\nSome more real world usable examples:\\n\\n- Return only enough data to form the full ref of each entity:\\n\\n  `/entities/by-query?fields=kind,metadata.namespace,metadata.name`\\n\",\n        required: false,\n        allowReserved: true,\n        explode: false,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        examples: {\n          'Get name and the entire relations collection': {\n            value: ['metadata.name', 'relations'],\n          },\n          'Get kind, name and namespace': {\n            value: ['kind', 'metadata.name', 'metadata.namespace'],\n          },\n        },\n      },\n      filter: {\n        name: 'filter',\n        in: 'query',\n        description:\n          'You can pass in one or more filter sets that get matched against each entity.\\nEach filter set is a number of conditions that all have to match for the\\ncondition to be true (conditions effectively have an AND between them). At least\\none filter set has to be true for the entity to be part of the result set\\n(filter sets effectively have an OR between them).\\n\\nExample:\\n\\n```text\\n/entities/by-query?filter=kind=user,metadata.namespace=default&filter=kind=group,spec.type\\n\\n  Return entities that match\\n\\n    Filter set 1:\\n      Condition 1: kind = user\\n                  AND\\n      Condition 2: metadata.namespace = default\\n\\n    OR\\n\\n    Filter set 2:\\n      Condition 1: kind = group\\n                  AND\\n      Condition 2: spec.type exists\\n```\\n\\nEach condition is either on the form `<key>`, or on the form `<key>=<value>`.\\nThe first form asserts on the existence of a certain key (with any value), and\\nthe second asserts that the key exists and has a certain value. All checks are\\nalways case _insensitive_.\\n\\nIn all cases, the key is a simplified JSON path in a given piece of entity data.\\nEach part of the path is a key of an object, and the traversal also descends\\nthrough arrays. There are two special forms:\\n\\n- Array items that are simple value types (such as strings) match on a key-value\\n  pair where the key is the item as a string, and the value is the string `true`\\n- Relations can be matched on a `relations.<type>=<targetRef>` form\\n\\nLet\\'s look at a simplified example to illustrate the concept:\\n\\n```json\\n{\\n  \"a\": {\\n    \"b\": [\"c\", { \"d\": 1 }],\\n    \"e\": 7\\n  }\\n}\\n```\\n\\nThis would match any one of the following conditions:\\n\\n- `a`\\n- `a.b`\\n- `a.b.c`\\n- `a.b.c=true`\\n- `a.b.d`\\n- `a.b.d=1`\\n- `a.e`\\n- `a.e=7`\\n\\nSome more real world usable examples:\\n\\n- Return all orphaned entities:\\n\\n  `/entities/by-query?filter=metadata.annotations.backstage.io/orphan=true`\\n\\n- Return all users and groups:\\n\\n  `/entities/by-query?filter=kind=user&filter=kind=group`\\n\\n- Return all service components:\\n\\n  `/entities/by-query?filter=kind=component,spec.type=service`\\n\\n- Return all entities with the `java` tag:\\n\\n  `/entities/by-query?filter=metadata.tags.java`\\n\\n- Return all users who are members of the `ops` group (note that the full\\n  [reference](references.md) of the group is used):\\n\\n  `/entities/by-query?filter=kind=user,relations.memberof=group:default/ops`\\n',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        examples: {\n          'Get groups': {\n            value: ['kind=group'],\n          },\n          'Get orphaned components': {\n            value: [\n              'kind=component,metadata.annotations.backstage.io/orphan=true',\n            ],\n          },\n        },\n      },\n      offset: {\n        name: 'offset',\n        in: 'query',\n        description: 'Number of records to skip in the query page.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n      limit: {\n        name: 'limit',\n        in: 'query',\n        description: 'Number of records to return in the response.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n      orderField: {\n        name: 'orderField',\n        in: 'query',\n        description:\n          'By default the entities are returned ordered by their internal uid. You can\\ncustomize the `orderField` query parameters to affect that ordering.\\n\\nFor example, to return entities by their name:\\n\\n`/entities/by-query?orderField=metadata.name,asc`\\n\\nEach parameter can be followed by `asc` for ascending lexicographical order or\\n`desc` for descending (reverse) lexicographical order.\\n',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n            description: 'A two-item tuple of [field, order].',\n          },\n        },\n        explode: true,\n        style: 'form',\n        examples: {\n          'Order ascending by name': {\n            value: ['metadata.name,asc'],\n          },\n          'Order descending by owner': {\n            value: ['spec.owner,desc'],\n          },\n        },\n      },\n    },\n    requestBodies: {},\n    responses: {\n      ErrorResponse: {\n        description: 'An error response from the backend.',\n        content: {\n          'application/json': {\n            schema: {\n              $ref: '#/components/schemas/Error',\n            },\n          },\n        },\n      },\n    },\n    schemas: {\n      Error: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              name: {\n                type: 'string',\n              },\n              message: {\n                type: 'string',\n              },\n              stack: {\n                type: 'string',\n              },\n              code: {\n                type: 'string',\n              },\n            },\n            required: ['name', 'message'],\n          },\n          request: {\n            type: 'object',\n            properties: {\n              method: {\n                type: 'string',\n              },\n              url: {\n                type: 'string',\n              },\n            },\n            required: ['method', 'url'],\n          },\n          response: {\n            type: 'object',\n            properties: {\n              statusCode: {\n                type: 'number',\n              },\n            },\n            required: ['statusCode'],\n          },\n        },\n        required: ['error', 'response'],\n        additionalProperties: {},\n      },\n      JsonObject: {\n        type: 'object',\n        properties: {},\n        description: 'A type representing all allowed JSON object values.',\n        additionalProperties: {},\n      },\n      MapStringString: {\n        type: 'object',\n        properties: {},\n        additionalProperties: {\n          type: 'string',\n        },\n        description: 'Construct a type with a set of properties K of type T',\n      },\n      EntityLink: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            description:\n              'An optional value to categorize links into specific groups',\n          },\n          icon: {\n            type: 'string',\n            description:\n              'An optional semantic key that represents a visual icon.',\n          },\n          title: {\n            type: 'string',\n            description: 'An optional descriptive title for the link.',\n          },\n          url: {\n            type: 'string',\n            description: 'The url to the external site, document, etc.',\n          },\n        },\n        required: ['url'],\n        description:\n          'A link to external information that is related to the entity.',\n        additionalProperties: false,\n      },\n      EntityMeta: {\n        type: 'object',\n        properties: {\n          links: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityLink',\n            },\n            description: 'A list of external hyperlinks related to the entity.',\n          },\n          tags: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            description:\n              'A list of single-valued strings, to for example classify catalog entities in\\nvarious ways.',\n          },\n          annotations: {\n            $ref: '#/components/schemas/MapStringString',\n          },\n          labels: {\n            $ref: '#/components/schemas/MapStringString',\n          },\n          description: {\n            type: 'string',\n            description:\n              'A short (typically relatively few words, on one line) description of the\\nentity.',\n          },\n          title: {\n            type: 'string',\n            description:\n              'A display name of the entity, to be presented in user interfaces instead\\nof the `name` property above, when available.\\nThis field is sometimes useful when the `name` is cumbersome or ends up\\nbeing perceived as overly technical. The title generally does not have\\nas stringent format requirements on it, so it may contain special\\ncharacters and be more explanatory. Do keep it very short though, and\\navoid situations where a title can be confused with the name of another\\nentity, or where two entities share a title.\\nNote that this is only for display purposes, and may be ignored by some\\nparts of the code. Entity references still always make use of the `name`\\nproperty, not the title.',\n          },\n          namespace: {\n            type: 'string',\n            description: 'The namespace that the entity belongs to.',\n          },\n          name: {\n            type: 'string',\n            description:\n              'The name of the entity.\\nMust be unique within the catalog at any given point in time, for any\\ngiven namespace + kind pair. This value is part of the technical\\nidentifier of the entity, and as such it will appear in URLs, database\\ntables, entity references, and similar. It is subject to restrictions\\nregarding what characters are allowed.\\nIf you want to use a different, more human readable string with fewer\\nrestrictions on it in user interfaces, see the `title` field below.',\n          },\n          etag: {\n            type: 'string',\n            description:\n              'An opaque string that changes for each update operation to any part of\\nthe entity, including metadata.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, and the server will then reject the\\noperation if it does not match the current stored value.',\n          },\n          uid: {\n            type: 'string',\n            description:\n              'A globally unique ID for the entity.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, but the server is free to reject requests\\nthat do so in such a way that it breaks semantics.',\n          },\n        },\n        required: ['name'],\n        description: 'Metadata fields common to all versions/kinds of entity.',\n        additionalProperties: {},\n      },\n      EntityRelation: {\n        type: 'object',\n        properties: {\n          targetRef: {\n            type: 'string',\n            description: 'The entity ref of the target of this relation.',\n          },\n          type: {\n            type: 'string',\n            description: 'The type of the relation.',\n          },\n        },\n        required: ['targetRef', 'type'],\n        description:\n          'A relation of a specific type to another entity in the catalog.',\n        additionalProperties: false,\n      },\n      Entity: {\n        type: 'object',\n        properties: {\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          metadata: {\n            $ref: '#/components/schemas/EntityMeta',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n        },\n        required: ['metadata', 'kind', 'apiVersion'],\n        description:\n          \"The parts of the format that's common to all versions/kinds of entity.\",\n      },\n      NullableEntity: {\n        type: 'object',\n        properties: {\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          metadata: {\n            $ref: '#/components/schemas/EntityMeta',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n        },\n        required: ['metadata', 'kind', 'apiVersion'],\n        description:\n          \"The parts of the format that's common to all versions/kinds of entity.\",\n        nullable: true,\n      },\n      EntityAncestryResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                parentEntityRefs: {\n                  items: {\n                    type: 'string',\n                  },\n                  type: 'array',\n                },\n                entity: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n              required: ['parentEntityRefs', 'entity'],\n            },\n          },\n          rootEntityRef: {\n            type: 'string',\n          },\n        },\n        required: ['items', 'rootEntityRef'],\n        additionalProperties: false,\n      },\n      EntitiesBatchResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/NullableEntity',\n            },\n            description:\n              'The list of entities, in the same order as the refs in the request. Entries\\nthat are null signify that no entity existed with that ref.',\n          },\n        },\n        required: ['items'],\n        additionalProperties: false,\n      },\n      EntityFacet: {\n        type: 'object',\n        properties: {\n          value: {\n            type: 'string',\n          },\n          count: {\n            type: 'number',\n          },\n        },\n        required: ['value', 'count'],\n        additionalProperties: false,\n      },\n      EntityFacetsResponse: {\n        type: 'object',\n        properties: {\n          facets: {\n            type: 'object',\n            additionalProperties: {\n              type: 'array',\n              items: {\n                $ref: '#/components/schemas/EntityFacet',\n              },\n            },\n          },\n        },\n        required: ['facets'],\n        additionalProperties: false,\n      },\n      Location: {\n        type: 'object',\n        properties: {\n          target: {\n            type: 'string',\n          },\n          type: {\n            type: 'string',\n          },\n          id: {\n            type: 'string',\n          },\n        },\n        required: ['target', 'type', 'id'],\n        description: 'Entity location for a specific entity.',\n        additionalProperties: false,\n      },\n      LocationSpec: {\n        type: 'object',\n        properties: {\n          target: {\n            type: 'string',\n          },\n          type: {\n            type: 'string',\n          },\n        },\n        required: ['target', 'type'],\n        description: 'Holds the entity location information.',\n        additionalProperties: false,\n      },\n      AnalyzeLocationExistingEntity: {\n        type: 'object',\n        properties: {\n          entity: {\n            $ref: '#/components/schemas/Entity',\n          },\n          isRegistered: {\n            type: 'boolean',\n          },\n          location: {\n            $ref: '#/components/schemas/LocationSpec',\n          },\n        },\n        required: ['entity', 'isRegistered', 'location'],\n        description:\n          \"If the folder pointed to already contained catalog info yaml files, they are\\nread and emitted like this so that the frontend can inform the user that it\\nlocated them and can make sure to register them as well if they weren't\\nalready\",\n        additionalProperties: false,\n      },\n      RecursivePartialEntityRelation: {\n        type: 'object',\n        properties: {\n          targetRef: {\n            type: 'string',\n            description: 'The entity ref of the target of this relation.',\n          },\n          type: {\n            type: 'string',\n            description: 'The type of the relation.',\n          },\n        },\n        description:\n          'A relation of a specific type to another entity in the catalog.',\n        additionalProperties: false,\n      },\n      RecursivePartialEntityMeta: {\n        allOf: [\n          {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          {\n            type: 'object',\n            properties: {\n              links: {\n                type: 'array',\n                items: {\n                  $ref: '#/components/schemas/EntityLink',\n                },\n                description:\n                  'A list of external hyperlinks related to the entity.',\n              },\n              tags: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n                description:\n                  'A list of single-valued strings, to for example classify catalog entities in\\nvarious ways.',\n              },\n              annotations: {\n                $ref: '#/components/schemas/MapStringString',\n              },\n              labels: {\n                $ref: '#/components/schemas/MapStringString',\n              },\n              description: {\n                type: 'string',\n                description:\n                  'A short (typically relatively few words, on one line) description of the\\nentity.',\n              },\n              title: {\n                type: 'string',\n                description:\n                  'A display name of the entity, to be presented in user interfaces instead\\nof the `name` property above, when available.\\nThis field is sometimes useful when the `name` is cumbersome or ends up\\nbeing perceived as overly technical. The title generally does not have\\nas stringent format requirements on it, so it may contain special\\ncharacters and be more explanatory. Do keep it very short though, and\\navoid situations where a title can be confused with the name of another\\nentity, or where two entities share a title.\\nNote that this is only for display purposes, and may be ignored by some\\nparts of the code. Entity references still always make use of the `name`\\nproperty, not the title.',\n              },\n              namespace: {\n                type: 'string',\n                description: 'The namespace that the entity belongs to.',\n              },\n              name: {\n                type: 'string',\n                description:\n                  'The name of the entity.\\nMust be unique within the catalog at any given point in time, for any\\ngiven namespace + kind pair. This value is part of the technical\\nidentifier of the entity, and as such it will appear in URLs, database\\ntables, entity references, and similar. It is subject to restrictions\\nregarding what characters are allowed.\\nIf you want to use a different, more human readable string with fewer\\nrestrictions on it in user interfaces, see the `title` field below.',\n              },\n              etag: {\n                type: 'string',\n                description:\n                  'An opaque string that changes for each update operation to any part of\\nthe entity, including metadata.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, and the server will then reject the\\noperation if it does not match the current stored value.',\n              },\n              uid: {\n                type: 'string',\n                description:\n                  'A globally unique ID for the entity.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, but the server is free to reject requests\\nthat do so in such a way that it breaks semantics.',\n              },\n            },\n            description:\n              'Metadata fields common to all versions/kinds of entity.',\n          },\n        ],\n        additionalProperties: false,\n      },\n      RecursivePartialEntity: {\n        type: 'object',\n        properties: {\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          metadata: {\n            $ref: '#/components/schemas/RecursivePartialEntityMeta',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/RecursivePartialEntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n        },\n        description: 'Makes all keys of an entire hierarchy optional.',\n        additionalProperties: false,\n      },\n      AnalyzeLocationEntityField: {\n        type: 'object',\n        properties: {\n          description: {\n            type: 'string',\n            description:\n              'A text to show to the user to inform about the choices made. Like, it could say\\n\"Found a CODEOWNERS file that covers this target, so we suggest leaving this\\nfield empty; which would currently make it owned by X\" where X is taken from the\\ncodeowners file.',\n          },\n          value: {\n            type: 'string',\n            nullable: true,\n          },\n          state: {\n            type: 'string',\n            enum: [\n              'analysisSuggestedValue',\n              'analysisSuggestedNoValue',\n              'needsUserInput',\n            ],\n            description:\n              'The outcome of the analysis for this particular field',\n          },\n          field: {\n            type: 'string',\n            description:\n              'e.g. \"spec.owner\"? The frontend needs to know how to \"inject\" the field into the\\nentity again if the user wants to change it',\n          },\n        },\n        required: ['description', 'value', 'state', 'field'],\n        additionalProperties: false,\n      },\n      AnalyzeLocationGenerateEntity: {\n        type: 'object',\n        properties: {\n          fields: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationEntityField',\n            },\n          },\n          entity: {\n            $ref: '#/components/schemas/RecursivePartialEntity',\n          },\n        },\n        required: ['fields', 'entity'],\n        description:\n          \"This is some form of representation of what the analyzer could deduce.\\nWe should probably have a chat about how this can best be conveyed to\\nthe frontend. It'll probably contain a (possibly incomplete) entity, plus\\nenough info for the frontend to know what form data to show to the user\\nfor overriding/completing the info.\",\n        additionalProperties: false,\n      },\n      AnalyzeLocationResponse: {\n        type: 'object',\n        properties: {\n          generateEntities: {\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationGenerateEntity',\n            },\n            type: 'array',\n          },\n          existingEntityFiles: {\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationExistingEntity',\n            },\n            type: 'array',\n          },\n        },\n        required: ['generateEntities', 'existingEntityFiles'],\n        additionalProperties: false,\n      },\n      LocationInput: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n          },\n          target: {\n            type: 'string',\n          },\n        },\n        required: ['type', 'target'],\n        additionalProperties: false,\n      },\n      EntitiesQueryResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/Entity',\n            },\n            description: 'The list of entities paginated by a specific filter.',\n          },\n          totalItems: {\n            type: 'number',\n          },\n          pageInfo: {\n            type: 'object',\n            properties: {\n              nextCursor: {\n                type: 'string',\n                description: 'The cursor for the next batch of entities.',\n              },\n              prevCursor: {\n                type: 'string',\n                description: 'The cursor for the previous batch of entities.',\n              },\n            },\n          },\n        },\n        required: ['items', 'totalItems', 'pageInfo'],\n        additionalProperties: false,\n      },\n    },\n    securitySchemes: {\n      JWT: {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n      },\n    },\n  },\n  paths: {\n    '/refresh': {\n      post: {\n        operationId: 'RefreshEntity',\n        tags: ['Entity'],\n        description: 'Refresh the entity related to entityRef.',\n        responses: {\n          '200': {\n            description: 'Refreshed',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  authorizationToken: {\n                    type: 'string',\n                  },\n                  entityRef: {\n                    type: 'string',\n                    description:\n                      'The reference to a single entity that should be refreshed',\n                  },\n                },\n                required: ['entityRef'],\n                description:\n                  'Options for requesting a refresh of entities in the catalog.',\n                additionalProperties: false,\n              },\n            },\n          },\n        },\n      },\n    },\n    '/entities': {\n      get: {\n        operationId: 'GetEntities',\n        tags: ['Entity'],\n        description: 'Get all entities matching a given filter.',\n        responses: {\n          '200': {\n            description: '',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'array',\n                  items: {\n                    $ref: '#/components/schemas/Entity',\n                  },\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/fields',\n          },\n          {\n            $ref: '#/components/parameters/limit',\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n          {\n            $ref: '#/components/parameters/offset',\n          },\n          {\n            $ref: '#/components/parameters/after',\n          },\n          {\n            name: 'order',\n            in: 'query',\n            allowReserved: true,\n            required: false,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n          },\n        ],\n      },\n    },\n    '/entities/by-uid/{uid}': {\n      get: {\n        operationId: 'GetEntityByUid',\n        tags: ['Entity'],\n        description: 'Get a single entity by the UID.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/uid',\n          },\n        ],\n      },\n      delete: {\n        operationId: 'DeleteEntityByUid',\n        tags: ['Entity'],\n        description: 'Delete a single entity by UID.',\n        responses: {\n          '204': {\n            description: 'Deleted successfully.',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/uid',\n          },\n        ],\n      },\n    },\n    '/entities/by-name/{kind}/{namespace}/{name}': {\n      get: {\n        operationId: 'GetEntityByName',\n        tags: ['Entity'],\n        description: 'Get an entity by an entity ref.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/kind',\n          },\n          {\n            $ref: '#/components/parameters/namespace',\n          },\n          {\n            $ref: '#/components/parameters/name',\n          },\n        ],\n      },\n    },\n    '/entities/by-name/{kind}/{namespace}/{name}/ancestry': {\n      get: {\n        operationId: 'GetEntityAncestryByName',\n        tags: ['Entity'],\n        description: \"Get an entity's ancestry by entity ref.\",\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntityAncestryResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/kind',\n          },\n          {\n            $ref: '#/components/parameters/namespace',\n          },\n          {\n            $ref: '#/components/parameters/name',\n          },\n        ],\n      },\n    },\n    '/entities/by-refs': {\n      post: {\n        operationId: 'GetEntitiesByRefs',\n        tags: ['Entity'],\n        description:\n          'Get a batch set of entities given an array of entityRefs.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntitiesBatchResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        requestBody: {\n          required: false,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                required: ['entityRefs'],\n                properties: {\n                  entityRefs: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                    },\n                  },\n                  fields: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                    },\n                  },\n                },\n              },\n              examples: {\n                'Fetch Backstage entities': {\n                  value: {\n                    entityRefs: [\n                      'component:default/backstage',\n                      'api:default/backstage',\n                    ],\n                  },\n                },\n                'Fetch annotations for backstage entity': {\n                  value: {\n                    entityRefs: ['component:default/backstage'],\n                    fields: ['metadata.annotations'],\n                  },\n                },\n              },\n            },\n          },\n        },\n        parameters: [\n          {\n            $ref: '#/components/parameters/filter',\n          },\n        ],\n      },\n    },\n    '/entities/by-query': {\n      get: {\n        operationId: 'GetEntitiesByQuery',\n        tags: ['Entity'],\n        description: 'Search for entities by a given query.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntitiesQueryResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/fields',\n          },\n          {\n            $ref: '#/components/parameters/limit',\n          },\n          {\n            $ref: '#/components/parameters/offset',\n          },\n          {\n            $ref: '#/components/parameters/orderField',\n          },\n          {\n            $ref: '#/components/parameters/cursor',\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n          {\n            name: 'fullTextFilterTerm',\n            in: 'query',\n            description: 'Text search term.',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            name: 'fullTextFilterFields',\n            in: 'query',\n            description:\n              'A comma separated list of fields to sort returned results by.',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            explode: false,\n            style: 'form',\n          },\n        ],\n      },\n    },\n    '/entity-facets': {\n      get: {\n        operationId: 'GetEntityFacets',\n        tags: ['Entity'],\n        description: 'Get all entity facets that match the given filters.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntityFacetsResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'query',\n            name: 'facet',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            examples: {\n              'Entities by kind': {\n                value: ['kind'],\n              },\n              'Entities by spec type': {\n                value: ['spec.type'],\n              },\n            },\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n        ],\n      },\n    },\n    '/locations': {\n      post: {\n        operationId: 'CreateLocation',\n        tags: ['Locations'],\n        description: 'Create a location for a given target.',\n        responses: {\n          '201': {\n            description: 'Created',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    exists: {\n                      type: 'boolean',\n                    },\n                    entities: {\n                      items: {\n                        $ref: '#/components/schemas/Entity',\n                      },\n                      type: 'array',\n                    },\n                    location: {\n                      $ref: '#/components/schemas/Location',\n                    },\n                  },\n                  required: ['entities', 'location'],\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'query',\n            name: 'dryRun',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  target: {\n                    type: 'string',\n                  },\n                  type: {\n                    type: 'string',\n                  },\n                },\n                required: ['target', 'type'],\n              },\n            },\n          },\n        },\n      },\n      get: {\n        operationId: 'GetLocations',\n        tags: ['Locations'],\n        description: 'Get all locations',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      data: {\n                        $ref: '#/components/schemas/Location',\n                      },\n                    },\n                    required: ['data'],\n                  },\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n      },\n    },\n    '/locations/{id}': {\n      get: {\n        operationId: 'GetLocation',\n        tags: ['Locations'],\n        description: 'Get a location by id.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Location',\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'id',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n      delete: {\n        operationId: 'DeleteLocation',\n        tags: ['Locations'],\n        description: 'Delete a location by id.',\n        responses: {\n          '204': {\n            description: 'No content',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'id',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n    },\n    '/locations/by-entity/{kind}/{namespace}/{name}': {\n      get: {\n        operationId: 'getLocationByEntity',\n        tags: ['Locations'],\n        description: 'Get a location for entity.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Location',\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'kind',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            in: 'path',\n            name: 'namespace',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            in: 'path',\n            name: 'name',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n    },\n    '/analyze-location': {\n      post: {\n        operationId: 'AnalyzeLocation',\n        tags: ['Locations'],\n        description: 'Validate a given location.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/AnalyzeLocationResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  catalogFileName: {\n                    type: 'string',\n                  },\n                  location: {\n                    $ref: '#/components/schemas/LocationInput',\n                  },\n                },\n                required: ['location'],\n              },\n            },\n          },\n        },\n      },\n    },\n    '/validate-entity': {\n      post: {\n        operationId: 'ValidateEntity',\n        tags: ['Entity'],\n        description:\n          'Validate that a passed in entity has no errors in schema.',\n        responses: {\n          '200': {\n            description: 'Ok',\n          },\n          '400': {\n            description: 'Validation errors.',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    errors: {\n                      type: 'array',\n                      items: {\n                        type: 'object',\n                        properties: {\n                          name: {\n                            type: 'string',\n                          },\n                          message: {\n                            type: 'string',\n                          },\n                        },\n                        required: ['name', 'message'],\n                        additionalProperties: {},\n                      },\n                    },\n                  },\n                  required: ['errors'],\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  location: {\n                    type: 'string',\n                  },\n                  entity: {\n                    type: 'object',\n                    additionalProperties: {},\n                  },\n                },\n                required: ['location', 'entity'],\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n} as const;\nexport const createOpenApiRouter = async (\n  options?: Parameters<\n    typeof createValidatedOpenApiRouterFromGeneratedEndpointMap\n  >['1'],\n) =>\n  createValidatedOpenApiRouterFromGeneratedEndpointMap<EndpointMap>(\n    spec,\n    options,\n  );\n"],"names":["createValidatedOpenApiRouterFromGeneratedEndpointMap"],"mappings":"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"}