{"version":3,"file":"progressTracker.cjs.js","sources":["../../src/stitching/progressTracker.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyError } from '@backstage/errors';\nimport { metrics } from '@opentelemetry/api';\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport { DbRefreshStateRow } from '../database/tables';\nimport { createCounterMetric } from '../util/metrics';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// Helps wrap the timing and logging behaviors\nexport function progressTracker(knex: Knex, logger: LoggerService) {\n  // prom-client metrics are deprecated in favour of OpenTelemetry metrics.\n  const promStitchedEntities = createCounterMetric({\n    name: 'catalog_stitched_entities_count',\n    help: 'Amount of entities stitched. DEPRECATED, use OpenTelemetry metrics instead',\n  });\n\n  const meter = metrics.getMeter('default');\n\n  const stitchedEntities = meter.createCounter(\n    'catalog.stitched.entities.count',\n    {\n      description: 'Amount of entities stitched',\n    },\n  );\n\n  const stitchingDuration = meter.createHistogram(\n    'catalog.stitching.duration',\n    {\n      description: 'Time spent executing the full stitching flow',\n      unit: 'seconds',\n    },\n  );\n\n  const stitchingQueueCount = meter.createObservableGauge(\n    'catalog.stitching.queue.length',\n    { description: 'Number of entities currently in the stitching queue' },\n  );\n  stitchingQueueCount.addCallback(async result => {\n    const total = await knex<DbRefreshStateRow>('refresh_state')\n      .count({ count: '*' })\n      .whereNotNull('next_stitch_at');\n    result.observe(Number(total[0].count));\n  });\n\n  const stitchingQueueDelay = meter.createHistogram(\n    'catalog.stitching.queue.delay',\n    {\n      description:\n        'The amount of delay between being scheduled for stitching, and the start of actually being stitched',\n      unit: 'seconds',\n    },\n  );\n\n  function stitchStart(item: {\n    entityRef: string;\n    stitchRequestedAt?: DateTime;\n  }) {\n    logger.debug(`Stitching ${item.entityRef}`);\n\n    const startTime = process.hrtime();\n    if (item.stitchRequestedAt) {\n      stitchingQueueDelay.record(\n        -item.stitchRequestedAt.diffNow().as('seconds'),\n      );\n    }\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    function markComplete(result: string) {\n      promStitchedEntities.inc(1);\n      stitchedEntities.add(1, { result });\n      stitchingDuration.record(endTime(), { result });\n    }\n\n    function markFailed(error: Error) {\n      promStitchedEntities.inc(1);\n      stitchedEntities.add(1, { result: 'error' });\n      stitchingDuration.record(endTime(), { result: 'error' });\n      logger.error(\n        `Failed to stitch ${item.entityRef}, ${stringifyError(error)}`,\n      );\n    }\n\n    return {\n      markComplete,\n      markFailed,\n    };\n  }\n\n  return { stitchStart };\n}\n"],"names":["createCounterMetric","metrics","stringifyError"],"mappings":";;;;;;AAyBO,SAAS,eAAA,CAAgB,MAAY,MAAA,EAAuB;AAEjE,EAAA,MAAM,uBAAuBA,2BAAA,CAAoB;AAAA,IAC/C,IAAA,EAAM,iCAAA;AAAA,IACN,IAAA,EAAM;AAAA,GACP,CAAA;AAED,EAAA,MAAM,KAAA,GAAQC,WAAA,CAAQ,QAAA,CAAS,SAAS,CAAA;AAExC,EAAA,MAAM,mBAAmB,KAAA,CAAM,aAAA;AAAA,IAC7B,iCAAA;AAAA,IACA;AAAA,MACE,WAAA,EAAa;AAAA;AACf,GACF;AAEA,EAAA,MAAM,oBAAoB,KAAA,CAAM,eAAA;AAAA,IAC9B,4BAAA;AAAA,IACA;AAAA,MACE,WAAA,EAAa,8CAAA;AAAA,MACb,IAAA,EAAM;AAAA;AACR,GACF;AAEA,EAAA,MAAM,sBAAsB,KAAA,CAAM,qBAAA;AAAA,IAChC,gCAAA;AAAA,IACA,EAAE,aAAa,qDAAA;AAAsD,GACvE;AACA,EAAA,mBAAA,CAAoB,WAAA,CAAY,OAAM,MAAA,KAAU;AAC9C,IAAA,MAAM,KAAA,GAAQ,MAAM,IAAA,CAAwB,eAAe,CAAA,CACxD,KAAA,CAAM,EAAE,KAAA,EAAO,GAAA,EAAK,CAAA,CACpB,YAAA,CAAa,gBAAgB,CAAA;AAChC,IAAA,MAAA,CAAO,QAAQ,MAAA,CAAO,KAAA,CAAM,CAAC,CAAA,CAAE,KAAK,CAAC,CAAA;AAAA,EACvC,CAAC,CAAA;AAED,EAAA,MAAM,sBAAsB,KAAA,CAAM,eAAA;AAAA,IAChC,+BAAA;AAAA,IACA;AAAA,MACE,WAAA,EACE,qGAAA;AAAA,MACF,IAAA,EAAM;AAAA;AACR,GACF;AAEA,EAAA,SAAS,YAAY,IAAA,EAGlB;AACD,IAAA,MAAA,CAAO,KAAA,CAAM,CAAA,UAAA,EAAa,IAAA,CAAK,SAAS,CAAA,CAAE,CAAA;AAE1C,IAAA,MAAM,SAAA,GAAY,QAAQ,MAAA,EAAO;AACjC,IAAA,IAAI,KAAK,iBAAA,EAAmB;AAC1B,MAAA,mBAAA,CAAoB,MAAA;AAAA,QAClB,CAAC,IAAA,CAAK,iBAAA,CAAkB,OAAA,EAAQ,CAAE,GAAG,SAAS;AAAA,OAChD;AAAA,IACF;AAEA,IAAA,SAAS,OAAA,GAAU;AACjB,MAAA,MAAM,KAAA,GAAQ,OAAA,CAAQ,MAAA,CAAO,SAAS,CAAA;AACtC,MAAA,OAAO,KAAA,CAAM,CAAC,CAAA,GAAI,KAAA,CAAM,CAAC,CAAA,GAAI,GAAA;AAAA,IAC/B;AAEA,IAAA,SAAS,aAAa,MAAA,EAAgB;AACpC,MAAA,oBAAA,CAAqB,IAAI,CAAC,CAAA;AAC1B,MAAA,gBAAA,CAAiB,GAAA,CAAI,CAAA,EAAG,EAAE,MAAA,EAAQ,CAAA;AAClC,MAAA,iBAAA,CAAkB,MAAA,CAAO,OAAA,EAAQ,EAAG,EAAE,QAAQ,CAAA;AAAA,IAChD;AAEA,IAAA,SAAS,WAAW,KAAA,EAAc;AAChC,MAAA,oBAAA,CAAqB,IAAI,CAAC,CAAA;AAC1B,MAAA,gBAAA,CAAiB,GAAA,CAAI,CAAA,EAAG,EAAE,MAAA,EAAQ,SAAS,CAAA;AAC3C,MAAA,iBAAA,CAAkB,OAAO,OAAA,EAAQ,EAAG,EAAE,MAAA,EAAQ,SAAS,CAAA;AACvD,MAAA,MAAA,CAAO,KAAA;AAAA,QACL,oBAAoB,IAAA,CAAK,SAAS,CAAA,EAAA,EAAKC,qBAAA,CAAe,KAAK,CAAC,CAAA;AAAA,OAC9D;AAAA,IACF;AAEA,IAAA,OAAO;AAAA,MACL,YAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF;AAEA,EAAA,OAAO,EAAE,WAAA,EAAY;AACvB;;;;"}