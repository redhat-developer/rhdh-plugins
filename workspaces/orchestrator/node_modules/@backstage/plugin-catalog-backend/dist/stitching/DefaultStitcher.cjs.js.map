{"version":3,"file":"DefaultStitcher.cjs.js","sources":["../../src/stitching/DefaultStitcher.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { durationToMilliseconds, HumanDuration } from '@backstage/types';\nimport { Knex } from 'knex';\nimport splitToChunks from 'lodash/chunk';\nimport { DateTime } from 'luxon';\nimport { getDeferredStitchableEntities } from '../database/operations/stitcher/getDeferredStitchableEntities';\nimport { markForStitching } from '../database/operations/stitcher/markForStitching';\nimport { performStitching } from '../database/operations/stitcher/performStitching';\nimport { DbRefreshStateRow } from '../database/tables';\nimport { startTaskPipeline } from '../processing/TaskPipeline';\nimport { progressTracker } from './progressTracker';\nimport {\n  Stitcher,\n  StitchingStrategy,\n  stitchingStrategyFromConfig,\n} from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\ntype DeferredStitchItem = Awaited<\n  ReturnType<typeof getDeferredStitchableEntities>\n>[0];\n\ntype StitchProgressTracker = ReturnType<typeof progressTracker>;\n\n/**\n * Performs the act of stitching - to take all of the various outputs from the\n * ingestion process, and stitching them together into the final entity JSON\n * shape.\n */\nexport class DefaultStitcher implements Stitcher {\n  private readonly knex: Knex;\n  private readonly logger: LoggerService;\n  private readonly strategy: StitchingStrategy;\n  private readonly tracker: StitchProgressTracker;\n  private stopFunc?: () => void;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      knex: Knex;\n      logger: LoggerService;\n    },\n  ): DefaultStitcher {\n    return new DefaultStitcher({\n      knex: options.knex,\n      logger: options.logger,\n      strategy: stitchingStrategyFromConfig(config),\n    });\n  }\n\n  constructor(options: {\n    knex: Knex;\n    logger: LoggerService;\n    strategy: StitchingStrategy;\n  }) {\n    this.knex = options.knex;\n    this.logger = options.logger;\n    this.strategy = options.strategy;\n    this.tracker = progressTracker(options.knex, options.logger);\n  }\n\n  async stitch(options: {\n    entityRefs?: Iterable<string>;\n    entityIds?: Iterable<string>;\n  }) {\n    const { entityRefs, entityIds } = options;\n\n    if (this.strategy.mode === 'deferred') {\n      await markForStitching({\n        knex: this.knex,\n        strategy: this.strategy,\n        entityRefs,\n        entityIds,\n      });\n      return;\n    }\n\n    if (entityRefs) {\n      for (const entityRef of entityRefs) {\n        await this.#stitchOne({ entityRef });\n      }\n    }\n\n    if (entityIds) {\n      const chunks = splitToChunks(\n        Array.isArray(entityIds) ? entityIds : [...entityIds],\n        100,\n      );\n      for (const chunk of chunks) {\n        const rows = await this.knex<DbRefreshStateRow>('refresh_state')\n          .select('entity_ref')\n          .whereIn('entity_id', chunk);\n        for (const row of rows) {\n          await this.#stitchOne({ entityRef: row.entity_ref });\n        }\n      }\n    }\n  }\n\n  async start() {\n    if (this.strategy.mode === 'deferred') {\n      if (this.stopFunc) {\n        throw new Error('Processing engine is already started');\n      }\n\n      const { pollingInterval, stitchTimeout } = this.strategy;\n\n      const stopPipeline = startTaskPipeline<DeferredStitchItem>({\n        lowWatermark: 2,\n        highWatermark: 5,\n        pollingIntervalMs: durationToMilliseconds(pollingInterval),\n        loadTasks: async count => {\n          return await this.#getStitchableEntities(count, stitchTimeout);\n        },\n        processTask: async item => {\n          return await this.#stitchOne({\n            entityRef: item.entityRef,\n            stitchTicket: item.stitchTicket,\n            stitchRequestedAt: item.stitchRequestedAt,\n          });\n        },\n      });\n\n      this.stopFunc = () => {\n        stopPipeline();\n      };\n    }\n  }\n\n  async stop() {\n    if (this.strategy.mode === 'deferred') {\n      if (this.stopFunc) {\n        this.stopFunc();\n        this.stopFunc = undefined;\n      }\n    }\n  }\n\n  async #getStitchableEntities(count: number, stitchTimeout: HumanDuration) {\n    try {\n      return await getDeferredStitchableEntities({\n        knex: this.knex,\n        batchSize: count,\n        stitchTimeout: stitchTimeout,\n      });\n    } catch (error) {\n      this.logger.warn('Failed to load stitchable entities', error);\n      return [];\n    }\n  }\n\n  async #stitchOne(options: {\n    entityRef: string;\n    stitchTicket?: string;\n    stitchRequestedAt?: DateTime;\n  }) {\n    const track = this.tracker.stitchStart({\n      entityRef: options.entityRef,\n      stitchRequestedAt: options.stitchRequestedAt,\n    });\n\n    try {\n      const result = await performStitching({\n        knex: this.knex,\n        logger: this.logger,\n        strategy: this.strategy,\n        entityRef: options.entityRef,\n        stitchTicket: options.stitchTicket,\n      });\n      track.markComplete(result);\n    } catch (error) {\n      track.markFailed(error);\n    }\n  }\n}\n"],"names":["stitchingStrategyFromConfig","progressTracker","markForStitching","splitToChunks","startTaskPipeline","durationToMilliseconds","getDeferredStitchableEntities","performStitching"],"mappings":"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"}