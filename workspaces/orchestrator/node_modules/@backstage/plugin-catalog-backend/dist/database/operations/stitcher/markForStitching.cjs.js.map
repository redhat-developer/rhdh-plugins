{"version":3,"file":"markForStitching.cjs.js","sources":["../../../../src/database/operations/stitcher/markForStitching.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport splitToChunks from 'lodash/chunk';\nimport { v4 as uuid } from 'uuid';\nimport { ErrorLike, isError } from '@backstage/errors';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport { setTimeout as sleep } from 'timers/promises';\nimport { DbFinalEntitiesRow, DbRefreshStateRow } from '../../tables';\n\nconst UPDATE_CHUNK_SIZE = 100; // Smaller chunks reduce contention\nconst DEADLOCK_RETRY_ATTEMPTS = 3;\nconst DEADLOCK_BASE_DELAY_MS = 25;\n\n// PostgreSQL deadlock error code\nconst POSTGRES_DEADLOCK_SQLSTATE = '40P01';\n\n/**\n * Checks if the given error is a deadlock error for the database engine in use.\n */\nfunction isDeadlockError(\n  knex: Knex | Knex.Transaction,\n  e: unknown,\n): e is ErrorLike {\n  if (knex.client.config.client.includes('pg')) {\n    // PostgreSQL deadlock detection\n    return isError(e) && e.code === POSTGRES_DEADLOCK_SQLSTATE;\n  }\n\n  // Add more database engine checks here as needed\n  return false;\n}\n\n/**\n * Marks a number of entities for stitching some time in the near\n * future.\n *\n * @remarks\n */\nexport async function markForStitching(options: {\n  knex: Knex | Knex.Transaction;\n  strategy: StitchingStrategy;\n  entityRefs?: Iterable<string>;\n  entityIds?: Iterable<string>;\n}): Promise<void> {\n  const entityRefs = sortSplit(options.entityRefs);\n  const entityIds = sortSplit(options.entityIds);\n  const knex = options.knex;\n  const mode = options.strategy.mode;\n\n  if (mode === 'immediate') {\n    for (const chunk of entityRefs) {\n      await knex\n        .table<DbFinalEntitiesRow>('final_entities')\n        .update({\n          hash: 'force-stitching',\n        })\n        .whereIn(\n          'entity_id',\n          knex<DbRefreshStateRow>('refresh_state')\n            .select('entity_id')\n            .whereIn('entity_ref', chunk),\n        );\n      await retryOnDeadlock(async () => {\n        await knex\n          .table<DbRefreshStateRow>('refresh_state')\n          .update({\n            result_hash: 'force-stitching',\n            next_update_at: knex.fn.now(),\n          })\n          .whereIn('entity_ref', chunk);\n      }, knex);\n    }\n\n    for (const chunk of entityIds) {\n      await knex\n        .table<DbFinalEntitiesRow>('final_entities')\n        .update({\n          hash: 'force-stitching',\n        })\n        .whereIn('entity_id', chunk);\n      await retryOnDeadlock(async () => {\n        await knex\n          .table<DbRefreshStateRow>('refresh_state')\n          .update({\n            result_hash: 'force-stitching',\n            next_update_at: knex.fn.now(),\n          })\n          .whereIn('entity_id', chunk);\n      }, knex);\n    }\n  } else if (mode === 'deferred') {\n    // It's OK that this is shared across refresh state rows; it just needs to\n    // be uniquely generated for every new stitch request.\n    const ticket = uuid();\n\n    // Update by primary key in deterministic order to avoid deadlocks\n    for (const chunk of entityRefs) {\n      await retryOnDeadlock(async () => {\n        await knex<DbRefreshStateRow>('refresh_state')\n          .update({\n            next_stitch_at: knex.fn.now(),\n            next_stitch_ticket: ticket,\n          })\n          .whereIn('entity_ref', chunk);\n      }, knex);\n    }\n\n    for (const chunk of entityIds) {\n      await retryOnDeadlock(async () => {\n        await knex<DbRefreshStateRow>('refresh_state')\n          .update({\n            next_stitch_at: knex.fn.now(),\n            next_stitch_ticket: ticket,\n          })\n          .whereIn('entity_id', chunk);\n      }, knex);\n    }\n  } else {\n    throw new Error(`Unknown stitching strategy mode ${mode}`);\n  }\n}\n\nfunction sortSplit(input: Iterable<string> | undefined): string[][] {\n  if (!input) {\n    return [];\n  }\n  const array = Array.isArray(input) ? input.slice() : [...input];\n  array.sort();\n  return splitToChunks(array, UPDATE_CHUNK_SIZE);\n}\n\nasync function retryOnDeadlock<T>(\n  fn: () => Promise<T>,\n  knex: Knex | Knex.Transaction,\n  retries = DEADLOCK_RETRY_ATTEMPTS,\n  baseMs = DEADLOCK_BASE_DELAY_MS,\n): Promise<T> {\n  let attempt = 0;\n  for (;;) {\n    try {\n      return await fn();\n    } catch (e: unknown) {\n      if (isDeadlockError(knex, e) && attempt < retries) {\n        await sleep(baseMs * Math.pow(2, attempt));\n        attempt++;\n        continue;\n      }\n      throw e;\n    }\n  }\n}\n"],"names":["isError","uuid","splitToChunks","sleep"],"mappings":"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"}