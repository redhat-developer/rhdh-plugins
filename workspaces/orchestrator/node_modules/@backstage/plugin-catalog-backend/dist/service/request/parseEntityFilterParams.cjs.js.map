{"version":3,"file":"parseEntityFilterParams.cjs.js","sources":["../../../src/service/request/parseEntityFilterParams.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { parseStringsParam } from './common';\nimport {\n  EntitiesSearchFilter,\n  EntityFilter,\n} from '@backstage/plugin-catalog-node';\n\n/**\n * Parses the filtering part of a query, like\n * /entities?filter=metadata.namespace=default,kind=Component\n */\nexport function parseEntityFilterParams(\n  params: Record<string, unknown>,\n): EntityFilter | undefined {\n  // Each filter string is on the form a=b,c=d\n  const filterStrings = parseStringsParam(params.filter, 'filter');\n  if (!filterStrings) {\n    return undefined;\n  }\n\n  // Outer array: \"any of the inner ones\"\n  // Inner arrays: \"all of these must match\"\n  const filters = filterStrings\n    .map(parseEntityFilterString)\n    .filter((r): r is EntitiesSearchFilter[] => Boolean(r));\n  if (!filters.length) {\n    return undefined;\n  }\n\n  const outer = filters.map(inner =>\n    inner.length === 1 ? inner[0] : { allOf: inner },\n  );\n  return outer.length === 1 ? outer[0] : { anyOf: outer };\n}\n\n/**\n * Parses a single filter string as seen in a filter query, for example\n * metadata.namespace=default,kind=Component\n */\nexport function parseEntityFilterString(\n  filterString: string,\n): EntitiesSearchFilter[] | undefined {\n  const statements = filterString\n    .split(',')\n    .map(s => s.trim())\n    .filter(Boolean);\n\n  if (!statements.length) {\n    return undefined;\n  }\n\n  const filtersByKey = new Map<string, EntitiesSearchFilter>();\n\n  for (const statement of statements) {\n    const equalsIndex = statement.indexOf('=');\n\n    const key =\n      equalsIndex === -1\n        ? statement\n        : statement.substring(0, equalsIndex).trim();\n    const value =\n      equalsIndex === -1\n        ? undefined\n        : statement.substring(equalsIndex + 1).trim();\n    if (!key) {\n      throw new InputError(\n        `Invalid filter, '${statement}' is not a valid statement (expected a string on the form a=b or a= or a)`,\n      );\n    }\n\n    let f = filtersByKey.get(key);\n    if (!f) {\n      f = { key };\n      filtersByKey.set(key, f);\n    }\n\n    if (value !== undefined) {\n      f.values = f.values || [];\n      f.values.push(value);\n    }\n  }\n\n  return Array.from(filtersByKey.values());\n}\n"],"names":["parseStringsParam","InputError"],"mappings":";;;;;AA2BO,SAAS,wBACd,MAAA,EAC0B;AAE1B,EAAA,MAAM,aAAA,GAAgBA,wBAAA,CAAkB,MAAA,CAAO,MAAA,EAAQ,QAAQ,CAAA;AAC/D,EAAA,IAAI,CAAC,aAAA,EAAe;AAClB,IAAA,OAAO,MAAA;AAAA,EACT;AAIA,EAAA,MAAM,OAAA,GAAU,aAAA,CACb,GAAA,CAAI,uBAAuB,CAAA,CAC3B,OAAO,CAAC,CAAA,KAAmC,OAAA,CAAQ,CAAC,CAAC,CAAA;AACxD,EAAA,IAAI,CAAC,QAAQ,MAAA,EAAQ;AACnB,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,MAAM,QAAQ,OAAA,CAAQ,GAAA;AAAA,IAAI,CAAA,KAAA,KACxB,MAAM,MAAA,KAAW,CAAA,GAAI,MAAM,CAAC,CAAA,GAAI,EAAE,KAAA,EAAO,KAAA;AAAM,GACjD;AACA,EAAA,OAAO,KAAA,CAAM,WAAW,CAAA,GAAI,KAAA,CAAM,CAAC,CAAA,GAAI,EAAE,OAAO,KAAA,EAAM;AACxD;AAMO,SAAS,wBACd,YAAA,EACoC;AACpC,EAAA,MAAM,UAAA,GAAa,YAAA,CAChB,KAAA,CAAM,GAAG,CAAA,CACT,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,IAAA,EAAM,CAAA,CACjB,MAAA,CAAO,OAAO,CAAA;AAEjB,EAAA,IAAI,CAAC,WAAW,MAAA,EAAQ;AACtB,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,MAAM,YAAA,uBAAmB,GAAA,EAAkC;AAE3D,EAAA,KAAA,MAAW,aAAa,UAAA,EAAY;AAClC,IAAA,MAAM,WAAA,GAAc,SAAA,CAAU,OAAA,CAAQ,GAAG,CAAA;AAEzC,IAAA,MAAM,GAAA,GACJ,gBAAgB,EAAA,GACZ,SAAA,GACA,UAAU,SAAA,CAAU,CAAA,EAAG,WAAW,CAAA,CAAE,IAAA,EAAK;AAC/C,IAAA,MAAM,KAAA,GACJ,gBAAgB,EAAA,GACZ,MAAA,GACA,UAAU,SAAA,CAAU,WAAA,GAAc,CAAC,CAAA,CAAE,IAAA,EAAK;AAChD,IAAA,IAAI,CAAC,GAAA,EAAK;AACR,MAAA,MAAM,IAAIC,iBAAA;AAAA,QACR,oBAAoB,SAAS,CAAA,yEAAA;AAAA,OAC/B;AAAA,IACF;AAEA,IAAA,IAAI,CAAA,GAAI,YAAA,CAAa,GAAA,CAAI,GAAG,CAAA;AAC5B,IAAA,IAAI,CAAC,CAAA,EAAG;AACN,MAAA,CAAA,GAAI,EAAE,GAAA,EAAI;AACV,MAAA,YAAA,CAAa,GAAA,CAAI,KAAK,CAAC,CAAA;AAAA,IACzB;AAEA,IAAA,IAAI,UAAU,MAAA,EAAW;AACvB,MAAA,CAAA,CAAE,MAAA,GAAS,CAAA,CAAE,MAAA,IAAU,EAAC;AACxB,MAAA,CAAA,CAAE,MAAA,CAAO,KAAK,KAAK,CAAA;AAAA,IACrB;AAAA,EACF;AAEA,EAAA,OAAO,KAAA,CAAM,IAAA,CAAK,YAAA,CAAa,MAAA,EAAQ,CAAA;AACzC;;;;;"}