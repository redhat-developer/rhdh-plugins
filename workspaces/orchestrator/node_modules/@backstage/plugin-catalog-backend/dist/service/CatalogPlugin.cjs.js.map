{"version":3,"file":"CatalogPlugin.cjs.js","sources":["../../src/service/CatalogPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { Entity, Validators } from '@backstage/catalog-model';\nimport { ForwardedError } from '@backstage/errors';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  catalogServiceRef,\n  EntityProvider,\n  LocationAnalyzer,\n  PlaceholderResolver,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  catalogAnalysisExtensionPoint,\n  CatalogLocationsExtensionPoint,\n  catalogLocationsExtensionPoint,\n  CatalogModelExtensionPoint,\n  catalogModelExtensionPoint,\n  CatalogPermissionExtensionPoint,\n  catalogPermissionExtensionPoint,\n  CatalogPermissionRuleInput,\n  CatalogProcessingExtensionPoint,\n  catalogProcessingExtensionPoint,\n} from '@backstage/plugin-catalog-node/alpha';\nimport { eventsServiceRef } from '@backstage/plugin-events-node';\nimport { Permission } from '@backstage/plugin-permission-common';\nimport { merge } from 'lodash';\nimport { CatalogBuilder } from './CatalogBuilder';\nimport { actionsRegistryServiceRef } from '@backstage/backend-plugin-api/alpha';\nimport { createGetCatalogEntityAction } from '../actions/createGetCatalogEntityAction';\n\nclass CatalogLocationsExtensionPointImpl\n  implements CatalogLocationsExtensionPoint\n{\n  #locationTypes: string[] | undefined;\n\n  setAllowedLocationTypes(locationTypes: Array<string>) {\n    this.#locationTypes = locationTypes;\n  }\n\n  get allowedLocationTypes() {\n    return this.#locationTypes;\n  }\n}\n\nclass CatalogProcessingExtensionPointImpl\n  implements CatalogProcessingExtensionPoint\n{\n  #processors = new Array<CatalogProcessor>();\n  #entityProviders = new Array<EntityProvider>();\n  #placeholderResolvers: Record<string, PlaceholderResolver> = {};\n  #onProcessingErrorHandler?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n\n  addProcessor(\n    ...processors: Array<CatalogProcessor | Array<CatalogProcessor>>\n  ): void {\n    this.#processors.push(...processors.flat());\n  }\n\n  addEntityProvider(\n    ...providers: Array<EntityProvider | Array<EntityProvider>>\n  ): void {\n    this.#entityProviders.push(...providers.flat());\n  }\n\n  addPlaceholderResolver(key: string, resolver: PlaceholderResolver) {\n    if (key in this.#placeholderResolvers)\n      throw new Error(\n        `A placeholder resolver for '${key}' has already been set up, please check your config.`,\n      );\n    this.#placeholderResolvers[key] = resolver;\n  }\n\n  setOnProcessingErrorHandler(\n    handler: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void,\n  ) {\n    this.#onProcessingErrorHandler = handler;\n  }\n\n  get processors() {\n    return this.#processors;\n  }\n\n  get entityProviders() {\n    return this.#entityProviders;\n  }\n\n  get placeholderResolvers() {\n    return this.#placeholderResolvers;\n  }\n\n  get onProcessingErrorHandler() {\n    return this.#onProcessingErrorHandler;\n  }\n}\n\nclass CatalogPermissionExtensionPointImpl\n  implements CatalogPermissionExtensionPoint\n{\n  #permissions = new Array<Permission>();\n  #permissionRules = new Array<CatalogPermissionRuleInput>();\n\n  addPermissions(...permission: Array<Permission | Array<Permission>>): void {\n    this.#permissions.push(...permission.flat());\n  }\n\n  addPermissionRules(\n    ...rules: Array<\n      CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>\n    >\n  ): void {\n    this.#permissionRules.push(...rules.flat());\n  }\n\n  get permissions() {\n    return this.#permissions;\n  }\n\n  get permissionRules() {\n    return this.#permissionRules;\n  }\n}\n\nclass CatalogModelExtensionPointImpl implements CatalogModelExtensionPoint {\n  #fieldValidators: Partial<Validators> = {};\n\n  setFieldValidators(validators: Partial<Validators>): void {\n    merge(this.#fieldValidators, validators);\n  }\n\n  get fieldValidators() {\n    return this.#fieldValidators;\n  }\n\n  #entityDataParser?: CatalogProcessorParser;\n\n  setEntityDataParser(parser: CatalogProcessorParser): void {\n    if (this.#entityDataParser) {\n      throw new Error(\n        'Attempted to install second EntityDataParser. Only one can be set.',\n      );\n    }\n    this.#entityDataParser = parser;\n  }\n\n  get entityDataParser() {\n    return this.#entityDataParser;\n  }\n}\n\n/**\n * Catalog plugin\n * @public\n */\nexport const catalogPlugin = createBackendPlugin({\n  pluginId: 'catalog',\n  register(env) {\n    const processingExtensions = new CatalogProcessingExtensionPointImpl();\n    // plugins depending on this API will be initialized before this plugins init method is executed.\n    env.registerExtensionPoint(\n      catalogProcessingExtensionPoint,\n      processingExtensions,\n    );\n\n    let locationAnalyzerFactory:\n      | ((options: {\n          scmLocationAnalyzers: ScmLocationAnalyzer[];\n        }) => Promise<{ locationAnalyzer: LocationAnalyzer }>)\n      | undefined = undefined;\n    const scmLocationAnalyzers = new Array<ScmLocationAnalyzer>();\n    env.registerExtensionPoint(catalogAnalysisExtensionPoint, {\n      setLocationAnalyzer(analyzerOrFactory) {\n        if (locationAnalyzerFactory) {\n          throw new Error('LocationAnalyzer has already been set');\n        }\n        if (typeof analyzerOrFactory === 'function') {\n          locationAnalyzerFactory = analyzerOrFactory;\n        } else {\n          locationAnalyzerFactory = async () => ({\n            locationAnalyzer: analyzerOrFactory,\n          });\n        }\n      },\n      addScmLocationAnalyzer(analyzer: ScmLocationAnalyzer) {\n        scmLocationAnalyzers.push(analyzer);\n      },\n    });\n\n    const permissionExtensions = new CatalogPermissionExtensionPointImpl();\n    env.registerExtensionPoint(\n      catalogPermissionExtensionPoint,\n      permissionExtensions,\n    );\n\n    const modelExtensions = new CatalogModelExtensionPointImpl();\n    env.registerExtensionPoint(catalogModelExtensionPoint, modelExtensions);\n\n    const locationTypeExtensions = new CatalogLocationsExtensionPointImpl();\n    env.registerExtensionPoint(\n      catalogLocationsExtensionPoint,\n      locationTypeExtensions,\n    );\n\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        reader: coreServices.urlReader,\n        permissions: coreServices.permissions,\n        permissionsRegistry: coreServices.permissionsRegistry,\n        database: coreServices.database,\n        httpRouter: coreServices.httpRouter,\n        lifecycle: coreServices.rootLifecycle,\n        scheduler: coreServices.scheduler,\n        auth: coreServices.auth,\n        httpAuth: coreServices.httpAuth,\n        auditor: coreServices.auditor,\n        events: eventsServiceRef,\n        catalog: catalogServiceRef,\n        actionsRegistry: actionsRegistryServiceRef,\n      },\n      async init({\n        logger,\n        config,\n        reader,\n        database,\n        permissions,\n        permissionsRegistry,\n        httpRouter,\n        lifecycle,\n        scheduler,\n        auth,\n        httpAuth,\n        catalog,\n        actionsRegistry,\n        auditor,\n        events,\n      }) {\n        const builder = await CatalogBuilder.create({\n          config,\n          reader,\n          permissions,\n          permissionsRegistry,\n          database,\n          scheduler,\n          logger,\n          auth,\n          httpAuth,\n          auditor,\n        });\n\n        builder.setEventBroker(events);\n\n        if (processingExtensions.onProcessingErrorHandler) {\n          builder.subscribe({\n            onProcessingError: processingExtensions.onProcessingErrorHandler,\n          });\n        }\n        builder.addProcessor(...processingExtensions.processors);\n        builder.addEntityProvider(...processingExtensions.entityProviders);\n\n        if (modelExtensions.entityDataParser) {\n          builder.setEntityDataParser(modelExtensions.entityDataParser);\n        }\n\n        Object.entries(processingExtensions.placeholderResolvers).forEach(\n          ([key, resolver]) => builder.setPlaceholderResolver(key, resolver),\n        );\n        if (locationAnalyzerFactory) {\n          const { locationAnalyzer } = await locationAnalyzerFactory({\n            scmLocationAnalyzers,\n          }).catch(e => {\n            throw new ForwardedError('Failed to create LocationAnalyzer', e);\n          });\n          builder.setLocationAnalyzer(locationAnalyzer);\n        } else {\n          builder.addLocationAnalyzers(...scmLocationAnalyzers);\n        }\n        builder.addPermissions(...permissionExtensions.permissions);\n        builder.addPermissionRules(...permissionExtensions.permissionRules);\n        builder.setFieldFormatValidators(modelExtensions.fieldValidators);\n\n        if (locationTypeExtensions.allowedLocationTypes) {\n          builder.setAllowedLocationTypes(\n            locationTypeExtensions.allowedLocationTypes,\n          );\n        }\n\n        const { processingEngine, router } = await builder.build();\n\n        if (config.getOptional('catalog.processingInterval') ?? true) {\n          lifecycle.addStartupHook(async () => {\n            await processingEngine.start();\n          });\n          lifecycle.addShutdownHook(() => processingEngine.stop());\n        }\n\n        httpRouter.use(router);\n\n        createGetCatalogEntityAction({\n          catalog,\n          actionsRegistry,\n        });\n      },\n    });\n  },\n});\n"],"names":["merge","createBackendPlugin","catalogProcessingExtensionPoint","catalogAnalysisExtensionPoint","catalogPermissionExtensionPoint","catalogModelExtensionPoint","catalogLocationsExtensionPoint","coreServices","eventsServiceRef","catalogServiceRef","actionsRegistryServiceRef","CatalogBuilder","ForwardedError","createGetCatalogEntityAction"],"mappings":"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"}