{"version":3,"file":"write.cjs.js","sources":["../../../src/service/response/write.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Response } from 'express';\nimport { EntitiesResponseItems } from '../../catalog/types';\nimport { createDeferred, DeferredPromise, JsonValue } from '@backstage/types';\nimport { NotFoundError } from '@backstage/errors';\nimport { processEntitiesResponseItems } from './process';\n\nconst JSON_CONTENT_TYPE = 'application/json; charset=utf-8';\n\nexport function writeSingleEntityResponse(\n  res: Response,\n  response: EntitiesResponseItems,\n  notFoundMessage: string,\n) {\n  if (response.type === 'object') {\n    if (!response.entities[0]) {\n      throw new NotFoundError(notFoundMessage);\n    }\n\n    res.json(response.entities[0]);\n  } else {\n    if (!response.entities[0]) {\n      throw new NotFoundError(notFoundMessage);\n    }\n\n    res.setHeader('Content-Type', JSON_CONTENT_TYPE);\n    res.end(response.entities[0]);\n  }\n}\n\nexport async function writeEntitiesResponse(options: {\n  res: Response;\n  items: EntitiesResponseItems;\n  responseWrapper?: (entities: JsonValue) => JsonValue;\n  alwaysUseObjectMode?: boolean;\n}) {\n  const { res, responseWrapper, alwaysUseObjectMode } = options;\n  const writer = createResponseDataWriter(res);\n\n  const items = alwaysUseObjectMode\n    ? processEntitiesResponseItems(options.items, e => e)\n    : options.items;\n\n  if (items.type === 'object') {\n    res.json(\n      responseWrapper ? responseWrapper?.(items.entities) : items.entities,\n    );\n    return;\n  }\n\n  res.setHeader('Content-Type', JSON_CONTENT_TYPE);\n\n  // responseWrapper allows the caller to render the entities within an object\n  let trailing = '';\n  if (responseWrapper) {\n    const marker = `__MARKER_${Math.random().toString(36).slice(2, 10)}__`;\n    const wrapped = JSON.stringify(responseWrapper(marker));\n    const parts = wrapped.split(`\"${marker}\"`);\n    if (parts.length !== 2) {\n      throw new Error(\n        `Entity items response was incorrectly wrapped into ${parts.length} different parts`,\n      );\n    }\n    res.write(parts[0], 'utf8');\n    trailing = parts[1];\n  }\n\n  let first = true;\n  for (const entity of items.entities) {\n    const prefix = first ? '[' : ',';\n    first = false;\n\n    if ((await writer(prefix + entity)) === 'closed') {\n      return;\n    }\n  }\n  res.end(`${first ? '[' : ''}]${trailing}`);\n}\n\n/**\n * Creates a data writer that writes to the response and waits if the response\n * buffer needs draining.\n *\n * @internal\n * @returns A writer function. If a write attempt returns 'closed', the\n * connection has become closed prematurely and the caller should stop trying to\n * write.\n */\nexport function createResponseDataWriter(\n  res: Response,\n): (data: string | Buffer) => Promise<'ok' | 'closed'> {\n  // See https://github.com/backstage/backstage/issues/30659\n  //\n  // This code goes to some lengths to just add listeners once at the top,\n  // instead of on every need to drain. Hence it is more complex that seems to\n  // be necessary, just to avoid listener leaks.\n\n  let drainPromise: DeferredPromise<'ok'> | undefined;\n\n  const closePromise = new Promise<'closed'>(resolve => {\n    function onClose() {\n      res.off('drain', onDrain);\n      res.off('close', onClose);\n      resolve('closed');\n    }\n    function onDrain() {\n      drainPromise?.resolve('ok');\n      drainPromise = undefined;\n    }\n    res.on('drain', onDrain);\n    res.on('close', onClose);\n  });\n\n  return async data => {\n    if (drainPromise) {\n      throw new Error(\n        'Attempted overlapping write while waiting for previous write to drain',\n      );\n    }\n\n    if (res.write(data, 'utf8')) {\n      return 'ok';\n    }\n\n    if (res.closed) {\n      return 'closed';\n    }\n\n    drainPromise = createDeferred();\n    return Promise.race([drainPromise, closePromise]);\n  };\n}\n"],"names":["NotFoundError","processEntitiesResponseItems","createDeferred"],"mappings":"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"}