{"version":3,"file":"CatalogBuilder.cjs.js","sources":["../../src/service/CatalogBuilder.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DefaultNamespaceEntityPolicy,\n  Entity,\n  EntityPolicies,\n  EntityPolicy,\n  FieldFormatEntityPolicy,\n  makeValidator,\n  NoForeignRootFieldsEntityPolicy,\n  SchemaValidEntityPolicy,\n  Validators,\n} from '@backstage/catalog-model';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { createHash } from 'crypto';\nimport { Router } from 'express';\nimport lodash from 'lodash';\n\nimport {\n  AuditorService,\n  AuthService,\n  DatabaseService,\n  HttpAuthService,\n  LoggerService,\n  PermissionsRegistryService,\n  PermissionsService,\n  RootConfigService,\n  SchedulerService,\n  UrlReaderService,\n} from '@backstage/backend-plugin-api';\nimport { Config, readDurationFromConfig } from '@backstage/config';\nimport {\n  catalogPermissions,\n  RESOURCE_TYPE_CATALOG_ENTITY,\n} from '@backstage/plugin-catalog-common/alpha';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  EntityProvider,\n  LocationAnalyzer,\n  PlaceholderResolver,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport { EventBroker, EventsService } from '@backstage/plugin-events-node';\nimport {\n  Permission,\n  PermissionAuthorizer,\n  toPermissionEvaluator,\n} from '@backstage/plugin-permission-common';\nimport {\n  createConditionTransformer,\n  createPermissionIntegrationRouter,\n} from '@backstage/plugin-permission-node';\nimport { durationToMilliseconds } from '@backstage/types';\nimport { DefaultCatalogDatabase } from '../database/DefaultCatalogDatabase';\nimport { DefaultProcessingDatabase } from '../database/DefaultProcessingDatabase';\nimport { DefaultProviderDatabase } from '../database/DefaultProviderDatabase';\nimport { applyDatabaseMigrations } from '../database/migrations';\nimport { DefaultCatalogRulesEnforcer } from '../ingestion/CatalogRules';\nimport { RepoLocationAnalyzer } from '../ingestion/LocationAnalyzer';\nimport { permissionRules as catalogPermissionRules } from '../permissions/rules';\nimport { CatalogProcessingEngine } from '../processing/types';\nimport {\n  createRandomProcessingInterval,\n  ProcessingIntervalFunction,\n} from '../processing/refresh';\nimport { connectEntityProviders } from '../processing/connectEntityProviders';\nimport { evictEntitiesFromOrphanedProviders } from '../processing/evictEntitiesFromOrphanedProviders';\nimport { DefaultCatalogProcessingEngine } from '../processing/DefaultCatalogProcessingEngine';\nimport { DefaultCatalogProcessingOrchestrator } from '../processing/DefaultCatalogProcessingOrchestrator';\nimport {\n  AnnotateLocationEntityProcessor,\n  BuiltinKindsEntityProcessor,\n  FileReaderProcessor,\n  PlaceholderProcessor,\n  UrlReaderProcessor,\n} from '../processors';\nimport {\n  jsonPlaceholderResolver,\n  textPlaceholderResolver,\n  yamlPlaceholderResolver,\n} from '../processors/PlaceholderProcessor';\nimport { ConfigLocationEntityProvider } from '../providers/ConfigLocationEntityProvider';\nimport { DefaultLocationStore } from '../providers/DefaultLocationStore';\nimport { DefaultStitcher } from '../stitching/DefaultStitcher';\nimport { defaultEntityDataParser } from '../util/parse';\nimport { AuthorizedEntitiesCatalog } from './AuthorizedEntitiesCatalog';\nimport { AuthorizedLocationAnalyzer } from './AuthorizedLocationAnalyzer';\nimport { AuthorizedLocationService } from './AuthorizedLocationService';\nimport { AuthorizedRefreshService } from './AuthorizedRefreshService';\nimport { createRouter } from './createRouter';\nimport { DefaultEntitiesCatalog } from './DefaultEntitiesCatalog';\nimport { DefaultLocationService } from './DefaultLocationService';\nimport { DefaultRefreshService } from './DefaultRefreshService';\nimport { entitiesResponseToObjects } from './response';\nimport {\n  catalogEntityPermissionResourceRef,\n  CatalogPermissionRuleInput,\n} from '@backstage/plugin-catalog-node/alpha';\nimport { filterAndSortProcessors, filterProviders } from './util';\n\nexport type CatalogEnvironment = {\n  logger: LoggerService;\n  database: DatabaseService;\n  config: RootConfigService;\n  reader: UrlReaderService;\n  permissions: PermissionsService | PermissionAuthorizer;\n  permissionsRegistry?: PermissionsRegistryService;\n  scheduler?: SchedulerService;\n  auth: AuthService;\n  httpAuth: HttpAuthService;\n  auditor?: AuditorService;\n};\n\n/**\n * A builder that helps wire up all of the component parts of the catalog.\n *\n * The touch points where you can replace or extend behavior are as follows:\n *\n * - Entity policies can be added or replaced. These are automatically run\n *   after the processors' pre-processing steps. All policies are given the\n *   chance to inspect the entity, and all of them have to pass in order for\n *   the entity to be considered valid from an overall point of view.\n * - Location analyzers can be added. These are responsible for analyzing\n *   repositories when onboarding them into the catalog, by finding\n *   catalog-info.yaml files and other artifacts that can help automatically\n *   register or create catalog data on the user's behalf.\n * - Placeholder resolvers can be replaced or added. These run on the raw\n *   structured data between the parsing and pre-processing steps, to replace\n *   dollar-prefixed entries with their actual values (like $file).\n * - Field format validators can be replaced. These check the format of\n *   individual core fields such as metadata.name, to ensure that they adhere\n *   to certain rules.\n * - Processors can be added or replaced. These implement the functionality of\n *   reading, parsing, validating, and processing the entity data before it is\n *   persisted in the catalog.\n */\nexport class CatalogBuilder {\n  private readonly env: CatalogEnvironment;\n  private entityPolicies: EntityPolicy[];\n  private entityPoliciesReplace: boolean;\n  private placeholderResolvers: Record<string, PlaceholderResolver>;\n  private fieldFormatValidators: Partial<Validators>;\n  private entityProviders: EntityProvider[];\n  private processors: CatalogProcessor[];\n  private locationAnalyzers: ScmLocationAnalyzer[];\n  private processorsReplace: boolean;\n  private parser: CatalogProcessorParser | undefined;\n  private onProcessingError?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n  private processingInterval: ProcessingIntervalFunction;\n  private locationAnalyzer: LocationAnalyzer | undefined = undefined;\n  private readonly permissions: Permission[];\n  private readonly permissionRules: CatalogPermissionRuleInput[];\n  private allowedLocationType: string[];\n  private legacySingleProcessorValidation = false;\n  private eventBroker?: EventBroker | EventsService;\n\n  /**\n   * Creates a catalog builder.\n   */\n  static create(env: CatalogEnvironment): CatalogBuilder {\n    return new CatalogBuilder(env);\n  }\n\n  private constructor(env: CatalogEnvironment) {\n    this.env = env;\n    this.entityPolicies = [];\n    this.entityPoliciesReplace = false;\n    this.placeholderResolvers = {};\n    this.fieldFormatValidators = {};\n    this.entityProviders = [];\n    this.processors = [];\n    this.locationAnalyzers = [];\n    this.processorsReplace = false;\n    this.parser = undefined;\n    this.permissions = [...catalogPermissions];\n    this.permissionRules = Object.values(catalogPermissionRules);\n    this.allowedLocationType = ['url'];\n\n    this.processingInterval = CatalogBuilder.getDefaultProcessingInterval(\n      env.config,\n    );\n  }\n\n  /**\n   * Adds policies that are used to validate entities between the pre-\n   * processing and post-processing stages. All such policies must pass for the\n   * entity to be considered valid.\n   *\n   * If what you want to do is to replace the rules for what format is allowed\n   * in various core entity fields (such as metadata.name), you may want to use\n   * {@link CatalogBuilder#setFieldFormatValidators} instead.\n   *\n   * @param policies - One or more policies\n   */\n  addEntityPolicy(\n    ...policies: Array<EntityPolicy | Array<EntityPolicy>>\n  ): CatalogBuilder {\n    this.entityPolicies.push(...policies.flat());\n    return this;\n  }\n\n  /**\n   * Processing interval determines how often entities should be processed.\n   * Seconds provided will be multiplied by 1.5\n   * The default processing interval is 100-150 seconds.\n   * setting this too low will potentially deplete request quotas to upstream services.\n   */\n  setProcessingIntervalSeconds(seconds: number): CatalogBuilder {\n    this.processingInterval = createRandomProcessingInterval({\n      minSeconds: seconds,\n      maxSeconds: seconds * 1.5,\n    });\n    return this;\n  }\n\n  /**\n   * Overwrites the default processing interval function used to spread\n   * entity updates in the catalog.\n   */\n  setProcessingInterval(\n    processingInterval: ProcessingIntervalFunction,\n  ): CatalogBuilder {\n    this.processingInterval = processingInterval;\n    return this;\n  }\n\n  /**\n   * Overwrites the default location analyzer.\n   */\n  setLocationAnalyzer(locationAnalyzer: LocationAnalyzer): CatalogBuilder {\n    this.locationAnalyzer = locationAnalyzer;\n    return this;\n  }\n\n  /**\n   * Sets what policies to use for validation of entities between the pre-\n   * processing and post-processing stages. All such policies must pass for the\n   * entity to be considered valid.\n   *\n   * If what you want to do is to replace the rules for what format is allowed\n   * in various core entity fields (such as metadata.name), you may want to use\n   * {@link CatalogBuilder#setFieldFormatValidators} instead.\n   *\n   * This function replaces the default set of policies; use with care.\n   *\n   * @param policies - One or more policies\n   */\n  replaceEntityPolicies(policies: EntityPolicy[]): CatalogBuilder {\n    this.entityPolicies = [...policies];\n    this.entityPoliciesReplace = true;\n    return this;\n  }\n\n  /**\n   * Adds, or overwrites, a handler for placeholders (e.g. $file) in entity\n   * definition files.\n   *\n   * @param key - The key that identifies the placeholder, e.g. \"file\"\n   * @param resolver - The resolver that gets values for this placeholder\n   */\n  setPlaceholderResolver(\n    key: string,\n    resolver: PlaceholderResolver,\n  ): CatalogBuilder {\n    this.placeholderResolvers[key] = resolver;\n    return this;\n  }\n\n  /**\n   * Sets the validator function to use for one or more special fields of an\n   * entity. This is useful if the default rules for formatting of fields are\n   * not sufficient.\n   *\n   * This function has no effect if used together with\n   * {@link CatalogBuilder#replaceEntityPolicies}.\n   *\n   * @param validators - The (subset of) validators to set\n   */\n  setFieldFormatValidators(validators: Partial<Validators>): CatalogBuilder {\n    lodash.merge(this.fieldFormatValidators, validators);\n    return this;\n  }\n\n  /**\n   * Adds or replaces entity providers. These are responsible for bootstrapping\n   * the list of entities out of original data sources. For example, there is\n   * one entity source for the config locations, and one for the database\n   * stored locations. If you ingest entities out of a third party system, you\n   * may want to implement that in terms of an entity provider as well.\n   *\n   * @param providers - One or more entity providers\n   */\n  addEntityProvider(\n    ...providers: Array<EntityProvider | Array<EntityProvider>>\n  ): CatalogBuilder {\n    this.entityProviders.push(...providers.flat());\n    return this;\n  }\n\n  /**\n   * Adds entity processors. These are responsible for reading, parsing, and\n   * processing entities before they are persisted in the catalog.\n   *\n   * @param processors - One or more processors\n   */\n  addProcessor(\n    ...processors: Array<CatalogProcessor | Array<CatalogProcessor>>\n  ): CatalogBuilder {\n    this.processors.push(...processors.flat());\n    return this;\n  }\n\n  /**\n   * Sets what entity processors to use. These are responsible for reading,\n   * parsing, and processing entities before they are persisted in the catalog.\n   *\n   * This function replaces the default set of processors, consider using with\n   * {@link CatalogBuilder#getDefaultProcessors}; use with care.\n   *\n   * @param processors - One or more processors\n   */\n  replaceProcessors(processors: CatalogProcessor[]): CatalogBuilder {\n    this.processors = [...processors];\n    this.processorsReplace = true;\n    return this;\n  }\n\n  /**\n   * Returns the default list of entity processors. These are responsible for reading,\n   * parsing, and processing entities before they are persisted in the catalog. Changing\n   * the order of processing can give more control to custom processors.\n   *\n   * Consider using with {@link CatalogBuilder#replaceProcessors}\n   *\n   */\n  getDefaultProcessors(): CatalogProcessor[] {\n    const { config, logger, reader } = this.env;\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return [\n      new FileReaderProcessor(),\n      new UrlReaderProcessor({ reader, logger }),\n      new AnnotateLocationEntityProcessor({ integrations }),\n    ];\n  }\n\n  /**\n   * Adds Location Analyzers. These are responsible for analyzing\n   * repositories when onboarding them into the catalog, by finding\n   * catalog-info.yaml files and other artifacts that can help automatically\n   * register or create catalog data on the user's behalf.\n   *\n   * @param locationAnalyzers - One or more location analyzers\n   */\n  addLocationAnalyzers(\n    ...analyzers: Array<ScmLocationAnalyzer | Array<ScmLocationAnalyzer>>\n  ): CatalogBuilder {\n    this.locationAnalyzers.push(...analyzers.flat());\n    return this;\n  }\n\n  /**\n   * Sets up the catalog to use a custom parser for entity data.\n   *\n   * This is the function that gets called immediately after some raw entity\n   * specification data has been read from a remote source, and needs to be\n   * parsed and emitted as structured data.\n   *\n   * @param parser - The custom parser\n   */\n  setEntityDataParser(parser: CatalogProcessorParser): CatalogBuilder {\n    this.parser = parser;\n    return this;\n  }\n\n  /**\n   * Adds additional permissions. See\n   * {@link @backstage/plugin-permission-node#Permission}.\n   *\n   * @param permissions - Additional permissions\n   */\n  addPermissions(...permissions: Array<Permission | Array<Permission>>) {\n    this.permissions.push(...permissions.flat());\n    return this;\n  }\n\n  /**\n   * Adds additional permission rules. Permission rules are used to evaluate\n   * catalog resources against queries. See\n   * {@link @backstage/plugin-permission-node#PermissionRule}.\n   *\n   * @param permissionRules - Additional permission rules\n   */\n  addPermissionRules(\n    ...permissionRules: Array<\n      CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>\n    >\n  ) {\n    this.permissionRules.push(...permissionRules.flat());\n    return this;\n  }\n\n  /**\n   * Sets up the allowed location types from being registered via the location service.\n   *\n   * @param allowedLocationTypes - the allowed location types\n   */\n  setAllowedLocationTypes(allowedLocationTypes: string[]): CatalogBuilder {\n    this.allowedLocationType = allowedLocationTypes;\n    return this;\n  }\n\n  /**\n   * Enables the legacy behaviour of canceling validation early whenever only a\n   * single processor declares an entity kind to be valid.\n   */\n  useLegacySingleProcessorValidation(): this {\n    this.legacySingleProcessorValidation = true;\n    return this;\n  }\n\n  /**\n   * Enables the publishing of events for conflicts in the DefaultProcessingDatabase\n   */\n  setEventBroker(broker: EventBroker | EventsService): CatalogBuilder {\n    this.eventBroker = broker;\n    return this;\n  }\n\n  /**\n   * Wires up and returns all of the component parts of the catalog\n   */\n  async build(): Promise<{\n    processingEngine: CatalogProcessingEngine;\n    router: Router;\n  }> {\n    const {\n      config,\n      database,\n      logger,\n      permissions,\n      scheduler,\n      permissionsRegistry,\n      auditor,\n      auth,\n      httpAuth,\n    } = this.env;\n\n    const enableRelationsCompatibility = Boolean(\n      config.getOptionalBoolean('catalog.enableRelationsCompatibility'),\n    );\n\n    const policy = this.buildEntityPolicy();\n    const processors = this.buildProcessors();\n    const parser = this.parser || defaultEntityDataParser;\n\n    const dbClient = await database.getClient();\n    if (!database.migrations?.skip) {\n      logger.info('Performing database migration');\n      await applyDatabaseMigrations(dbClient);\n    }\n\n    const stitcher = DefaultStitcher.fromConfig(config, {\n      knex: dbClient,\n      logger,\n    });\n\n    const processingDatabase = new DefaultProcessingDatabase({\n      database: dbClient,\n      logger,\n      refreshInterval: this.processingInterval,\n      eventBroker: this.eventBroker,\n    });\n    const providerDatabase = new DefaultProviderDatabase({\n      database: dbClient,\n      logger,\n    });\n    const catalogDatabase = new DefaultCatalogDatabase({\n      database: dbClient,\n      logger,\n    });\n    const integrations = ScmIntegrations.fromConfig(config);\n    const rulesEnforcer = DefaultCatalogRulesEnforcer.fromConfig(config);\n\n    const unauthorizedEntitiesCatalog = new DefaultEntitiesCatalog({\n      database: dbClient,\n      logger,\n      stitcher,\n      enableRelationsCompatibility,\n    });\n\n    let permissionsService: PermissionsService;\n    if ('authorizeConditional' in permissions) {\n      permissionsService = permissions as PermissionsService;\n    } else {\n      logger.warn(\n        'PermissionAuthorizer is deprecated. Please use an instance of PermissionEvaluator instead of PermissionAuthorizer in PluginEnvironment#permissions',\n      );\n      permissionsService = toPermissionEvaluator(permissions);\n    }\n\n    const orchestrator = new DefaultCatalogProcessingOrchestrator({\n      processors,\n      integrations,\n      rulesEnforcer,\n      logger,\n      parser,\n      policy,\n      legacySingleProcessorValidation: this.legacySingleProcessorValidation,\n    });\n\n    const entitiesCatalog = new AuthorizedEntitiesCatalog(\n      unauthorizedEntitiesCatalog,\n      permissionsService,\n      permissionsRegistry\n        ? createConditionTransformer(\n            permissionsRegistry.getPermissionRuleset(\n              catalogEntityPermissionResourceRef,\n            ),\n          )\n        : createConditionTransformer(this.permissionRules),\n    );\n\n    const getResources = async (resourceRefs: string[]) => {\n      const { items } = await unauthorizedEntitiesCatalog.entitiesBatch({\n        credentials: await auth.getOwnServiceCredentials(),\n        entityRefs: resourceRefs,\n      });\n\n      return entitiesResponseToObjects(items).map(e => e || undefined);\n    };\n\n    let permissionIntegrationRouter:\n      | ReturnType<typeof createPermissionIntegrationRouter>\n      | undefined;\n    if (permissionsRegistry) {\n      permissionsRegistry.addResourceType({\n        resourceRef: catalogEntityPermissionResourceRef,\n        getResources,\n        permissions: this.permissions,\n        rules: this.permissionRules,\n      });\n    } else {\n      permissionIntegrationRouter = createPermissionIntegrationRouter({\n        resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n        getResources,\n        permissions: this.permissions,\n        rules: this.permissionRules,\n      });\n    }\n\n    const locationStore = new DefaultLocationStore(dbClient);\n    const configLocationProvider = new ConfigLocationEntityProvider(config);\n    const entityProviders = filterProviders(\n      lodash.uniqBy(\n        [...this.entityProviders, locationStore, configLocationProvider],\n        provider => provider.getProviderName(),\n      ),\n      config,\n    );\n\n    const processingEngine = new DefaultCatalogProcessingEngine({\n      config,\n      scheduler,\n      logger,\n      knex: dbClient,\n      processingDatabase,\n      orchestrator,\n      stitcher,\n      createHash: () => createHash('sha1'),\n      pollingIntervalMs: 1000,\n      onProcessingError: event => {\n        this.onProcessingError?.(event);\n      },\n      eventBroker: this.eventBroker,\n    });\n\n    const locationAnalyzer =\n      this.locationAnalyzer ??\n      new AuthorizedLocationAnalyzer(\n        new RepoLocationAnalyzer(logger, integrations, this.locationAnalyzers),\n        permissionsService,\n      );\n    const locationService = new AuthorizedLocationService(\n      new DefaultLocationService(locationStore, orchestrator, {\n        allowedLocationTypes: this.allowedLocationType,\n      }),\n      permissionsService,\n    );\n    const refreshService = new AuthorizedRefreshService(\n      new DefaultRefreshService({ database: catalogDatabase }),\n      permissionsService,\n    );\n\n    const router = await createRouter({\n      entitiesCatalog,\n      locationAnalyzer,\n      locationService,\n      orchestrator,\n      refreshService,\n      logger,\n      config,\n      permissionIntegrationRouter,\n      auth,\n      httpAuth,\n      permissionsService,\n      auditor,\n      enableRelationsCompatibility,\n    });\n\n    await connectEntityProviders(providerDatabase, entityProviders);\n\n    return {\n      processingEngine: {\n        async start() {\n          if (\n            config.getOptionalString('catalog.orphanProviderStrategy') !==\n            'keep'\n          ) {\n            await evictEntitiesFromOrphanedProviders({\n              db: providerDatabase,\n              providers: entityProviders,\n              logger,\n            });\n          }\n          await processingEngine.start();\n          await stitcher.start();\n        },\n        async stop() {\n          await processingEngine.stop();\n          await stitcher.stop();\n        },\n      },\n      router,\n    };\n  }\n\n  subscribe(options: {\n    onProcessingError: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void;\n  }) {\n    this.onProcessingError = options.onProcessingError;\n  }\n\n  private buildEntityPolicy(): EntityPolicy {\n    const entityPolicies: EntityPolicy[] = this.entityPoliciesReplace\n      ? [new SchemaValidEntityPolicy(), ...this.entityPolicies]\n      : [\n          new SchemaValidEntityPolicy(),\n          new DefaultNamespaceEntityPolicy(),\n          new NoForeignRootFieldsEntityPolicy(),\n          new FieldFormatEntityPolicy(\n            makeValidator(this.fieldFormatValidators),\n          ),\n          ...this.entityPolicies,\n        ];\n\n    return EntityPolicies.allOf(entityPolicies);\n  }\n\n  private buildProcessors(): CatalogProcessor[] {\n    const { config, reader } = this.env;\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    this.checkDeprecatedReaderProcessors();\n\n    const placeholderResolvers: Record<string, PlaceholderResolver> = {\n      json: jsonPlaceholderResolver,\n      yaml: yamlPlaceholderResolver,\n      text: textPlaceholderResolver,\n      ...this.placeholderResolvers,\n    };\n\n    // The placeholder is always there no matter what\n    const processors: CatalogProcessor[] = [\n      new PlaceholderProcessor({\n        resolvers: placeholderResolvers,\n        reader,\n        integrations,\n      }),\n    ];\n\n    const builtinKindsEntityProcessor = new BuiltinKindsEntityProcessor();\n    // If the user adds a processor named 'BuiltinKindsEntityProcessor',\n    //   skip inclusion of the catalog-backend version.\n    if (\n      !this.processors.some(\n        processor =>\n          processor.getProcessorName() ===\n          builtinKindsEntityProcessor.getProcessorName(),\n      )\n    ) {\n      processors.push(builtinKindsEntityProcessor);\n    }\n\n    const disableDefaultProcessors = config.getOptionalBoolean(\n      'catalog.disableDefaultProcessors',\n    );\n\n    // Add default processors if:\n    // - processors have NOT been explicitly replaced\n    // - and default processors are NOT disabled via config\n    if (!this.processorsReplace && !disableDefaultProcessors) {\n      processors.push(...this.getDefaultProcessors());\n    }\n\n    // Add the ones (if any) that the user added\n    processors.push(...this.processors);\n\n    this.checkMissingExternalProcessors(processors);\n\n    return filterAndSortProcessors(processors, config);\n  }\n\n  // TODO(Rugvip): These old processors are removed, for a while we'll be throwing\n  //               errors here to make sure people know where to move the config\n  private checkDeprecatedReaderProcessors() {\n    const pc = this.env.config.getOptionalConfig('catalog.processors');\n    if (pc?.has('github')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.github, move to using integrations.github instead`,\n      );\n    }\n    if (pc?.has('gitlabApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.gitlabApi, move to using integrations.gitlab instead`,\n      );\n    }\n    if (pc?.has('bitbucketApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.bitbucketApi, move to using integrations.bitbucket instead`,\n      );\n    }\n    if (pc?.has('azureApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.azureApi, move to using integrations.azure instead`,\n      );\n    }\n  }\n\n  // TODO(freben): This can be removed no sooner than June 2022, after adopters have had some time to adapt to the new package structure\n  private checkMissingExternalProcessors(processors: CatalogProcessor[]) {\n    const skipCheckVarName = 'BACKSTAGE_CATALOG_SKIP_MISSING_PROCESSORS_CHECK';\n    if (process.env[skipCheckVarName]) {\n      return;\n    }\n\n    const locationTypes = new Set(\n      this.env.config\n        .getOptionalConfigArray('catalog.locations')\n        ?.map(l => l.getString('type')) ?? [],\n    );\n    const processorNames = new Set(processors.map(p => p.getProcessorName()));\n\n    function check(\n      locationType: string,\n      processorName: string,\n      installationUrl: string,\n    ) {\n      if (\n        locationTypes.has(locationType) &&\n        !processorNames.has(processorName)\n      ) {\n        throw new Error(\n          [\n            `Your config contains a \"catalog.locations\" entry of type ${locationType},`,\n            `but does not have the corresponding catalog processor ${processorName} installed.`,\n            `This processor used to be built into the catalog itself, but is now moved to an`,\n            `external module that has to be installed manually. Please follow the installation`,\n            `instructions at ${installationUrl} if you are using this ability, or remove the`,\n            `location from your app config if you do not. You can also silence this check entirely`,\n            `by setting the environment variable ${skipCheckVarName} to 'true'.`,\n          ].join(' '),\n        );\n      }\n    }\n\n    check(\n      'aws-cloud-accounts',\n      'AwsOrganizationCloudAccountProcessor',\n      'https://backstage.io/docs/integrations',\n    );\n    check(\n      's3-discovery',\n      'AwsS3DiscoveryProcessor',\n      'https://backstage.io/docs/integrations/aws-s3/discovery',\n    );\n    check(\n      'azure-discovery',\n      'AzureDevOpsDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/azure/discovery',\n    );\n    check(\n      'bitbucket-discovery',\n      'BitbucketDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/bitbucket/discovery',\n    );\n    check(\n      'github-discovery',\n      'GithubDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/github/discovery',\n    );\n    check(\n      'github-org',\n      'GithubOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/github/org',\n    );\n    check(\n      'gitlab-discovery',\n      'GitLabDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/gitlab/discovery',\n    );\n    check(\n      'ldap-org',\n      'LdapOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/ldap/org',\n    );\n    check(\n      'microsoft-graph-org',\n      'MicrosoftGraphOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/azure/org',\n    );\n  }\n\n  private static getDefaultProcessingInterval(\n    config: Config,\n  ): ProcessingIntervalFunction {\n    const processingIntervalKey = 'catalog.processingInterval';\n\n    if (!config.has(processingIntervalKey)) {\n      return createRandomProcessingInterval({\n        minSeconds: 100,\n        maxSeconds: 150,\n      });\n    }\n\n    if (!Boolean(config.get('catalog.processingInterval'))) {\n      return () => {\n        throw new Error(\n          'catalog.processingInterval is set to false, processing is disabled.',\n        );\n      };\n    }\n\n    const duration = readDurationFromConfig(config, {\n      key: processingIntervalKey,\n    });\n\n    const seconds = Math.max(\n      1,\n      Math.round(durationToMilliseconds(duration) / 1000),\n    );\n\n    return createRandomProcessingInterval({\n      minSeconds: seconds,\n      maxSeconds: seconds * 1.5,\n    });\n  }\n}\n"],"names":["catalogPermissions","catalogPermissionRules","createRandomProcessingInterval","lodash","ScmIntegrations","FileReaderProcessor","UrlReaderProcessor","AnnotateLocationEntityProcessor","defaultEntityDataParser","applyDatabaseMigrations","DefaultStitcher","DefaultProcessingDatabase","DefaultProviderDatabase","DefaultCatalogDatabase","DefaultCatalogRulesEnforcer","DefaultEntitiesCatalog","toPermissionEvaluator","DefaultCatalogProcessingOrchestrator","AuthorizedEntitiesCatalog","createConditionTransformer","catalogEntityPermissionResourceRef","entitiesResponseToObjects","createPermissionIntegrationRouter","RESOURCE_TYPE_CATALOG_ENTITY","DefaultLocationStore","ConfigLocationEntityProvider","filterProviders","DefaultCatalogProcessingEngine","createHash","AuthorizedLocationAnalyzer","RepoLocationAnalyzer","AuthorizedLocationService","DefaultLocationService","AuthorizedRefreshService","DefaultRefreshService","createRouter","connectEntityProviders","evictEntitiesFromOrphanedProviders","SchemaValidEntityPolicy","DefaultNamespaceEntityPolicy","NoForeignRootFieldsEntityPolicy","FieldFormatEntityPolicy","makeValidator","EntityPolicies","jsonPlaceholderResolver","yamlPlaceholderResolver","textPlaceholderResolver","PlaceholderProcessor","BuiltinKindsEntityProcessor","filterAndSortProcessors","config","readDurationFromConfig","durationToMilliseconds"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuJO,MAAM,cAAA,CAAe;AAAA,EACT,GAAA;AAAA,EACT,cAAA;AAAA,EACA,qBAAA;AAAA,EACA,oBAAA;AAAA,EACA,qBAAA;AAAA,EACA,eAAA;AAAA,EACA,UAAA;AAAA,EACA,iBAAA;AAAA,EACA,iBAAA;AAAA,EACA,MAAA;AAAA,EACA,iBAAA;AAAA,EAIA,kBAAA;AAAA,EACA,gBAAA,GAAiD,MAAA;AAAA,EACxC,WAAA;AAAA,EACA,eAAA;AAAA,EACT,mBAAA;AAAA,EACA,+BAAA,GAAkC,KAAA;AAAA,EAClC,WAAA;AAAA;AAAA;AAAA;AAAA,EAKR,OAAO,OAAO,GAAA,EAAyC;AACrD,IAAA,OAAO,IAAI,eAAe,GAAG,CAAA;AAAA,EAC/B;AAAA,EAEQ,YAAY,GAAA,EAAyB;AAC3C,IAAA,IAAA,CAAK,GAAA,GAAM,GAAA;AACX,IAAA,IAAA,CAAK,iBAAiB,EAAC;AACvB,IAAA,IAAA,CAAK,qBAAA,GAAwB,KAAA;AAC7B,IAAA,IAAA,CAAK,uBAAuB,EAAC;AAC7B,IAAA,IAAA,CAAK,wBAAwB,EAAC;AAC9B,IAAA,IAAA,CAAK,kBAAkB,EAAC;AACxB,IAAA,IAAA,CAAK,aAAa,EAAC;AACnB,IAAA,IAAA,CAAK,oBAAoB,EAAC;AAC1B,IAAA,IAAA,CAAK,iBAAA,GAAoB,KAAA;AACzB,IAAA,IAAA,CAAK,MAAA,GAAS,MAAA;AACd,IAAA,IAAA,CAAK,WAAA,GAAc,CAAC,GAAGA,wBAAkB,CAAA;AACzC,IAAA,IAAA,CAAK,eAAA,GAAkB,MAAA,CAAO,MAAA,CAAOC,qBAAsB,CAAA;AAC3D,IAAA,IAAA,CAAK,mBAAA,GAAsB,CAAC,KAAK,CAAA;AAEjC,IAAA,IAAA,CAAK,qBAAqB,cAAA,CAAe,4BAAA;AAAA,MACvC,GAAA,CAAI;AAAA,KACN;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,mBACK,QAAA,EACa;AAChB,IAAA,IAAA,CAAK,cAAA,CAAe,IAAA,CAAK,GAAG,QAAA,CAAS,MAAM,CAAA;AAC3C,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,6BAA6B,OAAA,EAAiC;AAC5D,IAAA,IAAA,CAAK,qBAAqBC,sCAAA,CAA+B;AAAA,MACvD,UAAA,EAAY,OAAA;AAAA,MACZ,YAAY,OAAA,GAAU;AAAA,KACvB,CAAA;AACD,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBACE,kBAAA,EACgB;AAChB,IAAA,IAAA,CAAK,kBAAA,GAAqB,kBAAA;AAC1B,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,gBAAA,EAAoD;AACtE,IAAA,IAAA,CAAK,gBAAA,GAAmB,gBAAA;AACxB,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,sBAAsB,QAAA,EAA0C;AAC9D,IAAA,IAAA,CAAK,cAAA,GAAiB,CAAC,GAAG,QAAQ,CAAA;AAClC,IAAA,IAAA,CAAK,qBAAA,GAAwB,IAAA;AAC7B,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBAAA,CACE,KACA,QAAA,EACgB;AAChB,IAAA,IAAA,CAAK,oBAAA,CAAqB,GAAG,CAAA,GAAI,QAAA;AACjC,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,yBAAyB,UAAA,EAAiD;AACxE,IAAAC,uBAAA,CAAO,KAAA,CAAM,IAAA,CAAK,qBAAA,EAAuB,UAAU,CAAA;AACnD,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,qBACK,SAAA,EACa;AAChB,IAAA,IAAA,CAAK,eAAA,CAAgB,IAAA,CAAK,GAAG,SAAA,CAAU,MAAM,CAAA;AAC7C,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBACK,UAAA,EACa;AAChB,IAAA,IAAA,CAAK,UAAA,CAAW,IAAA,CAAK,GAAG,UAAA,CAAW,MAAM,CAAA;AACzC,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,kBAAkB,UAAA,EAAgD;AAChE,IAAA,IAAA,CAAK,UAAA,GAAa,CAAC,GAAG,UAAU,CAAA;AAChC,IAAA,IAAA,CAAK,iBAAA,GAAoB,IAAA;AACzB,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,oBAAA,GAA2C;AACzC,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAA,EAAQ,MAAA,KAAW,IAAA,CAAK,GAAA;AACxC,IAAA,MAAM,YAAA,GAAeC,2BAAA,CAAgB,UAAA,CAAW,MAAM,CAAA;AAEtD,IAAA,OAAO;AAAA,MACL,IAAIC,uCAAA,EAAoB;AAAA,MACxB,IAAIC,qCAAA,CAAmB,EAAE,MAAA,EAAQ,QAAQ,CAAA;AAAA,MACzC,IAAIC,+DAAA,CAAgC,EAAE,YAAA,EAAc;AAAA,KACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,wBACK,SAAA,EACa;AAChB,IAAA,IAAA,CAAK,iBAAA,CAAkB,IAAA,CAAK,GAAG,SAAA,CAAU,MAAM,CAAA;AAC/C,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,oBAAoB,MAAA,EAAgD;AAClE,IAAA,IAAA,CAAK,MAAA,GAAS,MAAA;AACd,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,WAAA,EAAoD;AACpE,IAAA,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,GAAG,WAAA,CAAY,MAAM,CAAA;AAC3C,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBACK,eAAA,EAGH;AACA,IAAA,IAAA,CAAK,eAAA,CAAgB,IAAA,CAAK,GAAG,eAAA,CAAgB,MAAM,CAAA;AACnD,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,wBAAwB,oBAAA,EAAgD;AACtE,IAAA,IAAA,CAAK,mBAAA,GAAsB,oBAAA;AAC3B,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kCAAA,GAA2C;AACzC,IAAA,IAAA,CAAK,+BAAA,GAAkC,IAAA;AACvC,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,MAAA,EAAqD;AAClE,IAAA,IAAA,CAAK,WAAA,GAAc,MAAA;AACnB,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,KAAA,GAGH;AACD,IAAA,MAAM;AAAA,MACJ,MAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAA;AAAA,MACA,SAAA;AAAA,MACA,mBAAA;AAAA,MACA,OAAA;AAAA,MACA,IAAA;AAAA,MACA;AAAA,QACE,IAAA,CAAK,GAAA;AAET,IAAA,MAAM,4BAAA,GAA+B,OAAA;AAAA,MACnC,MAAA,CAAO,mBAAmB,sCAAsC;AAAA,KAClE;AAEA,IAAA,MAAM,MAAA,GAAS,KAAK,iBAAA,EAAkB;AACtC,IAAA,MAAM,UAAA,GAAa,KAAK,eAAA,EAAgB;AACxC,IAAA,MAAM,MAAA,GAAS,KAAK,MAAA,IAAUC,6BAAA;AAE9B,IAAA,MAAM,QAAA,GAAW,MAAM,QAAA,CAAS,SAAA,EAAU;AAC1C,IAAA,IAAI,CAAC,QAAA,CAAS,UAAA,EAAY,IAAA,EAAM;AAC9B,MAAA,MAAA,CAAO,KAAK,+BAA+B,CAAA;AAC3C,MAAA,MAAMC,mCAAwB,QAAQ,CAAA;AAAA,IACxC;AAEA,IAAA,MAAM,QAAA,GAAWC,+BAAA,CAAgB,UAAA,CAAW,MAAA,EAAQ;AAAA,MAClD,IAAA,EAAM,QAAA;AAAA,MACN;AAAA,KACD,CAAA;AAED,IAAA,MAAM,kBAAA,GAAqB,IAAIC,mDAAA,CAA0B;AAAA,MACvD,QAAA,EAAU,QAAA;AAAA,MACV,MAAA;AAAA,MACA,iBAAiB,IAAA,CAAK,kBAAA;AAAA,MACtB,aAAa,IAAA,CAAK;AAAA,KACnB,CAAA;AACD,IAAA,MAAM,gBAAA,GAAmB,IAAIC,+CAAA,CAAwB;AAAA,MACnD,QAAA,EAAU,QAAA;AAAA,MACV;AAAA,KACD,CAAA;AACD,IAAA,MAAM,eAAA,GAAkB,IAAIC,6CAAA,CAAuB;AAAA,MACjD,QAAA,EAAU,QAAA;AAAA,MACV;AAAA,KACD,CAAA;AACD,IAAA,MAAM,YAAA,GAAeT,2BAAA,CAAgB,UAAA,CAAW,MAAM,CAAA;AACtD,IAAA,MAAM,aAAA,GAAgBU,wCAAA,CAA4B,UAAA,CAAW,MAAM,CAAA;AAEnE,IAAA,MAAM,2BAAA,GAA8B,IAAIC,6CAAA,CAAuB;AAAA,MAC7D,QAAA,EAAU,QAAA;AAAA,MACV,MAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,IAAI,kBAAA;AACJ,IAAA,IAAI,0BAA0B,WAAA,EAAa;AACzC,MAAA,kBAAA,GAAqB,WAAA;AAAA,IACvB,CAAA,MAAO;AACL,MAAA,MAAA,CAAO,IAAA;AAAA,QACL;AAAA,OACF;AACA,MAAA,kBAAA,GAAqBC,6CAAsB,WAAW,CAAA;AAAA,IACxD;AAEA,IAAA,MAAM,YAAA,GAAe,IAAIC,yEAAA,CAAqC;AAAA,MAC5D,UAAA;AAAA,MACA,YAAA;AAAA,MACA,aAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,iCAAiC,IAAA,CAAK;AAAA,KACvC,CAAA;AAED,IAAA,MAAM,kBAAkB,IAAIC,mDAAA;AAAA,MAC1B,2BAAA;AAAA,MACA,kBAAA;AAAA,MACA,mBAAA,GACIC,+CAAA;AAAA,QACE,mBAAA,CAAoB,oBAAA;AAAA,UAClBC;AAAA;AACF,OACF,GACAD,+CAAA,CAA2B,IAAA,CAAK,eAAe;AAAA,KACrD;AAEA,IAAA,MAAM,YAAA,GAAe,OAAO,YAAA,KAA2B;AACrD,MAAA,MAAM,EAAE,KAAA,EAAM,GAAI,MAAM,4BAA4B,aAAA,CAAc;AAAA,QAChE,WAAA,EAAa,MAAM,IAAA,CAAK,wBAAA,EAAyB;AAAA,QACjD,UAAA,EAAY;AAAA,OACb,CAAA;AAED,MAAA,OAAOE,oCAA0B,KAAK,CAAA,CAAE,GAAA,CAAI,CAAA,CAAA,KAAK,KAAK,MAAS,CAAA;AAAA,IACjE,CAAA;AAEA,IAAA,IAAI,2BAAA;AAGJ,IAAA,IAAI,mBAAA,EAAqB;AACvB,MAAA,mBAAA,CAAoB,eAAA,CAAgB;AAAA,QAClC,WAAA,EAAaD,0CAAA;AAAA,QACb,YAAA;AAAA,QACA,aAAa,IAAA,CAAK,WAAA;AAAA,QAClB,OAAO,IAAA,CAAK;AAAA,OACb,CAAA;AAAA,IACH,CAAA,MAAO;AACL,MAAA,2BAAA,GAA8BE,sDAAA,CAAkC;AAAA,QAC9D,YAAA,EAAcC,kCAAA;AAAA,QACd,YAAA;AAAA,QACA,aAAa,IAAA,CAAK,WAAA;AAAA,QAClB,OAAO,IAAA,CAAK;AAAA,OACb,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,aAAA,GAAgB,IAAIC,yCAAA,CAAqB,QAAQ,CAAA;AACvD,IAAA,MAAM,sBAAA,GAAyB,IAAIC,yDAAA,CAA6B,MAAM,CAAA;AACtE,IAAA,MAAM,eAAA,GAAkBC,oBAAA;AAAA,MACtBvB,uBAAA,CAAO,MAAA;AAAA,QACL,CAAC,GAAG,IAAA,CAAK,eAAA,EAAiB,eAAe,sBAAsB,CAAA;AAAA,QAC/D,CAAA,QAAA,KAAY,SAAS,eAAA;AAAgB,OACvC;AAAA,MACA;AAAA,KACF;AAEA,IAAA,MAAM,gBAAA,GAAmB,IAAIwB,6DAAA,CAA+B;AAAA,MAC1D,MAAA;AAAA,MACA,SAAA;AAAA,MACA,MAAA;AAAA,MACA,IAAA,EAAM,QAAA;AAAA,MACN,kBAAA;AAAA,MACA,YAAA;AAAA,MACA,QAAA;AAAA,MACA,UAAA,EAAY,MAAMC,iBAAA,CAAW,MAAM,CAAA;AAAA,MACnC,iBAAA,EAAmB,GAAA;AAAA,MACnB,mBAAmB,CAAA,KAAA,KAAS;AAC1B,QAAA,IAAA,CAAK,oBAAoB,KAAK,CAAA;AAAA,MAChC,CAAA;AAAA,MACA,aAAa,IAAA,CAAK;AAAA,KACnB,CAAA;AAED,IAAA,MAAM,gBAAA,GACJ,IAAA,CAAK,gBAAA,IACL,IAAIC,qDAAA;AAAA,MACF,IAAIC,qCAAA,CAAqB,MAAA,EAAQ,YAAA,EAAc,KAAK,iBAAiB,CAAA;AAAA,MACrE;AAAA,KACF;AACF,IAAA,MAAM,kBAAkB,IAAIC,mDAAA;AAAA,MAC1B,IAAIC,6CAAA,CAAuB,aAAA,EAAe,YAAA,EAAc;AAAA,QACtD,sBAAsB,IAAA,CAAK;AAAA,OAC5B,CAAA;AAAA,MACD;AAAA,KACF;AACA,IAAA,MAAM,iBAAiB,IAAIC,iDAAA;AAAA,MACzB,IAAIC,2CAAA,CAAsB,EAAE,QAAA,EAAU,iBAAiB,CAAA;AAAA,MACvD;AAAA,KACF;AAEA,IAAA,MAAM,MAAA,GAAS,MAAMC,yBAAA,CAAa;AAAA,MAChC,eAAA;AAAA,MACA,gBAAA;AAAA,MACA,eAAA;AAAA,MACA,YAAA;AAAA,MACA,cAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,2BAAA;AAAA,MACA,IAAA;AAAA,MACA,QAAA;AAAA,MACA,kBAAA;AAAA,MACA,OAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,MAAMC,6CAAA,CAAuB,kBAAkB,eAAe,CAAA;AAE9D,IAAA,OAAO;AAAA,MACL,gBAAA,EAAkB;AAAA,QAChB,MAAM,KAAA,GAAQ;AACZ,UAAA,IACE,MAAA,CAAO,iBAAA,CAAkB,gCAAgC,CAAA,KACzD,MAAA,EACA;AACA,YAAA,MAAMC,qEAAA,CAAmC;AAAA,cACvC,EAAA,EAAI,gBAAA;AAAA,cACJ,SAAA,EAAW,eAAA;AAAA,cACX;AAAA,aACD,CAAA;AAAA,UACH;AACA,UAAA,MAAM,iBAAiB,KAAA,EAAM;AAC7B,UAAA,MAAM,SAAS,KAAA,EAAM;AAAA,QACvB,CAAA;AAAA,QACA,MAAM,IAAA,GAAO;AACX,UAAA,MAAM,iBAAiB,IAAA,EAAK;AAC5B,UAAA,MAAM,SAAS,IAAA,EAAK;AAAA,QACtB;AAAA,OACF;AAAA,MACA;AAAA,KACF;AAAA,EACF;AAAA,EAEA,UAAU,OAAA,EAKP;AACD,IAAA,IAAA,CAAK,oBAAoB,OAAA,CAAQ,iBAAA;AAAA,EACnC;AAAA,EAEQ,iBAAA,GAAkC;AACxC,IAAA,MAAM,cAAA,GAAiC,IAAA,CAAK,qBAAA,GACxC,CAAC,IAAIC,sCAAwB,EAAG,GAAG,IAAA,CAAK,cAAc,CAAA,GACtD;AAAA,MACE,IAAIA,oCAAA,EAAwB;AAAA,MAC5B,IAAIC,yCAAA,EAA6B;AAAA,MACjC,IAAIC,4CAAA,EAAgC;AAAA,MACpC,IAAIC,oCAAA;AAAA,QACFC,0BAAA,CAAc,KAAK,qBAAqB;AAAA,OAC1C;AAAA,MACA,GAAG,IAAA,CAAK;AAAA,KACV;AAEJ,IAAA,OAAOC,2BAAA,CAAe,MAAM,cAAc,CAAA;AAAA,EAC5C;AAAA,EAEQ,eAAA,GAAsC;AAC5C,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAA,EAAO,GAAI,IAAA,CAAK,GAAA;AAChC,IAAA,MAAM,YAAA,GAAevC,2BAAA,CAAgB,UAAA,CAAW,MAAM,CAAA;AAEtD,IAAA,IAAA,CAAK,+BAAA,EAAgC;AAErC,IAAA,MAAM,oBAAA,GAA4D;AAAA,MAChE,IAAA,EAAMwC,4CAAA;AAAA,MACN,IAAA,EAAMC,4CAAA;AAAA,MACN,IAAA,EAAMC,4CAAA;AAAA,MACN,GAAG,IAAA,CAAK;AAAA,KACV;AAGA,IAAA,MAAM,UAAA,GAAiC;AAAA,MACrC,IAAIC,yCAAA,CAAqB;AAAA,QACvB,SAAA,EAAW,oBAAA;AAAA,QACX,MAAA;AAAA,QACA;AAAA,OACD;AAAA,KACH;AAEA,IAAA,MAAM,2BAAA,GAA8B,IAAIC,uDAAA,EAA4B;AAGpE,IAAA,IACE,CAAC,KAAK,UAAA,CAAW,IAAA;AAAA,MACf,CAAA,SAAA,KACE,SAAA,CAAU,gBAAA,EAAiB,KAC3B,4BAA4B,gBAAA;AAAiB,KACjD,EACA;AACA,MAAA,UAAA,CAAW,KAAK,2BAA2B,CAAA;AAAA,IAC7C;AAEA,IAAA,MAAM,2BAA2B,MAAA,CAAO,kBAAA;AAAA,MACtC;AAAA,KACF;AAKA,IAAA,IAAI,CAAC,IAAA,CAAK,iBAAA,IAAqB,CAAC,wBAAA,EAA0B;AACxD,MAAA,UAAA,CAAW,IAAA,CAAK,GAAG,IAAA,CAAK,oBAAA,EAAsB,CAAA;AAAA,IAChD;AAGA,IAAA,UAAA,CAAW,IAAA,CAAK,GAAG,IAAA,CAAK,UAAU,CAAA;AAElC,IAAA,IAAA,CAAK,+BAA+B,UAAU,CAAA;AAE9C,IAAA,OAAOC,4BAAA,CAAwB,YAAY,MAAM,CAAA;AAAA,EACnD;AAAA;AAAA;AAAA,EAIQ,+BAAA,GAAkC;AACxC,IAAA,MAAM,EAAA,GAAK,IAAA,CAAK,GAAA,CAAI,MAAA,CAAO,kBAAkB,oBAAoB,CAAA;AACjE,IAAA,IAAI,EAAA,EAAI,GAAA,CAAI,QAAQ,CAAA,EAAG;AACrB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,uGAAA;AAAA,OACF;AAAA,IACF;AACA,IAAA,IAAI,EAAA,EAAI,GAAA,CAAI,WAAW,CAAA,EAAG;AACxB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,0GAAA;AAAA,OACF;AAAA,IACF;AACA,IAAA,IAAI,EAAA,EAAI,GAAA,CAAI,cAAc,CAAA,EAAG;AAC3B,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,gHAAA;AAAA,OACF;AAAA,IACF;AACA,IAAA,IAAI,EAAA,EAAI,GAAA,CAAI,UAAU,CAAA,EAAG;AACvB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,wGAAA;AAAA,OACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGQ,+BAA+B,UAAA,EAAgC;AACrE,IAAA,MAAM,gBAAA,GAAmB,iDAAA;AACzB,IAAA,IAAI,OAAA,CAAQ,GAAA,CAAI,gBAAgB,CAAA,EAAG;AACjC,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,gBAAgB,IAAI,GAAA;AAAA,MACxB,IAAA,CAAK,GAAA,CAAI,MAAA,CACN,sBAAA,CAAuB,mBAAmB,CAAA,EACzC,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,SAAA,CAAU,MAAM,CAAC,KAAK;AAAC,KACxC;AACA,IAAA,MAAM,cAAA,GAAiB,IAAI,GAAA,CAAI,UAAA,CAAW,IAAI,CAAA,CAAA,KAAK,CAAA,CAAE,gBAAA,EAAkB,CAAC,CAAA;AAExE,IAAA,SAAS,KAAA,CACP,YAAA,EACA,aAAA,EACA,eAAA,EACA;AACA,MAAA,IACE,aAAA,CAAc,IAAI,YAAY,CAAA,IAC9B,CAAC,cAAA,CAAe,GAAA,CAAI,aAAa,CAAA,EACjC;AACA,QAAA,MAAM,IAAI,KAAA;AAAA,UACR;AAAA,YACE,4DAA4D,YAAY,CAAA,CAAA,CAAA;AAAA,YACxE,yDAAyD,aAAa,CAAA,WAAA,CAAA;AAAA,YACtE,CAAA,+EAAA,CAAA;AAAA,YACA,CAAA,iFAAA,CAAA;AAAA,YACA,mBAAmB,eAAe,CAAA,6CAAA,CAAA;AAAA,YAClC,CAAA,qFAAA,CAAA;AAAA,YACA,uCAAuC,gBAAgB,CAAA,WAAA;AAAA,WACzD,CAAE,KAAK,GAAG;AAAA,SACZ;AAAA,MACF;AAAA,IACF;AAEA,IAAA,KAAA;AAAA,MACE,oBAAA;AAAA,MACA,sCAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,KAAA;AAAA,MACE,cAAA;AAAA,MACA,yBAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,KAAA;AAAA,MACE,iBAAA;AAAA,MACA,+BAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,KAAA;AAAA,MACE,qBAAA;AAAA,MACA,6BAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,KAAA;AAAA,MACE,kBAAA;AAAA,MACA,0BAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,KAAA;AAAA,MACE,YAAA;AAAA,MACA,0BAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,KAAA;AAAA,MACE,kBAAA;AAAA,MACA,0BAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,KAAA;AAAA,MACE,UAAA;AAAA,MACA,wBAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,KAAA;AAAA,MACE,qBAAA;AAAA,MACA,kCAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF;AAAA,EAEA,OAAe,6BACbC,QAAA,EAC4B;AAC5B,IAAA,MAAM,qBAAA,GAAwB,4BAAA;AAE9B,IAAA,IAAI,CAACA,QAAA,CAAO,GAAA,CAAI,qBAAqB,CAAA,EAAG;AACtC,MAAA,OAAOhD,sCAAA,CAA+B;AAAA,QACpC,UAAA,EAAY,GAAA;AAAA,QACZ,UAAA,EAAY;AAAA,OACb,CAAA;AAAA,IACH;AAEA,IAAA,IAAI,CAAC,OAAA,CAAQgD,QAAA,CAAO,GAAA,CAAI,4BAA4B,CAAC,CAAA,EAAG;AACtD,MAAA,OAAO,MAAM;AACX,QAAA,MAAM,IAAI,KAAA;AAAA,UACR;AAAA,SACF;AAAA,MACF,CAAA;AAAA,IACF;AAEA,IAAA,MAAM,QAAA,GAAWC,8BAAuBD,QAAA,EAAQ;AAAA,MAC9C,GAAA,EAAK;AAAA,KACN,CAAA;AAED,IAAA,MAAM,UAAU,IAAA,CAAK,GAAA;AAAA,MACnB,CAAA;AAAA,MACA,IAAA,CAAK,KAAA,CAAME,4BAAA,CAAuB,QAAQ,IAAI,GAAI;AAAA,KACpD;AAEA,IAAA,OAAOlD,sCAAA,CAA+B;AAAA,MACpC,UAAA,EAAY,OAAA;AAAA,MACZ,YAAY,OAAA,GAAU;AAAA,KACvB,CAAA;AAAA,EACH;AACF;;;;"}