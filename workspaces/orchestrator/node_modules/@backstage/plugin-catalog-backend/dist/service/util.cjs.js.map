{"version":3,"file":"util.cjs.js","sources":["../../src/service/util.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError, NotAllowedError } from '@backstage/errors';\nimport { Request } from 'express';\nimport lodash from 'lodash';\nimport { z } from 'zod';\nimport {\n  Cursor,\n  QueryEntitiesCursorRequest,\n  QueryEntitiesInitialRequest,\n  QueryEntitiesRequest,\n} from '../catalog/types';\nimport {\n  CatalogProcessor,\n  EntityFilter,\n  EntityProvider,\n} from '@backstage/plugin-catalog-node';\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\n\nexport async function requireRequestBody(req: Request): Promise<unknown> {\n  const contentType = req.header('content-type');\n  if (!contentType) {\n    throw new InputError('Content-Type missing');\n  } else if (!contentType.match(/^application\\/json($|;)/)) {\n    throw new InputError('Illegal Content-Type');\n  }\n\n  const body = req.body;\n  if (!body) {\n    throw new InputError('Missing request body');\n  } else if (!lodash.isPlainObject(body)) {\n    throw new InputError('Expected body to be a JSON object');\n  } else if (Object.keys(body).length === 0) {\n    // Because of how express.json() translates the empty body to {}\n    throw new InputError('Empty request body');\n  }\n\n  return body;\n}\n\nexport const locationInput = z\n  .object({\n    type: z.string(),\n    target: z.string(),\n    presence: z.literal('required').or(z.literal('optional')).optional(),\n  })\n  .strict(); // no unknown keys;\n\nexport async function validateRequestBody<T>(\n  req: Request,\n  schema: z.Schema<T>,\n): Promise<T> {\n  const body = await requireRequestBody(req);\n  try {\n    return await schema.parse(body);\n  } catch (e) {\n    throw new InputError(`Malformed request: ${e}`);\n  }\n}\n\nexport function disallowReadonlyMode(readonly: boolean) {\n  if (readonly) {\n    throw new NotAllowedError('This operation not allowed in readonly mode');\n  }\n}\n\nexport function isQueryEntitiesInitialRequest(\n  input: QueryEntitiesRequest | undefined,\n): input is QueryEntitiesInitialRequest {\n  if (!input) {\n    return false;\n  }\n  return !isQueryEntitiesCursorRequest(input);\n}\n\nexport function isQueryEntitiesCursorRequest(\n  input: QueryEntitiesRequest | undefined,\n): input is QueryEntitiesCursorRequest {\n  if (!input) {\n    return false;\n  }\n  return !!(input as QueryEntitiesCursorRequest).cursor;\n}\n\nconst entityFilterParser: z.ZodSchema<EntityFilter> = z.lazy(() =>\n  z\n    .object({\n      key: z.string(),\n      values: z.array(z.string()).optional(),\n    })\n    .or(z.object({ not: entityFilterParser }))\n    .or(z.object({ anyOf: z.array(entityFilterParser) }))\n    .or(z.object({ allOf: z.array(entityFilterParser) })),\n);\n\nexport const cursorParser: z.ZodSchema<Cursor> = z.object({\n  orderFields: z.array(\n    z.object({ field: z.string(), order: z.enum(['asc', 'desc']) }),\n  ),\n  fullTextFilter: z\n    .object({\n      term: z.string(),\n      fields: z.array(z.string()).optional(),\n    })\n    .optional(),\n  orderFieldValues: z.array(z.string().or(z.null())),\n  filter: entityFilterParser.optional(),\n  isPrevious: z.boolean(),\n  query: z.string().optional(),\n  firstSortFieldValues: z.array(z.string().or(z.null())).optional(),\n  totalItems: z.number().optional(),\n});\n\nexport function encodeCursor(cursor: Cursor) {\n  const json = JSON.stringify(cursor);\n  return Buffer.from(json, 'utf8').toString('base64');\n}\n\nexport function decodeCursor(encodedCursor: string) {\n  try {\n    const data = Buffer.from(encodedCursor, 'base64').toString('utf8');\n    const result = cursorParser.safeParse(JSON.parse(data));\n\n    if (!result.success) {\n      throw new InputError(`Malformed cursor: ${result.error}`);\n    }\n    return result.data;\n  } catch (e) {\n    throw new InputError(`Malformed cursor: ${e}`);\n  }\n}\n\n// TODO(freben): This is added as a compatibility guarantee, until we can be\n// sure that all adopters have re-stitched their entities so that the new\n// targetRef field is present on them, and that they have stopped consuming\n// the now-removed old field\n// TODO(patriko): Remove this in catalog 2.0\nexport function expandLegacyCompoundRelationsInEntity(entity: Entity): Entity {\n  if (entity.relations) {\n    for (const relation of entity.relations as any) {\n      if (!relation.targetRef && relation.target) {\n        // This is the case where an old-form entity, not yet stitched with\n        // the updated code, was in the database\n        relation.targetRef = stringifyEntityRef(relation.target);\n      } else if (!relation.target && relation.targetRef) {\n        // This is the case where a new-form entity, stitched with the\n        // updated code, was in the database but we still want to produce\n        // the old data shape as well for compatibility reasons\n        relation.target = parseEntityRef(relation.targetRef);\n      }\n    }\n  }\n  return entity;\n}\n\n/**\n * Given a list of catalog processors, filter out the ones that are disabled\n * through the `catalog.processorOptions` config and sort them by priority.\n */\nexport function filterAndSortProcessors(\n  processors: CatalogProcessor[],\n  config: Config,\n): CatalogProcessor[] {\n  function getProcessorOptions(\n    processor: CatalogProcessor,\n  ): Config | undefined {\n    const root = config.getOptionalConfig('catalog.processorOptions');\n    try {\n      return root?.getOptionalConfig(processor.getProcessorName());\n    } catch {\n      // We silence errors specifically here, to cover for cases where the\n      // processor name contains special characters which makes the config\n      // reader throw an error.\n      return undefined;\n    }\n  }\n\n  function isProcessorDisabled(processor: CatalogProcessor): boolean {\n    return (\n      getProcessorOptions(processor)?.getOptionalBoolean('disabled') === true\n    );\n  }\n\n  function getProcessorPriority(processor: CatalogProcessor): number {\n    let priority =\n      getProcessorOptions(processor)?.getOptionalNumber('priority');\n\n    if (priority === undefined) {\n      try {\n        priority = processor.getPriority?.();\n      } catch {\n        // In case the processor method throws, just return default priority\n      }\n    }\n\n    return priority ?? 20;\n  }\n\n  return processors\n    .filter(p => !isProcessorDisabled(p))\n    .sort((a, b) => getProcessorPriority(a) - getProcessorPriority(b));\n}\n\n/**\n * Given a list of entity providers, filter out the ones that are disabled\n * through the `catalog.providerOptions` config.\n */\nexport function filterProviders(\n  providers: EntityProvider[],\n  config: Config,\n): EntityProvider[] {\n  function getProviderOptions(provider: EntityProvider): Config | undefined {\n    const root = config.getOptionalConfig('catalog.providerOptions');\n    try {\n      return root?.getOptionalConfig(provider.getProviderName());\n    } catch {\n      // We silence errors specifically here, to cover for cases where the\n      // provider name contains special characters which makes the config\n      // reader throw an error.\n      return undefined;\n    }\n  }\n\n  function isProviderDisabled(provider: EntityProvider): boolean {\n    return (\n      getProviderOptions(provider)?.getOptionalBoolean('disabled') === true\n    );\n  }\n\n  return providers.filter(p => !isProviderDisabled(p));\n}\n"],"names":["InputError","lodash","z","NotAllowedError","stringifyEntityRef","parseEntityRef"],"mappings":"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"}