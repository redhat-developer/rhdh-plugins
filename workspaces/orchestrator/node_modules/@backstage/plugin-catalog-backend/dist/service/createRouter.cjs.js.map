{"version":3,"file":"createRouter.cjs.js","sources":["../../src/service/createRouter.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuditorService,\n  AuthService,\n  HttpAuthService,\n  LoggerService,\n  PermissionsService,\n  SchedulerService,\n} from '@backstage/backend-plugin-api';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n  parseLocationRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { InputError, serializeError } from '@backstage/errors';\nimport { LocationAnalyzer } from '@backstage/plugin-catalog-node';\nimport express from 'express';\nimport yn from 'yn';\nimport { z } from 'zod';\nimport { Cursor, EntitiesCatalog } from '../catalog/types';\nimport { CatalogProcessingOrchestrator } from '../processing/types';\nimport { validateEntityEnvelope } from '../processing/util';\nimport { createOpenApiRouter } from '../schema/openapi';\nimport { AuthorizedValidationService } from './AuthorizedValidationService';\nimport {\n  basicEntityFilter,\n  entitiesBatchRequest,\n  parseEntityFilterParams,\n  parseEntityTransformParams,\n  parseQueryEntitiesParams,\n} from './request';\nimport { parseEntityFacetParams } from './request/parseEntityFacetParams';\nimport { parseEntityOrderParams } from './request/parseEntityOrderParams';\nimport { parseEntityPaginationParams } from './request/parseEntityPaginationParams';\nimport {\n  createEntityArrayJsonStream,\n  writeEntitiesResponse,\n  writeSingleEntityResponse,\n} from './response';\nimport { LocationService, RefreshService } from './types';\nimport {\n  disallowReadonlyMode,\n  encodeCursor,\n  locationInput,\n  validateRequestBody,\n} from './util';\n\n/**\n * Options used by {@link createRouter}.\n */\nexport interface RouterOptions {\n  entitiesCatalog?: EntitiesCatalog;\n  locationAnalyzer?: LocationAnalyzer;\n  locationService: LocationService;\n  orchestrator?: CatalogProcessingOrchestrator;\n  refreshService?: RefreshService;\n  scheduler?: SchedulerService;\n  logger: LoggerService;\n  config: Config;\n  permissionIntegrationRouter?: express.Router;\n  auth: AuthService;\n  httpAuth: HttpAuthService;\n  permissionsService: PermissionsService;\n  // TODO: Require AuditorService once `backend-legacy` is removed\n  auditor?: AuditorService;\n  enableRelationsCompatibility?: boolean;\n}\n\n/**\n * Creates a catalog router.\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = await createOpenApiRouter({\n    validatorOptions: {\n      // We want the spec to be up to date with the expected value, but the return type needs\n      //  to be controlled by the router implementation not the request validator.\n      ignorePaths: /^\\/validate-entity\\/?$/,\n    },\n  });\n  const {\n    entitiesCatalog,\n    locationAnalyzer,\n    locationService,\n    orchestrator,\n    refreshService,\n    config,\n    logger,\n    permissionIntegrationRouter,\n    permissionsService,\n    auth,\n    httpAuth,\n    auditor,\n    enableRelationsCompatibility = false,\n  } = options;\n\n  const readonlyEnabled =\n    config.getOptionalBoolean('catalog.readonly') || false;\n  if (readonlyEnabled) {\n    logger.info('Catalog is running in readonly mode');\n  }\n\n  if (refreshService) {\n    // TODO: Potentially find a way to track the ancestor that gets refreshed to refresh this entity (as well as the child of that ancestor?)\n    router.post('/refresh', async (req, res) => {\n      const { authorizationToken, ...restBody } = req.body;\n\n      const auditorEvent = await auditor?.createEvent({\n        eventId: 'entity-mutate',\n        severityLevel: 'medium',\n        meta: {\n          queryType: 'refresh',\n          entityRef: restBody.entityRef,\n        },\n        request: req,\n      });\n\n      try {\n        const credentials = authorizationToken\n          ? await auth.authenticate(authorizationToken)\n          : await httpAuth.credentials(req);\n\n        await refreshService.refresh({\n          ...restBody,\n          credentials,\n        });\n\n        await auditorEvent?.success();\n        res.status(200).end();\n      } catch (err) {\n        await auditorEvent?.fail({ error: err });\n        throw err;\n      }\n    });\n  }\n\n  if (permissionIntegrationRouter) {\n    router.use(permissionIntegrationRouter);\n  }\n\n  if (entitiesCatalog) {\n    router\n      .get('/entities', async (req, res) => {\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'entity-fetch',\n          request: req,\n          meta: {\n            queryType: 'all',\n            query: req.query,\n          },\n        });\n\n        try {\n          const filter = parseEntityFilterParams(req.query);\n          const fields = parseEntityTransformParams(req.query);\n          const order = parseEntityOrderParams(req.query);\n          const pagination = parseEntityPaginationParams(req.query);\n          const credentials = await httpAuth.credentials(req);\n\n          // When pagination parameters are passed in, use the legacy slow path\n          // that loads all entities into memory\n\n          if (pagination || enableRelationsCompatibility === true) {\n            const { entities, pageInfo } = await entitiesCatalog.entities({\n              filter,\n              fields,\n              order,\n              pagination,\n              credentials,\n            });\n\n            // Add a Link header to the next page\n            if (pageInfo.hasNextPage) {\n              const url = new URL(`http://ignored${req.url}`);\n              url.searchParams.delete('offset');\n              url.searchParams.set('after', pageInfo.endCursor);\n              res.setHeader(\n                'link',\n                `<${url.pathname}${url.search}>; rel=\"next\"`,\n              );\n            }\n\n            await auditorEvent?.success();\n\n            await writeEntitiesResponse({\n              res,\n              items: entities,\n              alwaysUseObjectMode: enableRelationsCompatibility,\n            });\n            return;\n          }\n\n          const responseStream = createEntityArrayJsonStream(res);\n          const limit = 10000;\n          let cursor: Cursor | undefined;\n\n          try {\n            let currentWrite: Promise<'ok' | 'closed'> | undefined = undefined;\n            do {\n              const result = await entitiesCatalog.queryEntities(\n                !cursor\n                  ? {\n                      credentials,\n                      fields,\n                      limit,\n                      filter,\n                      orderFields: order,\n                      skipTotalItems: true,\n                    }\n                  : { credentials, fields, limit, cursor },\n              );\n\n              // Wait for previous write to complete\n              if ((await currentWrite) === 'closed') {\n                return; // Client closed connection\n              }\n\n              if (result.items.entities.length) {\n                currentWrite = responseStream.send(result.items);\n              }\n\n              cursor = result.pageInfo?.nextCursor;\n            } while (cursor);\n\n            // Wait for last write to complete\n            await currentWrite;\n\n            await auditorEvent?.success();\n\n            responseStream.complete();\n          } finally {\n            responseStream.close();\n          }\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n      .get('/entities/by-query', async (req, res) => {\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'entity-fetch',\n          request: req,\n          meta: {\n            queryType: 'by-query',\n          },\n        });\n\n        try {\n          const { items, pageInfo, totalItems } =\n            await entitiesCatalog.queryEntities({\n              limit: req.query.limit,\n              offset: req.query.offset,\n              ...parseQueryEntitiesParams(req.query),\n              credentials: await httpAuth.credentials(req),\n            });\n\n          const meta = {\n            totalItems,\n            pageInfo: {\n              ...(pageInfo.nextCursor && {\n                nextCursor: encodeCursor(pageInfo.nextCursor),\n              }),\n              ...(pageInfo.prevCursor && {\n                prevCursor: encodeCursor(pageInfo.prevCursor),\n              }),\n            },\n          };\n\n          await auditorEvent?.success({\n            // Let's not log out the entities since this can make the log very big\n            meta,\n          });\n\n          await writeEntitiesResponse({\n            res,\n            items,\n            alwaysUseObjectMode: enableRelationsCompatibility,\n            responseWrapper: entities => ({\n              items: entities,\n              ...meta,\n            }),\n          });\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n      .get('/entities/by-uid/:uid', async (req, res) => {\n        const { uid } = req.params;\n\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'entity-fetch',\n          request: req,\n          meta: {\n            queryType: 'by-uid',\n            uid: uid,\n          },\n        });\n\n        try {\n          const { entities } = await entitiesCatalog.entities({\n            filter: basicEntityFilter({ 'metadata.uid': uid }),\n            credentials: await httpAuth.credentials(req),\n          });\n\n          writeSingleEntityResponse(res, entities, `No entity with uid ${uid}`);\n\n          await auditorEvent?.success({\n            meta: {\n              // stringify to entity refs\n              entities: entities.entities.reduce((arr, element) => {\n                if (!element) {\n                  return arr;\n                }\n\n                if (typeof element === 'string') {\n                  arr.push(element);\n                  return arr;\n                }\n\n                arr.push(stringifyEntityRef(element));\n                return arr;\n              }, [] as string[]),\n            },\n          });\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n      .delete('/entities/by-uid/:uid', async (req, res) => {\n        const { uid } = req.params;\n\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'entity-mutate',\n          severityLevel: 'medium',\n          request: req,\n          meta: {\n            actionType: 'delete',\n            uid: uid,\n          },\n        });\n\n        try {\n          await entitiesCatalog.removeEntityByUid(uid, {\n            credentials: await httpAuth.credentials(req),\n          });\n\n          await auditorEvent?.success();\n\n          res.status(204).end();\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n      .get('/entities/by-name/:kind/:namespace/:name', async (req, res) => {\n        const { kind, namespace, name } = req.params;\n        const entityRef = stringifyEntityRef({ kind, namespace, name });\n\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'entity-fetch',\n          request: req,\n          meta: {\n            queryType: 'by-name',\n            entityRef: entityRef,\n          },\n        });\n\n        try {\n          const { items } = await entitiesCatalog.entitiesBatch({\n            entityRefs: [stringifyEntityRef({ kind, namespace, name })],\n            credentials: await httpAuth.credentials(req),\n          });\n\n          await auditorEvent?.success();\n\n          writeSingleEntityResponse(\n            res,\n            items,\n            `No entity named '${name}' found, with kind '${kind}' in namespace '${namespace}'`,\n          );\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n      .get(\n        '/entities/by-name/:kind/:namespace/:name/ancestry',\n        async (req, res) => {\n          const { kind, namespace, name } = req.params;\n          const entityRef = stringifyEntityRef({ kind, namespace, name });\n\n          const auditorEvent = await auditor?.createEvent({\n            eventId: 'entity-fetch',\n            request: req,\n            meta: {\n              actionType: 'ancestry',\n              entityRef: entityRef,\n            },\n          });\n\n          try {\n            const response = await entitiesCatalog.entityAncestry(entityRef, {\n              credentials: await httpAuth.credentials(req),\n            });\n\n            await auditorEvent?.success({\n              meta: {\n                rootEntityRef: response.rootEntityRef,\n                ancestry: response.items.map(ancestryLink => {\n                  return {\n                    entityRef: stringifyEntityRef(ancestryLink.entity),\n                    parentEntityRefs: ancestryLink.parentEntityRefs,\n                  };\n                }),\n              },\n            });\n\n            res.status(200).json(response);\n          } catch (err) {\n            await auditorEvent?.fail({\n              error: err,\n            });\n            throw err;\n          }\n        },\n      )\n      .post('/entities/by-refs', async (req, res) => {\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'entity-fetch',\n          request: req,\n          meta: {\n            queryType: 'by-refs',\n          },\n        });\n\n        try {\n          const request = entitiesBatchRequest(req);\n          const { items } = await entitiesCatalog.entitiesBatch({\n            entityRefs: request.entityRefs,\n            filter: parseEntityFilterParams(req.query),\n            fields: parseEntityTransformParams(req.query, request.fields),\n            credentials: await httpAuth.credentials(req),\n          });\n\n          await auditorEvent?.success({\n            meta: {\n              ...request,\n            },\n          });\n\n          await writeEntitiesResponse({\n            res,\n            items,\n            alwaysUseObjectMode: enableRelationsCompatibility,\n            responseWrapper: entities => ({\n              items: entities,\n            }),\n          });\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n      .get('/entity-facets', async (req, res) => {\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'entity-facets',\n          request: req,\n        });\n\n        try {\n          const response = await entitiesCatalog.facets({\n            filter: parseEntityFilterParams(req.query),\n            facets: parseEntityFacetParams(req.query),\n            credentials: await httpAuth.credentials(req),\n          });\n\n          await auditorEvent?.success();\n\n          res.status(200).json(response);\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      });\n  }\n\n  if (locationService) {\n    router\n      .post('/locations', async (req, res) => {\n        const location = await validateRequestBody(req, locationInput);\n        const dryRun = yn(req.query.dryRun, { default: false });\n\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'location-mutate',\n          severityLevel: dryRun ? 'low' : 'medium',\n          request: req,\n          meta: {\n            actionType: 'create',\n            location: location,\n            isDryRun: dryRun,\n          },\n        });\n\n        try {\n          // when in dryRun addLocation is effectively a read operation so we don't\n          // need to disallow readonly\n          if (!dryRun) {\n            disallowReadonlyMode(readonlyEnabled);\n          }\n\n          const output = await locationService.createLocation(\n            location,\n            dryRun,\n            {\n              credentials: await httpAuth.credentials(req),\n            },\n          );\n\n          await auditorEvent?.success({\n            meta: {\n              location: output.location,\n            },\n          });\n\n          res.status(201).json(output);\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n            meta: {\n              location: location,\n              isDryRun: dryRun,\n            },\n          });\n          throw err;\n        }\n      })\n      .get('/locations', async (req, res) => {\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'location-fetch',\n          request: req,\n          meta: {\n            queryType: 'all',\n          },\n        });\n\n        try {\n          const locations = await locationService.listLocations({\n            credentials: await httpAuth.credentials(req),\n          });\n\n          await auditorEvent?.success();\n\n          res.status(200).json(locations.map(l => ({ data: l })));\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n\n      .get('/locations/:id', async (req, res) => {\n        const { id } = req.params;\n\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'location-fetch',\n          request: req,\n          meta: {\n            queryType: 'by-id',\n            id: id,\n          },\n        });\n\n        try {\n          const output = await locationService.getLocation(id, {\n            credentials: await httpAuth.credentials(req),\n          });\n\n          await auditorEvent?.success({\n            meta: {\n              output: output,\n            },\n          });\n\n          res.status(200).json(output);\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n      .delete('/locations/:id', async (req, res) => {\n        const { id } = req.params;\n\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'location-mutate',\n          severityLevel: 'medium',\n          request: req,\n          meta: {\n            actionType: 'delete',\n            id: id,\n          },\n        });\n\n        disallowReadonlyMode(readonlyEnabled);\n\n        try {\n          await locationService.deleteLocation(id, {\n            credentials: await httpAuth.credentials(req),\n          });\n\n          await auditorEvent?.success();\n\n          res.status(204).end();\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      })\n      .get('/locations/by-entity/:kind/:namespace/:name', async (req, res) => {\n        const { kind, namespace, name } = req.params;\n        const locationRef = `${kind}:${namespace}/${name}`;\n\n        const auditorEvent = await auditor?.createEvent({\n          eventId: 'location-fetch',\n          request: req,\n          meta: {\n            queryType: 'by-entity',\n            locationRef: locationRef,\n          },\n        });\n\n        try {\n          const output = await locationService.getLocationByEntity(\n            { kind, namespace, name },\n            { credentials: await httpAuth.credentials(req) },\n          );\n\n          await auditorEvent?.success({\n            meta: {\n              output: output,\n            },\n          });\n\n          res.status(200).json(output);\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n          throw err;\n        }\n      });\n  }\n\n  if (locationAnalyzer) {\n    router.post('/analyze-location', async (req, res) => {\n      const auditorEvent = await auditor?.createEvent({\n        eventId: 'location-analyze',\n        request: req,\n      });\n\n      try {\n        const body = await validateRequestBody(\n          req,\n          z.object({\n            location: locationInput,\n            catalogFilename: z.string().optional(),\n          }),\n        );\n        const schema = z.object({\n          location: locationInput,\n          catalogFilename: z.string().optional(),\n        });\n        const credentials = await httpAuth.credentials(req);\n        const parsedBody = schema.parse(body);\n        try {\n          const output = await locationAnalyzer.analyzeLocation(\n            parsedBody,\n            credentials,\n          );\n\n          await auditorEvent?.success({\n            meta: {\n              output: output,\n            },\n          });\n\n          res.status(200).json(output);\n        } catch (err) {\n          if (\n            // Catch errors from parse-url library.\n            err.name === 'Error' &&\n            'subject_url' in err\n          ) {\n            throw new InputError('The given location.target is not a URL');\n          }\n          throw err;\n        }\n      } catch (err) {\n        await auditorEvent?.fail({\n          error: err,\n        });\n        throw err;\n      }\n    });\n  }\n\n  if (orchestrator) {\n    router.post('/validate-entity', async (req, res) => {\n      const auditorEvent = await auditor?.createEvent({\n        eventId: 'entity-validate',\n        request: req,\n      });\n\n      try {\n        const bodySchema = z.object({\n          entity: z.unknown(),\n          location: z.string(),\n        });\n\n        let body: z.infer<typeof bodySchema>;\n        let entity: Entity;\n        let location: { type: string; target: string };\n        try {\n          body = await validateRequestBody(req, bodySchema);\n          entity = validateEntityEnvelope(body.entity);\n          location = parseLocationRef(body.location);\n          if (location.type !== 'url')\n            throw new TypeError(\n              `Invalid location ref ${body.location}, only 'url:<target>' is supported, e.g. url:https://host/path`,\n            );\n        } catch (err) {\n          await auditorEvent?.fail({\n            error: err,\n          });\n\n          return res.status(400).json({\n            errors: [serializeError(err)],\n          });\n        }\n\n        const credentials = await httpAuth.credentials(req);\n        const authorizedValidationService = new AuthorizedValidationService(\n          orchestrator,\n          permissionsService,\n        );\n        const processingResult = await authorizedValidationService.process(\n          {\n            entity: {\n              ...entity,\n              metadata: {\n                ...entity.metadata,\n                annotations: {\n                  [ANNOTATION_LOCATION]: body.location,\n                  [ANNOTATION_ORIGIN_LOCATION]: body.location,\n                  ...entity.metadata.annotations,\n                },\n              },\n            },\n          },\n          credentials,\n        );\n\n        if (!processingResult.ok) {\n          const errors = processingResult.errors.map(e => serializeError(e));\n\n          await auditorEvent?.fail({\n            // TODO(Rugvip): Seems like there aren't proper types for AggregateError yet\n            error: (AggregateError as any)(errors, 'Could not validate entity'),\n          });\n\n          res.status(400).json({\n            errors,\n          });\n        }\n\n        await auditorEvent?.success();\n\n        return res.status(200).end();\n      } catch (err) {\n        await auditorEvent?.fail({\n          error: err,\n        });\n        throw err;\n      }\n    });\n  }\n\n  return router;\n}\n"],"names":["router","createOpenApiRouter","parseEntityFilterParams","parseEntityTransformParams","parseEntityOrderParams","parseEntityPaginationParams","writeEntitiesResponse","createEntityArrayJsonStream","parseQueryEntitiesParams","encodeCursor","basicEntityFilter","writeSingleEntityResponse","stringifyEntityRef","entitiesBatchRequest","parseEntityFacetParams","validateRequestBody","locationInput","yn","disallowReadonlyMode","z","InputError","validateEntityEnvelope","parseLocationRef","serializeError","AuthorizedValidationService","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION","errors"],"mappings":"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"}