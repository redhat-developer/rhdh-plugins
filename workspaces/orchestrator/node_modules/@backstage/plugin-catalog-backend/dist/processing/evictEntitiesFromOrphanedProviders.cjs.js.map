{"version":3,"file":"evictEntitiesFromOrphanedProviders.cjs.js","sources":["../../src/processing/evictEntitiesFromOrphanedProviders.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntityProvider } from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ProviderDatabase } from '../database/types';\n\nasync function getOrphanedEntityProviderNames({\n  db,\n  providers,\n}: {\n  db: ProviderDatabase;\n  providers: EntityProvider[];\n}): Promise<string[]> {\n  const dbProviderNames = await db.transaction(async tx =>\n    db.listReferenceSourceKeys(tx),\n  );\n\n  const providerNames = providers.map(p => p.getProviderName());\n\n  return dbProviderNames.filter(\n    dbProviderName => !providerNames.includes(dbProviderName),\n  );\n}\n\nasync function removeEntitiesForProvider({\n  db,\n  providerName,\n  logger,\n}: {\n  db: ProviderDatabase;\n  providerName: string;\n  logger: LoggerService;\n}) {\n  try {\n    await db.transaction(async tx => {\n      await db.replaceUnprocessedEntities(tx, {\n        sourceKey: providerName,\n        type: 'full',\n        items: [],\n      });\n    });\n    logger.info(`Removed entities for orphaned provider ${providerName}`);\n  } catch (e) {\n    logger.error(\n      `Failed to remove entities for orphaned provider ${providerName}`,\n      e,\n    );\n  }\n}\n\nexport async function evictEntitiesFromOrphanedProviders(options: {\n  db: ProviderDatabase;\n  providers: EntityProvider[];\n  logger: LoggerService;\n}) {\n  for (const providerName of await getOrphanedEntityProviderNames(options)) {\n    await removeEntitiesForProvider({\n      db: options.db,\n      providerName,\n      logger: options.logger,\n    });\n  }\n}\n"],"names":[],"mappings":";;AAoBA,eAAe,8BAAA,CAA+B;AAAA,EAC5C,EAAA;AAAA,EACA;AACF,CAAA,EAGsB;AACpB,EAAA,MAAM,eAAA,GAAkB,MAAM,EAAA,CAAG,WAAA;AAAA,IAAY,OAAM,EAAA,KACjD,EAAA,CAAG,uBAAA,CAAwB,EAAE;AAAA,GAC/B;AAEA,EAAA,MAAM,gBAAgB,SAAA,CAAU,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,iBAAiB,CAAA;AAE5D,EAAA,OAAO,eAAA,CAAgB,MAAA;AAAA,IACrB,CAAA,cAAA,KAAkB,CAAC,aAAA,CAAc,QAAA,CAAS,cAAc;AAAA,GAC1D;AACF;AAEA,eAAe,yBAAA,CAA0B;AAAA,EACvC,EAAA;AAAA,EACA,YAAA;AAAA,EACA;AACF,CAAA,EAIG;AACD,EAAA,IAAI;AACF,IAAA,MAAM,EAAA,CAAG,WAAA,CAAY,OAAM,EAAA,KAAM;AAC/B,MAAA,MAAM,EAAA,CAAG,2BAA2B,EAAA,EAAI;AAAA,QACtC,SAAA,EAAW,YAAA;AAAA,QACX,IAAA,EAAM,MAAA;AAAA,QACN,OAAO;AAAC,OACT,CAAA;AAAA,IACH,CAAC,CAAA;AACD,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,uCAAA,EAA0C,YAAY,CAAA,CAAE,CAAA;AAAA,EACtE,SAAS,CAAA,EAAG;AACV,IAAA,MAAA,CAAO,KAAA;AAAA,MACL,mDAAmD,YAAY,CAAA,CAAA;AAAA,MAC/D;AAAA,KACF;AAAA,EACF;AACF;AAEA,eAAsB,mCAAmC,OAAA,EAItD;AACD,EAAA,KAAA,MAAW,YAAA,IAAgB,MAAM,8BAAA,CAA+B,OAAO,CAAA,EAAG;AACxE,IAAA,MAAM,yBAAA,CAA0B;AAAA,MAC9B,IAAI,OAAA,CAAQ,EAAA;AAAA,MACZ,YAAA;AAAA,MACA,QAAQ,OAAA,CAAQ;AAAA,KACjB,CAAA;AAAA,EACH;AACF;;;;"}