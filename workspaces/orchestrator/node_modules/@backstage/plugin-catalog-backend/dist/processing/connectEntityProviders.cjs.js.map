{"version":3,"file":"connectEntityProviders.cjs.js","sources":["../../src/processing/connectEntityProviders.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityEnvelopeSchemaValidator,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { ProviderDatabase } from '../database/types';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n  EntityProviderRefreshOptions,\n  EntityProviderMutation,\n} from '@backstage/plugin-catalog-node';\n\nclass Connection implements EntityProviderConnection {\n  readonly validateEntityEnvelope = entityEnvelopeSchemaValidator();\n\n  constructor(\n    private readonly config: {\n      id: string;\n      providerDatabase: ProviderDatabase;\n    },\n  ) {}\n\n  async applyMutation(mutation: EntityProviderMutation): Promise<void> {\n    const db = this.config.providerDatabase;\n\n    if (mutation.type === 'full') {\n      this.check(mutation.entities.map(e => e.entity));\n      await db.transaction(async tx => {\n        await db.replaceUnprocessedEntities(tx, {\n          sourceKey: this.config.id,\n          type: 'full',\n          items: mutation.entities,\n        });\n      });\n    } else if (mutation.type === 'delta') {\n      this.check(mutation.added.map(e => e.entity));\n      this.check(\n        mutation.removed\n          .map(e => ('entity' in e ? e.entity : undefined))\n          .filter((e): e is Entity => Boolean(e)),\n      );\n      await db.transaction(async tx => {\n        await db.replaceUnprocessedEntities(tx, {\n          sourceKey: this.config.id,\n          type: 'delta',\n          added: mutation.added,\n          removed: mutation.removed.map(r =>\n            'entityRef' in r\n              ? r\n              : {\n                  entityRef: stringifyEntityRef(r.entity),\n                  locationKey: r.locationKey,\n                },\n          ),\n        });\n      });\n    }\n  }\n\n  async refresh(options: EntityProviderRefreshOptions): Promise<void> {\n    const db = this.config.providerDatabase;\n\n    await db.transaction(async (tx: any) => {\n      return db.refreshByRefreshKeys(tx, {\n        keys: options.keys,\n      });\n    });\n  }\n\n  private check(entities: Entity[]) {\n    for (const entity of entities) {\n      try {\n        this.validateEntityEnvelope(entity);\n      } catch (e) {\n        throw new TypeError(`Malformed entity envelope, ${e}`);\n      }\n    }\n  }\n}\n\nexport async function connectEntityProviders(\n  db: ProviderDatabase,\n  providers: EntityProvider[],\n) {\n  await Promise.all(\n    providers.map(async provider => {\n      const connection = new Connection({\n        id: provider.getProviderName(),\n        providerDatabase: db,\n      });\n      return provider.connect(connection);\n    }),\n  );\n}\n"],"names":["entityEnvelopeSchemaValidator","stringifyEntityRef"],"mappings":"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"}