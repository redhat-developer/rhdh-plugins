{"version":3,"file":"ConfigLocationEntityProvider.cjs.js","sources":["../../src/providers/ConfigLocationEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport path from 'path';\nimport { getEntityLocationRef } from '../processing/util';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { locationSpecToLocationEntity } from '../util/conversion';\n\nexport class ConfigLocationEntityProvider implements EntityProvider {\n  constructor(private readonly config: Config) {}\n\n  getProviderName(): string {\n    return 'ConfigLocationProvider';\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    const entities = this.getEntitiesFromConfig();\n    await connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n\n    if (this.config.subscribe) {\n      let currentKey = JSON.stringify(entities);\n\n      this.config.subscribe(() => {\n        const newEntities = this.getEntitiesFromConfig();\n        const newKey = JSON.stringify(newEntities);\n\n        if (currentKey !== newKey) {\n          currentKey = newKey;\n          connection.applyMutation({\n            type: 'full',\n            entities: newEntities,\n          });\n        }\n      });\n    }\n  }\n\n  private getEntitiesFromConfig() {\n    const locationConfigs =\n      this.config.getOptionalConfigArray('catalog.locations') ?? [];\n\n    return locationConfigs.map(location => {\n      const type = location.getString('type');\n      const target = location.getString('target');\n      const entity = locationSpecToLocationEntity({\n        location: {\n          type,\n          target: type === 'file' ? path.resolve(target) : target,\n        },\n      });\n      const locationKey = getEntityLocationRef(entity);\n      return { entity, locationKey };\n    });\n  }\n}\n"],"names":["locationSpecToLocationEntity","path","getEntityLocationRef"],"mappings":";;;;;;;;;;AAyBO,MAAM,4BAAA,CAAuD;AAAA,EAClE,YAA6B,MAAA,EAAgB;AAAhB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAAA,EAAiB;AAAA,EAE9C,eAAA,GAA0B;AACxB,IAAA,OAAO,wBAAA;AAAA,EACT;AAAA,EAEA,MAAM,QAAQ,UAAA,EAAqD;AACjE,IAAA,MAAM,QAAA,GAAW,KAAK,qBAAA,EAAsB;AAC5C,IAAA,MAAM,WAAW,aAAA,CAAc;AAAA,MAC7B,IAAA,EAAM,MAAA;AAAA,MACN;AAAA,KACD,CAAA;AAED,IAAA,IAAI,IAAA,CAAK,OAAO,SAAA,EAAW;AACzB,MAAA,IAAI,UAAA,GAAa,IAAA,CAAK,SAAA,CAAU,QAAQ,CAAA;AAExC,MAAA,IAAA,CAAK,MAAA,CAAO,UAAU,MAAM;AAC1B,QAAA,MAAM,WAAA,GAAc,KAAK,qBAAA,EAAsB;AAC/C,QAAA,MAAM,MAAA,GAAS,IAAA,CAAK,SAAA,CAAU,WAAW,CAAA;AAEzC,QAAA,IAAI,eAAe,MAAA,EAAQ;AACzB,UAAA,UAAA,GAAa,MAAA;AACb,UAAA,UAAA,CAAW,aAAA,CAAc;AAAA,YACvB,IAAA,EAAM,MAAA;AAAA,YACN,QAAA,EAAU;AAAA,WACX,CAAA;AAAA,QACH;AAAA,MACF,CAAC,CAAA;AAAA,IACH;AAAA,EACF;AAAA,EAEQ,qBAAA,GAAwB;AAC9B,IAAA,MAAM,kBACJ,IAAA,CAAK,MAAA,CAAO,sBAAA,CAAuB,mBAAmB,KAAK,EAAC;AAE9D,IAAA,OAAO,eAAA,CAAgB,IAAI,CAAA,QAAA,KAAY;AACrC,MAAA,MAAM,IAAA,GAAO,QAAA,CAAS,SAAA,CAAU,MAAM,CAAA;AACtC,MAAA,MAAM,MAAA,GAAS,QAAA,CAAS,SAAA,CAAU,QAAQ,CAAA;AAC1C,MAAA,MAAM,SAASA,uCAAA,CAA6B;AAAA,QAC1C,QAAA,EAAU;AAAA,UACR,IAAA;AAAA,UACA,QAAQ,IAAA,KAAS,MAAA,GAASC,qBAAA,CAAK,OAAA,CAAQ,MAAM,CAAA,GAAI;AAAA;AACnD,OACD,CAAA;AACD,MAAA,MAAM,WAAA,GAAcC,0BAAqB,MAAM,CAAA;AAC/C,MAAA,OAAO,EAAE,QAAQ,WAAA,EAAY;AAAA,IAC/B,CAAC,CAAA;AAAA,EACH;AACF;;;;"}