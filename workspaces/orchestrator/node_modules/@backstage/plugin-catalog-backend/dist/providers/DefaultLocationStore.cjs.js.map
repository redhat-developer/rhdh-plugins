{"version":3,"file":"DefaultLocationStore.cjs.js","sources":["../../src/providers/DefaultLocationStore.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from '@backstage/catalog-client';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { v4 as uuid } from 'uuid';\nimport {\n  DbLocationsRow,\n  DbRefreshStateRow,\n  DbSearchRow,\n} from '../database/tables';\nimport { getEntityLocationRef } from '../processing/util';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { locationSpecToLocationEntity } from '../util/conversion';\nimport { LocationInput, LocationStore } from '../service/types';\nimport {\n  ANNOTATION_ORIGIN_LOCATION,\n  CompoundEntityRef,\n  parseLocationRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\n\nexport class DefaultLocationStore implements LocationStore, EntityProvider {\n  private _connection: EntityProviderConnection | undefined;\n\n  constructor(private readonly db: Knex) {}\n\n  getProviderName(): string {\n    return 'DefaultLocationStore';\n  }\n\n  async createLocation(input: LocationInput): Promise<Location> {\n    const location = await this.db.transaction(async tx => {\n      // Attempt to find a previous location matching the input\n      const previousLocations = await this.locations(tx);\n      // TODO: when location id's are a compilation of input target we can remove this full\n      // lookup of locations first and just grab the by that instead.\n      const previousLocation = previousLocations.some(\n        l => input.type === l.type && input.target === l.target,\n      );\n      if (previousLocation) {\n        throw new ConflictError(\n          `Location ${input.type}:${input.target} already exists`,\n        );\n      }\n\n      const inner: DbLocationsRow = {\n        id: uuid(),\n        type: input.type,\n        target: input.target,\n      };\n\n      await tx<DbLocationsRow>('locations').insert(inner);\n\n      return inner;\n    });\n    const entity = locationSpecToLocationEntity({ location });\n    await this.connection.applyMutation({\n      type: 'delta',\n      added: [{ entity, locationKey: getEntityLocationRef(entity) }],\n      removed: [],\n    });\n\n    return location;\n  }\n\n  async listLocations(): Promise<Location[]> {\n    return await this.locations();\n  }\n\n  async getLocation(id: string): Promise<Location> {\n    const items = await this.db<DbLocationsRow>('locations')\n      .where({ id })\n      .select();\n\n    if (!items.length) {\n      throw new NotFoundError(`Found no location with ID ${id}`);\n    }\n    return items[0];\n  }\n\n  async deleteLocation(id: string): Promise<void> {\n    if (!this.connection) {\n      throw new Error('location store is not initialized');\n    }\n\n    const deleted = await this.db.transaction(async tx => {\n      const [location] = await tx<DbLocationsRow>('locations')\n        .where({ id })\n        .select();\n\n      if (!location) {\n        throw new NotFoundError(`Found no location with ID ${id}`);\n      }\n\n      await tx<DbLocationsRow>('locations').where({ id }).del();\n      return location;\n    });\n    const entity = locationSpecToLocationEntity({ location: deleted });\n    await this.connection.applyMutation({\n      type: 'delta',\n      added: [],\n      removed: [{ entity, locationKey: getEntityLocationRef(entity) }],\n    });\n  }\n\n  async getLocationByEntity(entityRef: CompoundEntityRef): Promise<Location> {\n    const entityRefString = stringifyEntityRef(entityRef);\n\n    const [entityRow] = await this.db<DbRefreshStateRow>('refresh_state')\n      .where({ entity_ref: entityRefString })\n      .select('entity_id')\n      .limit(1);\n    if (!entityRow) {\n      throw new NotFoundError(`found no entity for ref ${entityRefString}`);\n    }\n\n    const [searchRow] = await this.db<DbSearchRow>('search')\n      .where({\n        entity_id: entityRow.entity_id,\n        key: `metadata.annotations.${ANNOTATION_ORIGIN_LOCATION}`,\n      })\n      .select('original_value')\n      .limit(1);\n    if (!searchRow?.original_value) {\n      throw new NotFoundError(\n        `found no origin annotation for ref ${entityRefString}`,\n      );\n    }\n\n    const { type, target } = parseLocationRef(searchRow.original_value);\n    const [locationRow] = await this.db<DbLocationsRow>('locations')\n      .where({ type, target })\n      .select()\n      .limit(1);\n\n    if (!locationRow) {\n      throw new NotFoundError(\n        `Found no location with type ${type} and target ${target}`,\n      );\n    }\n\n    return locationRow;\n  }\n\n  private get connection(): EntityProviderConnection {\n    if (!this._connection) {\n      throw new Error('location store is not initialized');\n    }\n\n    return this._connection;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this._connection = connection;\n\n    const locations = await this.locations();\n\n    const entities = locations.map(location => {\n      const entity = locationSpecToLocationEntity({ location });\n      return { entity, locationKey: getEntityLocationRef(entity) };\n    });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n  }\n\n  private async locations(dbOrTx: Knex.Transaction | Knex = this.db) {\n    const locations = await dbOrTx<DbLocationsRow>('locations').select();\n    return (\n      locations\n        // TODO(blam): We should create a mutation to remove this location for everyone\n        // eventually when it's all done and dusted\n        .filter(({ type }) => type !== 'bootstrap')\n        .map(item => ({\n          id: item.id,\n          target: item.target,\n          type: item.type,\n        }))\n    );\n  }\n}\n"],"names":["ConflictError","uuid","locationSpecToLocationEntity","getEntityLocationRef","NotFoundError","stringifyEntityRef","ANNOTATION_ORIGIN_LOCATION","parseLocationRef"],"mappings":";;;;;;;;AAuCO,MAAM,oBAAA,CAA8D;AAAA,EAGzE,YAA6B,EAAA,EAAU;AAAV,IAAA,IAAA,CAAA,EAAA,GAAA,EAAA;AAAA,EAAW;AAAA,EAFhC,WAAA;AAAA,EAIR,eAAA,GAA0B;AACxB,IAAA,OAAO,sBAAA;AAAA,EACT;AAAA,EAEA,MAAM,eAAe,KAAA,EAAyC;AAC5D,IAAA,MAAM,WAAW,MAAM,IAAA,CAAK,EAAA,CAAG,WAAA,CAAY,OAAM,EAAA,KAAM;AAErD,MAAA,MAAM,iBAAA,GAAoB,MAAM,IAAA,CAAK,SAAA,CAAU,EAAE,CAAA;AAGjD,MAAA,MAAM,mBAAmB,iBAAA,CAAkB,IAAA;AAAA,QACzC,OAAK,KAAA,CAAM,IAAA,KAAS,EAAE,IAAA,IAAQ,KAAA,CAAM,WAAW,CAAA,CAAE;AAAA,OACnD;AACA,MAAA,IAAI,gBAAA,EAAkB;AACpB,QAAA,MAAM,IAAIA,oBAAA;AAAA,UACR,CAAA,SAAA,EAAY,KAAA,CAAM,IAAI,CAAA,CAAA,EAAI,MAAM,MAAM,CAAA,eAAA;AAAA,SACxC;AAAA,MACF;AAEA,MAAA,MAAM,KAAA,GAAwB;AAAA,QAC5B,IAAIC,OAAA,EAAK;AAAA,QACT,MAAM,KAAA,CAAM,IAAA;AAAA,QACZ,QAAQ,KAAA,CAAM;AAAA,OAChB;AAEA,MAAA,MAAM,EAAA,CAAmB,WAAW,CAAA,CAAE,MAAA,CAAO,KAAK,CAAA;AAElD,MAAA,OAAO,KAAA;AAAA,IACT,CAAC,CAAA;AACD,IAAA,MAAM,MAAA,GAASC,uCAAA,CAA6B,EAAE,QAAA,EAAU,CAAA;AACxD,IAAA,MAAM,IAAA,CAAK,WAAW,aAAA,CAAc;AAAA,MAClC,IAAA,EAAM,OAAA;AAAA,MACN,KAAA,EAAO,CAAC,EAAE,MAAA,EAAQ,aAAaC,yBAAA,CAAqB,MAAM,GAAG,CAAA;AAAA,MAC7D,SAAS;AAAC,KACX,CAAA;AAED,IAAA,OAAO,QAAA;AAAA,EACT;AAAA,EAEA,MAAM,aAAA,GAAqC;AACzC,IAAA,OAAO,MAAM,KAAK,SAAA,EAAU;AAAA,EAC9B;AAAA,EAEA,MAAM,YAAY,EAAA,EAA+B;AAC/C,IAAA,MAAM,KAAA,GAAQ,MAAM,IAAA,CAAK,EAAA,CAAmB,WAAW,CAAA,CACpD,KAAA,CAAM,EAAE,EAAA,EAAI,CAAA,CACZ,MAAA,EAAO;AAEV,IAAA,IAAI,CAAC,MAAM,MAAA,EAAQ;AACjB,MAAA,MAAM,IAAIC,oBAAA,CAAc,CAAA,0BAAA,EAA6B,EAAE,CAAA,CAAE,CAAA;AAAA,IAC3D;AACA,IAAA,OAAO,MAAM,CAAC,CAAA;AAAA,EAChB;AAAA,EAEA,MAAM,eAAe,EAAA,EAA2B;AAC9C,IAAA,IAAI,CAAC,KAAK,UAAA,EAAY;AACpB,MAAA,MAAM,IAAI,MAAM,mCAAmC,CAAA;AAAA,IACrD;AAEA,IAAA,MAAM,UAAU,MAAM,IAAA,CAAK,EAAA,CAAG,WAAA,CAAY,OAAM,EAAA,KAAM;AACpD,MAAA,MAAM,CAAC,QAAQ,CAAA,GAAI,MAAM,EAAA,CAAmB,WAAW,CAAA,CACpD,KAAA,CAAM,EAAE,EAAA,EAAI,CAAA,CACZ,MAAA,EAAO;AAEV,MAAA,IAAI,CAAC,QAAA,EAAU;AACb,QAAA,MAAM,IAAIA,oBAAA,CAAc,CAAA,0BAAA,EAA6B,EAAE,CAAA,CAAE,CAAA;AAAA,MAC3D;AAEA,MAAA,MAAM,EAAA,CAAmB,WAAW,CAAA,CAAE,KAAA,CAAM,EAAE,EAAA,EAAI,EAAE,GAAA,EAAI;AACxD,MAAA,OAAO,QAAA;AAAA,IACT,CAAC,CAAA;AACD,IAAA,MAAM,MAAA,GAASF,uCAAA,CAA6B,EAAE,QAAA,EAAU,SAAS,CAAA;AACjE,IAAA,MAAM,IAAA,CAAK,WAAW,aAAA,CAAc;AAAA,MAClC,IAAA,EAAM,OAAA;AAAA,MACN,OAAO,EAAC;AAAA,MACR,OAAA,EAAS,CAAC,EAAE,MAAA,EAAQ,aAAaC,yBAAA,CAAqB,MAAM,GAAG;AAAA,KAChE,CAAA;AAAA,EACH;AAAA,EAEA,MAAM,oBAAoB,SAAA,EAAiD;AACzE,IAAA,MAAM,eAAA,GAAkBE,gCAAmB,SAAS,CAAA;AAEpD,IAAA,MAAM,CAAC,SAAS,CAAA,GAAI,MAAM,IAAA,CAAK,EAAA,CAAsB,eAAe,CAAA,CACjE,KAAA,CAAM,EAAE,UAAA,EAAY,iBAAiB,CAAA,CACrC,OAAO,WAAW,CAAA,CAClB,MAAM,CAAC,CAAA;AACV,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAID,oBAAA,CAAc,CAAA,wBAAA,EAA2B,eAAe,CAAA,CAAE,CAAA;AAAA,IACtE;AAEA,IAAA,MAAM,CAAC,SAAS,CAAA,GAAI,MAAM,KAAK,EAAA,CAAgB,QAAQ,EACpD,KAAA,CAAM;AAAA,MACL,WAAW,SAAA,CAAU,SAAA;AAAA,MACrB,GAAA,EAAK,wBAAwBE,uCAA0B,CAAA;AAAA,KACxD,CAAA,CACA,MAAA,CAAO,gBAAgB,CAAA,CACvB,MAAM,CAAC,CAAA;AACV,IAAA,IAAI,CAAC,WAAW,cAAA,EAAgB;AAC9B,MAAA,MAAM,IAAIF,oBAAA;AAAA,QACR,sCAAsC,eAAe,CAAA;AAAA,OACvD;AAAA,IACF;AAEA,IAAA,MAAM,EAAE,IAAA,EAAM,MAAA,EAAO,GAAIG,6BAAA,CAAiB,UAAU,cAAc,CAAA;AAClE,IAAA,MAAM,CAAC,WAAW,CAAA,GAAI,MAAM,IAAA,CAAK,GAAmB,WAAW,CAAA,CAC5D,KAAA,CAAM,EAAE,MAAM,MAAA,EAAQ,EACtB,MAAA,EAAO,CACP,MAAM,CAAC,CAAA;AAEV,IAAA,IAAI,CAAC,WAAA,EAAa;AAChB,MAAA,MAAM,IAAIH,oBAAA;AAAA,QACR,CAAA,4BAAA,EAA+B,IAAI,CAAA,YAAA,EAAe,MAAM,CAAA;AAAA,OAC1D;AAAA,IACF;AAEA,IAAA,OAAO,WAAA;AAAA,EACT;AAAA,EAEA,IAAY,UAAA,GAAuC;AACjD,IAAA,IAAI,CAAC,KAAK,WAAA,EAAa;AACrB,MAAA,MAAM,IAAI,MAAM,mCAAmC,CAAA;AAAA,IACrD;AAEA,IAAA,OAAO,IAAA,CAAK,WAAA;AAAA,EACd;AAAA,EAEA,MAAM,QAAQ,UAAA,EAAqD;AACjE,IAAA,IAAA,CAAK,WAAA,GAAc,UAAA;AAEnB,IAAA,MAAM,SAAA,GAAY,MAAM,IAAA,CAAK,SAAA,EAAU;AAEvC,IAAA,MAAM,QAAA,GAAW,SAAA,CAAU,GAAA,CAAI,CAAA,QAAA,KAAY;AACzC,MAAA,MAAM,MAAA,GAASF,uCAAA,CAA6B,EAAE,QAAA,EAAU,CAAA;AACxD,MAAA,OAAO,EAAE,MAAA,EAAQ,WAAA,EAAaC,yBAAA,CAAqB,MAAM,CAAA,EAAE;AAAA,IAC7D,CAAC,CAAA;AAED,IAAA,MAAM,IAAA,CAAK,WAAW,aAAA,CAAc;AAAA,MAClC,IAAA,EAAM,MAAA;AAAA,MACN;AAAA,KACD,CAAA;AAAA,EACH;AAAA,EAEA,MAAc,SAAA,CAAU,MAAA,GAAkC,IAAA,CAAK,EAAA,EAAI;AACjE,IAAA,MAAM,SAAA,GAAY,MAAM,MAAA,CAAuB,WAAW,EAAE,MAAA,EAAO;AACnE,IAAA,OACE,SAAA,CAGG,MAAA,CAAO,CAAC,EAAE,IAAA,OAAW,IAAA,KAAS,WAAW,CAAA,CACzC,GAAA,CAAI,CAAA,IAAA,MAAS;AAAA,MACZ,IAAI,IAAA,CAAK,EAAA;AAAA,MACT,QAAQ,IAAA,CAAK,MAAA;AAAA,MACb,MAAM,IAAA,CAAK;AAAA,KACb,CAAE,CAAA;AAAA,EAER;AACF;;;;"}