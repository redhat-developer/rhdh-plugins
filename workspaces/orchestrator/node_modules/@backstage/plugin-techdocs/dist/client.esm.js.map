{"version":3,"file":"client.esm.js","sources":["../src/client.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DiscoveryApi,\n  FetchApi,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport { NotFoundError, ResponseError } from '@backstage/errors';\nimport {\n  SyncResult,\n  TechDocsApi,\n  TechDocsEntityMetadata,\n  TechDocsMetadata,\n  TechDocsStorageApi,\n} from '@backstage/plugin-techdocs-react';\nimport { fetchEventSource } from '@microsoft/fetch-event-source';\n\n/**\n * API to talk to `techdocs-backend`.\n *\n * @public\n */\nexport class TechDocsClient implements TechDocsApi {\n  public configApi: Config;\n  public discoveryApi: DiscoveryApi;\n  private fetchApi: FetchApi;\n\n  constructor(options: {\n    configApi: Config;\n    discoveryApi: DiscoveryApi;\n    fetchApi: FetchApi;\n  }) {\n    this.configApi = options.configApi;\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi;\n  }\n\n  public async getCookie(): Promise<{ expiresAt: string }> {\n    const apiOrigin = await this.getApiOrigin();\n    const requestUrl = `${apiOrigin}/cookie`;\n    const response = await this.fetchApi.fetch(`${requestUrl}`, {\n      credentials: 'include',\n    });\n    if (!response.ok) {\n      throw await ResponseError.fromResponse(response);\n    }\n    return await response.json();\n  }\n\n  async getApiOrigin(): Promise<string> {\n    return await this.discoveryApi.getBaseUrl('techdocs');\n  }\n\n  /**\n   * Retrieve TechDocs metadata.\n   *\n   * When docs are built, we generate a techdocs_metadata.json and store it along with the generated\n   * static files. It includes necessary data about the docs site. This method requests techdocs-backend\n   * which retrieves the TechDocs metadata.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   */\n  async getTechDocsMetadata(\n    entityId: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const requestUrl = `${apiOrigin}/metadata/techdocs/${namespace}/${kind}/${name}`;\n    const request = await this.fetchApi.fetch(`${requestUrl}`);\n    if (!request.ok) {\n      throw await ResponseError.fromResponse(request);\n    }\n\n    return await request.json();\n  }\n\n  /**\n   * Retrieve metadata about an entity.\n   *\n   * This method requests techdocs-backend which uses the catalog APIs to respond with filtered\n   * information required here.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   */\n  async getEntityMetadata(\n    entityId: CompoundEntityRef,\n  ): Promise<TechDocsEntityMetadata> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const requestUrl = `${apiOrigin}/metadata/entity/${namespace}/${kind}/${name}`;\n\n    const request = await this.fetchApi.fetch(`${requestUrl}`);\n    if (!request.ok) {\n      throw await ResponseError.fromResponse(request);\n    }\n\n    return await request.json();\n  }\n}\n\n/**\n * API which talks to TechDocs storage to fetch files to render.\n *\n * @public\n */\nexport class TechDocsStorageClient implements TechDocsStorageApi {\n  public configApi: Config;\n  public discoveryApi: DiscoveryApi;\n  private fetchApi: FetchApi;\n\n  constructor(options: {\n    configApi: Config;\n    discoveryApi: DiscoveryApi;\n    fetchApi: FetchApi;\n    /** @deprecated identityApi is not needed any more */\n    identityApi?: IdentityApi;\n  }) {\n    this.configApi = options.configApi;\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi;\n  }\n\n  async getApiOrigin(): Promise<string> {\n    return await this.discoveryApi.getBaseUrl('techdocs');\n  }\n\n  async getStorageUrl(): Promise<string> {\n    return (\n      this.configApi.getOptionalString('techdocs.storageUrl') ??\n      `${await this.discoveryApi.getBaseUrl('techdocs')}/static/docs`\n    );\n  }\n\n  async getBuilder(): Promise<string> {\n    return this.configApi.getOptionalString('techdocs.builder') || 'local';\n  }\n\n  /**\n   * Fetch HTML content as text for an individual docs page in an entity's docs site.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   * @param path - The unique path to an individual docs page e.g. overview/what-is-new\n   * @returns HTML content of the docs page as string\n   * @throws Throws error when the page is not found.\n   */\n  async getEntityDocs(\n    entityId: CompoundEntityRef,\n    path: string,\n  ): Promise<string> {\n    const { kind, namespace, name } = entityId;\n\n    const storageUrl = await this.getStorageUrl();\n    const url = `${storageUrl}/${namespace}/${kind}/${name}/${path}`;\n\n    const request = await this.fetchApi.fetch(\n      `${url.endsWith('/') ? url : `${url}/`}index.html`,\n    );\n\n    let errorMessage = '';\n    switch (request.status) {\n      case 404:\n        errorMessage = 'Page not found. ';\n        // path is empty for the home page of an entity's docs site\n        if (!path) {\n          errorMessage +=\n            'This could be because there is no index.md file in the root of the docs directory of this repository.';\n        }\n        throw new NotFoundError(errorMessage);\n      case 500:\n        errorMessage =\n          'Could not generate documentation or an error in the TechDocs backend. ';\n        throw new Error(errorMessage);\n      default:\n        // Do nothing\n        break;\n    }\n\n    return request.text();\n  }\n\n  /**\n   * Check if docs are on the latest version and trigger rebuild if not\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   * @param logHandler - Callback to receive log messages from the build process\n   * @returns Whether documents are currently synchronized to newest version\n   * @throws Throws error on error from sync endpoint in TechDocs Backend\n   */\n  async syncEntityDocs(\n    entityId: CompoundEntityRef,\n    logHandler: (line: string) => void = () => {},\n  ): Promise<SyncResult> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const url = `${apiOrigin}/sync/${namespace}/${kind}/${name}`;\n\n    return new Promise((resolve, reject) => {\n      const ctrl = new AbortController();\n      fetchEventSource(url, {\n        fetch: this.fetchApi.fetch,\n        signal: ctrl.signal,\n        onmessage(e: any) {\n          if (e.event === 'log') {\n            if (e.data) {\n              logHandler(JSON.parse(e.data));\n            }\n          } else if (e.event === 'finish') {\n            let updated: boolean = false;\n            if (e.data) {\n              ({ updated } = JSON.parse(e.data));\n            }\n            resolve(updated ? 'updated' : 'cached');\n          } else if (e.event === 'error') {\n            reject(new Error(e.data));\n          }\n        },\n        onerror(err) {\n          ctrl.abort();\n          reject(err);\n          throw err; // rethrow to stop the operation\n        },\n      });\n    });\n  }\n\n  async getBaseUrl(\n    oldBaseUrl: string,\n    entityId: CompoundEntityRef,\n    path: string,\n  ): Promise<string> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const newBaseUrl = `${apiOrigin}/static/docs/${namespace}/${kind}/${name}/${path}`;\n\n    return new URL(\n      oldBaseUrl,\n      newBaseUrl.endsWith('/') ? newBaseUrl : `${newBaseUrl}/`,\n    ).toString();\n  }\n}\n"],"names":[],"mappings":"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"}