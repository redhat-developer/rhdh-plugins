{"version":3,"file":"EntityListDocsGrid.esm.js","sources":["../../../../src/home/components/Grids/EntityListDocsGrid.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocsCardGrid } from './DocsCardGrid';\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  CodeSnippet,\n  Content,\n  ContentHeader,\n  Link,\n  Progress,\n  WarningPanel,\n} from '@backstage/core-components';\nimport {\n  useEntityList,\n  useEntityOwnership,\n} from '@backstage/plugin-catalog-react';\nimport Typography from '@material-ui/core/Typography';\nimport { ReactNode } from 'react';\n\n/**\n * Props for {@link EntityListDocsGrid}\n *\n * @public\n */\nexport type DocsGroupConfig = {\n  title: ReactNode;\n  filterPredicate: ((entity: Entity) => boolean) | string;\n};\n\n/**\n * Props for {@link EntityListDocsGrid}\n *\n * @public\n */\nexport type EntityListDocsGridPageProps = {\n  groups?: DocsGroupConfig[];\n};\n\nconst allEntitiesGroup: DocsGroupConfig = {\n  title: 'All Documentation',\n  filterPredicate: () => true,\n};\n\nconst EntityListDocsGridGroup = (props: {\n  group: DocsGroupConfig;\n  entities: Entity[];\n}) => {\n  const { entities, group } = props;\n  const { loading: loadingOwnership, isOwnedEntity } = useEntityOwnership();\n\n  const shownEntities = entities.filter(entity => {\n    if (group.filterPredicate === 'ownedByUser') {\n      if (loadingOwnership) {\n        return false;\n      }\n      return isOwnedEntity(entity);\n    }\n\n    return (\n      typeof group.filterPredicate === 'function' &&\n      group.filterPredicate(entity)\n    );\n  });\n\n  const titleComponent: ReactNode = (() => {\n    return typeof group.title === 'string' ? (\n      <ContentHeader title={group.title} />\n    ) : (\n      group.title\n    );\n  })();\n\n  if (shownEntities.length === 0) {\n    return null;\n  }\n\n  return (\n    <Content>\n      {titleComponent}\n      <DocsCardGrid entities={shownEntities} />\n    </Content>\n  );\n};\n\n/**\n * Component responsible to get entities from entity list context and pass down to DocsCardGrid\n *\n * @public\n */\nexport const EntityListDocsGrid = (props: EntityListDocsGridPageProps) => {\n  const { loading, error, entities } = useEntityList();\n\n  if (error) {\n    return (\n      <WarningPanel\n        severity=\"error\"\n        title=\"Could not load available documentation.\"\n      >\n        <CodeSnippet language=\"text\" text={error.toString()} />\n      </WarningPanel>\n    );\n  }\n\n  if (loading) {\n    return <Progress />;\n  }\n\n  if (entities.length === 0) {\n    return (\n      <div data-testid=\"doc-not-found\">\n        <Typography variant=\"body2\">\n          No documentation found that match your filter. Learn more about{' '}\n          <Link to=\"https://backstage.io/docs/features/techdocs/creating-and-publishing\">\n            publishing documentation\n          </Link>\n          .\n        </Typography>\n      </div>\n    );\n  }\n\n  entities.sort((a, b) =>\n    (a.metadata.title ?? a.metadata.name).localeCompare(\n      b.metadata.title ?? b.metadata.name,\n    ),\n  );\n\n  return (\n    <Content>\n      {(props.groups || [allEntitiesGroup]).map((group, index: number) => (\n        <EntityListDocsGridGroup\n          entities={entities}\n          group={group}\n          key={`${group.title}-${index}`}\n        />\n      ))}\n    </Content>\n  );\n};\n"],"names":[],"mappings":"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"}