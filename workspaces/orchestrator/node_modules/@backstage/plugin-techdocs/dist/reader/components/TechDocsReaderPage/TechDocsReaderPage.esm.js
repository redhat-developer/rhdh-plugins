import { jsx, jsxs } from 'react/jsx-runtime';
import { useMemo, useCallback, useEffect, Children } from 'react';
import { useOutlet, useNavigate } from 'react-router-dom';
import { Page, Progress } from '@backstage/core-components';
import { buildTechDocsURL, TECHDOCS_ADDONS_WRAPPER_KEY, TECHDOCS_ADDONS_KEY, TechDocsReaderPageProvider } from '@backstage/plugin-techdocs-react';
import { TECHDOCS_EXTERNAL_ANNOTATION } from '@backstage/plugin-techdocs-common';
import useAsync from 'react-use/esm/useAsync';
import { TechDocsReaderPageContent } from '../TechDocsReaderPageContent/TechDocsReaderPageContent.esm.js';
import { TechDocsReaderPageHeader } from '../TechDocsReaderPageHeader/TechDocsReaderPageHeader.esm.js';
import { TechDocsReaderPageSubheader } from '../TechDocsReaderPageSubheader/TechDocsReaderPageSubheader.esm.js';
import { rootDocsRouteRef } from '../../../routes.esm.js';
import { useRouteRefParams, useApi, useRouteRef, getComponentData } from '@backstage/core-plugin-api';
import { CookieAuthRefreshProvider } from '@backstage/plugin-auth-react';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import { styled, useTheme, createTheme, ThemeProvider } from '@material-ui/core/styles';

const TechDocsReaderLayout = (props) => {
  const { withSearch, withHeader = true } = props;
  return /* @__PURE__ */ jsxs(Page, { themeId: "documentation", children: [
    withHeader && /* @__PURE__ */ jsx(TechDocsReaderPageHeader, {}),
    /* @__PURE__ */ jsx(TechDocsReaderPageSubheader, {}),
    /* @__PURE__ */ jsx(TechDocsReaderPageContent, { withSearch })
  ] });
};
const StyledPage = styled(Page)({
  height: "inherit",
  overflowY: "visible"
});
const TechDocsReaderPage = (props) => {
  const currentTheme = useTheme();
  const readerPageTheme = useMemo(
    () => createTheme({
      ...currentTheme,
      ...props.overrideThemeOptions || {}
    }),
    [currentTheme, props.overrideThemeOptions]
  );
  const { kind, name, namespace } = useRouteRefParams(rootDocsRouteRef);
  const { children, entityRef = { kind, name, namespace } } = props;
  const outlet = useOutlet();
  const catalogApi = useApi(catalogApiRef);
  const navigate = useNavigate();
  const viewTechdocLink = useRouteRef(rootDocsRouteRef);
  const memoizedEntityRef = useMemo(
    () => ({
      kind: entityRef.kind,
      name: entityRef.name,
      namespace: entityRef.namespace
    }),
    [entityRef.kind, entityRef.name, entityRef.namespace]
  );
  const externalEntityTechDocsUrl = useAsync(async () => {
    try {
      const catalogEntity = await catalogApi.getEntityByRef(memoizedEntityRef);
      if (catalogEntity?.metadata?.annotations?.[TECHDOCS_EXTERNAL_ANNOTATION]) {
        return buildTechDocsURL(catalogEntity, viewTechdocLink);
      }
    } catch (error) {
    }
    return void 0;
  }, [memoizedEntityRef, catalogApi, viewTechdocLink]);
  const handleNavigation = useCallback(
    (url) => {
      navigate(url, { replace: true });
    },
    [navigate]
  );
  useEffect(() => {
    if (!externalEntityTechDocsUrl.loading && externalEntityTechDocsUrl.value) {
      handleNavigation(externalEntityTechDocsUrl.value);
    }
  }, [
    externalEntityTechDocsUrl.loading,
    externalEntityTechDocsUrl.value,
    handleNavigation
  ]);
  const page = useMemo(() => {
    if (children) {
      return null;
    }
    const childrenList = outlet ? Children.toArray(outlet.props.children) : [];
    const grandChildren = childrenList.flatMap(
      (child) => child?.props?.children ?? []
    );
    return grandChildren.find(
      (grandChild) => !getComponentData(grandChild, TECHDOCS_ADDONS_WRAPPER_KEY) && !getComponentData(grandChild, TECHDOCS_ADDONS_KEY)
    );
  }, [children, outlet]);
  if (externalEntityTechDocsUrl.loading || externalEntityTechDocsUrl.value) {
    return /* @__PURE__ */ jsx(Progress, {});
  }
  if (!children) {
    return /* @__PURE__ */ jsx(ThemeProvider, { theme: readerPageTheme, children: /* @__PURE__ */ jsx(CookieAuthRefreshProvider, { pluginId: "techdocs", children: /* @__PURE__ */ jsx(TechDocsReaderPageProvider, { entityRef: memoizedEntityRef, children: page || /* @__PURE__ */ jsx(TechDocsReaderLayout, {}) }) }) });
  }
  return /* @__PURE__ */ jsx(ThemeProvider, { theme: readerPageTheme, children: /* @__PURE__ */ jsx(CookieAuthRefreshProvider, { pluginId: "techdocs", children: /* @__PURE__ */ jsx(TechDocsReaderPageProvider, { entityRef: memoizedEntityRef, children: ({ metadata, entityMetadata, onReady }) => /* @__PURE__ */ jsx(
    StyledPage,
    {
      themeId: "documentation",
      className: "techdocs-reader-page",
      children: children instanceof Function ? children({
        entityRef: memoizedEntityRef,
        techdocsMetadataValue: metadata.value,
        entityMetadataValue: entityMetadata.value,
        onReady
      }) : children
    }
  ) }) }) });
};

export { TechDocsReaderLayout, TechDocsReaderPage };
//# sourceMappingURL=TechDocsReaderPage.esm.js.map
