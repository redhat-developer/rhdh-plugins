{"version":3,"file":"useNavigateUrl.esm.js","sources":["../../../../src/reader/components/TechDocsReaderPageContent/useNavigateUrl.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\nimport { useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n/**\n * Resolve a URL to a relative URL given a base URL that may or may not include subpaths.\n * @param url - URL to parse into a relative url based on the baseUrl.\n * @param baseUrl - Application base url, where the application is currently hosted.\n * @returns relative path without any subpaths from website config.\n */\nexport function resolveUrlToRelative(url: string, baseUrl: string) {\n  const parsedAppUrl = new URL(baseUrl);\n  const appUrlPath = `${parsedAppUrl.origin}${parsedAppUrl.pathname.replace(\n    /\\/$/,\n    '',\n  )}`;\n\n  const relativeUrl = url\n    .replace(appUrlPath, '')\n    // Remove any leading slashes.\n    .replace(/^\\/+/, '');\n  const parsedUrl = new URL(`http://localhost/${relativeUrl}`);\n  return `${parsedUrl.pathname}${parsedUrl.search}${parsedUrl.hash}`;\n}\n\n/**\n * A helper hook that allows for full internal website urls to be processed through the navigate\n *  hook provided by `react-router-dom`.\n *\n * NOTE: This does not support routing to external URLs. That should be done with a `Link` or `a`\n *  element instead, or just `window.location.href`.\n *\n * TODO: Update this to use `useRouteRef` instead of `useApi`.\n *\n * @returns Navigation function that is a wrapper over `react-router-dom`'s\n *  to support passing full URLs for navigation.\n *\n * @public\n */\nexport function useNavigateUrl() {\n  // useRef prevents useNavigate from causing unnecessary re-renders\n  const navigate = useRef(useNavigate());\n  const configApi = useApi(configApiRef);\n  const appBaseUrl = configApi.getOptionalString('app.baseUrl');\n  const navigateFn = useCallback(\n    (to: string) => {\n      let url = to;\n      /**\n       * This should always be true when running the application, this just allows\n       *    test cases that do not have the configApi set up to run still.\n       */\n      if (appBaseUrl) {\n        try {\n          url = resolveUrlToRelative(to, appBaseUrl);\n        } catch (err) {\n          // URL passed in was relative.\n        }\n      }\n      navigate.current(url);\n    },\n    [appBaseUrl],\n  );\n  return navigateFn;\n}\n"],"names":[],"mappings":";;;;AAyBO,SAAS,oBAAA,CAAqB,KAAa,OAAA,EAAiB;AACjE,EAAA,MAAM,YAAA,GAAe,IAAI,GAAA,CAAI,OAAO,CAAA;AACpC,EAAA,MAAM,aAAa,CAAA,EAAG,YAAA,CAAa,MAAM,CAAA,EAAG,aAAa,QAAA,CAAS,OAAA;AAAA,IAChE,KAAA;AAAA,IACA;AAAA,GACD,CAAA,CAAA;AAED,EAAA,MAAM,WAAA,GAAc,IACjB,OAAA,CAAQ,UAAA,EAAY,EAAE,CAAA,CAEtB,OAAA,CAAQ,QAAQ,EAAE,CAAA;AACrB,EAAA,MAAM,SAAA,GAAY,IAAI,GAAA,CAAI,CAAA,iBAAA,EAAoB,WAAW,CAAA,CAAE,CAAA;AAC3D,EAAA,OAAO,CAAA,EAAG,UAAU,QAAQ,CAAA,EAAG,UAAU,MAAM,CAAA,EAAG,UAAU,IAAI,CAAA,CAAA;AAClE;AAgBO,SAAS,cAAA,GAAiB;AAE/B,EAAA,MAAM,QAAA,GAAW,MAAA,CAAO,WAAA,EAAa,CAAA;AACrC,EAAA,MAAM,SAAA,GAAY,OAAO,YAAY,CAAA;AACrC,EAAA,MAAM,UAAA,GAAa,SAAA,CAAU,iBAAA,CAAkB,aAAa,CAAA;AAC5D,EAAA,MAAM,UAAA,GAAa,WAAA;AAAA,IACjB,CAAC,EAAA,KAAe;AACd,MAAA,IAAI,GAAA,GAAM,EAAA;AAKV,MAAA,IAAI,UAAA,EAAY;AACd,QAAA,IAAI;AACF,UAAA,GAAA,GAAM,oBAAA,CAAqB,IAAI,UAAU,CAAA;AAAA,QAC3C,SAAS,GAAA,EAAK;AAAA,QAEd;AAAA,MACF;AACA,MAAA,QAAA,CAAS,QAAQ,GAAG,CAAA;AAAA,IACtB,CAAA;AAAA,IACA,CAAC,UAAU;AAAA,GACb;AACA,EAAA,OAAO,UAAA;AACT;;;;"}