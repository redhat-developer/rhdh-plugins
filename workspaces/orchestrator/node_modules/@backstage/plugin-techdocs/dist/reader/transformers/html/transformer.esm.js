import DOMPurify from 'dompurify';
import { useCallback, useMemo } from 'react';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import { removeUnsafeLinks } from './hooks/links.esm.js';
import { removeUnsafeIframes } from './hooks/iframes.esm.js';
import { removeUnsafeMetaTags } from './hooks/metatags.esm.js';
import { removeRestrictedAttributes } from './hooks/attributes.esm.js';

const useSanitizerConfig = () => {
  const configApi = useApi(configApiRef);
  return useMemo(() => {
    return configApi.getOptionalConfig("techdocs.sanitizer");
  }, [configApi]);
};
const useSanitizerTransformer = () => {
  const config = useSanitizerConfig();
  return useCallback(
    async (dom) => {
      const hosts = config?.getOptionalStringArray("allowedIframeHosts");
      DOMPurify.addHook("beforeSanitizeElements", removeUnsafeLinks);
      const tags = ["link", "meta"];
      if (hosts) {
        tags.push("iframe");
        DOMPurify.addHook("beforeSanitizeElements", removeUnsafeIframes(hosts));
      }
      DOMPurify.addHook("uponSanitizeElement", removeUnsafeMetaTags);
      DOMPurify.addHook("uponSanitizeAttribute", removeRestrictedAttributes);
      const tagNameCheck = config?.getOptionalString(
        "allowedCustomElementTagNameRegExp"
      );
      const attributeNameCheck = config?.getOptionalString(
        "allowedCustomElementAttributeNameRegExp"
      );
      const additionalAllowedURIProtocols = config?.getOptionalStringArray("additionalAllowedURIProtocols") || [];
      const allowedURIProtocols = [
        "callto",
        "cid",
        "ftp",
        "ftps",
        "http",
        "https",
        "mailto",
        "matrix",
        "sms",
        "tel",
        "xmpp",
        ...additionalAllowedURIProtocols
      ].filter(Boolean);
      const allowedURIRegExp = new RegExp(
        // This regex is not exposed by DOMPurify, so we need to define it ourselves.
        // It is possible for this to drift from the default in future versions of DOMPurify.
        // See: https://raw.githubusercontent.com/cure53/DOMPurify/master/src/regexp.ts
        `^(?:${allowedURIProtocols.join(
          "|"
        )}:|[^a-z]|[a-z+.-]+(?:[^a-z+.\\-:]|$))`,
        "i"
      );
      return DOMPurify.sanitize(dom.outerHTML, {
        ADD_TAGS: tags,
        FORBID_TAGS: ["style"],
        ADD_ATTR: ["http-equiv", "content", "dominant-baseline"],
        WHOLE_DOCUMENT: true,
        RETURN_DOM: true,
        ALLOWED_URI_REGEXP: allowedURIRegExp,
        CUSTOM_ELEMENT_HANDLING: {
          tagNameCheck: tagNameCheck ? new RegExp(tagNameCheck) : void 0,
          attributeNameCheck: attributeNameCheck ? new RegExp(attributeNameCheck) : void 0
        }
      });
    },
    [config]
  );
};

export { useSanitizerTransformer };
//# sourceMappingURL=transformer.esm.js.map
