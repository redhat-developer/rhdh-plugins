{"version":3,"file":"transformer.esm.js","sources":["../../../../src/reader/transformers/html/transformer.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DOMPurify from 'dompurify';\nimport { useCallback, useMemo } from 'react';\n\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\n\nimport { Transformer } from '../transformer';\nimport {\n  removeRestrictedAttributes,\n  removeUnsafeIframes,\n  removeUnsafeLinks,\n  removeUnsafeMetaTags,\n} from './hooks';\n\n/**\n * Returns html sanitizer configuration\n */\nconst useSanitizerConfig = () => {\n  const configApi = useApi(configApiRef);\n\n  return useMemo(() => {\n    return configApi.getOptionalConfig('techdocs.sanitizer');\n  }, [configApi]);\n};\n\n/**\n * Returns a transformer that sanitizes the dom\n */\nexport const useSanitizerTransformer = (): Transformer => {\n  const config = useSanitizerConfig();\n\n  return useCallback(\n    async (dom: Element) => {\n      const hosts = config?.getOptionalStringArray('allowedIframeHosts');\n\n      DOMPurify.addHook('beforeSanitizeElements', removeUnsafeLinks);\n      const tags = ['link', 'meta'];\n\n      if (hosts) {\n        tags.push('iframe');\n        DOMPurify.addHook('beforeSanitizeElements', removeUnsafeIframes(hosts));\n      }\n\n      DOMPurify.addHook('uponSanitizeElement', removeUnsafeMetaTags);\n\n      DOMPurify.addHook('uponSanitizeAttribute', removeRestrictedAttributes);\n\n      const tagNameCheck = config?.getOptionalString(\n        'allowedCustomElementTagNameRegExp',\n      );\n      const attributeNameCheck = config?.getOptionalString(\n        'allowedCustomElementAttributeNameRegExp',\n      );\n      const additionalAllowedURIProtocols =\n        config?.getOptionalStringArray('additionalAllowedURIProtocols') || [];\n\n      // Define allowed URI protocols, including any additional ones from the config.\n      // The default protocols are based on the DOMPurify defaults.\n      const allowedURIProtocols = [\n        'callto',\n        'cid',\n        'ftp',\n        'ftps',\n        'http',\n        'https',\n        'mailto',\n        'matrix',\n        'sms',\n        'tel',\n        'xmpp',\n        ...additionalAllowedURIProtocols,\n      ].filter(Boolean);\n\n      const allowedURIRegExp = new RegExp(\n        // This regex is not exposed by DOMPurify, so we need to define it ourselves.\n        // It is possible for this to drift from the default in future versions of DOMPurify.\n        // See: https://raw.githubusercontent.com/cure53/DOMPurify/master/src/regexp.ts\n        `^(?:${allowedURIProtocols.join(\n          '|',\n        )}:|[^a-z]|[a-z+.-]+(?:[^a-z+.\\\\-:]|$))`,\n        'i',\n      );\n\n      // using outerHTML as we want to preserve the html tag attributes (lang)\n      return DOMPurify.sanitize(dom.outerHTML, {\n        ADD_TAGS: tags,\n        FORBID_TAGS: ['style'],\n        ADD_ATTR: ['http-equiv', 'content', 'dominant-baseline'],\n        WHOLE_DOCUMENT: true,\n        RETURN_DOM: true,\n        ALLOWED_URI_REGEXP: allowedURIRegExp,\n        CUSTOM_ELEMENT_HANDLING: {\n          tagNameCheck: tagNameCheck ? new RegExp(tagNameCheck) : undefined,\n          attributeNameCheck: attributeNameCheck\n            ? new RegExp(attributeNameCheck)\n            : undefined,\n        },\n      }) as Element;\n    },\n    [config],\n  );\n};\n"],"names":[],"mappings":";;;;;;;;AAgCA,MAAM,qBAAqB,MAAM;AAC/B,EAAA,MAAM,SAAA,GAAY,OAAO,YAAY,CAAA;AAErC,EAAA,OAAO,QAAQ,MAAM;AACnB,IAAA,OAAO,SAAA,CAAU,kBAAkB,oBAAoB,CAAA;AAAA,EACzD,CAAA,EAAG,CAAC,SAAS,CAAC,CAAA;AAChB,CAAA;AAKO,MAAM,0BAA0B,MAAmB;AACxD,EAAA,MAAM,SAAS,kBAAA,EAAmB;AAElC,EAAA,OAAO,WAAA;AAAA,IACL,OAAO,GAAA,KAAiB;AACtB,MAAA,MAAM,KAAA,GAAQ,MAAA,EAAQ,sBAAA,CAAuB,oBAAoB,CAAA;AAEjE,MAAA,SAAA,CAAU,OAAA,CAAQ,0BAA0B,iBAAiB,CAAA;AAC7D,MAAA,MAAM,IAAA,GAAO,CAAC,MAAA,EAAQ,MAAM,CAAA;AAE5B,MAAA,IAAI,KAAA,EAAO;AACT,QAAA,IAAA,CAAK,KAAK,QAAQ,CAAA;AAClB,QAAA,SAAA,CAAU,OAAA,CAAQ,wBAAA,EAA0B,mBAAA,CAAoB,KAAK,CAAC,CAAA;AAAA,MACxE;AAEA,MAAA,SAAA,CAAU,OAAA,CAAQ,uBAAuB,oBAAoB,CAAA;AAE7D,MAAA,SAAA,CAAU,OAAA,CAAQ,yBAAyB,0BAA0B,CAAA;AAErE,MAAA,MAAM,eAAe,MAAA,EAAQ,iBAAA;AAAA,QAC3B;AAAA,OACF;AACA,MAAA,MAAM,qBAAqB,MAAA,EAAQ,iBAAA;AAAA,QACjC;AAAA,OACF;AACA,MAAA,MAAM,6BAAA,GACJ,MAAA,EAAQ,sBAAA,CAAuB,+BAA+B,KAAK,EAAC;AAItE,MAAA,MAAM,mBAAA,GAAsB;AAAA,QAC1B,QAAA;AAAA,QACA,KAAA;AAAA,QACA,KAAA;AAAA,QACA,MAAA;AAAA,QACA,MAAA;AAAA,QACA,OAAA;AAAA,QACA,QAAA;AAAA,QACA,QAAA;AAAA,QACA,KAAA;AAAA,QACA,KAAA;AAAA,QACA,MAAA;AAAA,QACA,GAAG;AAAA,OACL,CAAE,OAAO,OAAO,CAAA;AAEhB,MAAA,MAAM,mBAAmB,IAAI,MAAA;AAAA;AAAA;AAAA;AAAA,QAI3B,OAAO,mBAAA,CAAoB,IAAA;AAAA,UACzB;AAAA,SACD,CAAA,qCAAA,CAAA;AAAA,QACD;AAAA,OACF;AAGA,MAAA,OAAO,SAAA,CAAU,QAAA,CAAS,GAAA,CAAI,SAAA,EAAW;AAAA,QACvC,QAAA,EAAU,IAAA;AAAA,QACV,WAAA,EAAa,CAAC,OAAO,CAAA;AAAA,QACrB,QAAA,EAAU,CAAC,YAAA,EAAc,SAAA,EAAW,mBAAmB,CAAA;AAAA,QACvD,cAAA,EAAgB,IAAA;AAAA,QAChB,UAAA,EAAY,IAAA;AAAA,QACZ,kBAAA,EAAoB,gBAAA;AAAA,QACpB,uBAAA,EAAyB;AAAA,UACvB,YAAA,EAAc,YAAA,GAAe,IAAI,MAAA,CAAO,YAAY,CAAA,GAAI,MAAA;AAAA,UACxD,kBAAA,EAAoB,kBAAA,GAChB,IAAI,MAAA,CAAO,kBAAkB,CAAA,GAC7B;AAAA;AACN,OACD,CAAA;AAAA,IACH,CAAA;AAAA,IACA,CAAC,MAAM;AAAA,GACT;AACF;;;;"}