import * as _backstage_plugin_search_react_alpha from '@backstage/plugin-search-react/alpha';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import * as _backstage_core_components from '@backstage/core-components';
import * as _backstage_catalog_model from '@backstage/catalog-model';
import * as _backstage_plugin_catalog_react_alpha from '@backstage/plugin-catalog-react/alpha';
import * as react from 'react';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import * as _backstage_core_plugin_api_alpha from '@backstage/core-plugin-api/alpha';

/** @alpha */
declare const _default: _backstage_frontend_plugin_api.OverridableFrontendPlugin<{
    catalogIndex: _backstage_frontend_plugin_api.RouteRef<undefined>;
    catalogEntity: _backstage_frontend_plugin_api.RouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }>;
}, {
    viewTechDoc: _backstage_frontend_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }>;
    createComponent: _backstage_frontend_plugin_api.ExternalRouteRef<undefined>;
    createFromTemplate: _backstage_frontend_plugin_api.ExternalRouteRef<{
        namespace: string;
        templateName: string;
    }>;
    unregisterRedirect: _backstage_frontend_plugin_api.ExternalRouteRef<undefined>;
}, {
    "api:catalog": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:catalog/entity-presentation": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "entity-presentation";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "api:catalog/starred-entities": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "starred-entities";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: <TApi, TImpl extends TApi, TDeps extends { [name in string]: unknown; }>(params: _backstage_frontend_plugin_api.ApiFactory<TApi, TImpl, TDeps>) => _backstage_frontend_plugin_api.ExtensionBlueprintParams<_backstage_frontend_plugin_api.AnyApiFactory>;
    }>;
    "catalog-filter:catalog/kind": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            initialFilter: string;
        };
        configInput: {
            initialFilter?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "catalog-filter";
        name: "kind";
        params: {
            loader: () => Promise<JSX.Element>;
        };
    }>;
    "catalog-filter:catalog/lifecycle": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "catalog-filter";
        name: "lifecycle";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
        };
    }>;
    "catalog-filter:catalog/list": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            initialFilter: "all" | "owned" | "starred";
        };
        configInput: {
            initialFilter?: "all" | "owned" | "starred" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "catalog-filter";
        name: "list";
        params: {
            loader: () => Promise<JSX.Element>;
        };
    }>;
    "catalog-filter:catalog/mode": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            mode: "all" | "owners-only" | undefined;
        };
        configInput: {
            mode?: "all" | "owners-only" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "catalog-filter";
        name: "mode";
        params: {
            loader: () => Promise<JSX.Element>;
        };
    }>;
    "catalog-filter:catalog/namespace": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "catalog-filter";
        name: "namespace";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
        };
    }>;
    "catalog-filter:catalog/processing-status": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "catalog-filter";
        name: "processing-status";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
        };
    }>;
    "catalog-filter:catalog/tag": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "catalog-filter";
        name: "tag";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
        };
    }>;
    "catalog-filter:catalog/type": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "catalog-filter";
        name: "type";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
        };
    }>;
    "entity-card:catalog/about": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {
            iconLinks: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<() => _backstage_core_components.IconLinkVerticalProps, "entity-icon-link-props", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "entity-card";
        name: "about";
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/depends-on-components": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "depends-on-components";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/depends-on-resources": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "depends-on-resources";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/has-components": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "has-components";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/has-resources": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "has-resources";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/has-subcomponents": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "has-subcomponents";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/has-subdomains": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "has-subdomains";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/has-systems": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "has-systems";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/labels": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "labels";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-card:catalog/links": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "links";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType;
        };
    }>;
    "entity-content:catalog/overview": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            path: string | undefined;
            title: string | undefined;
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            group: string | false | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            title?: string | undefined;
            path?: string | undefined;
            group?: string | false | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-content-title", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-content-group", {
            optional: true;
        }>;
        inputs: {
            layouts: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(props: _backstage_plugin_catalog_react_alpha.EntityContentLayoutProps) => React.JSX.Element, "catalog.entity-content-layout.component", {}>, {
                singleton: false;
                optional: false;
            }>;
            cards: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
                optional: true;
            }>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "entity-content";
        name: "overview";
        params: {
            defaultPath?: [Error: `Use the 'path' param instead`];
            path: string;
            defaultTitle?: [Error: `Use the 'title' param instead`];
            title: string;
            defaultGroup?: [Error: `Use the 'group' param instead`];
            group?: keyof typeof _backstage_plugin_catalog_react_alpha.defaultEntityContentGroups | (string & {});
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef;
            filter?: string | _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
        };
    }>;
    "entity-context-menu-item:catalog/copy-entity-url": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-context-menu-item";
        name: "copy-entity-url";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }>;
        inputs: {};
        params: _backstage_plugin_catalog_react_alpha.EntityContextMenuItemParams;
    }>;
    "entity-context-menu-item:catalog/inspect-entity": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-context-menu-item";
        name: "inspect-entity";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }>;
        inputs: {};
        params: _backstage_plugin_catalog_react_alpha.EntityContextMenuItemParams;
    }>;
    "entity-context-menu-item:catalog/unregister-entity": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-context-menu-item";
        name: "unregister-entity";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }>;
        inputs: {};
        params: _backstage_plugin_catalog_react_alpha.EntityContextMenuItemParams;
    }>;
    "entity-icon-link:catalog/view-source": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-icon-link";
        name: "view-source";
        config: {
            label: string | undefined;
            title: string | undefined;
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            label?: string | undefined;
            title?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ExtensionDataRef<() => _backstage_core_components.IconLinkVerticalProps, "entity-icon-link-props", {}>;
        inputs: {};
        params: {
            useProps: () => Omit<_backstage_core_components.IconLinkVerticalProps, "color">;
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model.Entity) => boolean);
        };
    }>;
    "nav-item:catalog": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "nav-item";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ExtensionDataRef<{
            title: string;
            icon: _backstage_core_plugin_api.IconComponent;
            routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
        }, "core.nav-item.target", {}>;
        inputs: {};
        params: {
            title: string;
            icon: _backstage_core_plugin_api.IconComponent;
            routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
        };
    }>;
    "page:catalog": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            pagination: boolean | {
                mode: "offset" | "cursor";
                offset?: number | undefined;
                limit?: number | undefined;
            };
        } & {
            path: string | undefined;
        };
        configInput: {
            pagination?: boolean | {
                mode: "offset" | "cursor";
                offset?: number | undefined;
                limit?: number | undefined;
            } | undefined;
        } & {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {
            filters: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "page";
        name: undefined;
        params: {
            defaultPath?: [Error: `Use the 'path' param instead`];
            path: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef;
        };
    }>;
    "page:catalog/entity": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            groups: Record<string, {
                title: string;
            }>[] | undefined;
        } & {
            path: string | undefined;
        };
        configInput: {
            groups?: Record<string, {
                title: string;
            }>[] | undefined;
        } & {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {
            headers: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {
                optional: true;
            }>, {
                singleton: false;
                optional: false;
            }>;
            contents: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-content-title", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
                optional: true;
            }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-content-group", {
                optional: true;
            }>, {
                singleton: false;
                optional: false;
            }>;
            contextMenuItems: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
                optional: true;
            }>, {
                singleton: false;
                optional: false;
            }>;
        };
        kind: "page";
        name: "entity";
        params: {
            defaultPath?: [Error: `Use the 'path' param instead`];
            path: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef;
        };
    }>;
    "search-result-list-item:catalog": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "search-result-list-item";
        name: undefined;
        config: {
            noTrack: boolean;
        };
        configInput: {
            noTrack?: boolean | undefined;
        };
        output: _backstage_frontend_plugin_api.ExtensionDataRef<{
            predicate?: _backstage_plugin_search_react_alpha.SearchResultItemExtensionPredicate;
            component: _backstage_plugin_search_react_alpha.SearchResultItemExtensionComponent;
        }, "search.search-result-list-item.item", {}>;
        inputs: {};
        params: _backstage_plugin_search_react_alpha.SearchResultListItemBlueprintParams;
    }>;
}>;

/** @alpha */
declare const catalogTranslationRef: _backstage_core_plugin_api_alpha.TranslationRef<"catalog", {
    readonly "deleteEntity.description": "This entity is not referenced by any location and is therefore not receiving updates. Click here to delete.";
    readonly "deleteEntity.cancelButtonTitle": "Cancel";
    readonly "deleteEntity.deleteButtonTitle": "Delete";
    readonly "deleteEntity.dialogTitle": "Are you sure you want to delete this entity?";
    readonly "indexPage.title": "{{orgName}} Catalog";
    readonly "indexPage.createButtonTitle": "Create";
    readonly "indexPage.supportButtonContent": "All your software catalog entities";
    readonly "aboutCard.title": "About";
    readonly "aboutCard.refreshButtonTitle": "Schedule entity refresh";
    readonly "aboutCard.editButtonTitle": "Edit Metadata";
    readonly "aboutCard.createSimilarButtonTitle": "Create something similar";
    readonly "aboutCard.refreshScheduledMessage": "Refresh scheduled";
    readonly "aboutCard.launchTemplate": "Launch Template";
    readonly "aboutCard.viewTechdocs": "View TechDocs";
    readonly "aboutCard.viewSource": "View Source";
    readonly "aboutCard.descriptionField.value": "No description";
    readonly "aboutCard.descriptionField.label": "Description";
    readonly "aboutCard.ownerField.value": "No Owner";
    readonly "aboutCard.ownerField.label": "Owner";
    readonly "aboutCard.domainField.value": "No Domain";
    readonly "aboutCard.domainField.label": "Domain";
    readonly "aboutCard.systemField.value": "No System";
    readonly "aboutCard.systemField.label": "System";
    readonly "aboutCard.parentComponentField.value": "No Parent Component";
    readonly "aboutCard.parentComponentField.label": "Parent Component";
    readonly "aboutCard.typeField.label": "Type";
    readonly "aboutCard.lifecycleField.label": "Lifecycle";
    readonly "aboutCard.tagsField.value": "No Tags";
    readonly "aboutCard.tagsField.label": "Tags";
    readonly "aboutCard.targetsField.label": "Targets";
    readonly "searchResultItem.lifecycle": "Lifecycle";
    readonly "searchResultItem.Owner": "Owner";
    readonly "catalogTable.warningPanelTitle": "Could not fetch catalog entities.";
    readonly "catalogTable.viewActionTitle": "View";
    readonly "catalogTable.editActionTitle": "Edit";
    readonly "catalogTable.starActionTitle": "Add to favorites";
    readonly "catalogTable.unStarActionTitle": "Remove from favorites";
    readonly "dependencyOfComponentsCard.title": "Dependency of components";
    readonly "dependencyOfComponentsCard.emptyMessage": "No component depends on this component";
    readonly "dependsOnComponentsCard.title": "Depends on components";
    readonly "dependsOnComponentsCard.emptyMessage": "No component is a dependency of this component";
    readonly "dependsOnResourcesCard.title": "Depends on resources";
    readonly "dependsOnResourcesCard.emptyMessage": "No resource is a dependency of this component";
    readonly "entityContextMenu.copiedMessage": "Copied!";
    readonly "entityContextMenu.moreButtonTitle": "More";
    readonly "entityContextMenu.inspectMenuTitle": "Inspect entity";
    readonly "entityContextMenu.copyURLMenuTitle": "Copy entity URL";
    readonly "entityContextMenu.unregisterMenuTitle": "Unregister entity";
    readonly "entityLabelsCard.title": "Labels";
    readonly "entityLabelsCard.emptyDescription": "No labels defined for this entity. You can add labels to your entity YAML as shown in the highlighted example below:";
    readonly "entityLabelsCard.readMoreButtonTitle": "Read more";
    readonly "entityLabels.warningPanelTitle": "Entity not found";
    readonly "entityLabels.ownerLabel": "Owner";
    readonly "entityLabels.lifecycleLabel": "Lifecycle";
    readonly "entityLinksCard.title": "Links";
    readonly "entityLinksCard.emptyDescription": "No links defined for this entity. You can add links to your entity YAML as shown in the highlighted example below:";
    readonly "entityLinksCard.readMoreButtonTitle": "Read more";
    readonly "entityNotFound.title": "Entity was not found";
    readonly "entityNotFound.description": "Want to help us build this? Check out our Getting Started documentation.";
    readonly "entityNotFound.docButtonTitle": "DOCS";
    readonly entityProcessingErrorsDescription: "The error below originates from";
    readonly entityRelationWarningDescription: "This entity has relations to other entities, which can't be found in the catalog.\n Entities not found are: ";
    readonly "hasComponentsCard.title": "Has components";
    readonly "hasComponentsCard.emptyMessage": "No component is part of this system";
    readonly "hasResourcesCard.title": "Has resources";
    readonly "hasResourcesCard.emptyMessage": "No resource is part of this system";
    readonly "hasSubcomponentsCard.title": "Has subcomponents";
    readonly "hasSubcomponentsCard.emptyMessage": "No subcomponent is part of this component";
    readonly "hasSubdomainsCard.title": "Has subdomains";
    readonly "hasSubdomainsCard.emptyMessage": "No subdomain is part of this domain";
    readonly "hasSystemsCard.title": "Has systems";
    readonly "hasSystemsCard.emptyMessage": "No system is part of this domain";
    readonly "relatedEntitiesCard.emptyHelpLinkTitle": "Learn how to change this";
    readonly "systemDiagramCard.title": "System Diagram";
    readonly "systemDiagramCard.description": "Use pinch & zoom to move around the diagram.";
    readonly "systemDiagramCard.edgeLabels.dependsOn": "depends on";
    readonly "systemDiagramCard.edgeLabels.partOf": "part of";
    readonly "systemDiagramCard.edgeLabels.provides": "provides";
}>;

export { catalogTranslationRef, _default as default };
