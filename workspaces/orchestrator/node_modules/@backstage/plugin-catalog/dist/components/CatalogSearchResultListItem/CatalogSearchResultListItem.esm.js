import { jsxs, jsx } from 'react/jsx-runtime';
import Box from '@material-ui/core/Box';
import Chip from '@material-ui/core/Chip';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import { Link } from '@backstage/core-components';
import { HighlightedSearchResultText } from '@backstage/plugin-search-react';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { useTranslationRef } from '@backstage/frontend-plugin-api';

const useStyles = makeStyles(
  {
    item: {
      display: "flex"
    },
    flexContainer: {
      flexWrap: "wrap"
    },
    itemText: {
      width: "100%",
      wordBreak: "break-all",
      marginBottom: "1rem"
    }
  },
  { name: "CatalogSearchResultListItem" }
);
function CatalogSearchResultListItem(props) {
  const result = props.result;
  const highlight = props.highlight;
  const classes = useStyles();
  const { t } = useTranslationRef(catalogTranslationRef);
  if (!result) return null;
  return /* @__PURE__ */ jsxs("div", { className: classes.item, children: [
    props.icon && /* @__PURE__ */ jsx(ListItemIcon, { children: typeof props.icon === "function" ? props.icon(result) : props.icon }),
    /* @__PURE__ */ jsxs("div", { className: classes.flexContainer, children: [
      /* @__PURE__ */ jsx(
        ListItemText,
        {
          className: classes.itemText,
          primaryTypographyProps: { variant: "h6" },
          primary: /* @__PURE__ */ jsx(Link, { noTrack: true, to: result.location, children: highlight?.fields.title ? /* @__PURE__ */ jsx(
            HighlightedSearchResultText,
            {
              text: highlight.fields.title,
              preTag: highlight.preTag,
              postTag: highlight.postTag
            }
          ) : result.title }),
          secondary: /* @__PURE__ */ jsx(
            Typography,
            {
              component: "span",
              style: {
                display: "-webkit-box",
                WebkitBoxOrient: "vertical",
                WebkitLineClamp: props.lineClamp,
                overflow: "hidden"
              },
              color: "textSecondary",
              variant: "body2",
              children: highlight?.fields.text ? /* @__PURE__ */ jsx(
                HighlightedSearchResultText,
                {
                  text: highlight.fields.text,
                  preTag: highlight.preTag,
                  postTag: highlight.postTag
                }
              ) : result.text
            }
          )
        }
      ),
      /* @__PURE__ */ jsxs(Box, { children: [
        result.kind && /* @__PURE__ */ jsx(Chip, { label: `Kind: ${result.kind}`, size: "small" }),
        result.type && /* @__PURE__ */ jsx(Chip, { label: `Type: ${result.type}`, size: "small" }),
        result.lifecycle && /* @__PURE__ */ jsx(
          Chip,
          {
            label: `${t("searchResultItem.lifecycle")}: ${result.lifecycle}`,
            size: "small"
          }
        ),
        result.owner && /* @__PURE__ */ jsx(
          Chip,
          {
            label: `${t("searchResultItem.Owner")}: ${result.owner}`,
            size: "small"
          }
        )
      ] })
    ] })
  ] });
}

export { CatalogSearchResultListItem };
//# sourceMappingURL=CatalogSearchResultListItem.esm.js.map
