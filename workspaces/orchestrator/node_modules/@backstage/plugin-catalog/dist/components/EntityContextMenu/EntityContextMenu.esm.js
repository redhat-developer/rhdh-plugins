import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import Divider from '@material-ui/core/Divider';
import FileCopyTwoToneIcon from '@material-ui/icons/FileCopyTwoTone';
import IconButton from '@material-ui/core/IconButton';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import MenuList from '@material-ui/core/MenuList';
import Popover from '@material-ui/core/Popover';
import Tooltip from '@material-ui/core/Tooltip';
import { makeStyles } from '@material-ui/core/styles';
import BugReportIcon from '@material-ui/icons/BugReport';
import MoreVert from '@material-ui/icons/MoreVert';
import { useState, useEffect } from 'react';
import { useEntityPermission } from '@backstage/plugin-catalog-react/alpha';
import { catalogEntityDeletePermission } from '@backstage/plugin-catalog-common/alpha';
import { UnregisterEntity } from './UnregisterEntity.esm.js';
import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import useCopyToClipboard from 'react-use/esm/useCopyToClipboard';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { EntityContextMenuProvider } from '../../context/EntityContextMenuContext.esm.js';

const useStyles = makeStyles(
  (theme) => {
    return {
      button: {
        color: theme.page.fontColor
      }
    };
  },
  { name: "PluginCatalogEntityContextMenu" }
);
function EntityContextMenu(props) {
  const {
    UNSTABLE_extraContextMenuItems,
    UNSTABLE_contextMenuOptions,
    contextMenuItems,
    onUnregisterEntity,
    onInspectEntity
  } = props;
  const { t } = useTranslationRef(catalogTranslationRef);
  const [anchorEl, setAnchorEl] = useState();
  const classes = useStyles();
  const unregisterPermission = useEntityPermission(
    catalogEntityDeletePermission
  );
  const isAllowed = unregisterPermission.allowed;
  const onOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const onClose = () => {
    setAnchorEl(void 0);
  };
  const alertApi = useApi(alertApiRef);
  const [copyState, copyToClipboard] = useCopyToClipboard();
  useEffect(() => {
    if (!copyState.error && copyState.value) {
      alertApi.post({
        message: t("entityContextMenu.copiedMessage"),
        severity: "info",
        display: "transient"
      });
    }
  }, [copyState, alertApi, t]);
  const extraItems = UNSTABLE_extraContextMenuItems?.length ? [
    ...UNSTABLE_extraContextMenuItems.map((item) => /* @__PURE__ */ jsxs(
      MenuItem,
      {
        onClick: () => {
          onClose();
          item.onClick();
        },
        children: [
          /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(item.Icon, { fontSize: "small" }) }),
          /* @__PURE__ */ jsx(ListItemText, { primary: item.title })
        ]
      },
      item.title
    )),
    /* @__PURE__ */ jsx(Divider, {}, "the divider is here!")
  ] : null;
  const defaultMenuItems = [
    /* @__PURE__ */ jsx(
      UnregisterEntity,
      {
        unregisterEntityOptions: UNSTABLE_contextMenuOptions,
        isUnregisterAllowed: isAllowed,
        onUnregisterEntity,
        onClose
      },
      "unregister-entity"
    ),
    /* @__PURE__ */ jsxs(
      MenuItem,
      {
        onClick: () => {
          onClose();
          onInspectEntity();
        },
        children: [
          /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(BugReportIcon, { fontSize: "small" }) }),
          /* @__PURE__ */ jsx(ListItemText, { primary: t("entityContextMenu.inspectMenuTitle") })
        ]
      },
      "inspect-entity"
    ),
    /* @__PURE__ */ jsxs(
      MenuItem,
      {
        onClick: () => {
          onClose();
          copyToClipboard(window.location.toString());
        },
        children: [
          /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(FileCopyTwoToneIcon, { fontSize: "small" }) }),
          /* @__PURE__ */ jsx(ListItemText, { primary: t("entityContextMenu.copyURLMenuTitle") })
        ]
      },
      "copy-url"
    )
  ];
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Tooltip, { title: t("entityContextMenu.moreButtonTitle"), arrow: true, children: /* @__PURE__ */ jsx(
      IconButton,
      {
        "aria-label": "more",
        "aria-controls": "long-menu",
        "aria-haspopup": "true",
        "aria-expanded": !!anchorEl,
        role: "button",
        onClick: onOpen,
        "data-testid": "menu-button",
        className: classes.button,
        id: "long-menu",
        children: /* @__PURE__ */ jsx(MoreVert, {})
      }
    ) }),
    /* @__PURE__ */ jsx(
      Popover,
      {
        open: Boolean(anchorEl),
        onClose,
        anchorEl,
        anchorOrigin: { vertical: "bottom", horizontal: "right" },
        transformOrigin: { vertical: "top", horizontal: "right" },
        "aria-labelledby": "long-menu",
        PaperProps: {
          style: { minWidth: 200 }
        },
        children: /* @__PURE__ */ jsxs(MenuList, { autoFocusItem: Boolean(anchorEl), children: [
          extraItems,
          contextMenuItems === void 0 ? defaultMenuItems : /* @__PURE__ */ jsx(EntityContextMenuProvider, { onMenuClose: onClose, children: contextMenuItems })
        ] })
      }
    )
  ] });
}

export { EntityContextMenu };
//# sourceMappingURL=EntityContextMenu.esm.js.map
