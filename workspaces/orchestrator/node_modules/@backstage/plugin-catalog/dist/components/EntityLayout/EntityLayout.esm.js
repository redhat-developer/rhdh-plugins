import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { DEFAULT_NAMESPACE, RELATION_OWNED_BY } from '@backstage/catalog-model';
import { Page, Header, Breadcrumbs, Progress, RoutedTabs, Content, WarningPanel, Link, HeaderLabel } from '@backstage/core-components';
import { attachComponentData, useRouteRefParams, useElementFilter, useRouteRef, useApi } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { entityRouteRef, useAsyncEntity, catalogApiRef, EntityRefLink, InspectEntityDialog, UnregisterEntityDialog, getEntityRelations, EntityRefLinks, EntityDisplayName, FavoriteEntity } from '@backstage/plugin-catalog-react';
import Box from '@material-ui/core/Box';
import { makeStyles } from '@material-ui/core/styles';
import Alert from '@material-ui/lab/Alert';
import { useState, useEffect } from 'react';
import { useLocation, useNavigate, useSearchParams } from 'react-router-dom';
import useAsync from 'react-use/esm/useAsync';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { rootRouteRef, unregisterRedirectRouteRef } from '../../routes.esm.js';
import { EntityContextMenu } from '../EntityContextMenu/EntityContextMenu.esm.js';

const dataKey = "plugin.catalog.entityLayoutRoute";
const Route = () => null;
attachComponentData(Route, dataKey, true);
attachComponentData(Route, "core.gatherMountPoints", true);
function EntityLayoutTitle(props) {
  const { entity, title } = props;
  return /* @__PURE__ */ jsxs(Box, { display: "inline-flex", alignItems: "center", height: "1em", maxWidth: "100%", children: [
    /* @__PURE__ */ jsx(
      Box,
      {
        component: "span",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden",
        children: entity ? /* @__PURE__ */ jsx(EntityDisplayName, { entityRef: entity, hideIcon: true }) : title
      }
    ),
    entity && /* @__PURE__ */ jsx(FavoriteEntity, { entity })
  ] });
}
function headerProps(paramKind, paramNamespace, paramName, entity) {
  const kind = paramKind ?? entity?.kind ?? "";
  const namespace = paramNamespace ?? entity?.metadata.namespace ?? "";
  const name = entity?.metadata.title ?? paramName ?? entity?.metadata.name ?? "";
  return {
    headerTitle: `${name}${namespace && namespace !== DEFAULT_NAMESPACE ? ` in ${namespace}` : ""}`,
    headerType: (() => {
      let t = kind.toLocaleLowerCase("en-US");
      if (entity && entity.spec && "type" in entity.spec) {
        t += " \u2014 ";
        t += entity.spec.type.toLocaleLowerCase("en-US");
      }
      return t;
    })()
  };
}
function EntityLabels(props) {
  const { entity } = props;
  const ownedByRelations = getEntityRelations(entity, RELATION_OWNED_BY);
  const { t } = useTranslationRef(catalogTranslationRef);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    ownedByRelations.length > 0 && /* @__PURE__ */ jsx(
      HeaderLabel,
      {
        label: t("entityLabels.ownerLabel"),
        contentTypograpyRootComponent: "p",
        value: /* @__PURE__ */ jsx(
          EntityRefLinks,
          {
            entityRefs: ownedByRelations,
            defaultKind: "Group",
            color: "inherit"
          }
        )
      }
    ),
    entity.spec?.lifecycle && /* @__PURE__ */ jsx(
      HeaderLabel,
      {
        label: t("entityLabels.lifecycleLabel"),
        value: entity.spec.lifecycle?.toString()
      }
    )
  ] });
}
function findParentRelation(entityRelations = [], relationTypes = []) {
  for (const type of relationTypes) {
    const foundRelation = entityRelations.find(
      (relation) => relation.type === type
    );
    if (foundRelation) {
      return foundRelation;
    }
  }
  return null;
}
const useStyles = makeStyles((theme) => ({
  breadcrumbs: {
    color: theme.page.fontColor,
    fontSize: theme.typography.caption.fontSize,
    textTransform: "uppercase",
    marginTop: theme.spacing(1),
    opacity: 0.8,
    "& span ": {
      color: theme.page.fontColor,
      textDecoration: "underline",
      textUnderlineOffset: "3px"
    }
  }
}));
const EntityLayout = (props) => {
  const {
    UNSTABLE_extraContextMenuItems,
    UNSTABLE_contextMenuOptions,
    children,
    NotFoundComponent,
    parentEntityRelations
  } = props;
  const classes = useStyles();
  const { kind, namespace, name } = useRouteRefParams(entityRouteRef);
  const { entity, loading, error } = useAsyncEntity();
  const location = useLocation();
  const routes = useElementFilter(
    children,
    (elements) => elements.selectByComponentData({
      key: dataKey,
      withStrictError: "Child of EntityLayout must be an EntityLayout.Route"
    }).getElements().flatMap(({ props: elementProps }) => {
      if (!entity) {
        return [];
      } else if (elementProps.if && !elementProps.if(entity)) {
        return [];
      }
      return [
        {
          path: elementProps.path,
          title: elementProps.title,
          children: elementProps.children,
          tabProps: elementProps.tabProps
        }
      ];
    }),
    [entity]
  );
  const { headerTitle, headerType } = headerProps(
    kind,
    namespace,
    name,
    entity
  );
  const [confirmationDialogOpen, setConfirmationDialogOpen] = useState(false);
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const catalogRoute = useRouteRef(rootRouteRef);
  const unregisterRedirectRoute = useRouteRef(unregisterRedirectRouteRef);
  const { t } = useTranslationRef(catalogTranslationRef);
  const cleanUpAfterRemoval = async () => {
    setConfirmationDialogOpen(false);
    navigate(
      unregisterRedirectRoute ? unregisterRedirectRoute() : catalogRoute()
    );
  };
  const parentEntity = findParentRelation(
    entity?.relations ?? [],
    parentEntityRelations ?? []
  );
  const catalogApi = useApi(catalogApiRef);
  const { value: ancestorEntity } = useAsync(async () => {
    if (parentEntity) {
      return findParentRelation(
        (await catalogApi.getEntityByRef(parentEntity?.targetRef))?.relations,
        parentEntityRelations
      );
    }
    return null;
  }, [parentEntity]);
  useEffect(() => {
    setConfirmationDialogOpen(false);
  }, [location.pathname]);
  const selectedInspectTab = searchParams.get("inspect");
  const showInspectTab = typeof selectedInspectTab === "string";
  return /* @__PURE__ */ jsxs(Page, { themeId: entity?.spec?.type?.toString() ?? "home", children: [
    /* @__PURE__ */ jsx(
      Header,
      {
        title: /* @__PURE__ */ jsx(EntityLayoutTitle, { title: headerTitle, entity }),
        pageTitleOverride: headerTitle,
        type: headerType,
        subtitle: parentEntity && /* @__PURE__ */ jsxs(Breadcrumbs, { separator: ">", className: classes.breadcrumbs, children: [
          ancestorEntity && /* @__PURE__ */ jsx(
            EntityRefLink,
            {
              entityRef: ancestorEntity.targetRef,
              disableTooltip: true
            }
          ),
          /* @__PURE__ */ jsx(
            EntityRefLink,
            {
              entityRef: parentEntity.targetRef,
              disableTooltip: true
            }
          ),
          name
        ] }),
        children: entity && /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(EntityLabels, { entity }),
          /* @__PURE__ */ jsx(
            EntityContextMenu,
            {
              UNSTABLE_extraContextMenuItems,
              UNSTABLE_contextMenuOptions,
              onUnregisterEntity: () => setConfirmationDialogOpen(true),
              onInspectEntity: () => {
                setSearchParams((prev) => {
                  const newParams = new URLSearchParams(prev);
                  newParams.set("inspect", "");
                  return newParams;
                });
              }
            }
          )
        ] })
      }
    ),
    loading && /* @__PURE__ */ jsx(Progress, {}),
    entity && /* @__PURE__ */ jsx(RoutedTabs, { routes }),
    error && /* @__PURE__ */ jsx(Content, { children: /* @__PURE__ */ jsx(Alert, { severity: "error", children: error.toString() }) }),
    !loading && !error && !entity && /* @__PURE__ */ jsx(Content, { children: NotFoundComponent ? NotFoundComponent : /* @__PURE__ */ jsxs(WarningPanel, { title: t("entityLabels.warningPanelTitle"), children: [
      "There is no ",
      kind,
      " with the requested",
      " ",
      /* @__PURE__ */ jsx(Link, { to: "https://backstage.io/docs/features/software-catalog/references", children: "kind, namespace, and name" }),
      "."
    ] }) }),
    showInspectTab && /* @__PURE__ */ jsx(
      InspectEntityDialog,
      {
        entity,
        initialTab: selectedInspectTab || void 0,
        onSelect: (newTab) => setSearchParams((prev) => {
          const newParams = new URLSearchParams(prev);
          newParams.set("inspect", newTab);
          return newParams;
        }),
        open: true,
        onClose: () => setSearchParams((prev) => {
          const newParams = new URLSearchParams(prev);
          newParams.delete("inspect");
          return newParams;
        })
      }
    ),
    /* @__PURE__ */ jsx(
      UnregisterEntityDialog,
      {
        open: confirmationDialogOpen,
        entity,
        onConfirm: cleanUpAfterRemoval,
        onClose: () => setConfirmationDialogOpen(false)
      }
    )
  ] });
};
EntityLayout.Route = Route;

export { EntityLayout };
//# sourceMappingURL=EntityLayout.esm.js.map
