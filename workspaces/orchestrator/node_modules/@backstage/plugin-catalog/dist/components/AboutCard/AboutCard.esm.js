import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { useCallback } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import CardHeader from '@material-ui/core/CardHeader';
import Divider from '@material-ui/core/Divider';
import IconButton from '@material-ui/core/IconButton';
import CachedIcon from '@material-ui/icons/Cached';
import EditIcon from '@material-ui/icons/Edit';
import DocsIcon from '@material-ui/icons/Description';
import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
import { Link, AppIcon, HeaderIconLinkRow } from '@backstage/core-components';
import { useApi, alertApiRef, errorApiRef, useRouteRef, useApp } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scmIntegrationsApiRef, ScmIntegrationIcon } from '@backstage/integration-react';
import { ANNOTATION_EDIT_URL, ANNOTATION_LOCATION, stringifyEntityRef, DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import { useEntity, catalogApiRef, getEntitySourceLocation } from '@backstage/plugin-catalog-react';
import { useEntityPermission } from '@backstage/plugin-catalog-react/alpha';
import { catalogEntityRefreshPermission } from '@backstage/plugin-catalog-common/alpha';
import { TECHDOCS_ANNOTATION, TECHDOCS_EXTERNAL_ANNOTATION } from '@backstage/plugin-techdocs-common';
import { buildTechDocsURL } from '@backstage/plugin-techdocs-react';
import { isTemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import { taskCreatePermission } from '@backstage/plugin-scaffolder-common/alpha';
import { usePermission } from '@backstage/plugin-permission-react';
import { createFromTemplateRouteRef, viewTechDocRouteRef } from '../../routes.esm.js';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { useSourceTemplateCompoundEntityRef } from './hooks.esm.js';
import { AboutContent } from './AboutContent.esm.js';

function useCatalogSourceIconLinkProps() {
  const { entity } = useEntity();
  const scmIntegrationsApi = useApi(scmIntegrationsApiRef);
  const { t } = useTranslationRef(catalogTranslationRef);
  const entitySourceLocation = getEntitySourceLocation(
    entity,
    scmIntegrationsApi
  );
  return {
    label: t("aboutCard.viewSource"),
    disabled: !entitySourceLocation,
    icon: /* @__PURE__ */ jsx(ScmIntegrationIcon, { type: entitySourceLocation?.integrationType }),
    href: entitySourceLocation?.locationTargetUrl
  };
}
function useTechdocsReaderIconLinkProps() {
  const { entity } = useEntity();
  const viewTechdocLink = useRouteRef(viewTechDocRouteRef);
  const { t } = useTranslationRef(catalogTranslationRef);
  return {
    label: t("aboutCard.viewTechdocs"),
    disabled: !(entity.metadata.annotations?.[TECHDOCS_ANNOTATION] || entity.metadata.annotations?.[TECHDOCS_EXTERNAL_ANNOTATION]) || !viewTechdocLink,
    icon: /* @__PURE__ */ jsx(DocsIcon, {}),
    href: buildTechDocsURL(entity, viewTechdocLink)
  };
}
function useScaffolderTemplateIconLinkProps() {
  const app = useApp();
  const { entity } = useEntity();
  const templateRoute = useRouteRef(createFromTemplateRouteRef);
  const { t } = useTranslationRef(catalogTranslationRef);
  const Icon = app.getSystemIcon("scaffolder") ?? CreateComponentIcon;
  const { allowed: canCreateTemplateTask } = usePermission({
    permission: taskCreatePermission
  });
  return {
    label: t("aboutCard.launchTemplate"),
    icon: /* @__PURE__ */ jsx(Icon, {}),
    disabled: !templateRoute || !canCreateTemplateTask,
    href: templateRoute && templateRoute({
      templateName: entity.metadata.name,
      namespace: entity.metadata.namespace || DEFAULT_NAMESPACE
    })
  };
}
function DefaultAboutCardSubheader() {
  const { entity } = useEntity();
  const catalogSourceIconLink = useCatalogSourceIconLinkProps();
  const techdocsreaderIconLink = useTechdocsReaderIconLinkProps();
  const scaffolderTemplateIconLink = useScaffolderTemplateIconLinkProps();
  const links = [catalogSourceIconLink, techdocsreaderIconLink];
  if (isTemplateEntityV1beta3(entity)) {
    links.push(scaffolderTemplateIconLink);
  }
  return /* @__PURE__ */ jsx(HeaderIconLinkRow, { links });
}
const useStyles = makeStyles({
  gridItemCard: {
    display: "flex",
    flexDirection: "column",
    height: "calc(100% - 10px)",
    // for pages without content header
    marginBottom: "10px"
  },
  fullHeightCard: {
    display: "flex",
    flexDirection: "column",
    height: "100%"
  },
  gridItemCardContent: {
    flex: 1
  },
  fullHeightCardContent: {
    flex: 1
  }
});
function InternalAboutCard(props) {
  const { variant, subheader } = props;
  const classes = useStyles();
  const { entity } = useEntity();
  const catalogApi = useApi(catalogApiRef);
  const alertApi = useApi(alertApiRef);
  const errorApi = useApi(errorApiRef);
  const templateRoute = useRouteRef(createFromTemplateRouteRef);
  const sourceTemplateRef = useSourceTemplateCompoundEntityRef(entity);
  const { allowed: canRefresh } = useEntityPermission(
    catalogEntityRefreshPermission
  );
  const { t } = useTranslationRef(catalogTranslationRef);
  const entityMetadataEditUrl = entity.metadata.annotations?.[ANNOTATION_EDIT_URL];
  let cardClass = "";
  if (variant === "gridItem") {
    cardClass = classes.gridItemCard;
  } else if (variant === "fullHeight") {
    cardClass = classes.fullHeightCard;
  }
  let cardContentClass = "";
  if (variant === "gridItem") {
    cardContentClass = classes.gridItemCardContent;
  } else if (variant === "fullHeight") {
    cardContentClass = classes.fullHeightCardContent;
  }
  const entityLocation = entity.metadata.annotations?.[ANNOTATION_LOCATION];
  const allowRefresh = entityLocation?.startsWith("url:") || entityLocation?.startsWith("file:");
  const refreshEntity = useCallback(async () => {
    try {
      await catalogApi.refreshEntity(stringifyEntityRef(entity));
      alertApi.post({
        message: t("aboutCard.refreshScheduledMessage"),
        severity: "info",
        display: "transient"
      });
    } catch (e) {
      errorApi.post(e);
    }
  }, [catalogApi, entity, alertApi, t, errorApi]);
  return /* @__PURE__ */ jsxs(Card, { className: cardClass, children: [
    /* @__PURE__ */ jsx(
      CardHeader,
      {
        title: t("aboutCard.title"),
        action: /* @__PURE__ */ jsxs(Fragment, { children: [
          allowRefresh && canRefresh && /* @__PURE__ */ jsx(
            IconButton,
            {
              "aria-label": "Refresh",
              title: t("aboutCard.refreshButtonTitle"),
              onClick: refreshEntity,
              children: /* @__PURE__ */ jsx(CachedIcon, {})
            }
          ),
          /* @__PURE__ */ jsx(
            IconButton,
            {
              component: Link,
              "aria-label": "Edit",
              disabled: !entityMetadataEditUrl,
              title: t("aboutCard.editButtonTitle"),
              to: entityMetadataEditUrl ?? "#",
              children: /* @__PURE__ */ jsx(EditIcon, {})
            }
          ),
          sourceTemplateRef && templateRoute && /* @__PURE__ */ jsx(
            IconButton,
            {
              component: Link,
              title: t("aboutCard.createSimilarButtonTitle"),
              to: templateRoute({
                namespace: sourceTemplateRef.namespace,
                templateName: sourceTemplateRef.name
              }),
              children: /* @__PURE__ */ jsx(AppIcon, { id: "scaffolder" })
            }
          )
        ] }),
        subheader: subheader ?? /* @__PURE__ */ jsx(DefaultAboutCardSubheader, {})
      }
    ),
    /* @__PURE__ */ jsx(Divider, {}),
    /* @__PURE__ */ jsx(CardContent, { className: cardContentClass, children: /* @__PURE__ */ jsx(AboutContent, { entity }) })
  ] });
}
function AboutCard(props) {
  return /* @__PURE__ */ jsx(InternalAboutCard, { ...props });
}

export { AboutCard, InternalAboutCard, useCatalogSourceIconLinkProps };
//# sourceMappingURL=AboutCard.esm.js.map
