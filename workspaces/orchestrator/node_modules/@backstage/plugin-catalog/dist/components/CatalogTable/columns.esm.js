import { jsx, Fragment } from 'react/jsx-runtime';
import { EntityRefLinks, EntityRefLink, humanizeEntityRef } from '@backstage/plugin-catalog-react';
import Chip from '@material-ui/core/Chip';
import { OverflowTooltip } from '@backstage/core-components';
import { EntityTableColumnTitle } from '@backstage/plugin-catalog-react/alpha';

const columnFactories = Object.freeze({
  createNameColumn(options) {
    function formatContent(entity) {
      return entity.metadata?.title || humanizeEntityRef(entity, {
        defaultKind: options?.defaultKind
      });
    }
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "name" }),
      field: "resolved.entityRef",
      highlight: true,
      customSort({ entity: entity1 }, { entity: entity2 }) {
        return formatContent(entity1).localeCompare(formatContent(entity2));
      },
      render: ({ entity }) => /* @__PURE__ */ jsx(
        EntityRefLink,
        {
          entityRef: entity,
          defaultKind: options?.defaultKind || "Component"
        }
      )
    };
  },
  createSystemColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "system" }),
      field: "resolved.partOfSystemRelationTitle",
      customFilterAndSearch: (query, row) => {
        if (!row.resolved.partOfSystemRelations) {
          return false;
        }
        const systemNames = row.resolved.partOfSystemRelations.map(
          (ref) => ref.name
        );
        const searchText = systemNames.join(", ").toLocaleUpperCase("en-US");
        return searchText.includes(query.toLocaleUpperCase("en-US"));
      },
      render: ({ resolved }) => /* @__PURE__ */ jsx(
        EntityRefLinks,
        {
          entityRefs: resolved.partOfSystemRelations,
          defaultKind: "system"
        }
      )
    };
  },
  createOwnerColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "owner" }),
      field: "resolved.ownedByRelationsTitle",
      render: ({ resolved }) => /* @__PURE__ */ jsx(
        EntityRefLinks,
        {
          entityRefs: resolved.ownedByRelations,
          defaultKind: "group"
        }
      )
    };
  },
  createSpecTargetsColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "targets" }),
      field: "entity.spec.targets",
      customFilterAndSearch: (query, row) => {
        let targets = [];
        if (row.entity?.spec?.targets && Array.isArray(row.entity?.spec?.targets)) {
          targets = row.entity?.spec?.targets;
        } else if (row.entity?.spec?.target) {
          targets = [row.entity?.spec?.target];
        }
        return targets.join(", ").toLocaleUpperCase("en-US").includes(query.toLocaleUpperCase("en-US"));
      },
      render: ({ entity }) => /* @__PURE__ */ jsx(Fragment, { children: (entity?.spec?.targets || entity?.spec?.target) && /* @__PURE__ */ jsx(
        OverflowTooltip,
        {
          text: (entity.spec.targets || [entity.spec.target]).join(", "),
          placement: "bottom-start"
        }
      ) })
    };
  },
  createSpecTypeColumn(options = { hidden: false }) {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "type" }),
      field: "entity.spec.type",
      hidden: options.hidden,
      width: "auto"
    };
  },
  createSpecLifecycleColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "lifecycle" }),
      field: "entity.spec.lifecycle"
    };
  },
  createMetadataDescriptionColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "description" }),
      field: "entity.metadata.description",
      render: ({ entity }) => /* @__PURE__ */ jsx(
        OverflowTooltip,
        {
          text: entity.metadata.description,
          placement: "bottom-start"
        }
      ),
      width: "auto"
    };
  },
  createTagsColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "tags" }),
      field: "entity.metadata.tags",
      cellStyle: {
        padding: "0px 16px 0px 20px"
      },
      render: ({ entity }) => /* @__PURE__ */ jsx(Fragment, { children: entity.metadata.tags && entity.metadata.tags.map((t) => /* @__PURE__ */ jsx(
        Chip,
        {
          label: t,
          size: "small",
          variant: "outlined",
          style: { marginBottom: "0px" }
        },
        t
      )) }),
      width: "auto"
    };
  },
  createTitleColumn(options) {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "title" }),
      field: "entity.metadata.title",
      hidden: options?.hidden,
      searchable: true
    };
  },
  createLabelColumn(key, options) {
    function formatContent(keyLabel, entity) {
      const labels = entity.metadata?.labels;
      return labels && labels[keyLabel] || "";
    }
    return {
      title: options?.title || /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "label" }),
      field: "entity.metadata.labels",
      cellStyle: {
        padding: "0px 16px 0px 20px"
      },
      customSort({ entity: entity1 }, { entity: entity2 }) {
        return formatContent(key, entity1).localeCompare(
          formatContent(key, entity2)
        );
      },
      render: ({ entity }) => {
        const labels = entity.metadata?.labels;
        const specifiedLabelValue = labels && labels[key] || options?.defaultValue;
        return /* @__PURE__ */ jsx(Fragment, { children: specifiedLabelValue && /* @__PURE__ */ jsx(
          Chip,
          {
            label: specifiedLabelValue,
            size: "small",
            variant: "outlined"
          },
          specifiedLabelValue
        ) });
      },
      width: "auto"
    };
  },
  createNamespaceColumn() {
    return {
      title: /* @__PURE__ */ jsx(EntityTableColumnTitle, { translationKey: "namespace" }),
      field: "entity.metadata.namespace",
      width: "auto"
    };
  }
});

export { columnFactories };
//# sourceMappingURL=columns.esm.js.map
