import { jsx } from 'react/jsx-runtime';
import { lazy } from 'react';
import { createExtensionInput, coreExtensionData, ExtensionBoundary } from '@backstage/frontend-plugin-api';
import { EntityContentBlueprint, EntityContentLayoutBlueprint, EntityCardBlueprint } from '@backstage/plugin-catalog-react/alpha';
import { buildFilterFn } from './filter/FilterWrapper.esm.js';
import { useEntity } from '@backstage/plugin-catalog-react';

const catalogOverviewEntityContent = EntityContentBlueprint.makeWithOverrides({
  name: "overview",
  inputs: {
    layouts: createExtensionInput([
      EntityContentLayoutBlueprint.dataRefs.filterFunction.optional(),
      EntityContentLayoutBlueprint.dataRefs.filterExpression.optional(),
      EntityContentLayoutBlueprint.dataRefs.component
    ]),
    cards: createExtensionInput([
      coreExtensionData.reactElement,
      EntityContentBlueprint.dataRefs.filterFunction.optional(),
      EntityContentBlueprint.dataRefs.filterExpression.optional(),
      EntityCardBlueprint.dataRefs.type.optional()
    ])
  },
  factory: (originalFactory, { node, inputs }) => {
    return originalFactory({
      path: "/",
      title: "Overview",
      group: "overview",
      loader: async () => {
        const LazyDefaultLayoutComponent = lazy(
          () => import('./DefaultEntityContentLayout.esm.js').then((m) => ({
            default: m.DefaultEntityContentLayout
          }))
        );
        const DefaultLayoutComponent = (props) => {
          return /* @__PURE__ */ jsx(ExtensionBoundary, { node, children: /* @__PURE__ */ jsx(LazyDefaultLayoutComponent, { ...props }) });
        };
        const layouts = [
          ...inputs.layouts.map((layout) => ({
            filter: buildFilterFn(
              layout.get(
                EntityContentLayoutBlueprint.dataRefs.filterFunction
              ),
              layout.get(
                EntityContentLayoutBlueprint.dataRefs.filterExpression
              )
            ),
            Component: layout.get(
              EntityContentLayoutBlueprint.dataRefs.component
            )
          })),
          {
            filter: buildFilterFn(),
            Component: DefaultLayoutComponent
          }
        ];
        const cards = inputs.cards.map((card) => ({
          element: card.get(coreExtensionData.reactElement),
          type: card.get(EntityCardBlueprint.dataRefs.type),
          filter: buildFilterFn(
            card.get(EntityContentBlueprint.dataRefs.filterFunction),
            card.get(EntityContentBlueprint.dataRefs.filterExpression)
          )
        }));
        const Component = () => {
          const { entity } = useEntity();
          const layout = layouts.find((l) => l.filter(entity));
          if (!layout) {
            throw new Error("No layout found for entity");
          }
          return /* @__PURE__ */ jsx(
            layout.Component,
            {
              cards: cards.filter((card) => card.filter(entity))
            }
          );
        };
        return /* @__PURE__ */ jsx(Component, {});
      }
    });
  }
});
var entityContents = [catalogOverviewEntityContent];

export { catalogOverviewEntityContent, entityContents as default };
//# sourceMappingURL=entityContents.esm.js.map
