import { jsx, Fragment } from 'react/jsx-runtime';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { PageBlueprint, createExtensionInput, coreExtensionData } from '@backstage/frontend-plugin-api';
import { entityRouteRef, AsyncEntityProvider } from '@backstage/plugin-catalog-react';
import { EntityContextMenuItemBlueprint, EntityHeaderBlueprint, defaultEntityContentGroups, EntityContentBlueprint } from '@backstage/plugin-catalog-react/alpha';
import { rootRouteRef } from '../routes.esm.js';
import { useEntityFromUrl } from '../components/CatalogEntityPage/useEntityFromUrl.esm.js';
import { buildFilterFn } from './filter/FilterWrapper.esm.js';

const catalogPage = PageBlueprint.makeWithOverrides({
  inputs: {
    filters: createExtensionInput([coreExtensionData.reactElement])
  },
  config: {
    schema: {
      pagination: (z) => z.union([
        z.boolean(),
        z.object({
          mode: z.enum(["cursor", "offset"]),
          limit: z.number().optional(),
          offset: z.number().optional()
        })
      ]).default(true)
    }
  },
  factory(originalFactory, { inputs, config }) {
    return originalFactory({
      path: "/catalog",
      routeRef: convertLegacyRouteRef(rootRouteRef),
      loader: async () => {
        const { BaseCatalogPage } = await import('../components/CatalogPage/index.esm.js');
        const filters = inputs.filters.map(
          (filter) => filter.get(coreExtensionData.reactElement)
        );
        return compatWrapper(
          /* @__PURE__ */ jsx(
            BaseCatalogPage,
            {
              filters: /* @__PURE__ */ jsx(Fragment, { children: filters }),
              pagination: config.pagination
            }
          )
        );
      }
    });
  }
});
const catalogEntityPage = PageBlueprint.makeWithOverrides({
  name: "entity",
  inputs: {
    headers: createExtensionInput([
      EntityHeaderBlueprint.dataRefs.element.optional(),
      EntityHeaderBlueprint.dataRefs.filterFunction.optional()
    ]),
    contents: createExtensionInput([
      coreExtensionData.reactElement,
      coreExtensionData.routePath,
      coreExtensionData.routeRef.optional(),
      EntityContentBlueprint.dataRefs.title,
      EntityContentBlueprint.dataRefs.filterFunction.optional(),
      EntityContentBlueprint.dataRefs.filterExpression.optional(),
      EntityContentBlueprint.dataRefs.group.optional()
    ]),
    contextMenuItems: createExtensionInput([
      coreExtensionData.reactElement,
      EntityContextMenuItemBlueprint.dataRefs.filterFunction.optional()
    ])
  },
  config: {
    schema: {
      groups: (z) => z.array(z.record(z.string(), z.object({ title: z.string() }))).optional()
    }
  },
  factory(originalFactory, { config, inputs }) {
    return originalFactory({
      path: "/catalog/:namespace/:kind/:name",
      routeRef: convertLegacyRouteRef(entityRouteRef),
      loader: async () => {
        const { EntityLayout } = await import('./components/EntityLayout/index.esm.js');
        const menuItems = inputs.contextMenuItems.map((item) => ({
          element: item.get(coreExtensionData.reactElement),
          filter: item.get(EntityContextMenuItemBlueprint.dataRefs.filterFunction) ?? (() => true)
        }));
        const headers = inputs.headers.map((header) => ({
          element: header.get(EntityHeaderBlueprint.dataRefs.element),
          filter: header.get(EntityHeaderBlueprint.dataRefs.filterFunction)
        })).sort((a, b) => {
          if (a.filter && !b.filter) return -1;
          if (!a.filter && b.filter) return 1;
          return 0;
        });
        let groups = Object.entries(defaultEntityContentGroups).reduce(
          (rest, group) => {
            const [groupId, groupValue] = group;
            return {
              ...rest,
              [groupId]: { title: groupValue, items: [] }
            };
          },
          {}
        );
        if (config.groups) {
          groups = config.groups.reduce((rest, group) => {
            const [groupId, groupValue] = Object.entries(group)[0];
            return {
              ...rest,
              [groupId]: { title: groupValue.title, items: [] }
            };
          }, {});
        }
        for (const output of inputs.contents) {
          const itemId = output.node.spec.id;
          const itemTitle = output.get(EntityContentBlueprint.dataRefs.title);
          const itemGroup = output.get(EntityContentBlueprint.dataRefs.group);
          const group = itemGroup && groups[itemGroup];
          if (!group) {
            groups[itemId] = { title: itemTitle, items: [output] };
            continue;
          }
          group.items.push(output);
        }
        const Component = () => {
          const entityFromUrl = useEntityFromUrl();
          const { entity } = entityFromUrl;
          const filteredMenuItems = entity ? menuItems.filter((i) => i.filter(entity)).map((i) => i.element) : [];
          const header = headers.find(
            (h) => !h.filter || h.filter(entity)
          )?.element;
          return /* @__PURE__ */ jsx(AsyncEntityProvider, { ...entityFromUrl, children: /* @__PURE__ */ jsx(
            EntityLayout,
            {
              header,
              contextMenuItems: filteredMenuItems,
              children: Object.values(groups).flatMap(
                ({ title, items }) => items.map((output) => /* @__PURE__ */ jsx(
                  EntityLayout.Route,
                  {
                    group: title,
                    path: output.get(coreExtensionData.routePath),
                    title: output.get(EntityContentBlueprint.dataRefs.title),
                    if: buildFilterFn(
                      output.get(
                        EntityContentBlueprint.dataRefs.filterFunction
                      ),
                      output.get(
                        EntityContentBlueprint.dataRefs.filterExpression
                      )
                    ),
                    children: output.get(coreExtensionData.reactElement)
                  },
                  output.get(coreExtensionData.routePath)
                ))
              )
            }
          ) });
        };
        return compatWrapper(/* @__PURE__ */ jsx(Component, {}));
      }
    });
  }
});
var pages = [catalogPage, catalogEntityPage];

export { catalogEntityPage, catalogPage, pages as default };
//# sourceMappingURL=pages.esm.js.map
