import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useMemo } from 'react';
import { Helmet } from 'react-helmet';
import { useParams, useRoutes, matchRoutes } from 'react-router-dom';
import { EntityTabsPanel } from './EntityTabsPanel.esm.js';
import { EntityTabsList } from './EntityTabsList.esm.js';

function useSelectedSubRoute(subRoutes) {
  const params = useParams();
  const routes = subRoutes.map(({ path, children }) => ({
    caseSensitive: false,
    path: `${path}/*`,
    element: children
  }));
  const sortedRoutes = routes.sort(
    (a, b) => (
      // remove "/*" symbols from path end before comparing
      b.path.replace(/\/\*$/, "").localeCompare(a.path.replace(/\/\*$/, ""))
    )
  );
  const element = useRoutes(sortedRoutes) ?? subRoutes[0]?.children;
  let currentRoute = params["*"] ?? "";
  if (!currentRoute.startsWith("/")) {
    currentRoute = `/${currentRoute}`;
  }
  const [matchedRoute] = matchRoutes(sortedRoutes, currentRoute) ?? [];
  const foundIndex = matchedRoute ? subRoutes.findIndex((t) => `${t.path}/*` === matchedRoute.route.path) : 0;
  return {
    index: foundIndex === -1 ? 0 : foundIndex,
    element,
    route: subRoutes[foundIndex] ?? subRoutes[0]
  };
}
function EntityTabs(props) {
  const { routes } = props;
  const { index, route, element } = useSelectedSubRoute(routes);
  const tabs = useMemo(
    () => routes.map((t) => {
      const { path, title, group } = t;
      let to = path;
      to = to.replace(/\/\*$/, "");
      to = to.replace(/^\//, "");
      return {
        group,
        id: path,
        path: to,
        label: title
      };
    }),
    [routes]
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(EntityTabsList, { tabs, selectedIndex: index }),
    /* @__PURE__ */ jsxs(EntityTabsPanel, { children: [
      /* @__PURE__ */ jsx(Helmet, { title: route?.title }),
      element
    ] })
  ] });
}

export { EntityTabs, useSelectedSubRoute };
//# sourceMappingURL=EntityTabs.esm.js.map
