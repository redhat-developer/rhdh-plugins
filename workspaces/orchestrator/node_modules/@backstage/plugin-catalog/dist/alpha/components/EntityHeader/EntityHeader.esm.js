import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useState, useCallback, useEffect } from 'react';
import { useLocation, useNavigate, useSearchParams } from 'react-router-dom';
import useAsync from 'react-use/esm/useAsync';
import { makeStyles } from '@material-ui/core/styles';
import Box from '@material-ui/core/Box';
import { Header, Breadcrumbs } from '@backstage/core-components';
import { useRouteRefParams, useRouteRef, useApi } from '@backstage/core-plugin-api';
import { DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import { useAsyncEntity, entityRouteRef, InspectEntityDialog, UnregisterEntityDialog, catalogApiRef, EntityRefLink, EntityDisplayName, FavoriteEntity } from '@backstage/plugin-catalog-react';
import { EntityLabels } from '../EntityLabels/EntityLabels.esm.js';
import { EntityContextMenu } from '../../../components/EntityContextMenu/EntityContextMenu.esm.js';
import { rootRouteRef, unregisterRedirectRouteRef } from '../../../routes.esm.js';

function headerProps(paramKind, paramNamespace, paramName, entity) {
  const kind = paramKind ?? entity?.kind ?? "";
  const namespace = paramNamespace ?? entity?.metadata.namespace ?? "";
  const name = entity?.metadata.title ?? paramName ?? entity?.metadata.name ?? "";
  return {
    headerTitle: `${name}${namespace && namespace !== DEFAULT_NAMESPACE ? ` in ${namespace}` : ""}`,
    headerType: (() => {
      let t = kind.toLocaleLowerCase("en-US");
      if (entity && entity.spec && "type" in entity.spec) {
        t += " \u2014 ";
        t += entity.spec.type.toLocaleLowerCase("en-US");
      }
      return t;
    })()
  };
}
function findParentRelation(entityRelations = [], relationTypes = []) {
  for (const type of relationTypes) {
    const foundRelation = entityRelations.find(
      (relation) => relation.type === type
    );
    if (foundRelation) {
      return foundRelation;
    }
  }
  return null;
}
const useStyles = makeStyles((theme) => ({
  breadcrumbs: {
    color: theme.page.fontColor,
    fontSize: theme.typography.caption.fontSize,
    textTransform: "uppercase",
    marginTop: theme.spacing(1),
    opacity: 0.8,
    "& span ": {
      color: theme.page.fontColor,
      textDecoration: "underline",
      textUnderlineOffset: "3px"
    }
  }
}));
function EntityHeaderTitle() {
  const { entity } = useAsyncEntity();
  const { kind, namespace, name } = useRouteRefParams(entityRouteRef);
  const { headerTitle: title } = headerProps(kind, namespace, name, entity);
  return /* @__PURE__ */ jsxs(Box, { display: "inline-flex", alignItems: "center", height: "1em", maxWidth: "100%", children: [
    /* @__PURE__ */ jsx(
      Box,
      {
        component: "span",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden",
        children: entity ? /* @__PURE__ */ jsx(EntityDisplayName, { entityRef: entity, hideIcon: true }) : title
      }
    ),
    entity && /* @__PURE__ */ jsx(FavoriteEntity, { entity })
  ] });
}
function EntityHeaderSubtitle(props) {
  const { parentEntityRelations } = props;
  const classes = useStyles();
  const { entity } = useAsyncEntity();
  const { name } = useRouteRefParams(entityRouteRef);
  const parentEntity = findParentRelation(
    entity?.relations ?? [],
    parentEntityRelations ?? []
  );
  const catalogApi = useApi(catalogApiRef);
  const { value: ancestorEntity } = useAsync(async () => {
    if (parentEntity) {
      return findParentRelation(
        (await catalogApi.getEntityByRef(parentEntity?.targetRef))?.relations,
        parentEntityRelations
      );
    }
    return null;
  }, [parentEntity, catalogApi]);
  return parentEntity ? /* @__PURE__ */ jsxs(Breadcrumbs, { separator: ">", className: classes.breadcrumbs, children: [
    ancestorEntity && /* @__PURE__ */ jsx(EntityRefLink, { entityRef: ancestorEntity.targetRef, disableTooltip: true }),
    /* @__PURE__ */ jsx(EntityRefLink, { entityRef: parentEntity.targetRef, disableTooltip: true }),
    name
  ] }) : null;
}
function EntityHeader(props) {
  const {
    UNSTABLE_extraContextMenuItems,
    UNSTABLE_contextMenuOptions,
    contextMenuItems,
    parentEntityRelations,
    title,
    subtitle
  } = props;
  const { entity } = useAsyncEntity();
  const { kind, namespace, name } = useRouteRefParams(entityRouteRef);
  const { headerTitle: entityFallbackText, headerType: type } = headerProps(
    kind,
    namespace,
    name,
    entity
  );
  const location = useLocation();
  const navigate = useNavigate();
  const catalogRoute = useRouteRef(rootRouteRef);
  const unregisterRedirectRoute = useRouteRef(unregisterRedirectRouteRef);
  const [confirmationDialogOpen, setConfirmationDialogOpen] = useState(false);
  const openUnregisterEntityDialog = useCallback(
    () => setConfirmationDialogOpen(true),
    [setConfirmationDialogOpen]
  );
  const closeUnregisterEntityDialog = useCallback(
    () => setConfirmationDialogOpen(false),
    [setConfirmationDialogOpen]
  );
  const cleanUpAfterUnregisterConfirmation = useCallback(async () => {
    setConfirmationDialogOpen(false);
    navigate(
      unregisterRedirectRoute ? unregisterRedirectRoute() : catalogRoute()
    );
  }, [
    navigate,
    catalogRoute,
    unregisterRedirectRoute,
    setConfirmationDialogOpen
  ]);
  useEffect(() => {
    setConfirmationDialogOpen(false);
  }, [location.pathname]);
  const [searchParams, setSearchParams] = useSearchParams();
  const selectedInspectEntityDialogTab = searchParams.get("inspect");
  const setInspectEntityDialogTab = useCallback(
    (newTab) => setSearchParams(`inspect=${newTab}`),
    [setSearchParams]
  );
  const openInspectEntityDialog = useCallback(
    () => setSearchParams("inspect"),
    [setSearchParams]
  );
  const closeInspectEntityDialog = useCallback(
    () => setSearchParams(),
    [setSearchParams]
  );
  const inspectDialogOpen = typeof selectedInspectEntityDialogTab === "string";
  return /* @__PURE__ */ jsx(
    Header,
    {
      pageTitleOverride: entityFallbackText,
      type,
      title: title ?? /* @__PURE__ */ jsx(EntityHeaderTitle, {}),
      subtitle: subtitle ?? /* @__PURE__ */ jsx(EntityHeaderSubtitle, { parentEntityRelations }),
      children: entity && /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(EntityLabels, { entity }),
        /* @__PURE__ */ jsx(
          EntityContextMenu,
          {
            UNSTABLE_extraContextMenuItems,
            UNSTABLE_contextMenuOptions,
            contextMenuItems,
            onInspectEntity: openInspectEntityDialog,
            onUnregisterEntity: openUnregisterEntityDialog
          }
        ),
        /* @__PURE__ */ jsx(
          InspectEntityDialog,
          {
            entity,
            initialTab: selectedInspectEntityDialogTab || void 0,
            open: inspectDialogOpen,
            onClose: closeInspectEntityDialog,
            onSelect: setInspectEntityDialogTab
          }
        ),
        /* @__PURE__ */ jsx(
          UnregisterEntityDialog,
          {
            entity,
            open: confirmationDialogOpen,
            onClose: closeUnregisterEntityDialog,
            onConfirm: cleanUpAfterUnregisterConfirmation
          }
        )
      ] })
    }
  );
}

export { EntityHeader };
//# sourceMappingURL=EntityHeader.esm.js.map
