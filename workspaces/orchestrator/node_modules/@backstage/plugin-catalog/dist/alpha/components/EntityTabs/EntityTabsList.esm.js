import { jsx } from 'react/jsx-runtime';
import { useMemo, useState, useCallback, useEffect } from 'react';
import Box from '@material-ui/core/Box';
import Tabs from '@material-ui/core/Tabs';
import { makeStyles } from '@material-ui/core/styles';
import { EntityTabsGroup } from './EntityTabsGroup.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    tabsWrapper: {
      gridArea: "pageSubheader",
      backgroundColor: theme.palette.background.paper,
      paddingLeft: theme.spacing(3),
      minWidth: 0
    },
    defaultTab: {
      ...theme.typography.caption,
      padding: theme.spacing(3, 3),
      textTransform: "uppercase",
      fontWeight: theme.typography.fontWeightBold,
      color: theme.palette.text.secondary
    },
    selected: {
      color: theme.palette.text.primary
    },
    tabRoot: {
      "&:hover": {
        backgroundColor: theme.palette.background.default,
        color: theme.palette.text.primary
      }
    }
  }),
  { name: "BackstageHeaderTabs" }
);
function EntityTabsList(props) {
  const styles = useStyles();
  const { tabs: items, onChange, selectedIndex: selectedItem = 0 } = props;
  const groups = useMemo(
    () => [...new Set(items.map((item) => item.group))],
    [items]
  );
  const [selectedGroup, setSelectedGroup] = useState(
    selectedItem && items[selectedItem] ? groups.indexOf(items[selectedItem].group) : 0
  );
  const handleChange = useCallback(
    (index) => {
      if (selectedItem !== index) onChange?.(index);
    },
    [selectedItem, onChange]
  );
  useEffect(() => {
    if (selectedItem === void 0 || !items[selectedItem]) return;
    setSelectedGroup(groups.indexOf(items[selectedItem].group));
  }, [items, selectedItem, groups, setSelectedGroup]);
  return /* @__PURE__ */ jsx(Box, { className: styles.tabsWrapper, children: /* @__PURE__ */ jsx(
    Tabs,
    {
      selectionFollowsFocus: true,
      indicatorColor: "primary",
      textColor: "inherit",
      variant: "scrollable",
      scrollButtons: "auto",
      "aria-label": "tabs",
      value: selectedGroup,
      children: groups.map((group, groupIndex) => {
        const groupItems = [];
        items.forEach((item, itemIndex) => {
          if (item.group === group) {
            groupItems.push({
              ...item,
              index: itemIndex
            });
          }
        });
        return /* @__PURE__ */ jsx(
          EntityTabsGroup,
          {
            "data-testid": `header-tab-${groupIndex}`,
            className: styles.defaultTab,
            classes: { selected: styles.selected, root: styles.tabRoot },
            label: group,
            value: groupIndex,
            items: groupItems,
            highlightedButton: selectedItem,
            onSelectTab: () => handleChange(groupIndex)
          },
          group
        );
      })
    }
  ) });
}

export { EntityTabsList };
//# sourceMappingURL=EntityTabsList.esm.js.map
