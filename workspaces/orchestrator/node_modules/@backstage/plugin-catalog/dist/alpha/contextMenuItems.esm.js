import { jsx } from 'react/jsx-runtime';
import { EntityContextMenuItemBlueprint, useEntityPermission } from '@backstage/plugin-catalog-react/alpha';
import FileCopyTwoToneIcon from '@material-ui/icons/FileCopyTwoTone';
import BugReportIcon from '@material-ui/icons/BugReport';
import CancelIcon from '@material-ui/icons/Cancel';
import useCopyToClipboard from 'react-use/esm/useCopyToClipboard';
import { useApi, alertApiRef, useRouteRef } from '@backstage/core-plugin-api';
import { useTranslationRef, dialogApiRef } from '@backstage/frontend-plugin-api';
import { catalogTranslationRef } from './translation.esm.js';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { useEntity, UnregisterEntityDialog } from '@backstage/plugin-catalog-react';
import { rootRouteRef, unregisterRedirectRouteRef } from '../routes.esm.js';
import { catalogEntityDeletePermission } from '@backstage/plugin-catalog-common/alpha';
import { useEffect } from 'react';
import { compatWrapper } from '@backstage/core-compat-api';

const copyEntityUrlContextMenuItem = EntityContextMenuItemBlueprint.make(
  {
    name: "copy-entity-url",
    params: {
      icon: /* @__PURE__ */ jsx(FileCopyTwoToneIcon, { fontSize: "small" }),
      useProps: () => {
        const [copyState, copyToClipboard] = useCopyToClipboard();
        const alertApi = useApi(alertApiRef);
        const { t } = useTranslationRef(catalogTranslationRef);
        useEffect(() => {
          if (!copyState.error && copyState.value) {
            alertApi.post({
              message: t("entityContextMenu.copiedMessage"),
              severity: "info",
              display: "transient"
            });
          }
        }, [copyState, alertApi, t]);
        return {
          title: t("entityContextMenu.copyURLMenuTitle"),
          onClick: async () => {
            copyToClipboard(window.location.toString());
          }
        };
      }
    }
  }
);
const inspectEntityContextMenuItem = EntityContextMenuItemBlueprint.make(
  {
    name: "inspect-entity",
    params: {
      icon: /* @__PURE__ */ jsx(BugReportIcon, { fontSize: "small" }),
      useProps: () => {
        const [_, setSearchParams] = useSearchParams();
        const { t } = useTranslationRef(catalogTranslationRef);
        return {
          title: t("entityContextMenu.inspectMenuTitle"),
          onClick: async () => {
            setSearchParams("inspect");
          }
        };
      }
    }
  }
);
const unregisterEntityContextMenuItem = EntityContextMenuItemBlueprint.make({
  name: "unregister-entity",
  params: {
    icon: /* @__PURE__ */ jsx(CancelIcon, { fontSize: "small" }),
    useProps: () => {
      const { entity } = useEntity();
      const dialogApi = useApi(dialogApiRef);
      const navigate = useNavigate();
      const catalogRoute = useRouteRef(rootRouteRef);
      const { t } = useTranslationRef(catalogTranslationRef);
      const unregisterRedirectRoute = useRouteRef(unregisterRedirectRouteRef);
      const unregisterPermission = useEntityPermission(
        catalogEntityDeletePermission
      );
      return {
        title: t("entityContextMenu.unregisterMenuTitle"),
        disabled: !unregisterPermission.allowed,
        onClick: async () => {
          dialogApi.showModal(
            ({ dialog }) => compatWrapper(
              /* @__PURE__ */ jsx(
                UnregisterEntityDialog,
                {
                  open: true,
                  entity,
                  onClose: () => dialog.close(),
                  onConfirm: () => {
                    dialog.close();
                    navigate(
                      unregisterRedirectRoute ? unregisterRedirectRoute() : catalogRoute()
                    );
                  }
                }
              )
            )
          );
        }
      };
    }
  }
});
var contextMenuItems = [
  unregisterEntityContextMenuItem,
  inspectEntityContextMenuItem,
  copyEntityUrlContextMenuItem
];

export { copyEntityUrlContextMenuItem, contextMenuItems as default, inspectEntityContextMenuItem, unregisterEntityContextMenuItem };
//# sourceMappingURL=contextMenuItems.esm.js.map
