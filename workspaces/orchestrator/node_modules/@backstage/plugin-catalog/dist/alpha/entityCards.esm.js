import { jsx } from 'react/jsx-runtime';
import { EntityCardBlueprint, EntityIconLinkBlueprint } from '@backstage/plugin-catalog-react/alpha';
import { compatWrapper } from '@backstage/core-compat-api';
import { createExtensionInput } from '@backstage/frontend-plugin-api';
import { HeaderIconLinkRow } from '@backstage/core-components';
import { useEntity } from '@backstage/plugin-catalog-react';
import { buildFilterFn } from './filter/FilterWrapper.esm.js';

const catalogAboutEntityCard = EntityCardBlueprint.makeWithOverrides({
  name: "about",
  inputs: {
    iconLinks: createExtensionInput([
      EntityIconLinkBlueprint.dataRefs.filterFunction.optional(),
      EntityIconLinkBlueprint.dataRefs.filterExpression.optional(),
      EntityIconLinkBlueprint.dataRefs.useProps
    ])
  },
  factory(originalFactory, { inputs }) {
    function Subheader() {
      const { entity } = useEntity();
      const links = inputs.iconLinks.reduce((rest, iconLink) => {
        const props = iconLink.get(EntityIconLinkBlueprint.dataRefs.useProps)();
        const filter = buildFilterFn(
          iconLink.get(EntityIconLinkBlueprint.dataRefs.filterFunction),
          iconLink.get(EntityIconLinkBlueprint.dataRefs.filterExpression)
        );
        if (filter(entity)) {
          return [...rest, props];
        }
        return rest;
      }, new Array());
      return links.length ? /* @__PURE__ */ jsx(HeaderIconLinkRow, { links }) : null;
    }
    return originalFactory({
      type: "info",
      filter: {
        $not: {
          kind: { $in: ["user", "group"] }
        }
      },
      async loader() {
        const { InternalAboutCard } = await import('../components/AboutCard/AboutCard.esm.js');
        return compatWrapper(
          /* @__PURE__ */ jsx(InternalAboutCard, { variant: "gridItem", subheader: /* @__PURE__ */ jsx(Subheader, {}) })
        );
      }
    });
  }
});
const catalogLinksEntityCard = EntityCardBlueprint.make({
  name: "links",
  params: {
    type: "info",
    filter: { "metadata.links": { $exists: true } },
    loader: async () => import('../components/EntityLinksCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.EntityLinksCard, { variant: "gridItem" }))
    )
  }
});
const catalogLabelsEntityCard = EntityCardBlueprint.make({
  name: "labels",
  params: {
    type: "info",
    filter: { "metadata.labels": { $exists: true } },
    loader: async () => import('../components/EntityLabelsCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.EntityLabelsCard, { variant: "gridItem" }))
    )
  }
});
const catalogDependsOnComponentsEntityCard = EntityCardBlueprint.make({
  name: "depends-on-components",
  params: {
    filter: { kind: "component" },
    loader: async () => import('../components/DependsOnComponentsCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.DependsOnComponentsCard, { variant: "gridItem" }))
    )
  }
});
const catalogDependsOnResourcesEntityCard = EntityCardBlueprint.make({
  name: "depends-on-resources",
  params: {
    filter: { kind: "component" },
    loader: async () => import('../components/DependsOnResourcesCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.DependsOnResourcesCard, { variant: "gridItem" }))
    )
  }
});
const catalogHasComponentsEntityCard = EntityCardBlueprint.make({
  name: "has-components",
  params: {
    filter: { kind: "system" },
    loader: async () => import('../components/HasComponentsCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.HasComponentsCard, { variant: "gridItem" }))
    )
  }
});
const catalogHasResourcesEntityCard = EntityCardBlueprint.make({
  name: "has-resources",
  params: {
    filter: { kind: "system" },
    loader: async () => import('../components/HasResourcesCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.HasResourcesCard, { variant: "gridItem" }))
    )
  }
});
const catalogHasSubcomponentsEntityCard = EntityCardBlueprint.make({
  name: "has-subcomponents",
  params: {
    filter: { kind: "component" },
    loader: async () => import('../components/HasSubcomponentsCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.HasSubcomponentsCard, { variant: "gridItem" }))
    )
  }
});
const catalogHasSubdomainsEntityCard = EntityCardBlueprint.make({
  name: "has-subdomains",
  params: {
    filter: { kind: "domain" },
    loader: async () => import('../components/HasSubdomainsCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.HasSubdomainsCard, { variant: "gridItem" }))
    )
  }
});
const catalogHasSystemsEntityCard = EntityCardBlueprint.make({
  name: "has-systems",
  params: {
    filter: { kind: "domain" },
    loader: async () => import('../components/HasSystemsCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.HasSystemsCard, { variant: "gridItem" }))
    )
  }
});
var entityCards = [
  catalogAboutEntityCard,
  catalogLinksEntityCard,
  catalogLabelsEntityCard,
  catalogDependsOnComponentsEntityCard,
  catalogDependsOnResourcesEntityCard,
  catalogHasComponentsEntityCard,
  catalogHasResourcesEntityCard,
  catalogHasSubcomponentsEntityCard,
  catalogHasSubdomainsEntityCard,
  catalogHasSystemsEntityCard
];

export { catalogAboutEntityCard, catalogDependsOnComponentsEntityCard, catalogDependsOnResourcesEntityCard, catalogHasComponentsEntityCard, catalogHasResourcesEntityCard, catalogHasSubcomponentsEntityCard, catalogHasSubdomainsEntityCard, catalogHasSystemsEntityCard, catalogLabelsEntityCard, catalogLinksEntityCard, entityCards as default };
//# sourceMappingURL=entityCards.esm.js.map
