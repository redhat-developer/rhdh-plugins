import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import Grid from '@material-ui/core/Grid';
import { makeStyles } from '@material-ui/core/styles';
import { EntitySwitch } from '../components/EntitySwitch/EntitySwitch.esm.js';
import { isOrphan, EntityOrphanWarning } from '../components/EntityOrphanWarning/EntityOrphanWarning.esm.js';
import { hasRelationWarnings, EntityRelationWarning } from '../components/EntityRelationWarning/EntityRelationWarning.esm.js';
import { hasCatalogProcessingErrors, EntityProcessingErrorsPanel } from '../components/EntityProcessingErrorsPanel/EntityProcessingErrorsPanel.esm.js';
import { HorizontalScrollGrid } from '@backstage/core-components';

const useStyles = makeStyles((theme) => ({
  root: {
    display: "flex",
    flexFlow: "column nowrap",
    gap: theme.spacing(3)
  },
  mainContent: {
    display: "flex",
    flexFlow: "column",
    gap: theme.spacing(3),
    alignItems: "stretch",
    minWidth: 0
  },
  infoArea: {
    display: "flex",
    flexFlow: "column nowrap",
    alignItems: "flex-start",
    gap: theme.spacing(3),
    minWidth: 0,
    "& > *": {
      flexShrink: 0,
      flexGrow: 0
    }
  },
  summaryArea: {
    minWidth: 0,
    margin: theme.spacing(1.5)
    // To counteract MUI negative grid margin
  },
  summaryCard: {
    flex: "0 0 auto",
    "& + &": {
      marginLeft: theme.spacing(3)
    }
  },
  contentArea: {
    display: "flex",
    flexFlow: "column",
    gap: theme.spacing(3),
    alignItems: "stretch",
    minWidth: 0
  },
  [theme.breakpoints.up("md")]: {
    root: {
      display: "grid",
      gap: theme.spacing(3),
      gridTemplateAreas: ({ summaryCards }) => `
        "${summaryCards ? "summary" : "content"} info"
        "content info"
      `,
      gridTemplateColumns: ({ infoCards }) => infoCards ? "2fr 1fr" : "1fr",
      alignItems: "start"
    },
    mainContent: {
      display: "contents"
    },
    contentArea: {
      gridArea: "content"
    },
    summaryArea: {
      gridArea: "summary",
      marginBottom: theme.spacing(3)
    },
    infoArea: {
      gridArea: "info",
      position: "sticky",
      top: theme.spacing(3),
      // this is a little unfortunate, but it's required to make the info cards scrollable
      // in a fixed container of the full height when it's stuck.
      // 100% doesn't work as that's the height of the entire layout, which is what powers the card scrolling.
      maxHeight: "100vh",
      overflowY: "auto",
      alignSelf: "start",
      alignItems: "stretch",
      // Hide the scrollbar for the inner info cards
      // kind of an accessibility nightmare, but we see.
      scrollbarWidth: "none",
      msOverflowStyle: "none",
      "&::-webkit-scrollbar": {
        display: "none"
      }
    }
  }
}));
const entityWarningContent = /* @__PURE__ */ jsxs(Fragment, { children: [
  /* @__PURE__ */ jsx(EntitySwitch, { children: /* @__PURE__ */ jsx(EntitySwitch.Case, { if: isOrphan, children: /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsx(EntityOrphanWarning, {}) }) }) }),
  /* @__PURE__ */ jsx(EntitySwitch, { children: /* @__PURE__ */ jsx(EntitySwitch.Case, { if: hasRelationWarnings, children: /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsx(EntityRelationWarning, {}) }) }) }),
  /* @__PURE__ */ jsx(EntitySwitch, { children: /* @__PURE__ */ jsx(EntitySwitch.Case, { if: hasCatalogProcessingErrors, children: /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsx(EntityProcessingErrorsPanel, {}) }) }) })
] });
function DefaultEntityContentLayout(props) {
  const { cards } = props;
  const infoCards = cards.filter((card) => card.type === "info");
  const summaryCards = cards.filter((card) => card.type === "summary");
  const contentCards = cards.filter(
    (card) => !card.type || card.type === "content"
  );
  const classes = useStyles({
    infoCards: !!infoCards.length,
    summaryCards: !!summaryCards.length,
    contentCards: !!contentCards.length
  });
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    entityWarningContent,
    /* @__PURE__ */ jsxs("div", { className: classes.root, children: [
      infoCards.length > 0 ? /* @__PURE__ */ jsx("div", { className: classes.infoArea, children: infoCards.map((card) => card.element) }) : null,
      /* @__PURE__ */ jsxs("div", { className: classes.mainContent, children: [
        summaryCards.length > 0 ? /* @__PURE__ */ jsx("div", { className: classes.summaryArea, children: /* @__PURE__ */ jsx(HorizontalScrollGrid, { scrollStep: 400, scrollSpeed: 100, children: summaryCards.map((card) => /* @__PURE__ */ jsx("div", { className: classes.summaryCard, children: card.element })) }) }) : null,
        contentCards.length > 0 ? /* @__PURE__ */ jsx("div", { className: classes.contentArea, children: contentCards.map((card) => card.element) }) : null
      ] })
    ] })
  ] });
}

export { DefaultEntityContentLayout };
//# sourceMappingURL=DefaultEntityContentLayout.esm.js.map
