{"version":3,"file":"DefaultEntityPresentationApi.esm.js","sources":["../../../src/apis/EntityPresentationApi/DefaultEntityPresentationApi.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { IconComponent } from '@backstage/core-plugin-api';\nimport {\n  CatalogApi,\n  EntityPresentationApi,\n  EntityRefPresentation,\n  EntityRefPresentationSnapshot,\n} from '@backstage/plugin-catalog-react';\nimport { durationToMilliseconds, HumanDuration } from '@backstage/types';\nimport DataLoader from 'dataloader';\nimport ObservableImpl from 'zen-observable';\nimport {\n  createDefaultRenderer,\n  DEFAULT_BATCH_DELAY,\n  DEFAULT_CACHE_TTL,\n  DEFAULT_ICONS,\n} from './defaults';\n\n/**\n * A custom renderer for the {@link DefaultEntityPresentationApi}.\n *\n * @public\n */\nexport interface DefaultEntityPresentationApiRenderer {\n  /**\n   * Whether to request the entity from the catalog API asynchronously.\n   *\n   * @remarks\n   *\n   * If this is set to true, entity data will be streamed in from the catalog\n   * whenever needed, and the render function may be called more than once:\n   * first when no entity data existed (or with old cached data), and then again\n   * at a later point when data is loaded from the catalog that proved to be\n   * different from the old one.\n   *\n   * @defaultValue true\n   */\n  async?: boolean;\n\n  /**\n   * The actual render function.\n   *\n   * @remarks\n   *\n   * This function may be called multiple times.\n   *\n   * The loading flag signals that the framework MAY be trying to load more\n   * entity data from the catalog and call the render function again, if it\n   * succeeds. In some cases you may want to render a loading state in that\n   * case.\n   *\n   * The entity may or may not be given. If the caller of the presentation API\n   * did present an entity upfront, then that's what will be passed in here.\n   * Otherwise, it may be a server-side entity that either comes from a local\n   * cache or directly from the server.\n   *\n   * In either case, the renderer should return a presentation that is the most\n   * useful possible for the end user, given the data that is available.\n   */\n  render: (options: {\n    entityRef: string;\n    loading: boolean;\n    entity: Entity | undefined;\n    context: {\n      defaultKind?: string;\n      defaultNamespace?: string;\n    };\n  }) => {\n    snapshot: Omit<EntityRefPresentationSnapshot, 'entityRef'>;\n  };\n}\n\n/**\n * Options for the {@link DefaultEntityPresentationApi}.\n *\n * @public\n */\nexport interface DefaultEntityPresentationApiOptions {\n  /**\n   * The catalog API to use. If you want to use any asynchronous features, you\n   * must supply one.\n   */\n  catalogApi?: CatalogApi;\n\n  /**\n   * When to expire entities that have been loaded from the catalog API and\n   * cached for a while.\n   *\n   * @defaultValue 10 seconds\n   * @remarks\n   *\n   * The higher this value, the lower the load on the catalog API, but also the\n   * higher the risk of users seeing stale data.\n   */\n  cacheTtl?: HumanDuration;\n\n  /**\n   * For how long to wait before sending a batch of entity references to the\n   * catalog API.\n   *\n   * @defaultValue 50 milliseconds\n   * @remarks\n   *\n   * The higher this value, the greater the chance of batching up requests from\n   * across a page, but also the longer the lag time before displaying accurate\n   * information.\n   */\n  batchDelay?: HumanDuration;\n\n  /**\n   * A mapping from kinds to icons.\n   *\n   * @remarks\n   *\n   * The keys are kinds (case insensitive) that map to icon values to represent\n   * kinds by. These are merged with the default set of icons.\n   */\n  kindIcons?: Record<string, IconComponent>;\n\n  /**\n   * A custom renderer, if any.\n   */\n  renderer?: DefaultEntityPresentationApiRenderer;\n}\n\ninterface CacheEntry {\n  updatedAt: number;\n  entity: Entity | undefined;\n}\n\n// Simple expiry map for the data loader, which only expects a map that implements set, get, and delete and clear\nexport class ExpiryMap<K, V> extends Map<K, V> {\n  #ttlMs: number;\n  #timestamps: Map<K, number> = new Map();\n\n  constructor(ttlMs: number) {\n    super();\n    this.#ttlMs = ttlMs;\n  }\n\n  set(key: K, value: V) {\n    const result = super.set(key, value);\n    this.#timestamps.set(key, Date.now());\n    return result;\n  }\n\n  get(key: K) {\n    if (!this.has(key)) {\n      return undefined;\n    }\n    const timestamp = this.#timestamps.get(key)!;\n    if (Date.now() - timestamp > this.#ttlMs) {\n      this.delete(key);\n      return undefined;\n    }\n    return super.get(key);\n  }\n\n  delete(key: K) {\n    this.#timestamps.delete(key);\n    return super.delete(key);\n  }\n\n  clear() {\n    this.#timestamps.clear();\n    return super.clear();\n  }\n}\n\n/**\n * Default implementation of the {@link @backstage/plugin-catalog-react#EntityPresentationApi}.\n *\n * @public\n */\nexport class DefaultEntityPresentationApi implements EntityPresentationApi {\n  /**\n   * Creates a new presentation API that does not reach out to the catalog.\n   */\n  static createLocal(): EntityPresentationApi {\n    return new DefaultEntityPresentationApi({\n      renderer: createDefaultRenderer({ async: false }),\n    });\n  }\n\n  /**\n   * Creates a new presentation API that calls out to the catalog as needed to\n   * get additional information about entities.\n   */\n  static create(\n    options: DefaultEntityPresentationApiOptions,\n  ): EntityPresentationApi {\n    return new DefaultEntityPresentationApi(options);\n  }\n\n  // This cache holds on to all entity data ever loaded, no matter how old. Each\n  // entry is tagged with a timestamp of when it was inserted. We use this map\n  // to be able to always render SOME data even though the information is old.\n  // Entities change very rarely, so it's likely that the rendered information\n  // was perfectly fine in the first place.\n  readonly #cache: Map<string, CacheEntry>;\n  readonly #cacheTtlMs: number;\n  readonly #loader: DataLoader<string, Entity | undefined> | undefined;\n  readonly #kindIcons: Record<string, IconComponent>; // lowercased kinds\n  readonly #renderer: DefaultEntityPresentationApiRenderer;\n\n  private constructor(options: DefaultEntityPresentationApiOptions) {\n    const cacheTtl = options.cacheTtl ?? DEFAULT_CACHE_TTL;\n    const batchDelay = options.batchDelay ?? DEFAULT_BATCH_DELAY;\n    const renderer = options.renderer ?? createDefaultRenderer({ async: true });\n\n    const kindIcons: Record<string, IconComponent> = {};\n    Object.entries(DEFAULT_ICONS).forEach(([kind, icon]) => {\n      kindIcons[kind.toLocaleLowerCase('en-US')] = icon;\n    });\n    Object.entries(options.kindIcons ?? {}).forEach(([kind, icon]) => {\n      kindIcons[kind.toLocaleLowerCase('en-US')] = icon;\n    });\n\n    if (renderer.async) {\n      if (!options.catalogApi) {\n        throw new TypeError(`Asynchronous rendering requires a catalog API`);\n      }\n      this.#loader = this.#createLoader({\n        cacheTtl,\n        batchDelay,\n        renderer,\n        catalogApi: options.catalogApi,\n      });\n    }\n\n    this.#cacheTtlMs = durationToMilliseconds(cacheTtl);\n    this.#cache = new Map();\n    this.#kindIcons = kindIcons;\n    this.#renderer = renderer;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-react#EntityPresentationApi.forEntity} */\n  forEntity(\n    entityOrRef: Entity | string,\n    context?: {\n      defaultKind?: string;\n      defaultNamespace?: string;\n    },\n  ): EntityRefPresentation {\n    const { entityRef, kind, entity, needsLoad } =\n      this.#getEntityForInitialRender(entityOrRef);\n\n    // Make a wrapping helper for rendering\n    const render = (options: {\n      loading: boolean;\n      entity?: Entity;\n    }): EntityRefPresentationSnapshot => {\n      const { snapshot } = this.#renderer.render({\n        entityRef: entityRef,\n        loading: options.loading,\n        entity: options.entity,\n        context: context || {},\n      });\n      return {\n        ...snapshot,\n        entityRef: entityRef,\n        Icon: this.#maybeFallbackIcon(snapshot.Icon, kind),\n      };\n    };\n\n    // First the initial render\n    let initialSnapshot: EntityRefPresentationSnapshot;\n    try {\n      initialSnapshot = render({\n        loading: needsLoad,\n        entity: entity,\n      });\n    } catch {\n      // This is what gets presented if the renderer throws an error\n      initialSnapshot = {\n        primaryTitle: entityRef,\n        entityRef: entityRef,\n      };\n    }\n\n    if (!needsLoad) {\n      return {\n        snapshot: initialSnapshot,\n        promise: Promise.resolve(initialSnapshot),\n      };\n    }\n\n    // Load the entity and render it\n    const maybeUpdatedSnapshot = Promise.resolve()\n      .then(() => {\n        return this.#loader?.load(entityRef);\n      })\n      .then(newEntity => {\n        // We re-render no matter if we get back a new entity or the old\n        // one or nothing, because of the now false loading state - in\n        // case the renderer outputs different data depending on that\n        return render({\n          loading: false,\n          entity: newEntity ?? entity,\n        });\n      })\n      .catch(() => {\n        // Intentionally ignored - we do not propagate errors to the\n        // caller here. The presentation API should be error free and\n        // always return SOMETHING that makes sense to render, and we have\n        // already ensured above that the initial snapshot was that.\n        return undefined;\n      });\n\n    const observable = new ObservableImpl<EntityRefPresentationSnapshot>(\n      subscriber => {\n        let aborted = false;\n\n        maybeUpdatedSnapshot\n          .then(updatedSnapshot => {\n            if (updatedSnapshot) {\n              subscriber.next(updatedSnapshot);\n            }\n          })\n          .finally(() => {\n            if (!aborted) {\n              subscriber.complete();\n            }\n          });\n\n        return () => {\n          aborted = true;\n        };\n      },\n    );\n\n    const promise = maybeUpdatedSnapshot.then(updatedSnapshot => {\n      return updatedSnapshot ?? initialSnapshot;\n    });\n\n    return {\n      snapshot: initialSnapshot,\n      update$: observable,\n      promise: promise,\n    };\n  }\n\n  #getEntityForInitialRender(entityOrRef: Entity | string): {\n    entity: Entity | undefined;\n    kind: string;\n    entityRef: string;\n    needsLoad: boolean;\n  } {\n    // If we were given an entity in the first place, we use it for a single\n    // pass of rendering and assume that it's up to date and not partial (i.e.\n    // we expect that it wasn't fetched in such a way that the required fields\n    // of the renderer were excluded)\n    if (typeof entityOrRef !== 'string') {\n      return {\n        entity: entityOrRef,\n        kind: entityOrRef.kind,\n        entityRef: stringifyEntityRef(entityOrRef),\n        needsLoad: false,\n      };\n    }\n\n    const cached = this.#cache.get(entityOrRef);\n    const cachedEntity: Entity | undefined = cached?.entity;\n    const cacheNeedsUpdate =\n      !cached || Date.now() - cached.updatedAt > this.#cacheTtlMs;\n    const needsLoad =\n      cacheNeedsUpdate &&\n      this.#renderer.async !== false &&\n      this.#loader !== undefined;\n\n    return {\n      entity: cachedEntity,\n      kind: parseEntityRef(entityOrRef).kind,\n      entityRef: entityOrRef,\n      needsLoad,\n    };\n  }\n\n  #createLoader(options: {\n    catalogApi: CatalogApi;\n    cacheTtl: HumanDuration;\n    batchDelay: HumanDuration;\n    renderer: DefaultEntityPresentationApiRenderer;\n  }): DataLoader<string, Entity | undefined> {\n    const cacheTtlMs = durationToMilliseconds(options.cacheTtl);\n    const batchDelayMs = durationToMilliseconds(options.batchDelay);\n\n    return new DataLoader(\n      async (entityRefs: readonly string[]) => {\n        const { items } = await options.catalogApi!.getEntitiesByRefs({\n          entityRefs: entityRefs as string[],\n          fields: [\n            'kind',\n            'metadata.name',\n            'metadata.namespace',\n            'metadata.title',\n            'metadata.description',\n            'spec.profile.displayName',\n            'spec.type',\n          ],\n        });\n\n        const now = Date.now();\n        entityRefs.forEach((entityRef, index) => {\n          this.#cache.set(entityRef, {\n            updatedAt: now,\n            entity: items[index],\n          });\n        });\n\n        return items;\n      },\n      {\n        name: 'DefaultEntityPresentationApi',\n        // This cache is the one that the data loader uses internally for\n        // memoizing requests; essentially what it achieves is that multiple\n        // requests for the same entity ref will be batched up into a single\n        // request and then the resulting promises are held on to. We put an\n        // expiring map here, which makes it so that it re-fetches data with the\n        // expiry cadence of that map. Otherwise it would only fetch a given ref\n        // once and then never try again. This cache does therefore not fulfill\n        // the same purpose as the one that is in the root of the class.\n        cacheMap: new ExpiryMap(cacheTtlMs),\n        maxBatchSize: 100,\n        batchScheduleFn: batchDelayMs\n          ? cb => setTimeout(cb, batchDelayMs)\n          : undefined,\n      },\n    );\n  }\n\n  #maybeFallbackIcon(\n    renderedIcon: IconComponent | false | undefined,\n    kind: string,\n  ): IconComponent | false | undefined {\n    if (renderedIcon) {\n      return renderedIcon;\n    } else if (renderedIcon === false) {\n      return false;\n    }\n\n    return this.#kindIcons[kind.toLocaleLowerCase('en-US')];\n  }\n}\n"],"names":[],"mappings":"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"}