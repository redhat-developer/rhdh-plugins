{"version":3,"file":"config.cjs.js","sources":["../../src/collators/config.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SchedulerServiceTaskScheduleDefinition,\n  readSchedulerServiceTaskScheduleDefinitionFromConfig,\n} from '@backstage/backend-plugin-api';\nimport { EntityFilterQuery } from '@backstage/catalog-client';\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\n\nconst configKey = 'search.collators.catalog';\n\nexport const defaults = {\n  schedule: {\n    frequency: { minutes: 10 },\n    timeout: { minutes: 15 },\n    initialDelay: { seconds: 3 },\n  },\n  collatorOptions: {\n    locationTemplate: '/catalog/:namespace/:kind/:name',\n    filter: undefined,\n    batchSize: 500,\n  },\n};\n\nexport function readScheduleConfigOptions(\n  configRoot: Config,\n): SchedulerServiceTaskScheduleDefinition {\n  let schedule: SchedulerServiceTaskScheduleDefinition | undefined = undefined;\n\n  const config = configRoot.getOptionalConfig(configKey);\n  if (config) {\n    const scheduleConfig = config.getOptionalConfig('schedule');\n    if (scheduleConfig) {\n      try {\n        schedule =\n          readSchedulerServiceTaskScheduleDefinitionFromConfig(scheduleConfig);\n      } catch (error) {\n        throw new InputError(`Invalid schedule at ${configKey}, ${error}`);\n      }\n    }\n  }\n\n  return schedule ?? defaults.schedule;\n}\n\nexport function readCollatorConfigOptions(configRoot: Config): {\n  locationTemplate: string;\n  filter: EntityFilterQuery | undefined;\n  batchSize: number;\n} {\n  const config = configRoot.getOptionalConfig(configKey);\n  if (!config) {\n    return defaults.collatorOptions;\n  }\n\n  return {\n    locationTemplate:\n      config.getOptionalString('locationTemplate') ??\n      defaults.collatorOptions.locationTemplate,\n    filter:\n      config.getOptional<EntityFilterQuery>('filter') ??\n      defaults.collatorOptions.filter,\n    batchSize:\n      config.getOptionalNumber('batchSize') ??\n      defaults.collatorOptions.batchSize,\n  };\n}\n"],"names":["readSchedulerServiceTaskScheduleDefinitionFromConfig","InputError"],"mappings":";;;;;AAwBA,MAAM,SAAA,GAAY,0BAAA;AAEX,MAAM,QAAA,GAAW;AAAA,EACtB,QAAA,EAAU;AAAA,IACR,SAAA,EAAW,EAAE,OAAA,EAAS,EAAA,EAAG;AAAA,IACzB,OAAA,EAAS,EAAE,OAAA,EAAS,EAAA,EAAG;AAAA,IACvB,YAAA,EAAc,EAAE,OAAA,EAAS,CAAA;AAAE,GAC7B;AAAA,EACA,eAAA,EAAiB;AAAA,IACf,gBAAA,EAAkB,iCAAA;AAAA,IAClB,MAAA,EAAQ,MAAA;AAAA,IACR,SAAA,EAAW;AAAA;AAEf;AAEO,SAAS,0BACd,UAAA,EACwC;AACxC,EAAA,IAAI,QAAA,GAA+D,MAAA;AAEnE,EAAA,MAAM,MAAA,GAAS,UAAA,CAAW,iBAAA,CAAkB,SAAS,CAAA;AACrD,EAAA,IAAI,MAAA,EAAQ;AACV,IAAA,MAAM,cAAA,GAAiB,MAAA,CAAO,iBAAA,CAAkB,UAAU,CAAA;AAC1D,IAAA,IAAI,cAAA,EAAgB;AAClB,MAAA,IAAI;AACF,QAAA,QAAA,GACEA,sEAAqD,cAAc,CAAA;AAAA,MACvE,SAAS,KAAA,EAAO;AACd,QAAA,MAAM,IAAIC,iBAAA,CAAW,CAAA,oBAAA,EAAuB,SAAS,CAAA,EAAA,EAAK,KAAK,CAAA,CAAE,CAAA;AAAA,MACnE;AAAA,IACF;AAAA,EACF;AAEA,EAAA,OAAO,YAAY,QAAA,CAAS,QAAA;AAC9B;AAEO,SAAS,0BAA0B,UAAA,EAIxC;AACA,EAAA,MAAM,MAAA,GAAS,UAAA,CAAW,iBAAA,CAAkB,SAAS,CAAA;AACrD,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,OAAO,QAAA,CAAS,eAAA;AAAA,EAClB;AAEA,EAAA,OAAO;AAAA,IACL,kBACE,MAAA,CAAO,iBAAA,CAAkB,kBAAkB,CAAA,IAC3C,SAAS,eAAA,CAAgB,gBAAA;AAAA,IAC3B,QACE,MAAA,CAAO,WAAA,CAA+B,QAAQ,CAAA,IAC9C,SAAS,eAAA,CAAgB,MAAA;AAAA,IAC3B,WACE,MAAA,CAAO,iBAAA,CAAkB,WAAW,CAAA,IACpC,SAAS,eAAA,CAAgB;AAAA,GAC7B;AACF;;;;;;"}