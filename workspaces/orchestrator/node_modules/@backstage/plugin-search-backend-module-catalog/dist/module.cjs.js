'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginCatalogNode = require('@backstage/plugin-catalog-node');
var alpha = require('@backstage/plugin-search-backend-node/alpha');
var config = require('./collators/config.cjs.js');
var DefaultCatalogCollatorFactory = require('./collators/DefaultCatalogCollatorFactory.cjs.js');

const catalogCollatorExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.catalogCollator.extension"
});
const searchModuleCatalogCollator = backendPluginApi.createBackendModule({
  pluginId: "search",
  moduleId: "catalog-collator",
  register(env) {
    let entityTransformer;
    env.registerExtensionPoint(catalogCollatorExtensionPoint, {
      setEntityTransformer(transformer) {
        if (entityTransformer) {
          throw new Error("setEntityTransformer can only be called once");
        }
        entityTransformer = transformer;
      }
    });
    env.registerInit({
      deps: {
        auth: backendPluginApi.coreServices.auth,
        config: backendPluginApi.coreServices.rootConfig,
        scheduler: backendPluginApi.coreServices.scheduler,
        indexRegistry: alpha.searchIndexRegistryExtensionPoint,
        catalog: pluginCatalogNode.catalogServiceRef
      },
      async init({ auth, config: config$1, scheduler, indexRegistry, catalog }) {
        indexRegistry.addCollator({
          schedule: scheduler.createScheduledTaskRunner(
            config.readScheduleConfigOptions(config$1)
          ),
          factory: DefaultCatalogCollatorFactory.DefaultCatalogCollatorFactory.fromConfig(config$1, {
            auth,
            catalog,
            entityTransformer
          })
        });
      }
    });
  }
});

exports.catalogCollatorExtensionPoint = catalogCollatorExtensionPoint;
exports.searchModuleCatalogCollator = searchModuleCatalogCollator;
//# sourceMappingURL=module.cjs.js.map
