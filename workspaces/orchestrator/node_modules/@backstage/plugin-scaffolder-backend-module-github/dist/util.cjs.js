'use strict';

var errors = require('@backstage/errors');
var integration = require('@backstage/integration');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');

const DEFAULT_TIMEOUT_MS = 6e4;
async function getOctokitOptions(options) {
  const { integrations, credentialsProvider, token, repoUrl } = options;
  const { host, owner, repo } = repoUrl ? pluginScaffolderNode.parseRepoUrl(repoUrl, integrations) : options;
  const requestOptions = {
    // set timeout to 60 seconds
    timeout: DEFAULT_TIMEOUT_MS
  };
  const integrationConfig = integrations.github.byHost(host)?.config;
  if (!integrationConfig) {
    throw new errors.InputError(`No integration for host ${host}`);
  }
  if (token) {
    return {
      auth: token,
      baseUrl: integrationConfig.apiBaseUrl,
      previews: ["nebula-preview"],
      request: requestOptions
    };
  }
  if (!owner || !repo) {
    throw new errors.InputError(
      `No owner and/or repo provided, which is required if a token is not provided`
    );
  }
  const githubCredentialsProvider = credentialsProvider ?? integration.DefaultGithubCredentialsProvider.fromIntegrations(integrations);
  const { token: credentialProviderToken } = await githubCredentialsProvider.getCredentials({
    url: `https://${host}/${encodeURIComponent(owner)}/${encodeURIComponent(
      repo
    )}`
  });
  if (!credentialProviderToken) {
    throw new errors.InputError(
      `No token available for host: ${host}, with owner ${owner}, and repo ${repo}. Make sure GitHub auth is configured correctly. See https://backstage.io/docs/auth/github/provider for more details.`
    );
  }
  return {
    auth: credentialProviderToken,
    baseUrl: integrationConfig.apiBaseUrl,
    previews: ["nebula-preview"]
  };
}

exports.getOctokitOptions = getOctokitOptions;
//# sourceMappingURL=util.cjs.js.map
