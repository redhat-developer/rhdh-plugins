'use strict';

var errors = require('@backstage/errors');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var octokit = require('octokit');
var githubAutolinks_examples = require('./githubAutolinks.examples.cjs.js');
var util = require('../util.cjs.js');

function createGithubAutolinksAction(options) {
  const { integrations, githubCredentialsProvider } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "github:autolinks:create",
    description: "Create an autolink reference for a repository",
    examples: githubAutolinks_examples.examples,
    schema: {
      input: {
        repoUrl: (z) => z.string({
          description: "Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the new repository name and `owner` is an organization or username"
        }),
        keyPrefix: (z) => z.string({
          description: "This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit."
        }),
        urlTemplate: (z) => z.string({
          description: "The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of isAlphanumeric."
        }),
        isAlphanumeric: (z) => z.boolean({
          description: "Whether this autolink reference matches alphanumeric characters. If `true`, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If `false`, this autolink reference only matches numeric characters. Default: `true`"
        }).default(true).optional(),
        token: (z) => z.string({
          description: "The token to use for authorization to GitHub"
        }).optional()
      }
    },
    async handler(ctx) {
      const { repoUrl, keyPrefix, urlTemplate, isAlphanumeric, token } = ctx.input;
      ctx.logger.info(`Creating autolink reference for repo ${repoUrl}`);
      const { host, owner, repo } = pluginScaffolderNode.parseRepoUrl(repoUrl, integrations);
      if (!owner) {
        throw new errors.InputError("Invalid repository owner provided in repoUrl");
      }
      const octokitOptions = await util.getOctokitOptions({
        integrations,
        host,
        owner,
        repo,
        credentialsProvider: githubCredentialsProvider,
        token
      });
      const client = new octokit.Octokit({
        ...octokitOptions,
        log: ctx.logger
      });
      await ctx.checkpoint({
        key: `create.auto.link.${owner}.${repo}`,
        fn: async () => {
          await client.rest.repos.createAutolink({
            owner,
            repo,
            key_prefix: keyPrefix,
            url_template: urlTemplate,
            is_alphanumeric: isAlphanumeric
          });
          ctx.logger.info(`Autolink reference created successfully`);
        }
      });
    }
  });
}

exports.createGithubAutolinksAction = createGithubAutolinksAction;
//# sourceMappingURL=githubAutolinks.cjs.js.map
