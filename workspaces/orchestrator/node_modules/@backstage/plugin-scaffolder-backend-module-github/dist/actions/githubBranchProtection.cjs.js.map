{"version":3,"file":"githubBranchProtection.cjs.js","sources":["../../src/actions/githubBranchProtection.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { examples } from './githubBranchProtection.examples';\nimport * as inputProps from './inputProperties';\nimport { getOctokitOptions } from '../util';\nimport { Octokit } from 'octokit';\nimport { enableBranchProtectionOnDefaultRepoBranch } from './gitHelpers';\n\n/**\n * Creates an `github:branch-protection:create` Scaffolder action that configured Branch Protection in a Github Repository.\n *\n * @public\n */\nexport function createGithubBranchProtectionAction(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  const { integrations } = options;\n\n  return createTemplateAction({\n    id: 'github:branch-protection:create',\n    description: 'Configures Branch Protection',\n    examples,\n    schema: {\n      input: {\n        repoUrl: inputProps.repoUrl,\n        branch: inputProps.branch,\n        enforceAdmins: inputProps.protectEnforceAdmins,\n        requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n        requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n        dismissStaleReviews: inputProps.dismissStaleReviews,\n        bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n        restrictions: inputProps.restrictions,\n        requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n        requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n        requiredConversationResolution:\n          inputProps.requiredConversationResolution,\n        requireLastPushApproval: inputProps.requireLastPushApproval,\n        requiredCommitSigning: inputProps.requiredCommitSigning,\n        requiredLinearHistory: inputProps.requiredLinearHistory,\n        token: inputProps.token,\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        branch,\n        enforceAdmins = true,\n        requiredApprovingReviewCount = 1,\n        requireCodeOwnerReviews = false,\n        dismissStaleReviews = false,\n        bypassPullRequestAllowances,\n        restrictions,\n        requiredStatusCheckContexts = [],\n        requireBranchesToBeUpToDate = true,\n        requiredConversationResolution = false,\n        requireLastPushApproval = false,\n        requiredCommitSigning = false,\n        requiredLinearHistory = false,\n        token: providedToken,\n      } = ctx.input;\n\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(`No owner provided for repo ${repoUrl}`);\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        token: providedToken,\n        host,\n        owner,\n        repo,\n      });\n      const client = new Octokit({\n        ...octokitOptions,\n        log: ctx.logger,\n      });\n\n      const defaultBranch = await ctx.checkpoint({\n        key: `read.default.branch.${owner}.${repo}`,\n        fn: async () => {\n          const repository = await client.rest.repos.get({\n            owner: owner,\n            repo: repo,\n          });\n          return repository.data.default_branch;\n        },\n      });\n\n      await ctx.checkpoint({\n        key: `enable.branch.protection.${owner}.${repo}`,\n        fn: async () => {\n          await enableBranchProtectionOnDefaultRepoBranch({\n            repoName: repo,\n            client,\n            owner,\n            logger: ctx.logger,\n            requireCodeOwnerReviews,\n            bypassPullRequestAllowances,\n            requiredApprovingReviewCount,\n            restrictions,\n            requiredStatusCheckContexts,\n            requireBranchesToBeUpToDate,\n            requiredConversationResolution,\n            requireLastPushApproval,\n            defaultBranch: branch ?? defaultBranch,\n            enforceAdmins,\n            dismissStaleReviews,\n            requiredCommitSigning,\n            requiredLinearHistory,\n          });\n        },\n      });\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","inputProps.repoUrl","inputProps.branch","inputProps.protectEnforceAdmins","inputProps.requiredApprovingReviewCount","inputProps.requireCodeOwnerReviews","inputProps.dismissStaleReviews","inputProps.bypassPullRequestAllowances","inputProps.restrictions","inputProps.requiredStatusCheckContexts","inputProps.requireBranchesToBeUpToDate","inputProps.requiredConversationResolution","inputProps.requireLastPushApproval","inputProps.requiredCommitSigning","inputProps.requiredLinearHistory","inputProps.token","parseRepoUrl","InputError","getOctokitOptions","Octokit","enableBranchProtectionOnDefaultRepoBranch"],"mappings":"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"}