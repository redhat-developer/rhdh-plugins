{"version":3,"file":"inputProperties.cjs.js","sources":["../../src/actions/inputProperties.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { z as zod } from 'zod';\n\nconst repoUrl = (z: typeof zod) =>\n  z.string({\n    description:\n      'Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the new repository name and `owner` is an organization or username',\n  });\n\nconst description = (z: typeof zod) =>\n  z\n    .string({\n      description: 'Repository Description',\n    })\n    .optional();\n\nconst homepage = (z: typeof zod) =>\n  z\n    .string({\n      description: 'Repository Homepage',\n    })\n    .optional();\n\nconst access = (z: typeof zod) =>\n  z\n    .string({\n      description:\n        'Sets an admin collaborator on the repository. Can either be a user reference different from `owner` in `repoUrl` or team reference, eg. `org/team-name`',\n    })\n    .optional();\n\nconst requireCodeOwnerReviews = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Require an approved review in PR including files with a designated Code Owner',\n    })\n    .optional();\n\nconst dismissStaleReviews = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'New reviewable commits pushed to a matching branch will dismiss pull request review approvals.',\n    })\n    .optional();\n\nconst requiredStatusCheckContexts = (z: typeof zod) =>\n  z\n    .array(z.string(), {\n      description:\n        'The list of status checks to require in order to merge into this branch',\n    })\n    .optional();\n\nconst requireBranchesToBeUpToDate = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Require branches to be up to date before merging. The default value is `true`',\n    })\n    .default(true)\n    .optional();\n\nconst requiredConversationResolution = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Requires all conversations on code to be resolved before a pull request can be merged into this branch',\n    })\n    .optional();\n\nconst requireLastPushApproval = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Whether the most recent push to a PR must be approved by someone other than the person who pushed it. The default value is `false`',\n    })\n    .default(false)\n    .optional();\n\nconst repoVisibility = (z: typeof zod) =>\n  z\n    .enum(['private', 'public', 'internal'], {\n      description: 'Repository Visibility',\n    })\n    .optional();\n\nconst deleteBranchOnMerge = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Delete the branch after merging the PR. The default value is `false`',\n    })\n    .default(false)\n    .optional();\n\nconst gitAuthorName = (z: typeof zod) =>\n  z\n    .string({\n      description:\n        'Sets the default author name for the commit. The default value is `Scaffolder`',\n    })\n    .default('Scaffolder')\n    .optional();\n\nconst gitAuthorEmail = (z: typeof zod) =>\n  z\n    .string({\n      description: `Sets the default author email for the commit.`,\n    })\n    .optional();\n\nconst allowMergeCommit = (z: typeof zod) =>\n  z\n    .boolean({\n      description: 'Allow merge commits. The default value is `true`',\n    })\n    .default(true)\n    .optional();\n\nconst allowSquashMerge = (z: typeof zod) =>\n  z\n    .boolean({\n      description: 'Allow squash merges. The default value is `true`',\n    })\n    .default(true)\n    .optional();\n\nconst allowUpdateBranch = (z: typeof zod) =>\n  z\n    .boolean({\n      description: 'Allow branch to be updated. The default value is `false`',\n    })\n    .default(false)\n    .optional();\n\nconst squashMergeCommitTitle = (z: typeof zod) =>\n  z\n    .enum(['PR_TITLE', 'COMMIT_OR_PR_TITLE'], {\n      description:\n        'Sets the default value for a squash merge commit title. The default value is `COMMIT_OR_PR_TITLE`',\n    })\n    .default('COMMIT_OR_PR_TITLE')\n    .optional();\n\nconst squashMergeCommitMessage = (z: typeof zod) =>\n  z\n    .enum(['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'], {\n      description:\n        'Sets the default value for a squash merge commit message. The default value is `COMMIT_MESSAGES`',\n    })\n    .default('COMMIT_MESSAGES')\n    .optional();\n\nconst allowRebaseMerge = (z: typeof zod) =>\n  z\n    .boolean({\n      description: 'Allow rebase merges. The default value is `true`',\n    })\n    .default(true)\n    .optional();\n\nconst allowAutoMerge = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Allow individual PRs to merge automatically when all merge requirements are met. The default value is `false`',\n    })\n    .default(false)\n    .optional();\n\nconst collaborators = (z: typeof zod) =>\n  z\n    .array(\n      z.union([\n        z.object({\n          access: z.string({\n            description: 'The type of access for the user',\n          }),\n          user: z.string({\n            description:\n              'The name of the user that will be added as a collaborator',\n          }),\n        }),\n        z.object({\n          access: z.string({\n            description: 'The type of access for the team',\n          }),\n          team: z.string({\n            description:\n              'The name of the team that will be added as a collaborator',\n          }),\n        }),\n      ]),\n      {\n        description: 'Provide additional users or teams with permissions',\n      },\n    )\n    .optional();\n\nconst hasProjects = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Enable projects for the repository. The default value is `true` unless the organization has disabled repository projects',\n    })\n    .optional();\n\nconst hasWiki = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Enable the wiki for the repository. The default value is `true`',\n    })\n    .default(true)\n    .optional();\n\nconst hasIssues = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Enable issues for the repository. The default value is `true`',\n    })\n    .default(true)\n    .optional();\n\nconst token = (z: typeof zod) =>\n  z\n    .string({\n      description: 'The token to use for authorization to GitHub',\n    })\n    .optional();\n\nconst topics = (z: typeof zod) =>\n  z\n    .array(z.string(), {\n      description: 'Adds topics to the repository',\n    })\n    .optional();\n\nconst defaultBranch = (z: typeof zod) =>\n  z\n    .string({\n      description: `Sets the default branch on the repository. The default value is 'master'`,\n    })\n    .default('master')\n    .optional();\n\nconst protectDefaultBranch = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Protect the default branch after creating the repository. The default value is `true`',\n    })\n    .default(true)\n    .optional();\n\nconst protectEnforceAdmins = (z: typeof zod) =>\n  z\n    .boolean({\n      description:\n        'Enforce admins to adhere to default branch protection. The default value is `true`',\n    })\n    .default(true)\n    .optional();\n\nconst bypassPullRequestAllowances = (z: typeof zod) =>\n  z\n    .object(\n      {\n        apps: z.array(z.string()).optional(),\n        users: z.array(z.string()).optional(),\n        teams: z.array(z.string()).optional(),\n      },\n      {\n        description:\n          'Allow specific users, teams, or apps to bypass pull request requirements.',\n      },\n    )\n    .optional();\n\nconst gitCommitMessage = (z: typeof zod) =>\n  z\n    .string({\n      description:\n        'Sets the commit message on the repository. The default value is `initial commit`',\n    })\n    .default('initial commit')\n    .optional();\n\nconst sourcePath = (z: typeof zod) =>\n  z\n    .string({\n      description:\n        'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n    })\n    .optional();\n\nconst requiredApprovingReviewCount = (z: typeof zod) =>\n  z\n    .number({\n      description:\n        'Specify the number of reviewers required to approve pull requests. Use a number between `1` and `6` or `0` to not require reviewers. Defaults to `1`.',\n    })\n    .optional();\n\nconst restrictions = (z: typeof zod) =>\n  z\n    .object(\n      {\n        apps: z.array(z.string()).optional(),\n        users: z.array(z.string()),\n        teams: z.array(z.string()),\n      },\n      {\n        description:\n          'Restrict who can push to the protected branch. User, app, and team restrictions are only available for organization-owned repositories.',\n      },\n    )\n    .optional();\n\nconst requiredCommitSigning = (z: typeof zod) =>\n  z\n    .boolean({\n      description: `Require commit signing so that you must sign commits on this branch.`,\n    })\n    .optional();\n\nconst requiredLinearHistory = (z: typeof zod) =>\n  z\n    .boolean({\n      description: `Prevent merge commits from being pushed to matching branches.`,\n    })\n    .optional();\n\nconst repoVariables = (z: typeof zod) =>\n  z\n    .record(z.string(), {\n      description: 'Variables attached to the repository',\n    })\n    .optional();\n\nconst secrets = (z: typeof zod) =>\n  z\n    .record(z.string(), {\n      description: 'Secrets attached to the repository',\n    })\n    .optional();\n\nconst oidcCustomization = (z: typeof zod) =>\n  z\n    .object(\n      {\n        useDefault: z\n          .boolean({\n            description: `Whether to use the default template or not. If true, includeClaimKeys must not be set.`,\n          })\n          .default(true),\n        includeClaimKeys: z\n          .array(z.string(), {\n            description: `Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.`,\n          })\n          .optional(),\n      },\n      {\n        description: `OIDC customization template attached to the repository.`,\n      },\n    )\n    .optional();\n\nconst customProperties = (z: typeof zod) =>\n  z\n    .record(z.union([z.string(), z.array(z.string())]), {\n      description:\n        'Custom properties to be added to the repository (note, this only works for organization repositories). All values must be strings',\n    })\n    .optional();\n\nconst subscribe = (z: typeof zod) =>\n  z\n    .boolean({\n      description: `Subscribe to the repository. The default value is 'false'`,\n    })\n    .optional();\n\nconst branch = (z: typeof zod) =>\n  z\n    .string({\n      description: `The branch to protect. Defaults to the repository's default branch`,\n    })\n    .optional();\n\nexport {\n  repoUrl,\n  description,\n  homepage,\n  access,\n  requireCodeOwnerReviews,\n  dismissStaleReviews,\n  requiredStatusCheckContexts,\n  requireBranchesToBeUpToDate,\n  requiredConversationResolution,\n  requireLastPushApproval,\n  repoVisibility,\n  deleteBranchOnMerge,\n  gitAuthorName,\n  gitAuthorEmail,\n  allowMergeCommit,\n  allowSquashMerge,\n  allowUpdateBranch,\n  squashMergeCommitTitle,\n  squashMergeCommitMessage,\n  allowRebaseMerge,\n  allowAutoMerge,\n  collaborators,\n  hasProjects,\n  hasWiki,\n  hasIssues,\n  token,\n  topics,\n  defaultBranch,\n  gitCommitMessage,\n  sourcePath,\n  repoVariables,\n  secrets,\n  oidcCustomization,\n  customProperties,\n  subscribe,\n  requiredApprovingReviewCount,\n  restrictions,\n  requiredCommitSigning,\n  requiredLinearHistory,\n  protectDefaultBranch,\n  protectEnforceAdmins,\n  bypassPullRequestAllowances,\n  branch,\n};\n"],"names":[],"mappings":"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"}