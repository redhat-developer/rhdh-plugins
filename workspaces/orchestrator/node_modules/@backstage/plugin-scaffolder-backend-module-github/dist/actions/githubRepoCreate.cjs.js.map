{"version":3,"file":"githubRepoCreate.cjs.js","sources":["../../src/actions/githubRepoCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { createGithubRepoWithCollaboratorsAndTopics } from './helpers';\nimport { getOctokitOptions } from '../util';\nimport * as inputProps from './inputProperties';\nimport * as outputProps from './outputProperties';\nimport { examples } from './githubRepoCreate.examples';\n\n/**\n * Creates a new action that initializes a git repository\n *\n * @public\n */\nexport function createGithubRepoCreateAction(options: {\n  integrations: ScmIntegrationRegistry;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction({\n    id: 'github:repo:create',\n    description: 'Creates a GitHub repository.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: inputProps.repoUrl,\n        description: inputProps.description,\n        homepage: inputProps.homepage,\n        access: inputProps.access,\n        requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n        bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n        requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n        restrictions: inputProps.restrictions,\n        requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n        requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n        requiredConversationResolution:\n          inputProps.requiredConversationResolution,\n        repoVisibility: inputProps.repoVisibility,\n        deleteBranchOnMerge: inputProps.deleteBranchOnMerge,\n        allowMergeCommit: inputProps.allowMergeCommit,\n        allowSquashMerge: inputProps.allowSquashMerge,\n        squashMergeCommitTitle: inputProps.squashMergeCommitTitle,\n        squashMergeCommitMessage: inputProps.squashMergeCommitMessage,\n        allowRebaseMerge: inputProps.allowRebaseMerge,\n        allowAutoMerge: inputProps.allowAutoMerge,\n        allowUpdateBranch: inputProps.allowUpdateBranch,\n        collaborators: inputProps.collaborators,\n        hasProjects: inputProps.hasProjects,\n        hasWiki: inputProps.hasWiki,\n        hasIssues: inputProps.hasIssues,\n        token: inputProps.token,\n        topics: inputProps.topics,\n        repoVariables: inputProps.repoVariables,\n        secrets: inputProps.secrets,\n        oidcCustomization: inputProps.oidcCustomization,\n        requiredCommitSigning: inputProps.requiredCommitSigning,\n        requiredLinearHistory: inputProps.requiredLinearHistory,\n        customProperties: inputProps.customProperties,\n        subscribe: inputProps.subscribe,\n      },\n      output: {\n        remoteUrl: outputProps.remoteUrl,\n        repoContentsUrl: outputProps.repoContentsUrl,\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        homepage,\n        access,\n        repoVisibility = 'private',\n        deleteBranchOnMerge = false,\n        allowMergeCommit = true,\n        allowSquashMerge = true,\n        squashMergeCommitTitle = 'COMMIT_OR_PR_TITLE',\n        squashMergeCommitMessage = 'COMMIT_MESSAGES',\n        allowRebaseMerge = true,\n        allowAutoMerge = false,\n        allowUpdateBranch = false,\n        collaborators,\n        hasProjects = undefined,\n        hasWiki = undefined,\n        hasIssues = undefined,\n        topics,\n        repoVariables,\n        secrets,\n        oidcCustomization,\n        customProperties,\n        subscribe,\n        token: providedToken,\n      } = ctx.input;\n\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        host,\n        owner,\n        repo,\n      });\n      const client = new Octokit({\n        ...octokitOptions,\n        log: ctx.logger,\n      });\n\n      const remoteUrl = await ctx.checkpoint({\n        key: `create.repo.and.topics.${owner}.${repo}`,\n        fn: async () => {\n          const newRepo = await createGithubRepoWithCollaboratorsAndTopics(\n            client,\n            repo,\n            owner,\n            repoVisibility,\n            description,\n            homepage,\n            deleteBranchOnMerge,\n            allowMergeCommit,\n            allowSquashMerge,\n            squashMergeCommitTitle,\n            squashMergeCommitMessage,\n            allowRebaseMerge,\n            allowAutoMerge,\n            allowUpdateBranch,\n            access,\n            collaborators,\n            hasProjects,\n            hasWiki,\n            hasIssues,\n            topics,\n            repoVariables,\n            secrets,\n            oidcCustomization,\n            customProperties,\n            subscribe,\n            ctx.logger,\n          );\n          return newRepo.clone_url;\n        },\n      });\n\n      ctx.output('remoteUrl', remoteUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","inputProps.repoUrl","inputProps.description","inputProps.homepage","inputProps.access","inputProps.requireCodeOwnerReviews","inputProps.bypassPullRequestAllowances","inputProps.requiredApprovingReviewCount","inputProps.restrictions","inputProps.requiredStatusCheckContexts","inputProps.requireBranchesToBeUpToDate","inputProps.requiredConversationResolution","inputProps.repoVisibility","inputProps.deleteBranchOnMerge","inputProps.allowMergeCommit","inputProps.allowSquashMerge","inputProps.squashMergeCommitTitle","inputProps.squashMergeCommitMessage","inputProps.allowRebaseMerge","inputProps.allowAutoMerge","inputProps.allowUpdateBranch","inputProps.collaborators","inputProps.hasProjects","inputProps.hasWiki","inputProps.hasIssues","inputProps.token","inputProps.topics","inputProps.repoVariables","inputProps.secrets","inputProps.oidcCustomization","inputProps.requiredCommitSigning","inputProps.requiredLinearHistory","inputProps.customProperties","inputProps.subscribe","outputProps.remoteUrl","outputProps.repoContentsUrl","parseRepoUrl","InputError","getOctokitOptions","Octokit","createGithubRepoWithCollaboratorsAndTopics"],"mappings":"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"}