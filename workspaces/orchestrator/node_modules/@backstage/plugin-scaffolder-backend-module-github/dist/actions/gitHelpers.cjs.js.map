{"version":3,"file":"gitHelpers.cjs.js","sources":["../../src/actions/gitHelpers.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\ntype BranchProtectionOptions = {\n  client: Octokit;\n  owner: string;\n  repoName: string;\n  logger: LoggerService;\n  requireCodeOwnerReviews: boolean;\n  requiredStatusCheckContexts?: string[];\n  bypassPullRequestAllowances?: {\n    users?: string[];\n    teams?: string[];\n    apps?: string[];\n  };\n  requiredApprovingReviewCount?: number;\n  restrictions?: {\n    users: string[];\n    teams: string[];\n    apps?: string[];\n  };\n  requireBranchesToBeUpToDate?: boolean;\n  requiredConversationResolution?: boolean;\n  requireLastPushApproval: boolean;\n  defaultBranch?: string;\n  enforceAdmins?: boolean;\n  dismissStaleReviews?: boolean;\n  requiredCommitSigning?: boolean;\n  requiredLinearHistory?: boolean;\n};\n\nexport const enableBranchProtectionOnDefaultRepoBranch = async ({\n  repoName,\n  client,\n  owner,\n  logger,\n  requireCodeOwnerReviews,\n  bypassPullRequestAllowances,\n  requiredApprovingReviewCount,\n  restrictions,\n  requiredStatusCheckContexts = [],\n  requireBranchesToBeUpToDate = true,\n  requiredConversationResolution = false,\n  requireLastPushApproval = false,\n  defaultBranch = 'master',\n  enforceAdmins = true,\n  dismissStaleReviews = false,\n  requiredCommitSigning = false,\n  requiredLinearHistory = false,\n}: BranchProtectionOptions): Promise<void> => {\n  const tryOnce = async () => {\n    try {\n      await client.rest.repos.updateBranchProtection({\n        mediaType: {\n          /**\n           * ðŸ‘‡ we need this preview because allowing a custom\n           * reviewer count on branch protection is a preview\n           * feature\n           *\n           * More here: https://docs.github.com/en/rest/overview/api-previews#require-multiple-approving-reviews\n           */\n          previews: ['luke-cage-preview'],\n        },\n        owner,\n        repo: repoName,\n        branch: defaultBranch,\n        required_status_checks: {\n          strict: requireBranchesToBeUpToDate,\n          contexts: requiredStatusCheckContexts,\n        },\n        restrictions: restrictions ?? null,\n        enforce_admins: enforceAdmins,\n        required_pull_request_reviews: {\n          required_approving_review_count: requiredApprovingReviewCount,\n          require_code_owner_reviews: requireCodeOwnerReviews,\n          bypass_pull_request_allowances: bypassPullRequestAllowances,\n          dismiss_stale_reviews: dismissStaleReviews,\n          require_last_push_approval: requireLastPushApproval,\n        },\n        required_conversation_resolution: requiredConversationResolution,\n        required_linear_history: requiredLinearHistory,\n      });\n\n      if (requiredCommitSigning) {\n        await client.rest.repos.createCommitSignatureProtection({\n          owner,\n          repo: repoName,\n          branch: defaultBranch,\n        });\n      }\n    } catch (e) {\n      assertError(e);\n      if (\n        e.message.includes(\n          'Upgrade to GitHub Pro or make this repository public to enable this feature',\n        )\n      ) {\n        logger.warn(\n          'Branch protection was not enabled as it requires GitHub Pro for private repositories',\n        );\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  try {\n    await tryOnce();\n  } catch (e) {\n    if (!e.message.includes('Branch not found')) {\n      throw e;\n    }\n\n    // GitHub has eventual consistency. Fail silently, wait, and try again.\n    await new Promise(resolve => setTimeout(resolve, 600));\n    await tryOnce();\n  }\n};\n\nexport function entityRefToName(name: string): string {\n  return name.replace(/^.*[:/]/g, '');\n}\n"],"names":["assertError"],"mappings":";;;;AAgDO,MAAM,4CAA4C,OAAO;AAAA,EAC9D,QAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,uBAAA;AAAA,EACA,2BAAA;AAAA,EACA,4BAAA;AAAA,EACA,YAAA;AAAA,EACA,8BAA8B,EAAC;AAAA,EAC/B,2BAAA,GAA8B,IAAA;AAAA,EAC9B,8BAAA,GAAiC,KAAA;AAAA,EACjC,uBAAA,GAA0B,KAAA;AAAA,EAC1B,aAAA,GAAgB,QAAA;AAAA,EAChB,aAAA,GAAgB,IAAA;AAAA,EAChB,mBAAA,GAAsB,KAAA;AAAA,EACtB,qBAAA,GAAwB,KAAA;AAAA,EACxB,qBAAA,GAAwB;AAC1B,CAAA,KAA8C;AAC5C,EAAA,MAAM,UAAU,YAAY;AAC1B,IAAA,IAAI;AACF,MAAA,MAAM,MAAA,CAAO,IAAA,CAAK,KAAA,CAAM,sBAAA,CAAuB;AAAA,QAC7C,SAAA,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQT,QAAA,EAAU,CAAC,mBAAmB;AAAA,SAChC;AAAA,QACA,KAAA;AAAA,QACA,IAAA,EAAM,QAAA;AAAA,QACN,MAAA,EAAQ,aAAA;AAAA,QACR,sBAAA,EAAwB;AAAA,UACtB,MAAA,EAAQ,2BAAA;AAAA,UACR,QAAA,EAAU;AAAA,SACZ;AAAA,QACA,cAAc,YAAA,IAAgB,IAAA;AAAA,QAC9B,cAAA,EAAgB,aAAA;AAAA,QAChB,6BAAA,EAA+B;AAAA,UAC7B,+BAAA,EAAiC,4BAAA;AAAA,UACjC,0BAAA,EAA4B,uBAAA;AAAA,UAC5B,8BAAA,EAAgC,2BAAA;AAAA,UAChC,qBAAA,EAAuB,mBAAA;AAAA,UACvB,0BAAA,EAA4B;AAAA,SAC9B;AAAA,QACA,gCAAA,EAAkC,8BAAA;AAAA,QAClC,uBAAA,EAAyB;AAAA,OAC1B,CAAA;AAED,MAAA,IAAI,qBAAA,EAAuB;AACzB,QAAA,MAAM,MAAA,CAAO,IAAA,CAAK,KAAA,CAAM,+BAAA,CAAgC;AAAA,UACtD,KAAA;AAAA,UACA,IAAA,EAAM,QAAA;AAAA,UACN,MAAA,EAAQ;AAAA,SACT,CAAA;AAAA,MACH;AAAA,IACF,SAAS,CAAA,EAAG;AACV,MAAAA,kBAAA,CAAY,CAAC,CAAA;AACb,MAAA,IACE,EAAE,OAAA,CAAQ,QAAA;AAAA,QACR;AAAA,OACF,EACA;AACA,QAAA,MAAA,CAAO,IAAA;AAAA,UACL;AAAA,SACF;AAAA,MACF,CAAA,MAAO;AACL,QAAA,MAAM,CAAA;AAAA,MACR;AAAA,IACF;AAAA,EACF,CAAA;AAEA,EAAA,IAAI;AACF,IAAA,MAAM,OAAA,EAAQ;AAAA,EAChB,SAAS,CAAA,EAAG;AACV,IAAA,IAAI,CAAC,CAAA,CAAE,OAAA,CAAQ,QAAA,CAAS,kBAAkB,CAAA,EAAG;AAC3C,MAAA,MAAM,CAAA;AAAA,IACR;AAGA,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,GAAG,CAAC,CAAA;AACrD,IAAA,MAAM,OAAA,EAAQ;AAAA,EAChB;AACF;AAEO,SAAS,gBAAgB,IAAA,EAAsB;AACpD,EAAA,OAAO,IAAA,CAAK,OAAA,CAAQ,UAAA,EAAY,EAAE,CAAA;AACpC;;;;;"}