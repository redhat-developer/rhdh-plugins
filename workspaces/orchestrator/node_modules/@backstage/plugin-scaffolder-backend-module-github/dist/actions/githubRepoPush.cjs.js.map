{"version":3,"file":"githubRepoPush.cjs.js","sources":["../../src/actions/githubRepoPush.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { initRepoPushAndProtect } from './helpers';\nimport { getOctokitOptions } from '../util';\nimport * as inputProps from './inputProperties';\nimport * as outputProps from './outputProperties';\nimport { examples } from './githubRepoPush.examples';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to GitHub.\n *\n * @public\n */\nexport function createGithubRepoPushAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, config, githubCredentialsProvider } = options;\n\n  return createTemplateAction({\n    id: 'github:repo:push',\n    description:\n      'Initializes a git repository of contents in workspace and publishes it to GitHub.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: inputProps.repoUrl,\n        requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n        dismissStaleReviews: inputProps.dismissStaleReviews,\n        requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n        bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n        requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n        restrictions: inputProps.restrictions,\n        requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n        requiredConversationResolution:\n          inputProps.requiredConversationResolution,\n        requireLastPushApproval: inputProps.requireLastPushApproval,\n        defaultBranch: inputProps.defaultBranch,\n        protectDefaultBranch: inputProps.protectDefaultBranch,\n        protectEnforceAdmins: inputProps.protectEnforceAdmins,\n        gitCommitMessage: inputProps.gitCommitMessage,\n        gitAuthorName: inputProps.gitAuthorName,\n        gitAuthorEmail: inputProps.gitAuthorEmail,\n        sourcePath: inputProps.sourcePath,\n        token: inputProps.token,\n        requiredCommitSigning: inputProps.requiredCommitSigning,\n        requiredLinearHistory: inputProps.requiredLinearHistory,\n      },\n      output: {\n        remoteUrl: outputProps.remoteUrl,\n        repoContentsUrl: outputProps.repoContentsUrl,\n        commitHash: outputProps.commitHash,\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        defaultBranch = 'main',\n        protectDefaultBranch = true,\n        protectEnforceAdmins = true,\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n        requireCodeOwnerReviews = false,\n        dismissStaleReviews = false,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount = 1,\n        restrictions,\n        requiredStatusCheckContexts = [],\n        requireBranchesToBeUpToDate = true,\n        requiredConversationResolution = false,\n        requireLastPushApproval = false,\n        token: providedToken,\n        requiredCommitSigning = false,\n        requiredLinearHistory = false,\n      } = ctx.input;\n\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        host,\n        owner,\n        repo,\n      });\n\n      const client = new Octokit({\n        ...octokitOptions,\n        log: ctx.logger,\n      });\n\n      const targetRepo = await client.rest.repos.get({ owner, repo });\n\n      const remoteUrl = targetRepo.data.clone_url;\n      const repoContentsUrl = `${targetRepo.data.html_url}/blob/${defaultBranch}`;\n\n      const commitHash = await ctx.checkpoint({\n        key: `init.repo.publish.${owner}.${client}.${repo}`,\n        fn: async () => {\n          const { commitHash: hash } = await initRepoPushAndProtect(\n            remoteUrl,\n            octokitOptions.auth,\n            ctx.workspacePath,\n            ctx.input.sourcePath,\n            defaultBranch,\n            protectDefaultBranch,\n            protectEnforceAdmins,\n            owner,\n            client,\n            repo,\n            requireCodeOwnerReviews,\n            bypassPullRequestAllowances,\n            requiredApprovingReviewCount,\n            restrictions,\n            requiredStatusCheckContexts,\n            requireBranchesToBeUpToDate,\n            requiredConversationResolution,\n            requireLastPushApproval,\n            config,\n            ctx.logger,\n            gitCommitMessage,\n            gitAuthorName,\n            gitAuthorEmail,\n            dismissStaleReviews,\n            requiredCommitSigning,\n            requiredLinearHistory,\n          );\n          return hash;\n        },\n      });\n\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('commitHash', commitHash);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","inputProps.repoUrl","inputProps.requireCodeOwnerReviews","inputProps.dismissStaleReviews","inputProps.requiredStatusCheckContexts","inputProps.bypassPullRequestAllowances","inputProps.requiredApprovingReviewCount","inputProps.restrictions","inputProps.requireBranchesToBeUpToDate","inputProps.requiredConversationResolution","inputProps.requireLastPushApproval","inputProps.defaultBranch","inputProps.protectDefaultBranch","inputProps.protectEnforceAdmins","inputProps.gitCommitMessage","inputProps.gitAuthorName","inputProps.gitAuthorEmail","inputProps.sourcePath","inputProps.token","inputProps.requiredCommitSigning","inputProps.requiredLinearHistory","outputProps.remoteUrl","outputProps.repoContentsUrl","outputProps.commitHash","parseRepoUrl","InputError","getOctokitOptions","Octokit","initRepoPushAndProtect"],"mappings":"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"}