import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, useEffect } from 'react';

const DEFAULT_WARNING_CODES = [
  "EXTENSION_IGNORED",
  "INVALID_EXTENSION_CONFIG_KEY",
  "EXTENSION_INPUT_DATA_IGNORED",
  "EXTENSION_OUTPUT_IGNORED"
];
function AppErrorItem(props) {
  const { context } = props.error;
  const node = "node" in context ? context.node : void 0;
  const extensionId = "extensionId" in context ? context.extensionId : node?.spec.id;
  const routeId = "routeId" in context ? context.routeId : void 0;
  const plugin = "plugin" in context ? context.plugin : node?.spec.plugin;
  const pluginId = plugin?.id ?? "N/A";
  const [info, setInfo] = useState(void 0);
  useEffect(() => {
    plugin?.info().then(setInfo, (error) => {
      console.error(`Failed to load info for plugin ${plugin.id}: ${error}`);
    });
  }, [plugin]);
  return /* @__PURE__ */ jsxs("div", { children: [
    /* @__PURE__ */ jsx("b", { children: props.error.code }),
    ": ",
    props.error.message,
    /* @__PURE__ */ jsxs("pre", { style: { marginLeft: "1rem" }, children: [
      extensionId && /* @__PURE__ */ jsxs("div", { children: [
        "extensionId: ",
        extensionId
      ] }),
      routeId && /* @__PURE__ */ jsxs("div", { children: [
        "routeId: ",
        routeId
      ] }),
      pluginId && /* @__PURE__ */ jsxs("div", { children: [
        "pluginId: ",
        pluginId
      ] }),
      info && /* @__PURE__ */ jsxs("div", { children: [
        "package: ",
        info.packageName,
        "@",
        info.version
      ] })
    ] })
  ] });
}
function AppErrorPage(props) {
  return /* @__PURE__ */ jsxs("div", { style: { margin: "1rem" }, children: [
    /* @__PURE__ */ jsx("h2", { children: "App startup failed" }),
    props.errors.map((error, index) => /* @__PURE__ */ jsx(AppErrorItem, { error }, index))
  ] });
}
function maybeCreateErrorPage(app, options) {
  if (!app.errors) {
    return void 0;
  }
  const errors = new Array();
  const warnings = new Array();
  const warningCodes = new Set(options?.warningCodes ?? DEFAULT_WARNING_CODES);
  for (const error of app.errors) {
    if (warningCodes.has(error.code)) {
      warnings.push(error);
    } else {
      errors.push(error);
    }
  }
  if (warnings.length > 0) {
    console.warn("App startup encountered warnings:");
    for (const warning of warnings) {
      console.warn(`${warning.code}: ${warning.message}`);
    }
  }
  if (errors.length === 0) {
    return void 0;
  }
  return /* @__PURE__ */ jsx(AppErrorPage, { errors });
}

export { maybeCreateErrorPage };
//# sourceMappingURL=maybeCreateErrorPage.esm.js.map
