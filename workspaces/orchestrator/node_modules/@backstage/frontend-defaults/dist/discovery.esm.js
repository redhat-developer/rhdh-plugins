import { ConfigReader } from '@backstage/config';
import { isBackstageFeatureLoader } from './resolution.esm.js';

function readPackageDetectionConfig(config) {
  const packages = config.getOptional("app.packages") ?? config.getOptional("app.experimental.packages");
  if (packages === void 0 || packages === null) {
    return void 0;
  }
  if (typeof packages === "string") {
    if (packages !== "all") {
      throw new Error(
        `Invalid app.packages mode, got '${packages}', expected 'all'`
      );
    }
    return {};
  }
  if (typeof packages !== "object" || Array.isArray(packages)) {
    throw new Error("Invalid config at 'app.packages', expected object");
  }
  const packagesConfig = new ConfigReader(packages, "app.packages");
  return {
    include: packagesConfig.getOptionalStringArray("include"),
    exclude: packagesConfig.getOptionalStringArray("exclude")
  };
}
function discoverAvailableFeatures(config) {
  const discovered = window["__@backstage/discovered__"];
  const detection = readPackageDetectionConfig(config);
  if (!detection) {
    return { features: [] };
  }
  return {
    features: discovered?.modules.filter(({ name }) => {
      if (detection.exclude?.includes(name)) {
        return false;
      }
      if (detection.include && !detection.include.includes(name)) {
        return false;
      }
      return true;
    }).map((m) => m.default).filter(isFeatureOrLoader) ?? []
  };
}
function isBackstageFeature(obj) {
  if (obj !== null && typeof obj === "object" && "$$type" in obj) {
    return obj.$$type === "@backstage/FrontendPlugin" || obj.$$type === "@backstage/FrontendModule";
  }
  return false;
}
function isFeatureOrLoader(obj) {
  return isBackstageFeature(obj) || isBackstageFeatureLoader(obj);
}

export { discoverAvailableFeatures };
//# sourceMappingURL=discovery.esm.js.map
