import { jsx, jsxs } from 'react/jsx-runtime';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import CardHeader from '@material-ui/core/CardHeader';
import Divider from '@material-ui/core/Divider';
import { makeStyles, withStyles } from '@material-ui/core/styles';
import TabUI from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import { useState, Children, isValidElement } from 'react';
import { BottomLink } from '../BottomLink/BottomLink.esm.js';
import { ErrorBoundary } from '../ErrorBoundary/ErrorBoundary.esm.js';

const useTabsStyles = makeStyles(
  (theme) => ({
    root: {
      padding: theme.spacing(0, 2, 0, 2.5),
      minHeight: theme.spacing(3)
    },
    indicator: {
      backgroundColor: theme.palette.info.main,
      height: theme.spacing(0.3)
    }
  }),
  { name: "BackstageTabbedCard" }
);
const BoldHeader = withStyles(
  (theme) => ({
    root: { padding: theme.spacing(2, 2, 2, 2.5), display: "inline-block" },
    title: { fontWeight: 700 },
    subheader: { paddingTop: theme.spacing(1) }
  }),
  { name: "BackstageTabbedCardBoldHeader" }
)(CardHeader);
function TabbedCard(props) {
  const {
    slackChannel,
    errorBoundaryProps,
    children,
    title,
    deepLink,
    value,
    onChange
  } = props;
  const tabsClasses = useTabsStyles();
  const [selectedIndex, selectIndex] = useState(0);
  const handleChange = onChange ? onChange : (_ev, newSelectedIndex) => selectIndex(newSelectedIndex);
  let selectedTabContent;
  if (!value) {
    Children.map(children, (child, index) => {
      if (isValidElement(child) && index === selectedIndex) {
        selectedTabContent = child?.props.children;
      }
    });
  } else {
    Children.map(children, (child) => {
      if (isValidElement(child) && child?.props.value === value) {
        selectedTabContent = child?.props.children;
      }
    });
  }
  const errProps = errorBoundaryProps || (slackChannel ? { slackChannel } : {});
  return /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(ErrorBoundary, { ...errProps, children: [
    title && /* @__PURE__ */ jsx(BoldHeader, { title }),
    /* @__PURE__ */ jsx(
      Tabs,
      {
        classes: tabsClasses,
        value: value || selectedIndex,
        onChange: handleChange,
        children
      }
    ),
    /* @__PURE__ */ jsx(Divider, {}),
    /* @__PURE__ */ jsx(CardContent, { children: selectedTabContent }),
    deepLink && /* @__PURE__ */ jsx(BottomLink, { ...deepLink })
  ] }) });
}
const useCardTabStyles = makeStyles(
  (theme) => ({
    root: {
      minWidth: theme.spacing(6),
      minHeight: theme.spacing(3),
      margin: theme.spacing(0, 2, 0, 0),
      padding: theme.spacing(0.5, 0, 0.5, 0),
      textTransform: "none",
      "&:hover": {
        opacity: 1,
        backgroundColor: "transparent",
        color: theme.palette.text.primary
      }
    },
    selected: {
      fontWeight: theme.typography.fontWeightBold
    }
  }),
  { name: "BackstageCardTab" }
);
function CardTab(props) {
  const { children, ...restProps } = props;
  const classes = useCardTabStyles();
  return /* @__PURE__ */ jsx(TabUI, { disableRipple: true, classes, ...restProps });
}

export { CardTab, TabbedCard };
//# sourceMappingURL=TabbedCard.esm.js.map
