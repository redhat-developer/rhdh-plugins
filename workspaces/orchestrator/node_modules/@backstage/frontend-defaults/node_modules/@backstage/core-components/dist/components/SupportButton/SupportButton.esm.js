import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useApi, configApiRef, useApp } from '@backstage/core-plugin-api';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import DialogActions from '@material-ui/core/DialogActions';
import IconButton from '@material-ui/core/IconButton';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import MenuList from '@material-ui/core/MenuList';
import Popover from '@material-ui/core/Popover';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import useMediaQuery from '@material-ui/core/useMediaQuery';
import { useState, Children } from 'react';
import 'lodash';
import 'qs';
import 'react-router-dom';
import '@react-hookz/web';
import { useSupportConfig } from '../../hooks/useSupportConfig.esm.js';
import { HelpIcon } from '../../icons/icons.esm.js';
import { Link } from '../Link/Link.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles(
  {
    popoverList: {
      minWidth: 260,
      maxWidth: 400
    },
    menuItem: {
      whiteSpace: "normal"
    }
  },
  { name: "BackstageSupportButton" }
);
const SupportIcon = ({ icon }) => {
  const app = useApp();
  const Icon = icon ? app.getSystemIcon(icon) ?? HelpIcon : HelpIcon;
  return /* @__PURE__ */ jsx(Icon, {});
};
const SupportLink = ({ link }) => /* @__PURE__ */ jsx(Link, { to: link.url, children: link.title ?? link.url });
const SupportListItem = ({ item }) => {
  return /* @__PURE__ */ jsxs(MenuItem, { button: false, children: [
    /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(SupportIcon, { icon: item.icon }) }),
    /* @__PURE__ */ jsx(
      ListItemText,
      {
        primary: item.title,
        secondary: item.links?.reduce(
          (prev, link, idx) => [
            ...prev,
            idx > 0 && /* @__PURE__ */ jsx("br", {}, idx),
            /* @__PURE__ */ jsx(SupportLink, { link }, link.url)
          ],
          []
        )
      }
    )
  ] });
};
function SupportButton(props) {
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const { title, items, children } = props;
  const { items: configItems } = useSupportConfig();
  const [popoverOpen, setPopoverOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const classes = useStyles();
  const supportConfig = useApi(configApiRef).getOptionalConfig("app.support");
  const isSmallScreen = useMediaQuery(
    (theme) => theme.breakpoints.down("sm")
  );
  const onClickHandler = (event) => {
    setAnchorEl(event.currentTarget);
    setPopoverOpen(true);
  };
  const popoverCloseHandler = () => {
    setPopoverOpen(false);
  };
  if (!supportConfig) {
    return null;
  }
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Box, { display: "flex", ml: 1, children: isSmallScreen ? /* @__PURE__ */ jsx(
      IconButton,
      {
        color: "primary",
        size: "small",
        onClick: onClickHandler,
        "data-testid": "support-button",
        "aria-label": "Support",
        children: /* @__PURE__ */ jsx(HelpIcon, {})
      }
    ) : /* @__PURE__ */ jsx(
      Button,
      {
        "data-testid": "support-button",
        "aria-label": "Support",
        color: "primary",
        onClick: onClickHandler,
        startIcon: /* @__PURE__ */ jsx(HelpIcon, {}),
        children: t("supportButton.title")
      }
    ) }),
    /* @__PURE__ */ jsxs(
      Popover,
      {
        "data-testid": "support-button-popover",
        open: popoverOpen,
        anchorEl,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "right"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "right"
        },
        onClose: popoverCloseHandler,
        children: [
          /* @__PURE__ */ jsxs(
            MenuList,
            {
              className: classes.popoverList,
              autoFocusItem: Boolean(anchorEl),
              children: [
                title && /* @__PURE__ */ jsx(
                  MenuItem,
                  {
                    button: false,
                    alignItems: "flex-start",
                    className: classes.menuItem,
                    children: /* @__PURE__ */ jsx(Typography, { variant: "subtitle1", children: title })
                  }
                ),
                Children.map(children, (child, i) => /* @__PURE__ */ jsx(
                  MenuItem,
                  {
                    button: false,
                    alignItems: "flex-start",
                    className: classes.menuItem,
                    children: child
                  },
                  `child-${i}`
                )),
                (items ?? configItems).map((item, i) => /* @__PURE__ */ jsx(SupportListItem, { item }, `item-${i}`))
              ]
            }
          ),
          /* @__PURE__ */ jsx(DialogActions, { children: /* @__PURE__ */ jsx(
            Button,
            {
              color: "primary",
              onClick: popoverCloseHandler,
              "aria-label": "Close",
              children: t("supportButton.close")
            }
          ) })
        ]
      }
    )
  ] });
}

export { SupportButton };
//# sourceMappingURL=SupportButton.esm.js.map
