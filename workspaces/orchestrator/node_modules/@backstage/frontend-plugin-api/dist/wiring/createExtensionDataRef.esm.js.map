{"version":3,"file":"createExtensionDataRef.esm.js","sources":["../../src/wiring/createExtensionDataRef.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @public */\nexport type ExtensionDataValue<TData, TId extends string> = {\n  readonly $$type: '@backstage/ExtensionDataValue';\n  readonly id: TId;\n  readonly value: TData;\n};\n\n/** @public */\nexport type ExtensionDataRef<\n  TData = unknown,\n  TId extends string = string,\n  TConfig extends { optional?: true } = { optional?: true },\n> = {\n  readonly $$type: '@backstage/ExtensionDataRef';\n  readonly id: TId;\n  readonly T: TData;\n  readonly config: TConfig;\n};\n\n/** @public */\nexport type ExtensionDataRefToValue<TDataRef extends AnyExtensionDataRef> =\n  TDataRef extends ExtensionDataRef<infer IData, infer IId, any>\n    ? ExtensionDataValue<IData, IId>\n    : never;\n\n/**\n * @deprecated Use `ExtensionDataRef` without type parameters instead.\n * @public\n */\nexport type AnyExtensionDataRef = ExtensionDataRef;\n\n/** @public */\nexport interface ConfigurableExtensionDataRef<\n  TData,\n  TId extends string,\n  TConfig extends { optional?: true } = {},\n> extends ExtensionDataRef<TData, TId, TConfig> {\n  optional(): ConfigurableExtensionDataRef<\n    TData,\n    TId,\n    TConfig & { optional: true }\n  >;\n  (t: TData): ExtensionDataValue<TData, TId>;\n}\n\n/** @public */\nexport function createExtensionDataRef<TData>(): {\n  with<TId extends string>(options: {\n    id: TId;\n  }): ConfigurableExtensionDataRef<TData, TId>;\n} {\n  const createRef = <TId extends string>(refId: TId) =>\n    Object.assign(\n      (value: TData): ExtensionDataValue<TData, TId> => ({\n        $$type: '@backstage/ExtensionDataValue',\n        id: refId,\n        value,\n      }),\n      {\n        id: refId,\n        $$type: '@backstage/ExtensionDataRef',\n        config: {},\n        optional() {\n          return {\n            ...this,\n            config: { ...this.config, optional: true },\n          };\n        },\n        toString() {\n          const optional = Boolean(this.config.optional);\n          return `ExtensionDataRef{id=${refId},optional=${optional}}`;\n        },\n      } as ConfigurableExtensionDataRef<TData, TId, { optional?: true }>,\n    );\n  return {\n    with<TId extends string>(options: { id: TId }) {\n      return createRef(options.id);\n    },\n  };\n}\n"],"names":[],"mappings":"AA8DO,SAAS,sBAAA,GAId;AACA,EAAA,MAAM,SAAA,GAAY,CAAqB,KAAA,KACrC,MAAA,CAAO,MAAA;AAAA,IACL,CAAC,KAAA,MAAkD;AAAA,MACjD,MAAA,EAAQ,+BAAA;AAAA,MACR,EAAA,EAAI,KAAA;AAAA,MACJ;AAAA,KACF,CAAA;AAAA,IACA;AAAA,MACE,EAAA,EAAI,KAAA;AAAA,MACJ,MAAA,EAAQ,6BAAA;AAAA,MACR,QAAQ,EAAC;AAAA,MACT,QAAA,GAAW;AACT,QAAA,OAAO;AAAA,UACL,GAAG,IAAA;AAAA,UACH,QAAQ,EAAE,GAAG,IAAA,CAAK,MAAA,EAAQ,UAAU,IAAA;AAAK,SAC3C;AAAA,MACF,CAAA;AAAA,MACA,QAAA,GAAW;AACT,QAAA,MAAM,QAAA,GAAW,OAAA,CAAQ,IAAA,CAAK,MAAA,CAAO,QAAQ,CAAA;AAC7C,QAAA,OAAO,CAAA,oBAAA,EAAuB,KAAK,CAAA,UAAA,EAAa,QAAQ,CAAA,CAAA,CAAA;AAAA,MAC1D;AAAA;AACF,GACF;AACF,EAAA,OAAO;AAAA,IACL,KAAyB,OAAA,EAAsB;AAC7C,MAAA,OAAO,SAAA,CAAU,QAAQ,EAAE,CAAA;AAAA,IAC7B;AAAA,GACF;AACF;;;;"}