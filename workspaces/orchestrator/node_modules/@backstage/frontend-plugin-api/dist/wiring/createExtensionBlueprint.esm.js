import { createExtension, ctxParamsSymbol } from './createExtension.esm.js';
import { resolveInputOverrides } from './resolveInputOverrides.esm.js';
import { OpaqueType } from '../opaque-internal/src/OpaqueType.esm.js';
import { createExtensionDataContainer } from '../frontend-internal/src/wiring/createExtensionDataContainer.esm.js';

const OpaqueBlueprintParams = OpaqueType.create({
  type: "@backstage/BlueprintParams",
  versions: ["v1"]
});
function createExtensionBlueprintParams(params) {
  return OpaqueBlueprintParams.createInstance("v1", { T: null, params });
}
function unwrapParamsFactory(params, defineParams, kind) {
  const paramDefinition = params(defineParams);
  try {
    return OpaqueBlueprintParams.toInternal(paramDefinition).params;
  } catch (e) {
    throw new TypeError(
      `Invalid invocation of blueprint with kind '${kind}', the parameter definition callback function did not return a valid parameter definition object; Caused by: ${e.message}`
    );
  }
}
function unwrapParams(params, ctx, defineParams, kind) {
  const overrideParams = ctx[ctxParamsSymbol];
  if (defineParams) {
    if (overrideParams) {
      if (typeof overrideParams !== "function") {
        throw new TypeError(
          `Invalid extension override of blueprint with kind '${kind}', the override params were passed as a plain object, but this blueprint requires them to be passed in callback form`
        );
      }
      return unwrapParamsFactory(overrideParams, defineParams, kind);
    }
    if (typeof params !== "function") {
      throw new TypeError(
        `Invalid invocation of blueprint with kind '${kind}', the parameters where passed as a plain object, but this blueprint requires them to be passed in callback form`
      );
    }
    return unwrapParamsFactory(params, defineParams, kind);
  }
  const base = typeof params === "function" ? unwrapParamsFactory(
    params,
    createExtensionBlueprintParams,
    kind
  ) : params;
  const overrides = typeof overrideParams === "function" ? unwrapParamsFactory(
    overrideParams,
    createExtensionBlueprintParams,
    kind
  ) : overrideParams;
  return {
    ...base,
    ...overrides
  };
}
function createExtensionBlueprint(options) {
  const defineParams = options.defineParams;
  return {
    dataRefs: options.dataRefs,
    make(args) {
      return createExtension({
        kind: options.kind,
        name: args.name,
        attachTo: args.attachTo ?? options.attachTo,
        disabled: args.disabled ?? options.disabled,
        inputs: options.inputs,
        output: options.output,
        config: options.config,
        factory: (ctx) => options.factory(
          unwrapParams(args.params, ctx, defineParams, options.kind),
          ctx
        )
      });
    },
    makeWithOverrides(args) {
      return createExtension({
        kind: options.kind,
        name: args.name,
        attachTo: args.attachTo ?? options.attachTo,
        disabled: args.disabled ?? options.disabled,
        inputs: { ...args.inputs, ...options.inputs },
        output: args.output ?? options.output,
        config: options.config || args.config ? {
          schema: {
            ...options.config?.schema,
            ...args.config?.schema
          }
        } : void 0,
        factory: (ctx) => {
          const { node, config, inputs, apis } = ctx;
          return args.factory(
            (innerParams, innerContext) => {
              return createExtensionDataContainer(
                options.factory(
                  unwrapParams(innerParams, ctx, defineParams, options.kind),
                  {
                    apis,
                    node,
                    config: innerContext?.config ?? config,
                    inputs: resolveInputOverrides(
                      options.inputs,
                      inputs,
                      innerContext?.inputs
                    )
                  }
                ),
                "original blueprint factory",
                options.output
              );
            },
            {
              apis,
              node,
              config,
              inputs
            }
          );
        }
      });
    }
  };
}

export { createExtensionBlueprint, createExtensionBlueprintParams };
//# sourceMappingURL=createExtensionBlueprint.esm.js.map
