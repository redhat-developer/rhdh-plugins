{"version":3,"file":"createFrontendPlugin.esm.js","sources":["../../src/wiring/createFrontendPlugin.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OpaqueExtensionDefinition,\n  OpaqueFrontendPlugin,\n} from '@internal/frontend';\nimport { ExtensionDefinition } from './createExtension';\nimport {\n  Extension,\n  resolveExtensionDefinition,\n} from './resolveExtensionDefinition';\nimport { FeatureFlagConfig } from './types';\nimport { MakeSortedExtensionsMap } from './MakeSortedExtensionsMap';\nimport { JsonObject } from '@backstage/types';\nimport { RouteRef, SubRouteRef, ExternalRouteRef } from '../routing';\n\n/**\n * Information about the plugin.\n *\n * @public\n * @remarks\n *\n * This interface is intended to be extended via [module\n * augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation)\n * in order to add fields that are specific to each project.\n *\n * For example, one might add a `slackChannel` field that is read from the\n * opaque manifest file.\n *\n * See the options for `createApp` for more information about how to\n * customize the parsing of manifest files.\n */\nexport interface FrontendPluginInfo {\n  /**\n   * The name of the package that implements the plugin.\n   */\n  packageName?: string;\n\n  /**\n   * The version of the plugin, typically the version of the package.json file.\n   */\n  version?: string;\n\n  /**\n   * As short description of the plugin, typically the description field in\n   * package.json.\n   */\n  description?: string;\n\n  /**\n   * The owner entity references of the plugin.\n   */\n  ownerEntityRefs?: string[];\n\n  /**\n   * Links related to the plugin.\n   */\n  links?: Array<{ title: string; url: string }>;\n}\n\n/**\n * Options for providing information for a plugin.\n *\n * @public\n */\nexport type FrontendPluginInfoOptions = {\n  /**\n   * A loader function for the package.json file for the plugin.\n   */\n  packageJson?: () => Promise<{ name: string } & JsonObject>;\n  /**\n   * A loader function for an opaque manifest file for the plugin.\n   */\n  manifest?: () => Promise<JsonObject>;\n};\n\n/**\n * A variant of the {@link FrontendPlugin} interface that can also be used to install overrides for the plugin.\n *\n * @public\n */\nexport interface OverridableFrontendPlugin<\n  TRoutes extends { [name in string]: RouteRef | SubRouteRef } = {\n    [name in string]: RouteRef | SubRouteRef;\n  },\n  TExternalRoutes extends { [name in string]: ExternalRouteRef } = {\n    [name in string]: ExternalRouteRef;\n  },\n  TExtensionMap extends { [id in string]: ExtensionDefinition } = {\n    [id in string]: ExtensionDefinition;\n  },\n> extends FrontendPlugin<TRoutes, TExternalRoutes> {\n  getExtension<TId extends keyof TExtensionMap>(id: TId): TExtensionMap[TId];\n  withOverrides(options: {\n    extensions: Array<ExtensionDefinition>;\n\n    /**\n     * Overrides the original info loaders of the plugin one by one.\n     */\n    info?: FrontendPluginInfoOptions;\n  }): OverridableFrontendPlugin<TRoutes, TExternalRoutes, TExtensionMap>;\n}\n\n/** @public */\nexport interface FrontendPlugin<\n  TRoutes extends { [name in string]: RouteRef | SubRouteRef } = {\n    [name in string]: RouteRef | SubRouteRef;\n  },\n  TExternalRoutes extends { [name in string]: ExternalRouteRef } = {\n    [name in string]: ExternalRouteRef;\n  },\n> {\n  readonly $$type: '@backstage/FrontendPlugin';\n  readonly id: string;\n  readonly routes: TRoutes;\n  readonly externalRoutes: TExternalRoutes;\n\n  /**\n   * Loads the plugin info.\n   */\n  info(): Promise<FrontendPluginInfo>;\n}\n\n/** @public */\nexport interface PluginOptions<\n  TId extends string,\n  TRoutes extends { [name in string]: RouteRef | SubRouteRef },\n  TExternalRoutes extends { [name in string]: ExternalRouteRef },\n  TExtensions extends readonly ExtensionDefinition[],\n> {\n  pluginId: TId;\n  routes?: TRoutes;\n  externalRoutes?: TExternalRoutes;\n  extensions?: TExtensions;\n  featureFlags?: FeatureFlagConfig[];\n  info?: FrontendPluginInfoOptions;\n}\n\n/**\n * Creates a new plugin that can be installed in a Backstage app.\n *\n * @remarks\n *\n * Every plugin is created with a unique ID and a set of extensions\n * that are installed as part of the plugin.\n *\n * For more information on how plugins work, see the\n * {@link https://backstage.io/docs/frontend-system/building-plugins/index | documentation for plugins}\n * in the frontend system documentation.\n *\n * @example\n *\n * ```tsx\n * import { createFrontendPlugin } from '@backstage/frontend-plugin-api';\n *\n * export const examplePlugin = createFrontendPlugin({\n *   pluginId: 'example',\n *   extensions: [\n *     PageBlueprint.make({\n *       path: '/example',\n *       loader: () => import('./ExamplePage').then(m => <m.ExamplePage />),\n *     }),\n *   ],\n * });\n * ```\n *\n * @public\n */\nexport function createFrontendPlugin<\n  TId extends string,\n  TExtensions extends readonly ExtensionDefinition[],\n  TRoutes extends { [name in string]: RouteRef | SubRouteRef } = {},\n  TExternalRoutes extends { [name in string]: ExternalRouteRef } = {},\n>(\n  options: PluginOptions<TId, TRoutes, TExternalRoutes, TExtensions>,\n): OverridableFrontendPlugin<\n  TRoutes,\n  TExternalRoutes,\n  MakeSortedExtensionsMap<TExtensions[number], TId>\n> {\n  const pluginId = options.pluginId;\n\n  const extensions = new Array<Extension<any>>();\n  const extensionDefinitionsById = new Map<\n    string,\n    typeof OpaqueExtensionDefinition.TInternal\n  >();\n\n  for (const def of options.extensions ?? []) {\n    const internal = OpaqueExtensionDefinition.toInternal(def);\n    const ext = resolveExtensionDefinition(def, { namespace: pluginId });\n    extensions.push(ext);\n    extensionDefinitionsById.set(ext.id, {\n      ...internal,\n      namespace: pluginId,\n    });\n  }\n\n  if (extensions.length !== extensionDefinitionsById.size) {\n    const extensionIds = extensions.map(e => e.id);\n    const duplicates = Array.from(\n      new Set(\n        extensionIds.filter((id, index) => extensionIds.indexOf(id) !== index),\n      ),\n    );\n    // TODO(Rugvip): This could provide some more information about the kind + name of the extensions\n    throw new Error(\n      `Plugin '${pluginId}' provided duplicate extensions: ${duplicates.join(\n        ', ',\n      )}`,\n    );\n  }\n\n  return OpaqueFrontendPlugin.createInstance('v1', {\n    id: pluginId,\n    routes: options.routes ?? ({} as TRoutes),\n    externalRoutes: options.externalRoutes ?? ({} as TExternalRoutes),\n    featureFlags: options.featureFlags ?? [],\n    extensions: extensions,\n    infoOptions: options.info,\n\n    // This method is overridden when the plugin instance is installed in an app\n    async info() {\n      throw new Error(\n        `Attempted to load plugin info for plugin '${pluginId}', but the plugin instance is not installed in an app`,\n      );\n    },\n    getExtension(id) {\n      const ext = extensionDefinitionsById.get(id);\n      if (!ext) {\n        throw new Error(\n          `Attempted to get non-existent extension '${id}' from plugin '${pluginId}'`,\n        );\n      }\n      return ext;\n    },\n    toString() {\n      return `Plugin{id=${pluginId}}`;\n    },\n    withOverrides(overrides) {\n      const overriddenExtensionIds = new Set(\n        overrides.extensions.map(\n          e => resolveExtensionDefinition(e, { namespace: pluginId }).id,\n        ),\n      );\n      const nonOverriddenExtensions = (options.extensions ?? []).filter(\n        e =>\n          !overriddenExtensionIds.has(\n            resolveExtensionDefinition(e, { namespace: pluginId }).id,\n          ),\n      );\n      return createFrontendPlugin({\n        ...options,\n        pluginId,\n        extensions: [...nonOverriddenExtensions, ...overrides.extensions],\n        info: {\n          ...options.info,\n          ...overrides.info,\n        },\n      });\n    },\n  });\n}\n"],"names":[],"mappings":"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"}