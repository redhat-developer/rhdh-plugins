{"version":3,"file":"createExtensionDataContainer.esm.js","sources":["../../../../../frontend-internal/src/wiring/createExtensionDataContainer.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExtensionDataContainer,\n  ExtensionDataRef,\n  ExtensionDataValue,\n} from '@backstage/frontend-plugin-api';\n\nexport function createExtensionDataContainer<UData extends ExtensionDataRef>(\n  values: Iterable<\n    UData extends ExtensionDataRef<infer IData, infer IId>\n      ? ExtensionDataValue<IData, IId>\n      : never\n  >,\n  contextName: string,\n  declaredRefs?: ExtensionDataRef<any, any, any>[],\n): ExtensionDataContainer<UData> {\n  if (typeof values !== 'object' || !values?.[Symbol.iterator]) {\n    throw new Error(`${contextName} did not provide an iterable object`);\n  }\n\n  const container = new Map<string, ExtensionDataValue<any, any>>();\n  const verifyRefs =\n    declaredRefs && new Map(declaredRefs.map(ref => [ref.id, ref]));\n\n  for (const output of values) {\n    if (verifyRefs) {\n      if (!verifyRefs.delete(output.id)) {\n        throw new Error(\n          `extension data '${output.id}' was provided but not declared`,\n        );\n      }\n    }\n    container.set(output.id, output);\n  }\n\n  const remainingRefs =\n    verifyRefs &&\n    Array.from(verifyRefs.values()).filter(ref => !ref.config.optional);\n  if (remainingRefs && remainingRefs.length > 0) {\n    throw new Error(\n      `missing required extension data value(s) '${remainingRefs\n        .map(ref => ref.id)\n        .join(', ')}'`,\n    );\n  }\n\n  return {\n    get(ref) {\n      return container.get(ref.id)?.value;\n    },\n    [Symbol.iterator]() {\n      return container.values();\n    },\n  } as ExtensionDataContainer<UData>;\n}\n"],"names":[],"mappings":"AAsBO,SAAS,4BAAA,CACd,MAAA,EAKA,WAAA,EACA,YAAA,EAC+B;AAC/B,EAAA,IAAI,OAAO,MAAA,KAAW,QAAA,IAAY,CAAC,MAAA,GAAS,MAAA,CAAO,QAAQ,CAAA,EAAG;AAC5D,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,EAAG,WAAW,CAAA,mCAAA,CAAqC,CAAA;AAAA,EACrE;AAEA,EAAA,MAAM,SAAA,uBAAgB,GAAA,EAA0C;AAChE,EAAA,MAAM,UAAA,GACJ,YAAA,IAAgB,IAAI,GAAA,CAAI,YAAA,CAAa,GAAA,CAAI,CAAA,GAAA,KAAO,CAAC,GAAA,CAAI,EAAA,EAAI,GAAG,CAAC,CAAC,CAAA;AAEhE,EAAA,KAAA,MAAW,UAAU,MAAA,EAAQ;AAC3B,IAAA,IAAI,UAAA,EAAY;AACd,MAAA,IAAI,CAAC,UAAA,CAAW,MAAA,CAAO,MAAA,CAAO,EAAE,CAAA,EAAG;AACjC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,gBAAA,EAAmB,OAAO,EAAE,CAAA,+BAAA;AAAA,SAC9B;AAAA,MACF;AAAA,IACF;AACA,IAAA,SAAA,CAAU,GAAA,CAAI,MAAA,CAAO,EAAA,EAAI,MAAM,CAAA;AAAA,EACjC;AAEA,EAAA,MAAM,aAAA,GACJ,UAAA,IACA,KAAA,CAAM,IAAA,CAAK,UAAA,CAAW,MAAA,EAAQ,CAAA,CAAE,MAAA,CAAO,CAAA,GAAA,KAAO,CAAC,GAAA,CAAI,OAAO,QAAQ,CAAA;AACpE,EAAA,IAAI,aAAA,IAAiB,aAAA,CAAc,MAAA,GAAS,CAAA,EAAG;AAC7C,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAA,0CAAA,EAA6C,cAC1C,GAAA,CAAI,CAAA,GAAA,KAAO,IAAI,EAAE,CAAA,CACjB,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA;AAAA,KACf;AAAA,EACF;AAEA,EAAA,OAAO;AAAA,IACL,IAAI,GAAA,EAAK;AACP,MAAA,OAAO,SAAA,CAAU,GAAA,CAAI,GAAA,CAAI,EAAE,CAAA,EAAG,KAAA;AAAA,IAChC,CAAA;AAAA,IACA,CAAC,MAAA,CAAO,QAAQ,CAAA,GAAI;AAClB,MAAA,OAAO,UAAU,MAAA,EAAO;AAAA,IAC1B;AAAA,GACF;AACF;;;;"}