{"version":3,"file":"DialogApi.esm.js","sources":["../../../src/apis/definitions/DialogApi.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApiRef } from '@backstage/core-plugin-api';\n\n/**\n * A handle for an open dialog that can be used to interact with it.\n *\n * @remarks\n *\n * Dialogs can be opened using either {@link DialogApi.show} or {@link DialogApi.showModal}.\n *\n * @public\n */\nexport interface DialogApiDialog<TResult = void> {\n  /**\n   * Closes the dialog with that provided result.\n   *\n   * @remarks\n   *\n   * If the dialog is a modal dialog a result must always be provided. If it's a regular dialog then passing a result is optional.\n   */\n  close(\n    ...args: undefined extends TResult ? [result?: TResult] : [result: TResult]\n  ): void;\n\n  /**\n   * Replaces the content of the dialog with the provided element or component, causing it to be rerenedered.\n   */\n  update(\n    elementOrComponent:\n      | React.JSX.Element\n      | ((props: { dialog: DialogApiDialog<TResult> }) => JSX.Element),\n  ): void;\n\n  /**\n   * Wait until the dialog is closed and return the result.\n   *\n   * @remarks\n   *\n   * If the dialog is a modal dialog a result will always be returned. If it's a regular dialog then the result may be `undefined`.\n   */\n  result(): Promise<TResult>;\n}\n\n/**\n * A Utility API for showing dialogs that render in the React tree and return a result.\n *\n * @public\n */\nexport interface DialogApi {\n  /**\n   * Opens a modal dialog and returns a handle to it.\n   *\n   * @remarks\n   *\n   * This dialog can be closed by calling the `close` method on the returned handle, optionally providing a result.\n   * The dialog can also be closed by the user by clicking the backdrop or pressing the escape key.\n   *\n   * If the dialog is closed without a result, the result will be `undefined`.\n   *\n   * @example\n   *\n   * ### Example with inline dialog content\n   * ```tsx\n   * const dialog = dialogApi.show<boolean>(\n   *   <DialogContent>\n   *     <DialogTitle>Are you sure?</DialogTitle>\n   *     <DialogActions>\n   *       <Button onClick={() => dialog.close(true)}>Yes</Button>\n   *       <Button onClick={() => dialog.close(false)}>No</Button>\n   *     </DialogActions>\n   *   </DialogContent>\n   * );\n   * const result = await dialog.result();\n   * ```\n   *\n   * @example\n   *\n   * ### Example with separate dialog component\n   * ```tsx\n   * function CustomDialog({ dialog }: { dialog: DialogApiDialog<boolean | undefined> }) {\n   *   return (\n   *     <DialogContent>\n   *       <DialogTitle>Are you sure?</DialogTitle>\n   *       <DialogActions>\n   *         <Button onClick={() => dialog.close(true)}>Yes</Button>\n   *         <Button onClick={() => dialog.close(false)}>No</Button>\n   *       </DialogActions>\n   *     </DialogContent>\n   *   )\n   * }\n   * const result = await dialogApi.show(CustomDialog).result();\n   * ```\n   *\n   * @param elementOrComponent - The element or component to render in the dialog. If a component is provided, it will be provided with a `dialog` prop that contains the dialog handle.\n   * @public\n   */\n  show<TResult = void>(\n    elementOrComponent:\n      | JSX.Element\n      | ((props: {\n          dialog: DialogApiDialog<TResult | undefined>;\n        }) => JSX.Element),\n  ): DialogApiDialog<TResult | undefined>;\n\n  /**\n   * Opens a modal dialog and returns a handle to it.\n   *\n   * @remarks\n   *\n   * This dialog can not be closed in any other way than calling the `close` method on the returned handle and providing a result.\n   *\n   * @example\n   *\n   * ### Example with inline dialog content\n   * ```tsx\n   * const dialog = dialogApi.showModal<boolean>(\n   *   <DialogContent>\n   *     <DialogTitle>Are you sure?</DialogTitle>\n   *     <DialogActions>\n   *       <Button onClick={() => dialog.close(true)}>Yes</Button>\n   *       <Button onClick={() => dialog.close(false)}>No</Button>\n   *     </DialogActions>\n   *   </DialogContent>\n   * );\n   * const result = await dialog.result();\n   * ```\n   *\n   * @example\n   *\n   * ### Example with separate dialog component\n   * ```tsx\n   * function CustomDialog({ dialog }: { dialog: DialogApiDialog<boolean> }) {\n   *   return (\n   *     <DialogContent>\n   *       <DialogTitle>Are you sure?</DialogTitle>\n   *       <DialogActions>\n   *         <Button onClick={() => dialog.close(true)}>Yes</Button>\n   *         <Button onClick={() => dialog.close(false)}>No</Button>\n   *       </DialogActions>\n   *     </DialogContent>\n   *   )\n   * }\n   * const result = await dialogApi.showModal(CustomDialog).result();\n   * ```\n   *\n   * @param elementOrComponent - The element or component to render in the dialog. If a component is provided, it will be provided with a `dialog` prop that contains the dialog handle.\n   * @public\n   */\n  showModal<TResult = void>(\n    elementOrComponent:\n      | JSX.Element\n      | ((props: { dialog: DialogApiDialog<TResult> }) => JSX.Element),\n  ): DialogApiDialog<TResult>;\n}\n\n/**\n * The `ApiRef` of {@link DialogApi}.\n *\n * @public\n */\nexport const dialogApiRef = createApiRef<DialogApi>({\n  id: 'core.dialog',\n});\n"],"names":[],"mappings":";;AA+KO,MAAM,eAAe,YAAA,CAAwB;AAAA,EAClD,EAAA,EAAI;AACN,CAAC;;;;"}