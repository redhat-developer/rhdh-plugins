import { jsx } from 'react/jsx-runtime';
import '../apis/definitions/AppTreeApi.esm.js';
import { useApi } from '@backstage/core-plugin-api';
import { swappableComponentsApiRef } from '../apis/definitions/SwappableComponentsApi.esm.js';
import '../apis/definitions/IconsApi.esm.js';
import '../apis/definitions/DialogApi.esm.js';
import '../apis/definitions/RouteResolutionApi.esm.js';
import '../apis/definitions/AnalyticsApi.esm.js';
import { lazy } from 'react';
import { OpaqueSwappableComponentRef } from '../frontend-internal/src/wiring/InternalSwappableComponentRef.esm.js';
import '../frontend-internal/src/wiring/InternalExtensionDefinition.esm.js';
import '../frontend-internal/src/wiring/InternalFrontendPlugin.esm.js';

const useComponentRefApi = () => {
  try {
    return useApi(swappableComponentsApiRef);
  } catch (e) {
    return void 0;
  }
};
function createSwappableComponent(options) {
  const FallbackComponent = (p) => /* @__PURE__ */ jsx("div", { "data-testid": options.id, ...p });
  const ref = OpaqueSwappableComponentRef.createInstance("v1", {
    id: options.id,
    TProps: null,
    TExternalProps: null,
    toString() {
      return `SwappableComponentRef{id=${options.id}}`;
    },
    defaultComponent: lazy(async () => {
      const Component = await options.loader?.() ?? FallbackComponent;
      return { default: Component };
    }),
    transformProps: options.transformProps
  });
  const ComponentRefImpl = (props) => {
    const api = useComponentRefApi();
    if (!api) {
      const internalRef = OpaqueSwappableComponentRef.toInternal(ref);
      const Component2 = internalRef.defaultComponent;
      const innerProps = internalRef.transformProps?.(props) ?? props;
      return /* @__PURE__ */ jsx(Component2, { ...innerProps });
    }
    const Component = api.getComponent(ref);
    return /* @__PURE__ */ jsx(Component, { ...props });
  };
  Object.assign(ComponentRefImpl, { ref });
  return ComponentRefImpl;
}

export { createSwappableComponent };
//# sourceMappingURL=createSwappableComponent.esm.js.map
