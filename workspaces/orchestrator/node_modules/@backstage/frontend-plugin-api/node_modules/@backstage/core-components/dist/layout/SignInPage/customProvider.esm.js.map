{"version":3,"file":"customProvider.esm.js","sources":["../../../src/layout/SignInPage/customProvider.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useForm, UseFormRegisterReturn } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport isEmpty from 'lodash/isEmpty';\nimport { InfoCard } from '../InfoCard/InfoCard';\nimport { ProviderComponent, ProviderLoader, SignInProvider } from './types';\nimport { GridItem } from './styles';\nimport { UserIdentity } from './UserIdentity';\nimport { coreComponentsTranslationRef } from '../../translation';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\n\n// accept base64url format according to RFC7515 (https://tools.ietf.org/html/rfc7515#section-3)\nconst ID_TOKEN_REGEX = /^[a-z0-9_\\-]+\\.[a-z0-9_\\-]+\\.[a-z0-9_\\-]+$/i;\n\n/** @public */\nexport type CustomProviderClassKey = 'form' | 'button';\n\nconst useFormStyles = makeStyles(\n  theme => ({\n    form: {\n      display: 'flex',\n      flexFlow: 'column nowrap',\n    },\n    button: {\n      alignSelf: 'center',\n      marginTop: theme.spacing(2),\n    },\n    subTitle: {\n      whiteSpace: 'pre-line',\n    },\n  }),\n  { name: 'BackstageCustomProvider' },\n);\n\ntype Data = {\n  userId: string;\n  idToken?: string;\n};\n\nconst asInputRef = (renderResult: UseFormRegisterReturn) => {\n  const { ref, ...rest } = renderResult;\n  return {\n    inputRef: ref,\n    ...rest,\n  };\n};\n\nconst Component: ProviderComponent = ({ onSignInStarted, onSignInSuccess }) => {\n  const classes = useFormStyles();\n  const { t } = useTranslationRef(coreComponentsTranslationRef);\n  const { register, handleSubmit, formState } = useForm<Data>({\n    mode: 'onChange',\n  });\n\n  const { errors } = formState;\n\n  const handleResult = ({ userId, idToken }: Data) => {\n    onSignInStarted();\n    onSignInSuccess(\n      UserIdentity.fromLegacy({\n        userId,\n        getIdToken: idToken !== undefined ? async () => idToken : undefined,\n        profile: {\n          email: `${userId}@example.com`,\n        },\n      }),\n    );\n  };\n\n  return (\n    <GridItem>\n      <InfoCard title={t('signIn.customProvider.title')} variant=\"fullHeight\">\n        <Typography variant=\"body1\" className={classes.subTitle}>\n          {t('signIn.customProvider.subtitle')}\n        </Typography>\n\n        <form className={classes.form} onSubmit={handleSubmit(handleResult)}>\n          <FormControl>\n            <TextField\n              {...asInputRef(register('userId', { required: true }))}\n              label={t('signIn.customProvider.userId')}\n              margin=\"normal\"\n              error={Boolean(errors.userId)}\n            />\n            {errors.userId && (\n              <FormHelperText error>{errors.userId.message}</FormHelperText>\n            )}\n          </FormControl>\n          <FormControl>\n            <TextField\n              {...asInputRef(\n                register('idToken', {\n                  required: false,\n                  validate: token =>\n                    !token ||\n                    ID_TOKEN_REGEX.test(token) ||\n                    t('signIn.customProvider.tokenInvalid'),\n                }),\n              )}\n              label={t('signIn.customProvider.idToken')}\n              margin=\"normal\"\n              autoComplete=\"off\"\n              error={Boolean(errors.idToken)}\n            />\n            {errors.idToken && (\n              <FormHelperText error>{errors.idToken.message}</FormHelperText>\n            )}\n          </FormControl>\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            variant=\"outlined\"\n            className={classes.button}\n            disabled={!formState?.isDirty || !isEmpty(errors)}\n          >\n            {t('signIn.customProvider.continue')}\n          </Button>\n        </form>\n      </InfoCard>\n    </GridItem>\n  );\n};\n\n// Custom provider doesn't store credentials\nconst loader: ProviderLoader = async () => undefined;\n\nexport const customProvider: SignInProvider = { Component, loader };\n"],"names":[],"mappings":"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"}