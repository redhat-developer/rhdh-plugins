{"version":3,"file":"createOAuthProviderFactory.cjs.js","sources":["../../src/oauth/createOAuthProviderFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readDeclarativeSignInResolver } from '../sign-in';\nimport {\n  AuthProviderFactory,\n  ProfileTransform,\n  SignInResolver,\n} from '../types';\nimport { OAuthEnvironmentHandler } from './OAuthEnvironmentHandler';\nimport { createOAuthRouteHandlers } from './createOAuthRouteHandlers';\nimport { OAuthStateTransform } from './state';\nimport { OAuthAuthenticator, OAuthAuthenticatorResult } from './types';\nimport { SignInResolverFactory } from '../sign-in/createSignInResolverFactory';\n\n/** @public */\nexport function createOAuthProviderFactory<TProfile>(options: {\n  authenticator: OAuthAuthenticator<unknown, TProfile>;\n  additionalScopes?: string[];\n  stateTransform?: OAuthStateTransform;\n  profileTransform?: ProfileTransform<OAuthAuthenticatorResult<TProfile>>;\n  signInResolver?: SignInResolver<OAuthAuthenticatorResult<TProfile>>;\n  signInResolverFactories?: {\n    [name in string]: SignInResolverFactory;\n  };\n}): AuthProviderFactory {\n  return ctx => {\n    return OAuthEnvironmentHandler.mapConfig(ctx.config, envConfig => {\n      const signInResolver =\n        readDeclarativeSignInResolver({\n          config: envConfig,\n          signInResolverFactories: options.signInResolverFactories ?? {},\n        }) ?? options.signInResolver;\n\n      return createOAuthRouteHandlers<TProfile>({\n        authenticator: options.authenticator,\n        appUrl: ctx.appUrl,\n        baseUrl: ctx.baseUrl,\n        config: envConfig,\n        isOriginAllowed: ctx.isOriginAllowed,\n        cookieConfigurer: ctx.cookieConfigurer,\n        providerId: ctx.providerId,\n        resolverContext: ctx.resolverContext,\n        additionalScopes: options.additionalScopes,\n        stateTransform: options.stateTransform,\n        profileTransform: options.profileTransform,\n        signInResolver,\n      });\n    });\n  };\n}\n"],"names":["OAuthEnvironmentHandler","readDeclarativeSignInResolver","createOAuthRouteHandlers"],"mappings":";;;;;;;;;;AA6BO,SAAS,2BAAqC,OAAA,EAS7B;AACtB,EAAA,OAAO,CAAA,GAAA,KAAO;AACZ,IAAA,OAAOA,+CAAA,CAAwB,SAAA,CAAU,GAAA,CAAI,MAAA,EAAQ,CAAA,SAAA,KAAa;AAChE,MAAA,MAAM,iBACJC,2DAAA,CAA8B;AAAA,QAC5B,MAAA,EAAQ,SAAA;AAAA,QACR,uBAAA,EAAyB,OAAA,CAAQ,uBAAA,IAA2B;AAAC,OAC9D,KAAK,OAAA,CAAQ,cAAA;AAEhB,MAAA,OAAOC,iDAAA,CAAmC;AAAA,QACxC,eAAe,OAAA,CAAQ,aAAA;AAAA,QACvB,QAAQ,GAAA,CAAI,MAAA;AAAA,QACZ,SAAS,GAAA,CAAI,OAAA;AAAA,QACb,MAAA,EAAQ,SAAA;AAAA,QACR,iBAAiB,GAAA,CAAI,eAAA;AAAA,QACrB,kBAAkB,GAAA,CAAI,gBAAA;AAAA,QACtB,YAAY,GAAA,CAAI,UAAA;AAAA,QAChB,iBAAiB,GAAA,CAAI,eAAA;AAAA,QACrB,kBAAkB,OAAA,CAAQ,gBAAA;AAAA,QAC1B,gBAAgB,OAAA,CAAQ,cAAA;AAAA,QACxB,kBAAkB,OAAA,CAAQ,gBAAA;AAAA,QAC1B;AAAA,OACD,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH,CAAA;AACF;;;;"}