{"version":3,"file":"commonSignInResolvers.cjs.js","sources":["../../src/sign-in/commonSignInResolvers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z } from 'zod';\nimport { createSignInResolverFactory } from './createSignInResolverFactory';\nimport { NotAllowedError } from '@backstage/errors';\n\n// This splits an email \"joe+work@acme.com\" into [\"joe\", \"+work\", \"@acme.com\"]\n// so that we can remove the plus addressing. May output a shorter array:\n// [\"joe\", \"@acme.com\"], if no plus addressing was found.\nconst reEmail = /^([^@+]+)(\\+[^@]+)?(@.*)$/;\n\n/**\n * A collection of common sign-in resolvers that work with any auth provider.\n *\n * @public\n */\nexport namespace commonSignInResolvers {\n  /**\n   * A common sign-in resolver that looks up the user using their email address\n   * as email of the entity.\n   */\n  export const emailMatchingUserEntityProfileEmail =\n    createSignInResolverFactory({\n      optionsSchema: z\n        .object({\n          allowedDomains: z.array(z.string()).optional(),\n          dangerouslyAllowSignInWithoutUserInCatalog: z.boolean().optional(),\n        })\n        .optional(),\n      create(options = {}) {\n        return async (info, ctx) => {\n          const { profile } = info;\n\n          if (!profile.email) {\n            throw new Error(\n              'Login failed, user profile does not contain an email',\n            );\n          }\n\n          try {\n            return await ctx.signInWithCatalogUser({\n              filter: {\n                'spec.profile.email': profile.email,\n              },\n            });\n          } catch (err) {\n            if (err?.name === 'NotFoundError') {\n              // Try removing the plus addressing from the email address\n              const m = profile.email.match(reEmail);\n              if (m?.length === 4) {\n                const [_, name, _plus, domain] = m;\n                const noPlusEmail = `${name}${domain}`;\n\n                return ctx.signInWithCatalogUser(\n                  {\n                    filter: {\n                      'spec.profile.email': noPlusEmail,\n                    },\n                  },\n                  {\n                    dangerousEntityRefFallback:\n                      options?.dangerouslyAllowSignInWithoutUserInCatalog\n                        ? { entityRef: { name: noPlusEmail } }\n                        : undefined,\n                  },\n                );\n              }\n            }\n            // Email had no plus addressing or is missing in the catalog, forward failure\n            throw err;\n          }\n        };\n      },\n    });\n\n  /**\n   * A common sign-in resolver that looks up the user using the local part of\n   * their email address as the entity name.\n   */\n  export const emailLocalPartMatchingUserEntityName =\n    createSignInResolverFactory({\n      optionsSchema: z\n        .object({\n          allowedDomains: z.array(z.string()).optional(),\n          dangerouslyAllowSignInWithoutUserInCatalog: z.boolean().optional(),\n        })\n        .optional(),\n      create(options = {}) {\n        const { allowedDomains } = options;\n        return async (info, ctx) => {\n          const { profile } = info;\n\n          if (!profile.email) {\n            throw new Error(\n              'Login failed, user profile does not contain an email',\n            );\n          }\n          const [localPart] = profile.email.split('@');\n          const domain = profile.email.slice(localPart.length + 1);\n\n          if (allowedDomains && !allowedDomains.includes(domain)) {\n            throw new NotAllowedError(\n              'Sign-in user email is not from an allowed domain',\n            );\n          }\n          return ctx.signInWithCatalogUser(\n            { entityRef: { name: localPart } },\n            {\n              dangerousEntityRefFallback:\n                options?.dangerouslyAllowSignInWithoutUserInCatalog\n                  ? { entityRef: { name: localPart } }\n                  : undefined,\n            },\n          );\n        };\n      },\n    });\n}\n"],"names":["commonSignInResolvers","createSignInResolverFactory","z","NotAllowedError"],"mappings":"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"}