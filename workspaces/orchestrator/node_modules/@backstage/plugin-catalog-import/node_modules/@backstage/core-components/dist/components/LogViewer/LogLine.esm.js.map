{"version":3,"file":"LogLine.esm.js","sources":["../../../src/components/LogViewer/LogLine.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect, useMemo, useRef } from 'react';\nimport { AnsiChunk, AnsiLine, ChunkModifiers } from './AnsiProcessor';\nimport startCase from 'lodash/startCase';\nimport classnames from 'classnames';\nimport { useStyles } from './styles';\nimport Linkify from 'linkify-react';\nimport { Link } from '../Link';\n\nexport function getModifierClasses(\n  classes: ReturnType<typeof useStyles>,\n  modifiers: ChunkModifiers,\n) {\n  const classNames = new Array<string>();\n  if (modifiers.bold) {\n    classNames.push(classes.modifierBold);\n  }\n  if (modifiers.italic) {\n    classNames.push(classes.modifierItalic);\n  }\n  if (modifiers.underline) {\n    classNames.push(classes.modifierUnderline);\n  }\n  if (modifiers.foreground) {\n    const key = `modifierForeground${startCase(\n      modifiers.foreground,\n    )}` as keyof typeof classes;\n    classNames.push(classes[key]);\n  }\n  if (modifiers.background) {\n    const key = `modifierBackground${startCase(\n      modifiers.background,\n    )}` as keyof typeof classes;\n    classNames.push(classes[key]);\n  }\n  return classNames.length > 0 ? classNames.join(' ') : undefined;\n}\n\nexport function findSearchResults(text: string, searchText: string) {\n  if (!searchText || !text.includes(searchText)) {\n    return undefined;\n  }\n  const searchResults = new Array<{ start: number; end: number }>();\n  let offset = 0;\n  for (;;) {\n    const start = text.indexOf(searchText, offset);\n    if (start === -1) {\n      break;\n    }\n    const end = start + searchText.length;\n    searchResults.push({ start, end });\n    offset = end;\n  }\n  return searchResults;\n}\n\nexport interface HighlightAnsiChunk extends AnsiChunk {\n  highlight?: number;\n}\n\nexport function calculateHighlightedChunks(\n  line: AnsiLine,\n  searchText: string,\n): HighlightAnsiChunk[] {\n  const results = findSearchResults(line.text, searchText);\n  if (!results) {\n    return line.chunks;\n  }\n\n  const chunks = new Array<HighlightAnsiChunk>();\n\n  let lineOffset = 0;\n  let resultIndex = 0;\n  let result = results[resultIndex];\n  for (const chunk of line.chunks) {\n    const { text, modifiers } = chunk;\n    if (!result || lineOffset + text.length < result.start) {\n      chunks.push(chunk);\n      lineOffset += text.length;\n      continue;\n    }\n\n    let localOffset = 0;\n    while (result) {\n      const localStart = Math.max(result.start - lineOffset, 0);\n      if (localStart > text.length) {\n        break; // The next result is not in this chunk\n      }\n\n      const localEnd = Math.min(result.end - lineOffset, text.length);\n\n      const hasTextBeforeResult = localStart > localOffset;\n      if (hasTextBeforeResult) {\n        chunks.push({ text: text.slice(localOffset, localStart), modifiers });\n      }\n      const hasResultText = localEnd > localStart;\n      if (hasResultText) {\n        chunks.push({\n          modifiers,\n          highlight: resultIndex,\n          text: text.slice(localStart, localEnd),\n        });\n      }\n\n      localOffset = localEnd;\n\n      const foundCompleteResult = result.end - lineOffset === localEnd;\n      if (foundCompleteResult) {\n        resultIndex += 1;\n        result = results[resultIndex];\n      } else {\n        break; // The rest of the result is in the following chunks\n      }\n    }\n\n    const hasTextAfterResult = localOffset < text.length;\n    if (hasTextAfterResult) {\n      chunks.push({ text: text.slice(localOffset), modifiers });\n    }\n\n    lineOffset += text.length;\n  }\n\n  return chunks;\n}\n\nconst renderLink = ({\n  attributes,\n  content,\n}: {\n  attributes: { [attr: string]: any };\n  content: string;\n}) => {\n  const { href, ...props } = attributes;\n  return (\n    <Link to={href} {...props}>\n      {content}\n    </Link>\n  );\n};\n\nexport interface LogLineProps {\n  line: AnsiLine;\n  classes: ReturnType<typeof useStyles>;\n  searchText: string;\n  highlightResultIndex?: number;\n  setRowHeight?: (index: number, size: number) => void;\n}\n\nexport function LogLine({\n  line,\n  classes,\n  searchText,\n  highlightResultIndex,\n  setRowHeight,\n}: LogLineProps) {\n  const lineRef = useRef<HTMLSpanElement>(null);\n  const chunks = useMemo(\n    () => calculateHighlightedChunks(line, searchText),\n    [line, searchText],\n  );\n\n  useEffect(() => {\n    if (lineRef.current && setRowHeight) {\n      setRowHeight(line.lineNumber, lineRef.current.offsetHeight);\n    }\n  }, [line.lineNumber, setRowHeight]);\n\n  const elements = useMemo(\n    () =>\n      chunks.map(({ text, modifiers, highlight }, index) => (\n        // eslint-disable-next-line react/forbid-elements\n        <span\n          key={index}\n          className={classnames(\n            getModifierClasses(classes, modifiers),\n            highlight !== undefined &&\n              (highlight === highlightResultIndex\n                ? classes.textSelectedHighlight\n                : classes.textHighlight),\n            { [classes.textWrap]: !!setRowHeight },\n          )}\n        >\n          <Linkify options={{ render: renderLink }}>{text}</Linkify>\n        </span>\n      )),\n    [chunks, highlightResultIndex, classes, setRowHeight],\n  );\n\n  return <span ref={lineRef}>{elements}</span>;\n}\n"],"names":["classnames"],"mappings":"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"}