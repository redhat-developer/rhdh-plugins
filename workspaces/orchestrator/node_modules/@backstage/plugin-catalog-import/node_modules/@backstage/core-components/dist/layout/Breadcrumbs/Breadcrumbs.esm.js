import { jsxs, jsx } from 'react/jsx-runtime';
import Box from '@material-ui/core/Box';
import MaterialBreadcrumbs from '@material-ui/core/Breadcrumbs';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import Popover from '@material-ui/core/Popover';
import { withStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import { useState, Children, Fragment } from 'react';

const ClickableText = withStyles(
  {
    root: {
      textDecoration: "underline",
      cursor: "pointer"
    }
  },
  { name: "BackstageBreadcrumbsClickableText" }
)(Typography);
const StyledBox = withStyles(
  {
    root: {
      textDecoration: "underline",
      color: "inherit"
    }
  },
  { name: "BackstageBreadcrumbsStyledBox" }
)(Box);
const BreadcrumbsCurrentPage = withStyles(
  {
    root: {
      fontStyle: "italic"
    }
  },
  { name: "BreadcrumbsCurrentPage" }
)(Box);
function Breadcrumbs(props) {
  const { children, ...restProps } = props;
  const [anchorEl, setAnchorEl] = useState(null);
  const childrenArray = Children.toArray(children);
  const [firstPage, secondPage, ...expandablePages] = childrenArray;
  const currentPage = expandablePages.length ? expandablePages.pop() : childrenArray[childrenArray.length - 1];
  const hasHiddenBreadcrumbs = childrenArray.length > 3;
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs(MaterialBreadcrumbs, { "aria-label": "breadcrumb", ...restProps, children: [
      childrenArray.length > 1 && /* @__PURE__ */ jsx(StyledBox, { clone: true, children: firstPage }),
      childrenArray.length > 2 && /* @__PURE__ */ jsx(StyledBox, { clone: true, children: secondPage }),
      hasHiddenBreadcrumbs && /* @__PURE__ */ jsx(ClickableText, { onClick: handleClick, children: "..." }),
      /* @__PURE__ */ jsx(BreadcrumbsCurrentPage, { children: currentPage })
    ] }),
    /* @__PURE__ */ jsx(
      Popover,
      {
        open,
        anchorEl,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "left"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "left"
        },
        children: /* @__PURE__ */ jsx(List, { children: expandablePages.map((pageLink, index) => /* @__PURE__ */ jsx(ListItem, { button: true, children: /* @__PURE__ */ jsx(StyledBox, { clone: true, children: pageLink }) }, index)) })
      }
    )
  ] });
}

export { Breadcrumbs };
//# sourceMappingURL=Breadcrumbs.esm.js.map
