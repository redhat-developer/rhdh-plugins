{"version":3,"file":"PreparePullRequestForm.esm.js","sources":["../../../src/components/StepPrepareCreatePullRequest/PreparePullRequestForm.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReactNode } from 'react';\nimport {\n  FormProvider,\n  SubmitHandler,\n  useForm,\n  UseFormProps,\n  UseFormReturn,\n} from 'react-hook-form';\n\n/**\n * Props for {@link PreparePullRequestForm}.\n *\n * @public\n */\nexport type PreparePullRequestFormProps<\n  TFieldValues extends Record<string, any>,\n> = Pick<UseFormProps<TFieldValues>, 'defaultValues'> & {\n  onSubmit: SubmitHandler<TFieldValues>;\n\n  render: (\n    props: Pick<\n      UseFormReturn<TFieldValues>,\n      'formState' | 'register' | 'control' | 'setValue'\n    > & {\n      values: TFieldValues;\n    },\n  ) => ReactNode;\n};\n\n/**\n * A form wrapper that creates a form that is used to prepare a pull request. It\n * hosts the form logic.\n *\n * @param defaultValues - the default values of the form\n * @param onSubmit - a callback that is executed when the form is submitted\n *   (initiated by a button of type=\"submit\")\n * @param render - render the form elements\n * @public\n */\nexport const PreparePullRequestForm = <\n  TFieldValues extends Record<string, any>,\n>(\n  props: PreparePullRequestFormProps<TFieldValues>,\n) => {\n  const { defaultValues, onSubmit, render } = props;\n\n  const methods = useForm<TFieldValues>({ mode: 'onTouched', defaultValues });\n  const { handleSubmit, watch, control, register, formState, setValue } =\n    methods;\n\n  return (\n    <FormProvider {...methods}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {render({ values: watch(), formState, register, control, setValue })}\n      </form>\n    </FormProvider>\n  );\n};\n"],"names":[],"mappings":";;;AAuDO,MAAM,sBAAA,GAAyB,CAGpC,KAAA,KACG;AACH,EAAA,MAAM,EAAE,aAAA,EAAe,QAAA,EAAU,MAAA,EAAO,GAAI,KAAA;AAE5C,EAAA,MAAM,UAAU,OAAA,CAAsB,EAAE,IAAA,EAAM,WAAA,EAAa,eAAe,CAAA;AAC1E,EAAA,MAAM,EAAE,YAAA,EAAc,KAAA,EAAO,SAAS,QAAA,EAAU,SAAA,EAAW,UAAS,GAClE,OAAA;AAEF,EAAA,uBACE,GAAA,CAAC,gBAAc,GAAG,OAAA,EAChB,8BAAC,MAAA,EAAA,EAAK,QAAA,EAAU,aAAa,QAAQ,CAAA,EAClC,iBAAO,EAAE,MAAA,EAAQ,OAAM,EAAG,SAAA,EAAW,UAAU,OAAA,EAAS,QAAA,EAAU,CAAA,EACrE,CAAA,EACF,CAAA;AAEJ;;;;"}