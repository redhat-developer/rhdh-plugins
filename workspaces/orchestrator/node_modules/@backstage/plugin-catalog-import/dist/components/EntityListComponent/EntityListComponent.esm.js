import { jsxs, jsx } from 'react/jsx-runtime';
import { stringifyEntityRef } from '@backstage/catalog-model';
import { useApi } from '@backstage/core-plugin-api';
import { entityPresentationApiRef, EntityRefLink, EntityDisplayName } from '@backstage/plugin-catalog-react';
import Collapse from '@material-ui/core/Collapse';
import IconButton from '@material-ui/core/IconButton';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import { makeStyles } from '@material-ui/core/styles';
import ExpandLessIcon from '@material-ui/icons/ExpandLess';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { useState, Fragment } from 'react';

const useStyles = makeStyles((theme) => ({
  nested: {
    paddingLeft: theme.spacing(4)
  }
}));
const EntityListComponent = (props) => {
  const {
    locations,
    collapsed = false,
    locationListItemIcon,
    onItemClick,
    firstListItem,
    withLinks = false
  } = props;
  const classes = useStyles();
  const entityPresentationApi = useApi(entityPresentationApiRef);
  const [expandedUrls, setExpandedUrls] = useState([]);
  const handleClick = (url) => {
    setExpandedUrls(
      (urls) => urls.includes(url) ? urls.filter((u) => u !== url) : urls.concat(url)
    );
  };
  function sortEntities(entities) {
    return entities.sort(
      (a, b) => entityPresentationApi.forEntity(stringifyEntityRef(a)).snapshot.entityRef.localeCompare(
        entityPresentationApi.forEntity(stringifyEntityRef(b)).snapshot.entityRef
      )
    );
  }
  return /* @__PURE__ */ jsxs(List, { children: [
    firstListItem,
    locations.map((r) => /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsxs(
        ListItem,
        {
          dense: true,
          button: Boolean(onItemClick),
          onClick: () => onItemClick?.(r.target),
          children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: locationListItemIcon(r.target) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: r.target,
                secondary: `Entities: ${r.entities.length}`
              }
            ),
            collapsed && /* @__PURE__ */ jsx(ListItemSecondaryAction, { children: /* @__PURE__ */ jsx(IconButton, { edge: "end", onClick: () => handleClick(r.target), children: expandedUrls.includes(r.target) ? /* @__PURE__ */ jsx(ExpandLessIcon, {}) : /* @__PURE__ */ jsx(ExpandMoreIcon, {}) }) })
          ]
        }
      ),
      /* @__PURE__ */ jsx(
        Collapse,
        {
          in: !collapsed || expandedUrls.includes(r.target),
          timeout: "auto",
          unmountOnExit: true,
          children: /* @__PURE__ */ jsx(List, { component: "div", disablePadding: true, dense: true, children: sortEntities(r.entities).map((entity) => {
            return /* @__PURE__ */ jsx(
              ListItem,
              {
                className: classes.nested,
                ...withLinks ? {
                  component: EntityRefLink,
                  entityRef: entity,
                  button: withLinks
                } : {},
                children: /* @__PURE__ */ jsx(
                  ListItemText,
                  {
                    primary: /* @__PURE__ */ jsx(EntityDisplayName, { entityRef: entity })
                  }
                )
              },
              stringifyEntityRef(entity)
            );
          }) })
        }
      )
    ] }, r.target))
  ] });
};

export { EntityListComponent };
//# sourceMappingURL=EntityListComponent.esm.js.map
