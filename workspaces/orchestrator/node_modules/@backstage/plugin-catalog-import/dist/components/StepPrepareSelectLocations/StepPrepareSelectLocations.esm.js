import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import Checkbox from '@material-ui/core/Checkbox';
import Grid from '@material-ui/core/Grid';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Typography from '@material-ui/core/Typography';
import LocationOnIcon from '@material-ui/icons/LocationOn';
import partition from 'lodash/partition';
import { useState, useCallback } from 'react';
import { catalogImportTranslationRef } from '../../translation.esm.js';
import { BackButton, NextButton } from '../Buttons/index.esm.js';
import { EntityListComponent } from '../EntityListComponent/EntityListComponent.esm.js';

const StepPrepareSelectLocations = ({
  analyzeResult,
  prepareResult,
  onPrepare,
  onGoBack
}) => {
  const { t } = useTranslationRef(catalogImportTranslationRef);
  const [selectedUrls, setSelectedUrls] = useState(
    prepareResult?.locations.map((l) => l.target) || []
  );
  const [existingLocations, locations] = partition(
    analyzeResult?.locations,
    (l) => l.exists
  );
  const handleResult = useCallback(async () => {
    onPrepare({
      type: "locations",
      locations: locations.filter((l) => selectedUrls.includes(l.target))
    });
  }, [locations, onPrepare, selectedUrls]);
  const onItemClick = (url) => {
    setSelectedUrls(
      (urls) => urls.includes(url) ? urls.filter((u) => u !== url) : urls.concat(url)
    );
  };
  const onSelectAll = () => {
    setSelectedUrls(
      (urls) => urls.length < locations.length ? locations.map((l) => l.target) : []
    );
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    locations.length > 0 && /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(Typography, { children: t("stepPrepareSelectLocations.locations.description") }),
      /* @__PURE__ */ jsx(
        EntityListComponent,
        {
          firstListItem: /* @__PURE__ */ jsxs(ListItem, { dense: true, button: true, onClick: onSelectAll, children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(
              Checkbox,
              {
                edge: "start",
                checked: selectedUrls.length === locations.length,
                indeterminate: selectedUrls.length > 0 && selectedUrls.length < locations.length,
                tabIndex: -1,
                disableRipple: true
              }
            ) }),
            /* @__PURE__ */ jsx(
              ListItemText,
              {
                primary: t("stepPrepareSelectLocations.locations.selectAll")
              }
            )
          ] }),
          onItemClick,
          locations,
          locationListItemIcon: (target) => /* @__PURE__ */ jsx(
            Checkbox,
            {
              edge: "start",
              checked: selectedUrls.includes(target),
              tabIndex: -1,
              disableRipple: true
            }
          ),
          collapsed: true
        }
      )
    ] }),
    existingLocations.length > 0 && /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(Typography, { children: t("stepPrepareSelectLocations.existingLocations.description") }),
      /* @__PURE__ */ jsx(
        EntityListComponent,
        {
          locations: existingLocations,
          locationListItemIcon: () => /* @__PURE__ */ jsx(LocationOnIcon, {}),
          withLinks: true,
          collapsed: true
        }
      )
    ] }),
    /* @__PURE__ */ jsxs(Grid, { container: true, spacing: 0, children: [
      onGoBack && /* @__PURE__ */ jsx(BackButton, { onClick: onGoBack }),
      /* @__PURE__ */ jsx(NextButton, { disabled: selectedUrls.length === 0, onClick: handleResult, children: t("stepPrepareSelectLocations.nextButtonText") })
    ] })
  ] });
};

export { StepPrepareSelectLocations };
//# sourceMappingURL=StepPrepareSelectLocations.esm.js.map
