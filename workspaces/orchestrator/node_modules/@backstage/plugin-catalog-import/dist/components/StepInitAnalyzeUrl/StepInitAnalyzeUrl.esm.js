import { jsxs, jsx } from 'react/jsx-runtime';
import { useApi, errorApiRef } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import FormHelperText from '@material-ui/core/FormHelperText';
import Grid from '@material-ui/core/Grid';
import TextField from '@material-ui/core/TextField';
import { useState, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { catalogImportApiRef } from '../../api/CatalogImportApi.esm.js';
import 'yaml';
import 'git-url-parse';
import '@octokit/rest';
import { asInputRef } from '../helpers.esm.js';
import 'js-base64';
import { catalogImportTranslationRef } from '../../translation.esm.js';
import { NextButton } from '../Buttons/index.esm.js';

const StepInitAnalyzeUrl = (props) => {
  const { t } = useTranslationRef(catalogImportTranslationRef);
  const {
    onAnalysis,
    analysisUrl = "",
    disablePullRequest = false,
    exampleLocationUrl = "https://github.com/backstage/backstage/blob/master/catalog-info.yaml"
  } = props;
  const errorApi = useApi(errorApiRef);
  const catalogImportApi = useApi(catalogImportApiRef);
  const {
    register,
    handleSubmit,
    formState: { errors },
    watch
  } = useForm({
    mode: "onTouched",
    defaultValues: {
      url: analysisUrl
    }
  });
  const [submitted, setSubmitted] = useState(false);
  const [error, setError] = useState(void 0);
  const handleResult = useCallback(
    async ({ url }) => {
      setSubmitted(true);
      try {
        const analysisResult = await catalogImportApi.analyzeUrl(url);
        switch (analysisResult.type) {
          case "repository":
            if (!disablePullRequest && analysisResult.generatedEntities.length > 0) {
              onAnalysis("no-location", url, analysisResult);
            } else {
              setError(t("stepInitAnalyzeUrl.error.repository"));
              setSubmitted(false);
            }
            break;
          case "locations": {
            if (analysisResult.locations.length === 1) {
              onAnalysis("single-location", url, analysisResult, {
                prepareResult: analysisResult
              });
            } else if (analysisResult.locations.length > 1) {
              onAnalysis("multiple-locations", url, analysisResult);
            } else {
              setError(t("stepInitAnalyzeUrl.error.locations"));
              setSubmitted(false);
            }
            break;
          }
          default: {
            const err = t("stepInitAnalyzeUrl.error.default", {
              type: analysisResult.type
            });
            setError(err);
            setSubmitted(false);
            errorApi.post(new Error(err));
            break;
          }
        }
      } catch (e) {
        setError(e?.body?.error?.message ?? e.message);
        setSubmitted(false);
      }
    },
    [catalogImportApi, disablePullRequest, errorApi, onAnalysis, t]
  );
  return /* @__PURE__ */ jsxs("form", { onSubmit: handleSubmit(handleResult), children: [
    /* @__PURE__ */ jsx(
      TextField,
      {
        ...asInputRef(
          register("url", {
            required: true,
            validate: {
              httpsValidator: (value) => typeof value === "string" && value.match(/^http[s]?:\/\//) !== null || t("stepInitAnalyzeUrl.error.url")
            }
          })
        ),
        fullWidth: true,
        id: "url",
        label: "URL",
        placeholder: exampleLocationUrl,
        helperText: t("stepInitAnalyzeUrl.urlHelperText"),
        margin: "normal",
        variant: "outlined",
        error: Boolean(errors.url),
        required: true
      }
    ),
    errors.url && /* @__PURE__ */ jsx(FormHelperText, { error: true, children: errors.url.message }),
    error && /* @__PURE__ */ jsx(FormHelperText, { error: true, children: error }),
    /* @__PURE__ */ jsx(Grid, { container: true, spacing: 0, children: /* @__PURE__ */ jsx(
      NextButton,
      {
        disabled: Boolean(errors.url) || !watch("url"),
        loading: submitted,
        type: "submit",
        children: t("stepInitAnalyzeUrl.nextButtonText")
      }
    ) })
  ] });
};

export { StepInitAnalyzeUrl };
//# sourceMappingURL=StepInitAnalyzeUrl.esm.js.map
