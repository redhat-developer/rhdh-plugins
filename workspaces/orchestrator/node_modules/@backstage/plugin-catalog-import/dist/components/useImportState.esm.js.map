{"version":3,"file":"useImportState.esm.js","sources":["../../src/components/useImportState.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { useReducer } from 'react';\nimport { AnalyzeResult } from '../api';\n\n/**\n * The configuration of the stepper.\n *\n * @public\n */\nexport type ImportFlows =\n  | 'unknown'\n  | 'single-location'\n  | 'multiple-locations'\n  | 'no-location';\n\n// the available states of the stepper\ntype ImportStateTypes = 'analyze' | 'prepare' | 'review' | 'finish';\n\n/**\n * Result of the prepare state.\n *\n * @public\n */\nexport type PrepareResult =\n  | {\n      type: 'locations';\n      locations: Array<{\n        exists?: boolean;\n        target: string;\n        entities: CompoundEntityRef[];\n      }>;\n    }\n  | {\n      type: 'repository';\n      url: string;\n      integrationType: string;\n      pullRequest: {\n        url: string;\n      };\n      locations: Array<{\n        target: string;\n        entities: CompoundEntityRef[];\n      }>;\n    };\n\n// result of the review result\nexport type ReviewResult =\n  | {\n      type: 'locations';\n      locations: Array<{\n        target: string;\n        entities: Entity[];\n      }>;\n      refreshed: Array<{ target: string }>;\n    }\n  | {\n      type: 'repository';\n      url: string;\n      integrationType: string;\n      pullRequest: {\n        url: string;\n      };\n      locations: Array<{\n        target: string;\n        entities: Entity[];\n      }>;\n    };\n\n// function type for the 'analysis' -> 'prepare'/'review' transition\ntype onAnalysisFn = (\n  flow: ImportFlows,\n  url: string,\n  result: AnalyzeResult,\n  opts?: { prepareResult?: PrepareResult },\n) => void;\n\n// function type for the 'prepare' -> 'review' transition\ntype onPrepareFn = (\n  result: PrepareResult,\n  opts?: { notRepeatable?: boolean },\n) => void;\n\n// function type for the 'review' -> 'finish' transition\ntype onReviewFn = (result: ReviewResult) => void;\n\n// the type interfaces that are available in each state. every state provides\n// already known information and means to go to the next, or the previous step.\ntype State =\n  | {\n      activeState: 'analyze';\n      onAnalysis: onAnalysisFn;\n    }\n  | {\n      activeState: 'prepare';\n      analyzeResult: AnalyzeResult;\n      prepareResult?: PrepareResult;\n      onPrepare: onPrepareFn;\n    }\n  | {\n      activeState: 'review';\n      analyzeResult: AnalyzeResult;\n      prepareResult: PrepareResult;\n      onReview: onReviewFn;\n    }\n  | {\n      activeState: 'finish';\n      analyzeResult: AnalyzeResult;\n      prepareResult: PrepareResult;\n      reviewResult: ReviewResult;\n    };\n\nexport type ImportState = State & {\n  activeFlow: ImportFlows;\n  activeStepNumber: number;\n  analysisUrl?: string;\n\n  onGoBack?: () => void;\n  onReset: () => void;\n};\n\ntype ReducerActions =\n  | { type: 'onAnalysis'; args: Parameters<onAnalysisFn> }\n  | { type: 'onPrepare'; args: Parameters<onPrepareFn> }\n  | { type: 'onReview'; args: Parameters<onReviewFn> }\n  | { type: 'onGoBack' }\n  | { type: 'onReset'; initialUrl?: string };\n\ntype ReducerState = {\n  activeFlow: ImportFlows;\n  activeState: ImportStateTypes;\n  analysisUrl?: string;\n  analyzeResult?: AnalyzeResult;\n  prepareResult?: PrepareResult;\n  reviewResult?: ReviewResult;\n\n  previousStates: ImportStateTypes[];\n};\n\nfunction init(initialUrl?: string): ReducerState {\n  return {\n    activeFlow: 'unknown',\n    activeState: 'analyze',\n    analysisUrl: initialUrl,\n    previousStates: [],\n  };\n}\n\nfunction reducer(state: ReducerState, action: ReducerActions): ReducerState {\n  switch (action.type) {\n    case 'onAnalysis': {\n      if (state.activeState !== 'analyze') {\n        return state;\n      }\n\n      const { activeState, previousStates } = state;\n      const [activeFlow, analysisUrl, analyzeResult, opts] = action.args;\n\n      return {\n        ...state,\n        analysisUrl,\n        activeFlow,\n        analyzeResult,\n        prepareResult: opts?.prepareResult,\n\n        activeState: opts?.prepareResult === undefined ? 'prepare' : 'review',\n        previousStates: previousStates.concat(activeState),\n      };\n    }\n\n    case 'onPrepare': {\n      if (state.activeState !== 'prepare') {\n        return state;\n      }\n\n      const { activeState, previousStates } = state;\n      const [prepareResult, opts] = action.args;\n\n      return {\n        ...state,\n        prepareResult,\n\n        activeState: 'review',\n        previousStates: opts?.notRepeatable\n          ? []\n          : previousStates.concat(activeState),\n      };\n    }\n\n    case 'onReview': {\n      if (state.activeState !== 'review') {\n        return state;\n      }\n\n      const { activeState, previousStates } = state;\n      const [reviewResult] = action.args;\n\n      return {\n        ...state,\n        reviewResult,\n\n        activeState: 'finish',\n        previousStates: previousStates.concat(activeState),\n      };\n    }\n\n    case 'onGoBack': {\n      const { activeState, previousStates } = state;\n\n      return {\n        ...state,\n\n        activeState:\n          previousStates.length > 0\n            ? previousStates[previousStates.length - 1]\n            : activeState,\n        previousStates: previousStates.slice(0, previousStates.length - 1),\n      };\n    }\n\n    case 'onReset':\n      return {\n        ...init(action.initialUrl),\n\n        // we keep the old prepareResult since the form is animated and an\n        // undefined value might crash the last step.\n        prepareResult: state.prepareResult,\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\n/**\n * A hook that manages the state machine of the form. It handles different flows\n * which each can implement up to four states:\n * 1. analyze\n * 2. preview (skippable from analyze->review)\n * 3. review\n * 4. finish\n *\n * @param options - options\n */\nexport const useImportState = (options?: {\n  initialUrl?: string;\n}): ImportState => {\n  const [state, dispatch] = useReducer(reducer, options?.initialUrl, init);\n\n  const { activeFlow, activeState, analysisUrl, previousStates } = state;\n\n  return {\n    activeFlow,\n    activeState,\n    activeStepNumber: ['analyze', 'prepare', 'review', 'finish'].indexOf(\n      activeState,\n    ),\n    analysisUrl: analysisUrl,\n\n    analyzeResult: state.analyzeResult!,\n    prepareResult: state.prepareResult!,\n    reviewResult: state.reviewResult!,\n\n    onAnalysis: (flow, url, result, opts) =>\n      dispatch({\n        type: 'onAnalysis',\n        args: [flow, url, result, opts],\n      }),\n\n    onPrepare: (result, opts) =>\n      dispatch({\n        type: 'onPrepare',\n        args: [result, opts],\n      }),\n\n    onReview: result => dispatch({ type: 'onReview', args: [result] }),\n\n    onGoBack:\n      previousStates.length > 0\n        ? () => dispatch({ type: 'onGoBack' })\n        : undefined,\n\n    onReset: () =>\n      dispatch({ type: 'onReset', initialUrl: options?.initialUrl }),\n  };\n};\n"],"names":[],"mappings":"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"}