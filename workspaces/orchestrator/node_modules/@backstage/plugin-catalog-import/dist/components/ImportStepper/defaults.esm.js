import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import Box from '@material-ui/core/Box';
import Checkbox from '@material-ui/core/Checkbox';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import FormHelperText from '@material-ui/core/FormHelperText';
import StepLabel from '@material-ui/core/StepLabel';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import { BackButton } from '../Buttons/index.esm.js';
import { asInputRef } from '../helpers.esm.js';
import { StepFinishImportLocation } from '../StepFinishImportLocation/StepFinishImportLocation.esm.js';
import { StepInitAnalyzeUrl } from '../StepInitAnalyzeUrl/StepInitAnalyzeUrl.esm.js';
import { AutocompleteTextField } from '../StepPrepareCreatePullRequest/AutocompleteTextField.esm.js';
import 'react-hook-form';
import '@material-ui/core/Card';
import '@material-ui/core/CardContent';
import '@material-ui/core/CardHeader';
import 'yaml';
import '@backstage/core-components';
import 'lodash';
import '@backstage/core-plugin-api';
import '@backstage/frontend-plugin-api';
import '../../translation.esm.js';
import { StepPrepareCreatePullRequest } from '../StepPrepareCreatePullRequest/StepPrepareCreatePullRequest.esm.js';
import { StepPrepareSelectLocations } from '../StepPrepareSelectLocations/StepPrepareSelectLocations.esm.js';
import { StepReviewLocation } from '../StepReviewLocation/StepReviewLocation.esm.js';

function defaultGenerateStepper(flow, defaults, t) {
  switch (flow) {
    // the prepare step is skipped but the label of the step is updated
    case "single-location":
      return {
        ...defaults,
        prepare: () => ({
          stepLabel: /* @__PURE__ */ jsx(
            StepLabel,
            {
              optional: /* @__PURE__ */ jsx(Typography, { variant: "caption", children: t("importStepper.singleLocation.description") }),
              children: t("importStepper.singleLocation.title")
            }
          ),
          content: /* @__PURE__ */ jsx(Fragment, {})
        })
      };
    // let the user select one or more of the discovered locations in the prepare step
    case "multiple-locations":
      return {
        ...defaults,
        prepare: (state, opts) => {
          if (state.analyzeResult.type !== "locations") {
            return defaults.prepare(state, opts);
          }
          return {
            stepLabel: /* @__PURE__ */ jsx(
              StepLabel,
              {
                optional: /* @__PURE__ */ jsx(Typography, { variant: "caption", children: t("importStepper.multipleLocations.description", {
                  length: state.analyzeResult.locations.length
                }) }),
                children: t("importStepper.multipleLocations.title")
              }
            ),
            content: /* @__PURE__ */ jsx(
              StepPrepareSelectLocations,
              {
                analyzeResult: state.analyzeResult,
                prepareResult: state.prepareResult,
                onPrepare: state.onPrepare,
                onGoBack: state.onGoBack
              }
            )
          };
        }
      };
    case "no-location":
      return {
        ...defaults,
        prepare: (state, opts) => {
          if (state.analyzeResult.type !== "repository") {
            return defaults.prepare(state, opts);
          }
          return {
            stepLabel: /* @__PURE__ */ jsx(StepLabel, { children: t("importStepper.noLocation.title") }),
            content: /* @__PURE__ */ jsx(
              StepPrepareCreatePullRequest,
              {
                analyzeResult: state.analyzeResult,
                onPrepare: state.onPrepare,
                onGoBack: state.onGoBack,
                renderFormFields: ({
                  values,
                  setValue,
                  formState,
                  groupsLoading,
                  groups,
                  register
                }) => /* @__PURE__ */ jsxs(Fragment, { children: [
                  /* @__PURE__ */ jsx(Box, { marginTop: 2, children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: t("importStepper.noLocation.createPr.detailsTitle") }) }),
                  /* @__PURE__ */ jsx(
                    TextField,
                    {
                      ...asInputRef(
                        register("title", {
                          required: true
                        })
                      ),
                      label: t("importStepper.noLocation.createPr.titleLabel"),
                      placeholder: t(
                        "importStepper.noLocation.createPr.titlePlaceholder"
                      ),
                      margin: "normal",
                      variant: "outlined",
                      fullWidth: true,
                      error: Boolean(formState.errors.title),
                      required: true
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    TextField,
                    {
                      ...asInputRef(
                        register("body", {
                          required: true
                        })
                      ),
                      label: t("importStepper.noLocation.createPr.bodyLabel"),
                      placeholder: t(
                        "importStepper.noLocation.createPr.bodyPlaceholder"
                      ),
                      margin: "normal",
                      variant: "outlined",
                      fullWidth: true,
                      error: Boolean(formState.errors.body),
                      multiline: true,
                      required: true
                    }
                  ),
                  /* @__PURE__ */ jsx(Box, { marginTop: 2, children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: t(
                    "importStepper.noLocation.createPr.configurationTitle"
                  ) }) }),
                  /* @__PURE__ */ jsx(
                    TextField,
                    {
                      ...asInputRef(
                        register("componentName", { required: true })
                      ),
                      label: t(
                        "importStepper.noLocation.createPr.componentNameLabel"
                      ),
                      placeholder: t(
                        "importStepper.noLocation.createPr.componentNamePlaceholder"
                      ),
                      margin: "normal",
                      variant: "outlined",
                      fullWidth: true,
                      error: Boolean(formState.errors.componentName),
                      required: true
                    }
                  ),
                  !values.useCodeowners && /* @__PURE__ */ jsx(
                    AutocompleteTextField,
                    {
                      name: "owner",
                      errors: formState.errors,
                      options: groups || [],
                      loading: groupsLoading,
                      loadingText: t(
                        "importStepper.noLocation.createPr.ownerLoadingText"
                      ),
                      helperText: t(
                        "importStepper.noLocation.createPr.ownerHelperText"
                      ),
                      errorHelperText: t(
                        "importStepper.noLocation.createPr.ownerErrorHelperText"
                      ),
                      textFieldProps: {
                        label: t(
                          "importStepper.noLocation.createPr.ownerLabel"
                        ),
                        placeholder: t(
                          "importStepper.noLocation.createPr.ownerPlaceholder"
                        )
                      },
                      rules: { required: true },
                      required: true
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    FormControlLabel,
                    {
                      control: /* @__PURE__ */ jsx(
                        Checkbox,
                        {
                          ...asInputRef(register("useCodeowners")),
                          onChange: (_, value) => {
                            if (value) {
                              setValue("owner", "");
                            }
                          }
                        }
                      ),
                      label: /* @__PURE__ */ jsxs(Fragment, { children: [
                        "Use ",
                        /* @__PURE__ */ jsx("em", { children: "CODEOWNERS" }),
                        " file as Entity Owner"
                      ] })
                    }
                  ),
                  /* @__PURE__ */ jsx(FormHelperText, { children: t(
                    "importStepper.noLocation.createPr.codeownersHelperText"
                  ) })
                ] })
              }
            )
          };
        }
      };
    default:
      return defaults;
  }
}
const defaultStepper = {
  analyze: (state, { apis, t }) => ({
    stepLabel: /* @__PURE__ */ jsx(StepLabel, { children: t("importStepper.analyze.title") }),
    content: /* @__PURE__ */ jsx(
      StepInitAnalyzeUrl,
      {
        analysisUrl: state.analysisUrl,
        onAnalysis: state.onAnalysis,
        disablePullRequest: !apis.catalogImportApi.preparePullRequest
      },
      "analyze"
    )
  }),
  prepare: (state, { t }) => ({
    stepLabel: /* @__PURE__ */ jsx(
      StepLabel,
      {
        optional: /* @__PURE__ */ jsx(Typography, { variant: "caption", children: t("importStepper.prepare.description") }),
        children: t("importStepper.prepare.title")
      }
    ),
    content: /* @__PURE__ */ jsx(BackButton, { onClick: state.onGoBack })
  }),
  review: (state, { t }) => ({
    stepLabel: /* @__PURE__ */ jsx(StepLabel, { children: t("importStepper.review.title") }),
    content: /* @__PURE__ */ jsx(
      StepReviewLocation,
      {
        prepareResult: state.prepareResult,
        onReview: state.onReview,
        onGoBack: state.onGoBack
      }
    )
  }),
  finish: (state, { t }) => ({
    stepLabel: /* @__PURE__ */ jsx(StepLabel, { children: t("importStepper.finish.title") }),
    content: /* @__PURE__ */ jsx(
      StepFinishImportLocation,
      {
        prepareResult: state.prepareResult,
        onReset: state.onReset
      }
    )
  })
};

export { defaultGenerateStepper, defaultStepper };
//# sourceMappingURL=defaults.esm.js.map
