import { jsx } from 'react/jsx-runtime';
import { configApiRef, fetchApiRef, discoveryApiRef } from '@backstage/core-plugin-api';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { PageBlueprint, ApiBlueprint, createFrontendPlugin } from '@backstage/frontend-plugin-api';
import { scmIntegrationsApiRef, scmAuthApiRef } from '@backstage/integration-react';
import { catalogImportApiRef } from './api/CatalogImportApi.esm.js';
import { CatalogImportClient } from './api/CatalogImportClient.esm.js';
import { rootRouteRef } from './plugin.esm.js';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
export { catalogImportTranslationRef } from './translation.esm.js';

const catalogImportPage = PageBlueprint.make({
  params: {
    path: "/catalog-import",
    routeRef: convertLegacyRouteRef(rootRouteRef),
    loader: () => import('./components/ImportPage/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ jsx(m.ImportPage, {}))
    )
  }
});
const catalogImportApi = ApiBlueprint.make({
  params: (defineParams) => defineParams({
    api: catalogImportApiRef,
    deps: {
      discoveryApi: discoveryApiRef,
      scmAuthApi: scmAuthApiRef,
      fetchApi: fetchApiRef,
      scmIntegrationsApi: scmIntegrationsApiRef,
      catalogApi: catalogApiRef,
      configApi: configApiRef
    },
    factory: ({
      discoveryApi,
      scmAuthApi,
      fetchApi,
      scmIntegrationsApi,
      catalogApi,
      configApi
    }) => new CatalogImportClient({
      discoveryApi,
      scmAuthApi,
      scmIntegrationsApi,
      fetchApi,
      catalogApi,
      configApi
    })
  })
});
var alpha = createFrontendPlugin({
  pluginId: "catalog-import",
  info: { packageJson: () => import('./package.json.esm.js') },
  extensions: [catalogImportApi, catalogImportPage],
  routes: {
    importPage: convertLegacyRouteRef(rootRouteRef)
  }
});

export { alpha as default };
//# sourceMappingURL=alpha.esm.js.map
