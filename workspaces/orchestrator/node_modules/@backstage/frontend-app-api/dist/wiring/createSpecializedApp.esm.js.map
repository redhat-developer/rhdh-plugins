{"version":3,"file":"createSpecializedApp.esm.js","sources":["../../src/wiring/createSpecializedApp.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigReader } from '@backstage/config';\nimport {\n  ApiBlueprint,\n  AppTree,\n  AppTreeApi,\n  appTreeApiRef,\n  RouteRef,\n  ExternalRouteRef,\n  SubRouteRef,\n  AnyRouteRefParams,\n  RouteFunc,\n  RouteResolutionApi,\n  createApiFactory,\n  routeResolutionApiRef,\n  AppNode,\n  ExtensionFactoryMiddleware,\n  FrontendFeature,\n} from '@backstage/frontend-plugin-api';\nimport {\n  AnyApiFactory,\n  ApiHolder,\n  ConfigApi,\n  configApiRef,\n  featureFlagsApiRef,\n  identityApiRef,\n} from '@backstage/core-plugin-api';\nimport { ApiFactoryRegistry, ApiResolver } from '@backstage/core-app-api';\nimport {\n  createExtensionDataContainer,\n  OpaqueFrontendPlugin,\n} from '@internal/frontend';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  resolveExtensionDefinition,\n  toInternalExtension,\n} from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\n\nimport {\n  extractRouteInfoFromAppNode,\n  RouteInfo,\n} from '../routing/extractRouteInfoFromAppNode';\n\nimport { CreateAppRouteBinder } from '../routing';\nimport { RouteResolver } from '../routing/RouteResolver';\nimport { resolveRouteBindings } from '../routing/resolveRouteBindings';\nimport { collectRouteIds } from '../routing/collectRouteIds';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  toInternalFrontendModule,\n  isInternalFrontendModule,\n} from '../../../frontend-plugin-api/src/wiring/createFrontendModule';\nimport { getBasePath } from '../routing/getBasePath';\nimport { Root } from '../extensions/Root';\nimport { resolveAppTree } from '../tree/resolveAppTree';\nimport { resolveAppNodeSpecs } from '../tree/resolveAppNodeSpecs';\nimport { readAppExtensionsConfig } from '../tree/readAppExtensionsConfig';\nimport { instantiateAppNodeTree } from '../tree/instantiateAppNodeTree';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { ApiRegistry } from '../../../core-app-api/src/apis/system/ApiRegistry';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { AppIdentityProxy } from '../../../core-app-api/src/apis/implementations/IdentityApi/AppIdentityProxy';\nimport { BackstageRouteObject } from '../routing/types';\nimport { matchRoutes } from 'react-router-dom';\nimport {\n  createPluginInfoAttacher,\n  FrontendPluginInfoResolver,\n} from './createPluginInfoAttacher';\nimport { createRouteAliasResolver } from '../routing/RouteAliasResolver';\nimport {\n  AppError,\n  createErrorCollector,\n  ErrorCollector,\n} from './createErrorCollector';\n\nfunction deduplicateFeatures(\n  allFeatures: FrontendFeature[],\n): FrontendFeature[] {\n  // Start by removing duplicates by reference\n  const features = Array.from(new Set(allFeatures));\n\n  // Plugins are deduplicated by ID, last one wins\n  const seenIds = new Set<string>();\n  return features\n    .reverse()\n    .filter(feature => {\n      if (!OpaqueFrontendPlugin.isType(feature)) {\n        return true;\n      }\n      if (seenIds.has(feature.id)) {\n        return false;\n      }\n      seenIds.add(feature.id);\n      return true;\n    })\n    .reverse();\n}\n\n// Helps delay callers from reaching out to the API before the app tree has been materialized\nclass AppTreeApiProxy implements AppTreeApi {\n  #routeInfo?: RouteInfo;\n\n  constructor(\n    private readonly tree: AppTree,\n    private readonly appBasePath: string,\n  ) {}\n\n  private checkIfInitialized() {\n    if (!this.#routeInfo) {\n      throw new Error(\n        `You can't access the AppTreeApi during initialization of the app tree. Please move occurrences of this out of the initialization of the factory`,\n      );\n    }\n  }\n\n  getTree() {\n    this.checkIfInitialized();\n\n    return { tree: this.tree };\n  }\n\n  getNodesByRoutePath(routePath: string): { nodes: AppNode[] } {\n    this.checkIfInitialized();\n\n    let path = routePath;\n    if (path.startsWith(this.appBasePath)) {\n      path = path.slice(this.appBasePath.length);\n    }\n\n    const matchedRoutes = matchRoutes(this.#routeInfo!.routeObjects, path);\n\n    const matchedAppNodes =\n      matchedRoutes\n        ?.filter(routeObj => !!routeObj.route.appNode)\n        .map(routeObj => routeObj.route.appNode!) || [];\n\n    return { nodes: matchedAppNodes };\n  }\n\n  initialize(routeInfo: RouteInfo) {\n    this.#routeInfo = routeInfo;\n  }\n}\n\n// Helps delay callers from reaching out to the API before the app tree has been materialized\nclass RouteResolutionApiProxy implements RouteResolutionApi {\n  #delegate: RouteResolutionApi | undefined;\n  #routeObjects: BackstageRouteObject[] | undefined;\n\n  constructor(\n    private readonly routeBindings: Map<\n      ExternalRouteRef,\n      RouteRef | SubRouteRef\n    >,\n    private readonly appBasePath: string,\n  ) {}\n\n  resolve<TParams extends AnyRouteRefParams>(\n    anyRouteRef:\n      | RouteRef<TParams>\n      | SubRouteRef<TParams>\n      | ExternalRouteRef<TParams>,\n    options?: { sourcePath?: string },\n  ): RouteFunc<TParams> | undefined {\n    if (!this.#delegate) {\n      throw new Error(\n        `You can't access the RouteResolver during initialization of the app tree. Please move occurrences of this out of the initialization of the factory`,\n      );\n    }\n\n    return this.#delegate.resolve(anyRouteRef, options);\n  }\n\n  initialize(\n    routeInfo: RouteInfo,\n    routeRefsById: Map<string, RouteRef | SubRouteRef>,\n  ) {\n    this.#delegate = new RouteResolver(\n      routeInfo.routePaths,\n      routeInfo.routeParents,\n      routeInfo.routeObjects,\n      this.routeBindings,\n      this.appBasePath,\n      routeInfo.routeAliasResolver,\n      routeRefsById,\n    );\n    this.#routeObjects = routeInfo.routeObjects;\n\n    return routeInfo;\n  }\n\n  getRouteObjects() {\n    return this.#routeObjects;\n  }\n}\n\n/**\n * Options for {@link createSpecializedApp}.\n *\n * @public\n */\nexport type CreateSpecializedAppOptions = {\n  /**\n   * The list of features to load.\n   */\n  features?: FrontendFeature[];\n\n  /**\n   * The config API implementation to use. For most normal apps, this should be\n   * specified.\n   *\n   * If none is given, a new _empty_ config will be used during startup. In\n   * later stages of the app lifecycle, the config API in the API holder will be\n   * used.\n   */\n  config?: ConfigApi;\n\n  /**\n   * Allows for the binding of plugins' external route refs within the app.\n   */\n  bindRoutes?(context: { bind: CreateAppRouteBinder }): void;\n\n  /**\n   * Advanced, more rarely used options.\n   */\n  advanced?: {\n    /**\n     * A replacement API holder implementation to use.\n     *\n     * By default, a new API holder will be constructed automatically based on\n     * the other inputs. If you pass in a custom one here, none of that\n     * automation will take place - so you will have to take care to supply all\n     * those APIs yourself.\n     */\n    apis?: ApiHolder;\n\n    /**\n     * If set to true, the system will silently accept and move on if\n     * encountering config for extensions that do not exist. The default is to\n     * reject such config to help catch simple mistakes.\n     *\n     * This flag can be useful in some scenarios where you have a dynamic set of\n     * extensions enabled at different times, but also increases the risk of\n     * accidentally missing e.g. simple typos in your config.\n     */\n    allowUnknownExtensionConfig?: boolean;\n\n    /**\n     * Applies one or more middleware on every extension, as they are added to\n     * the application.\n     *\n     * This is an advanced use case for modifying extension data on the fly as\n     * it gets emitted by extensions being instantiated.\n     */\n    extensionFactoryMiddleware?:\n      | ExtensionFactoryMiddleware\n      | ExtensionFactoryMiddleware[];\n\n    /**\n     * Allows for customizing how plugin info is retrieved.\n     */\n    pluginInfoResolver?: FrontendPluginInfoResolver;\n  };\n};\n\n/**\n * Creates an empty app without any default features. This is a low-level API is\n * intended for use in tests or specialized setups. Typically you want to use\n * `createApp` from `@backstage/frontend-defaults` instead.\n *\n * @public\n */\nexport function createSpecializedApp(options?: CreateSpecializedAppOptions): {\n  apis: ApiHolder;\n  tree: AppTree;\n  errors?: AppError[];\n} {\n  const config = options?.config ?? new ConfigReader({}, 'empty-config');\n  const features = deduplicateFeatures(options?.features ?? []).map(\n    createPluginInfoAttacher(config, options?.advanced?.pluginInfoResolver),\n  );\n\n  const collector = createErrorCollector();\n\n  const tree = resolveAppTree(\n    'root',\n    resolveAppNodeSpecs({\n      features,\n      builtinExtensions: [\n        resolveExtensionDefinition(Root, { namespace: 'root' }),\n      ],\n      parameters: readAppExtensionsConfig(config),\n      forbidden: new Set(['root']),\n      collector,\n    }),\n    collector,\n  );\n\n  const factories = createApiFactories({ tree, collector });\n  const appBasePath = getBasePath(config);\n  const appTreeApi = new AppTreeApiProxy(tree, appBasePath);\n\n  const routeRefsById = collectRouteIds(features, collector);\n  const routeResolutionApi = new RouteResolutionApiProxy(\n    resolveRouteBindings(options?.bindRoutes, config, routeRefsById, collector),\n    appBasePath,\n  );\n\n  const appIdentityProxy = new AppIdentityProxy();\n  const apis =\n    options?.advanced?.apis ??\n    createApiHolder({\n      factories,\n      staticFactories: [\n        createApiFactory(appTreeApiRef, appTreeApi),\n        createApiFactory(configApiRef, config),\n        createApiFactory(routeResolutionApiRef, routeResolutionApi),\n        createApiFactory(identityApiRef, appIdentityProxy),\n      ],\n    });\n\n  const featureFlagApi = apis.get(featureFlagsApiRef);\n  if (featureFlagApi) {\n    for (const feature of features) {\n      if (OpaqueFrontendPlugin.isType(feature)) {\n        OpaqueFrontendPlugin.toInternal(feature).featureFlags.forEach(flag =>\n          featureFlagApi.registerFlag({\n            name: flag.name,\n            pluginId: feature.id,\n          }),\n        );\n      }\n      if (isInternalFrontendModule(feature)) {\n        toInternalFrontendModule(feature).featureFlags.forEach(flag =>\n          featureFlagApi.registerFlag({\n            name: flag.name,\n            pluginId: feature.pluginId,\n          }),\n        );\n      }\n    }\n  }\n\n  // Now instantiate the entire tree, which will skip anything that's already been instantiated\n  instantiateAppNodeTree(\n    tree.root,\n    apis,\n    collector,\n    mergeExtensionFactoryMiddleware(\n      options?.advanced?.extensionFactoryMiddleware,\n    ),\n  );\n\n  const routeInfo = extractRouteInfoFromAppNode(\n    tree.root,\n    createRouteAliasResolver(routeRefsById),\n  );\n\n  routeResolutionApi.initialize(routeInfo, routeRefsById.routes);\n  appTreeApi.initialize(routeInfo);\n\n  return { apis, tree, errors: collector.collectErrors() };\n}\n\nfunction createApiFactories(options: {\n  tree: AppTree;\n  collector: ErrorCollector;\n}): AnyApiFactory[] {\n  const emptyApiHolder = ApiRegistry.from([]);\n  const factories = new Array<AnyApiFactory>();\n\n  for (const apiNode of options.tree.root.edges.attachments.get('apis') ?? []) {\n    if (!instantiateAppNodeTree(apiNode, emptyApiHolder, options.collector)) {\n      continue;\n    }\n    const apiFactory = apiNode.instance?.getData(ApiBlueprint.dataRefs.factory);\n    if (apiFactory) {\n      factories.push(apiFactory);\n    } else {\n      options.collector.report({\n        code: 'API_EXTENSION_INVALID',\n        message: `API extension '${apiNode.spec.id}' did not output an API factory`,\n        context: {\n          node: apiNode,\n        },\n      });\n    }\n  }\n\n  return factories;\n}\n\nfunction createApiHolder(options: {\n  factories: AnyApiFactory[];\n  staticFactories: AnyApiFactory[];\n}): ApiHolder {\n  const factoryRegistry = new ApiFactoryRegistry();\n\n  for (const factory of options.factories.slice().reverse()) {\n    factoryRegistry.register('default', factory);\n  }\n\n  for (const factory of options.staticFactories) {\n    factoryRegistry.register('static', factory);\n  }\n\n  ApiResolver.validateFactories(factoryRegistry, factoryRegistry.getAllApis());\n\n  return new ApiResolver(factoryRegistry);\n}\n\nfunction mergeExtensionFactoryMiddleware(\n  middlewares?: ExtensionFactoryMiddleware | ExtensionFactoryMiddleware[],\n): ExtensionFactoryMiddleware | undefined {\n  if (!middlewares) {\n    return undefined;\n  }\n  if (!Array.isArray(middlewares)) {\n    return middlewares;\n  }\n  if (middlewares.length <= 1) {\n    return middlewares[0];\n  }\n  return middlewares.reduce((prev, next) => {\n    if (!prev || !next) {\n      return prev ?? next;\n    }\n    return (orig, ctx) => {\n      const internalExt = toInternalExtension(ctx.node.spec.extension);\n      if (internalExt.version !== 'v2') {\n        return orig();\n      }\n      return next(ctxOverrides => {\n        return createExtensionDataContainer(\n          prev(orig, {\n            node: ctx.node,\n            apis: ctx.apis,\n            config: ctxOverrides?.config ?? ctx.config,\n          }),\n          'extension factory middleware',\n        );\n      }, ctx);\n    };\n  });\n}\n"],"names":[],"mappings":"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"}