{"version":3,"file":"resolveRouteBindings.esm.js","sources":["../../src/routing/resolveRouteBindings.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RouteRef,\n  SubRouteRef,\n  ExternalRouteRef,\n} from '@backstage/frontend-plugin-api';\nimport { RouteRefsById } from './collectRouteIds';\nimport { ErrorCollector } from '../wiring/createErrorCollector';\nimport { Config } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExternalRouteRef } from '../../../frontend-plugin-api/src/routing/ExternalRouteRef';\n\n/**\n * Extracts a union of the keys in a map whose value extends the given type\n *\n * @ignore\n */\ntype KeysWithType<Obj extends { [key in string]: any }, Type> = {\n  [key in keyof Obj]: Obj[key] extends Type ? key : never;\n}[keyof Obj];\n\n/**\n * Takes a map Map required values and makes all keys matching Keys optional\n *\n * @ignore\n */\ntype PartialKeys<\n  Map extends { [name in string]: any },\n  Keys extends keyof Map,\n> = Partial<Pick<Map, Keys>> & Required<Omit<Map, Keys>>;\n\n/**\n * Creates a map of target routes with matching parameters based on a map of external routes.\n *\n * @ignore\n */\ntype TargetRouteMap<\n  ExternalRoutes extends { [name: string]: ExternalRouteRef },\n> = {\n  [name in keyof ExternalRoutes]: ExternalRoutes[name] extends ExternalRouteRef<\n    infer Params\n  >\n    ? RouteRef<Params> | SubRouteRef<Params> | false\n    : never;\n};\n\n/**\n * A function that can bind from external routes of a given plugin, to concrete\n * routes of other plugins. See {@link @backstage/frontend-defaults#createApp}.\n *\n * @public\n */\nexport type CreateAppRouteBinder = <\n  TExternalRoutes extends { [name: string]: ExternalRouteRef },\n>(\n  externalRoutes: TExternalRoutes,\n  targetRoutes: PartialKeys<\n    TargetRouteMap<TExternalRoutes>,\n    KeysWithType<TExternalRoutes, ExternalRouteRef<any>>\n  >,\n) => void;\n\n/** @internal */\nexport function resolveRouteBindings(\n  bindRoutes: ((context: { bind: CreateAppRouteBinder }) => void) | undefined,\n  config: Config,\n  routesById: RouteRefsById,\n  collector: ErrorCollector,\n): Map<ExternalRouteRef, RouteRef | SubRouteRef> {\n  const result = new Map<ExternalRouteRef, RouteRef | SubRouteRef>();\n  const disabledExternalRefs = new Set<ExternalRouteRef>();\n\n  // Perform callback bindings first with highest priority\n  if (bindRoutes) {\n    const bind: CreateAppRouteBinder = (\n      externalRoutes,\n      targetRoutes: { [name: string]: RouteRef | SubRouteRef },\n    ) => {\n      for (const [key, value] of Object.entries(targetRoutes)) {\n        const externalRoute = externalRoutes[key];\n        if (!externalRoute) {\n          collector.report({\n            code: 'ROUTE_NOT_FOUND',\n            message: `Key ${key} is not an existing external route`,\n            context: { routeId: String(key) },\n          });\n          continue;\n        }\n        if (value) {\n          result.set(externalRoute, value);\n        } else if (value === false) {\n          disabledExternalRefs.add(externalRoute);\n        }\n      }\n    };\n    bindRoutes({ bind });\n  }\n\n  // Then perform config based bindings with lower priority\n  const bindings = config\n    .getOptionalConfig('app.routes.bindings')\n    ?.get<JsonObject>();\n  if (bindings) {\n    for (const [externalRefId, targetRefId] of Object.entries(bindings)) {\n      if (!isValidTargetRefId(targetRefId)) {\n        collector.report({\n          code: 'ROUTE_BINDING_INVALID_VALUE',\n          message: `Invalid config at app.routes.bindings['${externalRefId}'], value must be a non-empty string or false`,\n          context: { routeId: externalRefId },\n        });\n        continue;\n      }\n\n      const externalRef = routesById.externalRoutes.get(externalRefId);\n      if (!externalRef) {\n        collector.report({\n          code: 'ROUTE_NOT_FOUND',\n          message: `Invalid config at app.routes.bindings, '${externalRefId}' is not a valid external route`,\n          context: { routeId: externalRefId },\n        });\n        continue;\n      }\n\n      // Skip if binding was already defined in code\n      if (result.has(externalRef) || disabledExternalRefs.has(externalRef)) {\n        continue;\n      }\n\n      if (targetRefId === false) {\n        disabledExternalRefs.add(externalRef);\n      } else {\n        const targetRef = routesById.routes.get(targetRefId);\n        if (!targetRef) {\n          collector.report({\n            code: 'ROUTE_NOT_FOUND',\n            message: `Invalid config at app.routes.bindings['${externalRefId}'], '${String(\n              targetRefId,\n            )}' is not a valid route`,\n            context: { routeId: String(targetRefId) },\n          });\n          continue;\n        }\n\n        result.set(externalRef, targetRef);\n      }\n    }\n  }\n\n  // Finally fall back to attempting to map defaults, at lowest priority\n  for (const externalRef of routesById.externalRoutes.values()) {\n    if (!result.has(externalRef) && !disabledExternalRefs.has(externalRef)) {\n      const defaultRefId =\n        toInternalExternalRouteRef(externalRef).getDefaultTarget();\n      if (defaultRefId) {\n        const defaultRef = routesById.routes.get(defaultRefId);\n        if (defaultRef) {\n          result.set(externalRef, defaultRef);\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction isValidTargetRefId(value: unknown): value is string | false {\n  if (value === false) {\n    return true;\n  }\n\n  if (typeof value === 'string' && value) {\n    return true;\n  }\n\n  return false;\n}\n"],"names":[],"mappings":"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"}