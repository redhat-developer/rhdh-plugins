import { jsx, jsxs } from 'react/jsx-runtime';
import Box from '@material-ui/core/Box';
import IconButton from '@material-ui/core/IconButton';
import CopyIcon from '@material-ui/icons/FileCopy';
import classNames from 'classnames';
import { useState, useRef, useMemo, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import AutoSizer from 'react-virtualized-auto-sizer';
import { VariableSizeList, FixedSizeList } from 'react-window';
import { AnsiProcessor } from './AnsiProcessor.esm.js';
import { LogLine } from './LogLine.esm.js';
import { LogViewerControls } from './LogViewerControls.esm.js';
import { useStyles, HEADER_SIZE } from './styles.esm.js';
import { useLogViewerSearch } from './useLogViewerSearch.esm.js';
import { useLogViewerSelection } from './useLogViewerSelection.esm.js';

function RealLogViewer(props) {
  const classes = useStyles({ classes: props.classes });
  const [listInstance, setListInstance] = useState(null);
  const shouldTextWrap = props.textWrap ?? false;
  const heights = useRef({});
  const processor = useMemo(() => new AnsiProcessor(), []);
  const lines = processor.process(props.text);
  const search = useLogViewerSearch(lines);
  const selection = useLogViewerSelection(lines);
  const location = useLocation();
  useEffect(() => {
    if (listInstance) {
      listInstance.scrollToItem(lines.length - 1, "end");
    }
  }, [listInstance, lines]);
  useEffect(() => {
    if (!listInstance) {
      return;
    }
    if (search.resultLine) {
      listInstance.scrollToItem(search.resultLine - 1, "center");
    } else {
      listInstance.scrollToItem(lines.length - 1, "end");
    }
  }, [listInstance, search.resultLine, lines]);
  useEffect(() => {
    if (location.hash) {
      const line = parseInt(location.hash.replace(/\D/g, ""), 10);
      selection.setSelection(line, false);
    }
  }, []);
  const handleSelectLine = (line, event) => {
    selection.setSelection(line, event.shiftKey);
  };
  function setRowHeight(index, size) {
    if (shouldTextWrap && listInstance) {
      listInstance.resetAfterIndex(0);
      heights.current[index - 1] = size;
    }
  }
  function getRowHeight(index) {
    return heights.current[index] || 20;
  }
  return /* @__PURE__ */ jsx(AutoSizer, { children: ({ height, width }) => {
    const commonProps = {
      ref: setListInstance,
      className: classes.log,
      height: (height || 480) - HEADER_SIZE,
      width: width || 640,
      itemData: search.lines,
      itemCount: search.lines.length
    };
    const renderItem = ({
      index,
      style,
      data
    }) => {
      const line = data[index];
      const { lineNumber } = line;
      return /* @__PURE__ */ jsxs(
        Box,
        {
          style: { ...style },
          className: classNames(classes.line, {
            [classes.lineSelected]: selection.isSelected(lineNumber)
          }),
          children: [
            selection.shouldShowButton(lineNumber) && /* @__PURE__ */ jsx(
              IconButton,
              {
                "data-testid": "copy-button",
                size: "small",
                className: classes.lineCopyButton,
                onClick: () => selection.copySelection(),
                children: /* @__PURE__ */ jsx(CopyIcon, { fontSize: "inherit" })
              }
            ),
            /* @__PURE__ */ jsx(
              "a",
              {
                role: "row",
                target: "_self",
                href: `#line-${lineNumber}`,
                className: classes.lineNumber,
                onClick: (event) => handleSelectLine(lineNumber, event),
                onKeyPress: (event) => handleSelectLine(lineNumber, event),
                children: lineNumber
              }
            ),
            /* @__PURE__ */ jsx(
              LogLine,
              {
                setRowHeight: shouldTextWrap ? setRowHeight : void 0,
                line,
                classes,
                searchText: search.searchText,
                highlightResultIndex: search.resultLine === lineNumber ? search.resultLineIndex : void 0
              }
            )
          ]
        }
      );
    };
    return /* @__PURE__ */ jsxs(Box, { style: { width, height }, className: classes.root, children: [
      /* @__PURE__ */ jsx(Box, { className: classes.header, children: /* @__PURE__ */ jsx(LogViewerControls, { ...search }) }),
      shouldTextWrap ? /* @__PURE__ */ jsx(
        VariableSizeList,
        {
          ...commonProps,
          itemSize: getRowHeight,
          children: renderItem
        }
      ) : /* @__PURE__ */ jsx(FixedSizeList, { ...commonProps, itemSize: 20, children: renderItem })
    ] });
  } });
}

export { RealLogViewer };
//# sourceMappingURL=RealLogViewer.esm.js.map
