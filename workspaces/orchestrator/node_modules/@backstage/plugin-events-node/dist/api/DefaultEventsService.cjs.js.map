{"version":3,"file":"DefaultEventsService.cjs.js","sources":["../../src/api/DefaultEventsService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  DiscoveryService,\n  LifecycleService,\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport { EventParams } from './EventParams';\nimport {\n  EVENTS_NOTIFY_TIMEOUT_HEADER,\n  EventsService,\n  EventsServiceSubscribeOptions,\n} from './EventsService';\nimport { DefaultApiClient } from '../generated';\nimport { ResponseError } from '@backstage/errors';\n\nconst POLL_BACKOFF_START_MS = 1_000;\nconst POLL_BACKOFF_MAX_MS = 60_000;\nconst POLL_BACKOFF_FACTOR = 2;\n\nconst EVENT_BUS_MODES = ['never', 'always', 'auto'] as const;\n\n/**\n * @public\n */\nexport type EventBusMode = 'never' | 'always' | 'auto';\n\n/**\n * Local event bus for subscribers within the same process.\n *\n * When publishing events we'll keep track of which subscribers we managed to\n * reach locally, and forward those subscriber IDs to the events backend if it\n * is in use. The events backend will then both avoid forwarding the same events\n * to those subscribers again, but also avoid storing the event altogether if\n * there are no other subscribers.\n * @internal\n */\nexport class LocalEventBus {\n  readonly #logger: LoggerService;\n\n  readonly #subscribers = new Map<\n    string,\n    Omit<EventsServiceSubscribeOptions, 'topics'>[]\n  >();\n\n  constructor(logger: LoggerService) {\n    this.#logger = logger;\n  }\n\n  async publish(\n    params: EventParams,\n  ): Promise<{ notifiedSubscribers: string[] }> {\n    this.#logger.debug(\n      `Event received: topic=${params.topic}, metadata=${JSON.stringify(\n        params.metadata,\n      )}, payload=${JSON.stringify(params.eventPayload)}`,\n    );\n\n    if (!this.#subscribers.has(params.topic)) {\n      return { notifiedSubscribers: [] };\n    }\n\n    const onEventPromises: Promise<string>[] = [];\n    this.#subscribers.get(params.topic)?.forEach(subscription => {\n      onEventPromises.push(\n        (async () => {\n          try {\n            await subscription.onEvent(params);\n          } catch (error) {\n            this.#logger.warn(\n              `Subscriber \"${subscription.id}\" failed to process event for topic \"${params.topic}\"`,\n              error,\n            );\n          }\n          return subscription.id;\n        })(),\n      );\n    });\n\n    return { notifiedSubscribers: await Promise.all(onEventPromises) };\n  }\n\n  async subscribe(options: EventsServiceSubscribeOptions): Promise<void> {\n    options.topics.forEach(topic => {\n      if (!this.#subscribers.has(topic)) {\n        this.#subscribers.set(topic, []);\n      }\n\n      this.#subscribers.get(topic)!.push({\n        id: options.id,\n        onEvent: options.onEvent,\n      });\n    });\n  }\n}\n\n/**\n * Plugin specific events bus that delegates to the local bus, as well as the\n * events backend if it is available.\n */\nclass PluginEventsService implements EventsService {\n  constructor(\n    private readonly pluginId: string,\n    private readonly localBus: LocalEventBus,\n    private readonly logger: LoggerService,\n    private readonly mode: EventBusMode,\n    private client?: DefaultApiClient,\n    private readonly auth?: AuthService,\n  ) {}\n\n  async publish(params: EventParams): Promise<void> {\n    const lock = this.#getShutdownLock();\n    if (!lock) {\n      throw new Error('Service is shutting down');\n    }\n    try {\n      const { notifiedSubscribers } = await this.localBus.publish(params);\n\n      const client = this.client;\n      if (!client) {\n        return;\n      }\n      const token = await this.#getToken();\n      if (!token) {\n        return;\n      }\n      const res = await client.postEvent(\n        {\n          body: {\n            event: { payload: params.eventPayload, topic: params.topic },\n            notifiedSubscribers,\n          },\n        },\n        { token },\n      );\n\n      if (!res.ok) {\n        if (res.status === 404 && this.mode !== 'always') {\n          this.logger.warn(\n            `Event publish request failed with status 404, events backend not found. Future events will not be persisted.`,\n          );\n          delete this.client;\n          return;\n        }\n        throw await ResponseError.fromResponse(res);\n      }\n    } finally {\n      lock.release();\n    }\n  }\n\n  async subscribe(options: EventsServiceSubscribeOptions): Promise<void> {\n    const subscriptionId = `${this.pluginId}.${options.id}`;\n\n    await this.localBus.subscribe({\n      id: subscriptionId,\n      topics: options.topics,\n      onEvent: options.onEvent,\n    });\n\n    if (!this.client) {\n      return;\n    }\n\n    this.#startPolling(subscriptionId, options.topics, options.onEvent);\n  }\n\n  #startPolling(\n    subscriptionId: string,\n    topics: string[],\n    onEvent: EventsServiceSubscribeOptions['onEvent'],\n  ) {\n    let hasSubscription = false;\n    let backoffMs = POLL_BACKOFF_START_MS;\n    const poll = async () => {\n      const client = this.client;\n      if (!client) {\n        return;\n      }\n      const lock = this.#getShutdownLock();\n      if (!lock) {\n        return; // shutting down\n      }\n      try {\n        const token = await this.#getToken();\n        if (!token) {\n          return;\n        }\n\n        if (hasSubscription) {\n          const res = await client.getSubscriptionEvents(\n            {\n              path: { subscriptionId },\n            },\n            { token },\n          );\n\n          if (res.status === 202) {\n            // 202 means there were no immediately available events, but the\n            // response will block until either new events are available or the\n            // request times out. In both cases we should should try to read events\n            // immediately again\n\n            lock.release();\n\n            const notifyTimeoutHeader = res.headers.get(\n              EVENTS_NOTIFY_TIMEOUT_HEADER,\n            );\n\n            // Add 1s to the timeout to allow the server to potentially timeout first\n            const notifyTimeoutMs =\n              notifyTimeoutHeader && !isNaN(parseInt(notifyTimeoutHeader, 10))\n                ? Number(notifyTimeoutHeader) + 1_000\n                : null;\n\n            await Promise.race(\n              [\n                // We don't actually expect any response body here, but waiting for\n                // an empty body to be returned has been more reliable that waiting\n                // for the response body stream to close.\n                res.text(),\n                notifyTimeoutMs\n                  ? new Promise(resolve => setTimeout(resolve, notifyTimeoutMs))\n                  : null,\n              ].filter(Boolean),\n            );\n          } else if (res.status === 200) {\n            const data = await res.json();\n            if (data) {\n              for (const event of data.events ?? []) {\n                try {\n                  await onEvent({\n                    topic: event.topic,\n                    eventPayload: event.payload,\n                  });\n                } catch (error) {\n                  this.logger.warn(\n                    `Subscriber \"${subscriptionId}\" failed to process event for topic \"${event.topic}\"`,\n                    error,\n                  );\n                }\n              }\n            }\n          } else {\n            if (res.status === 404) {\n              this.logger.info(\n                `Polling event subscription resulted in a 404, recreating subscription`,\n              );\n              hasSubscription = false;\n            } else {\n              throw await ResponseError.fromResponse(res);\n            }\n          }\n        }\n\n        // If we haven't yet created the subscription, or if it was removed, create a new one\n        if (!hasSubscription) {\n          const res = await client.putSubscription(\n            {\n              path: { subscriptionId },\n              body: { topics },\n            },\n            { token },\n          );\n          hasSubscription = true;\n          if (!res.ok) {\n            if (res.status === 404 && this.mode !== 'always') {\n              this.logger.warn(\n                `Event subscribe request failed with status 404, events backend not found. Will only receive events that were sent locally on this process.`,\n              );\n              // Events backend is not present and not configured to always be used, bail out and stop polling\n              delete this.client;\n              return;\n            }\n            throw await ResponseError.fromResponse(res);\n          }\n        }\n\n        // No errors, reset backoff\n        backoffMs = POLL_BACKOFF_START_MS;\n\n        process.nextTick(poll);\n      } catch (error) {\n        this.logger.warn(\n          `Poll failed for subscription \"${subscriptionId}\", retrying in ${backoffMs.toFixed(\n            0,\n          )}ms`,\n          error,\n        );\n        setTimeout(poll, backoffMs);\n        backoffMs = Math.min(\n          backoffMs * POLL_BACKOFF_FACTOR,\n          POLL_BACKOFF_MAX_MS,\n        );\n      } finally {\n        lock.release();\n      }\n    };\n    poll();\n  }\n\n  async #getToken() {\n    if (!this.auth) {\n      throw new Error('Auth service not available');\n    }\n\n    try {\n      const { token } = await this.auth.getPluginRequestToken({\n        onBehalfOf: await this.auth.getOwnServiceCredentials(),\n        targetPluginId: 'events',\n      });\n      return token;\n    } catch (error) {\n      // This is a bit hacky, but handles the case where new auth is used\n      // without legacy auth fallback, and the events backend is not installed\n      if (\n        String(error).includes('Unable to generate legacy token') &&\n        this.mode !== 'always'\n      ) {\n        this.logger.warn(\n          `The events backend is not available and neither is legacy auth. Future events will not be persisted.`,\n        );\n        delete this.client;\n        return undefined;\n      }\n      throw error;\n    }\n  }\n\n  async shutdown() {\n    this.#isShuttingDown = true;\n    await Promise.all(this.#shutdownLocks);\n  }\n\n  #isShuttingDown = false;\n  #shutdownLocks = new Set<Promise<void>>();\n\n  // This locking mechanism helps ensure that we are either idle or waiting for\n  // a blocked events call before shutting down. It increases out changes of\n  // never dropping any events on shutdown.\n  #getShutdownLock(): { release(): void } | undefined {\n    if (this.#isShuttingDown) {\n      return undefined;\n    }\n\n    let release: () => void;\n\n    const lock = new Promise<void>(resolve => {\n      release = () => {\n        resolve();\n        this.#shutdownLocks.delete(lock);\n      };\n    });\n    this.#shutdownLocks.add(lock);\n    return { release: release! };\n  }\n}\n\n/**\n * In-process event broker which will pass the event to all registered subscribers\n * interested in it.\n * Events will not be persisted in any form.\n * Events will not be passed to subscribers at other instances of the same cluster.\n *\n * @public\n */\n// TODO(pjungermann): add opentelemetry? (see plugins/catalog-backend/src/util/opentelemetry.ts, etc.)\nexport class DefaultEventsService implements EventsService {\n  private constructor(\n    private readonly logger: LoggerService,\n    private readonly localBus: LocalEventBus,\n    private readonly mode: EventBusMode,\n  ) {}\n\n  static create(options: {\n    logger: LoggerService;\n    config?: RootConfigService;\n    useEventBus?: EventBusMode;\n  }): DefaultEventsService {\n    const eventBusMode =\n      options.useEventBus ??\n      ((options.config?.getOptionalString('events.useEventBus') ??\n        'auto') as EventBusMode);\n    if (!EVENT_BUS_MODES.includes(eventBusMode)) {\n      throw new Error(\n        `Invalid events.useEventBus config, must be one of ${EVENT_BUS_MODES.join(\n          ', ',\n        )}, got '${eventBusMode}'`,\n      );\n    }\n\n    return new DefaultEventsService(\n      options.logger,\n      new LocalEventBus(options.logger),\n      eventBusMode,\n    );\n  }\n\n  /**\n   * Returns a plugin-scoped context of the `EventService`\n   * that ensures to prefix subscriber IDs with the plugin ID.\n   *\n   * @param pluginId - The plugin that the `EventService` should be created for.\n   */\n  forPlugin(\n    pluginId: string,\n    options?: {\n      discovery: DiscoveryService;\n      logger: LoggerService;\n      auth: AuthService;\n      lifecycle: LifecycleService;\n    },\n  ): EventsService {\n    const client =\n      options && this.mode !== 'never'\n        ? new DefaultApiClient({\n            discoveryApi: options.discovery,\n            fetchApi: { fetch }, // use native node fetch\n          })\n        : undefined;\n    const logger = options?.logger ?? this.logger;\n    const service = new PluginEventsService(\n      pluginId,\n      this.localBus,\n      logger,\n      this.mode,\n      client,\n      options?.auth,\n    );\n    options?.lifecycle.addShutdownHook(async () => {\n      await service.shutdown();\n    });\n    return service;\n  }\n\n  async publish(params: EventParams): Promise<void> {\n    await this.localBus.publish(params);\n  }\n\n  async subscribe(options: EventsServiceSubscribeOptions): Promise<void> {\n    this.localBus.subscribe(options);\n  }\n}\n"],"names":["ResponseError","EVENTS_NOTIFY_TIMEOUT_HEADER","DefaultApiClient"],"mappings":"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"}