'use strict';

var openBrowser = require('react-dev-utils/openBrowser');
var cliNode = require('@backstage/cli-node');
var chalk = require('chalk');
var fs = require('fs-extra');
var uniq = require('lodash/uniq');
var webpack = require('webpack');
var WebpackDevServer = require('webpack-dev-server');
var lint = require('../../commands/versions/lint.cjs.js');
var paths$1 = require('../paths.cjs.js');
var config = require('../config.cjs.js');
var Lockfile = require('../versioning/Lockfile.cjs.js');
var config$1 = require('./config.cjs.js');
var packageDetection = require('./packageDetection.cjs.js');
var paths = require('./paths.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var openBrowser__default = /*#__PURE__*/_interopDefaultCompat(openBrowser);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var uniq__default = /*#__PURE__*/_interopDefaultCompat(uniq);
var webpack__default = /*#__PURE__*/_interopDefaultCompat(webpack);
var WebpackDevServer__default = /*#__PURE__*/_interopDefaultCompat(WebpackDevServer);

async function serveBundle(options) {
  const paths$2 = paths.resolveBundlingPaths(options);
  const targetPkg = await fs__default.default.readJson(paths$2.targetPackageJson);
  if (options.verifyVersions) {
    const lockfile = await Lockfile.Lockfile.load(
      paths$1.paths.resolveTargetRoot("yarn.lock")
    );
    const result = lockfile.analyze({
      filter: lint.includedFilter,
      localPackages: cliNode.PackageGraph.fromPackages(
        await cliNode.PackageGraph.listTargetPackages()
      )
    });
    const problemPackages = [...result.newVersions, ...result.newRanges].map(({ name: name2 }) => name2).filter(lint.forbiddenDuplicatesFilter);
    if (problemPackages.length > 1) {
      console.log(
        chalk__default.default.yellow(
          `\u26A0\uFE0F   Some of the following packages may be outdated or have duplicate installations:

          ${uniq__default.default(problemPackages).join(", ")}
        `
        )
      );
      console.log(
        chalk__default.default.yellow(
          `\u26A0\uFE0F   This can be resolved using the following command:

          yarn backstage-cli versions:check --fix
      `
        )
      );
    }
  }
  checkReactVersion();
  const { name } = await fs__default.default.readJson(paths$1.paths.resolveTarget("package.json"));
  let server = undefined;
  let latestFrontendAppConfigs = [];
  const cliConfig = await config.loadCliConfig({
    args: options.configPaths,
    fromPackage: name,
    withFilteredKeys: true,
    watch(appConfigs) {
      latestFrontendAppConfigs = appConfigs;
      server?.invalidate();
    }
  });
  latestFrontendAppConfigs = cliConfig.frontendAppConfigs;
  const appBaseUrl = cliConfig.frontendConfig.getString("app.baseUrl");
  const backendBaseUrl = cliConfig.frontendConfig.getString("backend.baseUrl");
  if (appBaseUrl === backendBaseUrl) {
    console.log(
      chalk__default.default.yellow(
        `\u26A0\uFE0F   Conflict between app baseUrl and backend baseUrl:

    app.baseUrl:     ${appBaseUrl}
    backend.baseUrl: ${backendBaseUrl}

    Must have unique hostname and/or ports.

    This can be resolved by changing app.baseUrl and backend.baseUrl to point to their respective local development ports.
`
      )
    );
  }
  const { frontendConfig, fullConfig } = cliConfig;
  const url = config$1.resolveBaseUrl(frontendConfig);
  const host = frontendConfig.getOptionalString("app.listen.host") || url.hostname;
  const port = frontendConfig.getOptionalNumber("app.listen.port") || Number(url.port) || (url.protocol === "https:" ? 443 : 80);
  const detectedModulesEntryPoint = await packageDetection.createDetectedModulesEntryPoint({
    config: fullConfig,
    targetPath: paths$2.targetPath,
    watch() {
      server?.invalidate();
    }
  });
  const config$2 = await config$1.createConfig(paths$2, {
    ...options,
    checksEnabled: options.checksEnabled,
    isDev: true,
    baseUrl: url,
    frontendConfig,
    getFrontendAppConfigs: () => {
      return latestFrontendAppConfigs;
    },
    additionalEntryPoints: detectedModulesEntryPoint
  });
  const compiler = webpack__default.default(config$2);
  server = new WebpackDevServer__default.default(
    {
      hot: !process.env.CI,
      devMiddleware: {
        publicPath: config$2.output?.publicPath,
        stats: "errors-warnings"
      },
      static: paths$2.targetPublic ? {
        publicPath: config$2.output?.publicPath,
        directory: paths$2.targetPublic
      } : undefined,
      historyApiFallback: {
        // Paths with dots should still use the history fallback.
        // See https://github.com/facebookincubator/create-react-app/issues/387.
        disableDotRule: true,
        // The index needs to be rewritten relative to the new public path, including subroutes.
        index: `${config$2.output?.publicPath}index.html`
      },
      https: url.protocol === "https:" ? {
        cert: fullConfig.getString("app.https.certificate.cert"),
        key: fullConfig.getString("app.https.certificate.key")
      } : false,
      host,
      port,
      proxy: targetPkg.proxy,
      // When the dev server is behind a proxy, the host and public hostname differ
      allowedHosts: [url.hostname],
      client: {
        webSocketURL: "auto://0.0.0.0:0/ws"
      }
    },
    compiler
  );
  await new Promise((resolve, reject) => {
    server?.startCallback((err) => {
      if (err) {
        reject(err);
        return;
      }
      openBrowser__default.default(url.href);
      resolve();
    });
  });
  const waitForExit = async () => {
    for (const signal of ["SIGINT", "SIGTERM"]) {
      process.on(signal, () => {
        server?.close();
        process.exit();
      });
    }
    return new Promise(() => {
    });
  };
  return waitForExit;
}
function checkReactVersion() {
  try {
    const reactPkgPath = require.resolve("react/package.json", {
      paths: [paths$1.paths.targetRoot]
    });
    const reactPkg = require(reactPkgPath);
    if (reactPkg.version.startsWith("16.")) {
      console.log(
        chalk__default.default.yellow(
          `
\u26A0\uFE0F                                                                           \u26A0\uFE0F
\u26A0\uFE0F You are using React version 16, which is deprecated for use in Backstage. \u26A0\uFE0F
\u26A0\uFE0F Please upgrade to React 17 by updating your packages/app dependencies.    \u26A0\uFE0F
\u26A0\uFE0F                                                                           \u26A0\uFE0F
`
        )
      );
    }
  } catch {
  }
}

exports.serveBundle = serveBundle;
//# sourceMappingURL=server.cjs.js.map
