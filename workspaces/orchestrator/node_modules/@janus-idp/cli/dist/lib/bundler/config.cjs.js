'use strict';

var ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');
var cliCommon = require('@backstage/cli-common');
var getPackages = require('@manypkg/get-packages');
var ESLintPlugin = require('eslint-webpack-plugin');
var ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
var fs = require('fs-extra');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var pickBy = require('lodash/pickBy');
var webpack = require('webpack');
var yn = require('yn');
var path = require('path');
var paths = require('../paths.cjs.js');
var version = require('../version.cjs.js');
var run = require('../run.cjs.js');
var LinkedPackageResolvePlugin = require('./LinkedPackageResolvePlugin.cjs.js');
var optimization = require('./optimization.cjs.js');
var scalprumConfig = require('./scalprumConfig.cjs.js');
var transforms = require('./transforms.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var ModuleScopePlugin__default = /*#__PURE__*/_interopDefaultCompat(ModuleScopePlugin);
var ESLintPlugin__default = /*#__PURE__*/_interopDefaultCompat(ESLintPlugin);
var ForkTsCheckerWebpackPlugin__default = /*#__PURE__*/_interopDefaultCompat(ForkTsCheckerWebpackPlugin);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var HtmlWebpackPlugin__default = /*#__PURE__*/_interopDefaultCompat(HtmlWebpackPlugin);
var pickBy__default = /*#__PURE__*/_interopDefaultCompat(pickBy);
var webpack__default = /*#__PURE__*/_interopDefaultCompat(webpack);
var yn__default = /*#__PURE__*/_interopDefaultCompat(yn);

const { ModuleFederationPlugin } = webpack.container;
const scalprumPlugin = new ModuleFederationPlugin({
  name: "backstageHost",
  filename: "backstageHost.[fullhash].js",
  shared: [scalprumConfig.sharedModules]
});
const BUILD_CACHE_ENV_VAR = "BACKSTAGE_CLI_EXPERIMENTAL_BUILD_CACHE";
function resolveBaseUrl(config) {
  const baseUrl = config.getString("app.baseUrl");
  try {
    return new URL(baseUrl);
  } catch (error) {
    throw new Error(`Invalid app.baseUrl, ${error}`);
  }
}
async function readBuildInfo() {
  const timestamp = Date.now();
  let commit = "unknown";
  try {
    commit = await run.runPlain("git", "rev-parse", "HEAD");
  } catch (error) {
    console.warn(`WARNING: Failed to read git commit, ${error}`);
  }
  let gitVersion = "unknown";
  try {
    gitVersion = await run.runPlain("git", "describe", "--always");
  } catch (error) {
    console.warn(`WARNING: Failed to describe git version, ${error}`);
  }
  const { version: packageVersion } = await fs__default.default.readJson(
    paths.paths.resolveTarget("package.json")
  );
  return {
    cliVersion: version.version,
    gitVersion,
    packageVersion,
    timestamp,
    commit
  };
}
async function createConfig(paths$1, options) {
  const { checksEnabled, isDev, frontendConfig } = options;
  const { plugins, loaders } = transforms.transforms(options);
  const { packages } = await getPackages.getPackages(paths.paths.targetDir);
  const externalPkgs = packages.filter((p) => !cliCommon.isChildPath(paths$1.root, p.dir));
  const baseUrl = frontendConfig.getString("app.baseUrl");
  const validBaseUrl = new URL(baseUrl);
  const publicPath = validBaseUrl.pathname.replace(/\/$/, "");
  if (checksEnabled) {
    plugins.push(
      new ForkTsCheckerWebpackPlugin__default.default({
        typescript: { configFile: paths$1.targetTsConfig, memoryLimit: 4096 }
      }),
      new ESLintPlugin__default.default({
        context: paths$1.targetPath,
        files: ["**/*.(ts|tsx|mts|cts|js|jsx|mjs|cjs)"]
      })
    );
  }
  plugins.push(
    new webpack.ProvidePlugin({
      process: "process/browser",
      Buffer: ["buffer", "Buffer"]
    })
  );
  plugins.push(
    new HtmlWebpackPlugin__default.default({
      template: paths$1.targetHtml,
      templateParameters: {
        publicPath,
        config: frontendConfig
      }
    })
  );
  const buildInfo = await readBuildInfo();
  plugins.push(
    new webpack__default.default.DefinePlugin({
      "process.env.HAS_REACT_DOM_CLIENT": false,
      "process.env.BUILD_INFO": JSON.stringify(buildInfo),
      "process.env.APP_CONFIG": webpack__default.default.DefinePlugin.runtimeValue(
        () => JSON.stringify(options.getFrontendAppConfigs()),
        true
      )
    })
  );
  plugins.push(scalprumPlugin);
  const reactRefreshFiles = [
    require.resolve(
      "@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js"
    ),
    require.resolve("@pmmmwh/react-refresh-webpack-plugin/overlay/index.js"),
    require.resolve("react-refresh")
  ];
  const withCache = yn__default.default(process.env[BUILD_CACHE_ENV_VAR], { default: false });
  return {
    cache: {
      type: "filesystem",
      allowCollectingMemory: true,
      cacheDirectory: path.join(process.cwd(), ".webpack-cache")
    },
    mode: isDev ? "development" : "production",
    profile: false,
    optimization: optimization.optimization(options),
    bail: false,
    performance: {
      hints: false
      // we check the gzip size instead
    },
    devtool: isDev ? "eval-cheap-module-source-map" : "source-map",
    context: paths$1.targetPath,
    entry: [...options.additionalEntryPoints ?? [], paths$1.targetEntry],
    resolve: {
      alias: {
        "@backstage/frontend-app-api/src": path.join(
          process.cwd(),
          "src",
          "overrides",
          "@backstage",
          "frontend-app-api",
          "src"
        )
      },
      extensions: [".ts", ".tsx", ".mjs", ".js", ".jsx", ".json", ".wasm"],
      mainFields: ["browser", "module", "main"],
      fallback: {
        ...pickBy__default.default(require("node-libs-browser")),
        module: false,
        dgram: false,
        dns: false,
        fs: false,
        http2: false,
        net: false,
        tls: false,
        child_process: false,
        /* new ignores */
        path: false,
        https: false,
        http: false,
        util: require.resolve("util/")
      },
      plugins: [
        new LinkedPackageResolvePlugin.LinkedPackageResolvePlugin(paths$1.rootNodeModules, externalPkgs),
        new ModuleScopePlugin__default.default(
          [paths$1.targetSrc, paths$1.targetDev],
          [paths$1.targetPackageJson, ...reactRefreshFiles]
        )
      ]
    },
    module: {
      rules: loaders
    },
    output: {
      path: paths$1.targetDist,
      publicPath: `${publicPath}/`,
      filename: isDev ? "[name].js" : "static/[name].[fullhash:8].js",
      chunkFilename: isDev ? "[name].chunk.js" : "static/[name].[chunkhash:8].chunk.js",
      ...isDev ? {
        devtoolModuleFilenameTemplate: (info) => `file:///${path.resolve(info.absoluteResourcePath).replace(
          /\\/g,
          "/"
        )}`
      } : {}
    },
    plugins,
    ...withCache ? {
      cache: {
        type: "filesystem",
        buildDependencies: {
          config: [__filename]
        }
      }
    } : {}
  };
}

exports.createConfig = createConfig;
exports.resolveBaseUrl = resolveBaseUrl;
//# sourceMappingURL=config.cjs.js.map
