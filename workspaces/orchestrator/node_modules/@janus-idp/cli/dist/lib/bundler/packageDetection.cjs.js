'use strict';

var chokidar = require('chokidar');
var fs = require('fs-extra');
var path = require('path');
var paths = require('../paths.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chokidar__default = /*#__PURE__*/_interopDefaultCompat(chokidar);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

const DETECTED_MODULES_MODULE_NAME = "__backstage-autodetected-plugins__";
function readPackageDetectionConfig(config) {
  const packages = config.getOptional("app.experimental.packages");
  if (packages === undefined || packages === null) {
    return undefined;
  }
  if (typeof packages === "string") {
    if (packages !== "all") {
      throw new Error(
        `Invalid app.experimental.packages mode, got '${packages}', expected 'all'`
      );
    }
    return {};
  }
  return {
    include: config.getOptionalStringArray("app.experimental.packages.include"),
    exclude: config.getOptionalStringArray("app.experimental.packages.exclude")
  };
}
async function detectPackages(targetPath, { include, exclude }) {
  const pkg = await fs__default.default.readJson(
    path.resolve(targetPath, "package.json")
  );
  return Object.keys(pkg.dependencies ?? {}).flatMap((depName) => {
    const depPackageJson = require(
      require.resolve(`${depName}/package.json`, { paths: [targetPath] })
    );
    if (["frontend-plugin", "frontend-plugin-module"].includes(
      depPackageJson.backstage?.role ?? ""
    )) {
      return [depName];
    }
    return [];
  }).filter((name) => {
    if (exclude?.includes(name)) {
      return false;
    }
    if (include && !include.includes(name)) {
      return false;
    }
    return true;
  });
}
async function writeDetectedPackagesModule(packageNames) {
  const requirePackageScript = packageNames?.map((pkg) => `{ name: '${pkg}', default: require('${pkg}').default }`).join(",");
  await fs__default.default.writeFile(
    path.join(
      paths.paths.targetRoot,
      "node_modules",
      `${DETECTED_MODULES_MODULE_NAME}.js`
    ),
    `window['__@backstage/discovered__'] = { modules: [${requirePackageScript}] };`
  );
}
async function createDetectedModulesEntryPoint(options) {
  const { config, watch, targetPath } = options;
  const detectionConfig = readPackageDetectionConfig(config);
  if (!detectionConfig) {
    return [];
  }
  if (watch) {
    const watcher = chokidar__default.default.watch(path.resolve(targetPath, "package.json"));
    watcher.on("change", async () => {
      await writeDetectedPackagesModule(
        await detectPackages(targetPath, detectionConfig)
      );
      watch();
    });
  }
  await writeDetectedPackagesModule(
    await detectPackages(targetPath, detectionConfig)
  );
  return [DETECTED_MODULES_MODULE_NAME];
}

exports.createDetectedModulesEntryPoint = createDetectedModulesEntryPoint;
//# sourceMappingURL=packageDetection.cjs.js.map
