'use strict';

var dynamicPluginSdkWebpack = require('@openshift/dynamic-plugin-sdk-webpack');
var ESLintPlugin = require('eslint-webpack-plugin');
var ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
var pickBy = require('lodash/pickBy');
var webpack = require('webpack');
var path = require('path');
var transforms = require('./transforms.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var ESLintPlugin__default = /*#__PURE__*/_interopDefaultCompat(ESLintPlugin);
var ForkTsCheckerWebpackPlugin__default = /*#__PURE__*/_interopDefaultCompat(ForkTsCheckerWebpackPlugin);
var pickBy__default = /*#__PURE__*/_interopDefaultCompat(pickBy);
var webpack__default = /*#__PURE__*/_interopDefaultCompat(webpack);

const sharedModules = {
  /**
   * Mandatory singleton packages for sharing
   */
  react: {
    singleton: true,
    requiredVersion: "*"
  },
  "react-dom": {
    singleton: true,
    requiredVersion: "*"
  },
  "react-router-dom": {
    singleton: true,
    requiredVersion: "*"
  },
  "react-router": {
    singleton: true,
    requiredVersion: "*"
  },
  "@backstage/version-bridge": {
    singleton: true,
    requiredVersion: "*"
  },
  "@backstage/core-app-api": {
    singleton: true,
    requiredVersion: "*"
  },
  "@backstage/core-plugin-api": {
    singleton: true,
    requiredVersion: "*"
  },
  "@backstage/frontend-plugin-api": {
    singleton: true,
    requiredVersion: "*"
  },
  "@scalprum/react-core": {
    singleton: true,
    requiredVersion: "*"
  },
  "@openshift/dynamic-plugin-sdk": {
    singleton: true,
    requiredVersion: "*"
  },
  /**
   * The following two packages are required to be shared as singletons to enable UI theming
   */
  "@material-ui/core/styles": {
    singleton: true,
    requiredVersion: "*"
  },
  "@material-ui/styles": {
    singleton: true,
    requiredVersion: "*"
  },
  "@mui/material": {
    singleton: true,
    requiredVersion: "*"
  },
  "@mui/system": {
    singleton: true,
    requiredVersion: "*"
  },
  "@mui/private-theming": {
    singleton: true,
    requiredVersion: "*"
  },
  "@mui/styled-engine": {
    singleton: true,
    requiredVersion: "*"
  },
  "@emotion/cache": {
    singleton: true,
    requiredVersion: "*"
  },
  "@emotion/react": {
    singleton: true,
    requiredVersion: "*"
  }
};
async function createScalprumConfig(paths, options) {
  const { checksEnabled, isDev } = options;
  const { plugins, loaders } = transforms.transforms({
    ...options,
    isDev: !!options.isDev
  });
  if (checksEnabled) {
    plugins.push(
      new ForkTsCheckerWebpackPlugin__default.default({
        typescript: { configFile: paths.targetTsConfig, memoryLimit: 4096 }
      }),
      new ESLintPlugin__default.default({
        context: paths.targetPath,
        files: ["**/*.(ts|tsx|mts|cts|js|jsx|mjs|cjs)"]
      })
    );
  }
  plugins.push(
    new webpack.ProvidePlugin({
      process: "process/browser",
      Buffer: ["buffer", "Buffer"]
    })
  );
  plugins.push(
    new webpack__default.default.EnvironmentPlugin({
      HAS_REACT_DOM_CLIENT: false
    })
  );
  const dynamicPluginPlugin = new dynamicPluginSdkWebpack.DynamicRemotePlugin({
    extensions: [],
    sharedModules,
    entryScriptFilename: `${options.pluginMetadata.name}.[fullhash].js`,
    pluginMetadata: {
      ...options.pluginMetadata
    }
  });
  plugins.push(dynamicPluginPlugin);
  return {
    mode: isDev ? "development" : "production",
    profile: false,
    bail: false,
    performance: {
      hints: false
      // we check the gzip size instead
    },
    devtool: isDev ? "eval-cheap-module-source-map" : "source-map",
    context: paths.targetPath,
    entry: {},
    // Plugin container entry is generated by DynamicRemotePlugin
    resolve: {
      alias: {
        "@backstage/frontend-app-api/src": path.join(
          process.cwd(),
          "src",
          "overrides",
          "@backstage",
          "frontend-app-api",
          "src"
        )
      },
      extensions: [".ts", ".tsx", ".mjs", ".js", ".jsx", ".json", ".wasm"],
      fallback: {
        ...pickBy__default.default(require("node-libs-browser")),
        module: false,
        dgram: false,
        dns: false,
        fs: false,
        http2: false,
        net: false,
        tls: false,
        child_process: false,
        /* new ignores */
        path: false,
        https: false,
        http: false,
        util: require.resolve("util/")
      }
    },
    module: {
      rules: loaders
    },
    output: {
      path: paths.targetScalprumDist,
      publicPath: "auto",
      filename: isDev ? "[name].js" : "static/[name].[fullhash:8].js",
      chunkFilename: isDev ? "[name].chunk.js" : "static/[name].[chunkhash:8].chunk.js",
      ...isDev ? {
        devtoolModuleFilenameTemplate: (info) => `file:///${path.resolve(info.absoluteResourcePath).replace(
          /\\/g,
          "/"
        )}`
      } : {}
    },
    plugins
  };
}

exports.createScalprumConfig = createScalprumConfig;
exports.sharedModules = sharedModules;
//# sourceMappingURL=scalprumConfig.cjs.js.map
