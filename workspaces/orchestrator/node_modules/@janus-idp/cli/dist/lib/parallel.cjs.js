'use strict';

var os = require('os');
require('worker_threads');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var os__default = /*#__PURE__*/_interopDefaultCompat(os);

const defaultParallelism = Math.ceil(os__default.default.cpus().length / 2);
const PARALLEL_ENV_VAR = "BACKSTAGE_CLI_BUILD_PARALLEL";
function parseParallelismOption(parallel) {
  if (parallel === undefined || parallel === null) {
    return defaultParallelism;
  } else if (typeof parallel === "boolean") {
    return parallel ? defaultParallelism : 1;
  } else if (typeof parallel === "number" && Number.isInteger(parallel)) {
    if (parallel < 1) {
      return 1;
    }
    return parallel;
  } else if (typeof parallel === "string") {
    if (parallel === "true") {
      return parseParallelismOption(true);
    } else if (parallel === "false") {
      return parseParallelismOption(false);
    }
    const parsed = Number(parallel);
    if (Number.isInteger(parsed)) {
      return parseParallelismOption(parsed);
    }
  }
  throw Error(
    `Parallel option value '${parallel}' is not a boolean or integer`
  );
}
function getEnvironmentParallelism() {
  return parseParallelismOption(process.env[PARALLEL_ENV_VAR]);
}

exports.getEnvironmentParallelism = getEnvironmentParallelism;
exports.parseParallelismOption = parseParallelismOption;
//# sourceMappingURL=parallel.cjs.js.map
