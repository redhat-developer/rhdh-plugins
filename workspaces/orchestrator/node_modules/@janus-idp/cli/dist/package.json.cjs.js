'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var name = "@janus-idp/cli";
var description = "CLI for developing Backstage plugins and apps";
var version = "3.6.1";
var publishConfig = {
	access: "public"
};
var backstage = {
	role: "cli"
};
var homepage = "https://janus-idp.io";
var repository = "github:janus-idp/backstage-plugins";
var keywords = [
	"backstage"
];
var license = "Apache-2.0";
var main = "dist/index.cjs.js";
var scripts = {
	build: "backstage-cli package build",
	"lint:check": "backstage-cli package lint",
	"lint:fix": "backstage-cli package lint --fix",
	tsc: "tsc",
	"prettier:check": "prettier --ignore-unknown --check .",
	"prettier:fix": "prettier --ignore-unknown --write .",
	test: "backstage-cli package test --passWithNoTests --coverage",
	clean: "backstage-cli package clean",
	start: "nodemon --"
};
var bin = {
	"janus-cli": "bin/janus-cli"
};
var dependencies = {
	"@backstage/cli-common": "^0.1.15",
	"@backstage/cli-node": "^0.2.12",
	"@backstage/config": "^1.3.2",
	"@backstage/config-loader": "^1.9.5",
	"@backstage/errors": "^1.2.7",
	"@backstage/types": "^1.2.1",
	"@manypkg/get-packages": "^1.1.3",
	"@openshift/dynamic-plugin-sdk-webpack": "^3.0.0",
	"@pmmmwh/react-refresh-webpack-plugin": "^0.5.7",
	"@svgr/webpack": "^6.5.1",
	"@yarnpkg/lockfile": "^1.1.0",
	"@yarnpkg/parsers": "^3.0.0-rc.4",
	bfj: "^8.0.0",
	chalk: "^4.0.0",
	chokidar: "^3.3.1",
	codeowners: "^5.1.1",
	commander: "^9.1.0",
	"css-loader": "^6.5.1",
	esbuild: "^0.23.0",
	"esbuild-loader": "^2.18.0",
	eslint: "^8.49.0",
	"eslint-config-prettier": "^8.10.0",
	"eslint-webpack-plugin": "^3.2.0",
	"fork-ts-checker-webpack-plugin": "^7.0.0-alpha.8",
	"fs-extra": "^10.1.0",
	gitconfiglocal: "2.1.0",
	handlebars: "^4.7.7",
	"html-webpack-plugin": "^5.3.1",
	"is-native-module": "^1.1.3",
	lodash: "^4.17.21",
	"mini-css-extract-plugin": "^2.4.2",
	"node-libs-browser": "^2.2.1",
	"npm-packlist": "^5.0.0",
	ora: "^5.3.0",
	postcss: "^8.2.13",
	"react-dev-utils": "^12.0.0-next.60",
	"react-refresh": "^0.14.0",
	"recursive-readdir": "^2.2.2",
	semver: "^7.5.4",
	"style-loader": "^3.3.1",
	"swc-loader": "^0.2.3",
	"typescript-json-schema": "^0.64.0",
	webpack: "^5.89.0",
	"webpack-dev-server": "^4.15.1",
	yaml: "^2.5.1",
	"yml-loader": "^2.1.0",
	yn: "^4.0.0"
};
var devDependencies = {
	"@backstage/cli": "0.29.5",
	"@backstage/core-plugin-api": "1.10.3",
	"@types/fs-extra": "9.0.13",
	"@types/mock-fs": "4.13.4",
	"@types/node": "18.19.34",
	"@types/npm-packlist": "3.0.0",
	"@types/recursive-readdir": "2.2.4",
	"@types/yarnpkg__lockfile": "1.1.9",
	"mock-fs": "5.2.0",
	nodemon: "3.1.3",
	prettier: "3.3.3",
	"ts-node": "10.9.2",
	"type-fest": "4.20.1"
};
var peerDependencies = {
	"@microsoft/api-extractor": "^7.21.2"
};
var peerDependenciesMeta = {
	"@microsoft/api-extractor": {
		optional: true
	}
};
var files = [
	"asset-types",
	"templates",
	"config",
	"bin",
	"dist/**/*.js"
];
var nodemonConfig = {
	watch: "./src",
	exec: "bin/janus-cli",
	ext: "ts"
};
var configSchema = {
	$schema: "https://backstage.io/schema/config-v1",
	title: "@janus-idp/cli",
	type: "object",
	properties: {
		app: {
			type: "object",
			properties: {
				baseUrl: {
					type: "string",
					visibility: "frontend"
				},
				title: {
					type: "string",
					visibility: "frontend"
				},
				datadogRum: {
					type: "object",
					description: "Datadog RUM events configuration",
					properties: {
						env: {
							type: "string",
							visibility: "frontend",
							description: "Environment for Datadog RUM events"
						},
						clientToken: {
							type: "string",
							visibility: "frontend",
							description: "clientToken for Datadog RUM events"
						},
						applicationId: {
							type: "string",
							visibility: "frontend",
							description: "applicationId for Datadog RUM events"
						},
						site: {
							type: "string",
							visibility: "frontend",
							description: "site for Datadog RUM events"
						}
					},
					required: [
						"clientToken",
						"applicationId"
					]
				},
				listen: {
					type: "object",
					description: "Listening configuration for local development",
					properties: {
						host: {
							type: "string",
							visibility: "frontend",
							description: "The host that the frontend should be bound to. Only used for local development."
						},
						port: {
							type: "number",
							visibility: "frontend",
							description: "The port that the frontend should be bound to. Only used for local development."
						}
					}
				},
				https: {
					type: "object",
					description: "Only used for local development. The https object is passed to webpack in order to enable using https on localhost.",
					properties: {
						certificate: {
							type: "object",
							description: "Parent object containing certificate and the private key",
							required: [
								"key",
								"cert"
							],
							properties: {
								key: {
									type: "string",
									visibility: "secret",
									description: "Https Certificate private key. Use $file to load in a file"
								},
								cert: {
									type: "string",
									visibility: "secret",
									description: "Https Certificate. Use $file to load in a file"
								}
							}
						}
					}
				}
			}
		}
	}
};
var Manifest = {
	name: name,
	description: description,
	version: version,
	publishConfig: publishConfig,
	backstage: backstage,
	homepage: homepage,
	repository: repository,
	keywords: keywords,
	license: license,
	main: main,
	scripts: scripts,
	bin: bin,
	dependencies: dependencies,
	devDependencies: devDependencies,
	peerDependencies: peerDependencies,
	peerDependenciesMeta: peerDependenciesMeta,
	files: files,
	nodemonConfig: nodemonConfig,
	configSchema: configSchema
};

exports.backstage = backstage;
exports.bin = bin;
exports.configSchema = configSchema;
exports.default = Manifest;
exports.dependencies = dependencies;
exports.description = description;
exports.devDependencies = devDependencies;
exports.files = files;
exports.homepage = homepage;
exports.keywords = keywords;
exports.license = license;
exports.main = main;
exports.name = name;
exports.nodemonConfig = nodemonConfig;
exports.peerDependencies = peerDependencies;
exports.peerDependenciesMeta = peerDependenciesMeta;
exports.publishConfig = publishConfig;
exports.repository = repository;
exports.scripts = scripts;
exports.version = version;
//# sourceMappingURL=package.json.cjs.js.map
