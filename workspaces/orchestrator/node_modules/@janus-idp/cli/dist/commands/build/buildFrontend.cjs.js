'use strict';

var fs = require('fs-extra');
var path = require('path');
var bundle = require('../../lib/bundler/bundle.cjs.js');
require('react-dev-utils/openBrowser');
require('@backstage/cli-node');
require('chalk');
require('lodash/uniq');
require('webpack');
require('webpack-dev-server');
require('../../lib/paths.cjs.js');
var config = require('../../lib/config.cjs.js');
require('@yarnpkg/lockfile');
require('@yarnpkg/parsers');
require('semver');
require('../../lib/bundler/config.cjs.js');
require('chokidar');
var parallel = require('../../lib/parallel.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

async function buildFrontend(options) {
  const { targetDir, writeStats, configPaths, pluginMetadata } = options;
  const { name } = await fs__default.default.readJson(path.resolve(targetDir, "package.json"));
  await bundle.buildBundle({
    targetDir,
    entry: "src/index",
    parallelism: parallel.getEnvironmentParallelism(),
    statsJsonEnabled: writeStats,
    pluginMetadata,
    ...await config.loadCliConfig({
      args: configPaths,
      fromPackage: name
    })
  });
}

exports.buildFrontend = buildFrontend;
//# sourceMappingURL=buildFrontend.cjs.js.map
