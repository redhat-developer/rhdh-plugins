'use strict';

var errors = require('@backstage/errors');
var commander = require('commander');
var errors$1 = require('../lib/errors.cjs.js');

const configOption = [
  "--config <path>",
  "Config files to load instead of app-config.yaml",
  (opt, opts) => opts ? [...opts, opt] : [opt],
  Array()
];
function registerScriptCommand(program) {
  const command = program.command("package [command]").description("Lifecycle scripts for individual packages");
  command.command("start").description("Start a package for local development").option(...configOption).option("--role <name>", "Run the command with an explicit package role").option("--check", "Enable type checking and linting if available").option("--inspect", "Enable debugger in Node.js environments").option(
    "--inspect-brk",
    "Enable debugger in Node.js environments, breaking before code starts"
  ).action(lazy(() => Promise.resolve().then(function () { return require('./start/index.cjs.js'); }).then((m) => m.command)));
  command.command("build").description("Build a package for production deployment or publishing").option("--role <name>", "Run the command with an explicit package role").option(
    "--minify",
    "Minify the generated code. Does not apply to app or backend packages."
  ).option(
    "--experimental-type-build",
    "Enable experimental type build. Does not apply to app or backend packages. [DEPRECATED]"
  ).option(
    "--skip-build-dependencies",
    "Skip the automatic building of local dependencies. Applies to backend packages only."
  ).option(
    "--stats",
    "If bundle stats are available, write them to the output directory. Applies to app packages only."
  ).option(
    "--config <path>",
    "Config files to load instead of app-config.yaml. Applies to app packages only.",
    (opt, opts) => opts ? [...opts, opt] : [opt],
    Array()
  ).action(lazy(() => Promise.resolve().then(function () { return require('./build/index.cjs.js'); }).then((m) => m.command)));
  command.command("export-dynamic-plugin").description(
    "Build and export a plugin package to be loaded as a dynamic plugin. The repackaged dynamic plugin is exported inside a ./dist-dynamic sub-folder."
  ).option("--minify", "Minify the generated code (backend plugin only).").option(
    "--embed-package [package-name...]",
    "Optional list of packages that should be embedded inside the generated code of a backend dynamic plugin, removed from the plugin dependencies, while their direct dependencies will be hoisted to the dynamic plugin dependencies (backend plugin only)."
  ).option(
    "--shared-package [package-name...]",
    "Optional list of packages that should be considered shared by all dynamic plugins, and will be moved to peer dependencies of the dynamic plugin. The `@backstage` packages are by default considered shared dependencies."
  ).option(
    "--override-interop <mode:package-name,package-name...>",
    "Optional list of packages for which the CommonJS Rollup output interop mode should be overridden to `mode` when building the dynamic plugin assets (backend plugin only).",
    (value, previous) => {
      const [key, val] = value.split(":");
      if (!["auto", "esModule", "default", "defaultOnly"].includes(key)) {
        throw new commander.InvalidArgumentError(
          `Invalid interop mode '${key}'. Possible values are: auto, esModule, default, defaultOnly (see https://rollupjs.org/configuration-options/#output-interop).`
        );
      }
      return { ...previous, [key]: val?.split(",") || [] };
    },
    {}
  ).option(
    "--allow-native-package [package-name...]",
    "Optional list of native packages names that can be included in the exported plugin"
  ).option(
    "--suppress-native-package [package-name...]",
    "Optional list of native package names to be excluded from the exported plugin"
  ).option(
    "--ignore-version-check [packageName...]",
    "Optional list of package names to ignore when doing semver dependency checks"
  ).option(
    "--no-install",
    "Do not run `yarn install` to fill the dynamic plugin `node_modules` folder (backend plugin only)."
  ).option(
    "--no-build",
    "Do not run `yarn build` on the main and embedded packages before exporting (backend plugin only)."
  ).option(
    "--clean",
    "Remove the dynamic plugin output before exporting again."
  ).option(
    "--dev",
    "Allow testing/debugging a dynamic plugin locally. This creates a link from the dynamic plugin content to the plugin package `src` folder, to enable the use of source maps (backend plugin only). This also installs the dynamic plugin content (symlink) into the dynamic plugins root folder configured in the app config (or copies the plugin content to the location explicitely provided by the `--dynamic-plugins-root` argument)."
  ).option(
    "--dynamic-plugins-root <dynamic-plugins-root>",
    "Provides the dynamic plugins root folder when the dynamic plugins content should be copied when using the `--dev` argument."
  ).option(
    "--in-place",
    "Adds the frontend dynamic plugin assets to the `dist-scalprum` folder of the original plugin package, instead of producing the assets in a distinct package located in the `dist-dynamic` sub-folder, as for backend plugins.",
    false
  ).option("--no-in-place", undefined, true).option(
    "--scalprum-config <file>",
    "Allows retrieving scalprum configuration from an external JSON file, instead of using a `scalprum` field of the `package.json`. Frontend plugins only."
  ).option(
    "--track-dynamic-manifest-and-lock-file",
    "Adds the `package.json` and `yarn.lock` files, generated in the `dist-dynamic` folder of backend plugins, to source control. By default the whole `dist-dynamic` folder id git-ignored.",
    false
  ).action(lazy(() => Promise.resolve().then(function () { return require('./export-dynamic-plugin/index.cjs.js'); }).then((m) => m.command)));
  command.command("package-dynamic-plugins").description(
    "Package up exported dynamic plugins as container image for deployment"
  ).option(
    "--force-export",
    "Regenerate the dist-dynamic folder for each plugin even if it already exists"
  ).option(
    "--preserve-temp-dir",
    "Leave the temporary staging directory on the filesystem instead of deleting it"
  ).option(
    "--export-to <directory>",
    "Export the plugins to the specified directory, skips building the container image"
  ).option(
    "-t, --tag <tag>",
    'Tag name to use when building the plugin registry image.  Required if "--export-to" is not specified'
  ).option(
    "--use-docker",
    "Use Docker as the container tool (deprecated, use --container-tool instead)"
  ).option(
    "--container-tool <tool>",
    'Container tool to use for building the image. Allowed values: "docker", "podman", "buildah". Default is "podman".',
    "podman"
  ).option(
    "--platform <platform>",
    'Platform to use when building the container image. Default is "linux/amd64". Can be set to "" to not set --platform flag in builder command.',
    "linux/amd64"
  ).action(
    lazy(() => Promise.resolve().then(function () { return require('./package-dynamic-plugins/index.cjs.js'); }).then((m) => m.command))
  );
  command.command("schema").description("Print configuration schema for a package").action(lazy(() => Promise.resolve().then(function () { return require('./schema/index.cjs.js'); }).then((m) => m.default)));
  command.command("metadata").description("Add metadata to a package.json file").option(
    "--dir <path/to/folder>",
    "Folder in which to make changes to package.json, if not the current directory",
    "./"
  ).option("--author <author>", "Set author", "Red Hat").option("--license <license>", "Set license", "Apache-2.0").option("--homepage <homepage>", "Set homepage", "https://red.ht/rhdh").option(
    "--bugs <bugs>",
    "Set issue tracker URL",
    "https://github.com/janus-idp/backstage-plugins/issues"
  ).option(
    "--keywords <unique,keywords,to,add>",
    "Add or replace keywords; there can be only one `support:` or `lifecycle:` value,\n                                     but unlimited other keywords can be added. To remove values, manually edit package.json\n\n                                     Valid values for support: alpha, beta, tech-preview, or production.\n                                     Valid values for lifecycle: active, maintenance, deprecated, inactive, retired.\n                                    ",
    "backstage,plugin,support:production,lifecycle:active"
  ).action(lazy(() => Promise.resolve().then(function () { return require('./metadata/index.cjs.js'); }).then((m) => m.command)));
}
function registerCommands(program) {
  registerScriptCommand(program);
}
function lazy(getActionFunc) {
  return async (...args) => {
    try {
      const actionFunc = await getActionFunc();
      await actionFunc(...args);
      process.exit(0);
    } catch (error) {
      errors.assertError(error);
      errors$1.exitWithError(error);
    }
  };
}

exports.registerCommands = registerCommands;
exports.registerScriptCommand = registerScriptCommand;
//# sourceMappingURL=index.cjs.js.map
