{"version":3,"file":"DefaultAuditLogger.cjs.js","sources":["../src/DefaultAuditLogger.ts"],"sourcesContent":["import type {\n  AuthService,\n  HttpAuthService,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\nimport type { ErrorLike } from '@backstage/errors';\nimport type { JsonObject, JsonValue } from '@backstage/types';\n\nimport type { Request } from 'express';\nimport { cloneDeep } from 'lodash';\n\nimport {\n  ActorDetails,\n  AuditLogDetails,\n  AuditLogDetailsOptions,\n  AuditLogger,\n  AuditLoggerOptions,\n  AuditLogOptions,\n} from './types';\n\nexport class DefaultAuditLogger implements AuditLogger {\n  private readonly logger: LoggerService;\n  private readonly authService: AuthService;\n  private readonly httpAuthService: HttpAuthService;\n\n  constructor(options: AuditLoggerOptions) {\n    this.logger = options.logger;\n    this.authService = options.authService;\n    this.httpAuthService = options.httpAuthService;\n  }\n\n  async getActorId(request?: Request): Promise<string | undefined> {\n    if (!(request && this.httpAuthService && this.authService)) {\n      return undefined;\n    }\n    try {\n      const credentials = await this.httpAuthService.credentials(request);\n      const userEntityRef = this.authService.isPrincipal(credentials, 'user')\n        ? credentials.principal.userEntityRef\n        : undefined;\n\n      const serviceEntityRef = this.authService.isPrincipal(\n        credentials,\n        'service',\n      )\n        ? credentials.principal.subject\n        : undefined;\n\n      return userEntityRef ?? serviceEntityRef;\n    } catch {\n      return undefined;\n    }\n  }\n  async createAuditLogDetails<T extends JsonValue>(\n    options: AuditLogDetailsOptions<T>,\n  ): Promise<AuditLogDetails> {\n    const { eventName, stage, metadata, request, response, status } = options;\n\n    const actorId = options.actorId || (await this.getActorId(request)) || null;\n\n    // Secrets in the body field should be redacted by the user before passing in the request object\n    const auditRequest = request\n      ? {\n          method: request.method,\n          url: request.originalUrl,\n          params: cloneDeep(request.params),\n          query: cloneDeep(request.query),\n          body: cloneDeep(request.body),\n        }\n      : undefined;\n\n    const actor: ActorDetails = { actorId };\n    if (request) {\n      actor.ip = request.ip;\n      actor.hostname = request.hostname;\n      actor.userAgent = request.get('user-agent');\n    }\n\n    const auditLogCommonDetails = {\n      actor: cloneDeep(actor),\n      meta: cloneDeep(metadata) || {},\n      request: auditRequest,\n      isAuditLog: true as const,\n      response: cloneDeep(response),\n      eventName,\n      stage,\n    };\n\n    if (status === 'failed') {\n      const errs = cloneDeep(options.errors) as ErrorLike[];\n      return {\n        ...auditLogCommonDetails,\n        status,\n        errors: errs.map(err => {\n          return {\n            name: err.name,\n            message: err.message,\n            stack: err.stack,\n          };\n        }),\n      };\n    }\n\n    return {\n      ...auditLogCommonDetails,\n      status,\n    };\n  }\n  async auditLog<T extends JsonValue>(\n    options: AuditLogOptions<T>,\n  ): Promise<void> {\n    let auditLogDetails: AuditLogDetails;\n    const logLevel = options.level || 'info';\n    const auditLogCommonDetails = {\n      eventName: options.eventName,\n      stage: options.stage,\n      actorId: options.actorId,\n      request: options.request,\n      response: options.response,\n      metadata: options.metadata,\n    };\n    if (options.status === 'failed') {\n      auditLogDetails = await this.createAuditLogDetails({\n        ...auditLogCommonDetails,\n        status: options.status,\n        errors: options.errors,\n      });\n    } else {\n      auditLogDetails = await this.createAuditLogDetails({\n        ...auditLogCommonDetails,\n        status: options.status,\n      });\n    }\n\n    switch (logLevel) {\n      case 'info':\n        this.logger.info(options.message, auditLogDetails as JsonObject);\n        return;\n      case 'debug':\n        this.logger.debug(options.message, auditLogDetails as JsonObject);\n        return;\n      case 'warn':\n        this.logger.warn(options.message, auditLogDetails as JsonObject);\n        return;\n      case 'error':\n        this.logger.error(options.message, auditLogDetails as JsonObject);\n        return;\n      default:\n        throw new Error(`Log level of ${logLevel} is not supported`);\n    }\n  }\n}\n"],"names":["cloneDeep"],"mappings":"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"}