{"version":3,"file":"pipeline.cjs.js","sources":["../../../src/utils/pipeline/pipeline.ts"],"sourcesContent":["import {\n  cancelledColor,\n  failureColor,\n  pendingColor,\n  runningColor,\n  skippedColor,\n  successColor,\n} from '../../consts';\nimport {\n  ComputedStatus,\n  PipelineRunKind,\n  PipelineTaskWithStatus,\n  StatusMessage,\n  SucceedConditionReason,\n  TaskRunKind,\n  TaskStatusTypes,\n} from '../../types';\nimport { getTaskRunsForPipelineRun } from './task-run';\n\nexport const getRunStatusColor = (status: string): StatusMessage => {\n  switch (status) {\n    case ComputedStatus.Succeeded:\n      return { message: 'Succeeded', color: successColor };\n    case ComputedStatus.Failed:\n      return { message: 'Failed', color: failureColor };\n    case ComputedStatus.FailedToStart:\n      return {\n        message: 'PipelineRun failed to start',\n        color: failureColor,\n      };\n    case ComputedStatus.Running:\n    case ComputedStatus['In Progress']:\n      return { message: 'Running', color: runningColor };\n\n    case ComputedStatus.Skipped:\n      return { message: 'Skipped', color: skippedColor };\n    case ComputedStatus.Cancelled:\n      return { message: 'Cancelled', color: cancelledColor };\n    case ComputedStatus.Cancelling:\n      return { message: 'Cancelling', color: cancelledColor };\n    case ComputedStatus.Idle:\n    case ComputedStatus.Pending:\n      return { message: 'Pending', color: pendingColor };\n    default:\n      return {\n        message: 'PipelineRun not started yet',\n        color: pendingColor,\n      };\n  }\n};\n\nconst getDate = (\n  run: PipelineRunKind,\n  field: 'completionTime' | 'startTime' | 'creationTimestamp',\n) => {\n  if (field === 'creationTimestamp') {\n    return run?.metadata?.creationTimestamp ?? '';\n  }\n  if (field === 'startTime' || field === 'completionTime') {\n    return run?.status?.[field] ?? '';\n  }\n  return '';\n};\n\nconst getLatestRun = (\n  runs: PipelineRunKind[],\n  field: 'completionTime' | 'startTime' | 'creationTimestamp',\n) => {\n  let latestRun = runs[0];\n  for (let i = 1; i < runs.length; i++) {\n    latestRun =\n      new Date(getDate(runs?.[i], field)) > new Date(getDate(latestRun, field))\n        ? runs[i]\n        : latestRun;\n  }\n  return latestRun;\n};\n\nexport const getLatestPipelineRun = (\n  runs: PipelineRunKind[],\n  field: string,\n): PipelineRunKind | null => {\n  if (runs?.length > 0 && field) {\n    let latestRun;\n    if (\n      field === 'completionTime' ||\n      field === 'startTime' ||\n      field === 'creationTimestamp'\n    ) {\n      latestRun = getLatestRun(runs, field);\n    } else {\n      latestRun = runs[runs.length - 1];\n    }\n    return latestRun;\n  }\n  return null;\n};\n\nconst getSucceededStatus = (status: string): ComputedStatus => {\n  if (status === 'True') {\n    return ComputedStatus.Succeeded;\n  } else if (status === 'False') {\n    return ComputedStatus.Failed;\n  }\n  return ComputedStatus.Running;\n};\n\nexport const pipelineRunStatus = (\n  pipelineRun: PipelineRunKind | TaskRunKind | PipelineTaskWithStatus | null,\n) => {\n  const conditions = pipelineRun?.status?.conditions || [];\n  if (conditions.length === 0) return null;\n\n  const succeedCondition = conditions.find((c: any) => c.type === 'Succeeded');\n  const cancelledCondition = conditions.find(\n    (c: any) => c.reason === 'Cancelled',\n  );\n  const failedCondition = conditions.find((c: any) => c.reason === 'Failed');\n\n  if (\n    [\n      SucceedConditionReason.PipelineRunStopped,\n      SucceedConditionReason.PipelineRunCancelled,\n    ].includes(\n      (pipelineRun as PipelineRunKind)?.spec?.status as SucceedConditionReason,\n    ) &&\n    !cancelledCondition &&\n    !failedCondition\n  ) {\n    return ComputedStatus.Cancelling;\n  }\n\n  if (!succeedCondition?.status) {\n    return null;\n  }\n\n  const status = getSucceededStatus(succeedCondition.status);\n\n  if (succeedCondition.reason && succeedCondition.reason !== status) {\n    switch (succeedCondition.reason) {\n      case SucceedConditionReason.PipelineRunCancelled:\n      case SucceedConditionReason.TaskRunCancelled:\n      case SucceedConditionReason.Cancelled:\n      case SucceedConditionReason.PipelineRunStopped:\n        return ComputedStatus.Cancelled;\n      case SucceedConditionReason.PipelineRunStopping:\n      case SucceedConditionReason.TaskRunStopping:\n        return ComputedStatus.Failed;\n      case SucceedConditionReason.CreateContainerConfigError:\n      case SucceedConditionReason.ExceededNodeResources:\n      case SucceedConditionReason.ExceededResourceQuota:\n      case SucceedConditionReason.PipelineRunPending:\n        return ComputedStatus.Pending;\n      case SucceedConditionReason.ConditionCheckFailed:\n        return ComputedStatus.Skipped;\n      default:\n        return status;\n    }\n  }\n  return status;\n};\n\nexport const pipelineRunFilterReducer = (\n  pipelineRun: PipelineRunKind | TaskRunKind,\n): ComputedStatus => {\n  const status = pipelineRunStatus(pipelineRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const updateTaskStatus = (\n  pipelinerun: PipelineRunKind | null,\n  taskRuns: TaskRunKind[],\n): TaskStatusTypes => {\n  const skippedTaskLength = pipelinerun?.status?.skippedTasks?.length || 0;\n  const PLRTaskRuns = getTaskRunsForPipelineRun(pipelinerun, taskRuns);\n  const taskStatus: TaskStatusTypes = {\n    PipelineNotStarted: 0,\n    Pending: 0,\n    Running: 0,\n    Succeeded: 0,\n    Failed: 0,\n    Cancelled: 0,\n    Skipped: skippedTaskLength,\n  };\n\n  if (!PLRTaskRuns || PLRTaskRuns.length === 0) {\n    return taskStatus;\n  }\n\n  PLRTaskRuns.forEach((taskRun: TaskRunKind) => {\n    const status = taskRun && pipelineRunFilterReducer(taskRun);\n    if (status === 'Succeeded') {\n      taskStatus[ComputedStatus.Succeeded]++;\n    } else if (status === 'Running') {\n      taskStatus[ComputedStatus.Running]++;\n    } else if (status === 'Failed') {\n      taskStatus[ComputedStatus.Failed]++;\n    } else if (status === 'Cancelled') {\n      taskStatus[ComputedStatus.Cancelled]++;\n    } else {\n      taskStatus[ComputedStatus.Pending]++;\n    }\n  });\n\n  return {\n    ...taskStatus,\n  };\n};\n\nexport const totalPipelineRunTasks = (\n  pipelinerun: PipelineRunKind | null,\n): number => {\n  if (!pipelinerun?.status?.pipelineSpec) {\n    return 0;\n  }\n  const totalTasks = (pipelinerun.status.pipelineSpec?.tasks || []).length;\n  const finallyTasks =\n    (pipelinerun.status.pipelineSpec?.finally || []).length ?? 0;\n  return totalTasks + finallyTasks;\n};\n\nexport const getTaskStatus = (\n  pipelinerun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n) => {\n  const totalTasks = totalPipelineRunTasks(pipelinerun);\n  const plrTaskLength = taskRuns.length;\n  const skippedTaskLength = pipelinerun?.status?.skippedTasks?.length || 0;\n\n  const taskStatus: TaskStatusTypes = updateTaskStatus(pipelinerun, taskRuns);\n\n  if (taskRuns?.length > 0) {\n    const pipelineRunHasFailure = taskStatus[ComputedStatus.Failed] > 0;\n    const pipelineRunIsCancelled =\n      pipelineRunFilterReducer(pipelinerun) === ComputedStatus.Cancelled;\n    const unhandledTasks =\n      totalTasks >= plrTaskLength\n        ? totalTasks - plrTaskLength - skippedTaskLength\n        : totalTasks;\n\n    if (pipelineRunHasFailure || pipelineRunIsCancelled) {\n      taskStatus[ComputedStatus.Cancelled] += unhandledTasks;\n    } else {\n      taskStatus[ComputedStatus.Pending] += unhandledTasks;\n    }\n  } else if (\n    pipelinerun?.status?.conditions?.[0]?.status === 'False' ||\n    pipelinerun?.spec.status === SucceedConditionReason.PipelineRunCancelled\n  ) {\n    taskStatus[ComputedStatus.Cancelled] = totalTasks;\n  } else if (\n    pipelinerun?.spec.status === SucceedConditionReason.PipelineRunPending\n  ) {\n    taskStatus[ComputedStatus.Pending] += totalTasks;\n  } else {\n    taskStatus[ComputedStatus.PipelineNotStarted]++;\n  }\n  return taskStatus;\n};\n"],"names":["ComputedStatus","successColor","failureColor","runningColor","skippedColor","cancelledColor","pendingColor","SucceedConditionReason","getTaskRunsForPipelineRun"],"mappings":"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"}