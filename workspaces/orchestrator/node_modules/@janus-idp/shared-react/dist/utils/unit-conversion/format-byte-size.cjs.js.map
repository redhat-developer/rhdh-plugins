{"version":3,"file":"format-byte-size.cjs.js","sources":["../../../src/utils/unit-conversion/format-byte-size.ts"],"sourcesContent":["import { create, createUnitDependencies, unitDependencies } from 'mathjs';\n\nconst math = create({ createUnitDependencies, unitDependencies });\n\n// https://mathjs.org/docs/datatypes/units.html#prefixes\nconst UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] as const;\n\n/**\n * Returns a given size in bytes formated to the closest to power of 1024\n *\n * @param sizeInBytes - The given size in bytes\n * @return Formated bytes in powers of 1024\n */\nexport function formatByteSize(sizeInBytes: number | undefined): string {\n  if (!sizeInBytes) {\n    return 'N/A';\n  }\n\n  // Math.log10(1_000) === 3\n  const i = Math.floor(Math.log10(sizeInBytes) / 3);\n\n  // Base 10 prefixes are more common when purchasing storage.\n  // math.unit bytes default to base 2 prefixes (e.g. 1 KiB = 1024 B).\n  // Therefore we need to change to base 10 prefixes (e.g. 1 kB = 1000 B).\n  const fileSize = math\n    .unit(sizeInBytes, 'B')\n    .to(UNITS[i])\n    .format({ precision: 3, notation: 'auto' });\n\n  return fileSize;\n}\n"],"names":["create","createUnitDependencies","unitDependencies"],"mappings":";;;;AAEA,MAAM,IAAO,GAAAA,aAAA,CAAO,0BAAEC,6BAAA,oBAAwBC,yBAAkB,CAAA,CAAA;AAGhE,MAAM,KAAA,GAAQ,CAAC,GAAA,EAAK,IAAM,EAAA,IAAA,EAAM,MAAM,IAAM,EAAA,IAAA,EAAM,IAAM,EAAA,IAAA,EAAM,IAAI,CAAA,CAAA;AAQ3D,SAAS,eAAe,WAAyC,EAAA;AACtE,EAAA,IAAI,CAAC,WAAa,EAAA;AAChB,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAGA,EAAA,MAAM,IAAI,IAAK,CAAA,KAAA,CAAM,KAAK,KAAM,CAAA,WAAW,IAAI,CAAC,CAAA,CAAA;AAKhD,EAAA,MAAM,WAAW,IACd,CAAA,IAAA,CAAK,WAAa,EAAA,GAAG,EACrB,EAAG,CAAA,KAAA,CAAM,CAAC,CAAC,EACX,MAAO,CAAA,EAAE,WAAW,CAAG,EAAA,QAAA,EAAU,QAAQ,CAAA,CAAA;AAE5C,EAAO,OAAA,QAAA,CAAA;AACT;;;;"}