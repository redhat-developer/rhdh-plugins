{"version":3,"file":"CamelCaseWrap.cjs.js","sources":["../../../src/components/common/CamelCaseWrap.tsx"],"sourcesContent":["import React from 'react';\n\nconst MEMO: { [key: string]: any } = {};\n\ntype CamelCaseWrapProps = {\n  value: string;\n  dataTest?: string;\n};\n\nexport const CamelCaseWrap = ({ value, dataTest }: CamelCaseWrapProps) => {\n  if (!value) {\n    return '-';\n  }\n\n  if (MEMO[value]) {\n    return MEMO[value];\n  }\n\n  // Add word break points before capital letters (but keep consecutive capital letters together).\n  const words = value.match(/[A-Z]+[^A-Z]*|[^A-Z]+/g);\n  const rendered = (\n    <span data-testid={dataTest}>\n      {words?.map((word, i) => (\n        <React.Fragment key={word}>\n          {word}\n          {i !== words.length - 1 && <wbr />}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n  MEMO[value] = rendered;\n  return rendered;\n};\n\nexport default CamelCaseWrap;\n"],"names":["React"],"mappings":";;;;;;;;;;AAEA,MAAM,OAA+B,EAAC,CAAA;AAO/B,MAAM,aAAgB,GAAA,CAAC,EAAE,KAAA,EAAO,UAAmC,KAAA;AACxE,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAEA,EAAI,IAAA,IAAA,CAAK,KAAK,CAAG,EAAA;AACf,IAAA,OAAO,KAAK,KAAK,CAAA,CAAA;AAAA,GACnB;AAGA,EAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,KAAA,CAAM,wBAAwB,CAAA,CAAA;AAClD,EAAM,MAAA,QAAA,mBACHA,sBAAA,CAAA,aAAA,CAAA,MAAA,EAAA,EAAK,aAAa,EAAA,QAAA,EAAA,EAChB,OAAO,GAAI,CAAA,CAAC,IAAM,EAAA,CAAA,qBAChBA,sBAAA,CAAA,aAAA,CAAAA,sBAAA,CAAM,UAAN,EAAe,GAAA,EAAK,IAClB,EAAA,EAAA,IAAA,EACA,CAAM,KAAA,KAAA,CAAM,MAAS,GAAA,CAAA,oBAAMA,sBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAI,CAClC,CACD,CACH,CAAA,CAAA;AAEF,EAAA,IAAA,CAAK,KAAK,CAAI,GAAA,QAAA,CAAA;AACd,EAAO,OAAA,QAAA,CAAA;AACT;;;;;"}