import { jsx } from 'react/jsx-runtime';
import { UnifiedThemeProvider } from '@backstage/theme';
import { StyledEngineProvider, ThemeProvider as ThemeProvider$1 } from '@mui/material/styles';
import { useTheme } from '../hooks/useTheme.esm.js';
import { useThemeConfig } from '../hooks/useThemeConfig.esm.js';

const ThemeProvider = ({
  theme,
  children
}) => /* @__PURE__ */ jsx(UnifiedThemeProvider, { theme, children: /* @__PURE__ */ jsx(StyledEngineProvider, { injectFirst: true, children: /* @__PURE__ */ jsx(ThemeProvider$1, { theme: theme.getTheme("v5"), children }) }) });
const createThemeProvider = (theme) => function RHDHThemeProvider({ children }) {
  return /* @__PURE__ */ jsx(ThemeProvider, { theme, children });
};
const createThemeProviderForThemeConfig = (themeConfig) => function RHDHThemeProviderForThemeConfig({ children }) {
  const theme = useTheme(themeConfig);
  return /* @__PURE__ */ jsx(ThemeProvider, { theme, children });
};
const createThemeProviderForThemeName = (themeName) => function RHDHThemeProviderForThemeName({ children }) {
  const themeConfig = useThemeConfig(themeName);
  const theme = useTheme(themeConfig);
  return /* @__PURE__ */ jsx(ThemeProvider, { theme, children });
};

export { createThemeProvider, createThemeProviderForThemeConfig, createThemeProviderForThemeName };
//# sourceMappingURL=ThemeProvider.esm.js.map
