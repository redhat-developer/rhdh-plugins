function isObject(objectOrValue) {
  return typeof objectOrValue === "object" && !Array.isArray(objectOrValue);
}
const migrateThemeConfig = (themeConfig) => {
  if (!themeConfig) {
    return { palette: {} };
  }
  const migrated = {
    palette: themeConfig.palette ?? {},
    defaultPageTheme: themeConfig.defaultPageTheme,
    pageTheme: themeConfig.pageTheme,
    fontFamily: themeConfig.fontFamily,
    htmlFontSize: themeConfig.htmlFontSize,
    typography: themeConfig.typography,
    options: themeConfig.options
  };
  if (themeConfig.primaryColor) {
    console.warn(
      "[deprecated] Automatically migrate theme configuration from `primaryColor` to `palette.primary.main`"
    );
    if (isObject(migrated.palette?.primary)) {
      if (!migrated.palette.primary.main) {
        migrated.palette.primary.main = themeConfig.primaryColor;
      }
    } else if (migrated.palette) {
      migrated.palette.primary = { main: themeConfig.primaryColor };
    }
  }
  if (themeConfig.navigationIndicatorColor) {
    console.warn(
      "[deprecated] Automatically migrate theme configuration from `navigationIndicatorColor` to `palette.navigation.indicator`"
    );
    if (isObject(migrated.palette?.navigation)) {
      if (!migrated.palette.navigation.indicator) {
        migrated.palette.navigation.indicator = themeConfig.navigationIndicatorColor;
      }
    } else if (migrated.palette) {
      migrated.palette.navigation = {
        indicator: themeConfig.navigationIndicatorColor
      };
    }
  }
  if (themeConfig.headerColor1) {
    if (themeConfig.pageTheme) {
      console.warn(
        "[deprecated] Ignore theme configuration `headerColor1` and `headerColor2` because `pageTheme` is defined!"
      );
    } else {
      console.warn(
        "[deprecated] Automatically migrate theme configuration from `headerColor1` and `headerColor2` to `pageTheme.home.backgroundColor`"
      );
      migrated.defaultPageTheme = "home";
      migrated.pageTheme = {
        home: {
          backgroundColor: !themeConfig.headerColor2 ? themeConfig.headerColor1 : [themeConfig.headerColor1, themeConfig.headerColor2]
        }
      };
    }
  }
  return migrated;
};

export { migrateThemeConfig };
//# sourceMappingURL=migrateTheme.esm.js.map
