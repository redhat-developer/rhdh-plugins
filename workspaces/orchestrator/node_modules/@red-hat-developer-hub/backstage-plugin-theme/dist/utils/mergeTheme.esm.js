function isObject(objectOrValue) {
  return objectOrValue !== undefined && objectOrValue !== null && typeof objectOrValue === "object" && !Array.isArray(objectOrValue);
}
const deepCopyObject = (objectOrValue) => {
  if (isObject(objectOrValue)) {
    const result = {};
    for (const key of Object.keys(objectOrValue)) {
      result[key] = deepCopyObject(objectOrValue[key]);
    }
    return result;
  }
  return objectOrValue;
};
const deepMergeObjects = (defaultValue, customValue) => {
  if (isObject(defaultValue) || isObject(customValue)) {
    const result = {};
    if (isObject(defaultValue) && isObject(customValue)) {
      for (const key of Object.keys(defaultValue)) {
        result[key] = deepMergeObjects(defaultValue[key], customValue[key]);
      }
      for (const key of Object.keys(customValue)) {
        result[key] = deepMergeObjects(defaultValue[key], customValue[key]);
      }
    } else if (customValue === null) {
      return null;
    } else if (isObject(customValue)) {
      for (const key of Object.keys(customValue)) {
        result[key] = deepCopyObject(customValue[key]);
      }
    } else if (isObject(defaultValue)) {
      for (const key of Object.keys(defaultValue)) {
        result[key] = deepCopyObject(defaultValue[key]);
      }
    }
    return result;
  }
  return customValue !== undefined ? customValue : defaultValue;
};
const mergeUnifiedThemeOptions = (defaultThemeConfig, customizedThemeConfig) => {
  return deepMergeObjects(
    defaultThemeConfig,
    customizedThemeConfig
  );
};

export { deepMergeObjects, mergeUnifiedThemeOptions };
//# sourceMappingURL=mergeTheme.esm.js.map
