import { useMemo } from 'react';
import { getDefaultThemeConfig } from '../backstage.esm.js';
import { getDefaultThemeConfig as getDefaultThemeConfig$1 } from '../rhdh.esm.js';
import { migrateThemeConfig } from '../utils/migrateTheme.esm.js';
import { mergeUnifiedThemeOptions } from '../utils/mergeTheme.esm.js';
import { createPageThemes } from '../utils/createPageThemes.esm.js';
import { createComponents } from '../utils/createComponents.esm.js';

const useThemeOptions = (themeConfig) => {
  const theme = useMemo(() => {
    const mode = themeConfig.mode ?? "light";
    const variant = themeConfig.variant ?? "rhdh";
    let defaultThemeConfig;
    if (variant === "backstage") {
      defaultThemeConfig = getDefaultThemeConfig(mode);
    } else {
      defaultThemeConfig = getDefaultThemeConfig$1(mode);
    }
    const migratedThemeConfig = migrateThemeConfig(themeConfig);
    const mergedThemeConfig = mergeUnifiedThemeOptions(
      defaultThemeConfig,
      migratedThemeConfig
    );
    const unifiedThemeOption = {
      palette: mergedThemeConfig.palette,
      defaultPageTheme: mergedThemeConfig.defaultPageTheme,
      fontFamily: mergedThemeConfig.fontFamily,
      htmlFontSize: mergedThemeConfig.htmlFontSize,
      typography: mergedThemeConfig.typography
    };
    unifiedThemeOption.pageTheme = createPageThemes(mergedThemeConfig);
    if (variant !== "backstage") {
      unifiedThemeOption.components = createComponents(mergedThemeConfig);
    }
    return unifiedThemeOption;
  }, [themeConfig]);
  return theme;
};

export { useThemeOptions };
//# sourceMappingURL=useThemeOptions.esm.js.map
