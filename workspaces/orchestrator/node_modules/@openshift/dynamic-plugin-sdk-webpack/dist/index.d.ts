/**
 * webpack tools for building dynamic plugin assets.
 *
 * @remarks
 * This package allows building dynamic plugins with webpack based on the concept
 * of {@link https://webpack.js.org/concepts/module-federation/ | module federation}.
 *
 * @packageDocumentation
 */

import { Compiler } from 'webpack';
import { WebpackPluginInstance } from 'webpack';

/**
 * The type `{}` doesn't mean "any empty object", it means "any non-nullish value".
 *
 * Use the `AnyObject` type for objects whose structure is unknown.
 *
 * @see https://github.com/typescript-eslint/typescript-eslint/issues/2063#issuecomment-675156492
 */
export declare type AnyObject = Record<string, unknown>;

export declare type CodeRef<TValue = unknown> = () => Promise<TValue>;

export declare class DynamicRemotePlugin implements WebpackPluginInstance {
    private readonly adaptedOptions;
    constructor(options: DynamicRemotePluginOptions);
    apply(compiler: Compiler): void;
}

export declare type DynamicRemotePluginOptions = {
    /**
     * Plugin build metadata.
     */
    pluginMetadata: PluginBuildMetadata;
    /**
     * List of extensions contributed by the plugin.
     */
    extensions: EncodedExtension[];
    /**
     * Modules shared between the host application and its plugins at runtime.
     *
     * It is the host application's responsibility to initialize and maintain its shared
     * scope object, and to communicate information about application provided modules to
     * its plugins.
     *
     * Default value: empty object.
     */
    sharedModules?: WebpackSharedObject;
    /**
     * Customize the webpack `ModuleFederationPlugin` options.
     */
    moduleFederationSettings?: PluginModuleFederationSettings;
    /**
     * Customize the call to global callback function in the plugin entry script.
     *
     * This option applies only if the module federation library type is `jsonp`.
     */
    entryCallbackSettings?: PluginEntryCallbackSettings;
    /**
     * Customize the filename of the generated plugin entry script.
     *
     * We recommend using the `[fullhash]` placeholder in production builds.
     *
     * Default value: `plugin-entry.js`.
     *
     * @see https://webpack.js.org/configuration/output/#outputfilename
     */
    entryScriptFilename?: string;
    /**
     * Customize the filename of the generated plugin manifest.
     *
     * Default value: `plugin-manifest.json`.
     */
    pluginManifestFilename?: string;
};

export declare type EncodedCodeRef = {
    $codeRef: string;
};

export declare type EncodedExtension<TExtension extends Extension = Extension> = ReplaceProperties<TExtension, {
    properties: ReplaceProperties<ExtractExtensionProperties<TExtension>, MapCodeRefsToEncodedCodeRefs<ExtractExtensionProperties<TExtension>>>;
}>;

export declare type Extension<TType extends string = string, TProperties extends AnyObject = AnyObject> = {
    type: TType;
    properties: TProperties;
    flags?: ExtensionFlags;
    [customProperty: string]: unknown;
};

export declare type ExtensionFlags = Partial<{
    required: string[];
    disallowed: string[];
}>;

export declare type ExtractExtensionProperties<T> = T extends Extension<any, infer TProperties> ? TProperties : never;

export declare type MapCodeRefsToEncodedCodeRefs<T> = {
    [K in keyof T]: T[K] extends CodeRef ? EncodedCodeRef : MapCodeRefsToEncodedCodeRefs<T[K]>;
};

export declare type PluginBuildMetadata = PluginRuntimeMetadata & {
    exposedModules?: {
        [moduleName: string]: string;
    };
};

/**
 * Settings for the global callback function used by plugin entry scripts.
 */
export declare type PluginEntryCallbackSettings = Partial<{
    /**
     * Name of the callback function.
     *
     * Default value: `__load_plugin_entry__`.
     */
    name: string;
    /**
     * Plugin identifier, passed as the first argument.
     *
     * Default value: plugin name, as specified in the plugin metadata.
     */
    pluginID: string;
}>;

/**
 * Settings for the webpack `ModuleFederationPlugin`.
 */
export declare type PluginModuleFederationSettings = Partial<{
    /**
     * Configure how the plugin entry module will be exposed at runtime.
     *
     * This value is passed to `ModuleFederationPlugin` as `library.type`.
     *
     * Note that `library.name` will be set to the name of the plugin.
     *
     * Default value: `jsonp`.
     *
     * @see https://webpack.js.org/configuration/output/#outputlibrarytype
     */
    libraryType: string;
    /**
     * The name of webpack share scope object used to share modules between the host
     * application and its plugins.
     *
     * This option applies only if the target host application is built with webpack
     * and uses dedicated webpack specific APIs such as `__webpack_init_sharing__`
     * and `__webpack_share_scopes__` to initialize and access this object.
     *
     * If the target host application is not built with webpack, plugins will not be
     * able to contribute new modules into the share scope object; however, plugins
     * will still be able to use any application provided shared modules.
     *
     * Default value: `default`.
     *
     * @see https://webpack.js.org/plugins/module-federation-plugin/#sharescope
     */
    sharedScope: string;
}>;

export declare type PluginRuntimeMetadata = {
    name: string;
    version: string;
    dependencies?: Record<string, string>;
    customProperties?: AnyObject;
};

/**
 * Replace existing direct properties of `T` with ones declared in `R`.
 */
export declare type ReplaceProperties<T, R> = {
    [K in keyof T]: K extends keyof R ? R[K] : T[K];
};

/**
 * webpack `SharedConfig` type.
 *
 * Advanced configuration for modules that should be shared in the share scope.
 *
 * @see https://webpack.js.org/plugins/module-federation-plugin/#sharing-hints
 */
export declare type WebpackSharedConfig = {
    eager?: boolean;
    import?: string | false;
    packageName?: string;
    requiredVersion?: string | false;
    shareKey?: string;
    shareScope?: string;
    singleton?: boolean;
    strictVersion?: boolean;
    version?: string | false;
};

/**
 * webpack `SharedObject` type.
 *
 * Modules that should be shared in the share scope.
 */
export declare type WebpackSharedObject = {
    [index: string]: string | WebpackSharedConfig;
};

export { }
