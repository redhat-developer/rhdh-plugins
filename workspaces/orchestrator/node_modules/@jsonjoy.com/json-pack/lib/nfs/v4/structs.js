"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nfsv4SecInfoFlavor = exports.Nfsv4RpcSecGssInfo = exports.Nfsv4CreateType = exports.Nfsv4CreateTypeOther = exports.Nfsv4CreateTypeDevice = exports.Nfsv4CreateTypeLink = exports.Nfsv4CreateTypeFile = exports.Nfsv4LockOwnerInfo = exports.Nfsv4LockExistingOwner = exports.Nfsv4LockNewOwner = exports.Nfsv4Entry = exports.Nfsv4OpenDelegation = exports.Nfsv4OpenWriteDelegation = exports.Nfsv4OpenReadDelegation = exports.Nfsv4OpenClaim = exports.Nfsv4OpenClaimDelegatePrev = exports.Nfsv4OpenClaimDelegateCur = exports.Nfsv4OpenClaimPrevious = exports.Nfsv4OpenClaimNull = exports.Nfsv4SecInfo = exports.Nfsv4Acl = exports.Nfsv4Ace = exports.Nfsv4FsLocations = exports.Nfsv4FsLocation = exports.Nfsv4OpenToLockOwner = exports.Nfsv4LockOwner = exports.Nfsv4OpenOwner = exports.Nfsv4ClientId = exports.Nfsv4CbClient = exports.Nfsv4ClientAddr = exports.Nfsv4Fattr = exports.Nfsv4Bitmap = exports.Nfsv4SetTime = exports.Nfsv4ChangeInfo = exports.Nfsv4Stateid = exports.Nfsv4Fsid = exports.Nfsv4Verifier = exports.Nfsv4Fh = exports.Nfsv4SpecData = exports.Nfsv4Time = void 0;
class Nfsv4Time {
    constructor(seconds, nseconds) {
        this.seconds = seconds;
        this.nseconds = nseconds;
    }
}
exports.Nfsv4Time = Nfsv4Time;
class Nfsv4SpecData {
    constructor(specdata1, specdata2) {
        this.specdata1 = specdata1;
        this.specdata2 = specdata2;
    }
}
exports.Nfsv4SpecData = Nfsv4SpecData;
class Nfsv4Fh {
    constructor(data) {
        this.data = data;
    }
}
exports.Nfsv4Fh = Nfsv4Fh;
class Nfsv4Verifier {
    constructor(data) {
        this.data = data;
    }
}
exports.Nfsv4Verifier = Nfsv4Verifier;
class Nfsv4Fsid {
    constructor(major, minor) {
        this.major = major;
        this.minor = minor;
    }
}
exports.Nfsv4Fsid = Nfsv4Fsid;
class Nfsv4Stateid {
    constructor(seqid, other) {
        this.seqid = seqid;
        this.other = other;
    }
}
exports.Nfsv4Stateid = Nfsv4Stateid;
class Nfsv4ChangeInfo {
    constructor(atomic, before, after) {
        this.atomic = atomic;
        this.before = before;
        this.after = after;
    }
}
exports.Nfsv4ChangeInfo = Nfsv4ChangeInfo;
class Nfsv4SetTime {
    constructor(how, time) {
        this.how = how;
        this.time = time;
    }
}
exports.Nfsv4SetTime = Nfsv4SetTime;
class Nfsv4Bitmap {
    constructor(mask) {
        this.mask = mask;
    }
}
exports.Nfsv4Bitmap = Nfsv4Bitmap;
class Nfsv4Fattr {
    constructor(attrmask, attrVals) {
        this.attrmask = attrmask;
        this.attrVals = attrVals;
    }
}
exports.Nfsv4Fattr = Nfsv4Fattr;
class Nfsv4ClientAddr {
    constructor(rNetid, rAddr) {
        this.rNetid = rNetid;
        this.rAddr = rAddr;
    }
}
exports.Nfsv4ClientAddr = Nfsv4ClientAddr;
class Nfsv4CbClient {
    constructor(cbProgram, cbLocation) {
        this.cbProgram = cbProgram;
        this.cbLocation = cbLocation;
    }
}
exports.Nfsv4CbClient = Nfsv4CbClient;
class Nfsv4ClientId {
    constructor(verifier, id) {
        this.verifier = verifier;
        this.id = id;
    }
}
exports.Nfsv4ClientId = Nfsv4ClientId;
class Nfsv4OpenOwner {
    constructor(clientid, owner) {
        this.clientid = clientid;
        this.owner = owner;
    }
}
exports.Nfsv4OpenOwner = Nfsv4OpenOwner;
class Nfsv4LockOwner {
    constructor(clientid, owner) {
        this.clientid = clientid;
        this.owner = owner;
    }
}
exports.Nfsv4LockOwner = Nfsv4LockOwner;
class Nfsv4OpenToLockOwner {
    constructor(openSeqid, openStateid, lockSeqid, lockOwner) {
        this.openSeqid = openSeqid;
        this.openStateid = openStateid;
        this.lockSeqid = lockSeqid;
        this.lockOwner = lockOwner;
    }
}
exports.Nfsv4OpenToLockOwner = Nfsv4OpenToLockOwner;
class Nfsv4FsLocation {
    constructor(server, rootpath) {
        this.server = server;
        this.rootpath = rootpath;
    }
}
exports.Nfsv4FsLocation = Nfsv4FsLocation;
class Nfsv4FsLocations {
    constructor(fsRoot, locations) {
        this.fsRoot = fsRoot;
        this.locations = locations;
    }
}
exports.Nfsv4FsLocations = Nfsv4FsLocations;
class Nfsv4Ace {
    constructor(type, flag, accessMask, who) {
        this.type = type;
        this.flag = flag;
        this.accessMask = accessMask;
        this.who = who;
    }
}
exports.Nfsv4Ace = Nfsv4Ace;
class Nfsv4Acl {
    constructor(aces) {
        this.aces = aces;
    }
}
exports.Nfsv4Acl = Nfsv4Acl;
class Nfsv4SecInfo {
    constructor(flavor, flavorInfo) {
        this.flavor = flavor;
        this.flavorInfo = flavorInfo;
    }
}
exports.Nfsv4SecInfo = Nfsv4SecInfo;
class Nfsv4OpenClaimNull {
    constructor(file) {
        this.file = file;
    }
}
exports.Nfsv4OpenClaimNull = Nfsv4OpenClaimNull;
class Nfsv4OpenClaimPrevious {
    constructor(delegateType) {
        this.delegateType = delegateType;
    }
}
exports.Nfsv4OpenClaimPrevious = Nfsv4OpenClaimPrevious;
class Nfsv4OpenClaimDelegateCur {
    constructor(delegateStateid, file) {
        this.delegateStateid = delegateStateid;
        this.file = file;
    }
}
exports.Nfsv4OpenClaimDelegateCur = Nfsv4OpenClaimDelegateCur;
class Nfsv4OpenClaimDelegatePrev {
    constructor(file) {
        this.file = file;
    }
}
exports.Nfsv4OpenClaimDelegatePrev = Nfsv4OpenClaimDelegatePrev;
class Nfsv4OpenClaim {
    constructor(claimType, claim) {
        this.claimType = claimType;
        this.claim = claim;
    }
}
exports.Nfsv4OpenClaim = Nfsv4OpenClaim;
class Nfsv4OpenReadDelegation {
    constructor(stateid, recall, permissions) {
        this.stateid = stateid;
        this.recall = recall;
        this.permissions = permissions;
    }
}
exports.Nfsv4OpenReadDelegation = Nfsv4OpenReadDelegation;
class Nfsv4OpenWriteDelegation {
    constructor(stateid, recall, spaceLimit, permissions) {
        this.stateid = stateid;
        this.recall = recall;
        this.spaceLimit = spaceLimit;
        this.permissions = permissions;
    }
}
exports.Nfsv4OpenWriteDelegation = Nfsv4OpenWriteDelegation;
class Nfsv4OpenDelegation {
    constructor(delegationType, delegation) {
        this.delegationType = delegationType;
        this.delegation = delegation;
    }
}
exports.Nfsv4OpenDelegation = Nfsv4OpenDelegation;
class Nfsv4Entry {
    constructor(cookie, name, attrs, nextEntry) {
        this.cookie = cookie;
        this.name = name;
        this.attrs = attrs;
        this.nextEntry = nextEntry;
    }
}
exports.Nfsv4Entry = Nfsv4Entry;
class Nfsv4LockNewOwner {
    constructor(openToLockOwner) {
        this.openToLockOwner = openToLockOwner;
    }
}
exports.Nfsv4LockNewOwner = Nfsv4LockNewOwner;
class Nfsv4LockExistingOwner {
    constructor(lockStateid, lockSeqid) {
        this.lockStateid = lockStateid;
        this.lockSeqid = lockSeqid;
    }
}
exports.Nfsv4LockExistingOwner = Nfsv4LockExistingOwner;
class Nfsv4LockOwnerInfo {
    constructor(newLockOwner, owner) {
        this.newLockOwner = newLockOwner;
        this.owner = owner;
    }
}
exports.Nfsv4LockOwnerInfo = Nfsv4LockOwnerInfo;
class Nfsv4CreateTypeFile {
    constructor(createattrs) {
        this.createattrs = createattrs;
    }
}
exports.Nfsv4CreateTypeFile = Nfsv4CreateTypeFile;
class Nfsv4CreateTypeLink {
    constructor(linkdata, createattrs) {
        this.linkdata = linkdata;
        this.createattrs = createattrs;
    }
}
exports.Nfsv4CreateTypeLink = Nfsv4CreateTypeLink;
class Nfsv4CreateTypeDevice {
    constructor(devdata, createattrs) {
        this.devdata = devdata;
        this.createattrs = createattrs;
    }
}
exports.Nfsv4CreateTypeDevice = Nfsv4CreateTypeDevice;
class Nfsv4CreateTypeOther {
    constructor(createattrs) {
        this.createattrs = createattrs;
    }
}
exports.Nfsv4CreateTypeOther = Nfsv4CreateTypeOther;
class Nfsv4CreateType {
    constructor(type, objtype) {
        this.type = type;
        this.objtype = objtype;
    }
}
exports.Nfsv4CreateType = Nfsv4CreateType;
class Nfsv4RpcSecGssInfo {
    constructor(oid, qop, service) {
        this.oid = oid;
        this.qop = qop;
        this.service = service;
    }
}
exports.Nfsv4RpcSecGssInfo = Nfsv4RpcSecGssInfo;
class Nfsv4SecInfoFlavor {
    constructor(flavor, flavorInfo) {
        this.flavor = flavor;
        this.flavorInfo = flavorInfo;
    }
}
exports.Nfsv4SecInfoFlavor = Nfsv4SecInfoFlavor;
//# sourceMappingURL=structs.js.map