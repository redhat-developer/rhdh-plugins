import { OpenAPIV3, OpenAPIV3_1 } from 'openapi-types';
import { FactLocation, FactRawItem, OpenApiV3TraverserFact, V3FactType } from './types';
export declare const OAS3: {
    isObjectType(type: OpenAPIV3.SchemaObject['type'] | OpenAPIV3_1.SchemaObject['type']): boolean;
    isArrayType(type: OpenAPIV3.SchemaObject['type'] | OpenAPIV3_1.SchemaObject['type']): boolean;
};
type Traverse<DocSchema> = {
    format: string;
    traverse(input: DocSchema): void;
    facts(): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
};
export declare function getRaw<T extends V3FactType>(spec: OpenAPIV3.Document, fact: OpenApiV3TraverserFact<T>): FactRawItem<T>;
export declare function getLocation<T extends V3FactType>(fact: OpenApiV3TraverserFact<T>): FactLocation<T>;
export declare class OpenApiV3Traverser implements Traverse<OpenAPIV3.Document> {
    format: string;
    input: (OpenAPIV3.Document | OpenAPIV3_1.Document) | undefined;
    warnings: string[];
    traverse(input: OpenAPIV3.Document | OpenAPIV3_1.Document): void;
    facts(): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
    traverseOperations(operation: OpenAPIV3.OperationObject | OpenAPIV3_1.OperationObject, method: string, pathPattern: string): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
    traverseResponse(response: OpenAPIV3.ResponseObject, jsonPath: string): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
    traverseParameters(operation: OpenAPIV3.OperationObject | OpenAPIV3_1.OperationObject, jsonPath: string, operationPath: string): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
    traverseResponseHeaders(response: OpenAPIV3.ResponseObject | OpenAPIV3_1.ResponsesObject, jsonPath: string): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
    traverseBody(body: OpenAPIV3.MediaTypeObject | OpenAPIV3_1.MediaTypeObject, contentType: string, jsonPath: string): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
    traverseField(schema: OpenAPIV3.SchemaObject | OpenAPIV3_1.SchemaObject, jsonPath: string): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
    traverseSchema(schema: OpenAPIV3.SchemaObject | OpenAPIV3_1.SchemaObject, jsonPath: string): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
    traverseComponentSchema(schema: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject | OpenAPIV3_1.SchemaObject | OpenAPIV3_1.ReferenceObject, schemaName: string): IterableIterator<OpenApiV3TraverserFact<V3FactType>>;
}
export {};
//# sourceMappingURL=traverser.d.ts.map