"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.factsToChangelog = void 0;
const types_1 = require("./types");
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const PATH_DELIMITER = '-=-';
const getConceptualPathIdentifier = (conceptualPath) => conceptualPath.join(PATH_DELIMITER);
function factsToChangelog(past, current) {
    const pastFactsLookup = new Map();
    const currentFactsLookup = new Map();
    for (const fact of past) {
        pastFactsLookup.set(getConceptualPathIdentifier(fact.location.conceptualPath), fact);
    }
    for (const fact of current) {
        currentFactsLookup.set(getConceptualPathIdentifier(fact.location.conceptualPath), fact);
    }
    const added = current.filter((currentFact) => !pastFactsLookup.has(getConceptualPathIdentifier(currentFact.location.conceptualPath)));
    const removed = past.filter((pastFact) => !currentFactsLookup.has(getConceptualPathIdentifier(pastFact.location.conceptualPath)));
    const updated = past.filter((pastFact) => {
        const currentVersion = currentFactsLookup.get(getConceptualPathIdentifier(pastFact.location.conceptualPath));
        return currentVersion
            ? !(0, fast_deep_equal_1.default)(pastFact.value, currentVersion.value)
            : false;
    });
    const addedChanges = added.map((added) => ({
        location: added.location,
        added: added.value,
        changeType: types_1.ChangeType.Added,
    }));
    const removedChanges = removed.map((removed) => ({
        location: removed.location,
        removed: {
            before: removed.value,
        },
        changeType: types_1.ChangeType.Removed,
    }));
    const changedChanges = updated.map((past) => {
        const after = currentFactsLookup.get(getConceptualPathIdentifier(past.location.conceptualPath));
        return {
            location: past.location,
            changed: {
                before: past.value,
                after: after.value,
            },
            changeType: types_1.ChangeType.Changed,
        };
    });
    return [...addedChanges, ...removedChanges, ...changedChanges];
}
exports.factsToChangelog = factsToChangelog;
//# sourceMappingURL=facts-to-changelog.js.map