import { FactVariant, ChangeVariant, OpenApiKind, IFact, IChange } from './types';
export declare const isFactVariant: <FactKind extends OpenApiKind>(fact: IFact, kind: FactKind) => fact is Extract<FactVariant<OpenApiKind.Specification>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.Operation>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.Request>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.QueryParameter>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.PathParameter>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.HeaderParameter>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.CookieParameter>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.ResponseHeader>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.Response>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.Body>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.BodyExample>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.Field>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.ComponentSchemaExample>, FactVariant<FactKind>> | Extract<FactVariant<OpenApiKind.Schema>, FactVariant<FactKind>>;
export declare const isChangeVariant: <ChangeKind extends OpenApiKind>(change: IChange, kind: ChangeKind) => change is Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: {};
        kind: OpenApiKind.Specification;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiSpecificationFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: {};
        kind: OpenApiKind.Specification;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiSpecificationFact;
        after: import("./types").OpenApiSpecificationFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: {};
        kind: OpenApiKind.Specification;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiSpecificationFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").OperationLocation;
        kind: OpenApiKind.Operation;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiOperationFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").OperationLocation;
        kind: OpenApiKind.Operation;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiOperationFact;
        after: import("./types").OpenApiOperationFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").OperationLocation;
        kind: OpenApiKind.Operation;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiOperationFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").RequestLocation;
        kind: OpenApiKind.Request;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").RequestLocation;
        kind: OpenApiKind.Request;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestFact;
        after: import("./types").OpenApiRequestFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").RequestLocation;
        kind: OpenApiKind.Request;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").QueryParameterLocation;
        kind: OpenApiKind.QueryParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestParameterFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").QueryParameterLocation;
        kind: OpenApiKind.QueryParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestParameterFact;
        after: import("./types").OpenApiRequestParameterFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").QueryParameterLocation;
        kind: OpenApiKind.QueryParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestParameterFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").PathParameterLocation;
        kind: OpenApiKind.PathParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestParameterFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").PathParameterLocation;
        kind: OpenApiKind.PathParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestParameterFact;
        after: import("./types").OpenApiRequestParameterFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").PathParameterLocation;
        kind: OpenApiKind.PathParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestParameterFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").HeaderParameterLocation;
        kind: OpenApiKind.HeaderParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestParameterFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").HeaderParameterLocation;
        kind: OpenApiKind.HeaderParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestParameterFact;
        after: import("./types").OpenApiRequestParameterFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").HeaderParameterLocation;
        kind: OpenApiKind.HeaderParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestParameterFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").CookieParameterLocation;
        kind: OpenApiKind.CookieParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestParameterFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").CookieParameterLocation;
        kind: OpenApiKind.CookieParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestParameterFact;
        after: import("./types").OpenApiRequestParameterFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").CookieParameterLocation;
        kind: OpenApiKind.CookieParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestParameterFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseHeaderLocation;
        kind: OpenApiKind.ResponseHeader;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiHeaderFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseHeaderLocation;
        kind: OpenApiKind.ResponseHeader;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiHeaderFact;
        after: import("./types").OpenApiHeaderFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseHeaderLocation;
        kind: OpenApiKind.ResponseHeader;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiHeaderFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseLocation;
        kind: OpenApiKind.Response;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiResponseFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseLocation;
        kind: OpenApiKind.Response;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiResponseFact;
        after: import("./types").OpenApiResponseFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseLocation;
        kind: OpenApiKind.Response;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiResponseFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyLocation;
        kind: OpenApiKind.Body;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiBodyFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyLocation;
        kind: OpenApiKind.Body;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiBodyFact;
        after: import("./types").OpenApiBodyFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyLocation;
        kind: OpenApiKind.Body;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiBodyFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyExampleLocation;
        kind: OpenApiKind.BodyExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiBodyExampleFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyExampleLocation;
        kind: OpenApiKind.BodyExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiBodyExampleFact;
        after: import("./types").OpenApiBodyExampleFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyExampleLocation;
        kind: OpenApiKind.BodyExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiBodyExampleFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").FieldLocation;
        kind: OpenApiKind.Field;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiFieldFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").FieldLocation;
        kind: OpenApiKind.Field;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiFieldFact;
        after: import("./types").OpenApiFieldFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").FieldLocation;
        kind: OpenApiKind.Field;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiFieldFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ComponentSchemaLocation;
        kind: OpenApiKind.ComponentSchemaExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiComponentSchemaExampleFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ComponentSchemaLocation;
        kind: OpenApiKind.ComponentSchemaExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiComponentSchemaExampleFact;
        after: import("./types").OpenApiComponentSchemaExampleFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ComponentSchemaLocation;
        kind: OpenApiKind.ComponentSchemaExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiComponentSchemaExampleFact;
    };
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types/location").SchemaLocation;
        kind: OpenApiKind.Schema;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiSchemaFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types/location").SchemaLocation;
        kind: OpenApiKind.Schema;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiSchemaFact;
        after: import("./types").OpenApiSchemaFact;
    };
    removed?: undefined;
}, ChangeVariant<ChangeKind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types/location").SchemaLocation;
        kind: OpenApiKind.Schema;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiSchemaFact;
    };
}, ChangeVariant<ChangeKind>>;
export declare const isFactOrChangeVariant: <Kind extends OpenApiKind>(factOrChange: IFact | IChange, kind: Kind) => factOrChange is Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: {};
        kind: OpenApiKind.Specification;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiSpecificationFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: {};
        kind: OpenApiKind.Specification;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiSpecificationFact;
        after: import("./types").OpenApiSpecificationFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: {};
        kind: OpenApiKind.Specification;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiSpecificationFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").OperationLocation;
        kind: OpenApiKind.Operation;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiOperationFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").OperationLocation;
        kind: OpenApiKind.Operation;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiOperationFact;
        after: import("./types").OpenApiOperationFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").OperationLocation;
        kind: OpenApiKind.Operation;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiOperationFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").RequestLocation;
        kind: OpenApiKind.Request;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").RequestLocation;
        kind: OpenApiKind.Request;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestFact;
        after: import("./types").OpenApiRequestFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").RequestLocation;
        kind: OpenApiKind.Request;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").QueryParameterLocation;
        kind: OpenApiKind.QueryParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestParameterFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").QueryParameterLocation;
        kind: OpenApiKind.QueryParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestParameterFact;
        after: import("./types").OpenApiRequestParameterFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").QueryParameterLocation;
        kind: OpenApiKind.QueryParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestParameterFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").PathParameterLocation;
        kind: OpenApiKind.PathParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestParameterFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").PathParameterLocation;
        kind: OpenApiKind.PathParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestParameterFact;
        after: import("./types").OpenApiRequestParameterFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").PathParameterLocation;
        kind: OpenApiKind.PathParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestParameterFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").HeaderParameterLocation;
        kind: OpenApiKind.HeaderParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestParameterFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").HeaderParameterLocation;
        kind: OpenApiKind.HeaderParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestParameterFact;
        after: import("./types").OpenApiRequestParameterFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").HeaderParameterLocation;
        kind: OpenApiKind.HeaderParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestParameterFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").CookieParameterLocation;
        kind: OpenApiKind.CookieParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiRequestParameterFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").CookieParameterLocation;
        kind: OpenApiKind.CookieParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiRequestParameterFact;
        after: import("./types").OpenApiRequestParameterFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").CookieParameterLocation;
        kind: OpenApiKind.CookieParameter;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiRequestParameterFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseHeaderLocation;
        kind: OpenApiKind.ResponseHeader;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiHeaderFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseHeaderLocation;
        kind: OpenApiKind.ResponseHeader;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiHeaderFact;
        after: import("./types").OpenApiHeaderFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseHeaderLocation;
        kind: OpenApiKind.ResponseHeader;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiHeaderFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseLocation;
        kind: OpenApiKind.Response;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiResponseFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseLocation;
        kind: OpenApiKind.Response;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiResponseFact;
        after: import("./types").OpenApiResponseFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ResponseLocation;
        kind: OpenApiKind.Response;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiResponseFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyLocation;
        kind: OpenApiKind.Body;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiBodyFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyLocation;
        kind: OpenApiKind.Body;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiBodyFact;
        after: import("./types").OpenApiBodyFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyLocation;
        kind: OpenApiKind.Body;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiBodyFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyExampleLocation;
        kind: OpenApiKind.BodyExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiBodyExampleFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyExampleLocation;
        kind: OpenApiKind.BodyExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiBodyExampleFact;
        after: import("./types").OpenApiBodyExampleFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").BodyExampleLocation;
        kind: OpenApiKind.BodyExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiBodyExampleFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").FieldLocation;
        kind: OpenApiKind.Field;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiFieldFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").FieldLocation;
        kind: OpenApiKind.Field;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiFieldFact;
        after: import("./types").OpenApiFieldFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").FieldLocation;
        kind: OpenApiKind.Field;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiFieldFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ComponentSchemaLocation;
        kind: OpenApiKind.ComponentSchemaExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiComponentSchemaExampleFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ComponentSchemaLocation;
        kind: OpenApiKind.ComponentSchemaExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiComponentSchemaExampleFact;
        after: import("./types").OpenApiComponentSchemaExampleFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types").ComponentSchemaLocation;
        kind: OpenApiKind.ComponentSchemaExample;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiComponentSchemaExampleFact;
    };
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types/location").SchemaLocation;
        kind: OpenApiKind.Schema;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Added;
    added: import("./types").OpenApiSchemaFact;
    changed?: undefined;
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types/location").SchemaLocation;
        kind: OpenApiKind.Schema;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Changed;
    added?: undefined;
    changed: {
        before: import("./types").OpenApiSchemaFact;
        after: import("./types").OpenApiSchemaFact;
    };
    removed?: undefined;
}, ChangeVariant<Kind>> | Extract<{
    location: {
        jsonPath: string;
        conceptualPath: string[];
    } & {
        conceptualLocation: import("./types/location").SchemaLocation;
        kind: OpenApiKind.Schema;
    } & {
        sourcemap?: import("../..").LookupLineResultWithFilepath | undefined;
    };
} & {
    changeType: import("./types").ChangeType.Removed;
    added?: undefined;
    changed?: undefined;
    removed: {
        before: import("./types").OpenApiSchemaFact;
    };
}, ChangeVariant<Kind>> | Extract<FactVariant<OpenApiKind.Specification>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.Operation>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.Request>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.QueryParameter>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.PathParameter>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.HeaderParameter>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.CookieParameter>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.ResponseHeader>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.Response>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.Body>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.BodyExample>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.Field>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.ComponentSchemaExample>, FactVariant<Kind>> | Extract<FactVariant<OpenApiKind.Schema>, FactVariant<Kind>>;
//# sourceMappingURL=isType.d.ts.map