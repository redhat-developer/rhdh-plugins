"use strict";
/* tslint:disable:no-namespace no-empty-interface */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatOpenAPIV2 = exports.HttpMethods = void 0;
var HttpMethods;
(function (HttpMethods) {
    HttpMethods["GET"] = "get";
    HttpMethods["PUT"] = "put";
    HttpMethods["POST"] = "post";
    HttpMethods["DELETE"] = "delete";
    HttpMethods["OPTIONS"] = "options";
    HttpMethods["HEAD"] = "head";
    HttpMethods["PATCH"] = "patch";
    HttpMethods["TRACE"] = "trace";
})(HttpMethods || (exports.HttpMethods = HttpMethods = {}));
var FlatOpenAPIV2;
(function (FlatOpenAPIV2) {
    // All HTTP methods allowed by OpenAPI 2 spec
    // See https://swagger.io/specification/v2#path-item-object
    // You can use keys or values from it in TypeScript code like this:
    //     for (const method of Object.values(OpenAPIV2.HttpMethods)) { â€¦ }
    let HttpMethods;
    (function (HttpMethods) {
        HttpMethods["GET"] = "get";
        HttpMethods["PUT"] = "put";
        HttpMethods["POST"] = "post";
        HttpMethods["DELETE"] = "delete";
        HttpMethods["OPTIONS"] = "options";
        HttpMethods["HEAD"] = "head";
        HttpMethods["PATCH"] = "patch";
    })(HttpMethods = FlatOpenAPIV2.HttpMethods || (FlatOpenAPIV2.HttpMethods = {}));
})(FlatOpenAPIV2 || (exports.FlatOpenAPIV2 = FlatOpenAPIV2 = {}));
//# sourceMappingURL=flat-openapi-types.js.map