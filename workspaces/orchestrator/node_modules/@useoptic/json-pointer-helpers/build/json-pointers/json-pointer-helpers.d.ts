declare function append(pointer: string, ...property: string[]): string;
declare function pop(pointer: string): string;
declare function splitParentChild(pointer: string): [string, string, string];
declare function unescapeUriSafePointer(inputFromApiToolkit: string): string;
declare function relative(pointer: string, from: string): string;
declare function startsWith(pointer: string, pattern: string[], options?: {
    exact: boolean;
}): boolean;
declare function matches(pointer: string, pattern: string[]): boolean;
declare function endsWith(pointer: string, pattern: string[], options?: {
    exact: boolean;
}): boolean;
declare function tryGet(input: any, pointer: string): {
    match: true;
    value: any;
} | {
    match: false;
    error: string;
};
declare function join(leading: string, trailing: string): string;
declare const _default: {
    append: typeof append;
    escape: (str: string) => string;
    unescape: (str: string) => string;
    pop: typeof pop;
    decode: (pointer: string) => string[];
    join: typeof join;
    splitParentChild: typeof splitParentChild;
    unescapeUriSafePointer: typeof unescapeUriSafePointer;
    get: (obj: any, pointer: string | string[]) => any;
    tryGet: typeof tryGet;
    compile: (parts: string[]) => string;
    relative: typeof relative;
    startsWith: typeof startsWith;
    matches: typeof matches;
    endsWith: typeof endsWith;
};
export default _default;
//# sourceMappingURL=json-pointer-helpers.d.ts.map