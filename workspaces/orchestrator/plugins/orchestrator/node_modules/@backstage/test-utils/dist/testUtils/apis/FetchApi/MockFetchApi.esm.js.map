{"version":3,"file":"MockFetchApi.esm.js","sources":["../../../../src/testUtils/apis/FetchApi/MockFetchApi.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createFetchApi,\n  FetchMiddleware,\n  FetchMiddlewares,\n} from '@backstage/core-app-api';\nimport {\n  DiscoveryApi,\n  FetchApi,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport crossFetch, { Response } from 'cross-fetch';\n\n/**\n * The options given when constructing a {@link MockFetchApi}.\n *\n * @public\n */\nexport interface MockFetchApiOptions {\n  /**\n   * Define the underlying base `fetch` implementation.\n   *\n   * @defaultValue undefined\n   * @remarks\n   *\n   * Leaving out this parameter or passing `undefined`, makes the API use the\n   * global `fetch` implementation to make real network requests.\n   *\n   * `'none'` swallows all calls and makes no requests at all.\n   *\n   * You can also pass in any `fetch` compatible callback, such as a\n   * `jest.fn()`, if you want to use a custom implementation or to just track\n   * and assert on calls.\n   */\n  baseImplementation?: undefined | 'none' | typeof crossFetch;\n\n  /**\n   * Add translation from `plugin://` URLs to concrete http(s) URLs, basically\n   * simulating what\n   * {@link @backstage/core-app-api#FetchMiddlewares.resolvePluginProtocol}\n   * does.\n   *\n   * @defaultValue undefined\n   * @remarks\n   *\n   * Leaving out this parameter or passing `undefined`, disables plugin protocol\n   * translation.\n   *\n   * To enable the feature, pass in a discovery API which is then used to\n   * resolve the URLs.\n   */\n  resolvePluginProtocol?:\n    | undefined\n    | { discoveryApi: Pick<DiscoveryApi, 'getBaseUrl'> };\n\n  /**\n   * Add token based Authorization headers to requests, basically simulating\n   * what {@link @backstage/core-app-api#FetchMiddlewares.injectIdentityAuth}\n   * does.\n   *\n   * @defaultValue undefined\n   * @remarks\n   *\n   * Leaving out this parameter or passing `undefined`, disables auth injection.\n   *\n   * To enable the feature, pass in either a static token or an identity API\n   * which is queried on each request for a token.\n   */\n  injectIdentityAuth?:\n    | undefined\n    | { token: string }\n    | { identityApi: Pick<IdentityApi, 'getCredentials'> };\n}\n\n/**\n * A test helper implementation of {@link @backstage/core-plugin-api#FetchApi}.\n *\n * @public\n */\nexport class MockFetchApi implements FetchApi {\n  private readonly implementation: FetchApi;\n\n  /**\n   * Creates a mock {@link @backstage/core-plugin-api#FetchApi}.\n   */\n  constructor(options?: MockFetchApiOptions) {\n    this.implementation = build(options);\n  }\n\n  /** {@inheritdoc @backstage/core-plugin-api#FetchApi.fetch} */\n  get fetch(): typeof crossFetch {\n    return this.implementation.fetch;\n  }\n}\n\n//\n// Helpers\n//\n\nfunction build(options?: MockFetchApiOptions): FetchApi {\n  return createFetchApi({\n    baseImplementation: baseImplementation(options),\n    middleware: [\n      resolvePluginProtocol(options),\n      injectIdentityAuth(options),\n    ].filter((x): x is FetchMiddleware => Boolean(x)),\n  });\n}\n\nfunction baseImplementation(\n  options: MockFetchApiOptions | undefined,\n): typeof crossFetch {\n  const implementation = options?.baseImplementation;\n  if (!implementation) {\n    return crossFetch;\n  } else if (implementation === 'none') {\n    return () => Promise.resolve(new Response());\n  }\n  return implementation;\n}\n\nfunction resolvePluginProtocol(\n  allOptions: MockFetchApiOptions | undefined,\n): FetchMiddleware | undefined {\n  const options = allOptions?.resolvePluginProtocol;\n  if (!options) {\n    return undefined;\n  }\n\n  return FetchMiddlewares.resolvePluginProtocol({\n    discoveryApi: options.discoveryApi,\n  });\n}\n\nfunction injectIdentityAuth(\n  allOptions: MockFetchApiOptions | undefined,\n): FetchMiddleware | undefined {\n  const options = allOptions?.injectIdentityAuth;\n  if (!options) {\n    return undefined;\n  }\n\n  const identityApi: Pick<IdentityApi, 'getCredentials'> =\n    'token' in options\n      ? { getCredentials: async () => ({ token: options.token }) }\n      : options.identityApi;\n\n  return FetchMiddlewares.injectIdentityAuth({\n    identityApi: identityApi as IdentityApi,\n    allowUrl: () => true,\n  });\n}\n"],"names":[],"mappings":";;;AA8FO,MAAM,YAAA,CAAiC;AAAA,EAC3B,cAAA;AAAA;AAAA;AAAA;AAAA,EAKjB,YAAY,OAAA,EAA+B;AACzC,IAAA,IAAA,CAAK,cAAA,GAAiB,MAAM,OAAO,CAAA;AAAA,EACrC;AAAA;AAAA,EAGA,IAAI,KAAA,GAA2B;AAC7B,IAAA,OAAO,KAAK,cAAA,CAAe,KAAA;AAAA,EAC7B;AACF;AAMA,SAAS,MAAM,OAAA,EAAyC;AACtD,EAAA,OAAO,cAAA,CAAe;AAAA,IACpB,kBAAA,EAAoB,mBAAmB,OAAO,CAAA;AAAA,IAC9C,UAAA,EAAY;AAAA,MACV,sBAAsB,OAAO,CAAA;AAAA,MAC7B,mBAAmB,OAAO;AAAA,MAC1B,MAAA,CAAO,CAAC,CAAA,KAA4B,OAAA,CAAQ,CAAC,CAAC;AAAA,GACjD,CAAA;AACH;AAEA,SAAS,mBACP,OAAA,EACmB;AACnB,EAAA,MAAM,iBAAiB,OAAA,EAAS,kBAAA;AAChC,EAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,IAAA,OAAO,UAAA;AAAA,EACT,CAAA,MAAA,IAAW,mBAAmB,MAAA,EAAQ;AACpC,IAAA,OAAO,MAAM,OAAA,CAAQ,OAAA,CAAQ,IAAI,UAAU,CAAA;AAAA,EAC7C;AACA,EAAA,OAAO,cAAA;AACT;AAEA,SAAS,sBACP,UAAA,EAC6B;AAC7B,EAAA,MAAM,UAAU,UAAA,EAAY,qBAAA;AAC5B,EAAA,IAAI,CAAC,OAAA,EAAS;AACZ,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,OAAO,iBAAiB,qBAAA,CAAsB;AAAA,IAC5C,cAAc,OAAA,CAAQ;AAAA,GACvB,CAAA;AACH;AAEA,SAAS,mBACP,UAAA,EAC6B;AAC7B,EAAA,MAAM,UAAU,UAAA,EAAY,kBAAA;AAC5B,EAAA,IAAI,CAAC,OAAA,EAAS;AACZ,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,MAAM,WAAA,GACJ,OAAA,IAAW,OAAA,GACP,EAAE,cAAA,EAAgB,aAAa,EAAE,KAAA,EAAO,OAAA,CAAQ,KAAA,EAAM,CAAA,EAAG,GACzD,OAAA,CAAQ,WAAA;AAEd,EAAA,OAAO,iBAAiB,kBAAA,CAAmB;AAAA,IACzC,WAAA;AAAA,IACA,UAAU,MAAM;AAAA,GACjB,CAAA;AACH;;;;"}