{"version":3,"file":"logCollector.esm.js","sources":["../../src/testUtils/logCollector.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\n\n/**\n * Severity levels of {@link CollectedLogs}\n * @public\n */\nexport type LogFuncs = 'log' | 'warn' | 'error';\n/**\n * AsyncLogCollector type used in {@link (withLogCollector:1)} callback function.\n * @public\n */\nexport type AsyncLogCollector = () => Promise<void>;\n/**\n * SyncLogCollector type used in {@link (withLogCollector:2)} callback function.\n * @public\n */\nexport type SyncLogCollector = () => void;\n/**\n * Union type used in {@link (withLogCollector:3)} callback function.\n * @public\n */\nexport type LogCollector = AsyncLogCollector | SyncLogCollector;\n/**\n * Map of severity level and corresponding log lines.\n * @public\n */\nexport type CollectedLogs<T extends LogFuncs> = { [key in T]: string[] };\n\nconst allCategories = ['log', 'warn', 'error'];\n\n/**\n * Asynchronous log collector with that collects all categories\n * @public\n */\nexport function withLogCollector(\n  callback: AsyncLogCollector,\n): Promise<CollectedLogs<LogFuncs>>;\n\n/**\n * Synchronous log collector with that collects all categories\n * @public\n */\nexport function withLogCollector(\n  callback: SyncLogCollector,\n): CollectedLogs<LogFuncs>;\n\n/**\n * Asynchronous log collector with that only collects selected categories\n * @public\n */\nexport function withLogCollector<T extends LogFuncs>(\n  logsToCollect: T[],\n  callback: AsyncLogCollector,\n): Promise<CollectedLogs<T>>;\n\n/**\n * Synchronous log collector with that only collects selected categories\n * @public\n */\nexport function withLogCollector<T extends LogFuncs>(\n  logsToCollect: T[],\n  callback: SyncLogCollector,\n): CollectedLogs<T>;\n\n/**\n * Log collector that collect logs either from a sync or async collector.\n * @public\n */\nexport function withLogCollector(\n  logsToCollect: LogFuncs[] | LogCollector,\n  callback?: LogCollector,\n): CollectedLogs<LogFuncs> | Promise<CollectedLogs<LogFuncs>> {\n  const oneArg = !callback;\n  const actualCallback = (oneArg ? logsToCollect : callback) as LogCollector;\n  const categories = (oneArg ? allCategories : logsToCollect) as LogFuncs[];\n\n  const logs = {\n    log: new Array<string>(),\n    warn: new Array<string>(),\n    error: new Array<string>(),\n  };\n\n  const origLog = console.log;\n  const origWarn = console.warn;\n  const origError = console.error;\n\n  if (categories.includes('log')) {\n    console.log = (message: string) => {\n      logs.log.push(message);\n    };\n  }\n  if (categories.includes('warn')) {\n    console.warn = (message: string) => {\n      logs.warn.push(message);\n    };\n  }\n  if (categories.includes('error')) {\n    console.error = (message: string) => {\n      logs.error.push(message);\n    };\n  }\n\n  const restore = () => {\n    console.log = origLog;\n    console.warn = origWarn;\n    console.error = origError;\n  };\n\n  try {\n    const ret = actualCallback();\n\n    if (!ret || !ret.then) {\n      restore();\n      return logs;\n    }\n\n    return ret.then(\n      () => {\n        restore();\n        return logs;\n      },\n      error => {\n        restore();\n        throw error;\n      },\n    );\n  } catch (error) {\n    restore();\n    throw error;\n  }\n}\n"],"names":[],"mappings":"AA4CA,MAAM,aAAA,GAAgB,CAAC,KAAA,EAAO,MAAA,EAAQ,OAAO,CAAA;AAwCtC,SAAS,gBAAA,CACd,eACA,QAAA,EAC4D;AAC5D,EAAA,MAAM,SAAS,CAAC,QAAA;AAChB,EAAA,MAAM,cAAA,GAAkB,SAAS,aAAA,GAAgB,QAAA;AACjD,EAAA,MAAM,UAAA,GAAc,SAAS,aAAA,GAAgB,aAAA;AAE7C,EAAA,MAAM,IAAA,GAAO;AAAA,IACX,GAAA,EAAK,IAAI,KAAA,EAAc;AAAA,IACvB,IAAA,EAAM,IAAI,KAAA,EAAc;AAAA,IACxB,KAAA,EAAO,IAAI,KAAA;AAAc,GAC3B;AAEA,EAAA,MAAM,UAAU,OAAA,CAAQ,GAAA;AACxB,EAAA,MAAM,WAAW,OAAA,CAAQ,IAAA;AACzB,EAAA,MAAM,YAAY,OAAA,CAAQ,KAAA;AAE1B,EAAA,IAAI,UAAA,CAAW,QAAA,CAAS,KAAK,CAAA,EAAG;AAC9B,IAAA,OAAA,CAAQ,GAAA,GAAM,CAAC,OAAA,KAAoB;AACjC,MAAA,IAAA,CAAK,GAAA,CAAI,KAAK,OAAO,CAAA;AAAA,IACvB,CAAA;AAAA,EACF;AACA,EAAA,IAAI,UAAA,CAAW,QAAA,CAAS,MAAM,CAAA,EAAG;AAC/B,IAAA,OAAA,CAAQ,IAAA,GAAO,CAAC,OAAA,KAAoB;AAClC,MAAA,IAAA,CAAK,IAAA,CAAK,KAAK,OAAO,CAAA;AAAA,IACxB,CAAA;AAAA,EACF;AACA,EAAA,IAAI,UAAA,CAAW,QAAA,CAAS,OAAO,CAAA,EAAG;AAChC,IAAA,OAAA,CAAQ,KAAA,GAAQ,CAAC,OAAA,KAAoB;AACnC,MAAA,IAAA,CAAK,KAAA,CAAM,KAAK,OAAO,CAAA;AAAA,IACzB,CAAA;AAAA,EACF;AAEA,EAAA,MAAM,UAAU,MAAM;AACpB,IAAA,OAAA,CAAQ,GAAA,GAAM,OAAA;AACd,IAAA,OAAA,CAAQ,IAAA,GAAO,QAAA;AACf,IAAA,OAAA,CAAQ,KAAA,GAAQ,SAAA;AAAA,EAClB,CAAA;AAEA,EAAA,IAAI;AACF,IAAA,MAAM,MAAM,cAAA,EAAe;AAE3B,IAAA,IAAI,CAAC,GAAA,IAAO,CAAC,GAAA,CAAI,IAAA,EAAM;AACrB,MAAA,OAAA,EAAQ;AACR,MAAA,OAAO,IAAA;AAAA,IACT;AAEA,IAAA,OAAO,GAAA,CAAI,IAAA;AAAA,MACT,MAAM;AACJ,QAAA,OAAA,EAAQ;AACR,QAAA,OAAO,IAAA;AAAA,MACT,CAAA;AAAA,MACA,CAAA,KAAA,KAAS;AACP,QAAA,OAAA,EAAQ;AACR,QAAA,MAAM,KAAA;AAAA,MACR;AAAA,KACF;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,EAAQ;AACR,IAAA,MAAM,KAAA;AAAA,EACR;AACF;;;;"}