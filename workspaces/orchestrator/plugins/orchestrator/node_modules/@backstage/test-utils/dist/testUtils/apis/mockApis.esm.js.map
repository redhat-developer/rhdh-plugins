{"version":3,"file":"mockApis.esm.js","sources":["../../../src/testUtils/apis/mockApis.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigReader } from '@backstage/config';\nimport {\n  AnalyticsApi,\n  ApiFactory,\n  ApiRef,\n  ConfigApi,\n  DiscoveryApi,\n  IdentityApi,\n  StorageApi,\n  analyticsApiRef,\n  configApiRef,\n  createApiFactory,\n  discoveryApiRef,\n  identityApiRef,\n  storageApiRef,\n} from '@backstage/core-plugin-api';\nimport {\n  TranslationApi,\n  translationApiRef,\n} from '@backstage/core-plugin-api/alpha';\nimport {\n  AuthorizeResult,\n  EvaluatePermissionRequest,\n} from '@backstage/plugin-permission-common';\nimport {\n  PermissionApi,\n  permissionApiRef,\n} from '@backstage/plugin-permission-react';\nimport { JsonObject } from '@backstage/types';\nimport { ApiMock } from './ApiMock';\nimport { MockPermissionApi } from './PermissionApi';\nimport { MockStorageApi } from './StorageApi';\nimport { MockTranslationApi } from './TranslationApi';\n\n/** @internal */\nfunction simpleFactory<TApi, TArgs extends unknown[]>(\n  ref: ApiRef<TApi>,\n  factory: (...args: TArgs) => TApi,\n): (...args: TArgs) => ApiFactory<TApi, TApi, {}> {\n  return (...args) =>\n    createApiFactory({\n      api: ref,\n      deps: {},\n      factory: () => factory(...args),\n    });\n}\n\n/** @internal */\nfunction simpleMock<TApi>(\n  ref: ApiRef<TApi>,\n  mockFactory: () => jest.Mocked<TApi>,\n): (partialImpl?: Partial<TApi>) => ApiMock<TApi> {\n  return partialImpl => {\n    const mock = mockFactory();\n    if (partialImpl) {\n      for (const [key, impl] of Object.entries(partialImpl)) {\n        if (typeof impl === 'function') {\n          (mock as any)[key].mockImplementation(impl);\n        } else {\n          (mock as any)[key] = impl;\n        }\n      }\n    }\n    return Object.assign(mock, {\n      factory: createApiFactory({\n        api: ref,\n        deps: {},\n        factory: () => mock,\n      }),\n    }) as ApiMock<TApi>;\n  };\n}\n\n/**\n * Mock implementations of the core utility APIs, to be used in tests.\n *\n * @public\n * @remarks\n *\n * There are some variations among the APIs depending on what needs tests\n * might have, but overall there are three main usage patterns:\n *\n * 1: Creating an actual fake API instance, often with a simplified version\n * of functionality, by calling the mock API itself as a function.\n *\n * ```ts\n * // The function often accepts parameters that control its behavior\n * const foo = mockApis.foo();\n * ```\n *\n * 2: Creating a mock API, where all methods are replaced with jest mocks, by\n * calling the API's `mock` function.\n *\n * ```ts\n * // You can optionally supply a subset of its methods to implement\n * const foo = mockApis.foo.mock({\n *   someMethod: () => 'mocked result',\n * });\n * // After exercising your test, you can make assertions on the mock:\n * expect(foo.someMethod).toHaveBeenCalledTimes(2);\n * expect(foo.otherMethod).toHaveBeenCalledWith(testData);\n * ```\n *\n * 3: Creating an API factory that behaves similarly to the mock as per above.\n *\n * ```ts\n * const factory = mockApis.foo.factory({\n *   someMethod: () => 'mocked result',\n * });\n * ```\n */\nexport namespace mockApis {\n  const analyticsMockSkeleton = (): jest.Mocked<AnalyticsApi> => ({\n    captureEvent: jest.fn(),\n  });\n  /**\n   * Mock implementation of {@link @backstage/core-plugin-api#AnalyticsApi}.\n   *\n   * @public\n   */\n  export function analytics(): AnalyticsApi {\n    return analyticsMockSkeleton();\n  }\n  /**\n   * Mock implementations of {@link @backstage/core-plugin-api#AnalyticsApi}.\n   *\n   * @public\n   */\n  export namespace analytics {\n    export const factory = simpleFactory(analyticsApiRef, analytics);\n    export const mock = simpleMock(analyticsApiRef, analyticsMockSkeleton);\n  }\n\n  /**\n   * Fake implementation of {@link @backstage/core-plugin-api#ConfigApi}\n   * with optional data supplied.\n   *\n   * @public\n   * @example\n   *\n   * ```tsx\n   * const config = mockApis.config({\n   *   data: { app: { baseUrl: 'https://example.com' } },\n   * });\n   *\n   * await renderInTestApp(\n   *   <TestApiProvider apis={[[configApiRef, config]]}>\n   *     <MyTestedComponent />\n   *   </TestApiProvider>,\n   * );\n   * ```\n   */\n  export function config(options?: { data?: JsonObject }): ConfigApi {\n    return new ConfigReader(options?.data, 'mock-config');\n  }\n  /**\n   * Mock helpers for {@link @backstage/core-plugin-api#ConfigApi}.\n   *\n   * @see {@link @backstage/core-plugin-api#mockApis.config}\n   * @public\n   */\n  export namespace config {\n    /**\n     * Creates a factory for a fake implementation of\n     * {@link @backstage/core-plugin-api#ConfigApi} with optional\n     * configuration data supplied.\n     *\n     * @public\n     */\n    export const factory = simpleFactory(configApiRef, config);\n    /**\n     * Creates a mock implementation of\n     * {@link @backstage/core-plugin-api#ConfigApi}. All methods are\n     * replaced with jest mock functions, and you can optionally pass in a\n     * subset of methods with an explicit implementation.\n     *\n     * @public\n     */\n    export const mock = simpleMock(configApiRef, () => ({\n      has: jest.fn(),\n      keys: jest.fn(),\n      get: jest.fn(),\n      getOptional: jest.fn(),\n      getConfig: jest.fn(),\n      getOptionalConfig: jest.fn(),\n      getConfigArray: jest.fn(),\n      getOptionalConfigArray: jest.fn(),\n      getNumber: jest.fn(),\n      getOptionalNumber: jest.fn(),\n      getBoolean: jest.fn(),\n      getOptionalBoolean: jest.fn(),\n      getString: jest.fn(),\n      getOptionalString: jest.fn(),\n      getStringArray: jest.fn(),\n      getOptionalStringArray: jest.fn(),\n    }));\n  }\n\n  /**\n   * Fake implementation of {@link @backstage/core-plugin-api#DiscoveryApi}. By\n   * default returns URLs on the form `http://example.com/api/<pluginIs>`.\n   *\n   * @public\n   */\n  export function discovery(options?: { baseUrl?: string }): DiscoveryApi {\n    const baseUrl = options?.baseUrl ?? 'http://example.com';\n    return {\n      async getBaseUrl(pluginId: string) {\n        return `${baseUrl}/api/${pluginId}`;\n      },\n    };\n  }\n  /**\n   * Mock implementations of {@link @backstage/core-plugin-api#DiscoveryApi}.\n   *\n   * @public\n   */\n  export namespace discovery {\n    export const factory = simpleFactory(discoveryApiRef, discovery);\n    export const mock = simpleMock(discoveryApiRef, () => ({\n      getBaseUrl: jest.fn(),\n    }));\n  }\n\n  /**\n   * Fake implementation of {@link @backstage/core-plugin-api#IdentityApi}. By\n   * default returns no token or profile info, and the user `user:default/test`.\n   *\n   * @public\n   */\n  export function identity(options?: {\n    userEntityRef?: string;\n    ownershipEntityRefs?: string[];\n    token?: string;\n    email?: string;\n    displayName?: string;\n    picture?: string;\n  }): IdentityApi {\n    const {\n      userEntityRef = 'user:default/test',\n      ownershipEntityRefs = ['user:default/test'],\n      token,\n      email,\n      displayName,\n      picture,\n    } = options ?? {};\n    return {\n      async getBackstageIdentity() {\n        return { type: 'user', ownershipEntityRefs, userEntityRef };\n      },\n      async getCredentials() {\n        return { token };\n      },\n      async getProfileInfo() {\n        return { email, displayName, picture };\n      },\n      async signOut() {},\n    };\n  }\n  /**\n   * Mock implementations of {@link @backstage/core-plugin-api#IdentityApi}.\n   *\n   * @public\n   */\n  export namespace identity {\n    export const factory = simpleFactory(identityApiRef, identity);\n    export const mock = simpleMock(\n      identityApiRef,\n      (): jest.Mocked<IdentityApi> => ({\n        getBackstageIdentity: jest.fn(),\n        getCredentials: jest.fn(),\n        getProfileInfo: jest.fn(),\n        signOut: jest.fn(),\n      }),\n    );\n  }\n\n  /**\n   * Fake implementation of\n   * {@link @backstage/plugin-permission-react#PermissionApi}. By default allows\n   * all actions.\n   *\n   * @public\n   */\n  export function permission(options?: {\n    authorize?:\n      | AuthorizeResult.ALLOW\n      | AuthorizeResult.DENY\n      | ((\n          request: EvaluatePermissionRequest,\n        ) => AuthorizeResult.ALLOW | AuthorizeResult.DENY);\n  }): PermissionApi {\n    const authorizeInput = options?.authorize;\n    let authorize: (\n      request: EvaluatePermissionRequest,\n    ) => AuthorizeResult.ALLOW | AuthorizeResult.DENY;\n    if (authorizeInput === undefined) {\n      authorize = () => AuthorizeResult.ALLOW;\n    } else if (typeof authorizeInput === 'function') {\n      authorize = authorizeInput;\n    } else {\n      authorize = () => authorizeInput;\n    }\n    return new MockPermissionApi(authorize);\n  }\n  /**\n   * Mock implementation of\n   * {@link @backstage/plugin-permission-react#PermissionApi}.\n   *\n   * @public\n   */\n  export namespace permission {\n    export const factory = simpleFactory(permissionApiRef, permission);\n    export const mock = simpleMock(permissionApiRef, () => ({\n      authorize: jest.fn(),\n    }));\n  }\n\n  /**\n   * Fake implementation of {@link @backstage/core-plugin-api#StorageApi}.\n   * Stores data temporarily in memory.\n   *\n   * @public\n   */\n  export function storage(options?: { data?: JsonObject }): StorageApi {\n    return MockStorageApi.create(options?.data);\n  }\n  /**\n   * Mock implementations of {@link @backstage/core-plugin-api#StorageApi}.\n   *\n   * @public\n   */\n  export namespace storage {\n    export const factory = simpleFactory(storageApiRef, storage);\n    export const mock = simpleMock(storageApiRef, () => ({\n      forBucket: jest.fn(),\n      set: jest.fn(),\n      remove: jest.fn(),\n      observe$: jest.fn(),\n      snapshot: jest.fn(),\n    }));\n  }\n\n  /**\n   * Fake implementation of {@link @backstage/core-plugin-api/alpha#TranslationApi}.\n   * By default returns the default translation.\n   *\n   * @public\n   */\n  export function translation(): TranslationApi {\n    return MockTranslationApi.create();\n  }\n  /**\n   * Mock implementations of {@link @backstage/core-plugin-api/alpha#TranslationApi}.\n   *\n   * @public\n   */\n  export namespace translation {\n    export const factory = simpleFactory(translationApiRef, translation);\n    export const mock = simpleMock(translationApiRef, () => ({\n      getTranslation: jest.fn(),\n      translation$: jest.fn(),\n    }));\n  }\n}\n"],"names":["mockApis","analytics","config","discovery","identity","permission","storage","translation"],"mappings":"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"}