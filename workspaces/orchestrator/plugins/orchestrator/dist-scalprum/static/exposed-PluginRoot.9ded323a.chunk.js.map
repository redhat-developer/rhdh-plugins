{"version":3,"file":"static/exposed-PluginRoot.9ded323a.chunk.js","mappings":"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","sources":["webpack://red-hat-developer-hub.backstage-plugin-orchestrator/../../node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/../orchestrator-common/src/generated/client/base.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/../orchestrator-common/src/generated/client/common.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/../orchestrator-common/src/generated/client/api.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/../orchestrator-common/src/permissions.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/../orchestrator-common/src/utils/StringUtils.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/api/api.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/OrchestratorPage/InputSchemaDialog.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/OrchestratorPage/WorkflowsTable.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/OrchestratorPage/WorkflowsTabContent.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/ui/InfoDialog.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/ui/JsonCodeBlock.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/ui/OverrideBackstageTable.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/ui/WorkflowInstanceStatusIndicator.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/ui/WorkflowStatus.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/constants.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/dataFormatters/WorkflowOverviewFormatter.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/hooks/usePermissionArray.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/hooks/usePolling.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/hooks/useTranslation.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/hooks/useWorkflowInstanceStatusColors.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/../orchestrator-common/src/generated/client/configuration.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/api/OrchestratorClient.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/plugin.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/OrchestratorIcon.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/components/catalogComponents/CatalogTab.tsx","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/translations/index.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/routes.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/translations/ref.ts","webpack://red-hat-developer-hub.backstage-plugin-orchestrator/./src/utils/isDarkMode.ts"],"sourcesContent":["var map = {\n\t\"./af\": 43726,\n\t\"./af.js\": 43726,\n\t\"./ar\": 28754,\n\t\"./ar-dz\": 81241,\n\t\"./ar-dz.js\": 81241,\n\t\"./ar-kw\": 24873,\n\t\"./ar-kw.js\": 24873,\n\t\"./ar-ly\": 36008,\n\t\"./ar-ly.js\": 36008,\n\t\"./ar-ma\": 77721,\n\t\"./ar-ma.js\": 77721,\n\t\"./ar-ps\": 86774,\n\t\"./ar-ps.js\": 86774,\n\t\"./ar-sa\": 78155,\n\t\"./ar-sa.js\": 78155,\n\t\"./ar-tn\": 32245,\n\t\"./ar-tn.js\": 32245,\n\t\"./ar.js\": 28754,\n\t\"./az\": 44586,\n\t\"./az.js\": 44586,\n\t\"./be\": 29852,\n\t\"./be.js\": 29852,\n\t\"./bg\": 91846,\n\t\"./bg.js\": 91846,\n\t\"./bm\": 80420,\n\t\"./bm.js\": 80420,\n\t\"./bn\": 5005,\n\t\"./bn-bd\": 25776,\n\t\"./bn-bd.js\": 25776,\n\t\"./bn.js\": 5005,\n\t\"./bo\": 44302,\n\t\"./bo.js\": 44302,\n\t\"./br\": 34649,\n\t\"./br.js\": 34649,\n\t\"./bs\": 45162,\n\t\"./bs.js\": 45162,\n\t\"./ca\": 62457,\n\t\"./ca.js\": 62457,\n\t\"./cs\": 39335,\n\t\"./cs.js\": 39335,\n\t\"./cv\": 34364,\n\t\"./cv.js\": 34364,\n\t\"./cy\": 15057,\n\t\"./cy.js\": 15057,\n\t\"./da\": 78498,\n\t\"./da.js\": 78498,\n\t\"./de\": 14830,\n\t\"./de-at\": 11614,\n\t\"./de-at.js\": 11614,\n\t\"./de-ch\": 91416,\n\t\"./de-ch.js\": 91416,\n\t\"./de.js\": 14830,\n\t\"./dv\": 53147,\n\t\"./dv.js\": 53147,\n\t\"./el\": 24968,\n\t\"./el.js\": 24968,\n\t\"./en-au\": 94073,\n\t\"./en-au.js\": 94073,\n\t\"./en-ca\": 11387,\n\t\"./en-ca.js\": 11387,\n\t\"./en-gb\": 41386,\n\t\"./en-gb.js\": 41386,\n\t\"./en-ie\": 53537,\n\t\"./en-ie.js\": 53537,\n\t\"./en-il\": 67050,\n\t\"./en-il.js\": 67050,\n\t\"./en-in\": 3008,\n\t\"./en-in.js\": 3008,\n\t\"./en-nz\": 96963,\n\t\"./en-nz.js\": 96963,\n\t\"./en-sg\": 14865,\n\t\"./en-sg.js\": 14865,\n\t\"./eo\": 43713,\n\t\"./eo.js\": 43713,\n\t\"./es\": 6341,\n\t\"./es-do\": 34611,\n\t\"./es-do.js\": 34611,\n\t\"./es-mx\": 65247,\n\t\"./es-mx.js\": 65247,\n\t\"./es-us\": 71554,\n\t\"./es-us.js\": 71554,\n\t\"./es.js\": 6341,\n\t\"./et\": 17776,\n\t\"./et.js\": 17776,\n\t\"./eu\": 41927,\n\t\"./eu.js\": 41927,\n\t\"./fa\": 42148,\n\t\"./fa.js\": 42148,\n\t\"./fi\": 25756,\n\t\"./fi.js\": 25756,\n\t\"./fil\": 30754,\n\t\"./fil.js\": 30754,\n\t\"./fo\": 27002,\n\t\"./fo.js\": 27002,\n\t\"./fr\": 35997,\n\t\"./fr-ca\": 61762,\n\t\"./fr-ca.js\": 61762,\n\t\"./fr-ch\": 6185,\n\t\"./fr-ch.js\": 6185,\n\t\"./fr.js\": 35997,\n\t\"./fy\": 95020,\n\t\"./fy.js\": 95020,\n\t\"./ga\": 98493,\n\t\"./ga.js\": 98493,\n\t\"./gd\": 78162,\n\t\"./gd.js\": 78162,\n\t\"./gl\": 11402,\n\t\"./gl.js\": 11402,\n\t\"./gom-deva\": 91987,\n\t\"./gom-deva.js\": 91987,\n\t\"./gom-latn\": 28052,\n\t\"./gom-latn.js\": 28052,\n\t\"./gu\": 76785,\n\t\"./gu.js\": 76785,\n\t\"./he\": 1338,\n\t\"./he.js\": 1338,\n\t\"./hi\": 30894,\n\t\"./hi.js\": 30894,\n\t\"./hr\": 35443,\n\t\"./hr.js\": 35443,\n\t\"./hu\": 31754,\n\t\"./hu.js\": 31754,\n\t\"./hy-am\": 99637,\n\t\"./hy-am.js\": 99637,\n\t\"./id\": 74380,\n\t\"./id.js\": 74380,\n\t\"./is\": 18889,\n\t\"./is.js\": 18889,\n\t\"./it\": 27900,\n\t\"./it-ch\": 16230,\n\t\"./it-ch.js\": 16230,\n\t\"./it.js\": 27900,\n\t\"./ja\": 27544,\n\t\"./ja.js\": 27544,\n\t\"./jv\": 89757,\n\t\"./jv.js\": 89757,\n\t\"./ka\": 13953,\n\t\"./ka.js\": 13953,\n\t\"./kk\": 63607,\n\t\"./kk.js\": 63607,\n\t\"./km\": 97685,\n\t\"./km.js\": 97685,\n\t\"./kn\": 16108,\n\t\"./kn.js\": 16108,\n\t\"./ko\": 82195,\n\t\"./ko.js\": 82195,\n\t\"./ku\": 87821,\n\t\"./ku-kmr\": 47046,\n\t\"./ku-kmr.js\": 47046,\n\t\"./ku.js\": 87821,\n\t\"./ky\": 3145,\n\t\"./ky.js\": 3145,\n\t\"./lb\": 21655,\n\t\"./lb.js\": 21655,\n\t\"./lo\": 3284,\n\t\"./lo.js\": 3284,\n\t\"./lt\": 93509,\n\t\"./lt.js\": 93509,\n\t\"./lv\": 2883,\n\t\"./lv.js\": 2883,\n\t\"./me\": 74559,\n\t\"./me.js\": 74559,\n\t\"./mi\": 87283,\n\t\"./mi.js\": 87283,\n\t\"./mk\": 85877,\n\t\"./mk.js\": 85877,\n\t\"./ml\": 85376,\n\t\"./ml.js\": 85376,\n\t\"./mn\": 83594,\n\t\"./mn.js\": 83594,\n\t\"./mr\": 40718,\n\t\"./mr.js\": 40718,\n\t\"./ms\": 50381,\n\t\"./ms-my\": 84592,\n\t\"./ms-my.js\": 84592,\n\t\"./ms.js\": 50381,\n\t\"./mt\": 57944,\n\t\"./mt.js\": 57944,\n\t\"./my\": 73219,\n\t\"./my.js\": 73219,\n\t\"./nb\": 74677,\n\t\"./nb.js\": 74677,\n\t\"./ne\": 50880,\n\t\"./ne.js\": 50880,\n\t\"./nl\": 66239,\n\t\"./nl-be\": 80097,\n\t\"./nl-be.js\": 80097,\n\t\"./nl.js\": 66239,\n\t\"./nn\": 85057,\n\t\"./nn.js\": 85057,\n\t\"./oc-lnc\": 32513,\n\t\"./oc-lnc.js\": 32513,\n\t\"./pa-in\": 20068,\n\t\"./pa-in.js\": 20068,\n\t\"./pl\": 45993,\n\t\"./pl.js\": 45993,\n\t\"./pt\": 22625,\n\t\"./pt-br\": 58250,\n\t\"./pt-br.js\": 58250,\n\t\"./pt.js\": 22625,\n\t\"./ro\": 67486,\n\t\"./ro.js\": 67486,\n\t\"./ru\": 48828,\n\t\"./ru.js\": 48828,\n\t\"./sd\": 78310,\n\t\"./sd.js\": 78310,\n\t\"./se\": 9029,\n\t\"./se.js\": 9029,\n\t\"./si\": 25297,\n\t\"./si.js\": 25297,\n\t\"./sk\": 71247,\n\t\"./sk.js\": 71247,\n\t\"./sl\": 93742,\n\t\"./sl.js\": 93742,\n\t\"./sq\": 30169,\n\t\"./sq.js\": 30169,\n\t\"./sr\": 95872,\n\t\"./sr-cyrl\": 65023,\n\t\"./sr-cyrl.js\": 65023,\n\t\"./sr.js\": 95872,\n\t\"./ss\": 53527,\n\t\"./ss.js\": 53527,\n\t\"./sv\": 48556,\n\t\"./sv.js\": 48556,\n\t\"./sw\": 37427,\n\t\"./sw.js\": 37427,\n\t\"./ta\": 50898,\n\t\"./ta.js\": 50898,\n\t\"./te\": 51742,\n\t\"./te.js\": 51742,\n\t\"./tet\": 73600,\n\t\"./tet.js\": 73600,\n\t\"./tg\": 49812,\n\t\"./tg.js\": 49812,\n\t\"./th\": 79513,\n\t\"./th.js\": 79513,\n\t\"./tk\": 78464,\n\t\"./tk.js\": 78464,\n\t\"./tl-ph\": 3502,\n\t\"./tl-ph.js\": 3502,\n\t\"./tlh\": 90193,\n\t\"./tlh.js\": 90193,\n\t\"./tr\": 85903,\n\t\"./tr.js\": 85903,\n\t\"./tzl\": 59459,\n\t\"./tzl.js\": 59459,\n\t\"./tzm\": 77820,\n\t\"./tzm-latn\": 41476,\n\t\"./tzm-latn.js\": 41476,\n\t\"./tzm.js\": 77820,\n\t\"./ug-cn\": 47927,\n\t\"./ug-cn.js\": 47927,\n\t\"./uk\": 61997,\n\t\"./uk.js\": 61997,\n\t\"./ur\": 62902,\n\t\"./ur.js\": 62902,\n\t\"./uz\": 4990,\n\t\"./uz-latn\": 35494,\n\t\"./uz-latn.js\": 35494,\n\t\"./uz.js\": 4990,\n\t\"./vi\": 83756,\n\t\"./vi.js\": 83756,\n\t\"./x-pseudo\": 23792,\n\t\"./x-pseudo.js\": 23792,\n\t\"./yo\": 98893,\n\t\"./yo.js\": 98893,\n\t\"./zh-cn\": 61329,\n\t\"./zh-cn.js\": 61329,\n\t\"./zh-hk\": 13005,\n\t\"./zh-hk.js\": 13005,\n\t\"./zh-mo\": 47696,\n\t\"./zh-mo.js\": 47696,\n\t\"./zh-tw\": 85861,\n\t\"./zh-tw.js\": 85861\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 56857;","/* tslint:disable */\n/* eslint-disable */\n/**\n * Orchestrator plugin\n * API to interact with orchestrator plugin\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: RawAxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath ?? basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n\ninterface ServerMap {\n    [key: string]: {\n        url: string,\n        description: string,\n    }[];\n}\n\n/**\n *\n * @export\n */\nexport const operationServerMap: ServerMap = {\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Orchestrator plugin\n * API to interact with orchestrator plugin\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Orchestrator plugin\n * API to interact with orchestrator plugin\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';\n\n/**\n * \n * @export\n * @interface AuthToken\n */\nexport interface AuthToken {\n    /**\n     * The auth token provider name\n     * @type {string}\n     * @memberof AuthToken\n     */\n    'provider': string;\n    /**\n     * The auth token itself retrieved from the above specified provider name\n     * @type {string}\n     * @memberof AuthToken\n     */\n    'token': string;\n}\n/**\n * The ErrorResponse object represents a common structure for handling errors in API responses. It includes essential information about the error, such as the error message and additional optional details.\n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * A string providing a concise and human-readable description of the encountered error. This field is required in the ErrorResponse object.\n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'message': string;\n    /**\n     * An optional field that can contain additional information or context about the error. It provides flexibility for including extra details based on specific error scenarios.\n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'additionalInfo'?: string;\n}\n/**\n * \n * @export\n * @interface ExecuteWorkflowRequestDTO\n */\nexport interface ExecuteWorkflowRequestDTO {\n    /**\n     * \n     * @type {object}\n     * @memberof ExecuteWorkflowRequestDTO\n     */\n    'inputData'?: object;\n    /**\n     * \n     * @type {Array<AuthToken>}\n     * @memberof ExecuteWorkflowRequestDTO\n     */\n    'authTokens'?: Array<AuthToken>;\n    /**\n     * The entity string identifier to execute the workflow for\n     * @type {string}\n     * @memberof ExecuteWorkflowRequestDTO\n     */\n    'targetEntity'?: string;\n}\n/**\n * \n * @export\n * @interface ExecuteWorkflowResponseDTO\n */\nexport interface ExecuteWorkflowResponseDTO {\n    /**\n     * \n     * @type {string}\n     * @memberof ExecuteWorkflowResponseDTO\n     */\n    'id': string;\n}\n/**\n * \n * @export\n * @interface FieldFilter\n */\nexport interface FieldFilter {\n    /**\n     * \n     * @type {string}\n     * @memberof FieldFilter\n     */\n    'field': string;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldFilter\n     */\n    'operator': FieldFilterOperatorEnum;\n    /**\n     * \n     * @type {FieldFilterValue}\n     * @memberof FieldFilter\n     */\n    'value': FieldFilterValue;\n}\n\nexport const FieldFilterOperatorEnum = {\n    Eq: 'EQ',\n    Gt: 'GT',\n    Gte: 'GTE',\n    Lt: 'LT',\n    Lte: 'LTE',\n    In: 'IN',\n    IsNull: 'IS_NULL',\n    Like: 'LIKE',\n    Between: 'BETWEEN'\n} as const;\n\nexport type FieldFilterOperatorEnum = typeof FieldFilterOperatorEnum[keyof typeof FieldFilterOperatorEnum];\n\n/**\n * @type FieldFilterValue\n * @export\n */\nexport type FieldFilterValue = any | boolean | number | string;\n\n/**\n * @type Filter\n * @export\n */\nexport type Filter = FieldFilter | LogicalFilter | NestedFilter;\n\n/**\n * \n * @export\n * @interface GetOverviewsRequestParams\n */\nexport interface GetOverviewsRequestParams {\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof GetOverviewsRequestParams\n     */\n    'paginationInfo'?: PaginationInfoDTO;\n    /**\n     * \n     * @type {SearchRequest}\n     * @memberof GetOverviewsRequestParams\n     */\n    'filters'?: SearchRequest;\n}\n/**\n * \n * @export\n * @interface GetWorkflowsOverviewForEntityRequest\n */\nexport interface GetWorkflowsOverviewForEntityRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkflowsOverviewForEntityRequest\n     */\n    'targetEntity'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GetWorkflowsOverviewForEntityRequest\n     */\n    'annotationWorkflowIds'?: Array<string>;\n}\n/**\n * \n * @export\n * @interface InputSchemaResponseDTO\n */\nexport interface InputSchemaResponseDTO {\n    /**\n     * \n     * @type {object}\n     * @memberof InputSchemaResponseDTO\n     */\n    'inputSchema'?: object;\n    /**\n     * \n     * @type {object}\n     * @memberof InputSchemaResponseDTO\n     */\n    'data'?: object;\n}\n/**\n * \n * @export\n * @interface LogicalFilter\n */\nexport interface LogicalFilter {\n    /**\n     * \n     * @type {string}\n     * @memberof LogicalFilter\n     */\n    'operator': LogicalFilterOperatorEnum;\n    /**\n     * \n     * @type {Array<Filter>}\n     * @memberof LogicalFilter\n     */\n    'filters': Array<Filter>;\n}\n\nexport const LogicalFilterOperatorEnum = {\n    And: 'AND',\n    Or: 'OR',\n    Not: 'NOT'\n} as const;\n\nexport type LogicalFilterOperatorEnum = typeof LogicalFilterOperatorEnum[keyof typeof LogicalFilterOperatorEnum];\n\n/**\n * \n * @export\n * @interface NestedFilter\n */\nexport interface NestedFilter {\n    /**\n     * \n     * @type {string}\n     * @memberof NestedFilter\n     */\n    'field': string;\n    /**\n     * \n     * @type {NestedFilterNested}\n     * @memberof NestedFilter\n     */\n    'nested': NestedFilterNested;\n}\n/**\n * @type NestedFilterNested\n * @export\n */\nexport type NestedFilterNested = FieldFilter | NestedFilter;\n\n/**\n * \n * @export\n * @interface NodeInstanceDTO\n */\nexport interface NodeInstanceDTO {\n    /**\n     * Type name\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    '__typename'?: string;\n    /**\n     * Node instance ID\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'id': string;\n    /**\n     * Node name\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'name'?: string;\n    /**\n     * Node type\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'type'?: string;\n    /**\n     * Date when the node was entered\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'enter'?: string;\n    /**\n     * Date when the node was exited (optional)\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'exit'?: string;\n    /**\n     * Definition ID\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'definitionId'?: string;\n    /**\n     * Node ID\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'nodeId'?: string;\n}\n/**\n * \n * @export\n * @interface PaginationInfoDTO\n */\nexport interface PaginationInfoDTO {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginationInfoDTO\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginationInfoDTO\n     */\n    'offset'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PaginationInfoDTO\n     */\n    'orderDirection'?: PaginationInfoDTOOrderDirectionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof PaginationInfoDTO\n     */\n    'orderBy'?: string;\n}\n\nexport const PaginationInfoDTOOrderDirectionEnum = {\n    Asc: 'ASC',\n    Desc: 'DESC'\n} as const;\n\nexport type PaginationInfoDTOOrderDirectionEnum = typeof PaginationInfoDTOOrderDirectionEnum[keyof typeof PaginationInfoDTOOrderDirectionEnum];\n\n/**\n * \n * @export\n * @interface ProcessInstanceDTO\n */\nexport interface ProcessInstanceDTO {\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'processId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'processName'?: string;\n    /**\n     * \n     * @type {ProcessInstanceStatusDTO}\n     * @memberof ProcessInstanceDTO\n     */\n    'state'?: ProcessInstanceStatusDTO;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'endpoint'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'serviceUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'start'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'end'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'duration'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {WorkflowDataDTO}\n     * @memberof ProcessInstanceDTO\n     */\n    'workflowdata'?: WorkflowDataDTO;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'initiatorEntity'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'targetEntity'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ProcessInstanceDTO\n     */\n    'executionSummary'?: Array<string>;\n    /**\n     * \n     * @type {Array<NodeInstanceDTO>}\n     * @memberof ProcessInstanceDTO\n     */\n    'nodes': Array<NodeInstanceDTO>;\n    /**\n     * \n     * @type {ProcessInstanceErrorDTO}\n     * @memberof ProcessInstanceDTO\n     */\n    'error'?: ProcessInstanceErrorDTO;\n}\n\n\n/**\n * \n * @export\n * @interface ProcessInstanceErrorDTO\n */\nexport interface ProcessInstanceErrorDTO {\n    /**\n     * Type name\n     * @type {string}\n     * @memberof ProcessInstanceErrorDTO\n     */\n    '__typename'?: string;\n    /**\n     * Node definition ID\n     * @type {string}\n     * @memberof ProcessInstanceErrorDTO\n     */\n    'nodeDefinitionId': string;\n    /**\n     * Error message (optional)\n     * @type {string}\n     * @memberof ProcessInstanceErrorDTO\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface ProcessInstanceListResultDTO\n */\nexport interface ProcessInstanceListResultDTO {\n    /**\n     * \n     * @type {Array<ProcessInstanceDTO>}\n     * @memberof ProcessInstanceListResultDTO\n     */\n    'items'?: Array<ProcessInstanceDTO>;\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof ProcessInstanceListResultDTO\n     */\n    'paginationInfo'?: PaginationInfoDTO;\n}\n/**\n * Status of the workflow run\n * @export\n * @enum {string}\n */\n\nexport const ProcessInstanceStatusDTO = {\n    Active: 'ACTIVE',\n    Error: 'ERROR',\n    Completed: 'COMPLETED',\n    Aborted: 'ABORTED',\n    Suspended: 'SUSPENDED',\n    Pending: 'PENDING'\n} as const;\n\nexport type ProcessInstanceStatusDTO = typeof ProcessInstanceStatusDTO[keyof typeof ProcessInstanceStatusDTO];\n\n\n/**\n * \n * @export\n * @interface RetriggerInstanceRequestDTO\n */\nexport interface RetriggerInstanceRequestDTO {\n    /**\n     * \n     * @type {Array<AuthToken>}\n     * @memberof RetriggerInstanceRequestDTO\n     */\n    'authTokens'?: Array<AuthToken>;\n}\n/**\n * \n * @export\n * @interface SearchRequest\n */\nexport interface SearchRequest {\n    /**\n     * \n     * @type {Filter}\n     * @memberof SearchRequest\n     */\n    'filters'?: Filter;\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof SearchRequest\n     */\n    'paginationInfo'?: PaginationInfoDTO;\n}\n/**\n * \n * @export\n * @interface WorkflowDTO\n */\nexport interface WorkflowDTO {\n    /**\n     * Workflow unique identifier\n     * @type {string}\n     * @memberof WorkflowDTO\n     */\n    'id': string;\n    /**\n     * Workflow name\n     * @type {string}\n     * @memberof WorkflowDTO\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {WorkflowFormatDTO}\n     * @memberof WorkflowDTO\n     */\n    'format': WorkflowFormatDTO;\n    /**\n     * Description of the workflow\n     * @type {string}\n     * @memberof WorkflowDTO\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkflowDTO\n     */\n    'annotations'?: Array<string>;\n}\n\n\n/**\n * \n * @export\n * @interface WorkflowDataDTO\n */\nexport interface WorkflowDataDTO {\n    /**\n     * \n     * @type {WorkflowResultDTO}\n     * @memberof WorkflowDataDTO\n     */\n    'result'?: WorkflowResultDTO;\n}\n/**\n * Format of the workflow definition\n * @export\n * @enum {string}\n */\n\nexport const WorkflowFormatDTO = {\n    Yaml: 'yaml',\n    Json: 'json'\n} as const;\n\nexport type WorkflowFormatDTO = typeof WorkflowFormatDTO[keyof typeof WorkflowFormatDTO];\n\n\n/**\n * \n * @export\n * @interface WorkflowListResultDTO\n */\nexport interface WorkflowListResultDTO {\n    /**\n     * \n     * @type {Array<WorkflowDTO>}\n     * @memberof WorkflowListResultDTO\n     */\n    'items': Array<WorkflowDTO>;\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof WorkflowListResultDTO\n     */\n    'paginationInfo': PaginationInfoDTO;\n}\n/**\n * \n * @export\n * @interface WorkflowOverviewDTO\n */\nexport interface WorkflowOverviewDTO {\n    /**\n     * Workflow unique identifier\n     * @type {string}\n     * @memberof WorkflowOverviewDTO\n     */\n    'workflowId': string;\n    /**\n     * Workflow name\n     * @type {string}\n     * @memberof WorkflowOverviewDTO\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {WorkflowFormatDTO}\n     * @memberof WorkflowOverviewDTO\n     */\n    'format': WorkflowFormatDTO;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowOverviewDTO\n     */\n    'lastRunId'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof WorkflowOverviewDTO\n     */\n    'lastTriggeredMs'?: number;\n    /**\n     * \n     * @type {ProcessInstanceStatusDTO}\n     * @memberof WorkflowOverviewDTO\n     */\n    'lastRunStatus'?: ProcessInstanceStatusDTO;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowOverviewDTO\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof WorkflowOverviewDTO\n     */\n    'isAvailable'?: boolean;\n}\n\n\n/**\n * \n * @export\n * @interface WorkflowOverviewListResultDTO\n */\nexport interface WorkflowOverviewListResultDTO {\n    /**\n     * \n     * @type {Array<WorkflowOverviewDTO>}\n     * @memberof WorkflowOverviewListResultDTO\n     */\n    'overviews'?: Array<WorkflowOverviewDTO>;\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof WorkflowOverviewListResultDTO\n     */\n    'paginationInfo'?: PaginationInfoDTO;\n}\n/**\n * \n * @export\n * @interface WorkflowProgressDTO\n */\nexport interface WorkflowProgressDTO {\n    /**\n     * Type name\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    '__typename'?: any;\n    /**\n     * Node instance ID\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'id': any;\n    /**\n     * Node name\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'name'?: any;\n    /**\n     * Node type\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'type'?: any;\n    /**\n     * Date when the node was entered\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'enter'?: any;\n    /**\n     * Date when the node was exited (optional)\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'exit'?: any;\n    /**\n     * Definition ID\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'definitionId'?: any;\n    /**\n     * Node ID\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'nodeId'?: any;\n    /**\n     * \n     * @type {ProcessInstanceStatusDTO}\n     * @memberof WorkflowProgressDTO\n     */\n    'status'?: ProcessInstanceStatusDTO;\n    /**\n     * \n     * @type {ProcessInstanceErrorDTO}\n     * @memberof WorkflowProgressDTO\n     */\n    'error'?: ProcessInstanceErrorDTO;\n}\n\n\n/**\n * Result of a workflow execution\n * @export\n * @interface WorkflowResultDTO\n */\nexport interface WorkflowResultDTO {\n    /**\n     * High-level summary of the current status, free-form text, human readable.\n     * @type {string}\n     * @memberof WorkflowResultDTO\n     */\n    'message'?: string;\n    /**\n     * List of workflows suggested to run next. Items at lower indexes are of higher priority.\n     * @type {Array<WorkflowResultDTONextWorkflowsInner>}\n     * @memberof WorkflowResultDTO\n     */\n    'nextWorkflows'?: Array<WorkflowResultDTONextWorkflowsInner>;\n    /**\n     * Additional structured output of workflow processing. This can contain identifiers of created resources, links to resources, logs or other output.\n     * @type {Array<WorkflowResultDTOOutputsInner>}\n     * @memberof WorkflowResultDTO\n     */\n    'outputs'?: Array<WorkflowResultDTOOutputsInner>;\n}\n/**\n * \n * @export\n * @interface WorkflowResultDTONextWorkflowsInner\n */\nexport interface WorkflowResultDTONextWorkflowsInner {\n    /**\n     * Workflow identifier\n     * @type {string}\n     * @memberof WorkflowResultDTONextWorkflowsInner\n     */\n    'id': string;\n    /**\n     * Human readable title describing the workflow.\n     * @type {string}\n     * @memberof WorkflowResultDTONextWorkflowsInner\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface WorkflowResultDTOOutputsInner\n */\nexport interface WorkflowResultDTOOutputsInner {\n    /**\n     * Unique identifier of the option. Preferably human-readable.\n     * @type {string}\n     * @memberof WorkflowResultDTOOutputsInner\n     */\n    'key': string;\n    /**\n     * \n     * @type {WorkflowResultDTOOutputsInnerValue}\n     * @memberof WorkflowResultDTOOutputsInner\n     */\n    'value': WorkflowResultDTOOutputsInnerValue;\n    /**\n     * More detailed type of the \\'value\\' property. Defaults to \\'text\\'.\n     * @type {string}\n     * @memberof WorkflowResultDTOOutputsInner\n     */\n    'format'?: WorkflowResultDTOOutputsInnerFormatEnum;\n}\n\nexport const WorkflowResultDTOOutputsInnerFormatEnum = {\n    Text: 'text',\n    Number: 'number',\n    Link: 'link',\n    Markdown: 'markdown'\n} as const;\n\nexport type WorkflowResultDTOOutputsInnerFormatEnum = typeof WorkflowResultDTOOutputsInnerFormatEnum[keyof typeof WorkflowResultDTOOutputsInnerFormatEnum];\n\n/**\n * Free form value of the option.\n * @export\n * @interface WorkflowResultDTOOutputsInnerValue\n */\nexport interface WorkflowResultDTOOutputsInnerValue {\n}\n/**\n * \n * @export\n * @interface WorkflowRunStatusDTO\n */\nexport interface WorkflowRunStatusDTO {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowRunStatusDTO\n     */\n    'key'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowRunStatusDTO\n     */\n    'value'?: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Aborts a workflow instance identified by the provided instanceId.\n         * @summary Abort a workflow instance\n         * @param {string} instanceId The identifier of the workflow instance to abort.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        abortWorkflow: async (instanceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'instanceId' is not null or undefined\n            assertParamExists('abortWorkflow', 'instanceId', instanceId)\n            const localVarPath = `/v2/workflows/instances/{instanceId}/abort`\n                .replace(`{${\"instanceId\"}}`, encodeURIComponent(String(instanceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Execute a workflow\n         * @summary Execute a workflow\n         * @param {string} workflowId ID of the workflow to execute\n         * @param {ExecuteWorkflowRequestDTO} executeWorkflowRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        executeWorkflow: async (workflowId: string, executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('executeWorkflow', 'workflowId', workflowId)\n            // verify required parameter 'executeWorkflowRequestDTO' is not null or undefined\n            assertParamExists('executeWorkflow', 'executeWorkflowRequestDTO', executeWorkflowRequestDTO)\n            const localVarPath = `/v2/workflows/{workflowId}/execute`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(executeWorkflowRequestDTO, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a workflow execution/run (instance)\n         * @summary Get Workflow Instance by ID\n         * @param {string} instanceId ID of the workflow instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInstanceById: async (instanceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'instanceId' is not null or undefined\n            assertParamExists('getInstanceById', 'instanceId', instanceId)\n            const localVarPath = `/v2/workflows/instances/{instanceId}`\n                .replace(`{${\"instanceId\"}}`, encodeURIComponent(String(instanceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an array of workflow executions (instances)\n         * @summary Get instances\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInstances: async (searchRequest?: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/workflows/instances`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflow input schema. It defines the input fields of the workflow\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {string} [instanceId] ID of instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowInputSchemaById: async (workflowId: string, instanceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowInputSchemaById', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/inputSchema`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (instanceId !== undefined) {\n                localVarQueryParameter['instanceId'] = instanceId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an array of workflow executions (instances) for the given workflow\n         * @summary Get instances for a specific workflow\n         * @param {string} workflowId ID of the workflow\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving workflow instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowInstances: async (workflowId: string, searchRequest?: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowInstances', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/instances`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {string} workflowId Unique identifier of the workflow\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowOverviewById: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowOverviewById', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/overview`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflow\\'s definition\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowSourceById: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowSourceById', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/source`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve array with the status of all instances\n         * @summary Get workflow status list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowStatuses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/workflows/instances/statuses`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {SearchRequest} [searchRequest] Pagination and filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowsOverview: async (searchRequest?: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/workflows/overview`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {GetWorkflowsOverviewForEntityRequest} [getWorkflowsOverviewForEntityRequest] Target entity reference and annotation workflow ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowsOverviewForEntity: async (getWorkflowsOverviewForEntityRequest?: GetWorkflowsOverviewForEntityRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/workflows/overview/entity`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getWorkflowsOverviewForEntityRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns true if the workflow service is up for the given workflow ID.\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pingWorkflowServiceById: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('pingWorkflowServiceById', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/pingWorkflowService`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrigger an instance\n         * @summary Retrigger an instance\n         * @param {string} workflowId ID of the workflow\n         * @param {string} instanceId ID of the instance to retrigger\n         * @param {RetriggerInstanceRequestDTO} retriggerInstanceRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retriggerInstance: async (workflowId: string, instanceId: string, retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('retriggerInstance', 'workflowId', workflowId)\n            // verify required parameter 'instanceId' is not null or undefined\n            assertParamExists('retriggerInstance', 'instanceId', instanceId)\n            // verify required parameter 'retriggerInstanceRequestDTO' is not null or undefined\n            assertParamExists('retriggerInstance', 'retriggerInstanceRequestDTO', retriggerInstanceRequestDTO)\n            const localVarPath = `/v2/workflows/{workflowId}/{instanceId}/retrigger`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)))\n                .replace(`{${\"instanceId\"}}`, encodeURIComponent(String(instanceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(retriggerInstanceRequestDTO, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Aborts a workflow instance identified by the provided instanceId.\n         * @summary Abort a workflow instance\n         * @param {string} instanceId The identifier of the workflow instance to abort.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async abortWorkflow(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.abortWorkflow(instanceId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.abortWorkflow']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Execute a workflow\n         * @summary Execute a workflow\n         * @param {string} workflowId ID of the workflow to execute\n         * @param {ExecuteWorkflowRequestDTO} executeWorkflowRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async executeWorkflow(workflowId: string, executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecuteWorkflowResponseDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.executeWorkflow(workflowId, executeWorkflowRequestDTO, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.executeWorkflow']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a workflow execution/run (instance)\n         * @summary Get Workflow Instance by ID\n         * @param {string} instanceId ID of the workflow instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getInstanceById(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstanceDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstanceById(instanceId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getInstanceById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an array of workflow executions (instances)\n         * @summary Get instances\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getInstances(searchRequest?: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstanceListResultDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances(searchRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getInstances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the workflow input schema. It defines the input fields of the workflow\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {string} [instanceId] ID of instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowInputSchemaById(workflowId: string, instanceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InputSchemaResponseDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowInputSchemaById(workflowId, instanceId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowInputSchemaById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an array of workflow executions (instances) for the given workflow\n         * @summary Get instances for a specific workflow\n         * @param {string} workflowId ID of the workflow\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving workflow instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowInstances(workflowId: string, searchRequest?: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstanceListResultDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowInstances(workflowId, searchRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowInstances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {string} workflowId Unique identifier of the workflow\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowOverviewById(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowOverviewDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowOverviewById(workflowId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowOverviewById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the workflow\\'s definition\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowSourceById(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowSourceById(workflowId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowSourceById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve array with the status of all instances\n         * @summary Get workflow status list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowStatuses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowRunStatusDTO>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowStatuses(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowStatuses']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {SearchRequest} [searchRequest] Pagination and filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowsOverview(searchRequest?: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowOverviewListResultDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowsOverview(searchRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowsOverview']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {GetWorkflowsOverviewForEntityRequest} [getWorkflowsOverviewForEntityRequest] Target entity reference and annotation workflow ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest?: GetWorkflowsOverviewForEntityRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowOverviewListResultDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowsOverviewForEntity']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns true if the workflow service is up for the given workflow ID.\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pingWorkflowServiceById(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.pingWorkflowServiceById(workflowId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.pingWorkflowServiceById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrigger an instance\n         * @summary Retrigger an instance\n         * @param {string} workflowId ID of the workflow\n         * @param {string} instanceId ID of the instance to retrigger\n         * @param {RetriggerInstanceRequestDTO} retriggerInstanceRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retriggerInstance(workflowId: string, instanceId: string, retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retriggerInstance(workflowId, instanceId, retriggerInstanceRequestDTO, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.retriggerInstance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * Aborts a workflow instance identified by the provided instanceId.\n         * @summary Abort a workflow instance\n         * @param {string} instanceId The identifier of the workflow instance to abort.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        abortWorkflow(instanceId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.abortWorkflow(instanceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Execute a workflow\n         * @summary Execute a workflow\n         * @param {string} workflowId ID of the workflow to execute\n         * @param {ExecuteWorkflowRequestDTO} executeWorkflowRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        executeWorkflow(workflowId: string, executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO, options?: any): AxiosPromise<ExecuteWorkflowResponseDTO> {\n            return localVarFp.executeWorkflow(workflowId, executeWorkflowRequestDTO, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a workflow execution/run (instance)\n         * @summary Get Workflow Instance by ID\n         * @param {string} instanceId ID of the workflow instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInstanceById(instanceId: string, options?: any): AxiosPromise<ProcessInstanceDTO> {\n            return localVarFp.getInstanceById(instanceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an array of workflow executions (instances)\n         * @summary Get instances\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInstances(searchRequest?: SearchRequest, options?: any): AxiosPromise<ProcessInstanceListResultDTO> {\n            return localVarFp.getInstances(searchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflow input schema. It defines the input fields of the workflow\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {string} [instanceId] ID of instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowInputSchemaById(workflowId: string, instanceId?: string, options?: any): AxiosPromise<InputSchemaResponseDTO> {\n            return localVarFp.getWorkflowInputSchemaById(workflowId, instanceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an array of workflow executions (instances) for the given workflow\n         * @summary Get instances for a specific workflow\n         * @param {string} workflowId ID of the workflow\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving workflow instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowInstances(workflowId: string, searchRequest?: SearchRequest, options?: any): AxiosPromise<ProcessInstanceListResultDTO> {\n            return localVarFp.getWorkflowInstances(workflowId, searchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {string} workflowId Unique identifier of the workflow\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowOverviewById(workflowId: string, options?: any): AxiosPromise<WorkflowOverviewDTO> {\n            return localVarFp.getWorkflowOverviewById(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflow\\'s definition\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowSourceById(workflowId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.getWorkflowSourceById(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve array with the status of all instances\n         * @summary Get workflow status list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowStatuses(options?: any): AxiosPromise<Array<WorkflowRunStatusDTO>> {\n            return localVarFp.getWorkflowStatuses(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {SearchRequest} [searchRequest] Pagination and filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowsOverview(searchRequest?: SearchRequest, options?: any): AxiosPromise<WorkflowOverviewListResultDTO> {\n            return localVarFp.getWorkflowsOverview(searchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {GetWorkflowsOverviewForEntityRequest} [getWorkflowsOverviewForEntityRequest] Target entity reference and annotation workflow ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest?: GetWorkflowsOverviewForEntityRequest, options?: any): AxiosPromise<WorkflowOverviewListResultDTO> {\n            return localVarFp.getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns true if the workflow service is up for the given workflow ID.\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pingWorkflowServiceById(workflowId: string, options?: any): AxiosPromise<boolean> {\n            return localVarFp.pingWorkflowServiceById(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrigger an instance\n         * @summary Retrigger an instance\n         * @param {string} workflowId ID of the workflow\n         * @param {string} instanceId ID of the instance to retrigger\n         * @param {RetriggerInstanceRequestDTO} retriggerInstanceRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retriggerInstance(workflowId: string, instanceId: string, retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO, options?: any): AxiosPromise<object> {\n            return localVarFp.retriggerInstance(workflowId, instanceId, retriggerInstanceRequestDTO, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Aborts a workflow instance identified by the provided instanceId.\n     * @summary Abort a workflow instance\n     * @param {string} instanceId The identifier of the workflow instance to abort.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public abortWorkflow(instanceId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).abortWorkflow(instanceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Execute a workflow\n     * @summary Execute a workflow\n     * @param {string} workflowId ID of the workflow to execute\n     * @param {ExecuteWorkflowRequestDTO} executeWorkflowRequestDTO \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public executeWorkflow(workflowId: string, executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).executeWorkflow(workflowId, executeWorkflowRequestDTO, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a workflow execution/run (instance)\n     * @summary Get Workflow Instance by ID\n     * @param {string} instanceId ID of the workflow instance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getInstanceById(instanceId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getInstanceById(instanceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an array of workflow executions (instances)\n     * @summary Get instances\n     * @param {SearchRequest} [searchRequest] Parameters for retrieving instances\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getInstances(searchRequest?: SearchRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getInstances(searchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflow input schema. It defines the input fields of the workflow\n     * @param {string} workflowId ID of the workflow to fetch\n     * @param {string} [instanceId] ID of instance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowInputSchemaById(workflowId: string, instanceId?: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowInputSchemaById(workflowId, instanceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an array of workflow executions (instances) for the given workflow\n     * @summary Get instances for a specific workflow\n     * @param {string} workflowId ID of the workflow\n     * @param {SearchRequest} [searchRequest] Parameters for retrieving workflow instances\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowInstances(workflowId: string, searchRequest?: SearchRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowInstances(workflowId, searchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the key fields of the workflow including data on the last run instance\n     * @param {string} workflowId Unique identifier of the workflow\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowOverviewById(workflowId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowOverviewById(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflow\\'s definition\n     * @param {string} workflowId ID of the workflow to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowSourceById(workflowId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowSourceById(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve array with the status of all instances\n     * @summary Get workflow status list\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowStatuses(options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowStatuses(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the key fields of the workflow including data on the last run instance\n     * @param {SearchRequest} [searchRequest] Pagination and filters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowsOverview(searchRequest?: SearchRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowsOverview(searchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the key fields of the workflow including data on the last run instance\n     * @param {GetWorkflowsOverviewForEntityRequest} [getWorkflowsOverviewForEntityRequest] Target entity reference and annotation workflow ids\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest?: GetWorkflowsOverviewForEntityRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns true if the workflow service is up for the given workflow ID.\n     * @param {string} workflowId ID of the workflow to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public pingWorkflowServiceById(workflowId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).pingWorkflowServiceById(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrigger an instance\n     * @summary Retrigger an instance\n     * @param {string} workflowId ID of the workflow\n     * @param {string} instanceId ID of the instance to retrigger\n     * @param {RetriggerInstanceRequestDTO} retriggerInstanceRequestDTO \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public retriggerInstance(workflowId: string, instanceId: string, retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).retriggerInstance(workflowId, instanceId, retriggerInstanceRequestDTO, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createPermission } from '@backstage/plugin-permission-common';\n\nexport const orchestratorWorkflowPermission = createPermission({\n  name: 'orchestrator.workflow',\n  attributes: {\n    action: 'read',\n  },\n});\n\nexport const orchestratorWorkflowSpecificPermission = (workflowId: string) =>\n  createPermission({\n    name: `orchestrator.workflow.${workflowId}`,\n    attributes: {\n      action: 'read',\n    },\n  });\n\nexport const orchestratorWorkflowUsePermission = createPermission({\n  name: 'orchestrator.workflow.use',\n  attributes: {\n    action: 'update',\n  },\n});\n\nexport const orchestratorWorkflowUseSpecificPermission = (workflowId: string) =>\n  createPermission({\n    name: `orchestrator.workflow.use.${workflowId}`,\n    attributes: {\n      action: 'update',\n    },\n  });\n\nexport const orchestratorAdminViewPermission = createPermission({\n  name: 'orchestrator.workflowAdminView',\n  attributes: {\n    action: 'read',\n  },\n});\n\nexport const orchestratorInstanceAdminViewPermission = createPermission({\n  name: 'orchestrator.instanceAdminView',\n  attributes: {\n    action: 'read',\n  },\n});\n\nexport const orchestratorPermissions = [\n  orchestratorWorkflowPermission,\n  orchestratorWorkflowUsePermission,\n  orchestratorAdminViewPermission,\n  orchestratorInstanceAdminViewPermission,\n];\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type Capitalized<S extends string> = Capitalize<Lowercase<S>>;\n\nexport const capitalize = <S extends string>(text: S): Capitalized<S> =>\n  (text[0].toLocaleUpperCase('en-US') +\n    text.slice(1).toLocaleLowerCase('en-US')) as Capitalized<S>;\n\nexport const ellipsis = <S extends string>(text: S, prefixLength: number = 8) =>\n  `${text.slice(0, prefixLength)}...`;\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApiRef } from '@backstage/core-plugin-api';\nimport type { JsonObject } from '@backstage/types';\n\nimport { AxiosResponse } from 'axios';\n\nimport {\n  AuthToken,\n  ExecuteWorkflowResponseDTO,\n  Filter,\n  InputSchemaResponseDTO,\n  PaginationInfoDTO,\n  ProcessInstanceDTO,\n  ProcessInstanceListResultDTO,\n  WorkflowOverviewDTO,\n  WorkflowOverviewListResultDTO,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nexport interface OrchestratorApi {\n  abortWorkflowInstance(instanceId: string): Promise<AxiosResponse<string>>;\n\n  retriggerInstance(\n    workflowId: string,\n    instanceId: string,\n    authTokens?: AuthToken[],\n  ): Promise<AxiosResponse<object>>;\n\n  executeWorkflow(args: {\n    workflowId: string;\n    parameters: JsonObject;\n    authTokens: AuthToken[];\n    businessKey?: string;\n    targetEntity?: string;\n  }): Promise<AxiosResponse<ExecuteWorkflowResponseDTO>>;\n\n  getWorkflowSource(workflowId: string): Promise<AxiosResponse<string>>;\n\n  getInstance(instanceId: string): Promise<AxiosResponse<ProcessInstanceDTO>>;\n\n  getWorkflowDataInputSchema(\n    workflowId: string,\n    instanceId?: string,\n  ): Promise<AxiosResponse<InputSchemaResponseDTO>>;\n\n  getWorkflowOverview(\n    workflowId: string,\n  ): Promise<AxiosResponse<WorkflowOverviewDTO>>;\n\n  pingWorkflowService(workflowId: string): Promise<AxiosResponse<boolean>>;\n\n  listWorkflowOverviews(\n    paginationInfo?: PaginationInfoDTO,\n    filters?: Filter,\n  ): Promise<AxiosResponse<WorkflowOverviewListResultDTO>>;\n\n  getWorkflowsOverviewForEntity(\n    targetEntity: string,\n    annotationWorkflowIds: string[],\n  ): Promise<AxiosResponse<WorkflowOverviewListResultDTO>>;\n\n  listInstances(\n    paginationInfo?: PaginationInfoDTO,\n    filters?: Filter,\n  ): Promise<AxiosResponse<ProcessInstanceListResultDTO>>;\n}\n\nexport const orchestratorApiRef = createApiRef<OrchestratorApi>({\n  id: 'plugin.orchestrator.api',\n});\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useAsync } from 'react-use';\n\nimport { Progress, ResponseErrorPanel } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\nimport { InputSchemaResponseDTO } from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { orchestratorApiRef } from '../../api/api';\nimport { FormattedWorkflowOverview } from '../../dataFormatters/WorkflowOverviewFormatter';\nimport { useTranslation } from '../../hooks/useTranslation';\nimport { useIsDarkMode } from '../../utils/isDarkMode';\nimport { InfoDialog } from '../ui/InfoDialog';\nimport { JsonCodeBlock } from '../ui/JsonCodeBlock';\n\nconst InputSchemaDialogContent = ({\n  inputSchema,\n  loading,\n  error,\n}: {\n  inputSchema: InputSchemaResponseDTO | undefined;\n  loading: boolean;\n  error: Error | undefined;\n}) => {\n  const { t } = useTranslation();\n  const isDarkMode = useIsDarkMode();\n\n  if (loading) return <Progress />;\n  if (error)\n    return (\n      <div style={{ width: '500px' }}>\n        <ResponseErrorPanel error={error} />\n      </div>\n    );\n\n  return (\n    <Box>\n      {inputSchema?.inputSchema === undefined ? (\n        <Typography>{t('messages.noInputSchemaWorkflow')}</Typography>\n      ) : (\n        <JsonCodeBlock\n          isDarkMode={isDarkMode}\n          maxHeight={400}\n          value={inputSchema?.inputSchema}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport const InputSchemaDialog: React.FC<{\n  rowData: FormattedWorkflowOverview;\n  isInputSchemaDialogOpen: boolean;\n  toggleInputSchemaDialog: () => void;\n}> = ({ rowData, isInputSchemaDialogOpen, toggleInputSchemaDialog }) => {\n  const orchestratorApi = useApi(orchestratorApiRef);\n\n  const {\n    value,\n    loading,\n    error: responseError,\n  } = useAsync(async (): Promise<InputSchemaResponseDTO> => {\n    const res = await orchestratorApi.getWorkflowDataInputSchema(rowData.id);\n\n    return res.data;\n  }, [orchestratorApi, rowData]);\n\n  return (\n    <InfoDialog\n      title={`${rowData.name} input schema`}\n      onClose={toggleInputSchemaDialog}\n      open={isInputSchemaDialogOpen}\n      dialogActions={\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleInputSchemaDialog}\n        >\n          Close\n        </Button>\n      }\n      children={\n        <InputSchemaDialogContent\n          inputSchema={value}\n          loading={loading}\n          error={responseError}\n        />\n      }\n      wideDialog\n    />\n  );\n};\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Link, TableColumn, TableProps } from '@backstage/core-components';\nimport { useRouteRef, useRouteRefParams } from '@backstage/core-plugin-api';\nimport { usePermission } from '@backstage/plugin-permission-react';\n\n// Workaround since we use the newer @mui library but Backstage still uses deprecated @material-ui\nimport { SvgIcon } from '@material-ui/core';\nimport DeveloperModeOutlinedMui from '@mui/icons-material/DeveloperModeOutlined';\nimport FormatListBulletedMui from '@mui/icons-material/FormatListBulleted';\nimport PlayArrowMui from '@mui/icons-material/PlayArrow';\n\nimport {\n  orchestratorWorkflowPermission,\n  orchestratorWorkflowSpecificPermission,\n  orchestratorWorkflowUsePermission,\n  orchestratorWorkflowUseSpecificPermission,\n  ProcessInstanceStatusDTO,\n  WorkflowOverviewDTO,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport WorkflowOverviewFormatter, {\n  FormattedWorkflowOverview,\n} from '../../dataFormatters/WorkflowOverviewFormatter';\nimport { usePermissionArray } from '../../hooks/usePermissionArray';\nimport { useTranslation } from '../../hooks/useTranslation';\nimport {\n  entityInstanceRouteRef,\n  entityWorkflowRouteRef,\n  executeWorkflowRouteRef,\n  workflowInstanceRouteRef,\n  workflowRouteRef,\n  workflowRunsRouteRef,\n} from '../../routes';\nimport OverrideBackstageTable from '../ui/OverrideBackstageTable';\nimport { WorkflowInstanceStatusIndicator } from '../ui/WorkflowInstanceStatusIndicator';\nimport { WorkflowStatus } from '../ui/WorkflowStatus';\nimport { InputSchemaDialog } from './InputSchemaDialog';\n\nexport interface WorkflowsTableProps {\n  items: WorkflowOverviewDTO[];\n}\n\n// Workaround\ntype SvgIconComponent = typeof SvgIcon;\nconst PlayArrow = PlayArrowMui as unknown as SvgIconComponent;\nconst FormatListBulleted = FormatListBulletedMui as unknown as SvgIconComponent;\nconst DeveloperModeOutlined =\n  DeveloperModeOutlinedMui as unknown as SvgIconComponent;\n\nconst usePermittedToUseBatch = (\n  items: WorkflowOverviewDTO[],\n): { allowed: boolean[] } => {\n  const generic = usePermission({\n    permission: orchestratorWorkflowUsePermission,\n  });\n\n  let workflowIds: string[] = [];\n  if (!generic.loading && !generic.allowed) {\n    // This will effectively skip the requests if the generic permission grants the access\n    workflowIds = items.map(i => i.workflowId);\n  }\n\n  const specific = usePermissionArray(\n    workflowIds.map(workflowId =>\n      orchestratorWorkflowUseSpecificPermission(workflowId),\n    ),\n  );\n  return {\n    allowed: items.map((_, idx) => generic.allowed || specific.allowed[idx]),\n  };\n};\n\nconst usePermittedToViewBatch = (\n  items: WorkflowOverviewDTO[],\n): { allowed: boolean[] } => {\n  const generic = usePermission({\n    permission: orchestratorWorkflowPermission,\n  });\n\n  let workflowIds: string[] = [];\n  if (!generic.loading && !generic.allowed) {\n    // This will effectively skip the subsequent \"specific\" requests if the generic permission is granted\n    workflowIds = items.map(i => i.workflowId);\n  }\n\n  const specific = usePermissionArray(\n    workflowIds.map(workflowId =>\n      orchestratorWorkflowSpecificPermission(workflowId),\n    ),\n  );\n\n  return {\n    allowed: items.map((_, idx) => generic.allowed || specific.allowed[idx]),\n  };\n};\n\nexport const WorkflowsTable = ({ items }: WorkflowsTableProps) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const definitionLink = useRouteRef(workflowRouteRef);\n  const definitionRunsLink = useRouteRef(workflowRunsRouteRef);\n  const executeWorkflowLink = useRouteRef(executeWorkflowRouteRef);\n  const entityWorkflowLink = useRouteRef(entityWorkflowRouteRef);\n  const entityInstanceLink = useRouteRef(entityInstanceRouteRef);\n  const workflowInstanceLink = useRouteRef(workflowInstanceRouteRef);\n\n  const { kind, name, namespace } = useRouteRefParams(entityInstanceRouteRef);\n  let entityRef: string | undefined = undefined;\n  if (kind && namespace && name) {\n    entityRef = `${kind}:${namespace}/${name}`;\n  }\n\n  const [data, setData] = useState<FormattedWorkflowOverview[]>([]);\n\n  const { allowed: permittedToUse } = usePermittedToUseBatch(items);\n  const { allowed: permittedToView } = usePermittedToViewBatch(items);\n\n  const [isInputSchemaDialogOpen, setIsInputSchemaDialogOpen] = useState(false);\n  const [dataForDialog, setDataForDialog] = useState<\n    FormattedWorkflowOverview | undefined\n  >(undefined);\n\n  const toggleInputSchemaDialog = useCallback(() => {\n    setIsInputSchemaDialogOpen(prev => !prev);\n  }, []);\n\n  const handleViewInputSchema = useCallback(\n    (rowData: FormattedWorkflowOverview) => {\n      setDataForDialog(rowData);\n      toggleInputSchemaDialog();\n    },\n    [toggleInputSchemaDialog],\n  );\n  const initialState = useMemo(\n    () => items.map(WorkflowOverviewFormatter.format),\n    [items],\n  );\n\n  useEffect(() => {\n    setData(initialState);\n  }, [initialState]);\n\n  const handleViewVariables = useCallback(\n    (rowData: FormattedWorkflowOverview) => {\n      navigate(definitionRunsLink({ workflowId: rowData.id }));\n    },\n    [definitionRunsLink, navigate],\n  );\n\n  const handleExecute = useCallback(\n    (rowData: FormattedWorkflowOverview) => {\n      if (entityRef) {\n        navigate(\n          `${executeWorkflowLink({ workflowId: rowData.id })}?targetEntity=${entityRef}`,\n        );\n      } else {\n        navigate(executeWorkflowLink({ workflowId: rowData.id }));\n      }\n    },\n    [executeWorkflowLink, navigate, entityRef],\n  );\n\n  const canExecuteWorkflow = useCallback(\n    (workflowId: string) => {\n      const idx = items?.findIndex(i => workflowId === i.workflowId);\n      if (idx < 0) {\n        return false;\n      }\n      return permittedToUse[idx];\n    },\n    [items, permittedToUse],\n  );\n\n  const canViewWorkflow = useCallback(\n    (workflowId: string) => {\n      const idx = items?.findIndex(i => workflowId === i.workflowId);\n      if (idx < 0) {\n        return false;\n      }\n      return permittedToView[idx];\n    },\n    [items, permittedToView],\n  );\n\n  const canViewInstance = useCallback(\n    (workflowId: string) => {\n      const idx = items?.findIndex(i => workflowId === i.workflowId);\n      if (idx < 0) {\n        return false;\n      }\n      return permittedToView[idx];\n    },\n    [items, permittedToView],\n  );\n\n  const actions = useMemo(() => {\n    const actionItems: TableProps<FormattedWorkflowOverview>['actions'] = [\n      rowData => ({\n        icon: PlayArrow,\n        tooltip: t('table.actions.run'),\n        disabled: !canExecuteWorkflow(rowData.id),\n        onClick: () => handleExecute(rowData),\n      }),\n    ];\n\n    if (!entityRef)\n      actionItems.push(\n        rowData => ({\n          icon: FormatListBulleted,\n          tooltip: t('table.actions.viewRuns'),\n          disabled: !canViewWorkflow(rowData.id),\n          onClick: () => handleViewVariables(rowData),\n        }),\n        rowData => ({\n          icon: DeveloperModeOutlined,\n          tooltip: t('table.actions.viewInputSchema'),\n          disabled: !canViewWorkflow(rowData.id),\n          onClick: () => handleViewInputSchema(rowData),\n        }),\n      );\n\n    return actionItems;\n  }, [\n    t,\n    canExecuteWorkflow,\n    canViewWorkflow,\n    handleExecute,\n    handleViewVariables,\n    handleViewInputSchema,\n    entityRef,\n  ]);\n\n  const entityLink = useCallback(\n    (workflowId: string) => {\n      return entityRef\n        ? entityWorkflowLink({\n            namespace,\n            kind,\n            name,\n            workflowId,\n          })\n        : definitionLink({\n            workflowId,\n          });\n    },\n    [entityRef, entityWorkflowLink, definitionLink, kind, name, namespace],\n  );\n\n  const instanceLink = useCallback(\n    (rowData: FormattedWorkflowOverview) => {\n      if (canViewInstance(rowData.id)) {\n        return entityRef\n          ? entityInstanceLink({\n              namespace,\n              kind,\n              name,\n              workflowId: rowData.id,\n              instanceId: rowData.lastRunId,\n            })\n          : workflowInstanceLink({ instanceId: rowData.lastRunId });\n      }\n      return undefined;\n    },\n    [\n      canViewInstance,\n      entityInstanceLink,\n      workflowInstanceLink,\n      entityRef,\n      namespace,\n      kind,\n      name,\n    ],\n  );\n\n  const columns = useMemo<TableColumn<FormattedWorkflowOverview>[]>(\n    () => [\n      {\n        title: t('table.headers.name'),\n        field: 'name',\n        render: rowData =>\n          canViewWorkflow(rowData.id) ? (\n            <Link to={entityLink(rowData.id)}>{rowData.name}</Link>\n          ) : (\n            rowData.name\n          ),\n      },\n      {\n        title: t('table.headers.workflowStatus'),\n        field: 'availability',\n        render: rowData => (\n          <WorkflowStatus availability={rowData.availability} />\n        ),\n      },\n      {\n        title: t('table.headers.lastRun'),\n        field: 'lastTriggered',\n      },\n      {\n        title: t('table.headers.lastRunStatus'),\n        field: 'lastRunStatus',\n        render: rowData => {\n          const originalRawData = items.find(\n            item => item.workflowId === rowData.id,\n          );\n          return (\n            <WorkflowInstanceStatusIndicator\n              status={\n                originalRawData?.lastRunStatus as ProcessInstanceStatusDTO\n              }\n              instanceLink={instanceLink(rowData)}\n            />\n          );\n        },\n      },\n      {\n        title: t('table.headers.description'),\n        field: 'description',\n        minWidth: '25vw',\n      },\n    ],\n    [t, canViewWorkflow, entityLink, items, instanceLink],\n  );\n\n  const options = useMemo<TableProps['options']>(\n    () => ({\n      search: true,\n      paging: false,\n      actionsColumnIndex: columns.length,\n    }),\n    [columns.length],\n  );\n\n  // TODO: use backend pagination only if the generic orchestratorWorkflowPermission is in place\n  // use FE pagination otherwise (it means when specific permissions are used)\n  return (\n    <>\n      {dataForDialog && (\n        <InputSchemaDialog\n          rowData={dataForDialog}\n          isInputSchemaDialogOpen={isInputSchemaDialogOpen}\n          toggleInputSchemaDialog={toggleInputSchemaDialog}\n        />\n      )}\n      <OverrideBackstageTable<FormattedWorkflowOverview>\n        title={t('table.title.workflows')}\n        options={options}\n        columns={columns}\n        data={data}\n        actions={actions}\n      />\n    </>\n  );\n};\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useMemo } from 'react';\n\nimport {\n  Content,\n  Progress,\n  ResponseErrorPanel,\n} from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\n\nimport Grid from '@mui/material/Grid';\n\nimport { WorkflowOverviewDTO } from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { orchestratorApiRef } from '../../api';\nimport usePolling from '../../hooks/usePolling';\nimport { WorkflowsTable } from './WorkflowsTable';\n\nexport const WorkflowsTabContent = ({\n  workflowsArray,\n  targetEntity,\n}: {\n  workflowsArray?: string[];\n  targetEntity?: string;\n}) => {\n  const orchestratorApi = useApi(orchestratorApiRef);\n\n  const fetchWorkflowOverviews = useCallback(async () => {\n    // TODO: pass pagination details only if the user is granted the generic orchestratorWorkflowPermission\n    // FE pagination will be used otherwise\n    let overviewsResp;\n    if (workflowsArray && targetEntity) {\n      overviewsResp = await orchestratorApi.getWorkflowsOverviewForEntity(\n        targetEntity,\n        workflowsArray,\n      );\n    } else {\n      overviewsResp = await orchestratorApi.listWorkflowOverviews();\n    }\n    return overviewsResp.data.overviews;\n  }, [orchestratorApi, workflowsArray, targetEntity]);\n\n  const { loading, error, value } = usePolling<\n    WorkflowOverviewDTO[] | undefined\n  >(fetchWorkflowOverviews);\n\n  const isReady = useMemo(() => !loading && !error, [loading, error]);\n\n  return (\n    <Content noPadding>\n      {loading ? <Progress /> : null}\n      {error ? <ResponseErrorPanel error={error} /> : null}\n      {isReady ? (\n        <Grid container direction=\"column\">\n          <Grid item xs={12}>\n            <WorkflowsTable items={value ?? []} />\n          </Grid>\n        </Grid>\n      ) : null}\n    </Content>\n  );\n};\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { forwardRef, ForwardRefRenderFunction, ReactNode } from 'react';\n\nimport Close from '@mui/icons-material/Close';\nimport Box from '@mui/material/Box';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport { makeStyles } from 'tss-react/mui';\n\nexport type InfoDialogProps = {\n  title: ReactNode;\n  titleIcon?: ReactNode;\n  open: boolean;\n  onClose?: () => void;\n  dialogActions?: ReactNode;\n  children?: ReactNode;\n  wideDialog?: boolean;\n};\n\nexport type ParentComponentRef = HTMLDivElement;\n\nconst useStyles = makeStyles()(theme => ({\n  dialogTitle: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  titleContent: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n  },\n  titleText: {\n    lineHeight: 1,\n    margin: 0,\n  },\n  closeBtn: {\n    flexShrink: 0,\n  },\n  dialogActions: {\n    justifyContent: 'flex-start',\n    paddingLeft: theme.spacing(3),\n    paddingTop: 0,\n    paddingBottom: theme.spacing(4),\n  },\n  dialogContent: {\n    '& > div': {\n      backgroundColor: 'transparent',\n    },\n  },\n}));\n\nexport const RefForwardingInfoDialog: ForwardRefRenderFunction<\n  ParentComponentRef,\n  InfoDialogProps\n> = (props, forwardedRef): JSX.Element | null => {\n  const {\n    title,\n    titleIcon,\n    open = false,\n    onClose,\n    children,\n    dialogActions,\n    wideDialog,\n  } = props;\n  const { classes } = useStyles();\n\n  return (\n    <Dialog\n      onClose={_ => onClose}\n      open={open}\n      ref={forwardedRef}\n      maxWidth={wideDialog ? 'xl' : 'sm'}\n      PaperProps={{\n        style: { minWidth: wideDialog ? 500 : 400 },\n      }}\n    >\n      <DialogTitle>\n        <Box className={classes.dialogTitle}>\n          <Box className={classes.titleContent}>\n            {titleIcon}\n            <Typography variant=\"h4\" className={classes.titleText}>\n              <b>{title}</b>\n            </Typography>\n          </Box>\n\n          <IconButton\n            className={classes.closeBtn}\n            aria-label=\"close\"\n            onClick={onClose}\n          >\n            <Close />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        {children}\n      </DialogContent>\n      <DialogActions className={classes.dialogActions}>\n        {dialogActions}\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport const InfoDialog = forwardRef(RefForwardingInfoDialog);\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useState } from 'react';\n\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Tooltip from '@mui/material/Tooltip';\nimport { makeStyles } from 'tss-react/mui';\n\nconst useStyles = makeStyles<{ isDarkMode: boolean; maxHeight?: number }>()(\n  (theme, { isDarkMode, maxHeight }) => ({\n    root: {\n      position: 'relative',\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n      backgroundColor: isDarkMode ? '#151515' : '#F0F0F0',\n      maxWidth: 600,\n      marginTop: '0.6rem',\n    },\n    iconButton: {\n      position: 'absolute',\n      top: 8,\n      right: maxHeight ? 24 : 8,\n    },\n    copyIcon: {\n      color: isDarkMode ? '#B0B0B0' : '#4D4D4D',\n    },\n    pre: {\n      margin: theme.spacing(1),\n      fontFamily: 'Monospace',\n      fontSize: '0.875rem',\n      whiteSpace: 'pre-wrap',\n      wordBreak: 'break-word',\n      color: isDarkMode ? '#B0B0B0' : '#4D4D4D',\n      maxHeight: maxHeight || 'none',\n      overflowY: maxHeight ? 'auto' : 'visible',\n      overflowX: 'hidden',\n    },\n  }),\n);\n\nexport const JsonCodeBlock = ({\n  value,\n  isDarkMode,\n  maxHeight,\n}: {\n  value: object;\n  isDarkMode: boolean;\n  maxHeight?: number;\n}) => {\n  const jsonString = JSON.stringify(value, null, 2);\n  const [copied, setCopied] = useState(false);\n  const { classes } = useStyles({ isDarkMode, maxHeight });\n\n  const handleCopy = async () => {\n    await window.navigator.clipboard.writeText(jsonString);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <Paper elevation={1} className={classes.root}>\n      <Box className={classes.iconButton}>\n        <Tooltip title={copied ? 'Copied!' : 'Copy'}>\n          <IconButton size=\"large\" onClick={handleCopy}>\n            <ContentCopyIcon fontSize=\"small\" className={classes.copyIcon} />\n          </IconButton>\n        </Tooltip>\n      </Box>\n      <Box component=\"pre\" className={classes.pre}>\n        {jsonString}\n      </Box>\n    </Paper>\n  );\n};\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Table as BackstageTable,\n  TableProps,\n} from '@backstage/core-components';\n\nimport { makeStyles } from 'tss-react/mui';\n\n// Workaround by issue created from overriding the tab theme in the backstage-showcase to add a gray background to disabled tabs.\n// This is achieved by overriding the global Mui-disabled class, which results in the actions column header background turning gray.\n// See https://github.com/janus-idp/backstage-showcase/blob/main/packages/app/src/themes/componentOverrides.ts#L59\n\nconst useStyles = makeStyles()(() => ({\n  orchestratorTable: {\n    '& .Mui-disabled': {\n      backgroundColor: 'transparent',\n    },\n  },\n  orchestratorTableWithOutline: {\n    '& .Mui-disabled': {\n      backgroundColor: 'transparent',\n    },\n    '& [class^=MuiPaper]': {\n      outline: 'unset',\n    },\n  },\n}));\n/*\n// source: https://github.com/backstage/backstage/blob/master/packages/core-components/report-alpha.api.md\nconst tableLocalization: Localization = {\n  body: {\n    emptyDataSourceMessage: 'No records to display',\n    filterRow: {\n      filterPlaceHolder: 'All results',\n      filterTooltip: 'Filters',\n    },\n  },\n  header: {\n    actions: 'Actions',\n  },\n  toolbar: {\n    searchPlaceholder: 'Filter',\n    clearSearchAriaLabel: 'Clear all',\n  },\n  pagination: {\n    firstTooltip: 'First Page2',\n    previousTooltip: 'Previous Page2',\n    nextTooltip: 'Next Page2',\n    lastTooltip: 'Last Page2',\n    labelDisplayedRows: '{from}-{to} of {count}2',\n    labelRowsSelect: 'rows2',\n  },\n};\n*/\nconst OverrideBackstageTable = <T extends object>(\n  props: TableProps<T> & { removeOutline?: boolean },\n) => {\n  const removeOutline = props.removeOutline ?? false;\n  const { classes } = useStyles();\n  return (\n    <div\n      className={\n        removeOutline\n          ? classes.orchestratorTable\n          : classes.orchestratorTableWithOutline\n      }\n    >\n      <BackstageTable\n        {...props}\n        // localization={tableLocalization}\n        options={{ ...props.options, thirdSortClick: false }}\n      />\n    </div>\n  );\n};\n\nexport default OverrideBackstageTable;\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Link } from '@backstage/core-components';\n\nimport { Box } from '@material-ui/core';\nimport CheckCircleOutlined from '@mui/icons-material/CheckCircleOutlined';\nimport ErrorOutlineOutlined from '@mui/icons-material/ErrorOutlineOutlined';\nimport HourglassEmptyOutlined from '@mui/icons-material/HourglassEmptyOutlined';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport {\n  capitalize,\n  ProcessInstanceStatusDTO,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { VALUE_UNAVAILABLE } from '../../constants';\nimport { useTranslation } from '../../hooks/useTranslation';\nimport { useWorkflowInstanceStateColors } from '../../hooks/useWorkflowInstanceStatusColors';\n\nexport const WorkflowInstanceStatusIndicator = ({\n  status,\n  instanceLink,\n}: {\n  status?: ProcessInstanceStatusDTO;\n  instanceLink?: string;\n}) => {\n  const { t } = useTranslation();\n  const iconColor = useWorkflowInstanceStateColors(status);\n\n  if (!status) {\n    return VALUE_UNAVAILABLE;\n  }\n\n  let icon: React.ReactNode;\n  let title: string = '';\n  switch (status) {\n    case ProcessInstanceStatusDTO.Active:\n      icon = <CircularProgress size=\"1.15rem\" className={iconColor} />;\n      title = t('table.status.running');\n      break;\n    case ProcessInstanceStatusDTO.Completed:\n      icon = <CheckCircleOutlined className={iconColor} />;\n      title = t('table.status.completed');\n      break;\n    case ProcessInstanceStatusDTO.Suspended:\n      icon = <b className={iconColor}>--</b>;\n      title = t('tooltips.suspended');\n      break;\n    case ProcessInstanceStatusDTO.Aborted:\n      icon = <b className={iconColor}>--</b>;\n      title = t('table.status.aborted');\n      break;\n    case ProcessInstanceStatusDTO.Error:\n      icon = <ErrorOutlineOutlined className={iconColor} />;\n      title = t('table.status.failed');\n      break;\n    case ProcessInstanceStatusDTO.Pending:\n      icon = <HourglassEmptyOutlined className={iconColor} />;\n      title = t('table.status.pending');\n      break;\n    default:\n      icon = VALUE_UNAVAILABLE;\n      break;\n  }\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      {icon}\n      &nbsp;{' '}\n      {instanceLink ? (\n        <Link to={instanceLink}>{capitalize(title)}</Link>\n      ) : (\n        <>{capitalize(title)}</>\n      )}\n    </Box>\n  );\n};\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CheckCircleOutlined from '@mui/icons-material/CheckCircleOutlined';\nimport WarningAmberOutlined from '@mui/icons-material/WarningAmberOutlined';\nimport Box from '@mui/material/Box';\nimport Tooltip from '@mui/material/Tooltip';\nimport { makeStyles } from 'tss-react/mui';\n\nimport { AVAILABLE, UNAVAILABLE } from '../../constants';\nimport { useTranslation } from '../../hooks/useTranslation';\n\nconst useStyles = makeStyles()(theme => ({\n  warning: {\n    color: theme.palette.warning.main,\n  },\n  success: {\n    color: theme.palette.success.main,\n  },\n}));\n\nexport const WorkflowStatus = ({\n  availability,\n}: {\n  availability: string | undefined | boolean;\n}) => {\n  const { t } = useTranslation();\n  const { classes } = useStyles();\n  if (availability === AVAILABLE || availability === true) {\n    return (\n      <Box display=\"flex\" alignItems=\"center\">\n        <CheckCircleOutlined className={classes.success} />\n        &nbsp; {t('workflow.status.available')}\n      </Box>\n    );\n  } else if (availability === UNAVAILABLE || availability === false) {\n    return (\n      <Tooltip title={t('tooltips.workflowDown')}>\n        <Box display=\"flex\" alignItems=\"center\">\n          <WarningAmberOutlined className={classes.warning} />\n          &nbsp; {t('workflow.status.unavailable')}\n        </Box>\n      </Tooltip>\n    );\n  }\n\n  return <>{availability}</>;\n};\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const VALUE_UNAVAILABLE = '---' as const;\nexport const AVAILABLE = 'Available';\nexport const UNAVAILABLE = 'Unavailable';\n\n// Translation keys for workflow status\nexport const WORKFLOW_STATUS_KEYS = {\n  available: 'workflow.status.available',\n  unavailable: 'workflow.status.unavailable',\n} as const;\nexport const SHORT_REFRESH_INTERVAL = 5000;\nexport const LONG_REFRESH_INTERVAL = 15000;\nexport const DEFAULT_TABLE_PAGE_SIZE = 20;\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport moment from 'moment';\n\nimport {\n  WorkflowFormatDTO,\n  WorkflowOverviewDTO,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { AVAILABLE, UNAVAILABLE, VALUE_UNAVAILABLE } from '../constants';\nimport DataFormatter from './DataFormatter';\n\nexport interface FormattedWorkflowOverview {\n  readonly id: string;\n  readonly name: string;\n  readonly lastTriggered: string;\n  readonly lastRunStatus: string;\n  readonly lastRunId: string;\n  readonly description: string;\n  readonly format: WorkflowFormatDTO;\n  readonly availability?: string;\n}\n\nconst formatIsAvailable = (availability: boolean | undefined) => {\n  if (availability === true) return AVAILABLE;\n  else if (availability === false) return UNAVAILABLE;\n  return VALUE_UNAVAILABLE;\n};\n\nconst formatLastRunStatus = (lastRunStatus: string | undefined) => {\n  if (lastRunStatus === 'ERROR') return 'FAILED';\n  else if (lastRunStatus === 'ACTIVE') return 'RUNNING';\n  else if (lastRunStatus) return lastRunStatus?.toString();\n  return VALUE_UNAVAILABLE;\n};\n\nconst WorkflowOverviewFormatter: DataFormatter<\n  WorkflowOverviewDTO,\n  FormattedWorkflowOverview\n> = {\n  format: (data: WorkflowOverviewDTO): FormattedWorkflowOverview => {\n    return {\n      id: data.workflowId,\n      name: data.name ?? VALUE_UNAVAILABLE,\n      lastTriggered: data.lastTriggeredMs\n        ? moment(data.lastTriggeredMs).toDate().toLocaleString()\n        : VALUE_UNAVAILABLE,\n      lastRunStatus: formatLastRunStatus(data.lastRunStatus),\n      lastRunId: data.lastRunId ?? VALUE_UNAVAILABLE,\n      description: data.description ?? VALUE_UNAVAILABLE,\n      format: data.format,\n      availability: formatIsAvailable(data.isAvailable),\n    };\n  },\n};\n\nexport default WorkflowOverviewFormatter;\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useApi } from '@backstage/core-plugin-api';\nimport {\n  AuthorizeResult,\n  Permission,\n  ResourcePermission,\n} from '@backstage/plugin-permission-common';\nimport {\n  AsyncPermissionResult,\n  permissionApiRef,\n} from '@backstage/plugin-permission-react';\n\nimport useSWR from 'swr';\n\ntype InputType = Exclude<Permission, ResourcePermission>;\n\nexport type AsyncPermissionBatchResult = Omit<\n  AsyncPermissionResult,\n  'allowed'\n> & {\n  allowed: boolean[];\n};\n\n/**\n * Like usePermission() from '@backstage/plugin-permission-react' but for multiple permissions at once.\n *\n * @param permissions\n * @returns Object similar to AsyncPermissionResult but the \"allowed\" is a boolean array.\n */\n\nexport const usePermissionArray = (\n  permissions: InputType[],\n): AsyncPermissionBatchResult => {\n  const permissionApi = useApi(permissionApiRef);\n\n  const { data, error } = useSWR(permissions, async (args: InputType[]) => {\n    const result = await Promise.all(\n      args.map(permission => permissionApi.authorize({ permission })),\n    );\n\n    return result;\n  });\n\n  if (error) {\n    return { error, loading: false, allowed: permissions.map(_ => false) };\n  }\n  if (data === undefined) {\n    return { loading: true, allowed: permissions.map(_ => false) };\n  }\n\n  return {\n    loading: false,\n    allowed: data.map(d => d.result === AuthorizeResult.ALLOW),\n  };\n};\n\n/**\n * Handy function returning AsyncPermissionResult which is ALLOWED if at least one of the permission is allowed.\n *\n * @param permissions\n */\nexport const usePermissionArrayDecision = (\n  permissions: InputType[],\n): AsyncPermissionResult => {\n  const result = usePermissionArray(permissions);\n\n  return {\n    loading: result.loading,\n    error: result.error,\n    // Allow if any permission grants it\n    allowed: !!result.allowed.find(d => d),\n  };\n};\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport useSwr, { useSWRConfig } from 'swr';\nimport * as uuid from 'uuid';\n\nimport { LONG_REFRESH_INTERVAL } from '../constants';\n\nconst usePolling = <T>(\n  fn: () => Promise<T>,\n  delayMs: number = LONG_REFRESH_INTERVAL,\n  continueRefresh?: (value: T | undefined) => boolean,\n  maxErrorRetryCount: number = 3,\n) => {\n  const config = useSWRConfig();\n\n  const prevFn = useRef(fn);\n  const uniqueKey = useMemo<string>(() => {\n    return uuid.v4();\n  }, []);\n\n  const [error, setError] = useState();\n  const isInitalLoad = useRef(true);\n\n  const { data, isLoading } = useSwr<T>(uniqueKey, fn, {\n    refreshInterval: (value_: T | undefined) => {\n      return !continueRefresh || continueRefresh(value_) ? delayMs : 0;\n    },\n    shouldRetryOnError: true,\n    onErrorRetry: (curError, _key, _config, revalidate, { retryCount }) => {\n      // requires custom behavior, retryErrorCount option doesn't support hiding the error before reaching the maximum\n      if (isInitalLoad.current || retryCount >= maxErrorRetryCount) {\n        setError(curError);\n      } else {\n        setTimeout(() => revalidate({ retryCount }), delayMs);\n      }\n    },\n    onSuccess: () => {\n      isInitalLoad.current = false;\n    },\n    revalidateOnFocus: false, // click on sort will result in two calls to backend if not disabled\n  });\n\n  const restart = useCallback(\n    () => config.mutate(uniqueKey),\n    [config, uniqueKey],\n  );\n\n  useEffect(() => {\n    if (prevFn.current !== fn) {\n      restart();\n      prevFn.current = fn;\n    }\n  }, [fn, restart]);\n\n  useEffect(() => {\n    // clean cache after unmount, no need to store the data globally\n    return () => config.cache.delete(uniqueKey);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    value: data,\n    error,\n    loading: isLoading,\n    restart,\n  };\n};\n\nexport default usePolling;\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TranslationFunction,\n  useTranslationRef,\n} from '@backstage/core-plugin-api/alpha';\n\nimport { orchestratorTranslationRef } from '../translations';\n\nexport const useTranslation = (): {\n  t: TranslationFunction<typeof orchestratorTranslationRef.T>;\n} => useTranslationRef(orchestratorTranslationRef);\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { makeStyles } from 'tss-react/mui';\n\nimport { ProcessInstanceStatusDTO } from '@redhat/backstage-plugin-orchestrator-common';\n\nconst useStyles = makeStyles()(\n  theme =>\n    ({\n      [ProcessInstanceStatusDTO.Active]: {\n        color: theme.palette.grey[500],\n      },\n      [ProcessInstanceStatusDTO.Completed]: {\n        color: theme.palette.success.main,\n      },\n      [ProcessInstanceStatusDTO.Suspended]: {\n        color: theme.palette.grey[500],\n      },\n      [ProcessInstanceStatusDTO.Aborted]: {\n        color: theme.palette.grey[500],\n      },\n      [ProcessInstanceStatusDTO.Error]: {\n        color: theme.palette.error.main,\n      },\n      [ProcessInstanceStatusDTO.Pending]: {\n        color: theme.palette.grey[500],\n      },\n    }) as const,\n);\n\nexport const useWorkflowInstanceStateColors = (\n  value?: ProcessInstanceStatusDTO,\n) => {\n  const { classes } = useStyles();\n  return value ? classes[value] : undefined;\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Orchestrator plugin\n * API to interact with orchestrator plugin\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    serverIndex?: number;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * override server index\n     *\n     * @type {number}\n     * @memberof Configuration\n     */\n    serverIndex?: number;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.serverIndex = param.serverIndex;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiscoveryApi, IdentityApi } from '@backstage/core-plugin-api';\nimport type { JsonObject } from '@backstage/types';\n\nimport axios, {\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n  isAxiosError,\n  RawAxiosRequestHeaders,\n} from 'axios';\n\nimport {\n  AuthToken,\n  Configuration,\n  DefaultApi,\n  ExecuteWorkflowRequestDTO,\n  ExecuteWorkflowResponseDTO,\n  Filter,\n  InputSchemaResponseDTO,\n  PaginationInfoDTO,\n  ProcessInstanceDTO,\n  ProcessInstanceListResultDTO,\n  RetriggerInstanceRequestDTO,\n  WorkflowOverviewDTO,\n  WorkflowOverviewListResultDTO,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { OrchestratorApi } from './api';\n\nconst getError = (err: unknown): Error => {\n  if (\n    isAxiosError<{ error: { message: string; name: string } }>(err) &&\n    err.response?.data?.error?.message\n  ) {\n    const error = new Error(err.response?.data?.error?.message);\n    error.name = err.response?.data?.error?.name || 'Error';\n    return error;\n  }\n  return err as Error;\n};\n\nexport interface OrchestratorClientOptions {\n  discoveryApi: DiscoveryApi;\n  identityApi: IdentityApi;\n  axiosInstance?: AxiosInstance;\n}\nexport class OrchestratorClient implements OrchestratorApi {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly identityApi: IdentityApi;\n  private axiosInstance?: AxiosInstance;\n\n  private baseUrl: string | null = null;\n  constructor(options: OrchestratorClientOptions) {\n    this.discoveryApi = options.discoveryApi;\n    this.identityApi = options.identityApi;\n    this.axiosInstance = options.axiosInstance;\n  }\n\n  async getDefaultAPI(): Promise<DefaultApi> {\n    const baseUrl = await this.getBaseUrl();\n    const { token: idToken } = await this.identityApi.getCredentials();\n\n    // Fixme: Following makes mocking of global axios complicated in the tests, ideally there should be just one axios instance:\n    this.axiosInstance =\n      this.axiosInstance ||\n      axios.create({\n        baseURL: baseUrl,\n        headers: {\n          ...(idToken && { Authorization: `Bearer ${idToken}` }),\n        },\n        withCredentials: true,\n      });\n    const config = new Configuration({\n      basePath: baseUrl,\n    });\n\n    return new DefaultApi(config, baseUrl, this.axiosInstance);\n  }\n  private async getBaseUrl(): Promise<string> {\n    if (!this.baseUrl) {\n      this.baseUrl = await this.discoveryApi.getBaseUrl('orchestrator');\n    }\n\n    return this.baseUrl;\n  }\n\n  async executeWorkflow(args: {\n    workflowId: string;\n    parameters: JsonObject;\n    authTokens: AuthToken[];\n    targetEntity?: string;\n  }): Promise<AxiosResponse<ExecuteWorkflowResponseDTO>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n\n    const requestBody: ExecuteWorkflowRequestDTO = {\n      inputData: args.parameters,\n      authTokens: args.authTokens,\n      targetEntity: args.targetEntity,\n    };\n    try {\n      return await defaultApi.executeWorkflow(\n        args.workflowId,\n        requestBody,\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  async abortWorkflowInstance(\n    instanceId: string,\n  ): Promise<AxiosResponse<string>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    try {\n      return await defaultApi.abortWorkflow(instanceId, reqConfigOption);\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  async retriggerInstance(\n    workflowId: string,\n    instanceId: string,\n    authTokens?: AuthToken[],\n  ): Promise<AxiosResponse<object>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n\n    const requestBody: RetriggerInstanceRequestDTO = {};\n    if (authTokens) {\n      requestBody.authTokens = authTokens;\n    }\n\n    try {\n      return await defaultApi.retriggerInstance(\n        workflowId,\n        instanceId,\n        requestBody,\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  async getWorkflowSource(workflowId: string): Promise<AxiosResponse<string>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    reqConfigOption.responseType = 'text';\n    try {\n      return await defaultApi.getWorkflowSourceById(\n        workflowId,\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  async listWorkflowOverviews(\n    paginationInfo?: PaginationInfoDTO,\n    filters?: Filter,\n  ): Promise<AxiosResponse<WorkflowOverviewListResultDTO>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    try {\n      return await defaultApi.getWorkflowsOverview(\n        { paginationInfo, filters },\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n  async getWorkflowsOverviewForEntity(\n    targetEntity: string,\n    annotationWorkflowIds: string[],\n  ): Promise<AxiosResponse<WorkflowOverviewListResultDTO>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    try {\n      return await defaultApi.getWorkflowsOverviewForEntity(\n        { targetEntity, annotationWorkflowIds },\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  async listInstances(\n    paginationInfo?: PaginationInfoDTO,\n    filters?: Filter,\n  ): Promise<AxiosResponse<ProcessInstanceListResultDTO>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    try {\n      return await defaultApi.getInstances(\n        { paginationInfo, filters: filters },\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  async getInstance(\n    instanceId: string,\n  ): Promise<AxiosResponse<ProcessInstanceDTO>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    try {\n      return await defaultApi.getInstanceById(instanceId, reqConfigOption);\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  async getWorkflowDataInputSchema(\n    workflowId: string,\n    instanceId?: string,\n  ): Promise<AxiosResponse<InputSchemaResponseDTO>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    try {\n      return await defaultApi.getWorkflowInputSchemaById(\n        workflowId,\n        instanceId,\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n  async pingWorkflowService(\n    workflowId: string,\n  ): Promise<AxiosResponse<boolean>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    try {\n      return await defaultApi.pingWorkflowServiceById(\n        workflowId,\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  async getWorkflowOverview(\n    workflowId: string,\n  ): Promise<AxiosResponse<WorkflowOverviewDTO>> {\n    const defaultApi = await this.getDefaultAPI();\n    const reqConfigOption: AxiosRequestConfig =\n      await this.getDefaultReqConfig();\n    try {\n      return await defaultApi.getWorkflowOverviewById(\n        workflowId,\n        reqConfigOption,\n      );\n    } catch (err) {\n      throw getError(err);\n    }\n  }\n\n  // getDefaultReqConfig is a convenience wrapper that includes authentication and other necessary headers\n  private async getDefaultReqConfig(\n    additionalHeaders?: RawAxiosRequestHeaders,\n  ): Promise<AxiosRequestConfig> {\n    const idToken = await this.identityApi.getCredentials();\n    const reqConfigOption: AxiosRequestConfig = {\n      baseURL: await this.getBaseUrl(),\n      headers: {\n        Authorization: `Bearer ${idToken.token}`,\n        ...additionalHeaders,\n      },\n    };\n    return reqConfigOption;\n  }\n}\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createApiFactory,\n  createPlugin,\n  createRoutableExtension,\n  discoveryApiRef,\n  identityApiRef,\n} from '@backstage/core-plugin-api';\n\nimport { orchestratorApiRef, OrchestratorClient } from './api';\nimport { orchestratorRootRouteRef } from './routes';\n\n/**\n * @public\n * Orchestrator Plugin\n */\nexport const orchestratorPlugin = createPlugin({\n  id: 'orchestrator',\n  apis: [\n    createApiFactory({\n      api: orchestratorApiRef,\n      deps: {\n        discoveryApi: discoveryApiRef,\n        identityApi: identityApiRef,\n      },\n      factory({ discoveryApi, identityApi }) {\n        return new OrchestratorClient({\n          discoveryApi,\n          identityApi,\n        });\n      },\n    }),\n  ],\n  routes: {\n    root: orchestratorRootRouteRef,\n  },\n});\n\n/**\n * @public\n * Orchestrator Page\n */\nexport const OrchestratorPage = orchestratorPlugin.provide(\n  createRoutableExtension({\n    name: 'OrchestratorPage',\n    component: () => import('./components/Router').then(m => m.Router),\n    mountPoint: orchestratorRootRouteRef,\n  }),\n);\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\n/**\n * @public\n * Orchestrator icon\n */\n\nconst OrchestratorIcon = (props: SvgIconProps) => (\n  <SvgIcon viewBox=\"7 7 24 24\" {...props}>\n    <path\n      className=\"uuid-af1cdb32-2f72-425e-8e77-dc25423c4aa2\"\n      d=\"M28,1H10C5.0294,1,1,5.0294,1,10v18c0,4.9706,4.0294,9,9,9h18c4.9706,0,9-4.0294,9-9V10c0-4.9706-4.0294-9-9-9ZM35.75,28c0,4.2734-3.4766,7.75-7.75,7.75H10c-4.2734,0-7.75-3.4766-7.75-7.75V10c0-4.2734,3.4766-7.75,7.75-7.75h18c4.2734,0,7.75,3.4766,7.75,7.75v18Z\"\n    />\n    <path\n      className=\"uuid-af1cdb32-2f72-425e-8e77-dc25423c4aa2\"\n      d=\"M14.625,14v-4c0-.3452-.2803-.625-.625-.625h-4c-.3447,0-.625.2798-.625.625v4c0,.3452.2803.625.625.625h4c.3447,0,.625-.2798.625-.625ZM13.375,13.375h-2.75v-2.75h2.75v2.75Z\"\n    />\n    <path\n      className=\"uuid-af1cdb32-2f72-425e-8e77-dc25423c4aa2\"\n      d=\"M27,22.6196c.1699,0,.3301-.0596.4395-.1797.1201-.1104.1904-.2803.1904-.4399,0-.0801-.0205-.1602-.0498-.2402-.0303-.0698-.0801-.1401-.1406-.1997-.2295-.2305-.6494-.2305-.8799,0-.1201.1099-.1797.2695-.1797.4399,0,.1699.0596.3296.1797.4399.1201.1201.2803.1797.4404.1797Z\"\n    />\n    <path\n      className=\"uuid-af1cdb32-2f72-425e-8e77-dc25423c4aa2\"\n      d=\"M25,22.6196c.1699,0,.3301-.0596.4395-.1797.1201-.1104.1904-.2803.1904-.4399,0-.0801-.0205-.1602-.0498-.2402-.0303-.0698-.0801-.1401-.1406-.1997-.0498-.0601-.1299-.1104-.1992-.1401-.2305-.0903-.5107-.04-.6807.1401-.0596.0596-.1094.1299-.1396.1997-.0303.0801-.0498.1602-.0498.2402,0,.1597.0693.3296.1895.4399.1104.1201.2803.1797.4404.1797Z\"\n    />\n    <path\n      className=\"uuid-af1cdb32-2f72-425e-8e77-dc25423c4aa2\"\n      d=\"M29,19.375h-8c-.3447,0-.625.2798-.625.625v8c0,.3452.2803.625.625.625h8c.3447,0,.625-.2798.625-.625v-8c0-.3452-.2803-.625-.625-.625ZM28.375,27.375h-6.75v-6.75h6.75v6.75Z\"\n    />\n    <path\n      className=\"uuid-af1cdb32-2f72-425e-8e77-dc25423c4aa2\"\n      d=\"M16,12.625h5.5c1.0342,0,1.875.8413,1.875,1.875s-.8408,1.875-1.875,1.875h-2.875v-.375c0-.2529-.1523-.4805-.3857-.5776-.2314-.0952-.502-.0439-.6816.1357l-1,1c-.0129.0129-.0175.03-.0289.0438-.0412.0488-.0806.0994-.1054.1592-.0276.067-.039.1382-.0424.2096-.0005.0103-.0059.0189-.0059.0293,0,.0104.0055.0192.006.0295.0034.0713.0147.1423.0423.2094.0249.0601.0644.111.1058.16.0114.0135.0158.0304.0285.0431l1,1c.1201.1196.2803.1831.4424.1831.0811,0,.1621-.0156.2393-.0474.2334-.0972.3857-.3247.3857-.5776v-.375h2.875c1.7227,0,3.125-1.4019,3.125-3.125s-1.4023-3.125-3.125-3.125h-5.5c-.3447,0-.625.2798-.625.625s.2803.625.625.625Z\"\n    />\n    <path\n      className=\"uuid-af1cdb32-2f72-425e-8e77-dc25423c4aa2\"\n      d=\"M17.4424,20.5581c-.2441-.2441-.6406-.2441-.8848,0-.2432.2441-.2432.6396,0,.8838l.9334.9331h-3.491c-1.3096,0-2.375-1.0654-2.375-2.375s1.0654-2.375,2.375-2.375h1c.3447,0,.625-.2798.625-.625s-.2803-.625-.625-.625h-1c-1.999,0-3.625,1.626-3.625,3.625s1.626,3.625,3.625,3.625h3.491l-.9334.9331c-.2432.2441-.2432.6396,0,.8838.1221.1221.2822.1831.4424.1831s.3203-.061.4424-.1831l2-2c.2432-.2441.2432-.6396,0-.8838l-2-2Z\"\n    />\n  </SvgIcon>\n);\nexport default OrchestratorIcon;\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useEntity } from '@backstage/plugin-catalog-react';\n\nimport { WorkflowsTabContent } from '../OrchestratorPage/WorkflowsTabContent';\n\nexport const IsOrchestratorCatalogTabAvailable = () => {\n  const { entity } = useEntity();\n  return Boolean(entity.metadata.annotations?.['orchestrator.io/workflows']);\n};\n\nexport const OrchestratorCatalogTab = () => {\n  const { entity } = useEntity();\n\n  const rawAnnotation =\n    entity.metadata.annotations?.['orchestrator.io/workflows'];\n  let annotatedWorkflowIds: string[] = [];\n\n  try {\n    const parsed = rawAnnotation && JSON.parse(rawAnnotation);\n    if (Array.isArray(parsed)) {\n      annotatedWorkflowIds = parsed;\n    }\n  } catch {\n    annotatedWorkflowIds = [];\n  }\n\n  const kind = entity.kind;\n  const namespace = entity.metadata.namespace ?? 'default';\n  const name = entity.metadata.name;\n  const targetEntity = `${kind}:${namespace}/${name}`.toLocaleLowerCase();\n\n  return (\n    <WorkflowsTabContent\n      workflowsArray={annotatedWorkflowIds}\n      targetEntity={targetEntity}\n    />\n  );\n};\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createTranslationResource } from '@backstage/core-plugin-api/alpha';\n\nimport { orchestratorTranslationRef } from './ref';\n\nexport const orchestratorTranslations = createTranslationResource({\n  ref: orchestratorTranslationRef,\n  translations: {\n    de: () => import('./de'),\n    fr: () => import('./fr'),\n    it: () => import('./it'),\n    es: () => import('./es'),\n  },\n});\n\nexport { orchestratorTranslationRef };\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createRouteRef, createSubRouteRef } from '@backstage/core-plugin-api';\n\n// orchestrator page\nexport const orchestratorRootRouteRef = createRouteRef({\n  id: 'orchestrator',\n});\n\n// orchestrator page\nexport const workflowInstancesRouteRef = createSubRouteRef({\n  id: 'orchestrator/instances',\n  parent: orchestratorRootRouteRef,\n  path: '/instances',\n});\n\n// instance page\nexport const workflowInstanceRouteRef = createSubRouteRef({\n  id: 'orchestrator/instances',\n  parent: orchestratorRootRouteRef,\n  path: '/instances/:instanceId',\n});\n\n// workflow page - details tab\nexport const workflowRouteRef = createSubRouteRef({\n  id: 'orchestrator/workflows',\n  parent: orchestratorRootRouteRef,\n  path: '/workflows/:workflowId',\n});\n\n// workflow page - instances tab\nexport const workflowRunsRoutePath = 'runs';\nexport const workflowRunsRouteRef = createSubRouteRef({\n  id: 'orchestrator/workflows',\n  parent: orchestratorRootRouteRef,\n  path: `/workflows/:workflowId/${workflowRunsRoutePath}`,\n});\n\n// execute workflow page\nexport const executeWorkflowRouteRef = createSubRouteRef({\n  id: 'orchestrator/workflows/execute',\n  parent: orchestratorRootRouteRef,\n  path: '/workflows/:workflowId/execute',\n});\n\n// entity workflow page\nexport const entityWorkflowRouteRef = createSubRouteRef({\n  id: 'orchestrator.workflow',\n  parent: orchestratorRootRouteRef,\n  path: '/entity/:namespace/:kind/:name/:workflowId',\n});\n\n// entity instance page\nexport const entityInstanceRouteRef = createSubRouteRef({\n  id: 'orchestrator.workflowInstance',\n  parent: orchestratorRootRouteRef,\n  path: '/entity/:namespace/:kind/:name/:workflowId/:instanceId',\n});\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createTranslationRef } from '@backstage/core-plugin-api/alpha';\n\n// CRITICAL: Export messages separately for testing\nexport const orchestratorMessages = {\n  page: {\n    title: 'Workflow Orchestrator',\n    tabs: {\n      workflows: 'Workflows',\n      allRuns: 'All runs',\n      workflowDetails: 'Workflow details',\n      workflowRuns: 'Workflow runs',\n    },\n  },\n  table: {\n    title: {\n      workflows: 'Workflows',\n      allRuns: 'All runs ({{count}})',\n      allWorkflowRuns: 'Workflow runs ({{count}})',\n    },\n    headers: {\n      name: 'Name',\n      runStatus: 'Run Status',\n      started: 'Started',\n      status: 'Status',\n      workflowStatus: 'Workflow Status',\n      duration: 'Duration',\n      description: 'Description',\n      lastRun: 'Last run',\n      lastRunStatus: 'Last run status',\n      workflowName: 'Workflow name',\n    },\n    actions: {\n      run: 'Run',\n      viewRuns: 'View runs',\n      viewInputSchema: 'View input schema',\n    },\n    status: {\n      running: 'Running',\n      failed: 'Failed',\n      completed: 'Completed',\n      aborted: 'Aborted',\n      pending: 'Pending',\n      active: 'Active',\n    },\n    filters: {\n      status: 'Status',\n      started: 'Started',\n      startedOptions: {\n        today: 'Today',\n        yesterday: 'Yesterday',\n        last7days: 'Last 7 days',\n        thisMonth: 'This month',\n      },\n    },\n  },\n  workflow: {\n    details: 'Details',\n    definition: 'Workflow definition',\n    progress: 'Workflow progress',\n    status: {\n      available: 'Available',\n      unavailable: 'Unavailable',\n    },\n    fields: {\n      workflow: 'Workflow',\n      workflowStatus: 'Workflow Status',\n      runStatus: 'Run status',\n      duration: 'Duration',\n      description: 'Description',\n      started: 'Started',\n      workflowId: 'Run ID',\n      workflowIdCopied: 'Run ID copied to clipboard',\n    },\n    errors: {\n      retriggerFailed: 'Retrigger failed: {{reason}}',\n      abortFailed: 'Abort failed: Run has already been completed.',\n      abortFailedWithReason: 'Abort failed: {{reason}}',\n      failedToLoadDetails: 'Failed to load details for the workflow ID: {{id}}',\n    },\n    messages: {\n      areYouSureYouWantToRunThisWorkflow:\n        'Are you sure you want to run this workflow?',\n      userNotAuthorizedExecute: 'User not authorized to execute workflow.',\n      workflowDown:\n        'The workflow is currently down or in an error state. Running it now may fail or produce unexpected results.',\n    },\n    buttons: {\n      run: 'Run',\n      runWorkflow: 'Run workflow',\n      runAgain: 'Run again',\n      running: 'Running...',\n      fromFailurePoint: 'From failure point',\n      runFailedAgain: 'Run failed again',\n    },\n  },\n  run: {\n    title: 'Run workflow',\n    pageTitle: '{{processName}} run',\n    variables: 'Run Variables',\n    inputs: 'Inputs',\n    results: 'Results',\n    abort: {\n      title: 'Abort workflow run?',\n      button: 'Abort',\n      warning:\n        'Aborting will stop all in-progress and pending steps immediately. Any work in progress will be lost.',\n      completed: {\n        title: 'Run completed',\n        message:\n          'It is not possible to abort the run as it has already been completed.',\n      },\n    },\n    status: {\n      completed: 'Run completed',\n      failed: 'Run has failed {{time}}',\n      aborted: 'Run has aborted',\n      completedWithMessage: 'Run completed {{time}} with message',\n      failedAt: 'Run has failed {{time}}',\n      completedAt: 'Run completed {{time}}',\n      running: 'Workflow is running. Started {{time}}',\n      runningWaitingAtNode:\n        'Workflow is running - waiting at node {{node}} since {{formattedTime}}',\n      workflowIsRunning: 'Workflow is running. Started {{time}}',\n      noAdditionalInfo:\n        'The workflow provided no additional info about the status.',\n      resultsWillBeDisplayedHereOnceTheRunIsComplete:\n        'Results will be displayed here once the run is complete.',\n    },\n    retrigger: 'Retrigger',\n    viewVariables: 'View variables',\n    suggestedNextWorkflow: 'Suggested next workflow',\n    suggestedNextWorkflows: 'Suggested next workflows',\n  },\n  tooltips: {\n    completed: 'Completed',\n    active: 'Active',\n    aborted: 'Aborted',\n    suspended: 'Suspended',\n    pending: 'Pending',\n    workflowDown: 'Workflow is currently down or in an error state',\n    userNotAuthorizedAbort: 'user not authorized to abort workflow',\n    userNotAuthorizedExecute: 'user not authorized to execute workflow',\n  },\n  messages: {\n    noDataAvailable: 'No data available',\n    noVariablesFound: 'No variables found for this run.',\n    noInputSchemaWorkflow: 'No input schema is defined for this workflow.',\n    workflowInstanceNoInputs: 'The workflow instance has no inputs',\n    missingJsonSchema: {\n      title: 'Missing JSON Schema for Input Form',\n      message:\n        'This workflow does not have a JSON schema defined for input validation. You can still execute the workflow, but input validation will be limited.',\n    },\n    additionalDetailsAboutThisErrorAreNotAvailable:\n      'Additional details about this error are not available',\n  },\n  common: {\n    close: 'Close',\n    cancel: 'Cancel',\n    execute: 'Execute',\n    details: 'Details',\n    links: 'Links',\n    values: 'Values',\n    back: 'Back',\n    run: 'Run',\n    next: 'Next',\n    review: 'Review',\n    unavailable: '---',\n  },\n  stepperObjectField: {\n    error:\n      \"Stepper object field is not supported for schema that doesn't contain properties\",\n  },\n  formDecorator: {\n    error: 'Form decorator must provide context data.',\n  },\n  aria: {\n    close: 'close',\n  },\n};\n\nexport const orchestratorTranslationRef = createTranslationRef({\n  id: 'plugin.orchestrator',\n  messages: orchestratorMessages,\n});\n","/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useTheme } from '@mui/material/styles';\n\nexport const useIsDarkMode = (): boolean => {\n  const theme = useTheme();\n\n  return theme.palette.mode === 'dark';\n};\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","BASE_PATH","replace","BaseAPI","constructor","configuration","globalAxios","basePath","axios","this","RequiredError","msg","super","field","name","operationServerMap","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setFlattenedQueryParams","urlSearchParams","parameter","key","Array","isArray","forEach","item","currentKey","has","append","set","setSearchParams","url","objects","searchParams","URLSearchParams","search","toString","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","undefined","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","defaults","baseURL","request","PaginationInfoDTOOrderDirectionEnum","Asc","Desc","ProcessInstanceStatusDTO","Active","Completed","Aborted","Suspended","Pending","DefaultApiFp","localVarAxiosParamCreator","abortWorkflow","async","instanceId","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","headersFromBaseOptions","executeWorkflow","workflowId","executeWorkflowRequestDTO","localVarHeaderParameter","data","getInstanceById","getInstances","searchRequest","getWorkflowInputSchemaById","localVarQueryParameter","getWorkflowInstances","getWorkflowOverviewById","getWorkflowSourceById","getWorkflowStatuses","getWorkflowsOverview","getWorkflowsOverviewForEntity","getWorkflowsOverviewForEntityRequest","pingWorkflowServiceById","retriggerInstance","retriggerInstanceRequestDTO","DefaultApiAxiosParamCreator","localVarAxiosArgs","localVarOperationServerIndex","serverIndex","localVarOperationServerBasePath","DefaultApi","then","orchestratorWorkflowPermission","createPermission","attributes","action","orchestratorWorkflowSpecificPermission","orchestratorWorkflowUsePermission","orchestratorWorkflowUseSpecificPermission","orchestratorAdminViewPermission","capitalize","text","toLocaleUpperCase","slice","toLocaleLowerCase","orchestratorApiRef","createApiRef","InputSchemaDialogContent","inputSchema","loading","error","t","useTranslation","isDarkMode","useIsDarkMode","Progress","div","style","width","ResponseErrorPanel","Box","Typography","JsonCodeBlock","maxHeight","InputSchemaDialog","rowData","isInputSchemaDialogOpen","toggleInputSchemaDialog","orchestratorApi","useApi","responseError","useAsync","getWorkflowDataInputSchema","InfoDialog","title","onClose","open","dialogActions","Button","color","variant","onClick","children","wideDialog","PlayArrow","PlayArrowMui","FormatListBulleted","FormatListBulletedMui","DeveloperModeOutlined","DeveloperModeOutlinedMui","WorkflowsTable","items","navigate","useNavigate","definitionLink","useRouteRef","workflowRouteRef","definitionRunsLink","workflowRunsRouteRef","executeWorkflowLink","executeWorkflowRouteRef","entityWorkflowLink","entityWorkflowRouteRef","entityInstanceLink","entityInstanceRouteRef","workflowInstanceLink","workflowInstanceRouteRef","kind","namespace","useRouteRefParams","entityRef","setData","useState","allowed","permittedToUse","generic","usePermission","permission","workflowIds","i","specific","usePermissionArray","_","idx","usePermittedToUseBatch","permittedToView","usePermittedToViewBatch","setIsInputSchemaDialogOpen","dataForDialog","setDataForDialog","useCallback","prev","handleViewInputSchema","initialState","useMemo","WorkflowOverviewFormatter","format","useEffect","handleViewVariables","handleExecute","canExecuteWorkflow","findIndex","canViewWorkflow","canViewInstance","actions","actionItems","icon","tooltip","disabled","push","entityLink","instanceLink","lastRunId","columns","render","Link","to","WorkflowStatus","availability","originalRawData","find","WorkflowInstanceStatusIndicator","status","lastRunStatus","minWidth","paging","actionsColumnIndex","length","OverrideBackstageTable","WorkflowsTabContent","workflowsArray","targetEntity","fetchWorkflowOverviews","overviewsResp","listWorkflowOverviews","overviews","usePolling","isReady","Content","noPadding","Grid","container","direction","xs","useStyles","makeStyles","theme","dialogTitle","display","alignItems","justifyContent","titleContent","gap","spacing","titleText","lineHeight","margin","closeBtn","flexShrink","paddingLeft","paddingTop","paddingBottom","dialogContent","backgroundColor","RefForwardingInfoDialog","props","forwardedRef","titleIcon","classes","Dialog","ref","maxWidth","PaperProps","DialogTitle","className","b","IconButton","aria-label","Close","DialogContent","DialogActions","forwardRef","root","position","marginTop","iconButton","top","right","copyIcon","pre","fontFamily","fontSize","whiteSpace","wordBreak","overflowY","overflowX","jsonString","copied","setCopied","Paper","elevation","Tooltip","size","window","navigator","clipboard","writeText","setTimeout","ContentCopyIcon","component","orchestratorTable","orchestratorTableWithOutline","outline","removeOutline","BackstageTable","thirdSortClick","iconColor","useWorkflowInstanceStateColors","VALUE_UNAVAILABLE","CircularProgress","CheckCircleOutlined","ErrorOutlineOutlined","HourglassEmptyOutlined","warning","palette","main","success","AVAILABLE","UNAVAILABLE","WarningAmberOutlined","SHORT_REFRESH_INTERVAL","LONG_REFRESH_INTERVAL","DEFAULT_TABLE_PAGE_SIZE","lastTriggered","lastTriggeredMs","moment","toDate","toLocaleString","description","isAvailable","permissions","permissionApi","permissionApiRef","useSWR","args","Promise","all","authorize","d","result","AuthorizeResult","ALLOW","usePermissionArrayDecision","fn","delayMs","continueRefresh","maxErrorRetryCount","config","useSWRConfig","prevFn","useRef","uniqueKey","uuid","setError","isInitalLoad","isLoading","useSwr","refreshInterval","value_","shouldRetryOnError","onErrorRetry","curError","_key","_config","revalidate","retryCount","current","onSuccess","revalidateOnFocus","restart","mutate","cache","delete","useTranslationRef","orchestratorTranslationRef","grey","Configuration","mime","jsonMime","RegExp","test","toLowerCase","param","apiKey","username","password","accessToken","formDataCtor","getError","err","isAxiosError","response","message","OrchestratorClient","getDefaultAPI","baseUrl","getBaseUrl","token","idToken","identityApi","getCredentials","axiosInstance","create","Authorization","withCredentials","discoveryApi","defaultApi","reqConfigOption","getDefaultReqConfig","requestBody","inputData","parameters","authTokens","abortWorkflowInstance","getWorkflowSource","responseType","paginationInfo","filters","annotationWorkflowIds","listInstances","getInstance","pingWorkflowService","getWorkflowOverview","additionalHeaders","orchestratorPlugin","createPlugin","apis","createApiFactory","api","deps","discoveryApiRef","identityApiRef","factory","routes","orchestratorRootRouteRef","OrchestratorPage","provide","createRoutableExtension","m","Router","mountPoint","SvgIcon","viewBox","path","IsOrchestratorCatalogTabAvailable","entity","useEntity","Boolean","metadata","annotations","OrchestratorCatalogTab","rawAnnotation","annotatedWorkflowIds","parsed","parse","orchestratorTranslations","createTranslationResource","translations","de","fr","it","es","createRouteRef","workflowInstancesRouteRef","createSubRouteRef","parent","workflowRunsRoutePath","createTranslationRef","messages","page","tabs","workflows","allRuns","workflowDetails","workflowRuns","table","allWorkflowRuns","runStatus","started","workflowStatus","duration","lastRun","workflowName","run","viewRuns","viewInputSchema","running","failed","completed","aborted","pending","active","startedOptions","today","yesterday","last7days","thisMonth","workflow","details","definition","progress","available","unavailable","fields","workflowIdCopied","errors","retriggerFailed","abortFailed","abortFailedWithReason","failedToLoadDetails","areYouSureYouWantToRunThisWorkflow","userNotAuthorizedExecute","workflowDown","buttons","runWorkflow","runAgain","fromFailurePoint","runFailedAgain","pageTitle","variables","inputs","results","abort","button","completedWithMessage","failedAt","completedAt","runningWaitingAtNode","workflowIsRunning","noAdditionalInfo","resultsWillBeDisplayedHereOnceTheRunIsComplete","retrigger","viewVariables","suggestedNextWorkflow","suggestedNextWorkflows","tooltips","suspended","userNotAuthorizedAbort","noDataAvailable","noVariablesFound","noInputSchemaWorkflow","workflowInstanceNoInputs","missingJsonSchema","additionalDetailsAboutThisErrorAreNotAvailable","common","close","cancel","execute","links","values","back","next","review","stepperObjectField","formDecorator","aria","useTheme","mode"],"sourceRoot":""}