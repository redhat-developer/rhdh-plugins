{"version":3,"file":"v2.cjs.js","sources":["../../../src/service/api/v2.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedRequest } from 'openapi-backend';\n\nimport {\n  AuthToken,\n  ExecuteWorkflowRequestDTO,\n  ExecuteWorkflowResponseDTO,\n  Filter,\n  ProcessInstanceDTO,\n  ProcessInstanceListResultDTO,\n  ProcessInstanceState,\n  RetriggerInstanceRequestDTO,\n  WorkflowDTO,\n  WorkflowInfo,\n  WorkflowOverviewDTO,\n  WorkflowOverviewListResultDTO,\n  WorkflowRunStatusDTO,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { Pagination } from '../../types/pagination';\nimport { retryAsyncFunction } from '../Helper';\nimport { OrchestratorService } from '../OrchestratorService';\nimport {\n  mapToExecuteWorkflowResponseDTO,\n  mapToProcessInstanceDTO,\n  mapToWorkflowDTO,\n  mapToWorkflowOverviewDTO,\n  mapToWorkflowRunStatusDTO,\n} from './mapping/V2Mappings';\n\nconst FETCH_INSTANCE_MAX_ATTEMPTS = 10;\nconst FETCH_INSTANCE_RETRY_DELAY_MS = 1000;\n\nexport class V2 {\n  constructor(private readonly orchestratorService: OrchestratorService) {}\n\n  public async getWorkflowsOverviewForEntity(\n    targetEntity: string,\n    annotationWorkflowIds: string[],\n  ): Promise<WorkflowOverviewListResultDTO> {\n    let combinedWorkflowIds: string[] = annotationWorkflowIds;\n\n    if (targetEntity) {\n      const definitionIdsFromInstances =\n        await this.orchestratorService.fetchDefinitionIdsFromInstances({\n          targetEntity,\n        });\n\n      if (definitionIdsFromInstances.length > 0) {\n        combinedWorkflowIds = Array.from(\n          new Set([...combinedWorkflowIds, ...definitionIdsFromInstances]),\n        );\n      }\n    }\n\n    // If no workflow IDs are provided, return empty result\n    if (combinedWorkflowIds.length === 0) {\n      return {\n        overviews: [],\n      };\n    }\n\n    const workflowIdsFilter: Filter = {\n      field: 'id',\n      operator: 'IN',\n      value: combinedWorkflowIds,\n    };\n\n    return this.getWorkflowsOverview(\n      undefined,\n      workflowIdsFilter,\n      targetEntity,\n    );\n  }\n\n  public async getWorkflowsOverview(\n    pagination?: Pagination,\n    filter?: Filter,\n    targetEntity?: string,\n  ): Promise<WorkflowOverviewListResultDTO> {\n    const overviews = await this.orchestratorService.fetchWorkflowOverviews({\n      pagination,\n      filter,\n      targetEntity,\n    });\n    if (!overviews) {\n      throw new Error(\"Couldn't fetch workflow overviews\");\n    }\n    const result: WorkflowOverviewListResultDTO = {\n      overviews: overviews.map(item => mapToWorkflowOverviewDTO(item)),\n      paginationInfo: {\n        pageSize: pagination?.limit,\n        offset: pagination?.offset,\n      },\n    };\n    return result;\n  }\n\n  public getWorkflowIds(): string[] {\n    return this.orchestratorService.getWorkflowIds();\n  }\n\n  public async getWorkflowOverviewById(\n    workflowId: string,\n  ): Promise<WorkflowOverviewDTO> {\n    const overview = await this.orchestratorService.fetchWorkflowOverview({\n      definitionId: workflowId,\n    });\n\n    if (!overview) {\n      throw new Error(`Couldn't fetch workflow overview for ${workflowId}`);\n    }\n    return mapToWorkflowOverviewDTO(overview);\n  }\n\n  public async getWorkflowById(workflowId: string): Promise<WorkflowDTO> {\n    const resultV1 = await this.getWorkflowSourceById(workflowId);\n    return mapToWorkflowDTO(resultV1);\n  }\n\n  public async getWorkflowSourceById(workflowId: string): Promise<string> {\n    const source = await this.orchestratorService.fetchWorkflowSource({\n      definitionId: workflowId,\n    });\n\n    if (!source) {\n      throw new Error(`Couldn't fetch workflow source for ${workflowId}`);\n    }\n\n    return source;\n  }\n\n  public async getInstances(\n    pagination?: Pagination,\n    filter?: Filter,\n    workflowIds?: string[],\n  ): Promise<ProcessInstanceListResultDTO> {\n    const instances = await this.orchestratorService.fetchInstances({\n      pagination,\n      filter,\n      workflowIds,\n    });\n\n    const result: ProcessInstanceListResultDTO = {\n      items: instances?.map(mapToProcessInstanceDTO),\n      paginationInfo: {\n        pageSize: pagination?.limit,\n        offset: pagination?.offset,\n      },\n    };\n    return result;\n  }\n\n  public async getInstanceById(\n    instanceId: string,\n  ): Promise<ProcessInstanceDTO> {\n    const instance = await this.orchestratorService.fetchInstance({\n      instanceId,\n    });\n\n    if (!instance) {\n      throw new Error(`Couldn't fetch process instance ${instanceId}`);\n    }\n\n    return mapToProcessInstanceDTO(instance);\n  }\n\n  public async executeWorkflow(\n    executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO,\n    workflowId: string,\n    initiatorEntity: string,\n    backstageToken: string | undefined,\n  ): Promise<ExecuteWorkflowResponseDTO> {\n    const definition = await this.orchestratorService.fetchWorkflowInfo({\n      definitionId: workflowId,\n    });\n    if (!definition) {\n      throw new Error(`Couldn't fetch workflow definition for ${workflowId}`);\n    }\n    if (!definition.serviceUrl) {\n      throw new Error(`ServiceURL is not defined for workflow ${workflowId}`);\n    }\n    const executionResponse = await this.orchestratorService.executeWorkflow({\n      definitionId: workflowId,\n      inputData: {\n        workflowdata: executeWorkflowRequestDTO.inputData,\n        initiatorEntity: initiatorEntity,\n        targetEntity: executeWorkflowRequestDTO.targetEntity,\n      },\n      authTokens: executeWorkflowRequestDTO.authTokens as Array<AuthToken>,\n      serviceUrl: definition.serviceUrl,\n      backstageToken,\n    });\n\n    if (!executionResponse) {\n      throw new Error(`Couldn't execute workflow ${workflowId}`);\n    }\n\n    // Making sure the instance data is available before returning\n    await retryAsyncFunction({\n      asyncFn: () =>\n        this.orchestratorService.fetchInstance({\n          instanceId: executionResponse.id,\n        }),\n      maxAttempts: FETCH_INSTANCE_MAX_ATTEMPTS,\n      delayMs: FETCH_INSTANCE_RETRY_DELAY_MS,\n    });\n\n    if (!executionResponse) {\n      throw new Error('Error executing workflow with id ${workflowId}');\n    }\n\n    return mapToExecuteWorkflowResponseDTO(workflowId, executionResponse);\n  }\n\n  public async retriggerInstance(\n    workflowId: string,\n    instanceId: string,\n    retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO,\n    backstageToken: string | undefined,\n  ): Promise<void> {\n    const definition = await this.orchestratorService.fetchWorkflowInfo({\n      definitionId: workflowId,\n    });\n    if (!definition) {\n      throw new Error(`Couldn't fetch workflow definition for ${workflowId}`);\n    }\n    if (!definition.serviceUrl) {\n      throw new Error(`ServiceURL is not defined for workflow ${workflowId}`);\n    }\n    const response = await this.orchestratorService.retriggerWorkflow({\n      definitionId: workflowId,\n      instanceId: instanceId,\n      serviceUrl: definition.serviceUrl,\n      authTokens: retriggerInstanceRequestDTO.authTokens as Array<AuthToken>,\n      backstageToken,\n    });\n\n    if (!response) {\n      throw new Error(\n        `Couldn't retrigger instance ${instanceId} of workflow ${workflowId}`,\n      );\n    }\n  }\n\n  public async abortWorkflow(\n    workflowId: string,\n    instanceId: string,\n  ): Promise<string> {\n    const definition = await this.orchestratorService.fetchWorkflowInfo({\n      definitionId: workflowId,\n    });\n    if (!definition) {\n      throw new Error(`Couldn't fetch workflow definition for ${workflowId}`);\n    }\n    if (!definition.serviceUrl) {\n      throw new Error(`ServiceURL is not defined for workflow ${workflowId}`);\n    }\n    await this.orchestratorService.abortWorkflowInstance({\n      definitionId: workflowId,\n      instanceId: instanceId,\n      serviceUrl: definition.serviceUrl,\n    });\n    return `Workflow instance ${instanceId} successfully aborted`;\n  }\n\n  public async getWorkflowStatuses(): Promise<WorkflowRunStatusDTO[]> {\n    return [\n      ProcessInstanceState.Active,\n      ProcessInstanceState.Error,\n      ProcessInstanceState.Completed,\n      ProcessInstanceState.Aborted,\n      ProcessInstanceState.Suspended,\n      ProcessInstanceState.Pending,\n    ].map(status => mapToWorkflowRunStatusDTO(status));\n  }\n\n  public async getWorkflowInputSchemaById(\n    workflowId: string,\n    serviceUrl: string,\n  ): Promise<WorkflowInfo | undefined> {\n    return this.orchestratorService.fetchWorkflowInfoOnService({\n      definitionId: workflowId,\n      serviceUrl: serviceUrl,\n    });\n  }\n\n  public async pingWorkflowService(\n    workflowId: string,\n  ): Promise<boolean | undefined> {\n    const definition = await this.orchestratorService.fetchWorkflowInfo({\n      definitionId: workflowId,\n    });\n    if (!definition) {\n      throw new Error(`Couldn't fetch workflow definition for ${workflowId}`);\n    }\n    if (!definition.serviceUrl) {\n      throw new Error(`ServiceURL is not defined for workflow ${workflowId}`);\n    }\n    const isAvailableNow = await this.orchestratorService.pingWorkflowService({\n      definitionId: workflowId,\n      serviceUrl: definition.serviceUrl,\n    });\n    if (!isAvailableNow) {\n      throw new Error(\n        `Workflow service for workflow ${workflowId} at ${definition.serviceUrl}/management/processes/${workflowId} is not available at the moment.`,\n      );\n    }\n    return isAvailableNow;\n  }\n\n  public extractQueryParam(\n    req: ParsedRequest,\n    key: string,\n  ): string | undefined {\n    return req.query[key] as string | undefined;\n  }\n}\n"],"names":["mapToWorkflowOverviewDTO","mapToWorkflowDTO","mapToProcessInstanceDTO","retryAsyncFunction","mapToExecuteWorkflowResponseDTO","ProcessInstanceState","mapToWorkflowRunStatusDTO"],"mappings":"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"}