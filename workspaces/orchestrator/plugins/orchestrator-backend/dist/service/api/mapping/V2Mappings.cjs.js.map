{"version":3,"file":"V2Mappings.cjs.js","sources":["../../../../src/service/api/mapping/V2Mappings.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport moment from 'moment';\n\nimport {\n  capitalize,\n  ExecuteWorkflowResponseDTO,\n  extractWorkflowFormat,\n  fromWorkflowSource,\n  NodeInstance,\n  NodeInstanceDTO,\n  ProcessInstance,\n  ProcessInstanceDTO,\n  ProcessInstanceState,\n  ProcessInstanceStatusDTO,\n  WorkflowDTO,\n  WorkflowExecutionResponse,\n  WorkflowFormatDTO,\n  WorkflowOverview,\n  WorkflowOverviewDTO,\n  WorkflowRunStatusDTO,\n  type ProcessInstanceStatusDTO as ProcessInstanceStatusDTOType,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\n// Mapping functions\nexport function mapToWorkflowOverviewDTO(\n  overview: WorkflowOverview,\n): WorkflowOverviewDTO {\n  return {\n    name: overview.name,\n    format: overview.format,\n    workflowId: overview.workflowId,\n    description: overview.description,\n    lastRunId: overview.lastRunId,\n    lastRunStatus: overview.lastRunStatus\n      ? getProcessInstancesStatusDTOFromString(overview.lastRunStatus)\n      : undefined,\n    lastTriggeredMs: overview.lastTriggeredMs,\n    isAvailable: overview.isAvailable,\n  };\n}\n\nexport function getWorkflowFormatDTO(source: string): WorkflowFormatDTO {\n  return extractWorkflowFormat(source);\n}\n\nexport function mapToWorkflowDTO(source: string): WorkflowDTO {\n  const definition = fromWorkflowSource(source);\n  return {\n    annotations: definition.annotations,\n    description: definition.description,\n    name: definition.name,\n    format: getWorkflowFormatDTO(source),\n    id: definition.id,\n  };\n}\n\nexport function getProcessInstancesStatusDTOFromString(\n  state: string,\n): ProcessInstanceStatusDTOType {\n  if (\n    !Object.values(ProcessInstanceStatusDTO).includes(\n      state as ProcessInstanceStatusDTOType,\n    )\n  ) {\n    throw new Error(\n      `state ${state} is not one of the values of type ProcessInstanceStatusDTO`,\n    );\n  }\n  return state as ProcessInstanceStatusDTOType;\n}\n\nexport function mapToProcessInstanceDTO(\n  processInstance: ProcessInstance,\n): ProcessInstanceDTO {\n  const start = moment(processInstance.start);\n  const end = moment(processInstance.end);\n  const duration = processInstance.end\n    ? moment.duration(start.diff(end)).humanize()\n    : undefined;\n\n  let variables: Record<string, unknown> | undefined;\n  if (typeof processInstance?.variables === 'string') {\n    variables = JSON.parse(processInstance?.variables);\n  } else {\n    variables = processInstance?.variables;\n  }\n\n  return {\n    id: processInstance.id,\n    processId: processInstance.processId,\n    processName: processInstance.processName,\n    description: processInstance.description,\n    serviceUrl: processInstance.serviceUrl,\n    executionSummary: processInstance.executionSummary,\n    endpoint: processInstance.endpoint,\n    error: processInstance.error,\n    start: processInstance.start,\n    end: processInstance.end,\n    duration: duration,\n    // @ts-ignore\n    workflowdata: variables?.workflowdata,\n    initiatorEntity: variables?.initiatorEntity as string,\n    targetEntity: variables?.targetEntity as string,\n    state: processInstance.state\n      ? getProcessInstancesStatusDTOFromString(processInstance.state)\n      : undefined,\n    nodes: processInstance.nodes.map(mapToNodeInstanceDTO),\n  };\n}\n\nexport function mapToNodeInstanceDTO(\n  nodeInstance: NodeInstance,\n): NodeInstanceDTO {\n  return { ...nodeInstance, __typename: 'NodeInstance' };\n}\n\nexport function mapToExecuteWorkflowResponseDTO(\n  workflowId: string,\n  workflowExecutionResponse: WorkflowExecutionResponse,\n): ExecuteWorkflowResponseDTO {\n  if (!workflowExecutionResponse?.id) {\n    throw new Error(\n      `Error while mapping ExecuteWorkflowResponse to ExecuteWorkflowResponseDTO for workflow with id ${workflowId}`,\n    );\n  }\n\n  return {\n    id: workflowExecutionResponse.id,\n  };\n}\n\nexport function mapToWorkflowRunStatusDTO(\n  status: ProcessInstanceState,\n): WorkflowRunStatusDTO {\n  return {\n    key: capitalize(status),\n    value: status,\n  };\n}\n"],"names":["extractWorkflowFormat","fromWorkflowSource","ProcessInstanceStatusDTO","moment","capitalize"],"mappings":";;;;;;;;;AAuCO,SAAS,yBACd,QAAA,EACqB;AACrB,EAAA,OAAO;AAAA,IACL,MAAM,QAAA,CAAS,IAAA;AAAA,IACf,QAAQ,QAAA,CAAS,MAAA;AAAA,IACjB,YAAY,QAAA,CAAS,UAAA;AAAA,IACrB,aAAa,QAAA,CAAS,WAAA;AAAA,IACtB,WAAW,QAAA,CAAS,SAAA;AAAA,IACpB,eAAe,QAAA,CAAS,aAAA,GACpB,sCAAA,CAAuC,QAAA,CAAS,aAAa,CAAA,GAC7D,MAAA;AAAA,IACJ,iBAAiB,QAAA,CAAS,eAAA;AAAA,IAC1B,aAAa,QAAA,CAAS;AAAA,GACxB;AACF;AAEO,SAAS,qBAAqB,MAAA,EAAmC;AACtE,EAAA,OAAOA,wDAAsB,MAAM,CAAA;AACrC;AAEO,SAAS,iBAAiB,MAAA,EAA6B;AAC5D,EAAA,MAAM,UAAA,GAAaC,qDAAmB,MAAM,CAAA;AAC5C,EAAA,OAAO;AAAA,IACL,aAAa,UAAA,CAAW,WAAA;AAAA,IACxB,aAAa,UAAA,CAAW,WAAA;AAAA,IACxB,MAAM,UAAA,CAAW,IAAA;AAAA,IACjB,MAAA,EAAQ,qBAAqB,MAAM,CAAA;AAAA,IACnC,IAAI,UAAA,CAAW;AAAA,GACjB;AACF;AAEO,SAAS,uCACd,KAAA,EAC8B;AAC9B,EAAA,IACE,CAAC,MAAA,CAAO,MAAA,CAAOC,0DAAwB,CAAA,CAAE,QAAA;AAAA,IACvC;AAAA,GACF,EACA;AACA,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,SAAS,KAAK,CAAA,0DAAA;AAAA,KAChB;AAAA,EACF;AACA,EAAA,OAAO,KAAA;AACT;AAEO,SAAS,wBACd,eAAA,EACoB;AACpB,EAAA,MAAM,KAAA,GAAQC,uBAAA,CAAO,eAAA,CAAgB,KAAK,CAAA;AAC1C,EAAA,MAAM,GAAA,GAAMA,uBAAA,CAAO,eAAA,CAAgB,GAAG,CAAA;AACtC,EAAA,MAAM,QAAA,GAAW,eAAA,CAAgB,GAAA,GAC7BA,uBAAA,CAAO,QAAA,CAAS,KAAA,CAAM,IAAA,CAAK,GAAG,CAAC,CAAA,CAAE,QAAA,EAAS,GAC1C,MAAA;AAEJ,EAAA,IAAI,SAAA;AACJ,EAAA,IAAI,OAAO,eAAA,EAAiB,SAAA,KAAc,QAAA,EAAU;AAClD,IAAA,SAAA,GAAY,IAAA,CAAK,KAAA,CAAM,eAAA,EAAiB,SAAS,CAAA;AAAA,EACnD,CAAA,MAAO;AACL,IAAA,SAAA,GAAY,eAAA,EAAiB,SAAA;AAAA,EAC/B;AAEA,EAAA,OAAO;AAAA,IACL,IAAI,eAAA,CAAgB,EAAA;AAAA,IACpB,WAAW,eAAA,CAAgB,SAAA;AAAA,IAC3B,aAAa,eAAA,CAAgB,WAAA;AAAA,IAC7B,aAAa,eAAA,CAAgB,WAAA;AAAA,IAC7B,YAAY,eAAA,CAAgB,UAAA;AAAA,IAC5B,kBAAkB,eAAA,CAAgB,gBAAA;AAAA,IAClC,UAAU,eAAA,CAAgB,QAAA;AAAA,IAC1B,OAAO,eAAA,CAAgB,KAAA;AAAA,IACvB,OAAO,eAAA,CAAgB,KAAA;AAAA,IACvB,KAAK,eAAA,CAAgB,GAAA;AAAA,IACrB,QAAA;AAAA;AAAA,IAEA,cAAc,SAAA,EAAW,YAAA;AAAA,IACzB,iBAAiB,SAAA,EAAW,eAAA;AAAA,IAC5B,cAAc,SAAA,EAAW,YAAA;AAAA,IACzB,OAAO,eAAA,CAAgB,KAAA,GACnB,sCAAA,CAAuC,eAAA,CAAgB,KAAK,CAAA,GAC5D,MAAA;AAAA,IACJ,KAAA,EAAO,eAAA,CAAgB,KAAA,CAAM,GAAA,CAAI,oBAAoB;AAAA,GACvD;AACF;AAEO,SAAS,qBACd,YAAA,EACiB;AACjB,EAAA,OAAO,EAAE,GAAG,YAAA,EAAc,UAAA,EAAY,cAAA,EAAe;AACvD;AAEO,SAAS,+BAAA,CACd,YACA,yBAAA,EAC4B;AAC5B,EAAA,IAAI,CAAC,2BAA2B,EAAA,EAAI;AAClC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kGAAkG,UAAU,CAAA;AAAA,KAC9G;AAAA,EACF;AAEA,EAAA,OAAO;AAAA,IACL,IAAI,yBAAA,CAA0B;AAAA,GAChC;AACF;AAEO,SAAS,0BACd,MAAA,EACsB;AACtB,EAAA,OAAO;AAAA,IACL,GAAA,EAAKC,6CAAW,MAAM,CAAA;AAAA,IACtB,KAAA,EAAO;AAAA,GACT;AACF;;;;;;;;;;;"}