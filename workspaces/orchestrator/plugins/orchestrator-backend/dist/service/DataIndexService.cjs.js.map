{"version":3,"file":"DataIndexService.cjs.js","sources":["../../src/service/DataIndexService.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nimport { Client, fetchExchange, gql } from '@urql/core';\n\nimport {\n  Filter,\n  fromWorkflowSource,\n  IntrospectionField,\n  NestedFilter,\n  parseWorkflowVariables,\n  ProcessInstance,\n  WorkflowDefinition,\n  WorkflowInfo,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { ErrorBuilder } from '../helpers/errorBuilder';\nimport { buildFilterCondition } from '../helpers/filterBuilder';\nimport { buildGraphQlQuery } from '../helpers/queryBuilder';\nimport { Pagination } from '../types/pagination';\nimport { FETCH_PROCESS_INSTANCES_SORT_FIELD } from './constants';\n\nexport class DataIndexService {\n  private readonly client: Client;\n  public processDefinitionArguments: IntrospectionField[] = [];\n  public processInstanceArguments: IntrospectionField[] = [];\n\n  public constructor(\n    private readonly dataIndexUrl: string,\n    private readonly logger: LoggerService,\n  ) {\n    if (!dataIndexUrl.length) {\n      throw ErrorBuilder.GET_NO_DATA_INDEX_URL_ERR();\n    }\n\n    this.client = this.getNewGraphQLClient();\n  }\n\n  private getNewGraphQLClient(): Client {\n    const diURL = `${this.dataIndexUrl}/graphql`;\n    return new Client({\n      url: diURL,\n      exchanges: [fetchExchange],\n    });\n  }\n\n  public async initInputProcessDefinitionArgs(): Promise<IntrospectionField[]> {\n    if (this.processDefinitionArguments.length === 0) {\n      this.processDefinitionArguments =\n        await this.inspectInputArgument('ProcessDefinition');\n    }\n    return this.processDefinitionArguments; // For testing purposes\n  }\n\n  public graphQLArgumentQuery(type: string): string {\n    return `query ${type}Argument {\n        __type(name: \"${type}Argument\") {\n          kind\n          name\n          inputFields {\n            name\n            type {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }`;\n  }\n\n  public async inspectInputArgument(\n    type: string,\n  ): Promise<IntrospectionField[]> {\n    const result = await this.client.query(this.graphQLArgumentQuery(type), {});\n\n    this.logger.debug(`Introspection query result: ${JSON.stringify(result)}`);\n\n    this.handleGraphqlClientError(\n      'Error executing introspection query',\n      result,\n    );\n\n    const pairs: IntrospectionField[] = [];\n    if (result?.data?.__type?.inputFields) {\n      for (const field of result.data.__type.inputFields) {\n        if (\n          field.name !== 'and' &&\n          field.name !== 'or' &&\n          field.name !== 'not'\n        ) {\n          pairs.push({\n            name: field.name,\n            type: {\n              name: field.type.name,\n              kind: field.type.kind,\n              ofType: field.type.ofType,\n            },\n          });\n        }\n      }\n    }\n    return pairs;\n  }\n\n  public async fetchWorkflowInfo(\n    definitionId: string,\n  ): Promise<WorkflowInfo | undefined> {\n    const graphQlQuery = `{ ProcessDefinitions ( where: {id: {equal: \"${definitionId}\" } } ) { id, name, version, type, endpoint, serviceUrl, source } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Get workflow definition result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError('Error fetching workflow definition', result);\n\n    const processDefinitions = result.data.ProcessDefinitions as WorkflowInfo[];\n\n    if (processDefinitions.length === 0) {\n      this.logger.info(`No workflow definition found for ${definitionId}`);\n      return undefined;\n    }\n\n    return processDefinitions[0];\n  }\n\n  public async fetchWorkflowServiceUrls(): Promise<Record<string, string>> {\n    const graphQlQuery = `{ ProcessDefinitions { id, serviceUrl } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Get workflow service urls result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError(\n      'Error fetching workflow service urls',\n      result,\n    );\n\n    const processDefinitions = result.data.ProcessDefinitions as WorkflowInfo[];\n    return processDefinitions\n      .filter(definition => definition.serviceUrl)\n      .map(definition => ({ [definition.id]: definition.serviceUrl! }))\n      .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n  }\n\n  private filterDeletedWorkflows(workflows: WorkflowInfo[]): WorkflowInfo[] {\n    // filter deleted workflows, that were deleted via deleting SonataFlow CR, operator marks them as unavailable\n    // Note this is different then the isAvailable status in WorkflowOverviewDTO, that is used to mark workflows that are not available on the service for unexpected reasons\n\n    const availableWorkflows: WorkflowInfo[] = [];\n    const unavailableWorkflows: WorkflowInfo[] = [];\n\n    workflows.forEach(workflow => {\n      const isUnavailable = workflow.metadata?.status === 'unavailable';\n      if (isUnavailable) {\n        unavailableWorkflows.push(workflow);\n      } else {\n        availableWorkflows.push(workflow);\n      }\n    });\n\n    this.logger.debug(\n      `filtered deleted workflows when fetching workflow infos: ${JSON.stringify(\n        unavailableWorkflows.map(w => ({\n          id: w.id,\n          name: w.name,\n          status: w.metadata?.status,\n        })),\n      )}`,\n    );\n\n    return availableWorkflows;\n  }\n\n  public async fetchWorkflowInfos(args: {\n    definitionIds?: string[];\n    pagination?: Pagination;\n    filter?: Filter;\n  }): Promise<WorkflowInfo[]> {\n    this.logger.info(`fetchWorkflowInfos() called: ${this.dataIndexUrl}`);\n    const { definitionIds, pagination, filter } = args;\n\n    const definitionIdsCondition =\n      definitionIds !== undefined && definitionIds.length > 0\n        ? `id: {in: ${JSON.stringify(definitionIds)}}`\n        : undefined;\n\n    const filterCondition = filter\n      ? buildFilterCondition(\n          await this.initInputProcessDefinitionArgs(),\n          'ProcessDefinition',\n          filter,\n        )\n      : undefined;\n\n    let whereClause: string | undefined;\n    if (definitionIdsCondition && filterCondition) {\n      whereClause = `and: [{${definitionIdsCondition}}, {${filterCondition}}]`;\n    } else if (definitionIdsCondition || filterCondition) {\n      whereClause = definitionIdsCondition ?? filterCondition;\n    } else {\n      whereClause = undefined;\n    }\n\n    const graphQlQuery = buildGraphQlQuery({\n      type: 'ProcessDefinitions',\n      queryBody:\n        'id, name, version, type, endpoint, serviceUrl, source, metadata',\n      whereClause,\n      pagination,\n    });\n    this.logger.debug(`GraphQL query: ${graphQlQuery}`);\n    const result = await this.client.query(graphQlQuery, {});\n    this.logger.debug(\n      `Get workflow definitions result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError(\n      'Error fetching data index swf results',\n      result,\n    );\n\n    return this.filterDeletedWorkflows(result.data.ProcessDefinitions);\n  }\n\n  public async fetchInstances(args: {\n    definitionIds?: string[];\n    pagination?: Pagination;\n    filter?: Filter;\n  }): Promise<ProcessInstance[]> {\n    const { pagination, definitionIds, filter } = args;\n    if (pagination) pagination.sortField ??= FETCH_PROCESS_INSTANCES_SORT_FIELD;\n\n    const processIdNotNullCondition = 'processId: {isNull: false}';\n    const definitionIdsCondition =\n      definitionIds && definitionIds.length > 0\n        ? `processId: {in: ${JSON.stringify(definitionIds)}}`\n        : undefined;\n    const type = 'ProcessInstance';\n    const filterCondition = filter\n      ? buildFilterCondition(\n          await this.inspectInputArgument(type),\n          type,\n          filter,\n        )\n      : '';\n\n    let whereClause = '';\n    const conditions = [];\n\n    if (processIdNotNullCondition) {\n      conditions.push(`{${processIdNotNullCondition}}`);\n    }\n\n    if (definitionIdsCondition) {\n      conditions.push(`{${definitionIdsCondition}}`);\n    }\n\n    if (filter) {\n      conditions.push(`{${filterCondition}}`);\n    }\n\n    if (conditions.length === 0) {\n      whereClause = processIdNotNullCondition;\n    } else if (conditions.length === 1) {\n      whereClause = conditions[0].slice(1, -1); // Remove the outer braces\n    } else if (conditions.length > 1) {\n      whereClause = `and: [${conditions.join(', ')}]`;\n    }\n\n    const graphQlQuery = buildGraphQlQuery({\n      type: 'ProcessInstances',\n      queryBody:\n        'id, processName, processId, state, start, end, nodes { id }, variables, executionSummary, parentProcessInstance {id, processName, businessKey}',\n      whereClause,\n      pagination,\n    });\n\n    this.logger.debug(`GraphQL query: ${graphQlQuery}`);\n\n    const result = await this.client.query<{\n      ProcessInstances: ProcessInstance[];\n    }>(graphQlQuery, {});\n    this.logger.debug(\n      `Fetch process instances result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError('Error when fetching instances', result);\n\n    const processInstancesSrc = result.data ? result.data.ProcessInstances : [];\n\n    const processInstances = await Promise.all(\n      processInstancesSrc.map(async instance => {\n        return await this.getWorkflowDefinitionFromInstance(instance);\n      }),\n    );\n    return processInstances;\n  }\n\n  public async fetchDefinitionIdsFromInstances(args: {\n    targetEntity: string;\n  }): Promise<string[]> {\n    const { targetEntity } = args;\n\n    const processIdNotNullCondition = 'processId: {isNull: false}';\n\n    const type = 'ProcessInstance';\n    const targetEntityFilter: NestedFilter = {\n      field: 'variables',\n      nested: {\n        operator: 'EQ',\n        field: 'targetEntity',\n        value: targetEntity,\n      },\n    };\n\n    const filterCondition = buildFilterCondition(\n      await this.inspectInputArgument(type),\n      type,\n      targetEntityFilter,\n    );\n\n    const whereClause = `and: [{${processIdNotNullCondition}}, {${filterCondition}}]`;\n\n    // Apply a limit to prevent memory exhaustion and network timeouts when entities\n    // have thousands of process instances. Entities with more instances than this limit\n    // may not see all their associated workflows.\n    const pagination = {\n      limit: 1000,\n      offset: 0,\n    };\n\n    const graphQlQuery = buildGraphQlQuery({\n      type: 'ProcessInstances',\n      queryBody: 'processId',\n      whereClause,\n      pagination,\n    });\n\n    this.logger.debug(`GraphQL query: ${graphQlQuery}`);\n\n    const result = await this.client.query<{\n      ProcessInstances: ProcessInstance[];\n    }>(graphQlQuery, {});\n    this.logger.debug(\n      `Fetch definition ids from instances history result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError(\n      'Error when fetching definition ids from instances history',\n      result,\n    );\n\n    const processInstancesSrc = result.data ? result.data.ProcessInstances : [];\n    const distinctProcessIds = [\n      ...new Set(processInstancesSrc.map(instance => instance.processId)),\n    ]; // graphql doesn't support distinct so we need to use a set to get the distinct process ids\n    return distinctProcessIds;\n  }\n\n  private async getWorkflowDefinitionFromInstance(instance: ProcessInstance) {\n    const workflowInfo = await this.fetchWorkflowInfo(instance.processId);\n    if (!workflowInfo?.source) {\n      throw new Error(\n        `Workflow defintion is required to fetch instance ${instance.id}`,\n      );\n    }\n    if (workflowInfo) {\n      instance.description = workflowInfo.description;\n    }\n    return instance;\n  }\n\n  public async fetchWorkflowSource(\n    definitionId: string,\n  ): Promise<string | undefined> {\n    const graphQlQuery = `{ ProcessDefinitions ( where: {id: {equal: \"${definitionId}\" } } ) { id, source } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch workflow source result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError(\n      'Error when fetching workflow source',\n      result,\n    );\n\n    const processDefinitions = result.data.ProcessDefinitions as WorkflowInfo[];\n\n    if (processDefinitions.length === 0) {\n      this.logger.info(`No workflow source found for ${definitionId}`);\n      return undefined;\n    }\n\n    return processDefinitions[0].source;\n  }\n\n  public async fetchInstancesByDefinitionId(args: {\n    definitionId: string;\n    limit: number;\n    offset: number;\n    targetEntity?: string;\n  }): Promise<ProcessInstance[]> {\n    const targetEntityWhereCondition = args.targetEntity\n      ? `, variables: {targetEntity: {equal: \"${args.targetEntity}\" } }`\n      : '';\n\n    const graphQlQuery = `{ ProcessInstances( where: {processId: {equal: \"${args.definitionId}\" } ${targetEntityWhereCondition} }, orderBy: {start:DESC}, pagination: {limit: ${args.limit}, offset: ${args.offset}}) { id, processName, state, start, end } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch workflow instances result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError(\n      'Error when fetching workflow instances',\n      result,\n    );\n\n    return result.data.ProcessInstances;\n  }\n\n  public async fetchInstanceVariables(\n    instanceId: string,\n  ): Promise<object | undefined> {\n    const graphQlQuery = `{ ProcessInstances (where: { id: {equal: \"${instanceId}\" } } ) { variables } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch process instance variables result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError(\n      'Error when fetching process instance variables',\n      result,\n    );\n\n    const processInstances = result.data.ProcessInstances as ProcessInstance[];\n\n    if (processInstances.length === 0) {\n      return undefined;\n    }\n\n    return parseWorkflowVariables(processInstances[0].variables as object);\n  }\n\n  public async fetchDefinitionIdByInstanceId(\n    instanceId: string,\n  ): Promise<string | undefined> {\n    const graphQlQuery = `{ ProcessInstances (where: { id: {equal: \"${instanceId}\" } } ) { processId } }`;\n\n    const result = await this.client.query(graphQlQuery, {});\n\n    this.logger.debug(\n      `Fetch process id from instance result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError(\n      'Error when fetching process id from instance',\n      result,\n    );\n\n    const processInstances = result.data.ProcessInstances as ProcessInstance[];\n\n    if (processInstances.length === 0) {\n      return undefined;\n    }\n\n    return processInstances[0].processId;\n  }\n\n  public async fetchInstance(\n    instanceId: string,\n  ): Promise<ProcessInstance | undefined> {\n    const FindProcessInstanceQuery = gql`\n      query FindProcessInstanceQuery($instanceId: String!) {\n        ProcessInstances(where: { id: { equal: $instanceId } }) {\n          id\n          processName\n          processId\n          serviceUrl\n          executionSummary\n          state\n          start\n          end\n          nodes {\n            id\n            nodeId\n            definitionId\n            type\n            name\n            enter\n            exit\n            errorMessage\n          }\n          variables\n          parentProcessInstance {\n            id\n            processName\n            businessKey\n          }\n          error {\n            nodeDefinitionId\n            nodeInstanceId\n            message\n          }\n        }\n      }\n    `;\n\n    const result = await this.client.query(FindProcessInstanceQuery, {\n      instanceId,\n    });\n\n    this.logger.debug(\n      `Fetch process instance result: ${JSON.stringify(result)}`,\n    );\n\n    this.handleGraphqlClientError(\n      'Error when fetching process instances',\n      result,\n    );\n\n    const processInstances = result.data.ProcessInstances as ProcessInstance[];\n\n    if (processInstances.length === 0) {\n      return undefined;\n    }\n\n    const instance = this.removeNodes(processInstances[0]);\n\n    const workflowInfo = await this.fetchWorkflowInfo(instance.processId);\n    if (!workflowInfo?.source) {\n      throw new Error(\n        `Workflow definition is required to fetch instance ${instance.id}`,\n      );\n    }\n    const workflowDefinitionSrc: WorkflowDefinition = fromWorkflowSource(\n      workflowInfo.source,\n    );\n    if (workflowInfo) {\n      instance.description = workflowDefinitionSrc.description;\n    }\n    return instance;\n  }\n\n  private handleGraphqlClientError(scenario: string, result: any) {\n    if (!result?.error) {\n      return;\n    }\n\n    this.logger.error(scenario, result);\n\n    const networkError = result.error.networkError?.cause?.message;\n    if (networkError) {\n      const toThrow = new Error(`${result.error.message}. ${networkError}`);\n      toThrow.name = 'Network Error';\n      throw toThrow;\n    }\n\n    const graphQLErrors = result.error.graphQLErrors;\n    if (\n      result.data &&\n      Array.isArray(graphQLErrors) &&\n      graphQLErrors.length > 0\n    ) {\n      const graphQLError = graphQLErrors[0];\n      if (\n        graphQLError?.extensions?.classification === 'DataFetchingException'\n      ) {\n        // we have data (perhaps partial) and it is a data fetch error ==> log and ignore\n        return;\n      }\n    }\n\n    throw result.error;\n  }\n\n  private removeNodes(instance: ProcessInstance): ProcessInstance {\n    const errorNodeId = instance.error?.nodeInstanceId;\n    instance.nodes = instance.nodes.filter(node => {\n      return !node.errorMessage || node.id === errorNodeId;\n    });\n    return instance;\n  }\n}\n"],"names":["ErrorBuilder","Client","fetchExchange","buildFilterCondition","buildGraphQlQuery","FETCH_PROCESS_INSTANCES_SORT_FIELD","parseWorkflowVariables","gql","fromWorkflowSource"],"mappings":"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"}