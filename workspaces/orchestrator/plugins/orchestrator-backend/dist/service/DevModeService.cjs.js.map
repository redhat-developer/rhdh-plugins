{"version":3,"file":"DevModeService.cjs.js","sources":["../../src/service/DevModeService.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { LoggerService } from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\n\nimport fs from 'fs-extra';\n\nimport {\n  DEFAULT_SONATAFLOW_BASE_URL,\n  DEFAULT_SONATAFLOW_CONTAINER_IMAGE,\n  DEFAULT_SONATAFLOW_PERSISTENCE_PATH,\n  DEFAULT_WORKFLOWS_PATH,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { spawn } from 'child_process';\nimport { join, resolve } from 'path';\n\nimport { GitService } from './GitService';\nimport { executeWithRetry } from './Helper';\n\nconst SONATA_FLOW_RESOURCES_PATH =\n  '/home/kogito/serverless-workflow-project/src/main/resources';\nconst DEFAULT_SONATAFLOW_RUNTIME = 'docker';\n\ninterface LauncherCommand {\n  command: string;\n  args: string[];\n}\n\ninterface DevModeConnectionConfig {\n  host: string;\n  port?: number;\n  containerImage: string;\n  resourcesPath: string;\n  persistencePath?: string;\n  repoUrl?: string;\n  notificationsBearerToken?: string;\n  notificationsUrl?: string;\n  runtime: string;\n}\n\nexport class DevModeService {\n  private readonly connection: DevModeConnectionConfig;\n  private readonly gitService;\n\n  constructor(\n    config: Config,\n    private readonly logger: LoggerService,\n  ) {\n    this.connection = this.extractConnectionConfig(config);\n    this.gitService = new GitService(logger, config);\n  }\n\n  public get devModeUrl(): string {\n    if (!this.connection.port) {\n      return this.connection.host;\n    }\n    return `${this.connection.host}:${this.connection.port}`;\n  }\n\n  public async launchDevMode(): Promise<boolean> {\n    await this.loadDevWorkflows();\n\n    const isAlreadyUp = await this.isSonataFlowUp(false, this.devModeUrl);\n    if (isAlreadyUp) {\n      return true;\n    }\n\n    this.launchSonataFlow();\n\n    return await this.isSonataFlowUp(true, this.devModeUrl);\n  }\n\n  private async isSonataFlowUp(\n    withRetry: boolean,\n    endpoint: string,\n  ): Promise<boolean> {\n    const healthUrl = `${endpoint}/q/health`;\n    this.logger.info(`Checking SonataFlow health at: ${healthUrl}`);\n\n    try {\n      const response = await executeWithRetry(\n        () => fetch(healthUrl),\n        withRetry ? 15 : 1,\n      );\n      if (response.ok) {\n        this.logger.info('SonataFlow is up and running');\n        return true;\n      }\n    } catch (e) {\n      this.logger.error(`Error when checking SonataFlow health: ${e}`);\n    }\n    return false;\n  }\n\n  private launchSonataFlow(): void {\n    const launcherCmd = this.createLauncherCommand();\n\n    this.logger.info(\n      `Auto starting SonataFlow through: ${\n        launcherCmd.command\n      } ${launcherCmd.args.join(' ')}`,\n    );\n\n    const process = spawn(launcherCmd.command, launcherCmd.args, {\n      shell: false,\n    });\n\n    process.on('close', code => {\n      this.logger.info(`SonataFlow process exited with code ${code}`);\n    });\n\n    process.on('exit', code => {\n      this.logger.info(`SonataFlow process exited with code ${code}`);\n    });\n\n    process.on('error', error => {\n      this.logger.error(`SonataFlow process error: ${error}`);\n    });\n  }\n\n  private createLauncherCommand(): LauncherCommand {\n    const resourcesAbsPath = resolve(\n      join(this.connection.resourcesPath, DEFAULT_WORKFLOWS_PATH),\n    );\n\n    const launcherArgs = [\n      'run',\n      '--name',\n      'backstage-internal-sonataflow',\n      ...(this.connection.runtime === 'podman'\n        ? ['--replace']\n        : ['--add-host', 'host.docker.internal:host-gateway']),\n    ];\n\n    // TODO: pass automatically a set of env variables from configuration, i.e. all config props with names starting at ENV_:\n    //   config: orchestrator.sonataFlowService.ENV_foo\n\n    launcherArgs.push('-e', `QUARKUS_HTTP_PORT=${this.connection.port}`);\n\n    launcherArgs.push('-p', `${this.connection.port}:${this.connection.port}`);\n    launcherArgs.push('-e', `KOGITO_SERVICE_URL=${this.devModeUrl}`);\n    launcherArgs.push(\n      '-v',\n      `${resourcesAbsPath}:${SONATA_FLOW_RESOURCES_PATH}:Z`,\n    );\n    if (this.connection?.persistencePath) {\n      // if persistence is enabled, mount the volume and persist data across restarts\n      const persistenceAbsPath = resolve(this.connection.persistencePath);\n      this.logger.info(\n        `Persistence is enabled, mounting ${persistenceAbsPath} as volume to persist data`,\n      );\n      if (!fs.existsSync(persistenceAbsPath)) {\n        fs.mkdirSync(persistenceAbsPath, { recursive: true });\n      }\n      launcherArgs.push(\n        '-v',\n        `${persistenceAbsPath}:${DEFAULT_SONATAFLOW_PERSISTENCE_PATH}:Z`,\n      );\n    }\n    launcherArgs.push('-e', 'KOGITO.CODEGEN.PROCESS.FAILONERROR=false');\n    launcherArgs.push(\n      '-e',\n      `QUARKUS_EMBEDDED_POSTGRESQL_DATA_DIR=${DEFAULT_SONATAFLOW_PERSISTENCE_PATH}`,\n    );\n    launcherArgs.push(\n      '-e',\n      `NOTIFICATIONS_BEARER_TOKEN=${this.connection.notificationsBearerToken}`,\n    );\n    launcherArgs.push(\n      '-e',\n      `BACKSTAGE_NOTIFICATIONS_URL=${this.connection.notificationsUrl}`,\n    );\n\n    launcherArgs.push(this.connection.containerImage);\n\n    return {\n      command: this.connection.runtime,\n      args: launcherArgs,\n    };\n  }\n\n  private extractConnectionConfig(config: Config): DevModeConnectionConfig {\n    const host =\n      config.getOptionalString('orchestrator.sonataFlowService.baseUrl') ??\n      DEFAULT_SONATAFLOW_BASE_URL;\n    const port = config.getOptionalNumber(\n      'orchestrator.sonataFlowService.port',\n    );\n\n    const resourcesPath =\n      config.getOptionalString(\n        'orchestrator.sonataFlowService.workflowsSource.localPath',\n      ) ?? '';\n\n    const containerImage =\n      config.getOptionalString('orchestrator.sonataFlowService.container') ??\n      DEFAULT_SONATAFLOW_CONTAINER_IMAGE;\n\n    const persistencePath =\n      config.getOptionalString(\n        'orchestrator.sonataFlowService.persistence.path',\n      ) ?? '';\n\n    const repoUrl =\n      config.getOptionalString(\n        'orchestrator.sonataFlowService.workflowsSource.gitRepositoryUrl',\n      ) ?? '';\n\n    const notificationsBearerToken =\n      config.getOptionalString(\n        'orchestrator.sonataFlowService.notificationsBearerToken',\n      ) ?? '';\n\n    const notificationsUrl =\n      config.getOptionalString(\n        'orchestrator.sonataFlowService.notificationsUrl',\n      ) ?? '';\n\n    const runtime =\n      config.getOptionalString('orchestrator.sonataFlowService.runtime') ??\n      DEFAULT_SONATAFLOW_RUNTIME;\n\n    return {\n      runtime,\n      host,\n      port,\n      containerImage,\n      resourcesPath,\n      persistencePath,\n      repoUrl,\n      notificationsBearerToken,\n      notificationsUrl,\n    };\n  }\n\n  public async loadDevWorkflows() {\n    if (!this.connection?.repoUrl || !this.connection?.resourcesPath) {\n      this.logger.info(\n        'No Git repository or path configured. Skipping dev workflows loading.',\n      );\n      return;\n    }\n\n    this.logger.info(`Loading dev workflows from ${this.connection.repoUrl}`);\n    const localPath = this.connection.resourcesPath;\n    if (await fs.pathExists(localPath)) {\n      this.logger.info(`Path ${localPath} already exists. Skipping clone.`);\n      return;\n    }\n\n    await this.gitService.clone(this.connection.repoUrl, localPath);\n    // Remove .git to avoid any submodule issues\n    await fs.rm(join(localPath, '.git'), { recursive: true, force: true });\n  }\n}\n"],"names":["GitService","executeWithRetry","spawn","resolve","join","DEFAULT_WORKFLOWS_PATH","fs","DEFAULT_SONATAFLOW_PERSISTENCE_PATH","DEFAULT_SONATAFLOW_BASE_URL","DEFAULT_SONATAFLOW_CONTAINER_IMAGE"],"mappings":"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"}