{"version":3,"file":"git.cjs.js","sources":["../../../src/service/GitWrapper/git.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nimport fs from 'fs-extra';\nimport git, {\n  AuthCallback,\n  MergeResult,\n  ProgressCallback,\n  ReadCommitResult,\n} from 'isomorphic-git';\nimport http from 'isomorphic-git/http/node';\n\nfunction isAuthCallbackOptions(\n  options: StaticAuthOptions | AuthCallbackOptions,\n): options is AuthCallbackOptions {\n  return 'onAuth' in options;\n}\n\n/**\n * Configure static credential for authentication\n * @public\n */\nexport type StaticAuthOptions = {\n  username?: string;\n  password?: string;\n  token?: string;\n  logger?: LoggerService;\n};\n\n/**\n * Configure an authentication callback that can provide credentials on demand\n * @public\n */\nexport type AuthCallbackOptions = {\n  onAuth: AuthCallback;\n  logger?: LoggerService;\n};\n\n/*\nprovider          username         password\nAzure             'notempty'       token\nBitbucket Cloud   'x-token-auth'   token\nBitbucket Server  username         password or token\nGitHub            'x-access-token' token\nGitLab            'oauth2'         token\nFrom : https://isomorphic-git.org/docs/en/onAuth with fix for GitHub\nOr token provided as `token` for Bearer auth header\ninstead of Basic Auth (e.g., Bitbucket Server).\n*/\n\n/**\n * A convenience wrapper around the `isomorphic-git` library.\n * @public\n */\n\nexport class Git {\n  private readonly headers: {\n    [x: string]: string;\n  };\n\n  private constructor(\n    private readonly config: {\n      onAuth: AuthCallback;\n      token?: string;\n      logger?: LoggerService;\n    },\n  ) {\n    this.onAuth = config.onAuth;\n\n    this.headers = {\n      'user-agent': 'git/@isomorphic-git',\n      ...(config.token ? { Authorization: `Bearer ${config.token}` } : {}),\n    };\n  }\n\n  async add(options: { dir: string; filepath: string }): Promise<void> {\n    const { dir, filepath } = options;\n    this.config.logger?.info(`Adding file {dir=${dir},filepath=${filepath}}`);\n\n    return git.add({ fs, dir, filepath });\n  }\n\n  async addRemote(options: {\n    dir: string;\n    remote: string;\n    url: string;\n    force?: boolean;\n  }): Promise<void> {\n    const { dir, url, remote, force } = options;\n    this.config.logger?.info(\n      `Creating new remote {dir=${dir},remote=${remote},url=${url}}`,\n    );\n    return git.addRemote({ fs, dir, remote, url, force });\n  }\n\n  async deleteRemote(options: { dir: string; remote: string }): Promise<void> {\n    const { dir, remote } = options;\n    this.config.logger?.info(`Deleting remote {dir=${dir},remote=${remote}}`);\n    return git.deleteRemote({ fs, dir, remote });\n  }\n\n  async checkout(options: { dir: string; ref: string }): Promise<void> {\n    const { dir, ref } = options;\n    this.config.logger?.info(`Checking out branch {dir=${dir},ref=${ref}}`);\n\n    return git.checkout({ fs, dir, ref });\n  }\n\n  async branch(options: { dir: string; ref: string }): Promise<void> {\n    const { dir, ref } = options;\n    this.config.logger?.info(`Creating branch {dir=${dir},ref=${ref}`);\n\n    return git.branch({ fs, dir, ref });\n  }\n\n  async commit(options: {\n    dir: string;\n    message: string;\n    author: { name: string; email: string };\n    committer: { name: string; email: string };\n  }): Promise<string> {\n    const { dir, message, author, committer } = options;\n    this.config.logger?.info(\n      `Committing file to repo {dir=${dir},message=${message}}`,\n    );\n    return git.commit({ fs, dir, message, author, committer });\n  }\n\n  /** https://isomorphic-git.org/docs/en/clone */\n  async clone(options: {\n    url: string;\n    dir: string;\n    ref?: string;\n    depth?: number;\n    noCheckout?: boolean;\n  }): Promise<void> {\n    const { url, dir, ref, depth, noCheckout } = options;\n    this.config.logger?.info(`Cloning repo {dir=${dir},url=${url}}`);\n\n    try {\n      return await git.clone({\n        fs,\n        http,\n        url,\n        dir,\n        ref,\n        singleBranch: true,\n        depth: depth ?? 1,\n        noCheckout,\n        onProgress: this.onProgressHandler(),\n        headers: this.headers,\n        onAuth: this.onAuth,\n      });\n    } catch (ex: any) {\n      this.config.logger?.error(`Failed to clone repo {dir=${dir},url=${url}}`);\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  /** https://isomorphic-git.org/docs/en/currentBranch */\n  async currentBranch(options: {\n    dir: string;\n    fullName?: boolean;\n  }): Promise<string | undefined> {\n    const { dir, fullName = false } = options;\n    return git.currentBranch({ fs, dir, fullname: fullName }) as Promise<\n      string | undefined\n    >;\n  }\n\n  /** https://isomorphic-git.org/docs/en/fetch */\n  async fetch(options: {\n    dir: string;\n    remote?: string;\n    tags?: boolean;\n  }): Promise<void> {\n    const { dir, remote = 'origin', tags = false } = options;\n    this.config.logger?.info(\n      `Fetching remote=${remote} for repository {dir=${dir}}`,\n    );\n\n    try {\n      await git.fetch({\n        fs,\n        http,\n        dir,\n        remote,\n        tags,\n        onProgress: this.onProgressHandler(),\n        headers: this.headers,\n        onAuth: this.onAuth,\n      });\n    } catch (ex: any) {\n      this.config.logger?.error(\n        `Failed to fetch repo {dir=${dir},remote=${remote}}`,\n      );\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  async init(options: { dir: string; defaultBranch?: string }): Promise<void> {\n    const { dir, defaultBranch = 'master' } = options;\n    this.config.logger?.info(`Init git repository {dir=${dir}}`);\n\n    return git.init({\n      fs,\n      dir,\n      defaultBranch,\n    });\n  }\n\n  /** https://isomorphic-git.org/docs/en/merge */\n  async merge(options: {\n    dir: string;\n    theirs: string;\n    ours?: string;\n    author: { name: string; email: string };\n    committer: { name: string; email: string };\n  }): Promise<MergeResult> {\n    const { dir, theirs, ours, author, committer } = options;\n    this.config.logger?.info(\n      `Merging branch '${theirs}' into '${ours}' for repository {dir=${dir}}`,\n    );\n\n    // If ours is undefined, current branch is used.\n    return git.merge({\n      fs,\n      dir,\n      ours,\n      theirs,\n      author,\n      committer,\n    });\n  }\n\n  async push(options: {\n    dir: string;\n    remote: string;\n    remoteRef?: string;\n    force?: boolean;\n  }) {\n    const { dir, remote, remoteRef, force } = options;\n    this.config.logger?.info(\n      `Pushing directory to remote {dir=${dir},remote=${remote}}`,\n    );\n    try {\n      return await git.push({\n        fs,\n        dir,\n        http,\n        onProgress: this.onProgressHandler(),\n        remoteRef,\n        force,\n        headers: this.headers,\n        remote,\n        onAuth: this.onAuth,\n      });\n    } catch (ex: any) {\n      this.config.logger?.error(\n        `Failed to push to repo {dir=${dir}, remote=${remote}}`,\n      );\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  /** https://isomorphic-git.org/docs/en/readCommit */\n  async readCommit(options: {\n    dir: string;\n    sha: string;\n  }): Promise<ReadCommitResult> {\n    const { dir, sha } = options;\n    return git.readCommit({ fs, dir, oid: sha });\n  }\n\n  /** https://isomorphic-git.org/docs/en/remove */\n  async remove(options: { dir: string; filepath: string }): Promise<void> {\n    const { dir, filepath } = options;\n    this.config.logger?.info(\n      `Removing file from git index {dir=${dir},filepath=${filepath}}`,\n    );\n    return git.remove({ fs, dir, filepath });\n  }\n\n  /** https://isomorphic-git.org/docs/en/resolveRef */\n  async resolveRef(options: { dir: string; ref: string }): Promise<string> {\n    const { dir, ref } = options;\n    return git.resolveRef({ fs, dir, ref });\n  }\n\n  /** https://isomorphic-git.org/docs/en/log */\n  async log(options: {\n    dir: string;\n    ref?: string;\n  }): Promise<ReadCommitResult[]> {\n    const { dir, ref } = options;\n    return git.log({\n      fs,\n      dir,\n      ref: ref ?? 'HEAD',\n    });\n  }\n\n  private readonly onAuth: AuthCallback;\n\n  private readonly onProgressHandler = (): ProgressCallback => {\n    let currentPhase = '';\n\n    return event => {\n      if (currentPhase !== event.phase) {\n        currentPhase = event.phase;\n        this.config.logger?.info(event.phase);\n      }\n      const total = event.total\n        ? `${Math.round((event.loaded / event.total) * 100)}%`\n        : event.loaded;\n      this.config.logger?.debug(`status={${event.phase},total={${total}}}`);\n    };\n  };\n\n  static readonly fromAuth = (\n    options: StaticAuthOptions | AuthCallbackOptions,\n  ) => {\n    if (isAuthCallbackOptions(options)) {\n      const { onAuth, logger } = options;\n      return new Git({ onAuth, logger });\n    }\n\n    const { username, password, token, logger } = options;\n    return new Git({ onAuth: () => ({ username, password }), token, logger });\n  };\n}\n"],"names":["git","fs","http","logger"],"mappings":"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"}