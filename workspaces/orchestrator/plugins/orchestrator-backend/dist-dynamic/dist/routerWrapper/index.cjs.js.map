{"version":3,"file":"index.cjs.js","sources":["../../src/routerWrapper/index.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  AuditorService,\n  DiscoveryService,\n  HttpAuthService,\n  LoggerService,\n  PermissionsService,\n  SchedulerService,\n  UrlReaderService,\n  UserInfoService,\n} from '@backstage/backend-plugin-api';\nimport type { CatalogApi } from '@backstage/catalog-client';\nimport type { Config } from '@backstage/config';\n\nimport express from 'express';\n\nimport { DevModeService } from '../service/DevModeService';\nimport { createBackendRouter } from '../service/router';\n\nexport interface RouterOptions {\n  config: Config;\n  logger: LoggerService;\n  auditor: AuditorService;\n  discovery: DiscoveryService;\n  catalogApi: CatalogApi;\n  urlReader: UrlReaderService;\n  scheduler: SchedulerService;\n  permissions: PermissionsService;\n  httpAuth: HttpAuthService;\n  userInfo: UserInfoService;\n}\n\nexport async function createRouter(\n  args: RouterOptions,\n): Promise<express.Router> {\n  const autoStartDevMode =\n    args.config.getOptionalBoolean(\n      'orchestrator.sonataFlowService.autoStart',\n    ) ?? false;\n\n  if (autoStartDevMode) {\n    const devModeService = new DevModeService(args.config, args.logger);\n\n    const isSonataFlowUp = await devModeService.launchDevMode();\n\n    if (!isSonataFlowUp) {\n      args.logger.error('SonataFlow is not up. Check your configuration.');\n    }\n  }\n\n  return await createBackendRouter({\n    config: args.config,\n    logger: args.logger,\n    auditor: args.auditor,\n    discovery: args.discovery,\n    catalogApi: args.catalogApi,\n    urlReader: args.urlReader,\n    scheduler: args.scheduler,\n    permissions: args.permissions,\n    httpAuth: args.httpAuth,\n    userInfo: args.userInfo,\n  });\n}\n"],"names":["DevModeService","createBackendRouter"],"mappings":";;;;;AA+CA,eAAsB,aACpB,IAAA,EACyB;AACzB,EAAA,MAAM,gBAAA,GACJ,KAAK,MAAA,CAAO,kBAAA;AAAA,IACV;AAAA,GACF,IAAK,KAAA;AAEP,EAAA,IAAI,gBAAA,EAAkB;AACpB,IAAA,MAAM,iBAAiB,IAAIA,6BAAA,CAAe,IAAA,CAAK,MAAA,EAAQ,KAAK,MAAM,CAAA;AAElE,IAAA,MAAM,cAAA,GAAiB,MAAM,cAAA,CAAe,aAAA,EAAc;AAE1D,IAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,MAAA,IAAA,CAAK,MAAA,CAAO,MAAM,iDAAiD,CAAA;AAAA,IACrE;AAAA,EACF;AAEA,EAAA,OAAO,MAAMC,0BAAA,CAAoB;AAAA,IAC/B,QAAQ,IAAA,CAAK,MAAA;AAAA,IACb,QAAQ,IAAA,CAAK,MAAA;AAAA,IACb,SAAS,IAAA,CAAK,OAAA;AAAA,IACd,WAAW,IAAA,CAAK,SAAA;AAAA,IAChB,YAAY,IAAA,CAAK,UAAA;AAAA,IACjB,WAAW,IAAA,CAAK,SAAA;AAAA,IAChB,WAAW,IAAA,CAAK,SAAA;AAAA,IAChB,aAAa,IAAA,CAAK,WAAA;AAAA,IAClB,UAAU,IAAA,CAAK,QAAA;AAAA,IACf,UAAU,IAAA,CAAK;AAAA,GAChB,CAAA;AACH;;;;"}