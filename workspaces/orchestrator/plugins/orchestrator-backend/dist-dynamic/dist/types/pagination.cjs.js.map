{"version":3,"file":"pagination.cjs.js","sources":["../../src/types/pagination.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Request } from 'express-serve-static-core';\n\nimport { PaginationInfoDTO } from '@redhat/backstage-plugin-orchestrator-common';\n\nexport interface Pagination {\n  offset?: number;\n  limit?: number;\n  order?: string;\n  sortField?: string;\n}\n\nexport function buildPagination(req: Request): Pagination {\n  const pagination: Pagination = {\n    limit: undefined,\n    offset: undefined,\n    order: undefined,\n    sortField: undefined,\n  };\n\n  if (!req.body?.paginationInfo) {\n    return pagination;\n  }\n  const { offset, pageSize, orderBy, orderDirection } = req.body\n    .paginationInfo as PaginationInfoDTO;\n\n  if (!isNaN(Number(offset))) {\n    pagination.offset = Number(offset);\n  }\n\n  if (!isNaN(Number(pageSize))) {\n    pagination.limit = Number(pageSize);\n  }\n\n  if (orderBy) {\n    pagination.sortField = String(orderBy);\n  }\n\n  if (orderDirection) {\n    pagination.order = String(orderDirection).toUpperCase();\n  }\n  return pagination;\n}\n\nexport function buildPaginationTmp(\n  paginationInfo?: PaginationInfoDTO,\n): Pagination {\n  const pagination: Pagination = {\n    limit: undefined,\n    offset: undefined,\n    order: undefined,\n    sortField: undefined,\n  };\n\n  if (!paginationInfo) {\n    return pagination;\n  }\n  const { offset, pageSize, orderBy, orderDirection } = paginationInfo;\n\n  if (!isNaN(Number(offset))) {\n    pagination.offset = Number(offset);\n  }\n\n  if (!isNaN(Number(pageSize))) {\n    pagination.limit = Number(pageSize);\n  }\n\n  if (orderBy) {\n    pagination.sortField = String(orderBy);\n  }\n\n  if (orderDirection) {\n    pagination.order = String(orderDirection).toUpperCase();\n  }\n  return pagination;\n}\n"],"names":[],"mappings":";;AA0BO,SAAS,gBAAgB,GAAA,EAA0B;AACxD,EAAA,MAAM,UAAA,GAAyB;AAAA,IAC7B,KAAA,EAAO,MAAA;AAAA,IACP,MAAA,EAAQ,MAAA;AAAA,IACR,KAAA,EAAO,MAAA;AAAA,IACP,SAAA,EAAW;AAAA,GACb;AAEA,EAAA,IAAI,CAAC,GAAA,CAAI,IAAA,EAAM,cAAA,EAAgB;AAC7B,IAAA,OAAO,UAAA;AAAA,EACT;AACA,EAAA,MAAM,EAAE,MAAA,EAAQ,QAAA,EAAU,SAAS,cAAA,EAAe,GAAI,IAAI,IAAA,CACvD,cAAA;AAEH,EAAA,IAAI,CAAC,KAAA,CAAM,MAAA,CAAO,MAAM,CAAC,CAAA,EAAG;AAC1B,IAAA,UAAA,CAAW,MAAA,GAAS,OAAO,MAAM,CAAA;AAAA,EACnC;AAEA,EAAA,IAAI,CAAC,KAAA,CAAM,MAAA,CAAO,QAAQ,CAAC,CAAA,EAAG;AAC5B,IAAA,UAAA,CAAW,KAAA,GAAQ,OAAO,QAAQ,CAAA;AAAA,EACpC;AAEA,EAAA,IAAI,OAAA,EAAS;AACX,IAAA,UAAA,CAAW,SAAA,GAAY,OAAO,OAAO,CAAA;AAAA,EACvC;AAEA,EAAA,IAAI,cAAA,EAAgB;AAClB,IAAA,UAAA,CAAW,KAAA,GAAQ,MAAA,CAAO,cAAc,CAAA,CAAE,WAAA,EAAY;AAAA,EACxD;AACA,EAAA,OAAO,UAAA;AACT;;;;"}