{"version":3,"file":"filterBuilder.cjs.js","sources":["../../src/helpers/filterBuilder.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FieldFilter,\n  FieldFilterOperatorEnum,\n  Filter,\n  IntrospectionField,\n  LogicalFilter,\n  NestedFilter,\n  TypeName,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\ntype ProcessType = 'ProcessDefinition' | 'ProcessInstance';\n\nconst supportedOperators = [\n  FieldFilterOperatorEnum.Eq,\n  FieldFilterOperatorEnum.Like,\n  FieldFilterOperatorEnum.In,\n  FieldFilterOperatorEnum.IsNull,\n  FieldFilterOperatorEnum.Gt,\n  FieldFilterOperatorEnum.Gte,\n  FieldFilterOperatorEnum.Lt,\n  FieldFilterOperatorEnum.Lte,\n  FieldFilterOperatorEnum.Between,\n];\n\nconst supportedOperatorsByType: Record<TypeName, FieldFilterOperatorEnum[]> = {\n  [TypeName.String]: [\n    FieldFilterOperatorEnum.In,\n    FieldFilterOperatorEnum.Like,\n    FieldFilterOperatorEnum.IsNull,\n    FieldFilterOperatorEnum.Eq,\n  ],\n  [TypeName.Id]: [\n    FieldFilterOperatorEnum.In,\n    FieldFilterOperatorEnum.IsNull,\n    FieldFilterOperatorEnum.Eq,\n  ],\n  [TypeName.Date]: [\n    FieldFilterOperatorEnum.IsNull,\n    FieldFilterOperatorEnum.Eq,\n    FieldFilterOperatorEnum.Gt,\n    FieldFilterOperatorEnum.Gte,\n    FieldFilterOperatorEnum.Lt,\n    FieldFilterOperatorEnum.Lte,\n    FieldFilterOperatorEnum.Between,\n  ],\n};\n\nfunction isLogicalFilter(filter: Filter): filter is LogicalFilter {\n  return (filter as LogicalFilter).filters !== undefined;\n}\n\nfunction isNestedFilter(filter: Filter): filter is NestedFilter {\n  return (filter as NestedFilter).nested !== undefined;\n}\n\nfunction handleLogicalFilter(\n  introspection: IntrospectionField[],\n  type: ProcessType,\n  filter: LogicalFilter,\n): string {\n  if (!filter.operator) return '';\n\n  const subClauses = filter.filters.map(f =>\n    buildFilterCondition(introspection, type, f),\n  );\n\n  return `${filter.operator.toLowerCase()}: {${subClauses.join(', ')}}`;\n}\n\nfunction handleNestedFilter(\n  introspection: IntrospectionField[],\n  type: ProcessType,\n  filter: NestedFilter,\n): string {\n  const subClauses = buildFilterCondition(\n    introspection,\n    type,\n    filter.nested,\n    true,\n  );\n\n  return `${filter.field}: {${subClauses}}`;\n}\n\nfunction handleBetweenOperator(filter: FieldFilter): string {\n  if (!Array.isArray(filter.value) || filter.value.length !== 2) {\n    throw new Error('Between operator requires an array of two elements');\n  }\n  return `${filter.field}: {${getGraphQLOperator(\n    FieldFilterOperatorEnum.Between,\n  )}: {from: \"${filter.value[0]}\", to: \"${filter.value[1]}\"}}`;\n}\n\nfunction handleIsNullOperator(filter: FieldFilter): string {\n  return `${filter.field}: {${getGraphQLOperator(\n    FieldFilterOperatorEnum.IsNull,\n  )}: ${convertToBoolean(filter.value)}}`;\n}\n\nfunction isEnumFilter(\n  fieldName: string,\n  type: 'ProcessDefinition' | 'ProcessInstance',\n): boolean {\n  if (type === 'ProcessInstance') {\n    if (fieldName === 'state') {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isValidEnumOperator(operator: FieldFilterOperatorEnum): boolean {\n  return (\n    operator === FieldFilterOperatorEnum.In ||\n    operator === FieldFilterOperatorEnum.Eq\n  );\n}\n\nfunction handleBinaryOperator(\n  binaryFilter: FieldFilter,\n  fieldDef: IntrospectionField | undefined,\n  type: 'ProcessDefinition' | 'ProcessInstance',\n): string {\n  if (isEnumFilter(binaryFilter.field, type)) {\n    if (!isValidEnumOperator(binaryFilter.operator)) {\n      throw new Error(\n        `Invalid operator ${binaryFilter.operator} for enum field ${binaryFilter.field} filter`,\n      );\n    }\n  }\n  const formattedValue = Array.isArray(binaryFilter.value)\n    ? `[${binaryFilter.value\n        .map(v => formatValue(binaryFilter.field, v, fieldDef, type))\n        .join(', ')}]`\n    : formatValue(binaryFilter.field, binaryFilter.value, fieldDef, type);\n  return `${binaryFilter.field}: {${getGraphQLOperator(\n    binaryFilter.operator,\n  )}: ${formattedValue}}`;\n}\n\nexport function buildFilterCondition(\n  introspection: IntrospectionField[],\n  type: ProcessType,\n  filters?: Filter,\n  isNested?: boolean,\n): string {\n  if (!filters) {\n    return '';\n  }\n\n  if (isNestedFilter(filters)) {\n    return handleNestedFilter(introspection, type, filters);\n  }\n\n  if (isLogicalFilter(filters)) {\n    return handleLogicalFilter(introspection, type, filters);\n  }\n\n  if (!isOperatorSupported(filters.operator)) {\n    throw new Error(\n      `Unsupported operator ${filters.operator}. Supported operators are: ${supportedOperators.join(', ')}`,\n    );\n  }\n\n  let fieldDef;\n\n  if (!isNested) {\n    fieldDef = introspection.find(f => f.name === filters.field);\n    if (!fieldDef) {\n      throw new Error(`Can't find field \"${filters.field}\" definition`);\n    }\n\n    if (!isOperatorAllowedForField(filters.operator, fieldDef, type)) {\n      const allowedOperators =\n        supportedOperatorsByType[fieldDef.type.name] || [];\n      throw new Error(\n        `Unsupported operator ${filters.operator} for field \"${fieldDef.name}\" of type \"${fieldDef.type.name}\". Allowed operators are: ${allowedOperators.join(', ')}`,\n      );\n    }\n  }\n\n  switch (filters.operator) {\n    case FieldFilterOperatorEnum.IsNull:\n      return handleIsNullOperator(filters);\n    case FieldFilterOperatorEnum.Between:\n      return handleBetweenOperator(filters);\n    case FieldFilterOperatorEnum.Eq:\n    case FieldFilterOperatorEnum.Like:\n    case FieldFilterOperatorEnum.In:\n    case FieldFilterOperatorEnum.Gt:\n    case FieldFilterOperatorEnum.Gte:\n    case FieldFilterOperatorEnum.Lt:\n    case FieldFilterOperatorEnum.Lte:\n      return handleBinaryOperator(filters, fieldDef, type);\n\n    default:\n      throw new Error(`Can't build filter condition`);\n  }\n}\n\nfunction isOperatorSupported(operator: FieldFilterOperatorEnum): boolean {\n  return supportedOperators.includes(operator);\n}\n\nfunction isFieldFilterSupported(fieldDef: IntrospectionField): boolean {\n  return fieldDef?.type.name === TypeName.String;\n}\n\nexport function isOperatorAllowedForField(\n  operator: FieldFilterOperatorEnum,\n  fieldDef: IntrospectionField,\n  type: ProcessType,\n): boolean {\n  if (isEnumFilter(fieldDef.name, type) && isValidEnumOperator(operator)) {\n    return true;\n  }\n\n  const allowedForType = supportedOperatorsByType[fieldDef.type.name];\n  return allowedForType ? allowedForType.includes(operator) : false;\n}\n\nfunction convertToBoolean(value: any): boolean {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return value.toLowerCase() === 'true';\n  }\n  if (typeof value === 'number') {\n    return value === 1;\n  }\n  return false; // Default to false for unsupported types\n}\n\nfunction formatValue(\n  fieldName: string,\n  fieldValue: any,\n  fieldDef: IntrospectionField | undefined,\n  type: ProcessType,\n): string {\n  if (!fieldDef) {\n    return `\"${fieldValue}\"`;\n  }\n\n  if (!isFieldFilterSupported) {\n    throw new Error(`Unsupported field type ${fieldDef.type.name}`);\n  }\n\n  if (isEnumFilter(fieldName, type)) {\n    return `${fieldValue}`;\n  }\n  if (\n    fieldDef.type.name === TypeName.String ||\n    fieldDef.type.name === TypeName.Id ||\n    fieldDef.type.name === TypeName.Date\n  ) {\n    return `\"${fieldValue}\"`;\n  }\n  throw new Error(\n    `Failed to format value for ${fieldName} ${fieldValue} with type ${fieldDef.type.name}`,\n  );\n}\n\nfunction getGraphQLOperator(operator: FieldFilterOperatorEnum): string {\n  switch (operator) {\n    case 'EQ':\n      return 'equal';\n    case 'LIKE':\n      return 'like';\n    case 'IN':\n      return 'in';\n    case 'IS_NULL':\n      return 'isNull';\n    case 'GT':\n      return 'greaterThan';\n    case 'GTE':\n      return 'greaterThanEqual';\n    case 'LT':\n      return 'lessThan';\n    case 'LTE':\n      return 'lessThanEqual';\n    case 'BETWEEN':\n      return 'between';\n    default:\n      throw new Error(`Operation \"${operator}\" not supported`);\n  }\n}\n"],"names":["FieldFilterOperatorEnum","TypeName"],"mappings":"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"}