{"version":3,"file":"SonataFlowService.cjs.js","sources":["../../src/service/SonataFlowService.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nimport capitalize from 'lodash/capitalize';\n\nimport {\n  AuthToken,\n  extractWorkflowFormat,\n  Filter,\n  fromWorkflowSource,\n  ProcessInstanceStateValues,\n  ProcessInstanceVariables,\n  WorkflowDefinition,\n  WorkflowExecutionResponse,\n  WorkflowInfo,\n  WorkflowOverview,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { Pagination } from '../types/pagination';\nimport { DataIndexService } from './DataIndexService';\n\nexport class SonataFlowService {\n  constructor(\n    private readonly dataIndexService: DataIndexService,\n    private readonly logger: LoggerService,\n  ) {}\n\n  public async fetchWorkflowInfoOnService(args: {\n    definitionId: string;\n    serviceUrl: string;\n  }): Promise<WorkflowInfo | undefined> {\n    const urlToFetch = `${args.serviceUrl}/management/processes/${args.definitionId}`;\n    let response: Response | undefined;\n    try {\n      response = await fetch(urlToFetch);\n    } catch (error) {\n      this.logger.error(\n        `Failed to fetch from ${urlToFetch}: ${(error as Error).message}`,\n      );\n    }\n\n    const jsonResponse = await this.handleWorkflowServiceResponse(\n      'Get workflow info',\n      args.definitionId,\n      urlToFetch,\n      response,\n      'GET',\n    );\n    this.logger.debug(\n      `Fetch workflow info result: ${JSON.stringify(jsonResponse)}`,\n    );\n    return jsonResponse;\n  }\n\n  public async fetchWorkflowDefinition(\n    definitionId: string,\n  ): Promise<WorkflowDefinition | undefined> {\n    const source =\n      await this.dataIndexService.fetchWorkflowSource(definitionId);\n    if (source) {\n      return fromWorkflowSource(source);\n    }\n    return undefined;\n  }\n\n  public async fetchWorkflowOverviews(args: {\n    definitionIds?: string[];\n    pagination?: Pagination;\n    filter?: Filter;\n    targetEntity?: string;\n  }): Promise<WorkflowOverview[] | undefined> {\n    const { definitionIds, pagination, filter, targetEntity } = args;\n    const workflowInfos = await this.dataIndexService.fetchWorkflowInfos({\n      definitionIds,\n      pagination,\n      filter,\n    });\n    if (!workflowInfos?.length) {\n      return [];\n    }\n    const items = await Promise.all(\n      workflowInfos\n        .filter(info => info.source)\n        .map(info =>\n          this.fetchWorkflowOverviewBySource(info.source!, targetEntity),\n        ),\n    );\n    return items.filter((item): item is WorkflowOverview => !!item);\n  }\n\n  public async executeWorkflow(args: {\n    definitionId: string;\n    serviceUrl: string;\n    inputData?: ProcessInstanceVariables;\n    authTokens?: Array<AuthToken>;\n    backstageToken?: string | undefined;\n  }): Promise<WorkflowExecutionResponse | undefined> {\n    const urlToFetch = `${args.serviceUrl}/${args.definitionId}`;\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n\n    this.addAuthHeaders(headers, args.authTokens, args.backstageToken);\n    const headerKeys = Object.keys(headers);\n    this.logger.info(\n      `Executing workflow ${args.definitionId} with headers: ${headerKeys.join(', ')}`,\n    );\n\n    let response: Response | undefined;\n    try {\n      response = await fetch(urlToFetch, {\n        method: 'POST',\n        body: JSON.stringify(args.inputData || {}),\n        headers,\n      });\n    } catch (error) {\n      this.logger.error(\n        `Failed to fetch from ${urlToFetch}: ${(error as Error).message}`,\n      );\n    }\n\n    const json = await this.handleWorkflowServiceResponse(\n      'Execute',\n      args.definitionId,\n      urlToFetch,\n      response,\n      'POST',\n    );\n    if (json.id) {\n      this.logger.debug(\n        `Execute workflow successful. Response: ${JSON.stringify(json)}`,\n      );\n      return json;\n    }\n    this.logger.error(\n      `Execute workflow did not return a workflow instance ID. Response: ${JSON.stringify(\n        json,\n      )}`,\n    );\n    throw new Error('Execute workflow did not return a workflow instance ID');\n  }\n\n  private addAuthHeaders(\n    headers: Record<string, string>,\n    authTokens?: Array<AuthToken>,\n    backstageToken?: string | undefined,\n  ) {\n    // Add X-Authentication headers from authTokens\n    if (authTokens && Array.isArray(authTokens)) {\n      authTokens.forEach(tokenObj => {\n        if (tokenObj.provider && tokenObj.token) {\n          const headerKey = `X-Authorization-${capitalize(tokenObj.provider)}`;\n          headers[headerKey] = String(tokenObj.token); // Ensure token is a string\n        }\n      });\n    } else {\n      this.logger.debug(\n        'No authTokens provided or authTokens is not an array.',\n      );\n    }\n\n    if (backstageToken) {\n      const headerKey = 'X-Authorization-Backstage';\n      headers[headerKey] = backstageToken;\n    }\n  }\n\n  public async retriggerInstance(args: {\n    definitionId: string;\n    instanceId: string;\n    serviceUrl: string;\n    authTokens?: Array<AuthToken>;\n    backstageToken?: string | undefined;\n  }): Promise<boolean> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n\n    this.addAuthHeaders(headers, args.authTokens, args.backstageToken);\n    const headerKeys = Object.keys(headers);\n    this.logger.info(\n      `Retriggering workflow ${args.definitionId} with headers: ${headerKeys.join(', ')}`,\n    );\n\n    const urlToFetch = `${args.serviceUrl}/management/processes/${args.definitionId}/instances/${args.instanceId}/retrigger`;\n\n    let response: Response | undefined;\n    try {\n      response = await fetch(urlToFetch, {\n        method: 'POST',\n        headers,\n      });\n    } catch (error) {\n      this.logger.error(\n        `Failed to fetch from ${urlToFetch}: ${(error as Error).message}`,\n      );\n    }\n\n    await this.handleWorkflowServiceResponse(\n      'Retrigger',\n      args.definitionId,\n      urlToFetch,\n      response,\n      'POST',\n    );\n\n    return true;\n  }\n\n  public async abortInstance(args: {\n    definitionId: string;\n    instanceId: string;\n    serviceUrl: string;\n  }): Promise<void> {\n    const urlToFetch = `${args.serviceUrl}/management/processes/${args.definitionId}/instances/${args.instanceId}`;\n\n    let response: Response | undefined;\n    try {\n      response = await fetch(urlToFetch, {\n        method: 'DELETE',\n      });\n    } catch (error) {\n      this.logger.error(\n        `Failed to fetch from ${urlToFetch}: ${(error as Error).message}`,\n      );\n    }\n\n    await this.handleWorkflowServiceResponse(\n      'Abort',\n      args.definitionId,\n      urlToFetch,\n      response,\n      'DELETE',\n    );\n  }\n\n  public async fetchWorkflowOverview(\n    definitionId: string,\n  ): Promise<WorkflowOverview | undefined> {\n    const source =\n      await this.dataIndexService.fetchWorkflowSource(definitionId);\n    if (!source) {\n      this.logger.debug(`Workflow source not found: ${definitionId}`);\n      return undefined;\n    }\n    return await this.fetchWorkflowOverviewBySource(source);\n  }\n\n  private async fetchWorkflowOverviewBySource(\n    source: string,\n    targetEntity?: string,\n  ): Promise<WorkflowOverview | undefined> {\n    let lastTriggered: Date = new Date(0);\n    let lastRunStatus: ProcessInstanceStateValues | undefined;\n    let lastRunId: string | undefined;\n    const definition = fromWorkflowSource(source);\n\n    const processInstances =\n      await this.dataIndexService.fetchInstancesByDefinitionId({\n        definitionId: definition.id,\n        limit: 1,\n        offset: 0,\n        targetEntity: targetEntity,\n      });\n\n    const pInstance = processInstances[0];\n\n    if (pInstance?.start) {\n      lastRunId = pInstance.id;\n      lastTriggered = new Date(pInstance.start);\n      lastRunStatus = pInstance.state;\n    }\n\n    return {\n      workflowId: definition.id,\n      name: definition.name,\n      format: extractWorkflowFormat(source),\n      lastRunId,\n      lastTriggeredMs: lastTriggered.getTime(),\n      lastRunStatus,\n      description: definition.description,\n    };\n  }\n\n  public async pingWorkflowService(args: {\n    definitionId: string;\n    serviceUrl: string;\n  }): Promise<boolean> {\n    const urlToFetch = `${args.serviceUrl}/management/processes/${args.definitionId}`;\n    let response: Response | undefined;\n    try {\n      response = await fetch(urlToFetch);\n    } catch (error) {\n      this.logger.error(\n        `Failed to fetch from ${urlToFetch}: ${(error as Error).message}`,\n      );\n      return false;\n    }\n    return response.ok;\n  }\n\n  private async handleWorkflowServiceResponse(\n    operation: 'Abort' | 'Execute' | 'Retrigger' | 'Get workflow info',\n    workflowId: string,\n    urlToFetch: string,\n    response: Response | undefined,\n    httpMethod: Request['method'],\n  ): Promise<any> {\n    const logErrorPrefix = `Error during operation '${operation}' on workflow ${workflowId} with service URL ${urlToFetch}`;\n    if (!response) {\n      throw new Error(`${logErrorPrefix} : fetch failed`);\n    }\n    const errorLines: string[] = [];\n    errorLines.push(`HTTP ${httpMethod} request to ${urlToFetch} failed.`);\n    errorLines.push(`Status Code: ${response.status}`);\n    if (response.statusText) {\n      errorLines.push(`Status Text: ${response.statusText}`);\n    }\n    try {\n      const jsonResponse = await response.json();\n      if ((jsonResponse.id && operation === 'Execute') || response.ok) {\n        // Treat as successful from the UI perspective.\n        // This allows navigation to the instance page even if the workflow execution\n        // fails immediately after initiation. The presence of an instance id or a successful\n        // 'ok' status indicates the initiation was successful.\n        return jsonResponse;\n      }\n      if (jsonResponse?.message) {\n        errorLines.push(`Message: ${jsonResponse.message}`);\n      }\n      if (jsonResponse?.details) {\n        errorLines.push(`Details: ${jsonResponse.details}`);\n      }\n      if (jsonResponse?.stack) {\n        errorLines.push(`Stack Trace: ${jsonResponse.stack}`);\n      }\n      if (jsonResponse?.failedNodeId) {\n        errorLines.push(`Failed Node ID: ${jsonResponse.failedNodeId}`);\n      }\n      this.logger.error(`${logErrorPrefix}: ${JSON.stringify(jsonResponse)}`);\n    } catch (jsonParseError) {\n      this.logger.error(\n        `${logErrorPrefix}. The details of this error cannot be provided because the response body was not in a parsable format.`,\n      );\n    }\n    throw new Error(errorLines.join('\\n'));\n  }\n}\n"],"names":["fromWorkflowSource","capitalize","extractWorkflowFormat"],"mappings":"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"}