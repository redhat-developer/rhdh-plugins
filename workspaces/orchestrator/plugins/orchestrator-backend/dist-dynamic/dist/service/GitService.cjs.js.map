{"version":3,"file":"GitService.cjs.js","sources":["../../src/service/GitService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { LoggerService } from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\nimport { ScmIntegrations } from '@backstage/integration';\n\nimport { Git } from './GitWrapper';\n\nexport class GitService {\n  private readonly git: Git;\n\n  private readonly logger: LoggerService;\n  private authenticated: boolean;\n\n  private readonly author = {\n    name: 'backstage-orchestrator',\n    email: 'orchestrator@backstage.io',\n  };\n\n  private readonly committer = {\n    name: 'backstage-orchestrator',\n    email: 'orchestrator@backstage.io',\n  };\n\n  constructor(logger: LoggerService, config: Config) {\n    this.logger = logger;\n    const githubIntegration = ScmIntegrations.fromConfig(config)\n      .github.list()\n      .pop();\n    this.git = Git.fromAuth({\n      username: 'x-access-token',\n      password: githubIntegration?.config.token,\n    });\n    this.authenticated = !!githubIntegration?.config.token;\n  }\n\n  async clone(repoURL: string, localPath: string): Promise<void> {\n    this.logger.info(`cloning repo ${repoURL} into ${localPath}`);\n    return this.git\n      .clone({\n        url: repoURL,\n        dir: localPath,\n        depth: 1,\n      })\n      .then(() => this.git.checkout({ dir: localPath, ref: 'main' }));\n  }\n\n  async push(dir: string, message: string): Promise<void> {\n    if (!this.authenticated) {\n      this.logger.warn(\n        'Git integration is required to be configured for push, with the token or credentials',\n      );\n      return;\n    }\n    const branch = 'main';\n    const force = true;\n    const remote = 'origin';\n    const filepath = '.';\n    this.git\n      .fetch({ remote, dir })\n      .then(() => this.git.checkout({ dir, ref: branch }))\n      .then(() => this.git.add({ dir, filepath }))\n      .then(() =>\n        this.git.commit({\n          dir,\n          message,\n          author: this.author,\n          committer: this.committer,\n        }),\n      )\n      .then(() => this.git.push({ dir, remote, remoteRef: branch, force }))\n      .finally(() => this.logger.info('push completed'))\n      .catch(ex => this.logger.error(ex));\n  }\n\n  async pull(localPath: string): Promise<void> {\n    const remoteBranch = 'origin/main';\n    const localBranch = 'main';\n    const remote = 'origin';\n    this.git\n      .fetch({ remote, dir: localPath })\n      .then(() => this.git.checkout({ dir: localPath, ref: localBranch }))\n      .then(() =>\n        this.git.merge({\n          dir: localPath,\n          ours: localBranch,\n          theirs: remoteBranch,\n          author: this.author,\n          committer: this.committer,\n        }),\n      )\n      .finally(() => this.logger.info('merge completed'))\n      .catch(ex => this.logger.error(ex));\n  }\n}\n"],"names":["ScmIntegrations","Git"],"mappings":"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"}