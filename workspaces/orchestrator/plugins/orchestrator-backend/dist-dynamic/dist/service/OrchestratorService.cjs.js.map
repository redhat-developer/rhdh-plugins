{"version":3,"file":"OrchestratorService.cjs.js","sources":["../../src/service/OrchestratorService.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthToken,\n  Filter,\n  ProcessInstance,\n  ProcessInstanceVariables,\n  WorkflowDefinition,\n  WorkflowExecutionResponse,\n  WorkflowInfo,\n  WorkflowOverview,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nimport { Pagination } from '../types/pagination';\nimport { DataIndexService } from './DataIndexService';\nimport { SonataFlowService } from './SonataFlowService';\nimport { WorkflowCacheService } from './WorkflowCacheService';\n\nexport class OrchestratorService {\n  constructor(\n    private readonly sonataFlowService: SonataFlowService,\n    private readonly dataIndexService: DataIndexService,\n    private readonly workflowCacheService: WorkflowCacheService,\n  ) {}\n\n  // Data Index Service Wrapper\n  public getWorkflowIds(): string[] {\n    return this.workflowCacheService.definitionIds;\n  }\n\n  public async abortWorkflowInstance(args: {\n    definitionId: string;\n    instanceId: string;\n    serviceUrl: string;\n  }): Promise<void> {\n    return await this.sonataFlowService.abortInstance(args);\n  }\n\n  public async fetchWorkflowInfo(args: {\n    definitionId: string;\n  }): Promise<WorkflowInfo | undefined> {\n    const { definitionId } = args;\n    return await this.dataIndexService.fetchWorkflowInfo(definitionId);\n  }\n\n  public async fetchInstances(args: {\n    pagination?: Pagination;\n    filter?: Filter;\n    workflowIds?: string[];\n  }): Promise<ProcessInstance[]> {\n    const definitionIds = args.workflowIds\n      ? args.workflowIds\n      : this.workflowCacheService.definitionIds;\n    return await this.dataIndexService.fetchInstances({\n      definitionIds: definitionIds,\n      pagination: args.pagination,\n      filter: args.filter,\n    });\n  }\n\n  public async fetchDefinitionIdsFromInstances(args: {\n    targetEntity: string;\n  }): Promise<string[]> {\n    return await this.dataIndexService.fetchDefinitionIdsFromInstances(args);\n  }\n\n  public async fetchWorkflowSource(args: {\n    definitionId: string;\n  }): Promise<string | undefined> {\n    const { definitionId } = args;\n    return await this.dataIndexService.fetchWorkflowSource(definitionId);\n  }\n\n  public async fetchInstanceVariables(args: {\n    instanceId: string;\n  }): Promise<object | undefined> {\n    const { instanceId } = args;\n    return await this.dataIndexService.fetchInstanceVariables(instanceId);\n  }\n\n  public async fetchInstance(args: {\n    instanceId: string;\n  }): Promise<ProcessInstance | undefined> {\n    const { instanceId } = args;\n    const instance = await this.dataIndexService.fetchInstance(instanceId);\n    return instance;\n  }\n\n  // SonataFlow Service Wrapper\n\n  public async fetchWorkflowInfoOnService(args: {\n    definitionId: string;\n    serviceUrl: string;\n  }): Promise<WorkflowInfo | undefined> {\n    return await this.sonataFlowService.fetchWorkflowInfoOnService(args);\n  }\n\n  public async fetchWorkflowDefinition(args: {\n    definitionId: string;\n  }): Promise<WorkflowDefinition | undefined> {\n    const { definitionId } = args;\n    return await this.sonataFlowService.fetchWorkflowDefinition(definitionId);\n  }\n\n  public async fetchWorkflowOverviews(args: {\n    pagination?: Pagination;\n    filter?: Filter;\n    targetEntity?: string;\n  }): Promise<WorkflowOverview[] | undefined> {\n    const overviews = await this.sonataFlowService.fetchWorkflowOverviews({\n      definitionIds: this.workflowCacheService.definitionIds?.concat(\n        this.workflowCacheService.unavailableDefinitionIds,\n      ),\n      pagination: args.pagination,\n      filter: args.filter,\n      targetEntity: args.targetEntity,\n    });\n\n    return overviews?.map(overview => {\n      const updatedOverview = overview;\n      updatedOverview.isAvailable = this.workflowCacheService.isAvailable(\n        updatedOverview.workflowId,\n      );\n      return updatedOverview;\n    });\n  }\n\n  public async executeWorkflow(args: {\n    definitionId: string;\n    serviceUrl: string;\n    inputData?: ProcessInstanceVariables;\n    authTokens?: Array<AuthToken>;\n    backstageToken?: string | undefined;\n  }): Promise<WorkflowExecutionResponse | undefined> {\n    return await this.sonataFlowService.executeWorkflow(args);\n  }\n\n  public async retriggerWorkflow(args: {\n    definitionId: string;\n    instanceId: string;\n    serviceUrl: string;\n    authTokens?: Array<AuthToken>;\n    backstageToken?: string | undefined;\n  }): Promise<boolean | undefined> {\n    return this.sonataFlowService.retriggerInstance(args);\n  }\n\n  public async fetchWorkflowOverview(args: {\n    definitionId: string;\n  }): Promise<WorkflowOverview | undefined> {\n    const { definitionId } = args;\n    const isWorkflowAvailable =\n      this.workflowCacheService.isAvailable(definitionId);\n    const overview =\n      await this.sonataFlowService.fetchWorkflowOverview(definitionId);\n    if (overview) overview.isAvailable = isWorkflowAvailable; // workflow overview is avaiable but the workflow itself is not\n    return overview;\n  }\n\n  public async pingWorkflowService(args: {\n    definitionId: string;\n    serviceUrl: string;\n  }): Promise<boolean | undefined> {\n    const { definitionId, serviceUrl } = args;\n    const isServiceUp = await this.sonataFlowService.pingWorkflowService({\n      definitionId,\n      serviceUrl,\n    });\n    return isServiceUp;\n  }\n}\n"],"names":[],"mappings":"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"}