{"version":3,"file":"api.cjs.js","sources":["../../../src/generated/client/api.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Orchestrator plugin\n * API to interact with orchestrator plugin\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';\n\n/**\n * \n * @export\n * @interface AuthToken\n */\nexport interface AuthToken {\n    /**\n     * The auth token provider name\n     * @type {string}\n     * @memberof AuthToken\n     */\n    'provider': string;\n    /**\n     * The auth token itself retrieved from the above specified provider name\n     * @type {string}\n     * @memberof AuthToken\n     */\n    'token': string;\n}\n/**\n * The ErrorResponse object represents a common structure for handling errors in API responses. It includes essential information about the error, such as the error message and additional optional details.\n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * A string providing a concise and human-readable description of the encountered error. This field is required in the ErrorResponse object.\n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'message': string;\n    /**\n     * An optional field that can contain additional information or context about the error. It provides flexibility for including extra details based on specific error scenarios.\n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'additionalInfo'?: string;\n}\n/**\n * \n * @export\n * @interface ExecuteWorkflowRequestDTO\n */\nexport interface ExecuteWorkflowRequestDTO {\n    /**\n     * \n     * @type {object}\n     * @memberof ExecuteWorkflowRequestDTO\n     */\n    'inputData'?: object;\n    /**\n     * \n     * @type {Array<AuthToken>}\n     * @memberof ExecuteWorkflowRequestDTO\n     */\n    'authTokens'?: Array<AuthToken>;\n    /**\n     * The entity string identifier to execute the workflow for\n     * @type {string}\n     * @memberof ExecuteWorkflowRequestDTO\n     */\n    'targetEntity'?: string;\n}\n/**\n * \n * @export\n * @interface ExecuteWorkflowResponseDTO\n */\nexport interface ExecuteWorkflowResponseDTO {\n    /**\n     * \n     * @type {string}\n     * @memberof ExecuteWorkflowResponseDTO\n     */\n    'id': string;\n}\n/**\n * \n * @export\n * @interface FieldFilter\n */\nexport interface FieldFilter {\n    /**\n     * \n     * @type {string}\n     * @memberof FieldFilter\n     */\n    'field': string;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldFilter\n     */\n    'operator': FieldFilterOperatorEnum;\n    /**\n     * \n     * @type {FieldFilterValue}\n     * @memberof FieldFilter\n     */\n    'value': FieldFilterValue;\n}\n\nexport const FieldFilterOperatorEnum = {\n    Eq: 'EQ',\n    Gt: 'GT',\n    Gte: 'GTE',\n    Lt: 'LT',\n    Lte: 'LTE',\n    In: 'IN',\n    IsNull: 'IS_NULL',\n    Like: 'LIKE',\n    Between: 'BETWEEN'\n} as const;\n\nexport type FieldFilterOperatorEnum = typeof FieldFilterOperatorEnum[keyof typeof FieldFilterOperatorEnum];\n\n/**\n * @type FieldFilterValue\n * @export\n */\nexport type FieldFilterValue = any | boolean | number | string;\n\n/**\n * @type Filter\n * @export\n */\nexport type Filter = FieldFilter | LogicalFilter | NestedFilter;\n\n/**\n * \n * @export\n * @interface GetOverviewsRequestParams\n */\nexport interface GetOverviewsRequestParams {\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof GetOverviewsRequestParams\n     */\n    'paginationInfo'?: PaginationInfoDTO;\n    /**\n     * \n     * @type {SearchRequest}\n     * @memberof GetOverviewsRequestParams\n     */\n    'filters'?: SearchRequest;\n}\n/**\n * \n * @export\n * @interface GetWorkflowsOverviewForEntityRequest\n */\nexport interface GetWorkflowsOverviewForEntityRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkflowsOverviewForEntityRequest\n     */\n    'targetEntity'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GetWorkflowsOverviewForEntityRequest\n     */\n    'annotationWorkflowIds'?: Array<string>;\n}\n/**\n * \n * @export\n * @interface InputSchemaResponseDTO\n */\nexport interface InputSchemaResponseDTO {\n    /**\n     * \n     * @type {object}\n     * @memberof InputSchemaResponseDTO\n     */\n    'inputSchema'?: object;\n    /**\n     * \n     * @type {object}\n     * @memberof InputSchemaResponseDTO\n     */\n    'data'?: object;\n}\n/**\n * \n * @export\n * @interface LogicalFilter\n */\nexport interface LogicalFilter {\n    /**\n     * \n     * @type {string}\n     * @memberof LogicalFilter\n     */\n    'operator': LogicalFilterOperatorEnum;\n    /**\n     * \n     * @type {Array<Filter>}\n     * @memberof LogicalFilter\n     */\n    'filters': Array<Filter>;\n}\n\nexport const LogicalFilterOperatorEnum = {\n    And: 'AND',\n    Or: 'OR',\n    Not: 'NOT'\n} as const;\n\nexport type LogicalFilterOperatorEnum = typeof LogicalFilterOperatorEnum[keyof typeof LogicalFilterOperatorEnum];\n\n/**\n * \n * @export\n * @interface NestedFilter\n */\nexport interface NestedFilter {\n    /**\n     * \n     * @type {string}\n     * @memberof NestedFilter\n     */\n    'field': string;\n    /**\n     * \n     * @type {NestedFilterNested}\n     * @memberof NestedFilter\n     */\n    'nested': NestedFilterNested;\n}\n/**\n * @type NestedFilterNested\n * @export\n */\nexport type NestedFilterNested = FieldFilter | NestedFilter;\n\n/**\n * \n * @export\n * @interface NodeInstanceDTO\n */\nexport interface NodeInstanceDTO {\n    /**\n     * Type name\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    '__typename'?: string;\n    /**\n     * Node instance ID\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'id': string;\n    /**\n     * Node name\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'name'?: string;\n    /**\n     * Node type\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'type'?: string;\n    /**\n     * Date when the node was entered\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'enter'?: string;\n    /**\n     * Date when the node was exited (optional)\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'exit'?: string;\n    /**\n     * Definition ID\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'definitionId'?: string;\n    /**\n     * Node ID\n     * @type {string}\n     * @memberof NodeInstanceDTO\n     */\n    'nodeId'?: string;\n}\n/**\n * \n * @export\n * @interface PaginationInfoDTO\n */\nexport interface PaginationInfoDTO {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginationInfoDTO\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginationInfoDTO\n     */\n    'offset'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PaginationInfoDTO\n     */\n    'orderDirection'?: PaginationInfoDTOOrderDirectionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof PaginationInfoDTO\n     */\n    'orderBy'?: string;\n}\n\nexport const PaginationInfoDTOOrderDirectionEnum = {\n    Asc: 'ASC',\n    Desc: 'DESC'\n} as const;\n\nexport type PaginationInfoDTOOrderDirectionEnum = typeof PaginationInfoDTOOrderDirectionEnum[keyof typeof PaginationInfoDTOOrderDirectionEnum];\n\n/**\n * \n * @export\n * @interface ProcessInstanceDTO\n */\nexport interface ProcessInstanceDTO {\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'processId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'processName'?: string;\n    /**\n     * \n     * @type {ProcessInstanceStatusDTO}\n     * @memberof ProcessInstanceDTO\n     */\n    'state'?: ProcessInstanceStatusDTO;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'endpoint'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'serviceUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'start'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'end'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'duration'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {WorkflowDataDTO}\n     * @memberof ProcessInstanceDTO\n     */\n    'workflowdata'?: WorkflowDataDTO;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'initiatorEntity'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessInstanceDTO\n     */\n    'targetEntity'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ProcessInstanceDTO\n     */\n    'executionSummary'?: Array<string>;\n    /**\n     * \n     * @type {Array<NodeInstanceDTO>}\n     * @memberof ProcessInstanceDTO\n     */\n    'nodes': Array<NodeInstanceDTO>;\n    /**\n     * \n     * @type {ProcessInstanceErrorDTO}\n     * @memberof ProcessInstanceDTO\n     */\n    'error'?: ProcessInstanceErrorDTO;\n}\n\n\n/**\n * \n * @export\n * @interface ProcessInstanceErrorDTO\n */\nexport interface ProcessInstanceErrorDTO {\n    /**\n     * Type name\n     * @type {string}\n     * @memberof ProcessInstanceErrorDTO\n     */\n    '__typename'?: string;\n    /**\n     * Node definition ID\n     * @type {string}\n     * @memberof ProcessInstanceErrorDTO\n     */\n    'nodeDefinitionId': string;\n    /**\n     * Error message (optional)\n     * @type {string}\n     * @memberof ProcessInstanceErrorDTO\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface ProcessInstanceListResultDTO\n */\nexport interface ProcessInstanceListResultDTO {\n    /**\n     * \n     * @type {Array<ProcessInstanceDTO>}\n     * @memberof ProcessInstanceListResultDTO\n     */\n    'items'?: Array<ProcessInstanceDTO>;\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof ProcessInstanceListResultDTO\n     */\n    'paginationInfo'?: PaginationInfoDTO;\n}\n/**\n * Status of the workflow run\n * @export\n * @enum {string}\n */\n\nexport const ProcessInstanceStatusDTO = {\n    Active: 'ACTIVE',\n    Error: 'ERROR',\n    Completed: 'COMPLETED',\n    Aborted: 'ABORTED',\n    Suspended: 'SUSPENDED',\n    Pending: 'PENDING'\n} as const;\n\nexport type ProcessInstanceStatusDTO = typeof ProcessInstanceStatusDTO[keyof typeof ProcessInstanceStatusDTO];\n\n\n/**\n * \n * @export\n * @interface RetriggerInstanceRequestDTO\n */\nexport interface RetriggerInstanceRequestDTO {\n    /**\n     * \n     * @type {Array<AuthToken>}\n     * @memberof RetriggerInstanceRequestDTO\n     */\n    'authTokens'?: Array<AuthToken>;\n}\n/**\n * \n * @export\n * @interface SearchRequest\n */\nexport interface SearchRequest {\n    /**\n     * \n     * @type {Filter}\n     * @memberof SearchRequest\n     */\n    'filters'?: Filter;\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof SearchRequest\n     */\n    'paginationInfo'?: PaginationInfoDTO;\n}\n/**\n * \n * @export\n * @interface WorkflowDTO\n */\nexport interface WorkflowDTO {\n    /**\n     * Workflow unique identifier\n     * @type {string}\n     * @memberof WorkflowDTO\n     */\n    'id': string;\n    /**\n     * Workflow name\n     * @type {string}\n     * @memberof WorkflowDTO\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {WorkflowFormatDTO}\n     * @memberof WorkflowDTO\n     */\n    'format': WorkflowFormatDTO;\n    /**\n     * Description of the workflow\n     * @type {string}\n     * @memberof WorkflowDTO\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkflowDTO\n     */\n    'annotations'?: Array<string>;\n}\n\n\n/**\n * \n * @export\n * @interface WorkflowDataDTO\n */\nexport interface WorkflowDataDTO {\n    /**\n     * \n     * @type {WorkflowResultDTO}\n     * @memberof WorkflowDataDTO\n     */\n    'result'?: WorkflowResultDTO;\n}\n/**\n * Format of the workflow definition\n * @export\n * @enum {string}\n */\n\nexport const WorkflowFormatDTO = {\n    Yaml: 'yaml',\n    Json: 'json'\n} as const;\n\nexport type WorkflowFormatDTO = typeof WorkflowFormatDTO[keyof typeof WorkflowFormatDTO];\n\n\n/**\n * \n * @export\n * @interface WorkflowListResultDTO\n */\nexport interface WorkflowListResultDTO {\n    /**\n     * \n     * @type {Array<WorkflowDTO>}\n     * @memberof WorkflowListResultDTO\n     */\n    'items': Array<WorkflowDTO>;\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof WorkflowListResultDTO\n     */\n    'paginationInfo': PaginationInfoDTO;\n}\n/**\n * \n * @export\n * @interface WorkflowOverviewDTO\n */\nexport interface WorkflowOverviewDTO {\n    /**\n     * Workflow unique identifier\n     * @type {string}\n     * @memberof WorkflowOverviewDTO\n     */\n    'workflowId': string;\n    /**\n     * Workflow name\n     * @type {string}\n     * @memberof WorkflowOverviewDTO\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {WorkflowFormatDTO}\n     * @memberof WorkflowOverviewDTO\n     */\n    'format': WorkflowFormatDTO;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowOverviewDTO\n     */\n    'lastRunId'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof WorkflowOverviewDTO\n     */\n    'lastTriggeredMs'?: number;\n    /**\n     * \n     * @type {ProcessInstanceStatusDTO}\n     * @memberof WorkflowOverviewDTO\n     */\n    'lastRunStatus'?: ProcessInstanceStatusDTO;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowOverviewDTO\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof WorkflowOverviewDTO\n     */\n    'isAvailable'?: boolean;\n}\n\n\n/**\n * \n * @export\n * @interface WorkflowOverviewListResultDTO\n */\nexport interface WorkflowOverviewListResultDTO {\n    /**\n     * \n     * @type {Array<WorkflowOverviewDTO>}\n     * @memberof WorkflowOverviewListResultDTO\n     */\n    'overviews'?: Array<WorkflowOverviewDTO>;\n    /**\n     * \n     * @type {PaginationInfoDTO}\n     * @memberof WorkflowOverviewListResultDTO\n     */\n    'paginationInfo'?: PaginationInfoDTO;\n}\n/**\n * \n * @export\n * @interface WorkflowProgressDTO\n */\nexport interface WorkflowProgressDTO {\n    /**\n     * Type name\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    '__typename'?: any;\n    /**\n     * Node instance ID\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'id': any;\n    /**\n     * Node name\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'name'?: any;\n    /**\n     * Node type\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'type'?: any;\n    /**\n     * Date when the node was entered\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'enter'?: any;\n    /**\n     * Date when the node was exited (optional)\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'exit'?: any;\n    /**\n     * Definition ID\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'definitionId'?: any;\n    /**\n     * Node ID\n     * @type {any}\n     * @memberof WorkflowProgressDTO\n     */\n    'nodeId'?: any;\n    /**\n     * \n     * @type {ProcessInstanceStatusDTO}\n     * @memberof WorkflowProgressDTO\n     */\n    'status'?: ProcessInstanceStatusDTO;\n    /**\n     * \n     * @type {ProcessInstanceErrorDTO}\n     * @memberof WorkflowProgressDTO\n     */\n    'error'?: ProcessInstanceErrorDTO;\n}\n\n\n/**\n * Result of a workflow execution\n * @export\n * @interface WorkflowResultDTO\n */\nexport interface WorkflowResultDTO {\n    /**\n     * High-level summary of the current status, free-form text, human readable.\n     * @type {string}\n     * @memberof WorkflowResultDTO\n     */\n    'message'?: string;\n    /**\n     * List of workflows suggested to run next. Items at lower indexes are of higher priority.\n     * @type {Array<WorkflowResultDTONextWorkflowsInner>}\n     * @memberof WorkflowResultDTO\n     */\n    'nextWorkflows'?: Array<WorkflowResultDTONextWorkflowsInner>;\n    /**\n     * Additional structured output of workflow processing. This can contain identifiers of created resources, links to resources, logs or other output.\n     * @type {Array<WorkflowResultDTOOutputsInner>}\n     * @memberof WorkflowResultDTO\n     */\n    'outputs'?: Array<WorkflowResultDTOOutputsInner>;\n}\n/**\n * \n * @export\n * @interface WorkflowResultDTONextWorkflowsInner\n */\nexport interface WorkflowResultDTONextWorkflowsInner {\n    /**\n     * Workflow identifier\n     * @type {string}\n     * @memberof WorkflowResultDTONextWorkflowsInner\n     */\n    'id': string;\n    /**\n     * Human readable title describing the workflow.\n     * @type {string}\n     * @memberof WorkflowResultDTONextWorkflowsInner\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface WorkflowResultDTOOutputsInner\n */\nexport interface WorkflowResultDTOOutputsInner {\n    /**\n     * Unique identifier of the option. Preferably human-readable.\n     * @type {string}\n     * @memberof WorkflowResultDTOOutputsInner\n     */\n    'key': string;\n    /**\n     * \n     * @type {WorkflowResultDTOOutputsInnerValue}\n     * @memberof WorkflowResultDTOOutputsInner\n     */\n    'value': WorkflowResultDTOOutputsInnerValue;\n    /**\n     * More detailed type of the \\'value\\' property. Defaults to \\'text\\'.\n     * @type {string}\n     * @memberof WorkflowResultDTOOutputsInner\n     */\n    'format'?: WorkflowResultDTOOutputsInnerFormatEnum;\n}\n\nexport const WorkflowResultDTOOutputsInnerFormatEnum = {\n    Text: 'text',\n    Number: 'number',\n    Link: 'link',\n    Markdown: 'markdown'\n} as const;\n\nexport type WorkflowResultDTOOutputsInnerFormatEnum = typeof WorkflowResultDTOOutputsInnerFormatEnum[keyof typeof WorkflowResultDTOOutputsInnerFormatEnum];\n\n/**\n * Free form value of the option.\n * @export\n * @interface WorkflowResultDTOOutputsInnerValue\n */\nexport interface WorkflowResultDTOOutputsInnerValue {\n}\n/**\n * \n * @export\n * @interface WorkflowRunStatusDTO\n */\nexport interface WorkflowRunStatusDTO {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowRunStatusDTO\n     */\n    'key'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowRunStatusDTO\n     */\n    'value'?: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Aborts a workflow instance identified by the provided instanceId.\n         * @summary Abort a workflow instance\n         * @param {string} instanceId The identifier of the workflow instance to abort.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        abortWorkflow: async (instanceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'instanceId' is not null or undefined\n            assertParamExists('abortWorkflow', 'instanceId', instanceId)\n            const localVarPath = `/v2/workflows/instances/{instanceId}/abort`\n                .replace(`{${\"instanceId\"}}`, encodeURIComponent(String(instanceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Execute a workflow\n         * @summary Execute a workflow\n         * @param {string} workflowId ID of the workflow to execute\n         * @param {ExecuteWorkflowRequestDTO} executeWorkflowRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        executeWorkflow: async (workflowId: string, executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('executeWorkflow', 'workflowId', workflowId)\n            // verify required parameter 'executeWorkflowRequestDTO' is not null or undefined\n            assertParamExists('executeWorkflow', 'executeWorkflowRequestDTO', executeWorkflowRequestDTO)\n            const localVarPath = `/v2/workflows/{workflowId}/execute`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(executeWorkflowRequestDTO, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a workflow execution/run (instance)\n         * @summary Get Workflow Instance by ID\n         * @param {string} instanceId ID of the workflow instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInstanceById: async (instanceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'instanceId' is not null or undefined\n            assertParamExists('getInstanceById', 'instanceId', instanceId)\n            const localVarPath = `/v2/workflows/instances/{instanceId}`\n                .replace(`{${\"instanceId\"}}`, encodeURIComponent(String(instanceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an array of workflow executions (instances)\n         * @summary Get instances\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInstances: async (searchRequest?: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/workflows/instances`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflow input schema. It defines the input fields of the workflow\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {string} [instanceId] ID of instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowInputSchemaById: async (workflowId: string, instanceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowInputSchemaById', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/inputSchema`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (instanceId !== undefined) {\n                localVarQueryParameter['instanceId'] = instanceId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an array of workflow executions (instances) for the given workflow\n         * @summary Get instances for a specific workflow\n         * @param {string} workflowId ID of the workflow\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving workflow instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowInstances: async (workflowId: string, searchRequest?: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowInstances', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/instances`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {string} workflowId Unique identifier of the workflow\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowOverviewById: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowOverviewById', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/overview`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflow\\'s definition\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowSourceById: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowSourceById', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/source`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve array with the status of all instances\n         * @summary Get workflow status list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowStatuses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/workflows/instances/statuses`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {SearchRequest} [searchRequest] Pagination and filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowsOverview: async (searchRequest?: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/workflows/overview`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {GetWorkflowsOverviewForEntityRequest} [getWorkflowsOverviewForEntityRequest] Target entity reference and annotation workflow ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowsOverviewForEntity: async (getWorkflowsOverviewForEntityRequest?: GetWorkflowsOverviewForEntityRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/workflows/overview/entity`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getWorkflowsOverviewForEntityRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns true if the workflow service is up for the given workflow ID.\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pingWorkflowServiceById: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('pingWorkflowServiceById', 'workflowId', workflowId)\n            const localVarPath = `/v2/workflows/{workflowId}/pingWorkflowService`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrigger an instance\n         * @summary Retrigger an instance\n         * @param {string} workflowId ID of the workflow\n         * @param {string} instanceId ID of the instance to retrigger\n         * @param {RetriggerInstanceRequestDTO} retriggerInstanceRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retriggerInstance: async (workflowId: string, instanceId: string, retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('retriggerInstance', 'workflowId', workflowId)\n            // verify required parameter 'instanceId' is not null or undefined\n            assertParamExists('retriggerInstance', 'instanceId', instanceId)\n            // verify required parameter 'retriggerInstanceRequestDTO' is not null or undefined\n            assertParamExists('retriggerInstance', 'retriggerInstanceRequestDTO', retriggerInstanceRequestDTO)\n            const localVarPath = `/v2/workflows/{workflowId}/{instanceId}/retrigger`\n                .replace(`{${\"workflowId\"}}`, encodeURIComponent(String(workflowId)))\n                .replace(`{${\"instanceId\"}}`, encodeURIComponent(String(instanceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(retriggerInstanceRequestDTO, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Aborts a workflow instance identified by the provided instanceId.\n         * @summary Abort a workflow instance\n         * @param {string} instanceId The identifier of the workflow instance to abort.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async abortWorkflow(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.abortWorkflow(instanceId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.abortWorkflow']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Execute a workflow\n         * @summary Execute a workflow\n         * @param {string} workflowId ID of the workflow to execute\n         * @param {ExecuteWorkflowRequestDTO} executeWorkflowRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async executeWorkflow(workflowId: string, executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecuteWorkflowResponseDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.executeWorkflow(workflowId, executeWorkflowRequestDTO, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.executeWorkflow']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get a workflow execution/run (instance)\n         * @summary Get Workflow Instance by ID\n         * @param {string} instanceId ID of the workflow instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getInstanceById(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstanceDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstanceById(instanceId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getInstanceById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an array of workflow executions (instances)\n         * @summary Get instances\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getInstances(searchRequest?: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstanceListResultDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances(searchRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getInstances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the workflow input schema. It defines the input fields of the workflow\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {string} [instanceId] ID of instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowInputSchemaById(workflowId: string, instanceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InputSchemaResponseDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowInputSchemaById(workflowId, instanceId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowInputSchemaById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an array of workflow executions (instances) for the given workflow\n         * @summary Get instances for a specific workflow\n         * @param {string} workflowId ID of the workflow\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving workflow instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowInstances(workflowId: string, searchRequest?: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstanceListResultDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowInstances(workflowId, searchRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowInstances']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {string} workflowId Unique identifier of the workflow\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowOverviewById(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowOverviewDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowOverviewById(workflowId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowOverviewById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the workflow\\'s definition\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowSourceById(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowSourceById(workflowId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowSourceById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve array with the status of all instances\n         * @summary Get workflow status list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowStatuses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowRunStatusDTO>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowStatuses(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowStatuses']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {SearchRequest} [searchRequest] Pagination and filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowsOverview(searchRequest?: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowOverviewListResultDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowsOverview(searchRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowsOverview']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {GetWorkflowsOverviewForEntityRequest} [getWorkflowsOverviewForEntityRequest] Target entity reference and annotation workflow ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest?: GetWorkflowsOverviewForEntityRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowOverviewListResultDTO>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkflowsOverviewForEntity']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns true if the workflow service is up for the given workflow ID.\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pingWorkflowServiceById(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.pingWorkflowServiceById(workflowId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.pingWorkflowServiceById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrigger an instance\n         * @summary Retrigger an instance\n         * @param {string} workflowId ID of the workflow\n         * @param {string} instanceId ID of the instance to retrigger\n         * @param {RetriggerInstanceRequestDTO} retriggerInstanceRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retriggerInstance(workflowId: string, instanceId: string, retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retriggerInstance(workflowId, instanceId, retriggerInstanceRequestDTO, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.retriggerInstance']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * Aborts a workflow instance identified by the provided instanceId.\n         * @summary Abort a workflow instance\n         * @param {string} instanceId The identifier of the workflow instance to abort.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        abortWorkflow(instanceId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.abortWorkflow(instanceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Execute a workflow\n         * @summary Execute a workflow\n         * @param {string} workflowId ID of the workflow to execute\n         * @param {ExecuteWorkflowRequestDTO} executeWorkflowRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        executeWorkflow(workflowId: string, executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO, options?: any): AxiosPromise<ExecuteWorkflowResponseDTO> {\n            return localVarFp.executeWorkflow(workflowId, executeWorkflowRequestDTO, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a workflow execution/run (instance)\n         * @summary Get Workflow Instance by ID\n         * @param {string} instanceId ID of the workflow instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInstanceById(instanceId: string, options?: any): AxiosPromise<ProcessInstanceDTO> {\n            return localVarFp.getInstanceById(instanceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an array of workflow executions (instances)\n         * @summary Get instances\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInstances(searchRequest?: SearchRequest, options?: any): AxiosPromise<ProcessInstanceListResultDTO> {\n            return localVarFp.getInstances(searchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflow input schema. It defines the input fields of the workflow\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {string} [instanceId] ID of instance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowInputSchemaById(workflowId: string, instanceId?: string, options?: any): AxiosPromise<InputSchemaResponseDTO> {\n            return localVarFp.getWorkflowInputSchemaById(workflowId, instanceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an array of workflow executions (instances) for the given workflow\n         * @summary Get instances for a specific workflow\n         * @param {string} workflowId ID of the workflow\n         * @param {SearchRequest} [searchRequest] Parameters for retrieving workflow instances\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowInstances(workflowId: string, searchRequest?: SearchRequest, options?: any): AxiosPromise<ProcessInstanceListResultDTO> {\n            return localVarFp.getWorkflowInstances(workflowId, searchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {string} workflowId Unique identifier of the workflow\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowOverviewById(workflowId: string, options?: any): AxiosPromise<WorkflowOverviewDTO> {\n            return localVarFp.getWorkflowOverviewById(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflow\\'s definition\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowSourceById(workflowId: string, options?: any): AxiosPromise<string> {\n            return localVarFp.getWorkflowSourceById(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve array with the status of all instances\n         * @summary Get workflow status list\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowStatuses(options?: any): AxiosPromise<Array<WorkflowRunStatusDTO>> {\n            return localVarFp.getWorkflowStatuses(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {SearchRequest} [searchRequest] Pagination and filters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowsOverview(searchRequest?: SearchRequest, options?: any): AxiosPromise<WorkflowOverviewListResultDTO> {\n            return localVarFp.getWorkflowsOverview(searchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the key fields of the workflow including data on the last run instance\n         * @param {GetWorkflowsOverviewForEntityRequest} [getWorkflowsOverviewForEntityRequest] Target entity reference and annotation workflow ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest?: GetWorkflowsOverviewForEntityRequest, options?: any): AxiosPromise<WorkflowOverviewListResultDTO> {\n            return localVarFp.getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns true if the workflow service is up for the given workflow ID.\n         * @param {string} workflowId ID of the workflow to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pingWorkflowServiceById(workflowId: string, options?: any): AxiosPromise<boolean> {\n            return localVarFp.pingWorkflowServiceById(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrigger an instance\n         * @summary Retrigger an instance\n         * @param {string} workflowId ID of the workflow\n         * @param {string} instanceId ID of the instance to retrigger\n         * @param {RetriggerInstanceRequestDTO} retriggerInstanceRequestDTO \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retriggerInstance(workflowId: string, instanceId: string, retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO, options?: any): AxiosPromise<object> {\n            return localVarFp.retriggerInstance(workflowId, instanceId, retriggerInstanceRequestDTO, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Aborts a workflow instance identified by the provided instanceId.\n     * @summary Abort a workflow instance\n     * @param {string} instanceId The identifier of the workflow instance to abort.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public abortWorkflow(instanceId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).abortWorkflow(instanceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Execute a workflow\n     * @summary Execute a workflow\n     * @param {string} workflowId ID of the workflow to execute\n     * @param {ExecuteWorkflowRequestDTO} executeWorkflowRequestDTO \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public executeWorkflow(workflowId: string, executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).executeWorkflow(workflowId, executeWorkflowRequestDTO, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a workflow execution/run (instance)\n     * @summary Get Workflow Instance by ID\n     * @param {string} instanceId ID of the workflow instance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getInstanceById(instanceId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getInstanceById(instanceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an array of workflow executions (instances)\n     * @summary Get instances\n     * @param {SearchRequest} [searchRequest] Parameters for retrieving instances\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getInstances(searchRequest?: SearchRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getInstances(searchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflow input schema. It defines the input fields of the workflow\n     * @param {string} workflowId ID of the workflow to fetch\n     * @param {string} [instanceId] ID of instance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowInputSchemaById(workflowId: string, instanceId?: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowInputSchemaById(workflowId, instanceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an array of workflow executions (instances) for the given workflow\n     * @summary Get instances for a specific workflow\n     * @param {string} workflowId ID of the workflow\n     * @param {SearchRequest} [searchRequest] Parameters for retrieving workflow instances\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowInstances(workflowId: string, searchRequest?: SearchRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowInstances(workflowId, searchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the key fields of the workflow including data on the last run instance\n     * @param {string} workflowId Unique identifier of the workflow\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowOverviewById(workflowId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowOverviewById(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflow\\'s definition\n     * @param {string} workflowId ID of the workflow to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowSourceById(workflowId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowSourceById(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve array with the status of all instances\n     * @summary Get workflow status list\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowStatuses(options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowStatuses(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the key fields of the workflow including data on the last run instance\n     * @param {SearchRequest} [searchRequest] Pagination and filters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowsOverview(searchRequest?: SearchRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowsOverview(searchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the key fields of the workflow including data on the last run instance\n     * @param {GetWorkflowsOverviewForEntityRequest} [getWorkflowsOverviewForEntityRequest] Target entity reference and annotation workflow ids\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest?: GetWorkflowsOverviewForEntityRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkflowsOverviewForEntity(getWorkflowsOverviewForEntityRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns true if the workflow service is up for the given workflow ID.\n     * @param {string} workflowId ID of the workflow to fetch\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public pingWorkflowServiceById(workflowId: string, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).pingWorkflowServiceById(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrigger an instance\n     * @summary Retrigger an instance\n     * @param {string} workflowId ID of the workflow\n     * @param {string} instanceId ID of the instance to retrigger\n     * @param {RetriggerInstanceRequestDTO} retriggerInstanceRequestDTO \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public retriggerInstance(workflowId: string, instanceId: string, retriggerInstanceRequestDTO: RetriggerInstanceRequestDTO, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).retriggerInstance(workflowId, instanceId, retriggerInstanceRequestDTO, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n"],"names":["assertParamExists","DUMMY_BASE_URL","setSearchParams","toPathString","serializeDataIfNeeded","operationServerMap","createRequestFunction","globalAxios","BASE_PATH","BaseAPI"],"mappings":"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"}