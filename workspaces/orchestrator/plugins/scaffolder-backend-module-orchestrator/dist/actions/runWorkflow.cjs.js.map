{"version":3,"file":"runWorkflow.cjs.js","sources":["../../src/actions/runWorkflow.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AuthService } from '@backstage/backend-plugin-api';\nimport { DiscoveryApi } from '@backstage/plugin-permission-common';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\n\nimport { isAxiosError } from 'axios';\n\nimport { getOrchestratorApi, getRequestConfigOption } from './utils';\n\nconst getError = (err: unknown): Error => {\n  if (\n    isAxiosError<{ error: { message: string; name: string } }>(err) &&\n    err.response?.data?.error?.message\n  ) {\n    const error = new Error(err.response?.data?.error?.message);\n    error.name = err.response?.data?.error?.name || 'Error';\n    return error;\n  }\n  return err as Error;\n};\n\nexport function createRunWorkflowAction(\n  discoveryService: DiscoveryApi,\n  authService: AuthService,\n) {\n  return createTemplateAction({\n    id: 'orchestrator:workflow:run',\n    description: 'Run a SonataFlow workflow.',\n    supportsDryRun: true,\n    schema: {\n      input: {\n        workflow_id: z =>\n          z\n            .string()\n            .describe('The workflow identifier from the workflow definition.'),\n        target_entity: z =>\n          z\n            .string()\n            .optional()\n            .describe('The target entity to run the workflow on.'),\n        parameters: z =>\n          z.record(z.string(), z.any()).describe('The workflow inputs.'),\n      },\n    },\n    async handler(ctx) {\n      const template_entity = ctx.templateInfo?.entityRef;\n      if (!template_entity) {\n        throw new Error('No template entity');\n      }\n      const targetEntity =\n        ctx.input.target_entity?.toString() ?? template_entity?.toString();\n\n      const [targetEntityKind, targetEntityNamespace, targetEntityName] =\n        targetEntity?.split(/[:\\/]/) || [];\n\n      if (!ctx.input.workflow_id) {\n        throw new Error(\n          \"Missing required 'workflow_id' input. Ensure that the step invoking the 'orchestrator:workflow:run' action includes an explicit 'workflow_id' field in its input.\",\n        );\n      }\n\n      const api = await getOrchestratorApi(discoveryService);\n      const reqConfigOption = await getRequestConfigOption(authService, ctx);\n\n      // If this is a dry run, log and return\n      if (ctx.isDryRun) {\n        ctx.logger.info(`Dry run complete`);\n        return;\n      }\n\n      try {\n        const { data } = await api.executeWorkflow(\n          ctx.input.workflow_id,\n          {\n            inputData: ctx.input.parameters,\n            targetEntity,\n          },\n          reqConfigOption,\n        );\n        ctx.output(\n          'instanceUrl',\n          `/orchestrator/entity/${targetEntityNamespace}/${targetEntityKind}/${targetEntityName}/${ctx.input.workflow_id}/${data.id}`,\n        );\n      } catch (err) {\n        throw getError(err);\n      }\n    },\n  });\n}\n"],"names":["isAxiosError","createTemplateAction","getOrchestratorApi","getRequestConfigOption"],"mappings":";;;;;;AAuBA,MAAM,QAAA,GAAW,CAAC,GAAA,KAAwB;AACxC,EAAA,IACEA,mBAA2D,GAAG,CAAA,IAC9D,IAAI,QAAA,EAAU,IAAA,EAAM,OAAO,OAAA,EAC3B;AACA,IAAA,MAAM,QAAQ,IAAI,KAAA,CAAM,IAAI,QAAA,EAAU,IAAA,EAAM,OAAO,OAAO,CAAA;AAC1D,IAAA,KAAA,CAAM,IAAA,GAAO,GAAA,CAAI,QAAA,EAAU,IAAA,EAAM,OAAO,IAAA,IAAQ,OAAA;AAChD,IAAA,OAAO,KAAA;AAAA,EACT;AACA,EAAA,OAAO,GAAA;AACT,CAAA;AAEO,SAAS,uBAAA,CACd,kBACA,WAAA,EACA;AACA,EAAA,OAAOC,yCAAA,CAAqB;AAAA,IAC1B,EAAA,EAAI,2BAAA;AAAA,IACJ,WAAA,EAAa,4BAAA;AAAA,IACb,cAAA,EAAgB,IAAA;AAAA,IAChB,MAAA,EAAQ;AAAA,MACN,KAAA,EAAO;AAAA,QACL,aAAa,CAAA,CAAA,KACX,CAAA,CACG,MAAA,EAAO,CACP,SAAS,uDAAuD,CAAA;AAAA,QACrE,aAAA,EAAe,OACb,CAAA,CACG,MAAA,GACA,QAAA,EAAS,CACT,SAAS,2CAA2C,CAAA;AAAA,QACzD,UAAA,EAAY,CAAA,CAAA,KACV,CAAA,CAAE,MAAA,CAAO,CAAA,CAAE,MAAA,EAAO,EAAG,CAAA,CAAE,GAAA,EAAK,CAAA,CAAE,QAAA,CAAS,sBAAsB;AAAA;AACjE,KACF;AAAA,IACA,MAAM,QAAQ,GAAA,EAAK;AACjB,MAAA,MAAM,eAAA,GAAkB,IAAI,YAAA,EAAc,SAAA;AAC1C,MAAA,IAAI,CAAC,eAAA,EAAiB;AACpB,QAAA,MAAM,IAAI,MAAM,oBAAoB,CAAA;AAAA,MACtC;AACA,MAAA,MAAM,eACJ,GAAA,CAAI,KAAA,CAAM,eAAe,QAAA,EAAS,IAAK,iBAAiB,QAAA,EAAS;AAEnE,MAAA,MAAM,CAAC,kBAAkB,qBAAA,EAAuB,gBAAgB,IAC9D,YAAA,EAAc,KAAA,CAAM,OAAO,CAAA,IAAK,EAAC;AAEnC,MAAA,IAAI,CAAC,GAAA,CAAI,KAAA,CAAM,WAAA,EAAa;AAC1B,QAAA,MAAM,IAAI,KAAA;AAAA,UACR;AAAA,SACF;AAAA,MACF;AAEA,MAAA,MAAM,GAAA,GAAM,MAAMC,wBAAA,CAAmB,gBAAgB,CAAA;AACrD,MAAA,MAAM,eAAA,GAAkB,MAAMC,4BAAA,CAAuB,WAAA,EAAa,GAAG,CAAA;AAGrE,MAAA,IAAI,IAAI,QAAA,EAAU;AAChB,QAAA,GAAA,CAAI,MAAA,CAAO,KAAK,CAAA,gBAAA,CAAkB,CAAA;AAClC,QAAA;AAAA,MACF;AAEA,MAAA,IAAI;AACF,QAAA,MAAM,EAAE,IAAA,EAAK,GAAI,MAAM,GAAA,CAAI,eAAA;AAAA,UACzB,IAAI,KAAA,CAAM,WAAA;AAAA,UACV;AAAA,YACE,SAAA,EAAW,IAAI,KAAA,CAAM,UAAA;AAAA,YACrB;AAAA,WACF;AAAA,UACA;AAAA,SACF;AACA,QAAA,GAAA,CAAI,MAAA;AAAA,UACF,aAAA;AAAA,UACA,CAAA,qBAAA,EAAwB,qBAAqB,CAAA,CAAA,EAAI,gBAAgB,CAAA,CAAA,EAAI,gBAAgB,CAAA,CAAA,EAAI,GAAA,CAAI,KAAA,CAAM,WAAW,CAAA,CAAA,EAAI,IAAA,CAAK,EAAE,CAAA;AAAA,SAC3H;AAAA,MACF,SAAS,GAAA,EAAK;AACZ,QAAA,MAAM,SAAS,GAAG,CAAA;AAAA,MACpB;AAAA,IACF;AAAA,GACD,CAAA;AACH;;;;"}