{"version":3,"file":"utils.cjs.js","sources":["../../src/actions/utils.ts"],"sourcesContent":["/*\n * Copyright Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AuthService } from '@backstage/backend-plugin-api';\nimport { DiscoveryApi } from '@backstage/plugin-permission-common';\n\nimport axios, { AxiosRequestConfig, isAxiosError } from 'axios';\n\nimport {\n  Configuration,\n  DefaultApi,\n} from '@redhat/backstage-plugin-orchestrator-common';\n\nexport const getError = (err: unknown): Error => {\n  if (\n    isAxiosError<{ error: { message: string; name: string } }>(err) &&\n    err.response?.data?.error?.message\n  ) {\n    const error = new Error(err.response?.data?.error?.message);\n    error.name = err.response?.data?.error?.name || 'Error';\n    return error;\n  }\n  return err as Error;\n};\n\nexport const getOrchestratorApi = async (\n  discoveryService: DiscoveryApi,\n): Promise<DefaultApi> => {\n  const baseUrl = await discoveryService.getBaseUrl('orchestrator');\n  const config = new Configuration({});\n\n  const axiosInstance = axios.create({\n    baseURL: baseUrl,\n  });\n  const api = new DefaultApi(config, baseUrl, axiosInstance);\n\n  return api;\n};\nexport const getRequestConfigOption = async (\n  authService: AuthService,\n  ctx: any,\n) => {\n  const { token } = (await authService.getPluginRequestToken({\n    onBehalfOf: await ctx.getInitiatorCredentials(),\n    targetPluginId: 'orchestrator',\n  })) ?? { token: ctx.secrets?.backstageToken };\n\n  const reqConfigOption: AxiosRequestConfig = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n\n  return reqConfigOption;\n};\n"],"names":["Configuration","axios","DefaultApi"],"mappings":";;;;;;;;;AAqCO,MAAM,kBAAA,GAAqB,OAChC,gBAAA,KACwB;AACxB,EAAA,MAAM,OAAA,GAAU,MAAM,gBAAA,CAAiB,UAAA,CAAW,cAAc,CAAA;AAChE,EAAA,MAAM,MAAA,GAAS,IAAIA,+CAAA,CAAc,EAAE,CAAA;AAEnC,EAAA,MAAM,aAAA,GAAgBC,uBAAM,MAAA,CAAO;AAAA,IACjC,OAAA,EAAS;AAAA,GACV,CAAA;AACD,EAAA,MAAM,GAAA,GAAM,IAAIC,4CAAA,CAAW,MAAA,EAAQ,SAAS,aAAa,CAAA;AAEzD,EAAA,OAAO,GAAA;AACT;AACO,MAAM,sBAAA,GAAyB,OACpC,WAAA,EACA,GAAA,KACG;AACH,EAAA,MAAM,EAAE,KAAA,EAAM,GAAK,MAAM,YAAY,qBAAA,CAAsB;AAAA,IACzD,UAAA,EAAY,MAAM,GAAA,CAAI,uBAAA,EAAwB;AAAA,IAC9C,cAAA,EAAgB;AAAA,GACjB,CAAA,IAAM,EAAE,KAAA,EAAO,GAAA,CAAI,SAAS,cAAA,EAAe;AAE5C,EAAA,MAAM,eAAA,GAAsC;AAAA,IAC1C,OAAA,EAAS;AAAA,MACP,aAAA,EAAe,UAAU,KAAK,CAAA;AAAA;AAChC,GACF;AAEA,EAAA,OAAO,eAAA;AACT;;;;;"}